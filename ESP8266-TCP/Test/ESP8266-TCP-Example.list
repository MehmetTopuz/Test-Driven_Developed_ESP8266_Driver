
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023240  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000066dc  08023420  08023420  00033420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029afc  08029afc  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08029afc  08029afc  00039afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029b04  08029b04  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08029b04  08029b04  00039b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08029b14  08029b14  00039b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08029b24  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c5c  2000033c  08029e60  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f98  08029e60  00040f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006ab80  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c13e  00000000  00000000  000aaeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000044f0  00000000  00000000  000b7030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000042d0  00000000  00000000  000bb520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d891  00000000  00000000  000bf7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d50b  00000000  00000000  000ed081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001143af  00000000  00000000  0011a58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022e93b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014d6c  00000000  00000000  0022e990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080233fc 	.word	0x080233fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	080233fc 	.word	0x080233fc

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000040c 	.word	0x2000040c

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01e fe46 	bl	801f9fc <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01e fd9e 	bl	801f9fc <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000f98 	.word	0x20000f98

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01f f975 	bl	8020238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f003 f87d 	bl	800404c <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08029b24 	.word	0x08029b24
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000f98 	.word	0x20000f98

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000f84 	.word	0x20000f84
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000f84 	.word	0x20000f84

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08026974 	.word	0x08026974
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08026984 	.word	0x08026984

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08026984 	.word	0x08026984

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	0802698c 	.word	0x0802698c
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	080269a4 	.word	0x080269a4
 8003904:	080269ac 	.word	0x080269ac

08003908 <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01d      	beq.n	8003958 <ESP_Init+0x50>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01a      	beq.n	8003958 <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d017      	beq.n	8003958 <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <ESP_Init+0x5c>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <ESP_Init+0x5c>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a0b      	ldr	r2, [pc, #44]	; (8003964 <ESP_Init+0x5c>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 fa98 	bl	8003e70 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a09      	ldr	r2, [pc, #36]	; (8003968 <ESP_Init+0x60>)
 8003944:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <ESP_Init+0x60>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <ESP_Init+0x4a>
			return 1;
 800394e:	2301      	movs	r3, #1
 8003950:	e004      	b.n	800395c <ESP_Init+0x54>
		else
			return -1;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	e001      	b.n	800395c <ESP_Init+0x54>
	}
	else
	{
		return -1;
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000360 	.word	0x20000360
 8003968:	2000049c 	.word	0x2000049c

0800396c <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <Send_AT_Command+0x18>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000360 	.word	0x20000360

08003988 <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 8003988:	b598      	push	{r3, r4, r7, lr}
 800398a:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <ESP_UART_ReceiveHandler+0x1c>)
 800398e:	681c      	ldr	r4, [r3, #0]
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <ESP_UART_ReceiveHandler+0x20>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4798      	blx	r3
 8003996:	4603      	mov	r3, r0
 8003998:	4619      	mov	r1, r3
 800399a:	4620      	mov	r0, r4
 800399c:	f000 faa9 	bl	8003ef2 <ringBuffer_push>
}
 80039a0:	bf00      	nop
 80039a2:	bd98      	pop	{r3, r4, r7, pc}
 80039a4:	2000049c 	.word	0x2000049c
 80039a8:	20000360 	.word	0x20000360

080039ac <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <Read_Response+0x20>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fb23 	bl	8004006 <ringBuffer_lookFor>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	2000049c 	.word	0x2000049c

080039d0 <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039da:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <Wait_Response+0x74>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d108      	bne.n	80039f4 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e2:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <Wait_Response+0x78>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	4798      	blx	r3
 80039e8:	4603      	mov	r3, r0
 80039ea:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <Wait_Response+0x7c>)
 80039ec:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039ee:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <Wait_Response+0x74>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f4:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <Wait_Response+0x80>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fb03 	bl	8004006 <ringBuffer_lookFor>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <Wait_Response+0x46>
	{
		firstCall = 0;
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <Wait_Response+0x74>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <Wait_Response+0x7c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e012      	b.n	8003a3c <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <Wait_Response+0x78>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4798      	blx	r3
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <Wait_Response+0x7c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d807      	bhi.n	8003a3a <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <Wait_Response+0x74>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <Wait_Response+0x7c>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003a3a:	2304      	movs	r3, #4
	}

}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2000036c 	.word	0x2000036c
 8003a48:	20000360 	.word	0x20000360
 8003a4c:	20000370 	.word	0x20000370
 8003a50:	2000049c 	.word	0x2000049c

08003a54 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b098      	sub	sp, #96	; 0x60
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003a5e:	4a16      	ldr	r2, [pc, #88]	; (8003ab8 <Connect_Wifi+0x64>)
 8003a60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a64:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003a6a:	4a14      	ldr	r2, [pc, #80]	; (8003abc <Connect_Wifi+0x68>)
 8003a6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a70:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003a76:	2304      	movs	r3, #4
 8003a78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003a7c:	f107 0008 	add.w	r0, r7, #8
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <Connect_Wifi+0x6c>)
 8003a88:	490e      	ldr	r1, [pc, #56]	; (8003ac4 <Connect_Wifi+0x70>)
 8003a8a:	f01c ff49 	bl	8020920 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003a8e:	f107 0308 	add.w	r3, r7, #8
 8003a92:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003a94:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003a98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f82e 	bl	8003b00 <Command_Process>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003aaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3758      	adds	r7, #88	; 0x58
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	0802348c 	.word	0x0802348c
 8003abc:	08023498 	.word	0x08023498
 8003ac0:	08023470 	.word	0x08023470
 8003ac4:	0802347c 	.word	0x0802347c

08003ac8 <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <Disconnect_Wifi+0x30>)
 8003ad0:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <Disconnect_Wifi+0x34>)
 8003ad4:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003ada:	1d39      	adds	r1, r7, #4
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f80c 	bl	8003b00 <Command_Process>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]

}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	08023430 	.word	0x08023430
 8003afc:	08023440 	.word	0x08023440

08003b00 <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <Command_Process+0x1e>
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <Command_Process+0xfc>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	79fa      	ldrb	r2, [r7, #7]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d806      	bhi.n	8003b2c <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003b1e:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <Command_Process+0x100>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fa39 	bl	8003f9a <ringBuffer_flush>
		return STATUS_ERROR;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e062      	b.n	8003bf2 <Command_Process+0xf2>
	}
	else
	{
		if(commandFlag)
 8003b2c:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <Command_Process+0x104>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003b34:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <Command_Process+0xfc>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff13 	bl	800396c <Send_AT_Command>
			commandFlag = 0;
 8003b46:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <Command_Process+0x104>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], 5000);
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <Command_Process+0xfc>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4413      	add	r3, r2
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff ff37 	bl	80039d0 <Wait_Response>
 8003b62:	4603      	mov	r3, r0
 8003b64:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003b66:	4828      	ldr	r0, [pc, #160]	; (8003c08 <Command_Process+0x108>)
 8003b68:	f7ff ff20 	bl	80039ac <Read_Response>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00c      	beq.n	8003b8c <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003b72:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <Command_Process+0x104>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003b78:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <Command_Process+0xfc>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003b7e:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <Command_Process+0x100>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fa09 	bl	8003f9a <ringBuffer_flush>
				return STATUS_ERROR;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e032      	b.n	8003bf2 <Command_Process+0xf2>
			}
			else if(response == IDLE)
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d101      	bne.n	8003b96 <Command_Process+0x96>
			{
				return response;
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	e02d      	b.n	8003bf2 <Command_Process+0xf2>
			}
			else if(response == FOUND)
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d123      	bne.n	8003be4 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003b9c:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <Command_Process+0xfc>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d10c      	bne.n	8003bc4 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003baa:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <Command_Process+0x104>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003bb0:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <Command_Process+0xfc>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <Command_Process+0x100>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f9ed 	bl	8003f9a <ringBuffer_flush>
					return STATUS_OK;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e016      	b.n	8003bf2 <Command_Process+0xf2>
				}
				else
				{
					commandFlag = 1;
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <Command_Process+0x104>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <Command_Process+0xfc>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <Command_Process+0xfc>)
 8003bd4:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <Command_Process+0x100>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f9dd 	bl	8003f9a <ringBuffer_flush>
					return response;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	e006      	b.n	8003bf2 <Command_Process+0xf2>
				}

			}
			else
			{
				commandFlag = 1;
 8003be4:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <Command_Process+0x104>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003bea:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <Command_Process+0xfc>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
				return response;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000374 	.word	0x20000374
 8003c00:	2000049c 	.word	0x2000049c
 8003c04:	20000010 	.word	0x20000010
 8003c08:	080234a4 	.word	0x080234a4

08003c0c <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(char* ip, char* port)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b0a4      	sub	sp, #144	; 0x90
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003c16:	2304      	movs	r3, #4
 8003c18:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char *command_buffer[3] =
 8003c1c:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <Connect_TCP_Server+0x64>)
 8003c1e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c22:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_CIPCLOSE,
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[3] =
 8003c28:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <Connect_TCP_Server+0x68>)
 8003c2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003c34:	f107 0008 	add.w	r0, r7, #8
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <Connect_TCP_Server+0x6c>)
 8003c40:	490e      	ldr	r1, [pc, #56]	; (8003c7c <Connect_TCP_Server+0x70>)
 8003c42:	f01c fe6d 	bl	8020920 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003c4e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003c52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c56:	2203      	movs	r2, #3
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff ff51 	bl	8003b00 <Command_Process>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	return response_state;
 8003c64:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3788      	adds	r7, #136	; 0x88
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	080234cc 	.word	0x080234cc
 8003c74:	08023498 	.word	0x08023498
 8003c78:	080234ac 	.word	0x080234ac
 8003c7c:	080234c0 	.word	0x080234c0

08003c80 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003c86:	2304      	movs	r3, #4
 8003c88:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <Disconnect_TCP_Server+0x30>)
 8003c8c:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <Disconnect_TCP_Server+0x34>)
 8003c90:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003c92:	1d39      	adds	r1, r7, #4
 8003c94:	f107 0308 	add.w	r3, r7, #8
 8003c98:	2201      	movs	r2, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff ff30 	bl	8003b00 <Command_Process>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]

}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	08023444 	.word	0x08023444
 8003cb4:	08023440 	.word	0x08023440

08003cb8 <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b096      	sub	sp, #88	; 0x58
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fc fab6 	bl	800023c <strlen>
 8003cd0:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 8003cd2:	f107 001c 	add.w	r0, r7, #28
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd8:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <Send_TCP_Message+0x64>)
 8003cda:	4911      	ldr	r1, [pc, #68]	; (8003d20 <Send_TCP_Message+0x68>)
 8003cdc:	f01c fe20 	bl	8020920 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8003ce0:	f107 031c 	add.w	r3, r7, #28
 8003ce4:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 8003cea:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <Send_TCP_Message+0x6c>)
 8003cec:	f107 030c 	add.w	r3, r7, #12
 8003cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cf4:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003cf8:	f107 010c 	add.w	r1, r7, #12
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	2202      	movs	r2, #2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fefc 	bl	8003b00 <Command_Process>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 8003d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3758      	adds	r7, #88	; 0x58
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	080234d8 	.word	0x080234d8
 8003d20:	080234e4 	.word	0x080234e4
 8003d24:	080234ec 	.word	0x080234ec

08003d28 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 8003d30:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <Read_TCP_Message+0xc4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	492e      	ldr	r1, [pc, #184]	; (8003df0 <Read_TCP_Message+0xc8>)
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f01d fbb3 	bl	80214a4 <strstr>
 8003d3e:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d043      	beq.n	8003dd6 <Read_TCP_Message+0xae>
	{
		for(uint8_t i=0;i<3;i++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	76fb      	strb	r3, [r7, #27]
 8003d52:	e017      	b.n	8003d84 <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 8003d54:	7efb      	ldrb	r3, [r7, #27]
 8003d56:	3305      	adds	r3, #5
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b3a      	cmp	r3, #58	; 0x3a
 8003d60:	d014      	beq.n	8003d8c <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 8003d62:	7efb      	ldrb	r3, [r7, #27]
 8003d64:	3305      	adds	r3, #5
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	441a      	add	r2, r3
 8003d6a:	7efb      	ldrb	r3, [r7, #27]
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	f107 0120 	add.w	r1, r7, #32
 8003d72:	440b      	add	r3, r1
 8003d74:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 8003d7e:	7efb      	ldrb	r3, [r7, #27]
 8003d80:	3301      	adds	r3, #1
 8003d82:	76fb      	strb	r3, [r7, #27]
 8003d84:	7efb      	ldrb	r3, [r7, #27]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d9e4      	bls.n	8003d54 <Read_TCP_Message+0x2c>
 8003d8a:	e000      	b.n	8003d8e <Read_TCP_Message+0x66>
				break;
 8003d8c:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8003d8e:	f107 0308 	add.w	r3, r7, #8
 8003d92:	4618      	mov	r0, r3
 8003d94:	f01b fe25 	bl	801f9e2 <atoi>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<=messageLength+1;i++)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	e00d      	b.n	8003dbe <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4413      	add	r3, r2
 8003da8:	3306      	adds	r3, #6
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	441a      	add	r2, r3
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	440b      	add	r3, r1
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<=messageLength+1;i++)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d9ec      	bls.n	8003da2 <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <Read_TCP_Message+0xc4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f8e4 	bl	8003f9a <ringBuffer_flush>
		return STATUS_OK;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e005      	b.n	8003de2 <Read_TCP_Message+0xba>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <Read_TCP_Message+0xc4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f8dd 	bl	8003f9a <ringBuffer_flush>
		return STATUS_ERROR;
 8003de0:	2303      	movs	r3, #3
	}



}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	2000049c 	.word	0x2000049c
 8003df0:	080234f4 	.word	0x080234f4

08003df4 <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8003dfe:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <Wait_TCP_Message+0x70>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 8003e06:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <Wait_TCP_Message+0x74>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4798      	blx	r3
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <Wait_TCP_Message+0x78>)
 8003e10:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <Wait_TCP_Message+0x70>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff85 	bl	8003d28 <Read_TCP_Message>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d107      	bne.n	8003e34 <Wait_TCP_Message+0x40>
	{
		time = 0;
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <Wait_TCP_Message+0x78>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <Wait_TCP_Message+0x70>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 8003e30:	2302      	movs	r3, #2
 8003e32:	e012      	b.n	8003e5a <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <Wait_TCP_Message+0x74>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4798      	blx	r3
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <Wait_TCP_Message+0x78>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d807      	bhi.n	8003e58 <Wait_TCP_Message+0x64>
	{
		time = 0;
 8003e48:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <Wait_TCP_Message+0x78>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <Wait_TCP_Message+0x70>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 8003e58:	2304      	movs	r3, #4

}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000011 	.word	0x20000011
 8003e68:	20000360 	.word	0x20000360
 8003e6c:	20000378 	.word	0x20000378

08003e70 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003e78:	2010      	movs	r0, #16
 8003e7a:	f01c fb7f 	bl	802057c <malloc>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e017      	b.n	8003ebc <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f01b fda3 	bl	801f9ec <calloc>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003eba:	68fb      	ldr	r3, [r7, #12]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f01c fb54 	bl	802058c <free>
		}
		free(buffer);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f01c fb51 	bl	802058c <free>
	}
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d00c      	beq.n	8003f26 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4413      	add	r3, r2
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003f24:	e009      	b.n	8003f3a <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4413      	add	r3, r2
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d00d      	beq.n	8003f78 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	605a      	str	r2, [r3, #4]
		return data;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	e00a      	b.n	8003f8e <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	605a      	str	r2, [r3, #4]
		return data;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68d8      	ldr	r0, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	461a      	mov	r2, r3
 8003fac:	2100      	movs	r1, #0
 8003fae:	f01c fb03 	bl	80205b8 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	601a      	str	r2, [r3, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e00a      	b.n	8003fee <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	4413      	add	r3, r2
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ff85 	bl	8003ef2 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	6838      	ldr	r0, [r7, #0]
 8003ff0:	f7fc f924 	bl	800023c <strlen>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d8ed      	bhi.n	8003fd8 <ringBuffer_pushArray+0x10>
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	6839      	ldr	r1, [r7, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f01d fa44 	bl	80214a4 <strstr>
 800401c:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <ringBuffer_lookFor+0x22>
		return 1;
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <ringBuffer_lookFor+0x24>
	else
		return 0;
 8004028:	2300      	movs	r3, #0

}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004052:	f7fc ff8c 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004056:	f000 f81d 	bl	8004094 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800405a:	f000 f951 	bl	8004300 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 800405e:	f000 f891 	bl	8004184 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8004062:	f000 f8ed 	bl	8004240 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8004066:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <main+0x44>)
 8004068:	463b      	mov	r3, r7
 800406a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800406e:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8004072:	463b      	mov	r3, r7
 8004074:	4619      	mov	r1, r3
 8004076:	2002      	movs	r0, #2
 8004078:	f004 fd28 	bl	8008acc <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // optional
 800407c:	2120      	movs	r1, #32
 800407e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004082:	f7fd fb71 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8004086:	2064      	movs	r0, #100	; 0x64
 8004088:	f7fc ffe2 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // optional
 800408c:	e7f6      	b.n	800407c <main+0x30>
 800408e:	bf00      	nop
 8004090:	08023504 	.word	0x08023504

08004094 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b0a8      	sub	sp, #160	; 0xa0
 8004098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800409a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800409e:	2238      	movs	r2, #56	; 0x38
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f01c fa88 	bl	80205b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040b8:	463b      	mov	r3, r7
 80040ba:	2254      	movs	r2, #84	; 0x54
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f01c fa7a 	bl	80205b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fd fb8d 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040ca:	2302      	movs	r3, #2
 80040cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040d4:	2340      	movs	r3, #64	; 0x40
 80040d6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040d8:	2302      	movs	r3, #2
 80040da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040de:	2302      	movs	r3, #2
 80040e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80040e4:	2304      	movs	r3, #4
 80040e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80040ea:	2355      	movs	r3, #85	; 0x55
 80040ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040f0:	2302      	movs	r3, #2
 80040f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80040f6:	2302      	movs	r3, #2
 80040f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80040fc:	2302      	movs	r3, #2
 80040fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004102:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd fc20 	bl	800194c <HAL_RCC_OscConfig>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf14      	ite	ne
 8004112:	2301      	movne	r3, #1
 8004114:	2300      	moveq	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 800411c:	f000 f960 	bl	80043e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004120:	230f      	movs	r3, #15
 8004122:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004124:	2303      	movs	r3, #3
 8004126:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004128:	2300      	movs	r3, #0
 800412a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800412c:	2300      	movs	r3, #0
 800412e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004130:	2300      	movs	r3, #0
 8004132:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004134:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004138:	2104      	movs	r1, #4
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd ff1e 	bl	8001f7c <HAL_RCC_ClockConfig>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8004150:	f000 f946 	bl	80043e0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8004154:	2321      	movs	r3, #33	; 0x21
 8004156:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004158:	2300      	movs	r3, #0
 800415a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800415c:	2300      	movs	r3, #0
 800415e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004160:	463b      	mov	r3, r7
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe f926 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8004178:	f000 f932 	bl	80043e0 <Error_Handler>
  }
}
 800417c:	bf00      	nop
 800417e:	37a0      	adds	r7, #160	; 0xa0
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800418a:	4a2c      	ldr	r2, [pc, #176]	; (800423c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800418c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800418e:	4b2a      	ldr	r3, [pc, #168]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004194:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004196:	4b28      	ldr	r3, [pc, #160]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800419c:	4b26      	ldr	r3, [pc, #152]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800419e:	2200      	movs	r2, #0
 80041a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80041a2:	4b25      	ldr	r3, [pc, #148]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80041a8:	4b23      	ldr	r3, [pc, #140]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041aa:	220c      	movs	r2, #12
 80041ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041b4:	4b20      	ldr	r3, [pc, #128]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041ba:	4b1f      	ldr	r3, [pc, #124]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041bc:	2200      	movs	r2, #0
 80041be:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041c0:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80041c6:	481c      	ldr	r0, [pc, #112]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041c8:	f7fe fb40 	bl	800284c <HAL_UART_Init>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80041dc:	f000 f900 	bl	80043e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041e0:	2100      	movs	r1, #0
 80041e2:	4815      	ldr	r0, [pc, #84]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041e4:	f7ff fac6 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 80041f8:	f000 f8f2 	bl	80043e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041fc:	2100      	movs	r1, #0
 80041fe:	480e      	ldr	r0, [pc, #56]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004200:	f7ff faf6 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8004214:	f000 f8e4 	bl	80043e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004218:	4807      	ldr	r0, [pc, #28]	; (8004238 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800421a:	f7ff fa72 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 800422e:	f000 f8d7 	bl	80043e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000037c 	.word	0x2000037c
 800423c:	40008000 	.word	0x40008000

08004240 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004244:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004246:	4a2d      	ldr	r2, [pc, #180]	; (80042fc <_ZL19MX_USART1_UART_Initv+0xbc>)
 8004248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800424a:	4b2b      	ldr	r3, [pc, #172]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800424c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004252:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004254:	2200      	movs	r2, #0
 8004256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800425a:	2200      	movs	r2, #0
 800425c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800425e:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004260:	2200      	movs	r2, #0
 8004262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004266:	220c      	movs	r2, #12
 8004268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800426a:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004270:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004272:	2200      	movs	r2, #0
 8004274:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004278:	2200      	movs	r2, #0
 800427a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800427c:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800427e:	2200      	movs	r2, #0
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004284:	2200      	movs	r2, #0
 8004286:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004288:	481b      	ldr	r0, [pc, #108]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800428a:	f7fe fadf 	bl	800284c <HAL_UART_Init>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf14      	ite	ne
 8004294:	2301      	movne	r3, #1
 8004296:	2300      	moveq	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800429e:	f000 f89f 	bl	80043e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042a2:	2100      	movs	r1, #0
 80042a4:	4814      	ldr	r0, [pc, #80]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042a6:	f7ff fa65 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bf14      	ite	ne
 80042b0:	2301      	movne	r3, #1
 80042b2:	2300      	moveq	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80042ba:	f000 f891 	bl	80043e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042be:	2100      	movs	r1, #0
 80042c0:	480d      	ldr	r0, [pc, #52]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042c2:	f7ff fa95 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80042d6:	f000 f883 	bl	80043e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042da:	4807      	ldr	r0, [pc, #28]	; (80042f8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042dc:	f7ff fa11 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bf14      	ite	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	2300      	moveq	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80042f0:	f000 f876 	bl	80043e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042f4:	bf00      	nop
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	2000040c 	.word	0x2000040c
 80042fc:	40013800 	.word	0x40013800

08004300 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08a      	sub	sp, #40	; 0x28
 8004304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]
 8004310:	609a      	str	r2, [r3, #8]
 8004312:	60da      	str	r2, [r3, #12]
 8004314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004316:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	4a2e      	ldr	r2, [pc, #184]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004322:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800432e:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004332:	4a28      	ldr	r2, [pc, #160]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004334:	f043 0320 	orr.w	r3, r3, #32
 8004338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800433a:	4b26      	ldr	r3, [pc, #152]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004352:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800435e:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 8004364:	f043 0302 	orr.w	r3, r3, #2
 8004368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <_ZL12MX_GPIO_Initv+0xd4>)
 800436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004376:	2200      	movs	r2, #0
 8004378:	2120      	movs	r1, #32
 800437a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800437e:	f7fd f9db 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <_ZL12MX_GPIO_Initv+0xd8>)
 800438a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004390:	f107 0314 	add.w	r3, r7, #20
 8004394:	4619      	mov	r1, r3
 8004396:	4811      	ldr	r0, [pc, #68]	; (80043dc <_ZL12MX_GPIO_Initv+0xdc>)
 8004398:	f7fd f84c 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800439c:	2320      	movs	r3, #32
 800439e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a0:	2301      	movs	r3, #1
 80043a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a8:	2300      	movs	r3, #0
 80043aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	4619      	mov	r1, r3
 80043b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043b6:	f7fd f83d 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043ba:	2200      	movs	r2, #0
 80043bc:	2100      	movs	r1, #0
 80043be:	2028      	movs	r0, #40	; 0x28
 80043c0:	f7fc ff43 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043c4:	2028      	movs	r0, #40	; 0x28
 80043c6:	f7fc ff5a 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 80043ca:	bf00      	nop
 80043cc:	3728      	adds	r7, #40	; 0x28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	10110000 	.word	0x10110000
 80043dc:	48000800 	.word	0x48000800

080043e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043e4:	b672      	cpsid	i
}
 80043e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043e8:	e7fe      	b.n	80043e8 <Error_Handler+0x8>

080043ea <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 80043f2:	2032      	movs	r0, #50	; 0x32
 80043f4:	f7ff fd3c 	bl	8003e70 <ringBuffer_init>
 80043f8:	4602      	mov	r2, r0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	605a      	str	r2, [r3, #4]

	}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fd56 	bl	8003ec4 <ringBuffer_deInit>
	}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4618      	mov	r0, r3
 800442c:	f00f ffec 	bl	8014408 <_ZN5UtestC1Ev>
 8004430:	4a03      	ldr	r2, [pc, #12]	; (8004440 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	080280f8 	.word	0x080280f8

08004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	4a05      	ldr	r2, [pc, #20]	; (8004464 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	f00f ffe7 	bl	8014428 <_ZN5UtestD1Ev>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	080280f8 	.word	0x080280f8

08004468 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ffe7 	bl	8004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004476:	2108      	movs	r1, #8
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f006 f809 	bl	800a490 <_ZdlPvj>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ffbe 	bl	8004420 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80044a4:	4a03      	ldr	r2, [pc, #12]	; (80044b4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	080280d8 	.word	0x080280d8

080044b8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	2228      	movs	r2, #40	; 0x28
 80044c2:	4906      	ldr	r1, [pc, #24]	; (80044dc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80044c4:	2008      	movs	r0, #8
 80044c6:	f005 ffcf 	bl	800a468 <_ZnwjPKci>
 80044ca:	4604      	mov	r4, r0
 80044cc:	4620      	mov	r0, r4
 80044ce:	f7ff ffdb 	bl	8004488 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80044d2:	4623      	mov	r3, r4
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd90      	pop	{r4, r7, pc}
 80044dc:	08023590 	.word	0x08023590

080044e0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f00e fbaa 	bl	8012c44 <_ZN10UtestShellC1Ev>
 80044f0:	4a03      	ldr	r2, [pc, #12]	; (8004500 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	0802802c 	.word	0x0802802c

08004504 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004506:	b087      	sub	sp, #28
 8004508:	af04      	add	r7, sp, #16
 800450a:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 800450c:	f00f ff52 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004510:	4604      	mov	r4, r0
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	3338      	adds	r3, #56	; 0x38
 8004516:	681d      	ldr	r5, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	461e      	mov	r6, r3
 8004520:	f00f ff58 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004524:	4603      	mov	r3, r0
 8004526:	9302      	str	r3, [sp, #8]
 8004528:	232b      	movs	r3, #43	; 0x2b
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004532:	4632      	mov	r2, r6
 8004534:	2132      	movs	r1, #50	; 0x32
 8004536:	4620      	mov	r0, r4
 8004538:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 800453a:	f00f ff3b 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800453e:	4604      	mov	r4, r0
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	3320      	adds	r3, #32
 8004544:	681d      	ldr	r5, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2de      	uxtb	r6, r3
 8004556:	f00f ff3d 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800455a:	4603      	mov	r3, r0
 800455c:	9303      	str	r3, [sp, #12]
 800455e:	232c      	movs	r3, #44	; 0x2c
 8004560:	9302      	str	r3, [sp, #8]
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	2300      	movs	r3, #0
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 800456c:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800456e:	4631      	mov	r1, r6
 8004570:	4620      	mov	r0, r4
 8004572:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004574:	f00f ff1e 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004578:	4604      	mov	r4, r0
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	3338      	adds	r3, #56	; 0x38
 800457e:	681d      	ldr	r5, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461e      	mov	r6, r3
 8004588:	f00f ff24 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800458c:	4603      	mov	r3, r0
 800458e:	9302      	str	r3, [sp, #8]
 8004590:	232d      	movs	r3, #45	; 0x2d
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 800459a:	4632      	mov	r2, r6
 800459c:	2100      	movs	r1, #0
 800459e:	4620      	mov	r0, r4
 80045a0:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 80045a2:	f00f ff07 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80045a6:	4604      	mov	r4, r0
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	3338      	adds	r3, #56	; 0x38
 80045ac:	681d      	ldr	r5, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	461e      	mov	r6, r3
 80045b6:	f00f ff0d 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045ba:	4603      	mov	r3, r0
 80045bc:	9302      	str	r3, [sp, #8]
 80045be:	232e      	movs	r3, #46	; 0x2e
 80045c0:	9301      	str	r3, [sp, #4]
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80045c8:	4632      	mov	r2, r6
 80045ca:	2100      	movs	r1, #0
 80045cc:	4620      	mov	r0, r4
 80045ce:	47a8      	blx	r5

}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d8:	08023590 	.word	0x08023590
 80045dc:	080235a4 	.word	0x080235a4
 80045e0:	080235cc 	.word	0x080235cc
 80045e4:	080235e4 	.word	0x080235e4
 80045e8:	080235ec 	.word	0x080235ec
 80045ec:	08023614 	.word	0x08023614

080045f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff ff0a 	bl	8004420 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800460c:	4a03      	ldr	r2, [pc, #12]	; (800461c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	0802800c 	.word	0x0802800c

08004620 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	2232      	movs	r2, #50	; 0x32
 800462a:	4906      	ldr	r1, [pc, #24]	; (8004644 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 800462c:	2008      	movs	r0, #8
 800462e:	f005 ff1b 	bl	800a468 <_ZnwjPKci>
 8004632:	4604      	mov	r4, r0
 8004634:	4620      	mov	r0, r4
 8004636:	f7ff ffdb 	bl	80045f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800463a:	4623      	mov	r3, r4
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bd90      	pop	{r4, r7, pc}
 8004644:	08023590 	.word	0x08023590

08004648 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	f00e faf6 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8004658:	4a03      	ldr	r2, [pc, #12]	; (8004668 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	08027f60 	.word	0x08027f60

0800466c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	b087      	sub	sp, #28
 8004670:	af04      	add	r7, sp, #16
 8004672:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2145      	movs	r1, #69	; 0x45
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fc39 	bl	8003ef2 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004680:	f00f fe98 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004684:	4604      	mov	r4, r0
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	3338      	adds	r3, #56	; 0x38
 800468a:	681d      	ldr	r5, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	461e      	mov	r6, r3
 8004696:	f00f fe9d 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800469a:	4603      	mov	r3, r0
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	2335      	movs	r3, #53	; 0x35
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4b15      	ldr	r3, [pc, #84]	; (80046fc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 80046a8:	4632      	mov	r2, r6
 80046aa:	2145      	movs	r1, #69	; 0x45
 80046ac:	4620      	mov	r0, r4
 80046ae:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2110      	movs	r1, #16
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fc1b 	bl	8003ef2 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80046bc:	f00f fe7a 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80046c0:	4604      	mov	r4, r0
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	3338      	adds	r3, #56	; 0x38
 80046c6:	681d      	ldr	r5, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	461e      	mov	r6, r3
 80046d4:	f00f fe7e 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046d8:	4603      	mov	r3, r0
 80046da:	9302      	str	r3, [sp, #8]
 80046dc:	2338      	movs	r3, #56	; 0x38
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80046e6:	4632      	mov	r2, r6
 80046e8:	2110      	movs	r1, #16
 80046ea:	4620      	mov	r0, r4
 80046ec:	47a8      	blx	r5

}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f6:	bf00      	nop
 80046f8:	08023590 	.word	0x08023590
 80046fc:	0802363c 	.word	0x0802363c
 8004700:	0802366c 	.word	0x0802366c

08004704 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fe80 	bl	8004420 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004720:	4a03      	ldr	r2, [pc, #12]	; (8004730 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	08027f40 	.word	0x08027f40

08004734 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004734:	b590      	push	{r4, r7, lr}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	223c      	movs	r2, #60	; 0x3c
 800473e:	4906      	ldr	r1, [pc, #24]	; (8004758 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004740:	2008      	movs	r0, #8
 8004742:	f005 fe91 	bl	800a468 <_ZnwjPKci>
 8004746:	4604      	mov	r4, r0
 8004748:	4620      	mov	r0, r4
 800474a:	f7ff ffdb 	bl	8004704 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800474e:	4623      	mov	r3, r4
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bd90      	pop	{r4, r7, pc}
 8004758:	08023590 	.word	0x08023590

0800475c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	f00e fa6c 	bl	8012c44 <_ZN10UtestShellC1Ev>
 800476c:	4a03      	ldr	r2, [pc, #12]	; (800477c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	08027e94 	.word	0x08027e94

08004780 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af04      	add	r7, sp, #16
 8004786:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	3b01      	subs	r3, #1
 800479e:	429a      	cmp	r2, r3
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4293      	cmp	r3, r2
 80047ae:	da0b      	bge.n	80047c8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	4611      	mov	r1, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fb99 	bl	8003ef2 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	e7e3      	b.n	8004790 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	21ff      	movs	r1, #255	; 0xff
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fb8f 	bl	8003ef2 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80047d4:	f00f fdee 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80047d8:	4604      	mov	r4, r0
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	3338      	adds	r3, #56	; 0x38
 80047de:	681d      	ldr	r5, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	461e      	mov	r6, r3
 80047ea:	f00f fdf3 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047ee:	4603      	mov	r3, r0
 80047f0:	9302      	str	r3, [sp, #8]
 80047f2:	2344      	movs	r3, #68	; 0x44
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80047fc:	4632      	mov	r2, r6
 80047fe:	21ff      	movs	r1, #255	; 0xff
 8004800:	4620      	mov	r0, r4
 8004802:	47a8      	blx	r5
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800480c:	08023590 	.word	0x08023590
 8004810:	0802369c 	.word	0x0802369c

08004814 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fdf8 	bl	8004420 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004830:	4a03      	ldr	r2, [pc, #12]	; (8004840 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	08027e74 	.word	0x08027e74

08004844 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	2247      	movs	r2, #71	; 0x47
 800484e:	4906      	ldr	r1, [pc, #24]	; (8004868 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004850:	2008      	movs	r0, #8
 8004852:	f005 fe09 	bl	800a468 <_ZnwjPKci>
 8004856:	4604      	mov	r4, r0
 8004858:	4620      	mov	r0, r4
 800485a:	f7ff ffdb 	bl	8004814 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800485e:	4623      	mov	r3, r4
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bd90      	pop	{r4, r7, pc}
 8004868:	08023590 	.word	0x08023590

0800486c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4618      	mov	r0, r3
 8004878:	f00e f9e4 	bl	8012c44 <_ZN10UtestShellC1Ev>
 800487c:	4a03      	ldr	r2, [pc, #12]	; (800488c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	08027dc8 	.word	0x08027dc8

08004890 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004892:	b089      	sub	sp, #36	; 0x24
 8004894:	af04      	add	r7, sp, #16
 8004896:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	21ff      	movs	r1, #255	; 0xff
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fb27 	bl	8003ef2 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fb4c 	bl	8003f46 <ringBuffer_pop>
 80048ae:	4603      	mov	r3, r0
 80048b0:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80048b2:	f00f fd7f 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80048b6:	4604      	mov	r4, r0
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	3338      	adds	r3, #56	; 0x38
 80048bc:	681d      	ldr	r5, [r3, #0]
 80048be:	7bfe      	ldrb	r6, [r7, #15]
 80048c0:	f00f fd88 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048c4:	4603      	mov	r3, r0
 80048c6:	9302      	str	r3, [sp, #8]
 80048c8:	234c      	movs	r3, #76	; 0x4c
 80048ca:	9301      	str	r3, [sp, #4]
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80048d2:	4632      	mov	r2, r6
 80048d4:	21ff      	movs	r1, #255	; 0xff
 80048d6:	4620      	mov	r0, r4
 80048d8:	47a8      	blx	r5

}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e2:	bf00      	nop
 80048e4:	08023590 	.word	0x08023590
 80048e8:	080236cc 	.word	0x080236cc

080048ec <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff fd8c 	bl	8004420 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004908:	4a03      	ldr	r2, [pc, #12]	; (8004918 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	08027da8 	.word	0x08027da8

0800491c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	2250      	movs	r2, #80	; 0x50
 8004926:	4906      	ldr	r1, [pc, #24]	; (8004940 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004928:	2008      	movs	r0, #8
 800492a:	f005 fd9d 	bl	800a468 <_ZnwjPKci>
 800492e:	4604      	mov	r4, r0
 8004930:	4620      	mov	r0, r4
 8004932:	f7ff ffdb 	bl	80048ec <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004936:	4623      	mov	r3, r4
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bd90      	pop	{r4, r7, pc}
 8004940:	08023590 	.word	0x08023590

08004944 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4618      	mov	r0, r3
 8004950:	f00e f978 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8004954:	4a03      	ldr	r2, [pc, #12]	; (8004964 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	08027cfc 	.word	0x08027cfc

08004968 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496a:	b089      	sub	sp, #36	; 0x24
 800496c:	af04      	add	r7, sp, #16
 800496e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	21aa      	movs	r1, #170	; 0xaa
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fab9 	bl	8003ef2 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	3b01      	subs	r3, #1
 8004996:	429a      	cmp	r2, r3
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4293      	cmp	r3, r2
 80049a6:	da0a      	bge.n	80049be <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff faca 	bl	8003f46 <ringBuffer_pop>
 80049b2:	4603      	mov	r3, r0
 80049b4:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e7e4      	b.n	8004988 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fabf 	bl	8003f46 <ringBuffer_pop>
 80049c8:	4603      	mov	r3, r0
 80049ca:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80049cc:	f00f fcf2 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80049d0:	4604      	mov	r4, r0
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	3338      	adds	r3, #56	; 0x38
 80049d6:	681d      	ldr	r5, [r3, #0]
 80049d8:	7afe      	ldrb	r6, [r7, #11]
 80049da:	f00f fcfb 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049de:	4603      	mov	r3, r0
 80049e0:	9302      	str	r3, [sp, #8]
 80049e2:	235d      	movs	r3, #93	; 0x5d
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80049ec:	4632      	mov	r2, r6
 80049ee:	21aa      	movs	r1, #170	; 0xaa
 80049f0:	4620      	mov	r0, r4
 80049f2:	47a8      	blx	r5
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fc:	08023590 	.word	0x08023590
 8004a00:	080236ec 	.word	0x080236ec

08004a04 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fd00 	bl	8004420 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a20:	4a03      	ldr	r2, [pc, #12]	; (8004a30 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	08027cdc 	.word	0x08027cdc

08004a34 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	2260      	movs	r2, #96	; 0x60
 8004a3e:	4906      	ldr	r1, [pc, #24]	; (8004a58 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004a40:	2008      	movs	r0, #8
 8004a42:	f005 fd11 	bl	800a468 <_ZnwjPKci>
 8004a46:	4604      	mov	r4, r0
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7ff ffdb 	bl	8004a04 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004a4e:	4623      	mov	r3, r4
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd90      	pop	{r4, r7, pc}
 8004a58:	08023590 	.word	0x08023590

08004a5c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f00e f8ec 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8004a6c:	4a03      	ldr	r2, [pc, #12]	; (8004a7c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	08027c30 	.word	0x08027c30

08004a80 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a82:	b089      	sub	sp, #36	; 0x24
 8004a84:	af04      	add	r7, sp, #16
 8004a86:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d20b      	bcs.n	8004ab0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fa25 	bl	8003ef2 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e7ed      	b.n	8004a8c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004ab0:	f00f fc80 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	3338      	adds	r3, #56	; 0x38
 8004aba:	681d      	ldr	r5, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	4413      	add	r3, r2
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	461e      	mov	r6, r3
 8004ad0:	f00f fc80 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	9302      	str	r3, [sp, #8]
 8004ad8:	2367      	movs	r3, #103	; 0x67
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004ae2:	4632      	mov	r2, r6
 8004ae4:	2131      	movs	r1, #49	; 0x31
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fa53 	bl	8003f9a <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004af4:	f00f fc5e 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004af8:	4604      	mov	r4, r0
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	3338      	adds	r3, #56	; 0x38
 8004afe:	681d      	ldr	r5, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	461e      	mov	r6, r3
 8004b14:	f00f fc5e 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	9302      	str	r3, [sp, #8]
 8004b1c:	236b      	movs	r3, #107	; 0x6b
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004b26:	4632      	mov	r2, r6
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004b2e:	f00f fc41 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004b32:	4604      	mov	r4, r0
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	3338      	adds	r3, #56	; 0x38
 8004b38:	681d      	ldr	r5, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	461e      	mov	r6, r3
 8004b4e:	f00f fc41 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b52:	4603      	mov	r3, r0
 8004b54:	9302      	str	r3, [sp, #8]
 8004b56:	236c      	movs	r3, #108	; 0x6c
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004b60:	4632      	mov	r2, r6
 8004b62:	2100      	movs	r1, #0
 8004b64:	4620      	mov	r0, r4
 8004b66:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b70:	08023590 	.word	0x08023590
 8004b74:	0802370c 	.word	0x0802370c
 8004b78:	08023748 	.word	0x08023748
 8004b7c:	08023784 	.word	0x08023784

08004b80 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	605a      	str	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fc42 	bl	8004420 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004b9c:	4a03      	ldr	r2, [pc, #12]	; (8004bac <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	08027c10 	.word	0x08027c10

08004bb0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004bb0:	b590      	push	{r4, r7, lr}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	2275      	movs	r2, #117	; 0x75
 8004bba:	4906      	ldr	r1, [pc, #24]	; (8004bd4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004bbc:	2008      	movs	r0, #8
 8004bbe:	f005 fc53 	bl	800a468 <_ZnwjPKci>
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f7ff ffdb 	bl	8004b80 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004bca:	4623      	mov	r3, r4
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd90      	pop	{r4, r7, pc}
 8004bd4:	08023590 	.word	0x08023590

08004bd8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f00e f82e 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8004be8:	4a03      	ldr	r2, [pc, #12]	; (8004bf8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	08027b64 	.word	0x08027b64

08004bfc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af04      	add	r7, sp, #16
 8004c02:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	490e      	ldr	r1, [pc, #56]	; (8004c44 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff f9dc 	bl	8003fc8 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004c10:	f00f fbd0 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004c14:	4604      	mov	r4, r0
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	3324      	adds	r3, #36	; 0x24
 8004c1a:	681d      	ldr	r5, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	68de      	ldr	r6, [r3, #12]
 8004c22:	f00f fbd7 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c26:	4603      	mov	r3, r0
 8004c28:	9302      	str	r3, [sp, #8]
 8004c2a:	2379      	movs	r3, #121	; 0x79
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	2300      	movs	r3, #0
 8004c34:	4632      	mov	r2, r6
 8004c36:	4903      	ldr	r1, [pc, #12]	; (8004c44 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004c38:	4620      	mov	r0, r4
 8004c3a:	47a8      	blx	r5
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c44:	080237bc 	.word	0x080237bc
 8004c48:	08023590 	.word	0x08023590

08004c4c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	605a      	str	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fbdc 	bl	8004420 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004c68:	4a03      	ldr	r2, [pc, #12]	; (8004c78 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	08027b44 	.word	0x08027b44

08004c7c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	227c      	movs	r2, #124	; 0x7c
 8004c86:	4906      	ldr	r1, [pc, #24]	; (8004ca0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004c88:	2008      	movs	r0, #8
 8004c8a:	f005 fbed 	bl	800a468 <_ZnwjPKci>
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4620      	mov	r0, r4
 8004c92:	f7ff ffdb 	bl	8004c4c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004c96:	4623      	mov	r3, r4
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd90      	pop	{r4, r7, pc}
 8004ca0:	08023590 	.word	0x08023590

08004ca4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f00d ffc8 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8004cb4:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	08027a98 	.word	0x08027a98

08004cc8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ccc:	b08a      	sub	sp, #40	; 0x28
 8004cce:	af04      	add	r7, sp, #16
 8004cd0:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	494e      	ldr	r1, [pc, #312]	; (8004e10 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff f975 	bl	8003fc8 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004cde:	f00f fb69 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	3324      	adds	r3, #36	; 0x24
 8004ce8:	681d      	ldr	r5, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	68de      	ldr	r6, [r3, #12]
 8004cf0:	f00f fb70 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	9302      	str	r3, [sp, #8]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	4b45      	ldr	r3, [pc, #276]	; (8004e14 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	4632      	mov	r2, r6
 8004d04:	4942      	ldr	r1, [pc, #264]	; (8004e10 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004d06:	4620      	mov	r0, r4
 8004d08:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4942      	ldr	r1, [pc, #264]	; (8004e18 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff f978 	bl	8004006 <ringBuffer_lookFor>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d05c      	beq.n	8004de0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	493b      	ldr	r1, [pc, #236]	; (8004e18 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff f96a 	bl	8004006 <ringBuffer_lookFor>
 8004d32:	4604      	mov	r4, r0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4937      	ldr	r1, [pc, #220]	; (8004e18 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff f963 	bl	8004006 <ringBuffer_lookFor>
 8004d40:	4603      	mov	r3, r0
 8004d42:	429c      	cmp	r4, r3
 8004d44:	bf14      	ite	ne
 8004d46:	2301      	movne	r3, #1
 8004d48:	2300      	moveq	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004d50:	f00f fb30 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004d54:	6803      	ldr	r3, [r0, #0]
 8004d56:	3370      	adds	r3, #112	; 0x70
 8004d58:	681c      	ldr	r4, [r3, #0]
 8004d5a:	2381      	movs	r3, #129	; 0x81
 8004d5c:	4a2d      	ldr	r2, [pc, #180]	; (8004e14 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d5e:	492f      	ldr	r1, [pc, #188]	; (8004e1c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004d60:	47a0      	blx	r4
 8004d62:	f00f fb27 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004d66:	4604      	mov	r4, r0
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	3358      	adds	r3, #88	; 0x58
 8004d6c:	681d      	ldr	r5, [r3, #0]
 8004d6e:	f107 0308 	add.w	r3, r7, #8
 8004d72:	2101      	movs	r1, #1
 8004d74:	4618      	mov	r0, r3
 8004d76:	f008 fdb9 	bl	800d8ec <_Z10StringFromi>
 8004d7a:	f107 0308 	add.w	r3, r7, #8
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f008 fac0 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8004d84:	4606      	mov	r6, r0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4923      	ldr	r1, [pc, #140]	; (8004e18 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff f93a 	bl	8004006 <ringBuffer_lookFor>
 8004d92:	4602      	mov	r2, r0
 8004d94:	f107 0310 	add.w	r3, r7, #16
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f009 f820 	bl	800dde0 <_Z10StringFromm>
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	4618      	mov	r0, r3
 8004da6:	f008 faad 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8004daa:	4680      	mov	r8, r0
 8004dac:	f00f fb12 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004db0:	4603      	mov	r3, r0
 8004db2:	9303      	str	r3, [sp, #12]
 8004db4:	2381      	movs	r3, #129	; 0x81
 8004db6:	9302      	str	r3, [sp, #8]
 8004db8:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	4643      	mov	r3, r8
 8004dc2:	4632      	mov	r2, r6
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	47a8      	blx	r5
 8004dca:	f107 0310 	add.w	r3, r7, #16
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f008 fac5 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8004dd4:	f107 0308 	add.w	r3, r7, #8
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f008 fac0 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8004dde:	e012      	b.n	8004e06 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004de0:	f00f fae8 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004de4:	4604      	mov	r4, r0
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	3338      	adds	r3, #56	; 0x38
 8004dea:	681d      	ldr	r5, [r3, #0]
 8004dec:	f00f faf2 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004df0:	4603      	mov	r3, r0
 8004df2:	9302      	str	r3, [sp, #8]
 8004df4:	2381      	movs	r3, #129	; 0x81
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2100      	movs	r1, #0
 8004e02:	4620      	mov	r0, r4
 8004e04:	47a8      	blx	r5
}
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e10:	080237c4 	.word	0x080237c4
 8004e14:	08023590 	.word	0x08023590
 8004e18:	080237d0 	.word	0x080237d0
 8004e1c:	080237d8 	.word	0x080237d8

08004e20 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	605a      	str	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff faf2 	bl	8004420 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e3c:	4a03      	ldr	r2, [pc, #12]	; (8004e4c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	08027a78 	.word	0x08027a78

08004e50 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	2284      	movs	r2, #132	; 0x84
 8004e5a:	4906      	ldr	r1, [pc, #24]	; (8004e74 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004e5c:	2008      	movs	r0, #8
 8004e5e:	f005 fb03 	bl	800a468 <_ZnwjPKci>
 8004e62:	4604      	mov	r4, r0
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7ff ffdb 	bl	8004e20 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd90      	pop	{r4, r7, pc}
 8004e74:	08023590 	.word	0x08023590

08004e78 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f00d fede 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8004e88:	4a03      	ldr	r2, [pc, #12]	; (8004e98 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	080279cc 	.word	0x080279cc

08004e9c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af04      	add	r7, sp, #16
 8004ea2:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004ea4:	f00f fa86 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	3338      	adds	r3, #56	; 0x38
 8004eae:	681d      	ldr	r5, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff f8bc 	bl	8004032 <ringBuffer_capacity>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	461e      	mov	r6, r3
 8004ebe:	f00f fa89 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	9302      	str	r3, [sp, #8]
 8004ec6:	2387      	movs	r3, #135	; 0x87
 8004ec8:	9301      	str	r3, [sp, #4]
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004ed0:	4632      	mov	r2, r6
 8004ed2:	2132      	movs	r1, #50	; 0x32
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	47a8      	blx	r5

}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee0:	08023590 	.word	0x08023590
 8004ee4:	0802387c 	.word	0x0802387c

08004ee8 <_Z18UART_Transmit_FakePh>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data)
{
 8004ee8:	b5b0      	push	{r4, r5, r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004ef0:	f107 0308 	add.w	r3, r7, #8
 8004ef4:	491d      	ldr	r1, [pc, #116]	; (8004f6c <_Z18UART_Transmit_FakePh+0x84>)
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f007 fe79 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8004efc:	f107 0308 	add.w	r3, r7, #8
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f005 ff4c 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f08:	4604      	mov	r4, r0
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	3318      	adds	r3, #24
 8004f0e:	681d      	ldr	r5, [r3, #0]
 8004f10:	f107 0310 	add.w	r3, r7, #16
 8004f14:	4916      	ldr	r1, [pc, #88]	; (8004f70 <_Z18UART_Transmit_FakePh+0x88>)
 8004f16:	4618      	mov	r0, r3
 8004f18:	f007 fe69 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8004f1c:	f107 0310 	add.w	r3, r7, #16
 8004f20:	4619      	mov	r1, r3
 8004f22:	4620      	mov	r0, r4
 8004f24:	47a8      	blx	r5
 8004f26:	4604      	mov	r4, r0
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	333c      	adds	r3, #60	; 0x3c
 8004f2c:	681d      	ldr	r5, [r3, #0]
 8004f2e:	f107 0318 	add.w	r3, r7, #24
 8004f32:	4910      	ldr	r1, [pc, #64]	; (8004f74 <_Z18UART_Transmit_FakePh+0x8c>)
 8004f34:	4618      	mov	r0, r3
 8004f36:	f007 fe5a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8004f3a:	f107 0318 	add.w	r3, r7, #24
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4619      	mov	r1, r3
 8004f42:	4620      	mov	r0, r4
 8004f44:	47a8      	blx	r5
 8004f46:	f107 0318 	add.w	r3, r7, #24
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f008 fa07 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8004f50:	f107 0310 	add.w	r3, r7, #16
 8004f54:	4618      	mov	r0, r3
 8004f56:	f008 fa02 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8004f5a:	f107 0308 	add.w	r3, r7, #8
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f008 f9fd 	bl	800d35e <_ZN12SimpleStringD1Ev>

}
 8004f64:	bf00      	nop
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f6c:	080238b4 	.word	0x080238b4
 8004f70:	080238b8 	.word	0x080238b8
 8004f74:	080238cc 	.word	0x080238cc

08004f78 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004f78:	b5b0      	push	{r4, r5, r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004f7e:	463b      	mov	r3, r7
 8004f80:	4916      	ldr	r1, [pc, #88]	; (8004fdc <_Z17UART_Receive_Fakev+0x64>)
 8004f82:	4618      	mov	r0, r3
 8004f84:	f007 fe33 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8004f88:	463b      	mov	r3, r7
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f005 ff07 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f92:	4604      	mov	r4, r0
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	3318      	adds	r3, #24
 8004f98:	681d      	ldr	r5, [r3, #0]
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	4910      	ldr	r1, [pc, #64]	; (8004fe0 <_Z17UART_Receive_Fakev+0x68>)
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f007 fe24 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8004fa6:	f107 0308 	add.w	r3, r7, #8
 8004faa:	4619      	mov	r1, r3
 8004fac:	4620      	mov	r0, r4
 8004fae:	47a8      	blx	r5
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	3264      	adds	r2, #100	; 0x64
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	4790      	blx	r2
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	b2dc      	uxtb	r4, r3
 8004fc0:	f107 0308 	add.w	r3, r7, #8
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f008 f9ca 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8004fca:	463b      	mov	r3, r7
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f008 f9c6 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8004fd2:	4623      	mov	r3, r4
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bdb0      	pop	{r4, r5, r7, pc}
 8004fdc:	080238b4 	.word	0x080238b4
 8004fe0:	080238d4 	.word	0x080238d4

08004fe4 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <_Z12getTick_Fakev+0x30>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d103      	bne.n	8004ffa <_Z12getTick_Fakev+0x16>
		time = 0;
 8004ff2:	4b08      	ldr	r3, [pc, #32]	; (8005014 <_Z12getTick_Fakev+0x30>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e004      	b.n	8005004 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <_Z12getTick_Fakev+0x30>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	4a04      	ldr	r2, [pc, #16]	; (8005014 <_Z12getTick_Fakev+0x30>)
 8005002:	6013      	str	r3, [r2, #0]
	return time;
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <_Z12getTick_Fakev+0x30>)
 8005006:	681b      	ldr	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	200005c0 	.word	0x200005c0

08005018 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8005020:	2364      	movs	r3, #100	; 0x64
 8005022:	4a04      	ldr	r2, [pc, #16]	; (8005034 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8005024:	4904      	ldr	r1, [pc, #16]	; (8005038 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8005026:	4805      	ldr	r0, [pc, #20]	; (800503c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8005028:	f7fe fc6e 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	08004fe5 	.word	0x08004fe5
 8005038:	08004f79 	.word	0x08004f79
 800503c:	08004ee9 	.word	0x08004ee9

08005040 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8005048:	f107 0308 	add.w	r3, r7, #8
 800504c:	4917      	ldr	r1, [pc, #92]	; (80050ac <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800504e:	4618      	mov	r0, r3
 8005050:	f007 fdcd 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005054:	f107 0308 	add.w	r3, r7, #8
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f005 fea0 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005060:	4603      	mov	r3, r0
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	3294      	adds	r2, #148	; 0x94
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	4790      	blx	r2
 800506c:	f107 0308 	add.w	r3, r7, #8
 8005070:	4618      	mov	r0, r3
 8005072:	f008 f974 	bl	800d35e <_ZN12SimpleStringD1Ev>
		mock().clear();
 8005076:	f107 0310 	add.w	r3, r7, #16
 800507a:	490c      	ldr	r1, [pc, #48]	; (80050ac <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800507c:	4618      	mov	r0, r3
 800507e:	f007 fdb6 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005082:	f107 0310 	add.w	r3, r7, #16
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f005 fe89 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800508e:	4603      	mov	r3, r0
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	329c      	adds	r2, #156	; 0x9c
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	4790      	blx	r2
 800509a:	f107 0310 	add.w	r3, r7, #16
 800509e:	4618      	mov	r0, r3
 80050a0:	f008 f95d 	bl	800d35e <_ZN12SimpleStringD1Ev>
	}
 80050a4:	bf00      	nop
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	080238b4 	.word	0x080238b4

080050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f00f f9a4 	bl	8014408 <_ZN5UtestC1Ev>
 80050c0:	4a03      	ldr	r2, [pc, #12]	; (80050d0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	080279ac 	.word	0x080279ac

080050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	4a05      	ldr	r2, [pc, #20]	; (80050f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f00f f99f 	bl	8014428 <_ZN5UtestD1Ev>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	080279ac 	.word	0x080279ac

080050f8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ffe7 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005106:	2104      	movs	r1, #4
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f005 f9c1 	bl	800a490 <_ZdlPvj>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff ffc4 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005128:	4a03      	ldr	r2, [pc, #12]	; (8005138 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	0802798c 	.word	0x0802798c

0800513c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	22bf      	movs	r2, #191	; 0xbf
 8005146:	4906      	ldr	r1, [pc, #24]	; (8005160 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8005148:	2004      	movs	r0, #4
 800514a:	f005 f98d 	bl	800a468 <_ZnwjPKci>
 800514e:	4604      	mov	r4, r0
 8005150:	4620      	mov	r0, r4
 8005152:	f7ff ffe1 	bl	8005118 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8005156:	4623      	mov	r3, r4
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bd90      	pop	{r4, r7, pc}
 8005160:	08023590 	.word	0x08023590

08005164 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4618      	mov	r0, r3
 8005170:	f00d fd68 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8005174:	4a03      	ldr	r2, [pc, #12]	; (8005184 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	080278e0 	.word	0x080278e0

08005188 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8005188:	b5b0      	push	{r4, r5, r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af04      	add	r7, sp, #16
 800518e:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8005190:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8005192:	4a11      	ldr	r2, [pc, #68]	; (80051d8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8005194:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	2364      	movs	r3, #100	; 0x64
 800519c:	4a0f      	ldr	r2, [pc, #60]	; (80051dc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 800519e:	4910      	ldr	r1, [pc, #64]	; (80051e0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 80051a0:	f7fe fbb2 	bl	8003908 <ESP_Init>
 80051a4:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 80051a6:	f00f f905 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80051aa:	4604      	mov	r4, r0
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	3338      	adds	r3, #56	; 0x38
 80051b0:	681d      	ldr	r5, [r3, #0]
 80051b2:	f00f f90f 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80051b6:	4603      	mov	r3, r0
 80051b8:	9302      	str	r3, [sp, #8]
 80051ba:	23cd      	movs	r3, #205	; 0xcd
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	2101      	movs	r1, #1
 80051c8:	4620      	mov	r0, r4
 80051ca:	47a8      	blx	r5

}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bdb0      	pop	{r4, r5, r7, pc}
 80051d4:	200005c4 	.word	0x200005c4
 80051d8:	08004ee9 	.word	0x08004ee9
 80051dc:	08004fe5 	.word	0x08004fe5
 80051e0:	08004f79 	.word	0x08004f79
 80051e4:	08023590 	.word	0x08023590
 80051e8:	080238e8 	.word	0x080238e8

080051ec <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ff5a 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80051fc:	4a03      	ldr	r2, [pc, #12]	; (800520c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	080278c0 	.word	0x080278c0

08005210 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	22d1      	movs	r2, #209	; 0xd1
 800521a:	4906      	ldr	r1, [pc, #24]	; (8005234 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 800521c:	2004      	movs	r0, #4
 800521e:	f005 f923 	bl	800a468 <_ZnwjPKci>
 8005222:	4604      	mov	r4, r0
 8005224:	4620      	mov	r0, r4
 8005226:	f7ff ffe1 	bl	80051ec <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 800522a:	4623      	mov	r3, r4
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bd90      	pop	{r4, r7, pc}
 8005234:	08023590 	.word	0x08023590

08005238 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4618      	mov	r0, r3
 8005244:	f00d fcfe 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8005248:	4a03      	ldr	r2, [pc, #12]	; (8005258 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	08027814 	.word	0x08027814

0800525c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 800525c:	b5b0      	push	{r4, r5, r7, lr}
 800525e:	b08e      	sub	sp, #56	; 0x38
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");  // UART_Transmit_Fake function waits "Test" string.
 8005264:	f107 0308 	add.w	r3, r7, #8
 8005268:	493d      	ldr	r1, [pc, #244]	; (8005360 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 800526a:	4618      	mov	r0, r3
 800526c:	f007 fcbf 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005270:	f107 0308 	add.w	r3, r7, #8
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f005 fd92 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800527c:	4604      	mov	r4, r0
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	330c      	adds	r3, #12
 8005282:	681d      	ldr	r5, [r3, #0]
 8005284:	f107 0310 	add.w	r3, r7, #16
 8005288:	4936      	ldr	r1, [pc, #216]	; (8005364 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800528a:	4618      	mov	r0, r3
 800528c:	f007 fcaf 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005290:	f107 0310 	add.w	r3, r7, #16
 8005294:	4619      	mov	r1, r3
 8005296:	4620      	mov	r0, r4
 8005298:	47a8      	blx	r5
 800529a:	4604      	mov	r4, r0
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	334c      	adds	r3, #76	; 0x4c
 80052a0:	681d      	ldr	r5, [r3, #0]
 80052a2:	f107 0318 	add.w	r3, r7, #24
 80052a6:	4930      	ldr	r1, [pc, #192]	; (8005368 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80052a8:	4618      	mov	r0, r3
 80052aa:	f007 fca0 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80052ae:	f107 0318 	add.w	r3, r7, #24
 80052b2:	4a2e      	ldr	r2, [pc, #184]	; (800536c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80052b4:	4619      	mov	r1, r3
 80052b6:	4620      	mov	r0, r4
 80052b8:	47a8      	blx	r5
 80052ba:	f107 0318 	add.w	r3, r7, #24
 80052be:	4618      	mov	r0, r3
 80052c0:	f008 f84d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80052c4:	f107 0310 	add.w	r3, r7, #16
 80052c8:	4618      	mov	r0, r3
 80052ca:	f008 f848 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	4618      	mov	r0, r3
 80052d4:	f008 f843 	bl	800d35e <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 80052d8:	f107 0320 	add.w	r3, r7, #32
 80052dc:	4920      	ldr	r1, [pc, #128]	; (8005360 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80052de:	4618      	mov	r0, r3
 80052e0:	f007 fc85 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80052e4:	f107 0320 	add.w	r3, r7, #32
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f005 fd58 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052f0:	4604      	mov	r4, r0
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	681d      	ldr	r5, [r3, #0]
 80052f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052fc:	4919      	ldr	r1, [pc, #100]	; (8005364 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 80052fe:	4618      	mov	r0, r3
 8005300:	f007 fc75 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005308:	4619      	mov	r1, r3
 800530a:	4620      	mov	r0, r4
 800530c:	47a8      	blx	r5
 800530e:	4604      	mov	r4, r0
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	334c      	adds	r3, #76	; 0x4c
 8005314:	681d      	ldr	r5, [r3, #0]
 8005316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800531a:	4913      	ldr	r1, [pc, #76]	; (8005368 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 800531c:	4618      	mov	r0, r3
 800531e:	f007 fc66 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005322:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005326:	4a12      	ldr	r2, [pc, #72]	; (8005370 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005328:	4619      	mov	r1, r3
 800532a:	4620      	mov	r0, r4
 800532c:	47a8      	blx	r5
 800532e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005332:	4618      	mov	r0, r3
 8005334:	f008 f813 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800533c:	4618      	mov	r0, r3
 800533e:	f008 f80e 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005342:	f107 0320 	add.w	r3, r7, #32
 8005346:	4618      	mov	r0, r3
 8005348:	f008 f809 	bl	800d35e <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 800534c:	4807      	ldr	r0, [pc, #28]	; (800536c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 800534e:	f7fe fb0d 	bl	800396c <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 8005352:	4807      	ldr	r0, [pc, #28]	; (8005370 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005354:	f7fe fb0a 	bl	800396c <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 8005358:	bf00      	nop
 800535a:	3738      	adds	r7, #56	; 0x38
 800535c:	46bd      	mov	sp, r7
 800535e:	bdb0      	pop	{r4, r5, r7, pc}
 8005360:	080238b4 	.word	0x080238b4
 8005364:	080238b8 	.word	0x080238b8
 8005368:	080238cc 	.word	0x080238cc
 800536c:	080237bc 	.word	0x080237bc
 8005370:	08023908 	.word	0x08023908

08005374 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff fe96 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005384:	4a03      	ldr	r2, [pc, #12]	; (8005394 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	080277f4 	.word	0x080277f4

08005398 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	22dd      	movs	r2, #221	; 0xdd
 80053a2:	4906      	ldr	r1, [pc, #24]	; (80053bc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 80053a4:	2004      	movs	r0, #4
 80053a6:	f005 f85f 	bl	800a468 <_ZnwjPKci>
 80053aa:	4604      	mov	r4, r0
 80053ac:	4620      	mov	r0, r4
 80053ae:	f7ff ffe1 	bl	8005374 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 80053b2:	4623      	mov	r3, r4
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd90      	pop	{r4, r7, pc}
 80053bc:	08023590 	.word	0x08023590

080053c0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f00d fc3a 	bl	8012c44 <_ZN10UtestShellC1Ev>
 80053d0:	4a03      	ldr	r2, [pc, #12]	; (80053e0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	08027748 	.word	0x08027748

080053e4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 80053e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053e6:	b08f      	sub	sp, #60	; 0x3c
 80053e8:	af04      	add	r7, sp, #16
 80053ea:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 80053ec:	4a31      	ldr	r2, [pc, #196]	; (80054b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 80053ee:	f107 030c 	add.w	r3, r7, #12
 80053f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053f6:	6018      	str	r0, [r3, #0]
 80053f8:	3304      	adds	r3, #4
 80053fa:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 80053fc:	2300      	movs	r3, #0
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005400:	f107 030c 	add.w	r3, r7, #12
 8005404:	4618      	mov	r0, r3
 8005406:	f7fa ff19 	bl	800023c <strlen>
 800540a:	4603      	mov	r3, r0
 800540c:	461a      	mov	r2, r3
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	4293      	cmp	r3, r2
 8005412:	da35      	bge.n	8005480 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005414:	f107 0314 	add.w	r3, r7, #20
 8005418:	4927      	ldr	r1, [pc, #156]	; (80054b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 800541a:	4618      	mov	r0, r3
 800541c:	f007 fbe7 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005420:	f107 0314 	add.w	r3, r7, #20
 8005424:	2100      	movs	r1, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f005 fcba 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800542c:	4604      	mov	r4, r0
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	681d      	ldr	r5, [r3, #0]
 8005434:	f107 031c 	add.w	r3, r7, #28
 8005438:	4920      	ldr	r1, [pc, #128]	; (80054bc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 800543a:	4618      	mov	r0, r3
 800543c:	f007 fbd7 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005440:	f107 031c 	add.w	r3, r7, #28
 8005444:	4619      	mov	r1, r3
 8005446:	4620      	mov	r0, r4
 8005448:	47a8      	blx	r5
 800544a:	4603      	mov	r3, r0
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	3264      	adds	r2, #100	; 0x64
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	f107 000c 	add.w	r0, r7, #12
 8005456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005458:	4401      	add	r1, r0
 800545a:	7809      	ldrb	r1, [r1, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	4790      	blx	r2
 8005460:	f107 031c 	add.w	r3, r7, #28
 8005464:	4618      	mov	r0, r3
 8005466:	f007 ff7a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800546a:	f107 0314 	add.w	r3, r7, #20
 800546e:	4618      	mov	r0, r3
 8005470:	f007 ff75 	bl	800d35e <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005474:	f7fe fa88 	bl	8003988 <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	3301      	adds	r3, #1
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
 800547e:	e7bf      	b.n	8005400 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 8005480:	f00e ff98 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8005484:	4604      	mov	r4, r0
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	3324      	adds	r3, #36	; 0x24
 800548a:	681d      	ldr	r5, [r3, #0]
 800548c:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68de      	ldr	r6, [r3, #12]
 8005492:	f00e ff9f 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005496:	4603      	mov	r3, r0
 8005498:	9302      	str	r3, [sp, #8]
 800549a:	23e8      	movs	r3, #232	; 0xe8
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	4632      	mov	r2, r6
 80054a6:	4903      	ldr	r1, [pc, #12]	; (80054b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 80054a8:	4620      	mov	r0, r4
 80054aa:	47a8      	blx	r5

}
 80054ac:	bf00      	nop
 80054ae:	372c      	adds	r7, #44	; 0x2c
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b4:	08023910 	.word	0x08023910
 80054b8:	080238b4 	.word	0x080238b4
 80054bc:	080238d4 	.word	0x080238d4
 80054c0:	2000049c 	.word	0x2000049c
 80054c4:	08023590 	.word	0x08023590

080054c8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff fdec 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80054d8:	4a03      	ldr	r2, [pc, #12]	; (80054e8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	08027728 	.word	0x08027728

080054ec <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	22ec      	movs	r2, #236	; 0xec
 80054f6:	4906      	ldr	r1, [pc, #24]	; (8005510 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80054f8:	2004      	movs	r0, #4
 80054fa:	f004 ffb5 	bl	800a468 <_ZnwjPKci>
 80054fe:	4604      	mov	r4, r0
 8005500:	4620      	mov	r0, r4
 8005502:	f7ff ffe1 	bl	80054c8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8005506:	4623      	mov	r3, r4
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	bd90      	pop	{r4, r7, pc}
 8005510:	08023590 	.word	0x08023590

08005514 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4618      	mov	r0, r3
 8005520:	f00d fb90 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8005524:	4a03      	ldr	r2, [pc, #12]	; (8005534 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	0802767c 	.word	0x0802767c

08005538 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553a:	b08f      	sub	sp, #60	; 0x3c
 800553c:	af04      	add	r7, sp, #16
 800553e:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 8005540:	4a32      	ldr	r2, [pc, #200]	; (800560c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 8005542:	f107 0308 	add.w	r3, r7, #8
 8005546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800554a:	6018      	str	r0, [r3, #0]
 800554c:	3304      	adds	r3, #4
 800554e:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 8005550:	2300      	movs	r3, #0
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
 8005554:	f107 0308 	add.w	r3, r7, #8
 8005558:	4618      	mov	r0, r3
 800555a:	f7fa fe6f 	bl	800023c <strlen>
 800555e:	4603      	mov	r3, r0
 8005560:	461a      	mov	r2, r3
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	4293      	cmp	r3, r2
 8005566:	da35      	bge.n	80055d4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005568:	f107 0310 	add.w	r3, r7, #16
 800556c:	4928      	ldr	r1, [pc, #160]	; (8005610 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 800556e:	4618      	mov	r0, r3
 8005570:	f007 fb3d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005574:	f107 0310 	add.w	r3, r7, #16
 8005578:	2100      	movs	r1, #0
 800557a:	4618      	mov	r0, r3
 800557c:	f005 fc10 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005580:	4604      	mov	r4, r0
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	681d      	ldr	r5, [r3, #0]
 8005588:	f107 0318 	add.w	r3, r7, #24
 800558c:	4921      	ldr	r1, [pc, #132]	; (8005614 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 800558e:	4618      	mov	r0, r3
 8005590:	f007 fb2d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005594:	f107 0318 	add.w	r3, r7, #24
 8005598:	4619      	mov	r1, r3
 800559a:	4620      	mov	r0, r4
 800559c:	47a8      	blx	r5
 800559e:	4603      	mov	r3, r0
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	3264      	adds	r2, #100	; 0x64
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	f107 0008 	add.w	r0, r7, #8
 80055aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055ac:	4401      	add	r1, r0
 80055ae:	7809      	ldrb	r1, [r1, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	4790      	blx	r2
 80055b4:	f107 0318 	add.w	r3, r7, #24
 80055b8:	4618      	mov	r0, r3
 80055ba:	f007 fed0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80055be:	f107 0310 	add.w	r3, r7, #16
 80055c2:	4618      	mov	r0, r3
 80055c4:	f007 fecb 	bl	800d35e <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80055c8:	f7fe f9de 	bl	8003988 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	3301      	adds	r3, #1
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	e7bf      	b.n	8005554 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 80055d4:	4810      	ldr	r0, [pc, #64]	; (8005618 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 80055d6:	f7fe f9e9 	bl	80039ac <Read_Response>
 80055da:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 80055dc:	f00e feea 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80055e0:	4604      	mov	r4, r0
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	3338      	adds	r3, #56	; 0x38
 80055e6:	681d      	ldr	r5, [r3, #0]
 80055e8:	6a3e      	ldr	r6, [r7, #32]
 80055ea:	f00e fef3 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80055ee:	4603      	mov	r3, r0
 80055f0:	9302      	str	r3, [sp, #8]
 80055f2:	23f8      	movs	r3, #248	; 0xf8
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 80055fc:	4632      	mov	r2, r6
 80055fe:	2101      	movs	r1, #1
 8005600:	4620      	mov	r0, r4
 8005602:	47a8      	blx	r5

}
 8005604:	bf00      	nop
 8005606:	372c      	adds	r7, #44	; 0x2c
 8005608:	46bd      	mov	sp, r7
 800560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800560c:	08023910 	.word	0x08023910
 8005610:	080238b4 	.word	0x080238b4
 8005614:	080238d4 	.word	0x080238d4
 8005618:	0802350c 	.word	0x0802350c
 800561c:	08023590 	.word	0x08023590
 8005620:	080238e8 	.word	0x080238e8

08005624 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fd3e 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005634:	4a03      	ldr	r2, [pc, #12]	; (8005644 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	0802765c 	.word	0x0802765c

08005648 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	22fd      	movs	r2, #253	; 0xfd
 8005652:	4906      	ldr	r1, [pc, #24]	; (800566c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8005654:	2004      	movs	r0, #4
 8005656:	f004 ff07 	bl	800a468 <_ZnwjPKci>
 800565a:	4604      	mov	r4, r0
 800565c:	4620      	mov	r0, r4
 800565e:	f7ff ffe1 	bl	8005624 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005662:	4623      	mov	r3, r4
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	bd90      	pop	{r4, r7, pc}
 800566c:	08023590 	.word	0x08023590

08005670 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4618      	mov	r0, r3
 800567c:	f00d fae2 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8005680:	4a03      	ldr	r2, [pc, #12]	; (8005690 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	080275b0 	.word	0x080275b0

08005694 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af04      	add	r7, sp, #16
 800569a:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 800569c:	2304      	movs	r3, #4
 800569e:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 80056a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056a4:	4811      	ldr	r0, [pc, #68]	; (80056ec <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 80056a6:	f7fe f993 	bl	80039d0 <Wait_Response>
 80056aa:	4603      	mov	r3, r0
 80056ac:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d100      	bne.n	80056b6 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80056b4:	e7f4      	b.n	80056a0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80056b6:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80056b8:	f00e fe7c 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80056bc:	4604      	mov	r4, r0
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	3338      	adds	r3, #56	; 0x38
 80056c2:	681d      	ldr	r5, [r3, #0]
 80056c4:	7bfe      	ldrb	r6, [r7, #15]
 80056c6:	f00e fe85 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80056ca:	4603      	mov	r3, r0
 80056cc:	9302      	str	r3, [sp, #8]
 80056ce:	f240 1309 	movw	r3, #265	; 0x109
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 80056da:	4632      	mov	r2, r6
 80056dc:	2101      	movs	r1, #1
 80056de:	4620      	mov	r0, r4
 80056e0:	47a8      	blx	r5

}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ea:	bf00      	nop
 80056ec:	0802350c 	.word	0x0802350c
 80056f0:	08023590 	.word	0x08023590
 80056f4:	08023918 	.word	0x08023918

080056f8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fcd4 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005708:	4a03      	ldr	r2, [pc, #12]	; (8005718 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	08027590 	.word	0x08027590

0800571c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 800571c:	b590      	push	{r4, r7, lr}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	f240 120d 	movw	r2, #269	; 0x10d
 8005728:	4906      	ldr	r1, [pc, #24]	; (8005744 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 800572a:	2004      	movs	r0, #4
 800572c:	f004 fe9c 	bl	800a468 <_ZnwjPKci>
 8005730:	4604      	mov	r4, r0
 8005732:	4620      	mov	r0, r4
 8005734:	f7ff ffe0 	bl	80056f8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005738:	4623      	mov	r3, r4
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bd90      	pop	{r4, r7, pc}
 8005742:	bf00      	nop
 8005744:	08023590 	.word	0x08023590

08005748 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4618      	mov	r0, r3
 8005754:	f00d fa76 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8005758:	4a03      	ldr	r2, [pc, #12]	; (8005768 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	080274e4 	.word	0x080274e4

0800576c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 800576c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800576e:	b08f      	sub	sp, #60	; 0x3c
 8005770:	af04      	add	r7, sp, #16
 8005772:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005774:	2304      	movs	r3, #4
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 800577a:	4a38      	ldr	r2, [pc, #224]	; (800585c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 800577c:	f107 0308 	add.w	r3, r7, #8
 8005780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005784:	6018      	str	r0, [r3, #0]
 8005786:	3304      	adds	r3, #4
 8005788:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 800578a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800578e:	4834      	ldr	r0, [pc, #208]	; (8005860 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 8005790:	f7fe f91e 	bl	80039d0 <Wait_Response>
 8005794:	4603      	mov	r3, r0
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 800579a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d141      	bne.n	8005826 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
 80057a6:	f107 0308 	add.w	r3, r7, #8
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fa fd46 	bl	800023c <strlen>
 80057b0:	4603      	mov	r3, r0
 80057b2:	461a      	mov	r2, r3
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	4293      	cmp	r3, r2
 80057b8:	dae7      	bge.n	800578a <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80057ba:	f107 0310 	add.w	r3, r7, #16
 80057be:	4929      	ldr	r1, [pc, #164]	; (8005864 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 80057c0:	4618      	mov	r0, r3
 80057c2:	f007 fa14 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80057c6:	f107 0310 	add.w	r3, r7, #16
 80057ca:	2100      	movs	r1, #0
 80057cc:	4618      	mov	r0, r3
 80057ce:	f005 fae7 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80057d2:	4604      	mov	r4, r0
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	681d      	ldr	r5, [r3, #0]
 80057da:	f107 0318 	add.w	r3, r7, #24
 80057de:	4922      	ldr	r1, [pc, #136]	; (8005868 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 80057e0:	4618      	mov	r0, r3
 80057e2:	f007 fa04 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80057e6:	f107 0318 	add.w	r3, r7, #24
 80057ea:	4619      	mov	r1, r3
 80057ec:	4620      	mov	r0, r4
 80057ee:	47a8      	blx	r5
 80057f0:	4603      	mov	r3, r0
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	3264      	adds	r2, #100	; 0x64
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	f107 0008 	add.w	r0, r7, #8
 80057fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057fe:	4401      	add	r1, r0
 8005800:	7809      	ldrb	r1, [r1, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	4790      	blx	r2
 8005806:	f107 0318 	add.w	r3, r7, #24
 800580a:	4618      	mov	r0, r3
 800580c:	f007 fda7 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005810:	f107 0310 	add.w	r3, r7, #16
 8005814:	4618      	mov	r0, r3
 8005816:	f007 fda2 	bl	800d35e <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800581a:	f7fe f8b5 	bl	8003988 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	3301      	adds	r3, #1
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
 8005824:	e7bf      	b.n	80057a6 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 8005826:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 8005828:	f00e fdc4 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800582c:	4604      	mov	r4, r0
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	3338      	adds	r3, #56	; 0x38
 8005832:	681d      	ldr	r5, [r3, #0]
 8005834:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8005838:	f00e fdcc 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800583c:	4603      	mov	r3, r0
 800583e:	9302      	str	r3, [sp, #8]
 8005840:	f44f 7390 	mov.w	r3, #288	; 0x120
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	4b09      	ldr	r3, [pc, #36]	; (800586c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	4b09      	ldr	r3, [pc, #36]	; (8005870 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 800584c:	4632      	mov	r2, r6
 800584e:	2100      	movs	r1, #0
 8005850:	4620      	mov	r0, r4
 8005852:	47a8      	blx	r5
}
 8005854:	bf00      	nop
 8005856:	372c      	adds	r7, #44	; 0x2c
 8005858:	46bd      	mov	sp, r7
 800585a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585c:	08023910 	.word	0x08023910
 8005860:	0802350c 	.word	0x0802350c
 8005864:	080238b4 	.word	0x080238b4
 8005868:	080238d4 	.word	0x080238d4
 800586c:	08023590 	.word	0x08023590
 8005870:	0802394c 	.word	0x0802394c

08005874 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fc16 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005884:	4a03      	ldr	r2, [pc, #12]	; (8005894 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	080274c4 	.word	0x080274c4

08005898 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	f240 1223 	movw	r2, #291	; 0x123
 80058a4:	4906      	ldr	r1, [pc, #24]	; (80058c0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80058a6:	2004      	movs	r0, #4
 80058a8:	f004 fdde 	bl	800a468 <_ZnwjPKci>
 80058ac:	4604      	mov	r4, r0
 80058ae:	4620      	mov	r0, r4
 80058b0:	f7ff ffe0 	bl	8005874 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 80058b4:	4623      	mov	r3, r4
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd90      	pop	{r4, r7, pc}
 80058be:	bf00      	nop
 80058c0:	08023590 	.word	0x08023590

080058c4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f00d f9b8 	bl	8012c44 <_ZN10UtestShellC1Ev>
 80058d4:	4a03      	ldr	r2, [pc, #12]	; (80058e4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	08027418 	.word	0x08027418

080058e8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 80058e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ea:	b08f      	sub	sp, #60	; 0x3c
 80058ec:	af04      	add	r7, sp, #16
 80058ee:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 80058f6:	f107 030c 	add.w	r3, r7, #12
 80058fa:	492f      	ldr	r1, [pc, #188]	; (80059b8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80058fc:	4618      	mov	r0, r3
 80058fe:	f007 f976 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005902:	f107 030c 	add.w	r3, r7, #12
 8005906:	2100      	movs	r1, #0
 8005908:	4618      	mov	r0, r3
 800590a:	f005 fa49 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800590e:	4604      	mov	r4, r0
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	330c      	adds	r3, #12
 8005914:	681d      	ldr	r5, [r3, #0]
 8005916:	f107 0314 	add.w	r3, r7, #20
 800591a:	4928      	ldr	r1, [pc, #160]	; (80059bc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 800591c:	4618      	mov	r0, r3
 800591e:	f007 f966 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005922:	f107 0314 	add.w	r3, r7, #20
 8005926:	4619      	mov	r1, r3
 8005928:	4620      	mov	r0, r4
 800592a:	47a8      	blx	r5
 800592c:	4604      	mov	r4, r0
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	334c      	adds	r3, #76	; 0x4c
 8005932:	681d      	ldr	r5, [r3, #0]
 8005934:	f107 031c 	add.w	r3, r7, #28
 8005938:	4921      	ldr	r1, [pc, #132]	; (80059c0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 800593a:	4618      	mov	r0, r3
 800593c:	f007 f957 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005940:	f107 031c 	add.w	r3, r7, #28
 8005944:	4a1f      	ldr	r2, [pc, #124]	; (80059c4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005946:	4619      	mov	r1, r3
 8005948:	4620      	mov	r0, r4
 800594a:	47a8      	blx	r5
 800594c:	f107 031c 	add.w	r3, r7, #28
 8005950:	4618      	mov	r0, r3
 8005952:	f007 fd04 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005956:	f107 0314 	add.w	r3, r7, #20
 800595a:	4618      	mov	r0, r3
 800595c:	f007 fcff 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005960:	f107 030c 	add.w	r3, r7, #12
 8005964:	4618      	mov	r0, r3
 8005966:	f007 fcfa 	bl	800d35e <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 800596a:	4917      	ldr	r1, [pc, #92]	; (80059c8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 800596c:	4817      	ldr	r0, [pc, #92]	; (80059cc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 800596e:	f7fe f871 	bl	8003a54 <Connect_Wifi>
 8005972:	4603      	mov	r3, r0
 8005974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800597c:	2b04      	cmp	r3, #4
 800597e:	d100      	bne.n	8005982 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005980:	e7f3      	b.n	800596a <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005982:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005984:	f00e fd16 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8005988:	4604      	mov	r4, r0
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	3338      	adds	r3, #56	; 0x38
 800598e:	681d      	ldr	r5, [r3, #0]
 8005990:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005994:	f00e fd1e 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005998:	4603      	mov	r3, r0
 800599a:	9302      	str	r3, [sp, #8]
 800599c:	f44f 739b 	mov.w	r3, #310	; 0x136
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 80059a8:	4632      	mov	r2, r6
 80059aa:	2101      	movs	r1, #1
 80059ac:	4620      	mov	r0, r4
 80059ae:	47a8      	blx	r5

}
 80059b0:	bf00      	nop
 80059b2:	372c      	adds	r7, #44	; 0x2c
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b8:	080238b4 	.word	0x080238b4
 80059bc:	080238b8 	.word	0x080238b8
 80059c0:	080238cc 	.word	0x080238cc
 80059c4:	08023510 	.word	0x08023510
 80059c8:	08023978 	.word	0x08023978
 80059cc:	08023980 	.word	0x08023980
 80059d0:	08023590 	.word	0x08023590
 80059d4:	08023988 	.word	0x08023988

080059d8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fb64 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80059e8:	4a03      	ldr	r2, [pc, #12]	; (80059f8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	080273f8 	.word	0x080273f8

080059fc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8005a08:	4906      	ldr	r1, [pc, #24]	; (8005a24 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005a0a:	2004      	movs	r0, #4
 8005a0c:	f004 fd2c 	bl	800a468 <_ZnwjPKci>
 8005a10:	4604      	mov	r4, r0
 8005a12:	4620      	mov	r0, r4
 8005a14:	f7ff ffe0 	bl	80059d8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005a18:	4623      	mov	r3, r4
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd90      	pop	{r4, r7, pc}
 8005a22:	bf00      	nop
 8005a24:	08023590 	.word	0x08023590

08005a28 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f00d f906 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8005a38:	4a03      	ldr	r2, [pc, #12]	; (8005a48 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	0802734c 	.word	0x0802734c

08005a4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4e:	b0e1      	sub	sp, #388	; 0x184
 8005a50:	af04      	add	r7, sp, #16
 8005a52:	1d3b      	adds	r3, r7, #4
 8005a54:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005a56:	4a78      	ldr	r2, [pc, #480]	; (8005c38 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005a58:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	2296      	movs	r2, #150	; 0x96
 8005a60:	4618      	mov	r0, r3
 8005a62:	f01a fd9b 	bl	802059c <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 8005a66:	f107 0308 	add.w	r3, r7, #8
 8005a6a:	4a74      	ldr	r2, [pc, #464]	; (8005c3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	4611      	mov	r1, r2
 8005a70:	2396      	movs	r3, #150	; 0x96
 8005a72:	461a      	mov	r2, r3
 8005a74:	f01a fd92 	bl	802059c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005a7e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	dc46      	bgt.n	8005b14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005a86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a8a:	496d      	ldr	r1, [pc, #436]	; (8005c40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f007 f8ae 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005a92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f005 f981 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	681d      	ldr	r5, [r3, #0]
 8005aa6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005aaa:	4966      	ldr	r1, [pc, #408]	; (8005c44 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005aac:	4618      	mov	r0, r3
 8005aae:	f007 f89e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005ab2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4620      	mov	r0, r4
 8005aba:	47a8      	blx	r5
 8005abc:	4604      	mov	r4, r0
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	334c      	adds	r3, #76	; 0x4c
 8005ac2:	681d      	ldr	r5, [r3, #0]
 8005ac4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ac8:	495f      	ldr	r1, [pc, #380]	; (8005c48 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005aca:	4618      	mov	r0, r3
 8005acc:	f007 f88f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005ad0:	f107 0208 	add.w	r2, r7, #8
 8005ad4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005ad8:	2132      	movs	r1, #50	; 0x32
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	441a      	add	r2, r3
 8005ae0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	47a8      	blx	r5
 8005aea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005aee:	4618      	mov	r0, r3
 8005af0:	f007 fc35 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005af4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005af8:	4618      	mov	r0, r3
 8005afa:	f007 fc30 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005afe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b02:	4618      	mov	r0, r3
 8005b04:	f007 fc2b 	bl	800d35e <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005b08:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005b12:	e7b4      	b.n	8005a7e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005b14:	2304      	movs	r3, #4
 8005b16:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005b20:	494a      	ldr	r1, [pc, #296]	; (8005c4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005b22:	484b      	ldr	r0, [pc, #300]	; (8005c50 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005b24:	f7fd ff96 	bl	8003a54 <Connect_Wifi>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8005b2e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d065      	beq.n	8005c02 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005b36:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d061      	beq.n	8005c02 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005b3e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d05d      	beq.n	8005c02 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
		{
			break;
		}

		if(i<3)
 8005b46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	dce8      	bgt.n	8005b20 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005b54:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005b58:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b5c:	2132      	movs	r1, #50	; 0x32
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fa fb69 	bl	800023c <strlen>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b72:	4293      	cmp	r3, r2
 8005b74:	da3f      	bge.n	8005bf6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1aa>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005b76:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b7a:	4931      	ldr	r1, [pc, #196]	; (8005c40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f007 f836 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005b82:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f005 f909 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b8e:	4604      	mov	r4, r0
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	330c      	adds	r3, #12
 8005b94:	681d      	ldr	r5, [r3, #0]
 8005b96:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b9a:	492e      	ldr	r1, [pc, #184]	; (8005c54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x208>)
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f007 f826 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005ba2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4620      	mov	r0, r4
 8005baa:	47a8      	blx	r5
 8005bac:	4603      	mov	r3, r0
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	3264      	adds	r2, #100	; 0x64
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005bb8:	2032      	movs	r0, #50	; 0x32
 8005bba:	fb00 f101 	mul.w	r1, r0, r1
 8005bbe:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005bc2:	4408      	add	r0, r1
 8005bc4:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005bc8:	4401      	add	r1, r0
 8005bca:	39d0      	subs	r1, #208	; 0xd0
 8005bcc:	7809      	ldrb	r1, [r1, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	4790      	blx	r2
 8005bd2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f007 fbc1 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005bdc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005be0:	4618      	mov	r0, r3
 8005be2:	f007 fbbc 	bl	800d35e <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005be6:	f7fd fecf 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005bea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005bee:	3301      	adds	r3, #1
 8005bf0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005bf4:	e7ae      	b.n	8005b54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x108>
			}
			i++;
 8005bf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005c00:	e78e      	b.n	8005b20 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
	LONGS_EQUAL(STATUS_ERROR,response);
 8005c02:	f00e fbd7 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8005c06:	4604      	mov	r4, r0
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	3338      	adds	r3, #56	; 0x38
 8005c0c:	681d      	ldr	r5, [r3, #0]
 8005c0e:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005c12:	f00e fbdf 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005c16:	4603      	mov	r3, r0
 8005c18:	9302      	str	r3, [sp, #8]
 8005c1a:	f44f 73b1 	mov.w	r3, #354	; 0x162
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x20c>)
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x210>)
 8005c26:	4632      	mov	r2, r6
 8005c28:	2103      	movs	r1, #3
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	47a8      	blx	r5

}
 8005c2e:	bf00      	nop
 8005c30:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c38:	080239e0 	.word	0x080239e0
 8005c3c:	08023a78 	.word	0x08023a78
 8005c40:	080238b4 	.word	0x080238b4
 8005c44:	080238b8 	.word	0x080238b8
 8005c48:	080238cc 	.word	0x080238cc
 8005c4c:	08023978 	.word	0x08023978
 8005c50:	08023980 	.word	0x08023980
 8005c54:	080238d4 	.word	0x080238d4
 8005c58:	08023590 	.word	0x08023590
 8005c5c:	080239b4 	.word	0x080239b4

08005c60 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fa20 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005c70:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	0802732c 	.word	0x0802732c

08005c84 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8005c90:	4906      	ldr	r1, [pc, #24]	; (8005cac <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005c92:	2004      	movs	r0, #4
 8005c94:	f004 fbe8 	bl	800a468 <_ZnwjPKci>
 8005c98:	4604      	mov	r4, r0
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f7ff ffe0 	bl	8005c60 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd90      	pop	{r4, r7, pc}
 8005caa:	bf00      	nop
 8005cac:	08023590 	.word	0x08023590

08005cb0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f00c ffc2 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8005cc0:	4a03      	ldr	r2, [pc, #12]	; (8005cd0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	08027280 	.word	0x08027280

08005cd4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cd6:	b0e1      	sub	sp, #388	; 0x184
 8005cd8:	af04      	add	r7, sp, #16
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005cde:	4a77      	ldr	r2, [pc, #476]	; (8005ebc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005ce0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	2296      	movs	r2, #150	; 0x96
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f01a fc57 	bl	802059c <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 8005cee:	f107 0308 	add.w	r3, r7, #8
 8005cf2:	4a73      	ldr	r2, [pc, #460]	; (8005ec0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	2396      	movs	r3, #150	; 0x96
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f01a fc4e 	bl	802059c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005d00:	2300      	movs	r3, #0
 8005d02:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d06:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	dc46      	bgt.n	8005d9c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005d0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d12:	496c      	ldr	r1, [pc, #432]	; (8005ec4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005d14:	4618      	mov	r0, r3
 8005d16:	f006 ff6a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005d1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d1e:	2100      	movs	r1, #0
 8005d20:	4618      	mov	r0, r3
 8005d22:	f005 f83d 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005d26:	4604      	mov	r4, r0
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	681d      	ldr	r5, [r3, #0]
 8005d2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d32:	4965      	ldr	r1, [pc, #404]	; (8005ec8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005d34:	4618      	mov	r0, r3
 8005d36:	f006 ff5a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005d3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4620      	mov	r0, r4
 8005d42:	47a8      	blx	r5
 8005d44:	4604      	mov	r4, r0
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	334c      	adds	r3, #76	; 0x4c
 8005d4a:	681d      	ldr	r5, [r3, #0]
 8005d4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d50:	495e      	ldr	r1, [pc, #376]	; (8005ecc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005d52:	4618      	mov	r0, r3
 8005d54:	f006 ff4b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005d58:	f107 0208 	add.w	r2, r7, #8
 8005d5c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d60:	2132      	movs	r1, #50	; 0x32
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	441a      	add	r2, r3
 8005d68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4620      	mov	r0, r4
 8005d70:	47a8      	blx	r5
 8005d72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d76:	4618      	mov	r0, r3
 8005d78:	f007 faf1 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005d7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d80:	4618      	mov	r0, r3
 8005d82:	f007 faec 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005d86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f007 fae7 	bl	800d35e <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005d90:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d94:	3301      	adds	r3, #1
 8005d96:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d9a:	e7b4      	b.n	8005d06 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005da2:	494b      	ldr	r1, [pc, #300]	; (8005ed0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005da4:	484b      	ldr	r0, [pc, #300]	; (8005ed4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x200>)
 8005da6:	f7fd fe55 	bl	8003a54 <Connect_Wifi>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8005db0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d065      	beq.n	8005e84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005db8:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d061      	beq.n	8005e84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005dc0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d05d      	beq.n	8005e84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
		{
			break;
		}

		if(i<3)
 8005dc8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	dce8      	bgt.n	8005da2 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005dd6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005dda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005dde:	2132      	movs	r1, #50	; 0x32
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa fa28 	bl	800023c <strlen>
 8005dec:	4603      	mov	r3, r0
 8005dee:	461a      	mov	r2, r3
 8005df0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005df4:	4293      	cmp	r3, r2
 8005df6:	da3f      	bge.n	8005e78 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005df8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005dfc:	4931      	ldr	r1, [pc, #196]	; (8005ec4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f006 fef5 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005e04:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e08:	2100      	movs	r1, #0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f004 ffc8 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e10:	4604      	mov	r4, r0
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	330c      	adds	r3, #12
 8005e16:	681d      	ldr	r5, [r3, #0]
 8005e18:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e1c:	492e      	ldr	r1, [pc, #184]	; (8005ed8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x204>)
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f006 fee5 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005e24:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	47a8      	blx	r5
 8005e2e:	4603      	mov	r3, r0
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	3264      	adds	r2, #100	; 0x64
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005e3a:	2032      	movs	r0, #50	; 0x32
 8005e3c:	fb00 f101 	mul.w	r1, r0, r1
 8005e40:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005e44:	4408      	add	r0, r1
 8005e46:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005e4a:	4401      	add	r1, r0
 8005e4c:	39d0      	subs	r1, #208	; 0xd0
 8005e4e:	7809      	ldrb	r1, [r1, #0]
 8005e50:	4618      	mov	r0, r3
 8005e52:	4790      	blx	r2
 8005e54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f007 fa80 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005e5e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e62:	4618      	mov	r0, r3
 8005e64:	f007 fa7b 	bl	800d35e <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005e68:	f7fd fd8e 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005e6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005e70:	3301      	adds	r3, #1
 8005e72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005e76:	e7ae      	b.n	8005dd6 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x102>
			}
			i++;
 8005e78:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005e82:	e78e      	b.n	8005da2 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
	LONGS_EQUAL(STATUS_OK,response);
 8005e84:	f00e fa96 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8005e88:	4604      	mov	r4, r0
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	3338      	adds	r3, #56	; 0x38
 8005e8e:	681d      	ldr	r5, [r3, #0]
 8005e90:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005e94:	f00e fa9e 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	9302      	str	r3, [sp, #8]
 8005e9c:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x208>)
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	; (8005ee0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x20c>)
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	2102      	movs	r1, #2
 8005eac:	4620      	mov	r0, r4
 8005eae:	47a8      	blx	r5

}
 8005eb0:	bf00      	nop
 8005eb2:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	08023b38 	.word	0x08023b38
 8005ec0:	08023a78 	.word	0x08023a78
 8005ec4:	080238b4 	.word	0x080238b4
 8005ec8:	080238b8 	.word	0x080238b8
 8005ecc:	080238cc 	.word	0x080238cc
 8005ed0:	08023978 	.word	0x08023978
 8005ed4:	08023980 	.word	0x08023980
 8005ed8:	080238d4 	.word	0x080238d4
 8005edc:	08023590 	.word	0x08023590
 8005ee0:	08023b10 	.word	0x08023b10

08005ee4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff f8de 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ef4:	4a03      	ldr	r2, [pc, #12]	; (8005f04 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	08027260 	.word	0x08027260

08005f08 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005f08:	b590      	push	{r4, r7, lr}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8005f14:	4906      	ldr	r1, [pc, #24]	; (8005f30 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005f16:	2004      	movs	r0, #4
 8005f18:	f004 faa6 	bl	800a468 <_ZnwjPKci>
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7ff ffe0 	bl	8005ee4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8005f24:	4623      	mov	r3, r4
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd90      	pop	{r4, r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	08023590 	.word	0x08023590

08005f34 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f00c fe80 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8005f44:	4a03      	ldr	r2, [pc, #12]	; (8005f54 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	080271b4 	.word	0x080271b4

08005f58 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f5a:	b08f      	sub	sp, #60	; 0x3c
 8005f5c:	af04      	add	r7, sp, #16
 8005f5e:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005f60:	f107 030c 	add.w	r3, r7, #12
 8005f64:	492e      	ldr	r1, [pc, #184]	; (8006020 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 8005f66:	4618      	mov	r0, r3
 8005f68:	f006 fe41 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005f6c:	f107 030c 	add.w	r3, r7, #12
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f004 ff14 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f78:	4604      	mov	r4, r0
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	681d      	ldr	r5, [r3, #0]
 8005f80:	f107 0314 	add.w	r3, r7, #20
 8005f84:	4927      	ldr	r1, [pc, #156]	; (8006024 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 8005f86:	4618      	mov	r0, r3
 8005f88:	f006 fe31 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	4619      	mov	r1, r3
 8005f92:	4620      	mov	r0, r4
 8005f94:	47a8      	blx	r5
 8005f96:	4604      	mov	r4, r0
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	334c      	adds	r3, #76	; 0x4c
 8005f9c:	681d      	ldr	r5, [r3, #0]
 8005f9e:	f107 031c 	add.w	r3, r7, #28
 8005fa2:	4921      	ldr	r1, [pc, #132]	; (8006028 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f006 fe22 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8005faa:	f107 031c 	add.w	r3, r7, #28
 8005fae:	4a1f      	ldr	r2, [pc, #124]	; (800602c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	47a8      	blx	r5
 8005fb6:	f107 031c 	add.w	r3, r7, #28
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f007 f9cf 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005fc0:	f107 0314 	add.w	r3, r7, #20
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f007 f9ca 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8005fca:	f107 030c 	add.w	r3, r7, #12
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f007 f9c5 	bl	800d35e <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8005fd4:	f7fd fd78 	bl	8003ac8 <Disconnect_Wifi>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d100      	bne.n	8005fe8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 8005fe6:	e7f5      	b.n	8005fd4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 8005fe8:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005fea:	f00e f9e3 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8005fee:	4604      	mov	r4, r0
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	3338      	adds	r3, #56	; 0x38
 8005ff4:	681d      	ldr	r5, [r3, #0]
 8005ff6:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005ffa:	f00e f9eb 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005ffe:	4603      	mov	r3, r0
 8006000:	9302      	str	r3, [sp, #8]
 8006002:	f240 13a1 	movw	r3, #417	; 0x1a1
 8006006:	9301      	str	r3, [sp, #4]
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 800600e:	4632      	mov	r2, r6
 8006010:	2101      	movs	r1, #1
 8006012:	4620      	mov	r0, r4
 8006014:	47a8      	blx	r5
}
 8006016:	bf00      	nop
 8006018:	372c      	adds	r7, #44	; 0x2c
 800601a:	46bd      	mov	sp, r7
 800601c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800601e:	bf00      	nop
 8006020:	080238b4 	.word	0x080238b4
 8006024:	080238b8 	.word	0x080238b8
 8006028:	080238cc 	.word	0x080238cc
 800602c:	08023520 	.word	0x08023520
 8006030:	08023590 	.word	0x08023590
 8006034:	08023988 	.word	0x08023988

08006038 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff f834 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006048:	4a03      	ldr	r2, [pc, #12]	; (8006058 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	08027194 	.word	0x08027194

0800605c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006068:	4906      	ldr	r1, [pc, #24]	; (8006084 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 800606a:	2004      	movs	r0, #4
 800606c:	f004 f9fc 	bl	800a468 <_ZnwjPKci>
 8006070:	4604      	mov	r4, r0
 8006072:	4620      	mov	r0, r4
 8006074:	f7ff ffe0 	bl	8006038 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8006078:	4623      	mov	r3, r4
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	bd90      	pop	{r4, r7, pc}
 8006082:	bf00      	nop
 8006084:	08023590 	.word	0x08023590

08006088 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4618      	mov	r0, r3
 8006094:	f00c fdd6 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8006098:	4a03      	ldr	r2, [pc, #12]	; (80060a8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	080270e8 	.word	0x080270e8

080060ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 80060ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ae:	b093      	sub	sp, #76	; 0x4c
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 80060b4:	f107 0308 	add.w	r3, r7, #8
 80060b8:	494a      	ldr	r1, [pc, #296]	; (80061e4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80060ba:	4618      	mov	r0, r3
 80060bc:	f006 fd97 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80060c0:	f107 0308 	add.w	r3, r7, #8
 80060c4:	2100      	movs	r1, #0
 80060c6:	4618      	mov	r0, r3
 80060c8:	f004 fe6a 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80060cc:	4604      	mov	r4, r0
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	681d      	ldr	r5, [r3, #0]
 80060d4:	f107 0310 	add.w	r3, r7, #16
 80060d8:	4943      	ldr	r1, [pc, #268]	; (80061e8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 80060da:	4618      	mov	r0, r3
 80060dc:	f006 fd87 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80060e0:	f107 0310 	add.w	r3, r7, #16
 80060e4:	4619      	mov	r1, r3
 80060e6:	4620      	mov	r0, r4
 80060e8:	47a8      	blx	r5
 80060ea:	4604      	mov	r4, r0
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	334c      	adds	r3, #76	; 0x4c
 80060f0:	681d      	ldr	r5, [r3, #0]
 80060f2:	f107 0318 	add.w	r3, r7, #24
 80060f6:	493d      	ldr	r1, [pc, #244]	; (80061ec <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 80060f8:	4618      	mov	r0, r3
 80060fa:	f006 fd78 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80060fe:	f107 0318 	add.w	r3, r7, #24
 8006102:	4a3b      	ldr	r2, [pc, #236]	; (80061f0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 8006104:	4619      	mov	r1, r3
 8006106:	4620      	mov	r0, r4
 8006108:	47a8      	blx	r5
 800610a:	f107 0318 	add.w	r3, r7, #24
 800610e:	4618      	mov	r0, r3
 8006110:	f007 f925 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006114:	f107 0310 	add.w	r3, r7, #16
 8006118:	4618      	mov	r0, r3
 800611a:	f007 f920 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800611e:	f107 0308 	add.w	r3, r7, #8
 8006122:	4618      	mov	r0, r3
 8006124:	f007 f91b 	bl	800d35e <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006128:	f7fd fcce 	bl	8003ac8 <Disconnect_Wifi>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006132:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006136:	2b04      	cmp	r3, #4
 8006138:	d139      	bne.n	80061ae <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800613a:	2300      	movs	r3, #0
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006140:	2b01      	cmp	r3, #1
 8006142:	dcf1      	bgt.n	8006128 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006144:	f107 0320 	add.w	r3, r7, #32
 8006148:	4926      	ldr	r1, [pc, #152]	; (80061e4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 800614a:	4618      	mov	r0, r3
 800614c:	f006 fd4f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006150:	f107 0320 	add.w	r3, r7, #32
 8006154:	2100      	movs	r1, #0
 8006156:	4618      	mov	r0, r3
 8006158:	f004 fe22 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800615c:	4604      	mov	r4, r0
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	681d      	ldr	r5, [r3, #0]
 8006164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006168:	4922      	ldr	r1, [pc, #136]	; (80061f4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 800616a:	4618      	mov	r0, r3
 800616c:	f006 fd3f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006174:	4619      	mov	r1, r3
 8006176:	4620      	mov	r0, r4
 8006178:	47a8      	blx	r5
 800617a:	4603      	mov	r3, r0
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	3264      	adds	r2, #100	; 0x64
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	481d      	ldr	r0, [pc, #116]	; (80061f8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 8006184:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006186:	4401      	add	r1, r0
 8006188:	7809      	ldrb	r1, [r1, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	4790      	blx	r2
 800618e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006192:	4618      	mov	r0, r3
 8006194:	f007 f8e3 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006198:	f107 0320 	add.w	r3, r7, #32
 800619c:	4618      	mov	r0, r3
 800619e:	f007 f8de 	bl	800d35e <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80061a2:	f7fd fbf1 	bl	8003988 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	3301      	adds	r3, #1
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
 80061ac:	e7c7      	b.n	800613e <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 80061ae:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 80061b0:	f00e f900 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80061b4:	4604      	mov	r4, r0
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	3338      	adds	r3, #56	; 0x38
 80061ba:	681d      	ldr	r5, [r3, #0]
 80061bc:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80061c0:	f00e f908 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80061c4:	4603      	mov	r3, r0
 80061c6:	9302      	str	r3, [sp, #8]
 80061c8:	f240 13b9 	movw	r3, #441	; 0x1b9
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 80061d4:	4632      	mov	r2, r6
 80061d6:	2102      	movs	r1, #2
 80061d8:	4620      	mov	r0, r4
 80061da:	47a8      	blx	r5
}
 80061dc:	bf00      	nop
 80061de:	373c      	adds	r7, #60	; 0x3c
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e4:	080238b4 	.word	0x080238b4
 80061e8:	080238b8 	.word	0x080238b8
 80061ec:	080238cc 	.word	0x080238cc
 80061f0:	08023520 	.word	0x08023520
 80061f4:	080238d4 	.word	0x080238d4
 80061f8:	0802350c 	.word	0x0802350c
 80061fc:	08023590 	.word	0x08023590
 8006200:	08023b10 	.word	0x08023b10

08006204 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe ff4e 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006214:	4a03      	ldr	r2, [pc, #12]	; (8006224 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	080270c8 	.word	0x080270c8

08006228 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8006228:	b590      	push	{r4, r7, lr}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8006234:	4906      	ldr	r1, [pc, #24]	; (8006250 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 8006236:	2004      	movs	r0, #4
 8006238:	f004 f916 	bl	800a468 <_ZnwjPKci>
 800623c:	4604      	mov	r4, r0
 800623e:	4620      	mov	r0, r4
 8006240:	f7ff ffe0 	bl	8006204 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 8006244:	4623      	mov	r3, r4
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bd90      	pop	{r4, r7, pc}
 800624e:	bf00      	nop
 8006250:	08023590 	.word	0x08023590

08006254 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4618      	mov	r0, r3
 8006260:	f00c fcf0 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8006264:	4a03      	ldr	r2, [pc, #12]	; (8006274 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	0802701c 	.word	0x0802701c

08006278 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8006278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627a:	b09b      	sub	sp, #108	; 0x6c
 800627c:	af04      	add	r7, sp, #16
 800627e:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8006280:	4a6d      	ldr	r2, [pc, #436]	; (8006438 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 8006282:	f107 0314 	add.w	r3, r7, #20
 8006286:	ca07      	ldmia	r2, {r0, r1, r2}
 8006288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,								// check wifi connection response
	  (char*)AT_RESPONSE_OK								// connect wifi command response
	};

	char *fake_command_buffer[3] =
 800628c:	4a6b      	ldr	r2, [pc, #428]	; (800643c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	ca07      	ldmia	r2, {r0, r1, r2}
 8006294:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006298:	2300      	movs	r3, #0
 800629a:	657b      	str	r3, [r7, #84]	; 0x54
 800629c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800629e:	2b02      	cmp	r3, #2
 80062a0:	dc43      	bgt.n	800632a <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80062a2:	f107 0320 	add.w	r3, r7, #32
 80062a6:	4966      	ldr	r1, [pc, #408]	; (8006440 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 80062a8:	4618      	mov	r0, r3
 80062aa:	f006 fca0 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80062ae:	f107 0320 	add.w	r3, r7, #32
 80062b2:	2100      	movs	r1, #0
 80062b4:	4618      	mov	r0, r3
 80062b6:	f004 fd73 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80062ba:	4604      	mov	r4, r0
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	330c      	adds	r3, #12
 80062c0:	681d      	ldr	r5, [r3, #0]
 80062c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062c6:	495f      	ldr	r1, [pc, #380]	; (8006444 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 80062c8:	4618      	mov	r0, r3
 80062ca:	f006 fc90 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80062ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062d2:	4619      	mov	r1, r3
 80062d4:	4620      	mov	r0, r4
 80062d6:	47a8      	blx	r5
 80062d8:	4604      	mov	r4, r0
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	334c      	adds	r3, #76	; 0x4c
 80062de:	681d      	ldr	r5, [r3, #0]
 80062e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062e4:	4958      	ldr	r1, [pc, #352]	; (8006448 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 80062e6:	4618      	mov	r0, r3
 80062e8:	f006 fc81 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80062ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80062f4:	4413      	add	r3, r2
 80062f6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80062fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062fe:	4619      	mov	r1, r3
 8006300:	4620      	mov	r0, r4
 8006302:	47a8      	blx	r5
 8006304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006308:	4618      	mov	r0, r3
 800630a:	f007 f828 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800630e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006312:	4618      	mov	r0, r3
 8006314:	f007 f823 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006318:	f107 0320 	add.w	r3, r7, #32
 800631c:	4618      	mov	r0, r3
 800631e:	f007 f81e 	bl	800d35e <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006324:	3301      	adds	r3, #1
 8006326:	657b      	str	r3, [r7, #84]	; 0x54
 8006328:	e7b8      	b.n	800629c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 800632e:	f107 0114 	add.w	r1, r7, #20
 8006332:	f107 0308 	add.w	r3, r7, #8
 8006336:	2203      	movs	r2, #3
 8006338:	4618      	mov	r0, r3
 800633a:	f7fd fbe1 	bl	8003b00 <Command_Process>
 800633e:	4603      	mov	r3, r0
 8006340:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006344:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006348:	2b03      	cmp	r3, #3
 800634a:	d05b      	beq.n	8006404 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
 800634c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006350:	2b02      	cmp	r3, #2
 8006352:	d057      	beq.n	8006404 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
 8006354:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006358:	2b01      	cmp	r3, #1
 800635a:	d053      	beq.n	8006404 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
		{
			break;
		}

		if(i<3)
 800635c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800635e:	2b02      	cmp	r3, #2
 8006360:	dce5      	bgt.n	800632e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006362:	2300      	movs	r3, #0
 8006364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800636e:	4413      	add	r3, r2
 8006370:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006374:	4618      	mov	r0, r3
 8006376:	f7f9 ff61 	bl	800023c <strlen>
 800637a:	4603      	mov	r3, r0
 800637c:	461a      	mov	r2, r3
 800637e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006380:	4293      	cmp	r3, r2
 8006382:	da3b      	bge.n	80063fc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x184>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006384:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006388:	492d      	ldr	r1, [pc, #180]	; (8006440 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 800638a:	4618      	mov	r0, r3
 800638c:	f006 fc2f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006390:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f004 fd02 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800639c:	4604      	mov	r4, r0
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	681d      	ldr	r5, [r3, #0]
 80063a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063a8:	4928      	ldr	r1, [pc, #160]	; (800644c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d4>)
 80063aa:	4618      	mov	r0, r3
 80063ac:	f006 fc1f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80063b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063b4:	4619      	mov	r1, r3
 80063b6:	4620      	mov	r0, r4
 80063b8:	47a8      	blx	r5
 80063ba:	4602      	mov	r2, r0
 80063bc:	6813      	ldr	r3, [r2, #0]
 80063be:	3364      	adds	r3, #100	; 0x64
 80063c0:	681c      	ldr	r4, [r3, #0]
 80063c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80063ca:	440b      	add	r3, r1
 80063cc:	f853 1c44 	ldr.w	r1, [r3, #-68]
 80063d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d2:	440b      	add	r3, r1
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	47a0      	blx	r4
 80063dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063e0:	4618      	mov	r0, r3
 80063e2:	f006 ffbc 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80063e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80063ea:	4618      	mov	r0, r3
 80063ec:	f006 ffb7 	bl	800d35e <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80063f0:	f7fd faca 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80063f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f6:	3301      	adds	r3, #1
 80063f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063fa:	e7b4      	b.n	8006366 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xee>
			}
			i++;
 80063fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063fe:	3301      	adds	r3, #1
 8006400:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 8006402:	e794      	b.n	800632e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
	LONGS_EQUAL(STATUS_OK,response);
 8006404:	f00d ffd6 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8006408:	4604      	mov	r4, r0
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	3338      	adds	r3, #56	; 0x38
 800640e:	681d      	ldr	r5, [r3, #0]
 8006410:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 8006414:	f00d ffde 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006418:	4603      	mov	r3, r0
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d8>)
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1dc>)
 8006428:	4632      	mov	r2, r6
 800642a:	2102      	movs	r1, #2
 800642c:	4620      	mov	r0, r4
 800642e:	47a8      	blx	r5

}
 8006430:	bf00      	nop
 8006432:	375c      	adds	r7, #92	; 0x5c
 8006434:	46bd      	mov	sp, r7
 8006436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006438:	08023bd0 	.word	0x08023bd0
 800643c:	08023bdc 	.word	0x08023bdc
 8006440:	080238b4 	.word	0x080238b4
 8006444:	080238b8 	.word	0x080238b8
 8006448:	080238cc 	.word	0x080238cc
 800644c:	080238d4 	.word	0x080238d4
 8006450:	08023590 	.word	0x08023590
 8006454:	08023b10 	.word	0x08023b10

08006458 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	f7fe fe24 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006468:	4a03      	ldr	r2, [pc, #12]	; (8006478 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	08026ffc 	.word	0x08026ffc

0800647c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006488:	4906      	ldr	r1, [pc, #24]	; (80064a4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 800648a:	2004      	movs	r0, #4
 800648c:	f003 ffec 	bl	800a468 <_ZnwjPKci>
 8006490:	4604      	mov	r4, r0
 8006492:	4620      	mov	r0, r4
 8006494:	f7ff ffe0 	bl	8006458 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8006498:	4623      	mov	r3, r4
 800649a:	4618      	mov	r0, r3
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd90      	pop	{r4, r7, pc}
 80064a2:	bf00      	nop
 80064a4:	08023590 	.word	0x08023590

080064a8 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f00c fbc6 	bl	8012c44 <_ZN10UtestShellC1Ev>
 80064b8:	4a03      	ldr	r2, [pc, #12]	; (80064c8 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	08026f50 	.word	0x08026f50

080064cc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 80064cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ce:	b0bf      	sub	sp, #252	; 0xfc
 80064d0:	af04      	add	r7, sp, #16
 80064d2:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 80064d4:	4a74      	ldr	r2, [pc, #464]	; (80066a8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 80064d6:	f107 0318 	add.w	r3, r7, #24
 80064da:	4611      	mov	r1, r2
 80064dc:	2296      	movs	r2, #150	; 0x96
 80064de:	4618      	mov	r0, r3
 80064e0:	f01a f85c 	bl	802059c <memcpy>
	{ 	AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[3] =
 80064e4:	4a71      	ldr	r2, [pc, #452]	; (80066ac <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 80064e6:	f107 030c 	add.w	r3, r7, #12
 80064ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80064ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CIPCLOSE,
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<3;i++)
 80064f0:	2300      	movs	r3, #0
 80064f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	dc46      	bgt.n	800658c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80064fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006502:	496b      	ldr	r1, [pc, #428]	; (80066b0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 8006504:	4618      	mov	r0, r3
 8006506:	f006 fb72 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800650a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800650e:	2100      	movs	r1, #0
 8006510:	4618      	mov	r0, r3
 8006512:	f004 fc45 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006516:	4604      	mov	r4, r0
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	330c      	adds	r3, #12
 800651c:	681d      	ldr	r5, [r3, #0]
 800651e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006522:	4964      	ldr	r1, [pc, #400]	; (80066b4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 8006524:	4618      	mov	r0, r3
 8006526:	f006 fb62 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800652a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800652e:	4619      	mov	r1, r3
 8006530:	4620      	mov	r0, r4
 8006532:	47a8      	blx	r5
 8006534:	4604      	mov	r4, r0
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	334c      	adds	r3, #76	; 0x4c
 800653a:	681d      	ldr	r5, [r3, #0]
 800653c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006540:	495d      	ldr	r1, [pc, #372]	; (80066b8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 8006542:	4618      	mov	r0, r3
 8006544:	f006 fb53 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006552:	4413      	add	r3, r2
 8006554:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8006558:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800655c:	4619      	mov	r1, r3
 800655e:	4620      	mov	r0, r4
 8006560:	47a8      	blx	r5
 8006562:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006566:	4618      	mov	r0, r3
 8006568:	f006 fef9 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800656c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006570:	4618      	mov	r0, r3
 8006572:	f006 fef4 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006576:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800657a:	4618      	mov	r0, r3
 800657c:	f006 feef 	bl	800d35e <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006584:	3301      	adds	r3, #1
 8006586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800658a:	e7b4      	b.n	80064f6 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2a>
	}

	Status response;
	int i = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006592:	494a      	ldr	r1, [pc, #296]	; (80066bc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 8006594:	484a      	ldr	r0, [pc, #296]	; (80066c0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 8006596:	f7fd fb39 	bl	8003c0c <Connect_TCP_Server>
 800659a:	4603      	mov	r3, r0
 800659c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 80065a0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d065      	beq.n	8006674 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
 80065a8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d061      	beq.n	8006674 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
 80065b0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d05d      	beq.n	8006674 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
		{
			break;
		}

		if(i<3)
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065bc:	2b02      	cmp	r3, #2
 80065be:	dce8      	bgt.n	8006592 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065c6:	f107 0218 	add.w	r2, r7, #24
 80065ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ce:	2132      	movs	r1, #50	; 0x32
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	4413      	add	r3, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7f9 fe30 	bl	800023c <strlen>
 80065dc:	4603      	mov	r3, r0
 80065de:	461a      	mov	r2, r3
 80065e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e4:	4293      	cmp	r3, r2
 80065e6:	da3f      	bge.n	8006668 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19c>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80065e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80065ec:	4930      	ldr	r1, [pc, #192]	; (80066b0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 80065ee:	4618      	mov	r0, r3
 80065f0:	f006 fafd 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80065f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f004 fbd0 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006600:	4604      	mov	r4, r0
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	330c      	adds	r3, #12
 8006606:	681d      	ldr	r5, [r3, #0]
 8006608:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800660c:	492d      	ldr	r1, [pc, #180]	; (80066c4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f8>)
 800660e:	4618      	mov	r0, r3
 8006610:	f006 faed 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006614:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006618:	4619      	mov	r1, r3
 800661a:	4620      	mov	r0, r4
 800661c:	47a8      	blx	r5
 800661e:	4603      	mov	r3, r0
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	3264      	adds	r2, #100	; 0x64
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800662a:	2032      	movs	r0, #50	; 0x32
 800662c:	fb00 f101 	mul.w	r1, r0, r1
 8006630:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8006634:	4408      	add	r0, r1
 8006636:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800663a:	4401      	add	r1, r0
 800663c:	39d0      	subs	r1, #208	; 0xd0
 800663e:	7809      	ldrb	r1, [r1, #0]
 8006640:	4618      	mov	r0, r3
 8006642:	4790      	blx	r2
 8006644:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006648:	4618      	mov	r0, r3
 800664a:	f006 fe88 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800664e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006652:	4618      	mov	r0, r3
 8006654:	f006 fe83 	bl	800d35e <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006658:	f7fd f996 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800665c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006660:	3301      	adds	r3, #1
 8006662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006666:	e7ae      	b.n	80065c6 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xfa>
			}
			i++;
 8006668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666c:	3301      	adds	r3, #1
 800666e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 8006672:	e78e      	b.n	8006592 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(STATUS_OK,response);
 8006674:	f00d fe9e 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8006678:	4604      	mov	r4, r0
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	3338      	adds	r3, #56	; 0x38
 800667e:	681d      	ldr	r5, [r3, #0]
 8006680:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 8006684:	f00d fea6 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006688:	4603      	mov	r3, r0
 800668a:	9302      	str	r3, [sp, #8]
 800668c:	f240 2311 	movw	r3, #529	; 0x211
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1fc>)
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x200>)
 8006698:	4632      	mov	r2, r6
 800669a:	2102      	movs	r1, #2
 800669c:	4620      	mov	r0, r4
 800669e:	47a8      	blx	r5

}
 80066a0:	bf00      	nop
 80066a2:	37ec      	adds	r7, #236	; 0xec
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066a8:	08023bf8 	.word	0x08023bf8
 80066ac:	08023c90 	.word	0x08023c90
 80066b0:	080238b4 	.word	0x080238b4
 80066b4:	080238b8 	.word	0x080238b8
 80066b8:	080238cc 	.word	0x080238cc
 80066bc:	08023be8 	.word	0x08023be8
 80066c0:	08023bec 	.word	0x08023bec
 80066c4:	080238d4 	.word	0x080238d4
 80066c8:	08023590 	.word	0x08023590
 80066cc:	08023b10 	.word	0x08023b10

080066d0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fce8 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80066e0:	4a03      	ldr	r2, [pc, #12]	; (80066f0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	08026f30 	.word	0x08026f30

080066f4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 80066f4:	b590      	push	{r4, r7, lr}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	f240 2215 	movw	r2, #533	; 0x215
 8006700:	4906      	ldr	r1, [pc, #24]	; (800671c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 8006702:	2004      	movs	r0, #4
 8006704:	f003 feb0 	bl	800a468 <_ZnwjPKci>
 8006708:	4604      	mov	r4, r0
 800670a:	4620      	mov	r0, r4
 800670c:	f7ff ffe0 	bl	80066d0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 8006710:	4623      	mov	r3, r4
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	bd90      	pop	{r4, r7, pc}
 800671a:	bf00      	nop
 800671c:	08023590 	.word	0x08023590

08006720 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4618      	mov	r0, r3
 800672c:	f00c fa8a 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8006730:	4a03      	ldr	r2, [pc, #12]	; (8006740 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	08026e84 	.word	0x08026e84

08006744 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 8006744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006746:	b091      	sub	sp, #68	; 0x44
 8006748:	af04      	add	r7, sp, #16
 800674a:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[3] =
 800674c:	4a36      	ldr	r2, [pc, #216]	; (8006828 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 800674e:	f107 0308 	add.w	r3, r7, #8
 8006752:	ca07      	ldmia	r2, {r0, r1, r2}
 8006754:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CIPCLOSE,
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 8006758:	f107 0314 	add.w	r3, r7, #20
 800675c:	4933      	ldr	r1, [pc, #204]	; (800682c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 800675e:	4618      	mov	r0, r3
 8006760:	f006 fa45 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006764:	f107 0314 	add.w	r3, r7, #20
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f004 fb18 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006770:	4604      	mov	r4, r0
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	681d      	ldr	r5, [r3, #0]
 8006778:	f107 031c 	add.w	r3, r7, #28
 800677c:	492c      	ldr	r1, [pc, #176]	; (8006830 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 800677e:	4618      	mov	r0, r3
 8006780:	f006 fa35 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006784:	f107 031c 	add.w	r3, r7, #28
 8006788:	4619      	mov	r1, r3
 800678a:	4620      	mov	r0, r4
 800678c:	47a8      	blx	r5
 800678e:	4604      	mov	r4, r0
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	334c      	adds	r3, #76	; 0x4c
 8006794:	681d      	ldr	r5, [r3, #0]
 8006796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800679a:	4926      	ldr	r1, [pc, #152]	; (8006834 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 800679c:	4618      	mov	r0, r3
 800679e:	f006 fa26 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067a8:	4619      	mov	r1, r3
 80067aa:	4620      	mov	r0, r4
 80067ac:	47a8      	blx	r5
 80067ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067b2:	4618      	mov	r0, r3
 80067b4:	f006 fdd3 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80067b8:	f107 031c 	add.w	r3, r7, #28
 80067bc:	4618      	mov	r0, r3
 80067be:	f006 fdce 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80067c2:	f107 0314 	add.w	r3, r7, #20
 80067c6:	4618      	mov	r0, r3
 80067c8:	f006 fdc9 	bl	800d35e <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80067cc:	491a      	ldr	r1, [pc, #104]	; (8006838 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 80067ce:	481b      	ldr	r0, [pc, #108]	; (800683c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf8>)
 80067d0:	f7fd fa1c 	bl	8003c0c <Connect_TCP_Server>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 80067da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d008      	beq.n	80067f4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
 80067e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d004      	beq.n	80067f4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
 80067ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d000      	beq.n	80067f4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80067f2:	e7eb      	b.n	80067cc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x88>
		{
			break;
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80067f4:	f00d fdde 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80067f8:	4604      	mov	r4, r0
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	3338      	adds	r3, #56	; 0x38
 80067fe:	681d      	ldr	r5, [r3, #0]
 8006800:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8006804:	f00d fde6 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006808:	4603      	mov	r3, r0
 800680a:	9302      	str	r3, [sp, #8]
 800680c:	f44f 730b 	mov.w	r3, #556	; 0x22c
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xfc>)
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x100>)
 8006818:	4632      	mov	r2, r6
 800681a:	2101      	movs	r1, #1
 800681c:	4620      	mov	r0, r4
 800681e:	47a8      	blx	r5

}
 8006820:	bf00      	nop
 8006822:	3734      	adds	r7, #52	; 0x34
 8006824:	46bd      	mov	sp, r7
 8006826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006828:	08023c90 	.word	0x08023c90
 800682c:	080238b4 	.word	0x080238b4
 8006830:	080238b8 	.word	0x080238b8
 8006834:	080238cc 	.word	0x080238cc
 8006838:	08023be8 	.word	0x08023be8
 800683c:	08023bec 	.word	0x08023bec
 8006840:	08023590 	.word	0x08023590
 8006844:	08023988 	.word	0x08023988

08006848 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fc2c 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006858:	4a03      	ldr	r2, [pc, #12]	; (8006868 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	08026e64 	.word	0x08026e64

0800686c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	f44f 720c 	mov.w	r2, #560	; 0x230
 8006878:	4906      	ldr	r1, [pc, #24]	; (8006894 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 800687a:	2004      	movs	r0, #4
 800687c:	f003 fdf4 	bl	800a468 <_ZnwjPKci>
 8006880:	4604      	mov	r4, r0
 8006882:	4620      	mov	r0, r4
 8006884:	f7ff ffe0 	bl	8006848 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 8006888:	4623      	mov	r3, r4
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	bd90      	pop	{r4, r7, pc}
 8006892:	bf00      	nop
 8006894:	08023590 	.word	0x08023590

08006898 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f00c f9ce 	bl	8012c44 <_ZN10UtestShellC1Ev>
 80068a8:	4a03      	ldr	r2, [pc, #12]	; (80068b8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	08026db8 	.word	0x08026db8

080068bc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 80068bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068be:	b0bf      	sub	sp, #252	; 0xfc
 80068c0:	af04      	add	r7, sp, #16
 80068c2:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 80068c4:	4a74      	ldr	r2, [pc, #464]	; (8006a98 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 80068c6:	f107 0318 	add.w	r3, r7, #24
 80068ca:	4611      	mov	r1, r2
 80068cc:	2296      	movs	r2, #150	; 0x96
 80068ce:	4618      	mov	r0, r3
 80068d0:	f019 fe64 	bl	802059c <memcpy>
	{ AT_RESPONSE_OK,
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[3] =
 80068d4:	4a71      	ldr	r2, [pc, #452]	; (8006a9c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 80068d6:	f107 030c 	add.w	r3, r7, #12
 80068da:	ca07      	ldmia	r2, {r0, r1, r2}
 80068dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CIPCLOSE,
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<3;i++)
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	dc46      	bgt.n	800697c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80068ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80068f2:	496b      	ldr	r1, [pc, #428]	; (8006aa0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 80068f4:	4618      	mov	r0, r3
 80068f6:	f006 f97a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80068fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80068fe:	2100      	movs	r1, #0
 8006900:	4618      	mov	r0, r3
 8006902:	f004 fa4d 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006906:	4604      	mov	r4, r0
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	681d      	ldr	r5, [r3, #0]
 800690e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006912:	4964      	ldr	r1, [pc, #400]	; (8006aa4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 8006914:	4618      	mov	r0, r3
 8006916:	f006 f96a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800691a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800691e:	4619      	mov	r1, r3
 8006920:	4620      	mov	r0, r4
 8006922:	47a8      	blx	r5
 8006924:	4604      	mov	r4, r0
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	334c      	adds	r3, #76	; 0x4c
 800692a:	681d      	ldr	r5, [r3, #0]
 800692c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006930:	495d      	ldr	r1, [pc, #372]	; (8006aa8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 8006932:	4618      	mov	r0, r3
 8006934:	f006 f95b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006942:	4413      	add	r3, r2
 8006944:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8006948:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800694c:	4619      	mov	r1, r3
 800694e:	4620      	mov	r0, r4
 8006950:	47a8      	blx	r5
 8006952:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006956:	4618      	mov	r0, r3
 8006958:	f006 fd01 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800695c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006960:	4618      	mov	r0, r3
 8006962:	f006 fcfc 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006966:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800696a:	4618      	mov	r0, r3
 800696c:	f006 fcf7 	bl	800d35e <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006974:	3301      	adds	r3, #1
 8006976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800697a:	e7b4      	b.n	80068e6 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2a>
	}

	Status response;
	int i = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006982:	494a      	ldr	r1, [pc, #296]	; (8006aac <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006984:	484a      	ldr	r0, [pc, #296]	; (8006ab0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 8006986:	f7fd f941 	bl	8003c0c <Connect_TCP_Server>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006990:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006994:	2b03      	cmp	r3, #3
 8006996:	d065      	beq.n	8006a64 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
 8006998:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800699c:	2b02      	cmp	r3, #2
 800699e:	d061      	beq.n	8006a64 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
 80069a0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d05d      	beq.n	8006a64 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
		{
			break;
		}

		if(i<3)
 80069a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	dce8      	bgt.n	8006982 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80069b0:	2300      	movs	r3, #0
 80069b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069b6:	f107 0218 	add.w	r2, r7, #24
 80069ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069be:	2132      	movs	r1, #50	; 0x32
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	4413      	add	r3, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7f9 fc38 	bl	800023c <strlen>
 80069cc:	4603      	mov	r3, r0
 80069ce:	461a      	mov	r2, r3
 80069d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d4:	4293      	cmp	r3, r2
 80069d6:	da3f      	bge.n	8006a58 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19c>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80069d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80069dc:	4930      	ldr	r1, [pc, #192]	; (8006aa0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 80069de:	4618      	mov	r0, r3
 80069e0:	f006 f905 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80069e4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80069e8:	2100      	movs	r1, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	f004 f9d8 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80069f0:	4604      	mov	r4, r0
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	330c      	adds	r3, #12
 80069f6:	681d      	ldr	r5, [r3, #0]
 80069f8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80069fc:	492d      	ldr	r1, [pc, #180]	; (8006ab4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f8>)
 80069fe:	4618      	mov	r0, r3
 8006a00:	f006 f8f5 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006a04:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	47a8      	blx	r5
 8006a0e:	4603      	mov	r3, r0
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	3264      	adds	r2, #100	; 0x64
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006a1a:	2032      	movs	r0, #50	; 0x32
 8006a1c:	fb00 f101 	mul.w	r1, r0, r1
 8006a20:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8006a24:	4408      	add	r0, r1
 8006a26:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006a2a:	4401      	add	r1, r0
 8006a2c:	39d0      	subs	r1, #208	; 0xd0
 8006a2e:	7809      	ldrb	r1, [r1, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	4790      	blx	r2
 8006a34:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f006 fc90 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006a3e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006a42:	4618      	mov	r0, r3
 8006a44:	f006 fc8b 	bl	800d35e <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006a48:	f7fc ff9e 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a50:	3301      	adds	r3, #1
 8006a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a56:	e7ae      	b.n	80069b6 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xfa>
			}
			i++;
 8006a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 8006a62:	e78e      	b.n	8006982 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(STATUS_ERROR,response);
 8006a64:	f00d fca6 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8006a68:	4604      	mov	r4, r0
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	3338      	adds	r3, #56	; 0x38
 8006a6e:	681d      	ldr	r5, [r3, #0]
 8006a70:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 8006a74:	f00d fcae 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	9302      	str	r3, [sp, #8]
 8006a7c:	f240 2359 	movw	r3, #601	; 0x259
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1fc>)
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x200>)
 8006a88:	4632      	mov	r2, r6
 8006a8a:	2103      	movs	r1, #3
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	47a8      	blx	r5

}
 8006a90:	bf00      	nop
 8006a92:	37ec      	adds	r7, #236	; 0xec
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a98:	08023c9c 	.word	0x08023c9c
 8006a9c:	08023c90 	.word	0x08023c90
 8006aa0:	080238b4 	.word	0x080238b4
 8006aa4:	080238b8 	.word	0x080238b8
 8006aa8:	080238cc 	.word	0x080238cc
 8006aac:	08023be8 	.word	0x08023be8
 8006ab0:	08023bec 	.word	0x08023bec
 8006ab4:	080238d4 	.word	0x080238d4
 8006ab8:	08023590 	.word	0x08023590
 8006abc:	080239b4 	.word	0x080239b4

08006ac0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe faf0 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006ad0:	4a03      	ldr	r2, [pc, #12]	; (8006ae0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	08026d98 	.word	0x08026d98

08006ae4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	f240 225d 	movw	r2, #605	; 0x25d
 8006af0:	4906      	ldr	r1, [pc, #24]	; (8006b0c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006af2:	2004      	movs	r0, #4
 8006af4:	f003 fcb8 	bl	800a468 <_ZnwjPKci>
 8006af8:	4604      	mov	r4, r0
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7ff ffe0 	bl	8006ac0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006b00:	4623      	mov	r3, r4
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd90      	pop	{r4, r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	08023590 	.word	0x08023590

08006b10 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f00c f892 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8006b20:	4a03      	ldr	r2, [pc, #12]	; (8006b30 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	08026cec 	.word	0x08026cec

08006b34 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8006b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b36:	b093      	sub	sp, #76	; 0x4c
 8006b38:	af04      	add	r7, sp, #16
 8006b3a:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 8006b3c:	f107 0308 	add.w	r3, r7, #8
 8006b40:	494a      	ldr	r1, [pc, #296]	; (8006c6c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006b42:	4618      	mov	r0, r3
 8006b44:	f006 f853 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006b48:	f107 0308 	add.w	r3, r7, #8
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f004 f926 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006b54:	4604      	mov	r4, r0
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	681d      	ldr	r5, [r3, #0]
 8006b5c:	f107 0310 	add.w	r3, r7, #16
 8006b60:	4943      	ldr	r1, [pc, #268]	; (8006c70 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 8006b62:	4618      	mov	r0, r3
 8006b64:	f006 f843 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006b68:	f107 0310 	add.w	r3, r7, #16
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4620      	mov	r0, r4
 8006b70:	47a8      	blx	r5
 8006b72:	4604      	mov	r4, r0
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	334c      	adds	r3, #76	; 0x4c
 8006b78:	681d      	ldr	r5, [r3, #0]
 8006b7a:	f107 0318 	add.w	r3, r7, #24
 8006b7e:	493d      	ldr	r1, [pc, #244]	; (8006c74 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006b80:	4618      	mov	r0, r3
 8006b82:	f006 f834 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006b86:	f107 0318 	add.w	r3, r7, #24
 8006b8a:	4a3b      	ldr	r2, [pc, #236]	; (8006c78 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4620      	mov	r0, r4
 8006b90:	47a8      	blx	r5
 8006b92:	f107 0318 	add.w	r3, r7, #24
 8006b96:	4618      	mov	r0, r3
 8006b98:	f006 fbe1 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006b9c:	f107 0310 	add.w	r3, r7, #16
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f006 fbdc 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006ba6:	f107 0308 	add.w	r3, r7, #8
 8006baa:	4618      	mov	r0, r3
 8006bac:	f006 fbd7 	bl	800d35e <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006bb0:	f7fd f866 	bl	8003c80 <Disconnect_TCP_Server>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006bba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d139      	bne.n	8006c36 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	dcf1      	bgt.n	8006bb0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006bcc:	f107 0320 	add.w	r3, r7, #32
 8006bd0:	4926      	ldr	r1, [pc, #152]	; (8006c6c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f006 f80b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006bd8:	f107 0320 	add.w	r3, r7, #32
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4618      	mov	r0, r3
 8006be0:	f004 f8de 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006be4:	4604      	mov	r4, r0
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	330c      	adds	r3, #12
 8006bea:	681d      	ldr	r5, [r3, #0]
 8006bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bf0:	4922      	ldr	r1, [pc, #136]	; (8006c7c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f005 fffb 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4620      	mov	r0, r4
 8006c00:	47a8      	blx	r5
 8006c02:	4603      	mov	r3, r0
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	3264      	adds	r2, #100	; 0x64
 8006c08:	6812      	ldr	r2, [r2, #0]
 8006c0a:	481d      	ldr	r0, [pc, #116]	; (8006c80 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006c0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c0e:	4401      	add	r1, r0
 8006c10:	7809      	ldrb	r1, [r1, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	4790      	blx	r2
 8006c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f006 fb9f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006c20:	f107 0320 	add.w	r3, r7, #32
 8006c24:	4618      	mov	r0, r3
 8006c26:	f006 fb9a 	bl	800d35e <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006c2a:	f7fc fead 	bl	8003988 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c30:	3301      	adds	r3, #1
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
 8006c34:	e7c7      	b.n	8006bc6 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 8006c36:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006c38:	f00d fbbc 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	3338      	adds	r3, #56	; 0x38
 8006c42:	681d      	ldr	r5, [r3, #0]
 8006c44:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006c48:	f00d fbc4 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	9302      	str	r3, [sp, #8]
 8006c50:	f240 2372 	movw	r3, #626	; 0x272
 8006c54:	9301      	str	r3, [sp, #4]
 8006c56:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	2102      	movs	r1, #2
 8006c60:	4620      	mov	r0, r4
 8006c62:	47a8      	blx	r5

}
 8006c64:	bf00      	nop
 8006c66:	373c      	adds	r7, #60	; 0x3c
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c6c:	080238b4 	.word	0x080238b4
 8006c70:	080238b8 	.word	0x080238b8
 8006c74:	080238cc 	.word	0x080238cc
 8006c78:	08023548 	.word	0x08023548
 8006c7c:	080238d4 	.word	0x080238d4
 8006c80:	0802350c 	.word	0x0802350c
 8006c84:	08023590 	.word	0x08023590
 8006c88:	08023b10 	.word	0x08023b10

08006c8c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe fa0a 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006c9c:	4a03      	ldr	r2, [pc, #12]	; (8006cac <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	08026ccc 	.word	0x08026ccc

08006cb0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006cb0:	b590      	push	{r4, r7, lr}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	f240 2276 	movw	r2, #630	; 0x276
 8006cbc:	4906      	ldr	r1, [pc, #24]	; (8006cd8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006cbe:	2004      	movs	r0, #4
 8006cc0:	f003 fbd2 	bl	800a468 <_ZnwjPKci>
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7ff ffe0 	bl	8006c8c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006ccc:	4623      	mov	r3, r4
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd90      	pop	{r4, r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	08023590 	.word	0x08023590

08006cdc <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f00b ffac 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8006cec:	4a03      	ldr	r2, [pc, #12]	; (8006cfc <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	08026c20 	.word	0x08026c20

08006d00 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d02:	b0b3      	sub	sp, #204	; 0xcc
 8006d04:	af04      	add	r7, sp, #16
 8006d06:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006d0e:	4a83      	ldr	r2, [pc, #524]	; (8006f1c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 8006d10:	f107 0308 	add.w	r3, r7, #8
 8006d14:	4611      	mov	r1, r2
 8006d16:	2264      	movs	r2, #100	; 0x64
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f019 fc3f 	bl	802059c <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n");
 8006d1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d22:	497f      	ldr	r1, [pc, #508]	; (8006f20 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006d24:	4618      	mov	r0, r3
 8006d26:	f005 ff62 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006d2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d2e:	2100      	movs	r1, #0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f004 f835 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006d36:	4604      	mov	r4, r0
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	330c      	adds	r3, #12
 8006d3c:	681d      	ldr	r5, [r3, #0]
 8006d3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d42:	4978      	ldr	r1, [pc, #480]	; (8006f24 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006d44:	4618      	mov	r0, r3
 8006d46:	f005 ff52 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006d4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4620      	mov	r0, r4
 8006d52:	47a8      	blx	r5
 8006d54:	4604      	mov	r4, r0
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	334c      	adds	r3, #76	; 0x4c
 8006d5a:	681d      	ldr	r5, [r3, #0]
 8006d5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d60:	4971      	ldr	r1, [pc, #452]	; (8006f28 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006d62:	4618      	mov	r0, r3
 8006d64:	f005 ff43 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006d68:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d6c:	4a6f      	ldr	r2, [pc, #444]	; (8006f2c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4620      	mov	r0, r4
 8006d72:	47a8      	blx	r5
 8006d74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f006 faf0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006d7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d82:	4618      	mov	r0, r3
 8006d84:	f006 faeb 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006d88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f006 fae6 	bl	800d35e <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006d92:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006d96:	4962      	ldr	r1, [pc, #392]	; (8006f20 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f005 ff28 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006d9e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006da2:	2100      	movs	r1, #0
 8006da4:	4618      	mov	r0, r3
 8006da6:	f003 fffb 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006daa:	4604      	mov	r4, r0
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	330c      	adds	r3, #12
 8006db0:	681d      	ldr	r5, [r3, #0]
 8006db2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006db6:	495b      	ldr	r1, [pc, #364]	; (8006f24 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006db8:	4618      	mov	r0, r3
 8006dba:	f005 ff18 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006dbe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	47a8      	blx	r5
 8006dc8:	4604      	mov	r4, r0
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	334c      	adds	r3, #76	; 0x4c
 8006dce:	681d      	ldr	r5, [r3, #0]
 8006dd0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006dd4:	4954      	ldr	r1, [pc, #336]	; (8006f28 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f005 ff09 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006ddc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006de0:	4a53      	ldr	r2, [pc, #332]	; (8006f30 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x230>)
 8006de2:	4619      	mov	r1, r3
 8006de4:	4620      	mov	r0, r4
 8006de6:	47a8      	blx	r5
 8006de8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006dec:	4618      	mov	r0, r3
 8006dee:	f006 fab6 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006df2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006df6:	4618      	mov	r0, r3
 8006df8:	f006 fab1 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006dfc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006e00:	4618      	mov	r0, r3
 8006e02:	f006 faac 	bl	800d35e <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8006e06:	484a      	ldr	r0, [pc, #296]	; (8006f30 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x230>)
 8006e08:	f7fc ff56 	bl	8003cb8 <Send_TCP_Message>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006e12:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d065      	beq.n	8006ee6 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
 8006e1a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d061      	beq.n	8006ee6 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
 8006e22:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d05d      	beq.n	8006ee6 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
		{
			break;
		}

		if(i<2)
 8006e2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	dce9      	bgt.n	8006e06 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006e32:	2300      	movs	r3, #0
 8006e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e38:	f107 0208 	add.w	r2, r7, #8
 8006e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e40:	2132      	movs	r1, #50	; 0x32
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	4413      	add	r3, r2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7f9 f9f7 	bl	800023c <strlen>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	461a      	mov	r2, r3
 8006e52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e56:	4293      	cmp	r3, r2
 8006e58:	da3f      	bge.n	8006eda <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1da>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006e5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e5e:	4930      	ldr	r1, [pc, #192]	; (8006f20 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006e60:	4618      	mov	r0, r3
 8006e62:	f005 fec4 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006e66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f003 ff97 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006e72:	4604      	mov	r4, r0
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	681d      	ldr	r5, [r3, #0]
 8006e7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e7e:	492d      	ldr	r1, [pc, #180]	; (8006f34 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x234>)
 8006e80:	4618      	mov	r0, r3
 8006e82:	f005 feb4 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8006e86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	47a8      	blx	r5
 8006e90:	4603      	mov	r3, r0
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	3264      	adds	r2, #100	; 0x64
 8006e96:	6812      	ldr	r2, [r2, #0]
 8006e98:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006e9c:	2032      	movs	r0, #50	; 0x32
 8006e9e:	fb00 f101 	mul.w	r1, r0, r1
 8006ea2:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006ea6:	4408      	add	r0, r1
 8006ea8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006eac:	4401      	add	r1, r0
 8006eae:	39b0      	subs	r1, #176	; 0xb0
 8006eb0:	7809      	ldrb	r1, [r1, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	4790      	blx	r2
 8006eb6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f006 fa4f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8006ec0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f006 fa4a 	bl	800d35e <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006eca:	f7fc fd5d 	bl	8003988 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006ece:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ed8:	e7ae      	b.n	8006e38 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x138>
			}
			i++;
 8006eda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ede:	3301      	adds	r3, #1
 8006ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 8006ee4:	e78f      	b.n	8006e06 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>

	LONGS_EQUAL(STATUS_OK,response);
 8006ee6:	f00d fa65 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8006eea:	4604      	mov	r4, r0
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	3338      	adds	r3, #56	; 0x38
 8006ef0:	681d      	ldr	r5, [r3, #0]
 8006ef2:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 8006ef6:	f00d fa6d 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006efa:	4603      	mov	r3, r0
 8006efc:	9302      	str	r3, [sp, #8]
 8006efe:	f240 2397 	movw	r3, #663	; 0x297
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x238>)
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x23c>)
 8006f0a:	4632      	mov	r2, r6
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	4620      	mov	r0, r4
 8006f10:	47a8      	blx	r5

}
 8006f12:	bf00      	nop
 8006f14:	37bc      	adds	r7, #188	; 0xbc
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	08023d44 	.word	0x08023d44
 8006f20:	080238b4 	.word	0x080238b4
 8006f24:	080238b8 	.word	0x080238b8
 8006f28:	080238cc 	.word	0x080238cc
 8006f2c:	08023d34 	.word	0x08023d34
 8006f30:	080237c4 	.word	0x080237c4
 8006f34:	080238d4 	.word	0x080238d4
 8006f38:	08023590 	.word	0x08023590
 8006f3c:	08023b10 	.word	0x08023b10

08006f40 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe f8b0 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006f50:	4a03      	ldr	r2, [pc, #12]	; (8006f60 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	08026c00 	.word	0x08026c00

08006f64 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	f240 229b 	movw	r2, #667	; 0x29b
 8006f70:	4906      	ldr	r1, [pc, #24]	; (8006f8c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006f72:	2004      	movs	r0, #4
 8006f74:	f003 fa78 	bl	800a468 <_ZnwjPKci>
 8006f78:	4604      	mov	r4, r0
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f7ff ffe0 	bl	8006f40 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8006f80:	4623      	mov	r3, r4
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd90      	pop	{r4, r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	08023590 	.word	0x08023590

08006f90 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f00b fe52 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8006fa0:	4a03      	ldr	r2, [pc, #12]	; (8006fb0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	08026b54 	.word	0x08026b54

08006fb4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 8006fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb6:	b0a3      	sub	sp, #140	; 0x8c
 8006fb8:	af04      	add	r7, sp, #16
 8006fba:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 8006fbc:	4b44      	ldr	r3, [pc, #272]	; (80070d0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x11c>)
 8006fbe:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006fc2:	461d      	mov	r5, r3
 8006fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	605a      	str	r2, [r3, #4]
 8006fd6:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 8006fd8:	2304      	movs	r3, #4
 8006fda:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50];

	for(int i=0;i<(int)strlen(response);i++)
 8006fde:	2300      	movs	r3, #0
 8006fe0:	677b      	str	r3, [r7, #116]	; 0x74
 8006fe2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7f9 f928 	bl	800023c <strlen>
 8006fec:	4603      	mov	r3, r0
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	da35      	bge.n	8007062 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xae>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8006ff6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006ffa:	4936      	ldr	r1, [pc, #216]	; (80070d4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x120>)
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f005 fdf6 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8007002:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007006:	2100      	movs	r1, #0
 8007008:	4618      	mov	r0, r3
 800700a:	f003 fec9 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800700e:	4604      	mov	r4, r0
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	330c      	adds	r3, #12
 8007014:	681d      	ldr	r5, [r3, #0]
 8007016:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800701a:	492f      	ldr	r1, [pc, #188]	; (80070d8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x124>)
 800701c:	4618      	mov	r0, r3
 800701e:	f005 fde6 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8007022:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007026:	4619      	mov	r1, r3
 8007028:	4620      	mov	r0, r4
 800702a:	47a8      	blx	r5
 800702c:	4603      	mov	r3, r0
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	3264      	adds	r2, #100	; 0x64
 8007032:	6812      	ldr	r2, [r2, #0]
 8007034:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007038:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800703a:	4401      	add	r1, r0
 800703c:	7809      	ldrb	r1, [r1, #0]
 800703e:	4618      	mov	r0, r3
 8007040:	4790      	blx	r2
 8007042:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007046:	4618      	mov	r0, r3
 8007048:	f006 f989 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800704c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007050:	4618      	mov	r0, r3
 8007052:	f006 f984 	bl	800d35e <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8007056:	f7fc fc97 	bl	8003988 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 800705a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800705c:	3301      	adds	r3, #1
 800705e:	677b      	str	r3, [r7, #116]	; 0x74
 8007060:	e7bf      	b.n	8006fe2 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x2e>
	}

	response_state = Read_TCP_Message(received_message);
 8007062:	f107 030c 	add.w	r3, r7, #12
 8007066:	4618      	mov	r0, r3
 8007068:	f7fc fe5e 	bl	8003d28 <Read_TCP_Message>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 8007072:	f00d f99f 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8007076:	4604      	mov	r4, r0
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	3338      	adds	r3, #56	; 0x38
 800707c:	681d      	ldr	r5, [r3, #0]
 800707e:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8007082:	f00d f9a7 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007086:	4603      	mov	r3, r0
 8007088:	9302      	str	r3, [sp, #8]
 800708a:	f240 23ab 	movw	r3, #683	; 0x2ab
 800708e:	9301      	str	r3, [sp, #4]
 8007090:	4b12      	ldr	r3, [pc, #72]	; (80070dc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x128>)
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x12c>)
 8007096:	4632      	mov	r2, r6
 8007098:	2102      	movs	r1, #2
 800709a:	4620      	mov	r0, r4
 800709c:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 800709e:	f00d f989 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80070a2:	4604      	mov	r4, r0
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	3324      	adds	r3, #36	; 0x24
 80070a8:	681d      	ldr	r5, [r3, #0]
 80070aa:	f00d f993 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f107 020c 	add.w	r2, r7, #12
 80070b4:	9302      	str	r3, [sp, #8]
 80070b6:	f240 23ad 	movw	r3, #685	; 0x2ad
 80070ba:	9301      	str	r3, [sp, #4]
 80070bc:	4b07      	ldr	r3, [pc, #28]	; (80070dc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x128>)
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2300      	movs	r3, #0
 80070c2:	4908      	ldr	r1, [pc, #32]	; (80070e4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 80070c4:	4620      	mov	r0, r4
 80070c6:	47a8      	blx	r5

}
 80070c8:	bf00      	nop
 80070ca:	377c      	adds	r7, #124	; 0x7c
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d0:	08023dd8 	.word	0x08023dd8
 80070d4:	080238b4 	.word	0x080238b4
 80070d8:	080238d4 	.word	0x080238d4
 80070dc:	08023590 	.word	0x08023590
 80070e0:	08023da8 	.word	0x08023da8
 80070e4:	080237c4 	.word	0x080237c4

080070e8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fd ffdc 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80070f8:	4a03      	ldr	r2, [pc, #12]	; (8007108 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	08026b34 	.word	0x08026b34

0800710c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	f240 22b1 	movw	r2, #689	; 0x2b1
 8007118:	4906      	ldr	r1, [pc, #24]	; (8007134 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 800711a:	2004      	movs	r0, #4
 800711c:	f003 f9a4 	bl	800a468 <_ZnwjPKci>
 8007120:	4604      	mov	r4, r0
 8007122:	4620      	mov	r0, r4
 8007124:	f7ff ffe0 	bl	80070e8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 8007128:	4623      	mov	r3, r4
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	bd90      	pop	{r4, r7, pc}
 8007132:	bf00      	nop
 8007134:	08023590 	.word	0x08023590

08007138 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4618      	mov	r0, r3
 8007144:	f00b fd7e 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8007148:	4a03      	ldr	r2, [pc, #12]	; (8007158 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	08026a88 	.word	0x08026a88

0800715c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 800715c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800715e:	b095      	sub	sp, #84	; 0x54
 8007160:	af04      	add	r7, sp, #16
 8007162:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8007164:	2304      	movs	r3, #4
 8007166:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50];
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 800716a:	f107 030c 	add.w	r3, r7, #12
 800716e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007172:	4618      	mov	r0, r3
 8007174:	f7fc fe3e 	bl	8003df4 <Wait_TCP_Message>
 8007178:	4603      	mov	r3, r0
 800717a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 800717e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007182:	2b04      	cmp	r3, #4
 8007184:	d100      	bne.n	8007188 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x2c>
		response_state = Wait_TCP_Message(received_message, 1000);
 8007186:	e7f0      	b.n	800716a <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0xe>
			break;
 8007188:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 800718a:	f00d f913 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800718e:	4604      	mov	r4, r0
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	3338      	adds	r3, #56	; 0x38
 8007194:	681d      	ldr	r5, [r3, #0]
 8007196:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 800719a:	f00d f91b 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800719e:	4603      	mov	r3, r0
 80071a0:	9302      	str	r3, [sp, #8]
 80071a2:	f240 23be 	movw	r3, #702	; 0x2be
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x64>)
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x68>)
 80071ae:	4632      	mov	r2, r6
 80071b0:	2101      	movs	r1, #1
 80071b2:	4620      	mov	r0, r4
 80071b4:	47a8      	blx	r5

}
 80071b6:	bf00      	nop
 80071b8:	3744      	adds	r7, #68	; 0x44
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071be:	bf00      	nop
 80071c0:	08023590 	.word	0x08023590
 80071c4:	08023918 	.word	0x08023918

080071c8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fd ff6c 	bl	80050b0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80071d8:	4a03      	ldr	r2, [pc, #12]	; (80071e8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	08026a68 	.word	0x08026a68

080071ec <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	f240 22c2 	movw	r2, #706	; 0x2c2
 80071f8:	4906      	ldr	r1, [pc, #24]	; (8007214 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 80071fa:	2004      	movs	r0, #4
 80071fc:	f003 f934 	bl	800a468 <_ZnwjPKci>
 8007200:	4604      	mov	r4, r0
 8007202:	4620      	mov	r0, r4
 8007204:	f7ff ffe0 	bl	80071c8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 8007208:	4623      	mov	r3, r4
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	bd90      	pop	{r4, r7, pc}
 8007212:	bf00      	nop
 8007214:	08023590 	.word	0x08023590

08007218 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4618      	mov	r0, r3
 8007224:	f00b fd0e 	bl	8012c44 <_ZN10UtestShellC1Ev>
 8007228:	4a03      	ldr	r2, [pc, #12]	; (8007238 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	080269bc 	.word	0x080269bc

0800723c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 800723c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723e:	b0a3      	sub	sp, #140	; 0x8c
 8007240:	af04      	add	r7, sp, #16
 8007242:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8007244:	4b49      	ldr	r3, [pc, #292]	; (800736c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x130>)
 8007246:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800724a:	461d      	mov	r5, r3
 800724c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800724e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007250:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007254:	6020      	str	r0, [r4, #0]
 8007256:	3404      	adds	r4, #4
 8007258:	8021      	strh	r1, [r4, #0]
 800725a:	f107 0356 	add.w	r3, r7, #86	; 0x56
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8007264:	2304      	movs	r3, #4
 8007266:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50];

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 800726a:	f107 030c 	add.w	r3, r7, #12
 800726e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007272:	4618      	mov	r0, r3
 8007274:	f7fc fdbe 	bl	8003df4 <Wait_TCP_Message>
 8007278:	4603      	mov	r3, r0
 800727a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 800727e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007282:	2b04      	cmp	r3, #4
 8007284:	d141      	bne.n	800730a <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xce>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 8007286:	2300      	movs	r3, #0
 8007288:	677b      	str	r3, [r7, #116]	; 0x74
 800728a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800728e:	4618      	mov	r0, r3
 8007290:	f7f8 ffd4 	bl	800023c <strlen>
 8007294:	4603      	mov	r3, r0
 8007296:	461a      	mov	r2, r3
 8007298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800729a:	4293      	cmp	r3, r2
 800729c:	dae5      	bge.n	800726a <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x2e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800729e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072a2:	4933      	ldr	r1, [pc, #204]	; (8007370 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x134>)
 80072a4:	4618      	mov	r0, r3
 80072a6:	f005 fca2 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80072aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f003 fd75 	bl	800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80072b6:	4604      	mov	r4, r0
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	681d      	ldr	r5, [r3, #0]
 80072be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80072c2:	492c      	ldr	r1, [pc, #176]	; (8007374 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x138>)
 80072c4:	4618      	mov	r0, r3
 80072c6:	f005 fc92 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80072ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80072ce:	4619      	mov	r1, r3
 80072d0:	4620      	mov	r0, r4
 80072d2:	47a8      	blx	r5
 80072d4:	4603      	mov	r3, r0
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	3264      	adds	r2, #100	; 0x64
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80072e0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80072e2:	4401      	add	r1, r0
 80072e4:	7809      	ldrb	r1, [r1, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	4790      	blx	r2
 80072ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80072ee:	4618      	mov	r0, r3
 80072f0:	f006 f835 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80072f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072f8:	4618      	mov	r0, r3
 80072fa:	f006 f830 	bl	800d35e <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80072fe:	f7fc fb43 	bl	8003988 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8007302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007304:	3301      	adds	r3, #1
 8007306:	677b      	str	r3, [r7, #116]	; 0x74
 8007308:	e7bf      	b.n	800728a <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x4e>
			break;
 800730a:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 800730c:	f00d f852 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8007310:	4604      	mov	r4, r0
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	3338      	adds	r3, #56	; 0x38
 8007316:	681d      	ldr	r5, [r3, #0]
 8007318:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 800731c:	f00d f85a 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007320:	4603      	mov	r3, r0
 8007322:	9302      	str	r3, [sp, #8]
 8007324:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 8007328:	9301      	str	r3, [sp, #4]
 800732a:	4b13      	ldr	r3, [pc, #76]	; (8007378 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x13c>)
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	4b13      	ldr	r3, [pc, #76]	; (800737c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007330:	4632      	mov	r2, r6
 8007332:	2102      	movs	r1, #2
 8007334:	4620      	mov	r0, r4
 8007336:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 8007338:	f00d f83c 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800733c:	4604      	mov	r4, r0
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	3324      	adds	r3, #36	; 0x24
 8007342:	681d      	ldr	r5, [r3, #0]
 8007344:	f00d f846 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007348:	4603      	mov	r3, r0
 800734a:	f107 020c 	add.w	r2, r7, #12
 800734e:	9302      	str	r3, [sp, #8]
 8007350:	f240 23d9 	movw	r3, #729	; 0x2d9
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	4b08      	ldr	r3, [pc, #32]	; (8007378 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	2300      	movs	r3, #0
 800735c:	4908      	ldr	r1, [pc, #32]	; (8007380 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 800735e:	4620      	mov	r0, r4
 8007360:	47a8      	blx	r5

}
 8007362:	bf00      	nop
 8007364:	377c      	adds	r7, #124	; 0x7c
 8007366:	46bd      	mov	sp, r7
 8007368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800736a:	bf00      	nop
 800736c:	08023e08 	.word	0x08023e08
 8007370:	080238b4 	.word	0x080238b4
 8007374:	080238d4 	.word	0x080238d4
 8007378:	08023590 	.word	0x08023590
 800737c:	08023da8 	.word	0x08023da8
 8007380:	08023df8 	.word	0x08023df8

08007384 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	4a05      	ldr	r2, [pc, #20]	; (80073a4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4618      	mov	r0, r3
 8007396:	f00b fca9 	bl	8012cec <_ZN10UtestShellD1Ev>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	080269bc 	.word	0x080269bc

080073a8 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ffe7 	bl	8007384 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 80073b6:	211c      	movs	r1, #28
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f003 f869 	bl	800a490 <_ZdlPvj>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	4a05      	ldr	r2, [pc, #20]	; (80073e8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fd fe7b 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	08026a68 	.word	0x08026a68

080073ec <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff ffe7 	bl	80073c8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 80073fa:	2104      	movs	r1, #4
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f003 f847 	bl	800a490 <_ZdlPvj>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	4a05      	ldr	r2, [pc, #20]	; (800742c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4618      	mov	r0, r3
 800741e:	f00b fc65 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	08026a88 	.word	0x08026a88

08007430 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff ffe7 	bl	800740c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 800743e:	211c      	movs	r1, #28
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f003 f825 	bl	800a490 <_ZdlPvj>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	4a05      	ldr	r2, [pc, #20]	; (8007470 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4618      	mov	r0, r3
 8007462:	f7fd fe37 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	08026b34 	.word	0x08026b34

08007474 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff ffe7 	bl	8007450 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 8007482:	2104      	movs	r1, #4
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f003 f803 	bl	800a490 <_ZdlPvj>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	4a05      	ldr	r2, [pc, #20]	; (80074b4 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f00b fc21 	bl	8012cec <_ZN10UtestShellD1Ev>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	08026b54 	.word	0x08026b54

080074b8 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff ffe7 	bl	8007494 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 80074c6:	211c      	movs	r1, #28
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f002 ffe1 	bl	800a490 <_ZdlPvj>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	4a05      	ldr	r2, [pc, #20]	; (80074f8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fd fdf3 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	08026c00 	.word	0x08026c00

080074fc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff ffe7 	bl	80074d8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 800750a:	2104      	movs	r1, #4
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f002 ffbf 	bl	800a490 <_ZdlPvj>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	4a05      	ldr	r2, [pc, #20]	; (800753c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4618      	mov	r0, r3
 800752e:	f00b fbdd 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	08026c20 	.word	0x08026c20

08007540 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff ffe7 	bl	800751c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 800754e:	211c      	movs	r1, #28
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f002 ff9d 	bl	800a490 <_ZdlPvj>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	4a05      	ldr	r2, [pc, #20]	; (8007580 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4618      	mov	r0, r3
 8007572:	f7fd fdaf 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	08026ccc 	.word	0x08026ccc

08007584 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff ffe7 	bl	8007560 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 8007592:	2104      	movs	r1, #4
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f002 ff7b 	bl	800a490 <_ZdlPvj>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	4a05      	ldr	r2, [pc, #20]	; (80075c4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f00b fb99 	bl	8012cec <_ZN10UtestShellD1Ev>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	08026cec 	.word	0x08026cec

080075c8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff ffe7 	bl	80075a4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 80075d6:	211c      	movs	r1, #28
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f002 ff59 	bl	800a490 <_ZdlPvj>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	4a05      	ldr	r2, [pc, #20]	; (8007608 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fd fd6b 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	08026d98 	.word	0x08026d98

0800760c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff ffe7 	bl	80075e8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 800761a:	2104      	movs	r1, #4
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f002 ff37 	bl	800a490 <_ZdlPvj>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	4a05      	ldr	r2, [pc, #20]	; (800764c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4618      	mov	r0, r3
 800763e:	f00b fb55 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	08026db8 	.word	0x08026db8

08007650 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ffe7 	bl	800762c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 800765e:	211c      	movs	r1, #28
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f002 ff15 	bl	800a490 <_ZdlPvj>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	4a05      	ldr	r2, [pc, #20]	; (8007690 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4618      	mov	r0, r3
 8007682:	f7fd fd27 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4618      	mov	r0, r3
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	08026e64 	.word	0x08026e64

08007694 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff ffe7 	bl	8007670 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 80076a2:	2104      	movs	r1, #4
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f002 fef3 	bl	800a490 <_ZdlPvj>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	4a05      	ldr	r2, [pc, #20]	; (80076d4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f00b fb11 	bl	8012cec <_ZN10UtestShellD1Ev>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	08026e84 	.word	0x08026e84

080076d8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff ffe7 	bl	80076b4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 80076e6:	211c      	movs	r1, #28
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f002 fed1 	bl	800a490 <_ZdlPvj>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	4a05      	ldr	r2, [pc, #20]	; (8007718 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd fce3 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	08026f30 	.word	0x08026f30

0800771c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff ffe7 	bl	80076f8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 800772a:	2104      	movs	r1, #4
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f002 feaf 	bl	800a490 <_ZdlPvj>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	4a05      	ldr	r2, [pc, #20]	; (800775c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4618      	mov	r0, r3
 800774e:	f00b facd 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	08026f50 	.word	0x08026f50

08007760 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff ffe7 	bl	800773c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 800776e:	211c      	movs	r1, #28
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f002 fe8d 	bl	800a490 <_ZdlPvj>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	4a05      	ldr	r2, [pc, #20]	; (80077a0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4618      	mov	r0, r3
 8007792:	f7fd fc9f 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	08026ffc 	.word	0x08026ffc

080077a4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff ffe7 	bl	8007780 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 80077b2:	2104      	movs	r1, #4
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f002 fe6b 	bl	800a490 <_ZdlPvj>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	4a05      	ldr	r2, [pc, #20]	; (80077e4 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f00b fa89 	bl	8012cec <_ZN10UtestShellD1Ev>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	0802701c 	.word	0x0802701c

080077e8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff ffe7 	bl	80077c4 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 80077f6:	211c      	movs	r1, #28
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f002 fe49 	bl	800a490 <_ZdlPvj>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	4a05      	ldr	r2, [pc, #20]	; (8007828 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4618      	mov	r0, r3
 800781a:	f7fd fc5b 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	080270c8 	.word	0x080270c8

0800782c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff ffe7 	bl	8007808 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 800783a:	2104      	movs	r1, #4
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f002 fe27 	bl	800a490 <_ZdlPvj>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	4a05      	ldr	r2, [pc, #20]	; (800786c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4618      	mov	r0, r3
 800785e:	f00b fa45 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	080270e8 	.word	0x080270e8

08007870 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff ffe7 	bl	800784c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 800787e:	211c      	movs	r1, #28
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f002 fe05 	bl	800a490 <_ZdlPvj>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	4a05      	ldr	r2, [pc, #20]	; (80078b0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fd fc17 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	08027194 	.word	0x08027194

080078b4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff ffe7 	bl	8007890 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 80078c2:	2104      	movs	r1, #4
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f002 fde3 	bl	800a490 <_ZdlPvj>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	4a05      	ldr	r2, [pc, #20]	; (80078f4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f00b fa01 	bl	8012cec <_ZN10UtestShellD1Ev>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	080271b4 	.word	0x080271b4

080078f8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff ffe7 	bl	80078d4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 8007906:	211c      	movs	r1, #28
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f002 fdc1 	bl	800a490 <_ZdlPvj>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	4a05      	ldr	r2, [pc, #20]	; (8007938 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4618      	mov	r0, r3
 800792a:	f7fd fbd3 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	08027260 	.word	0x08027260

0800793c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff ffe7 	bl	8007918 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 800794a:	2104      	movs	r1, #4
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f002 fd9f 	bl	800a490 <_ZdlPvj>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	4a05      	ldr	r2, [pc, #20]	; (800797c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4618      	mov	r0, r3
 800796e:	f00b f9bd 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	08027280 	.word	0x08027280

08007980 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff ffe7 	bl	800795c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 800798e:	211c      	movs	r1, #28
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f002 fd7d 	bl	800a490 <_ZdlPvj>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	4a05      	ldr	r2, [pc, #20]	; (80079c0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fd fb8f 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	0802732c 	.word	0x0802732c

080079c4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ffe7 	bl	80079a0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 80079d2:	2104      	movs	r1, #4
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f002 fd5b 	bl	800a490 <_ZdlPvj>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	4a05      	ldr	r2, [pc, #20]	; (8007a04 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f00b f979 	bl	8012cec <_ZN10UtestShellD1Ev>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	0802734c 	.word	0x0802734c

08007a08 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff ffe7 	bl	80079e4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8007a16:	211c      	movs	r1, #28
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f002 fd39 	bl	800a490 <_ZdlPvj>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	4a05      	ldr	r2, [pc, #20]	; (8007a48 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fd fb4b 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	080273f8 	.word	0x080273f8

08007a4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff ffe7 	bl	8007a28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8007a5a:	2104      	movs	r1, #4
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f002 fd17 	bl	800a490 <_ZdlPvj>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	4a05      	ldr	r2, [pc, #20]	; (8007a8c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f00b f935 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	08027418 	.word	0x08027418

08007a90 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff ffe7 	bl	8007a6c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007a9e:	211c      	movs	r1, #28
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f002 fcf5 	bl	800a490 <_ZdlPvj>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	4a05      	ldr	r2, [pc, #20]	; (8007ad0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fd fb07 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	080274c4 	.word	0x080274c4

08007ad4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff ffe7 	bl	8007ab0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8007ae2:	2104      	movs	r1, #4
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f002 fcd3 	bl	800a490 <_ZdlPvj>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	4a05      	ldr	r2, [pc, #20]	; (8007b14 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f00b f8f1 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	080274e4 	.word	0x080274e4

08007b18 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff ffe7 	bl	8007af4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8007b26:	211c      	movs	r1, #28
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f002 fcb1 	bl	800a490 <_ZdlPvj>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	4a05      	ldr	r2, [pc, #20]	; (8007b58 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd fac3 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4618      	mov	r0, r3
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	08027590 	.word	0x08027590

08007b5c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff ffe7 	bl	8007b38 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8007b6a:	2104      	movs	r1, #4
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f002 fc8f 	bl	800a490 <_ZdlPvj>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	4a05      	ldr	r2, [pc, #20]	; (8007b9c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f00b f8ad 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	080275b0 	.word	0x080275b0

08007ba0 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff ffe7 	bl	8007b7c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007bae:	211c      	movs	r1, #28
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f002 fc6d 	bl	800a490 <_ZdlPvj>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	4a05      	ldr	r2, [pc, #20]	; (8007be0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fd fa7f 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	0802765c 	.word	0x0802765c

08007be4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff ffe7 	bl	8007bc0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8007bf2:	2104      	movs	r1, #4
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f002 fc4b 	bl	800a490 <_ZdlPvj>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	4a05      	ldr	r2, [pc, #20]	; (8007c24 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f00b f869 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	0802767c 	.word	0x0802767c

08007c28 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff ffe7 	bl	8007c04 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8007c36:	211c      	movs	r1, #28
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f002 fc29 	bl	800a490 <_ZdlPvj>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	4a05      	ldr	r2, [pc, #20]	; (8007c68 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fd fa3b 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	08027728 	.word	0x08027728

08007c6c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff ffe7 	bl	8007c48 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8007c7a:	2104      	movs	r1, #4
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f002 fc07 	bl	800a490 <_ZdlPvj>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	4a05      	ldr	r2, [pc, #20]	; (8007cac <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f00b f825 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	08027748 	.word	0x08027748

08007cb0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff ffe7 	bl	8007c8c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007cbe:	211c      	movs	r1, #28
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f002 fbe5 	bl	800a490 <_ZdlPvj>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	4a05      	ldr	r2, [pc, #20]	; (8007cf0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fd f9f7 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	080277f4 	.word	0x080277f4

08007cf4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff ffe7 	bl	8007cd0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8007d02:	2104      	movs	r1, #4
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f002 fbc3 	bl	800a490 <_ZdlPvj>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	4a05      	ldr	r2, [pc, #20]	; (8007d34 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f00a ffe1 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	08027814 	.word	0x08027814

08007d38 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ffe7 	bl	8007d14 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8007d46:	211c      	movs	r1, #28
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f002 fba1 	bl	800a490 <_ZdlPvj>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fd f9b3 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	080278c0 	.word	0x080278c0

08007d7c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ffe7 	bl	8007d58 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8007d8a:	2104      	movs	r1, #4
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f002 fb7f 	bl	800a490 <_ZdlPvj>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	4a05      	ldr	r2, [pc, #20]	; (8007dbc <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f00a ff9d 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	080278e0 	.word	0x080278e0

08007dc0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff ffe7 	bl	8007d9c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8007dce:	211c      	movs	r1, #28
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f002 fb5d 	bl	800a490 <_ZdlPvj>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	4a05      	ldr	r2, [pc, #20]	; (8007e00 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fd f96f 	bl	80050d4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	0802798c 	.word	0x0802798c

08007e04 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff ffe7 	bl	8007de0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8007e12:	2104      	movs	r1, #4
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f002 fb3b 	bl	800a490 <_ZdlPvj>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	4a05      	ldr	r2, [pc, #20]	; (8007e44 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f00a ff59 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	080279cc 	.word	0x080279cc

08007e48 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff ffe7 	bl	8007e24 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8007e56:	211c      	movs	r1, #28
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f002 fb19 	bl	800a490 <_ZdlPvj>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	4a05      	ldr	r2, [pc, #20]	; (8007e88 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fc fae3 	bl	8004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	08027a78 	.word	0x08027a78

08007e8c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff ffe7 	bl	8007e68 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8007e9a:	2108      	movs	r1, #8
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f002 faf7 	bl	800a490 <_ZdlPvj>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	4a05      	ldr	r2, [pc, #20]	; (8007ecc <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f00a ff15 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	08027a98 	.word	0x08027a98

08007ed0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff ffe7 	bl	8007eac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8007ede:	211c      	movs	r1, #28
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f002 fad5 	bl	800a490 <_ZdlPvj>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	4a05      	ldr	r2, [pc, #20]	; (8007f10 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fc fa9f 	bl	8004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	08027b44 	.word	0x08027b44

08007f14 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff ffe7 	bl	8007ef0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8007f22:	2108      	movs	r1, #8
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f002 fab3 	bl	800a490 <_ZdlPvj>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	4a05      	ldr	r2, [pc, #20]	; (8007f54 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f00a fed1 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	08027b64 	.word	0x08027b64

08007f58 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff ffe7 	bl	8007f34 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8007f66:	211c      	movs	r1, #28
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f002 fa91 	bl	800a490 <_ZdlPvj>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	4a05      	ldr	r2, [pc, #20]	; (8007f98 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fc fa5b 	bl	8004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	08027c10 	.word	0x08027c10

08007f9c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff ffe7 	bl	8007f78 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8007faa:	2108      	movs	r1, #8
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f002 fa6f 	bl	800a490 <_ZdlPvj>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	4a05      	ldr	r2, [pc, #20]	; (8007fdc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f00a fe8d 	bl	8012cec <_ZN10UtestShellD1Ev>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	08027c30 	.word	0x08027c30

08007fe0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff ffe7 	bl	8007fbc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8007fee:	211c      	movs	r1, #28
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f002 fa4d 	bl	800a490 <_ZdlPvj>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	4a05      	ldr	r2, [pc, #20]	; (8008020 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4618      	mov	r0, r3
 8008012:	f7fc fa17 	bl	8004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	08027cdc 	.word	0x08027cdc

08008024 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff ffe7 	bl	8008000 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8008032:	2108      	movs	r1, #8
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f002 fa2b 	bl	800a490 <_ZdlPvj>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	4a05      	ldr	r2, [pc, #20]	; (8008064 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4618      	mov	r0, r3
 8008056:	f00a fe49 	bl	8012cec <_ZN10UtestShellD1Ev>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	08027cfc 	.word	0x08027cfc

08008068 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff ffe7 	bl	8008044 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8008076:	211c      	movs	r1, #28
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f002 fa09 	bl	800a490 <_ZdlPvj>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	4a05      	ldr	r2, [pc, #20]	; (80080a8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4618      	mov	r0, r3
 800809a:	f7fc f9d3 	bl	8004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	08027da8 	.word	0x08027da8

080080ac <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff ffe7 	bl	8008088 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 80080ba:	2108      	movs	r1, #8
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f002 f9e7 	bl	800a490 <_ZdlPvj>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	4a05      	ldr	r2, [pc, #20]	; (80080ec <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4618      	mov	r0, r3
 80080de:	f00a fe05 	bl	8012cec <_ZN10UtestShellD1Ev>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	08027dc8 	.word	0x08027dc8

080080f0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff ffe7 	bl	80080cc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80080fe:	211c      	movs	r1, #28
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f002 f9c5 	bl	800a490 <_ZdlPvj>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	4a05      	ldr	r2, [pc, #20]	; (8008130 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4618      	mov	r0, r3
 8008122:	f7fc f98f 	bl	8004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	08027e74 	.word	0x08027e74

08008134 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff ffe7 	bl	8008110 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8008142:	2108      	movs	r1, #8
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f002 f9a3 	bl	800a490 <_ZdlPvj>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	4a05      	ldr	r2, [pc, #20]	; (8008174 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4618      	mov	r0, r3
 8008166:	f00a fdc1 	bl	8012cec <_ZN10UtestShellD1Ev>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	08027e94 	.word	0x08027e94

08008178 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff ffe7 	bl	8008154 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8008186:	211c      	movs	r1, #28
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f002 f981 	bl	800a490 <_ZdlPvj>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	4a05      	ldr	r2, [pc, #20]	; (80081b8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fc f94b 	bl	8004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	08027f40 	.word	0x08027f40

080081bc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff ffe7 	bl	8008198 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 80081ca:	2108      	movs	r1, #8
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f002 f95f 	bl	800a490 <_ZdlPvj>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	4a05      	ldr	r2, [pc, #20]	; (80081fc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f00a fd7d 	bl	8012cec <_ZN10UtestShellD1Ev>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	08027f60 	.word	0x08027f60

08008200 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff ffe7 	bl	80081dc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 800820e:	211c      	movs	r1, #28
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f002 f93d 	bl	800a490 <_ZdlPvj>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	4a05      	ldr	r2, [pc, #20]	; (8008240 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4618      	mov	r0, r3
 8008232:	f7fc f907 	bl	8004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	0802800c 	.word	0x0802800c

08008244 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff ffe7 	bl	8008220 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8008252:	2108      	movs	r1, #8
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f002 f91b 	bl	800a490 <_ZdlPvj>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	4a05      	ldr	r2, [pc, #20]	; (8008284 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4618      	mov	r0, r3
 8008276:	f00a fd39 	bl	8012cec <_ZN10UtestShellD1Ev>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	0802802c 	.word	0x0802802c

08008288 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff ffe7 	bl	8008264 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8008296:	211c      	movs	r1, #28
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f002 f8f9 	bl	800a490 <_ZdlPvj>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	4a05      	ldr	r2, [pc, #20]	; (80082c8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fc f8c3 	bl	8004444 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	080280d8 	.word	0x080280d8

080082cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff ffe7 	bl	80082a8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 80082da:	2108      	movs	r1, #8
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f002 f8d7 	bl	800a490 <_ZdlPvj>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <_Z41__static_initialization_and_destruction_0ii>:
}
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af02      	add	r7, sp, #8
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	f040 8224 	bne.w	8008746 <_Z41__static_initialization_and_destruction_0ii+0x45a>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008304:	4293      	cmp	r3, r2
 8008306:	f040 821e 	bne.w	8008746 <_Z41__static_initialization_and_destruction_0ii+0x45a>
TEST(RingBuffer_Test_Group, InitTest)
 800830a:	489f      	ldr	r0, [pc, #636]	; (8008588 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800830c:	f7fc f8e8 	bl	80044e0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8008310:	2328      	movs	r3, #40	; 0x28
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	4b9d      	ldr	r3, [pc, #628]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	4b9d      	ldr	r3, [pc, #628]	; (8008590 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800831a:	4a9e      	ldr	r2, [pc, #632]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800831c:	499a      	ldr	r1, [pc, #616]	; (8008588 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800831e:	489e      	ldr	r0, [pc, #632]	; (8008598 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8008320:	f00c fae0 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8008324:	489d      	ldr	r0, [pc, #628]	; (800859c <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008326:	f7fc f98f 	bl	8004648 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 800832a:	2332      	movs	r3, #50	; 0x32
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	4b97      	ldr	r3, [pc, #604]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	4b9b      	ldr	r3, [pc, #620]	; (80085a0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008334:	4a97      	ldr	r2, [pc, #604]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008336:	4999      	ldr	r1, [pc, #612]	; (800859c <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008338:	489a      	ldr	r0, [pc, #616]	; (80085a4 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800833a:	f00c fad3 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800833e:	489a      	ldr	r0, [pc, #616]	; (80085a8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008340:	f7fc fa0c 	bl	800475c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8008344:	233c      	movs	r3, #60	; 0x3c
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	4b90      	ldr	r3, [pc, #576]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	4b97      	ldr	r3, [pc, #604]	; (80085ac <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800834e:	4a91      	ldr	r2, [pc, #580]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008350:	4995      	ldr	r1, [pc, #596]	; (80085a8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8008352:	4897      	ldr	r0, [pc, #604]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008354:	f00c fac6 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008358:	4896      	ldr	r0, [pc, #600]	; (80085b4 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800835a:	f7fc fa87 	bl	800486c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800835e:	2347      	movs	r3, #71	; 0x47
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	4b8a      	ldr	r3, [pc, #552]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	4b94      	ldr	r3, [pc, #592]	; (80085b8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008368:	4a8a      	ldr	r2, [pc, #552]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800836a:	4992      	ldr	r1, [pc, #584]	; (80085b4 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800836c:	4893      	ldr	r0, [pc, #588]	; (80085bc <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800836e:	f00c fab9 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008372:	4893      	ldr	r0, [pc, #588]	; (80085c0 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008374:	f7fc fae6 	bl	8004944 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8008378:	2350      	movs	r3, #80	; 0x50
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	4b83      	ldr	r3, [pc, #524]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	4b90      	ldr	r3, [pc, #576]	; (80085c4 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8008382:	4a84      	ldr	r2, [pc, #528]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008384:	498e      	ldr	r1, [pc, #568]	; (80085c0 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008386:	4890      	ldr	r0, [pc, #576]	; (80085c8 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8008388:	f00c faac 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800838c:	488f      	ldr	r0, [pc, #572]	; (80085cc <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800838e:	f7fc fb65 	bl	8004a5c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8008392:	2360      	movs	r3, #96	; 0x60
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	4b7d      	ldr	r3, [pc, #500]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	4b8d      	ldr	r3, [pc, #564]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800839c:	4a7d      	ldr	r2, [pc, #500]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800839e:	498b      	ldr	r1, [pc, #556]	; (80085cc <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80083a0:	488c      	ldr	r0, [pc, #560]	; (80085d4 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80083a2:	f00c fa9f 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80083a6:	488c      	ldr	r0, [pc, #560]	; (80085d8 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80083a8:	f7fc fc16 	bl	8004bd8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 80083ac:	2375      	movs	r3, #117	; 0x75
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	4b76      	ldr	r3, [pc, #472]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	4b89      	ldr	r3, [pc, #548]	; (80085dc <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80083b6:	4a77      	ldr	r2, [pc, #476]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80083b8:	4987      	ldr	r1, [pc, #540]	; (80085d8 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80083ba:	4889      	ldr	r0, [pc, #548]	; (80085e0 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80083bc:	f00c fa92 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 80083c0:	4888      	ldr	r0, [pc, #544]	; (80085e4 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80083c2:	f7fc fc6f 	bl	8004ca4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 80083c6:	237c      	movs	r3, #124	; 0x7c
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	4b70      	ldr	r3, [pc, #448]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	4b86      	ldr	r3, [pc, #536]	; (80085e8 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80083d0:	4a70      	ldr	r2, [pc, #448]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80083d2:	4984      	ldr	r1, [pc, #528]	; (80085e4 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80083d4:	4885      	ldr	r0, [pc, #532]	; (80085ec <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80083d6:	f00c fa85 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 80083da:	4885      	ldr	r0, [pc, #532]	; (80085f0 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80083dc:	f7fc fd4c 	bl	8004e78 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80083e0:	2384      	movs	r3, #132	; 0x84
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	4b69      	ldr	r3, [pc, #420]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	4b82      	ldr	r3, [pc, #520]	; (80085f4 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80083ea:	4a6a      	ldr	r2, [pc, #424]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80083ec:	4980      	ldr	r1, [pc, #512]	; (80085f0 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80083ee:	4882      	ldr	r0, [pc, #520]	; (80085f8 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80083f0:	f00c fa78 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80083f4:	4881      	ldr	r0, [pc, #516]	; (80085fc <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80083f6:	f7fc feb5 	bl	8005164 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80083fa:	23bf      	movs	r3, #191	; 0xbf
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	4b63      	ldr	r3, [pc, #396]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	4b7f      	ldr	r3, [pc, #508]	; (8008600 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8008404:	4a7f      	ldr	r2, [pc, #508]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008406:	497d      	ldr	r1, [pc, #500]	; (80085fc <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8008408:	487f      	ldr	r0, [pc, #508]	; (8008608 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800840a:	f00c fa6b 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800840e:	487f      	ldr	r0, [pc, #508]	; (800860c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008410:	f7fc ff12 	bl	8005238 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8008414:	23d1      	movs	r3, #209	; 0xd1
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	4b5c      	ldr	r3, [pc, #368]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4b7c      	ldr	r3, [pc, #496]	; (8008610 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800841e:	4a79      	ldr	r2, [pc, #484]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008420:	497a      	ldr	r1, [pc, #488]	; (800860c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008422:	487c      	ldr	r0, [pc, #496]	; (8008614 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008424:	f00c fa5e 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008428:	487b      	ldr	r0, [pc, #492]	; (8008618 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800842a:	f7fc ffc9 	bl	80053c0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 800842e:	23dd      	movs	r3, #221	; 0xdd
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	4b56      	ldr	r3, [pc, #344]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4b79      	ldr	r3, [pc, #484]	; (800861c <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008438:	4a72      	ldr	r2, [pc, #456]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800843a:	4977      	ldr	r1, [pc, #476]	; (8008618 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800843c:	4878      	ldr	r0, [pc, #480]	; (8008620 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800843e:	f00c fa51 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008442:	4878      	ldr	r0, [pc, #480]	; (8008624 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008444:	f7fd f866 	bl	8005514 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8008448:	23ec      	movs	r3, #236	; 0xec
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	4b4f      	ldr	r3, [pc, #316]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	4b75      	ldr	r3, [pc, #468]	; (8008628 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8008452:	4a6c      	ldr	r2, [pc, #432]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008454:	4973      	ldr	r1, [pc, #460]	; (8008624 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008456:	4875      	ldr	r0, [pc, #468]	; (800862c <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8008458:	f00c fa44 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800845c:	4874      	ldr	r0, [pc, #464]	; (8008630 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800845e:	f7fd f907 	bl	8005670 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8008462:	23fd      	movs	r3, #253	; 0xfd
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	4b49      	ldr	r3, [pc, #292]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4b72      	ldr	r3, [pc, #456]	; (8008634 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800846c:	4a65      	ldr	r2, [pc, #404]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800846e:	4970      	ldr	r1, [pc, #448]	; (8008630 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008470:	4871      	ldr	r0, [pc, #452]	; (8008638 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8008472:	f00c fa37 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008476:	4871      	ldr	r0, [pc, #452]	; (800863c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008478:	f7fd f966 	bl	8005748 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 800847c:	f240 130d 	movw	r3, #269	; 0x10d
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	4b42      	ldr	r3, [pc, #264]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	4b6e      	ldr	r3, [pc, #440]	; (8008640 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8008488:	4a5e      	ldr	r2, [pc, #376]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800848a:	496c      	ldr	r1, [pc, #432]	; (800863c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800848c:	486d      	ldr	r0, [pc, #436]	; (8008644 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800848e:	f00c fa29 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8008492:	486d      	ldr	r0, [pc, #436]	; (8008648 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008494:	f7fd fa16 	bl	80058c4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8008498:	f240 1323 	movw	r3, #291	; 0x123
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	4b3b      	ldr	r3, [pc, #236]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4b6a      	ldr	r3, [pc, #424]	; (800864c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80084a4:	4a57      	ldr	r2, [pc, #348]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084a6:	4968      	ldr	r1, [pc, #416]	; (8008648 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80084a8:	4869      	ldr	r0, [pc, #420]	; (8008650 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80084aa:	f00c fa1b 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80084ae:	4869      	ldr	r0, [pc, #420]	; (8008654 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80084b0:	f7fd faba 	bl	8005a28 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 80084b4:	f44f 739d 	mov.w	r3, #314	; 0x13a
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	4b34      	ldr	r3, [pc, #208]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	4b66      	ldr	r3, [pc, #408]	; (8008658 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80084c0:	4a50      	ldr	r2, [pc, #320]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084c2:	4964      	ldr	r1, [pc, #400]	; (8008654 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80084c4:	4865      	ldr	r0, [pc, #404]	; (800865c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80084c6:	f00c fa0d 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80084ca:	4865      	ldr	r0, [pc, #404]	; (8008660 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80084cc:	f7fd fbf0 	bl	8005cb0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 80084d0:	f44f 73b3 	mov.w	r3, #358	; 0x166
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	4b2d      	ldr	r3, [pc, #180]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	4b62      	ldr	r3, [pc, #392]	; (8008664 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80084dc:	4a49      	ldr	r2, [pc, #292]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084de:	4960      	ldr	r1, [pc, #384]	; (8008660 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80084e0:	4861      	ldr	r0, [pc, #388]	; (8008668 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80084e2:	f00c f9ff 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80084e6:	4861      	ldr	r0, [pc, #388]	; (800866c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80084e8:	f7fd fd24 	bl	8005f34 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 80084ec:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80084f0:	9301      	str	r3, [sp, #4]
 80084f2:	4b26      	ldr	r3, [pc, #152]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	4b5e      	ldr	r3, [pc, #376]	; (8008670 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80084f8:	4a42      	ldr	r2, [pc, #264]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084fa:	495c      	ldr	r1, [pc, #368]	; (800866c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80084fc:	485d      	ldr	r0, [pc, #372]	; (8008674 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80084fe:	f00c f9f1 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8008502:	485d      	ldr	r0, [pc, #372]	; (8008678 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8008504:	f7fd fdc0 	bl	8006088 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 8008508:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	4b1f      	ldr	r3, [pc, #124]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	4b5a      	ldr	r3, [pc, #360]	; (800867c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8008514:	4a3b      	ldr	r2, [pc, #236]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008516:	4958      	ldr	r1, [pc, #352]	; (8008678 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8008518:	4859      	ldr	r0, [pc, #356]	; (8008680 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800851a:	f00c f9e3 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 800851e:	4859      	ldr	r0, [pc, #356]	; (8008684 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008520:	f7fd fe98 	bl	8006254 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 8008524:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	4b18      	ldr	r3, [pc, #96]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	4b56      	ldr	r3, [pc, #344]	; (8008688 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8008530:	4a34      	ldr	r2, [pc, #208]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008532:	4954      	ldr	r1, [pc, #336]	; (8008684 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008534:	4855      	ldr	r0, [pc, #340]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8008536:	f00c f9d5 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800853a:	4855      	ldr	r0, [pc, #340]	; (8008690 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800853c:	f7fd ffb4 	bl	80064a8 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 8008540:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	4b11      	ldr	r3, [pc, #68]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	4b52      	ldr	r3, [pc, #328]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800854c:	4a2d      	ldr	r2, [pc, #180]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800854e:	4950      	ldr	r1, [pc, #320]	; (8008690 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008550:	4851      	ldr	r0, [pc, #324]	; (8008698 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8008552:	f00c f9c7 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008556:	4851      	ldr	r0, [pc, #324]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008558:	f7fe f8e2 	bl	8006720 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 800855c:	f240 2315 	movw	r3, #533	; 0x215
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	4b0a      	ldr	r3, [pc, #40]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	4b4e      	ldr	r3, [pc, #312]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008568:	4a26      	ldr	r2, [pc, #152]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800856a:	494c      	ldr	r1, [pc, #304]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800856c:	484d      	ldr	r0, [pc, #308]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800856e:	f00c f9b9 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8008572:	484d      	ldr	r0, [pc, #308]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008574:	f7fe f990 	bl	8006898 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8008578:	f44f 730c 	mov.w	r3, #560	; 0x230
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	4b03      	ldr	r3, [pc, #12]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	4b4a      	ldr	r3, [pc, #296]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8008584:	e094      	b.n	80086b0 <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 8008586:	bf00      	nop
 8008588:	200004a0 	.word	0x200004a0
 800858c:	08023590 	.word	0x08023590
 8008590:	08023e28 	.word	0x08023e28
 8008594:	08023e34 	.word	0x08023e34
 8008598:	200004bc 	.word	0x200004bc
 800859c:	200004c0 	.word	0x200004c0
 80085a0:	08023e4c 	.word	0x08023e4c
 80085a4:	200004dc 	.word	0x200004dc
 80085a8:	200004e0 	.word	0x200004e0
 80085ac:	08023e5c 	.word	0x08023e5c
 80085b0:	200004fc 	.word	0x200004fc
 80085b4:	20000500 	.word	0x20000500
 80085b8:	08023e70 	.word	0x08023e70
 80085bc:	2000051c 	.word	0x2000051c
 80085c0:	20000520 	.word	0x20000520
 80085c4:	08023e80 	.word	0x08023e80
 80085c8:	2000053c 	.word	0x2000053c
 80085cc:	20000540 	.word	0x20000540
 80085d0:	08023e98 	.word	0x08023e98
 80085d4:	2000055c 	.word	0x2000055c
 80085d8:	20000560 	.word	0x20000560
 80085dc:	08023ea8 	.word	0x08023ea8
 80085e0:	2000057c 	.word	0x2000057c
 80085e4:	20000580 	.word	0x20000580
 80085e8:	08023eb8 	.word	0x08023eb8
 80085ec:	2000059c 	.word	0x2000059c
 80085f0:	200005a0 	.word	0x200005a0
 80085f4:	08023ec4 	.word	0x08023ec4
 80085f8:	200005bc 	.word	0x200005bc
 80085fc:	200005c8 	.word	0x200005c8
 8008600:	08023ed4 	.word	0x08023ed4
 8008604:	08023ee4 	.word	0x08023ee4
 8008608:	200005e4 	.word	0x200005e4
 800860c:	200005e8 	.word	0x200005e8
 8008610:	08023efc 	.word	0x08023efc
 8008614:	20000604 	.word	0x20000604
 8008618:	20000608 	.word	0x20000608
 800861c:	08023f14 	.word	0x08023f14
 8008620:	20000624 	.word	0x20000624
 8008624:	20000628 	.word	0x20000628
 8008628:	08023f30 	.word	0x08023f30
 800862c:	20000644 	.word	0x20000644
 8008630:	20000648 	.word	0x20000648
 8008634:	08023f44 	.word	0x08023f44
 8008638:	20000664 	.word	0x20000664
 800863c:	20000668 	.word	0x20000668
 8008640:	08023f60 	.word	0x08023f60
 8008644:	20000684 	.word	0x20000684
 8008648:	20000688 	.word	0x20000688
 800864c:	08023f74 	.word	0x08023f74
 8008650:	200006a4 	.word	0x200006a4
 8008654:	200006a8 	.word	0x200006a8
 8008658:	08023f90 	.word	0x08023f90
 800865c:	200006c4 	.word	0x200006c4
 8008660:	200006c8 	.word	0x200006c8
 8008664:	08023fa8 	.word	0x08023fa8
 8008668:	200006e4 	.word	0x200006e4
 800866c:	200006e8 	.word	0x200006e8
 8008670:	08023fbc 	.word	0x08023fbc
 8008674:	20000704 	.word	0x20000704
 8008678:	20000708 	.word	0x20000708
 800867c:	08023fdc 	.word	0x08023fdc
 8008680:	20000724 	.word	0x20000724
 8008684:	20000728 	.word	0x20000728
 8008688:	08023ff4 	.word	0x08023ff4
 800868c:	20000744 	.word	0x20000744
 8008690:	20000748 	.word	0x20000748
 8008694:	0802400c 	.word	0x0802400c
 8008698:	20000764 	.word	0x20000764
 800869c:	20000768 	.word	0x20000768
 80086a0:	08024020 	.word	0x08024020
 80086a4:	20000784 	.word	0x20000784
 80086a8:	20000788 	.word	0x20000788
 80086ac:	0802403c 	.word	0x0802403c
 80086b0:	4a83      	ldr	r2, [pc, #524]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80086b2:	4984      	ldr	r1, [pc, #528]	; (80088c4 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 80086b4:	4884      	ldr	r0, [pc, #528]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80086b6:	f00c f915 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80086ba:	4884      	ldr	r0, [pc, #528]	; (80088cc <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80086bc:	f7fe fa28 	bl	8006b10 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 80086c0:	f240 235d 	movw	r3, #605	; 0x25d
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	4b82      	ldr	r3, [pc, #520]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	4b82      	ldr	r3, [pc, #520]	; (80088d4 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 80086cc:	4a7c      	ldr	r2, [pc, #496]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80086ce:	497f      	ldr	r1, [pc, #508]	; (80088cc <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80086d0:	4881      	ldr	r0, [pc, #516]	; (80088d8 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80086d2:	f00c f907 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80086d6:	4881      	ldr	r0, [pc, #516]	; (80088dc <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80086d8:	f7fe fb00 	bl	8006cdc <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 80086dc:	f240 2376 	movw	r3, #630	; 0x276
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	4b7b      	ldr	r3, [pc, #492]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	4b7e      	ldr	r3, [pc, #504]	; (80088e0 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80086e8:	4a75      	ldr	r2, [pc, #468]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80086ea:	497c      	ldr	r1, [pc, #496]	; (80088dc <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80086ec:	487d      	ldr	r0, [pc, #500]	; (80088e4 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80086ee:	f00c f8f9 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80086f2:	487d      	ldr	r0, [pc, #500]	; (80088e8 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80086f4:	f7fe fc4c 	bl	8006f90 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 80086f8:	f240 239b 	movw	r3, #667	; 0x29b
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	4b74      	ldr	r3, [pc, #464]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4b7a      	ldr	r3, [pc, #488]	; (80088ec <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8008704:	4a6e      	ldr	r2, [pc, #440]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008706:	4978      	ldr	r1, [pc, #480]	; (80088e8 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008708:	4879      	ldr	r0, [pc, #484]	; (80088f0 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800870a:	f00c f8eb 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 800870e:	4879      	ldr	r0, [pc, #484]	; (80088f4 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008710:	f7fe fd12 	bl	8007138 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 8008714:	f240 23b1 	movw	r3, #689	; 0x2b1
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	4b6d      	ldr	r3, [pc, #436]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	4b76      	ldr	r3, [pc, #472]	; (80088f8 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8008720:	4a67      	ldr	r2, [pc, #412]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008722:	4974      	ldr	r1, [pc, #464]	; (80088f4 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008724:	4875      	ldr	r0, [pc, #468]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8008726:	f00c f8dd 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 800872a:	4875      	ldr	r0, [pc, #468]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800872c:	f7fe fd74 	bl	8007218 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 8008730:	f240 23c2 	movw	r3, #706	; 0x2c2
 8008734:	9301      	str	r3, [sp, #4]
 8008736:	4b66      	ldr	r3, [pc, #408]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	4b72      	ldr	r3, [pc, #456]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 800873c:	4a60      	ldr	r2, [pc, #384]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800873e:	4970      	ldr	r1, [pc, #448]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008740:	4871      	ldr	r0, [pc, #452]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008742:	f00c f8cf 	bl	80148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f040 80b4 	bne.w	80088b6 <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008754:	4293      	cmp	r3, r2
 8008756:	f040 80ae 	bne.w	80088b6 <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 800875a:	486b      	ldr	r0, [pc, #428]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800875c:	f00c f8ec 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008760:	4867      	ldr	r0, [pc, #412]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008762:	f7fe fe0f 	bl	8007384 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8008766:	4865      	ldr	r0, [pc, #404]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8008768:	f00c f8e6 	bl	8014938 <_ZN13TestInstallerD1Ev>
 800876c:	4861      	ldr	r0, [pc, #388]	; (80088f4 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800876e:	f7fe fe4d 	bl	800740c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8008772:	485f      	ldr	r0, [pc, #380]	; (80088f0 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008774:	f00c f8e0 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008778:	485b      	ldr	r0, [pc, #364]	; (80088e8 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800877a:	f7fe fe8b 	bl	8007494 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 800877e:	4859      	ldr	r0, [pc, #356]	; (80088e4 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8008780:	f00c f8da 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008784:	4855      	ldr	r0, [pc, #340]	; (80088dc <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8008786:	f7fe fec9 	bl	800751c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 800878a:	4853      	ldr	r0, [pc, #332]	; (80088d8 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800878c:	f00c f8d4 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008790:	484e      	ldr	r0, [pc, #312]	; (80088cc <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8008792:	f7fe ff07 	bl	80075a4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8008796:	484c      	ldr	r0, [pc, #304]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8008798:	f00c f8ce 	bl	8014938 <_ZN13TestInstallerD1Ev>
 800879c:	4849      	ldr	r0, [pc, #292]	; (80088c4 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800879e:	f7fe ff45 	bl	800762c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80087a2:	485a      	ldr	r0, [pc, #360]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x620>)
 80087a4:	f00c f8c8 	bl	8014938 <_ZN13TestInstallerD1Ev>
 80087a8:	4859      	ldr	r0, [pc, #356]	; (8008910 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 80087aa:	f7fe ff83 	bl	80076b4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 80087ae:	4859      	ldr	r0, [pc, #356]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 80087b0:	f00c f8c2 	bl	8014938 <_ZN13TestInstallerD1Ev>
 80087b4:	4858      	ldr	r0, [pc, #352]	; (8008918 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 80087b6:	f7fe ffc1 	bl	800773c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80087ba:	4858      	ldr	r0, [pc, #352]	; (800891c <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80087bc:	f00c f8bc 	bl	8014938 <_ZN13TestInstallerD1Ev>
 80087c0:	4857      	ldr	r0, [pc, #348]	; (8008920 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 80087c2:	f7fe ffff 	bl	80077c4 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80087c6:	4857      	ldr	r0, [pc, #348]	; (8008924 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 80087c8:	f00c f8b6 	bl	8014938 <_ZN13TestInstallerD1Ev>
 80087cc:	4856      	ldr	r0, [pc, #344]	; (8008928 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80087ce:	f7ff f83d 	bl	800784c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80087d2:	4856      	ldr	r0, [pc, #344]	; (800892c <_Z41__static_initialization_and_destruction_0ii+0x640>)
 80087d4:	f00c f8b0 	bl	8014938 <_ZN13TestInstallerD1Ev>
 80087d8:	4855      	ldr	r0, [pc, #340]	; (8008930 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80087da:	f7ff f87b 	bl	80078d4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80087de:	4855      	ldr	r0, [pc, #340]	; (8008934 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80087e0:	f00c f8aa 	bl	8014938 <_ZN13TestInstallerD1Ev>
 80087e4:	4854      	ldr	r0, [pc, #336]	; (8008938 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 80087e6:	f7ff f8b9 	bl	800795c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80087ea:	4854      	ldr	r0, [pc, #336]	; (800893c <_Z41__static_initialization_and_destruction_0ii+0x650>)
 80087ec:	f00c f8a4 	bl	8014938 <_ZN13TestInstallerD1Ev>
 80087f0:	4853      	ldr	r0, [pc, #332]	; (8008940 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 80087f2:	f7ff f8f7 	bl	80079e4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80087f6:	4853      	ldr	r0, [pc, #332]	; (8008944 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 80087f8:	f00c f89e 	bl	8014938 <_ZN13TestInstallerD1Ev>
 80087fc:	4852      	ldr	r0, [pc, #328]	; (8008948 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80087fe:	f7ff f935 	bl	8007a6c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008802:	4852      	ldr	r0, [pc, #328]	; (800894c <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8008804:	f00c f898 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008808:	4851      	ldr	r0, [pc, #324]	; (8008950 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 800880a:	f7ff f973 	bl	8007af4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800880e:	4851      	ldr	r0, [pc, #324]	; (8008954 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8008810:	f00c f892 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008814:	4850      	ldr	r0, [pc, #320]	; (8008958 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 8008816:	f7ff f9b1 	bl	8007b7c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800881a:	4850      	ldr	r0, [pc, #320]	; (800895c <_Z41__static_initialization_and_destruction_0ii+0x670>)
 800881c:	f00c f88c 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008820:	484f      	ldr	r0, [pc, #316]	; (8008960 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8008822:	f7ff f9ef 	bl	8007c04 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008826:	484f      	ldr	r0, [pc, #316]	; (8008964 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8008828:	f00c f886 	bl	8014938 <_ZN13TestInstallerD1Ev>
 800882c:	484e      	ldr	r0, [pc, #312]	; (8008968 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 800882e:	f7ff fa2d 	bl	8007c8c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8008832:	484e      	ldr	r0, [pc, #312]	; (800896c <_Z41__static_initialization_and_destruction_0ii+0x680>)
 8008834:	f00c f880 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008838:	484d      	ldr	r0, [pc, #308]	; (8008970 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 800883a:	f7ff fa6b 	bl	8007d14 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 800883e:	484d      	ldr	r0, [pc, #308]	; (8008974 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 8008840:	f00c f87a 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008844:	484c      	ldr	r0, [pc, #304]	; (8008978 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 8008846:	f7ff faa9 	bl	8007d9c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 800884a:	484c      	ldr	r0, [pc, #304]	; (800897c <_Z41__static_initialization_and_destruction_0ii+0x690>)
 800884c:	f00c f874 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008850:	484b      	ldr	r0, [pc, #300]	; (8008980 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 8008852:	f7ff fae7 	bl	8007e24 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8008856:	484b      	ldr	r0, [pc, #300]	; (8008984 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 8008858:	f00c f86e 	bl	8014938 <_ZN13TestInstallerD1Ev>
 800885c:	484a      	ldr	r0, [pc, #296]	; (8008988 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 800885e:	f7ff fb25 	bl	8007eac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008862:	484a      	ldr	r0, [pc, #296]	; (800898c <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8008864:	f00c f868 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008868:	4849      	ldr	r0, [pc, #292]	; (8008990 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 800886a:	f7ff fb63 	bl	8007f34 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800886e:	4849      	ldr	r0, [pc, #292]	; (8008994 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 8008870:	f00c f862 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008874:	4848      	ldr	r0, [pc, #288]	; (8008998 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 8008876:	f7ff fba1 	bl	8007fbc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800887a:	4848      	ldr	r0, [pc, #288]	; (800899c <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 800887c:	f00c f85c 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008880:	4847      	ldr	r0, [pc, #284]	; (80089a0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8008882:	f7ff fbdf 	bl	8008044 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008886:	4847      	ldr	r0, [pc, #284]	; (80089a4 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8008888:	f00c f856 	bl	8014938 <_ZN13TestInstallerD1Ev>
 800888c:	4846      	ldr	r0, [pc, #280]	; (80089a8 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 800888e:	f7ff fc1d 	bl	80080cc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008892:	4846      	ldr	r0, [pc, #280]	; (80089ac <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 8008894:	f00c f850 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8008898:	4845      	ldr	r0, [pc, #276]	; (80089b0 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 800889a:	f7ff fc5b 	bl	8008154 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 800889e:	4845      	ldr	r0, [pc, #276]	; (80089b4 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 80088a0:	f00c f84a 	bl	8014938 <_ZN13TestInstallerD1Ev>
 80088a4:	4844      	ldr	r0, [pc, #272]	; (80089b8 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 80088a6:	f7ff fc99 	bl	80081dc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 80088aa:	4844      	ldr	r0, [pc, #272]	; (80089bc <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 80088ac:	f00c f844 	bl	8014938 <_ZN13TestInstallerD1Ev>
 80088b0:	4843      	ldr	r0, [pc, #268]	; (80089c0 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80088b2:	f7ff fcd7 	bl	8008264 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	08023ee4 	.word	0x08023ee4
 80088c4:	20000788 	.word	0x20000788
 80088c8:	200007a4 	.word	0x200007a4
 80088cc:	200007a8 	.word	0x200007a8
 80088d0:	08023590 	.word	0x08023590
 80088d4:	08024054 	.word	0x08024054
 80088d8:	200007c4 	.word	0x200007c4
 80088dc:	200007c8 	.word	0x200007c8
 80088e0:	08024068 	.word	0x08024068
 80088e4:	200007e4 	.word	0x200007e4
 80088e8:	200007e8 	.word	0x200007e8
 80088ec:	08024080 	.word	0x08024080
 80088f0:	20000804 	.word	0x20000804
 80088f4:	20000808 	.word	0x20000808
 80088f8:	08024098 	.word	0x08024098
 80088fc:	20000824 	.word	0x20000824
 8008900:	20000828 	.word	0x20000828
 8008904:	080240b8 	.word	0x080240b8
 8008908:	20000844 	.word	0x20000844
 800890c:	20000784 	.word	0x20000784
 8008910:	20000768 	.word	0x20000768
 8008914:	20000764 	.word	0x20000764
 8008918:	20000748 	.word	0x20000748
 800891c:	20000744 	.word	0x20000744
 8008920:	20000728 	.word	0x20000728
 8008924:	20000724 	.word	0x20000724
 8008928:	20000708 	.word	0x20000708
 800892c:	20000704 	.word	0x20000704
 8008930:	200006e8 	.word	0x200006e8
 8008934:	200006e4 	.word	0x200006e4
 8008938:	200006c8 	.word	0x200006c8
 800893c:	200006c4 	.word	0x200006c4
 8008940:	200006a8 	.word	0x200006a8
 8008944:	200006a4 	.word	0x200006a4
 8008948:	20000688 	.word	0x20000688
 800894c:	20000684 	.word	0x20000684
 8008950:	20000668 	.word	0x20000668
 8008954:	20000664 	.word	0x20000664
 8008958:	20000648 	.word	0x20000648
 800895c:	20000644 	.word	0x20000644
 8008960:	20000628 	.word	0x20000628
 8008964:	20000624 	.word	0x20000624
 8008968:	20000608 	.word	0x20000608
 800896c:	20000604 	.word	0x20000604
 8008970:	200005e8 	.word	0x200005e8
 8008974:	200005e4 	.word	0x200005e4
 8008978:	200005c8 	.word	0x200005c8
 800897c:	200005bc 	.word	0x200005bc
 8008980:	200005a0 	.word	0x200005a0
 8008984:	2000059c 	.word	0x2000059c
 8008988:	20000580 	.word	0x20000580
 800898c:	2000057c 	.word	0x2000057c
 8008990:	20000560 	.word	0x20000560
 8008994:	2000055c 	.word	0x2000055c
 8008998:	20000540 	.word	0x20000540
 800899c:	2000053c 	.word	0x2000053c
 80089a0:	20000520 	.word	0x20000520
 80089a4:	2000051c 	.word	0x2000051c
 80089a8:	20000500 	.word	0x20000500
 80089ac:	200004fc 	.word	0x200004fc
 80089b0:	200004e0 	.word	0x200004e0
 80089b4:	200004dc 	.word	0x200004dc
 80089b8:	200004c0 	.word	0x200004c0
 80089bc:	200004bc 	.word	0x200004bc
 80089c0:	200004a0 	.word	0x200004a0

080089c4 <_GLOBAL__sub_I_rx_buffer>:
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089cc:	2001      	movs	r0, #1
 80089ce:	f7ff fc8d 	bl	80082ec <_Z41__static_initialization_and_destruction_0ii>
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <_GLOBAL__sub_D_rx_buffer>:
 80089d4:	b580      	push	{r7, lr}
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80089dc:	2000      	movs	r0, #0
 80089de:	f7ff fc85 	bl	80082ec <_Z41__static_initialization_and_destruction_0ii>
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
    }
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	69db      	ldr	r3, [r3, #28]
    }
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	695b      	ldr	r3, [r3, #20]
    }
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8008a2c:	b590      	push	{r4, r7, lr}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff ffed 	bl	8008a14 <_ZNK10TestResult15getFailureCountEv>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <_ZNK10TestResult9isFailureEv+0x2a>
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff ffcf 	bl	80089e4 <_ZNK10TestResult11getRunCountEv>
 8008a46:	4604      	mov	r4, r0
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff ffd7 	bl	80089fc <_ZNK10TestResult15getIgnoredCountEv>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4423      	add	r3, r4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <_ZNK10TestResult9isFailureEv+0x2e>
 8008a56:	2301      	movs	r3, #1
 8008a58:	e000      	b.n	8008a5c <_ZNK10TestResult9isFailureEv+0x30>
 8008a5a:	2300      	movs	r3, #0
    }
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd90      	pop	{r4, r7, pc}

08008a64 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
    {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f007 fde6 	bl	8010640 <_ZN10TestOutputC1Ev>
 8008a74:	4a03      	ldr	r2, [pc, #12]	; (8008a84 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	601a      	str	r2, [r3, #0]
    }
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	0802878c 	.word	0x0802878c

08008a88 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
    {
 8008a90:	4a05      	ldr	r2, [pc, #20]	; (8008aa8 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f007 fdef 	bl	801067c <_ZN10TestOutputD1Ev>
    }
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	0802878c 	.word	0x0802878c

08008aac <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
    }
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff ffe7 	bl	8008a88 <_ZN17ConsoleTestOutputD1Ev>
 8008aba:	2110      	movs	r1, #16
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f001 fce7 	bl	800a490 <_ZdlPvj>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8008acc:	b5b0      	push	{r4, r5, r7, lr}
 8008ace:	b098      	sub	sp, #96	; 0x60
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
    int result = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8008ada:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff ffc0 	bl	8008a64 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008ae4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008ae8:	4935      	ldr	r1, [pc, #212]	; (8008bc0 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008aea:	4618      	mov	r0, r3
 8008aec:	f004 f87f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8008af0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008af4:	f107 0318 	add.w	r3, r7, #24
 8008af8:	2200      	movs	r2, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 ff6a 	bl	800a9d4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8008b00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008b04:	4618      	mov	r0, r3
 8008b06:	f004 fc2a 	bl	800d35e <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8008b0a:	f107 0318 	add.w	r3, r7, #24
 8008b0e:	2101      	movs	r1, #1
 8008b10:	4618      	mov	r0, r3
 8008b12:	f001 ff2f 	bl	800a974 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8008b16:	f009 fb21 	bl	801215c <_ZN12TestRegistry18getCurrentRegistryEv>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	3234      	adds	r2, #52	; 0x34
 8008b20:	6812      	ldr	r2, [r2, #0]
 8008b22:	f107 0118 	add.w	r1, r7, #24
 8008b26:	4618      	mov	r0, r3
 8008b28:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8008b2a:	f009 fb17 	bl	801215c <_ZN12TestRegistry18getCurrentRegistryEv>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f107 0008 	add.w	r0, r7, #8
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	f000 f844 	bl	8008bc4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8008b3c:	f107 0308 	add.w	r3, r7, #8
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 f899 	bl	8008c78 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8008b46:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8008b48:	f107 0308 	add.w	r3, r7, #8
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f863 	bl	8008c18 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8008b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10c      	bne.n	8008b72 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8008b58:	f107 0318 	add.w	r3, r7, #24
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f002 f83a 	bl	800abd8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8008b64:	4602      	mov	r2, r0
 8008b66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f007 fe27 	bl	80107c0 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8008b72:	f009 faf3 	bl	801215c <_ZN12TestRegistry18getCurrentRegistryEv>
 8008b76:	4604      	mov	r4, r0
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	3344      	adds	r3, #68	; 0x44
 8008b7c:	681d      	ldr	r5, [r3, #0]
 8008b7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008b82:	490f      	ldr	r1, [pc, #60]	; (8008bc0 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008b84:	4618      	mov	r0, r3
 8008b86:	f004 f832 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8008b8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4620      	mov	r0, r4
 8008b92:	47a8      	blx	r5
 8008b94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f004 fbe0 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return result;
 8008b9e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008ba0:	f107 0318 	add.w	r3, r7, #24
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f001 ff4d 	bl	800aa44 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8008baa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff ff6a 	bl	8008a88 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8008bb4:	4623      	mov	r3, r4
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3760      	adds	r7, #96	; 0x60
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	080240d0 	.word	0x080240d0

08008bc4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8008bc4:	b590      	push	{r4, r7, lr}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8008bd2:	4a0f      	ldr	r2, [pc, #60]	; (8008c10 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	605a      	str	r2, [r3, #4]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	609a      	str	r2, [r3, #8]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8008bea:	2241      	movs	r2, #65	; 0x41
 8008bec:	4909      	ldr	r1, [pc, #36]	; (8008c14 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8008bee:	2038      	movs	r0, #56	; 0x38
 8008bf0:	f001 fc3a 	bl	800a468 <_ZnwjPKci>
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f00c f84a 	bl	8014c94 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	609c      	str	r4, [r3, #8]
}
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd90      	pop	{r4, r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	08028118 	.word	0x08028118
 8008c14:	080240e4 	.word	0x080240e4

08008c18 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	4a0c      	ldr	r2, [pc, #48]	; (8008c54 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d004      	beq.n	8008c38 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	3204      	adds	r2, #4
 8008c32:	6812      	ldr	r2, [r2, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	4790      	blx	r2
    delete output_;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d004      	beq.n	8008c4a <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	3204      	adds	r2, #4
 8008c44:	6812      	ldr	r2, [r2, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	4790      	blx	r2
}
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	08028118 	.word	0x08028118

08008c58 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
}
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff ffd9 	bl	8008c18 <_ZN21CommandLineTestRunnerD1Ev>
 8008c66:	2110      	movs	r1, #16
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 fc11 	bl	800a490 <_ZdlPvj>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8008c78:	b5b0      	push	{r4, r5, r7, lr}
 8008c7a:	b08c      	sub	sp, #48	; 0x30
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8008c80:	2301      	movs	r3, #1
 8008c82:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8008c84:	f107 031c 	add.w	r3, r7, #28
 8008c88:	4929      	ldr	r1, [pc, #164]	; (8008d30 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f003 ffaf 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8008c90:	f107 021c 	add.w	r2, r7, #28
 8008c94:	f107 0308 	add.w	r3, r7, #8
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f008 fe1c 	bl	80118d8 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8008ca0:	f107 031c 	add.w	r3, r7, #28
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f004 fb5a 	bl	800d35e <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3334      	adds	r3, #52	; 0x34
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f107 0108 	add.w	r1, r7, #8
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	333c      	adds	r3, #60	; 0x3c
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4610      	mov	r0, r2
 8008cd0:	4798      	blx	r3
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa3e 	bl	8009158 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f8ac 	bl	8008e40 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8008ce8:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68dd      	ldr	r5, [r3, #12]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3344      	adds	r3, #68	; 0x44
 8008cf6:	681c      	ldr	r4, [r3, #0]
 8008cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cfc:	490c      	ldr	r1, [pc, #48]	; (8008d30 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f003 ff75 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8008d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	47a0      	blx	r4
 8008d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d12:	4618      	mov	r0, r3
 8008d14:	f004 fb23 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return testResult;
 8008d18:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8008d1a:	f107 0308 	add.w	r3, r7, #8
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 faaa 	bl	8009278 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8008d24:	4623      	mov	r3, r4
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3730      	adds	r7, #48	; 0x30
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	08024108 	.word	0x08024108

08008d34 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8008d34:	b5b0      	push	{r4, r5, r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68dd      	ldr	r5, [r3, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3330      	adds	r3, #48	; 0x30
 8008d48:	681c      	ldr	r4, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f00c fce0 	bl	8015714 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8008d54:	4603      	mov	r3, r0
 8008d56:	4619      	mov	r1, r3
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68dd      	ldr	r5, [r3, #12]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	332c      	adds	r3, #44	; 0x2c
 8008d68:	681c      	ldr	r4, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f00c fcdc 	bl	801572c <_ZNK20CommandLineArguments14getNameFiltersEv>
 8008d74:	4603      	mov	r3, r0
 8008d76:	4619      	mov	r1, r3
 8008d78:	4628      	mov	r0, r5
 8008d7a:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f00c fc2b 	bl	80155dc <_ZNK20CommandLineArguments9isVerboseEv>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d009      	beq.n	8008da0 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3320      	adds	r3, #32
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f00c fc25 	bl	80155f4 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d009      	beq.n	8008dc4 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3320      	adds	r3, #32
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2102      	movs	r1, #2
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f00c fc1f 	bl	801560c <_ZNK20CommandLineArguments7isColorEv>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d008      	beq.n	8008de6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3324      	adds	r3, #36	; 0x24
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4610      	mov	r0, r2
 8008de4:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f00c fc4a 	bl	8015684 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d008      	beq.n	8008e08 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3360      	adds	r3, #96	; 0x60
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4610      	mov	r0, r2
 8008e06:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f00c fc2d 	bl	801566c <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d004      	beq.n	8008e22 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f009 fa19 	bl	8012254 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f00c fc50 	bl	80156cc <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 8008e32:	f00b fadb 	bl	80143ec <_ZN10UtestShell14setCrashOnFailEv>
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e40 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8008e40:	b5b0      	push	{r4, r5, r7, lr}
 8008e42:	b094      	sub	sp, #80	; 0x50
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff ff73 	bl	8008d34 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f00c fc1c 	bl	801569c <_ZNK20CommandLineArguments14getRepeatCountEv>
 8008e64:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f00c fbda 	bl	8015624 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d019      	beq.n	8008eaa <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	f107 0308 	add.w	r3, r7, #8
 8008e7e:	4611      	mov	r1, r2
 8008e80:	4618      	mov	r0, r3
 8008e82:	f009 fbaf 	bl	80125e4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3320      	adds	r3, #32
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f107 0108 	add.w	r1, r7, #8
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4798      	blx	r3
        return 0;
 8008e9c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008e9e:	f107 0308 	add.w	r3, r7, #8
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f009 fbd6 	bl	8012654 <_ZN10TestResultD1Ev>
 8008ea8:	e0e1      	b.n	800906e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f00c fbc4 	bl	801563c <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d019      	beq.n	8008eee <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	f107 0308 	add.w	r3, r7, #8
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f009 fb8d 	bl	80125e4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68da      	ldr	r2, [r3, #12]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3324      	adds	r3, #36	; 0x24
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f107 0108 	add.w	r1, r7, #8
 8008edc:	4610      	mov	r0, r2
 8008ede:	4798      	blx	r3
        return 0;
 8008ee0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f009 fbb4 	bl	8012654 <_ZN10TestResultD1Ev>
 8008eec:	e0bf      	b.n	800906e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f00c fbae 	bl	8015654 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d019      	beq.n	8008f32 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	4611      	mov	r1, r2
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f009 fb6b 	bl	80125e4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68da      	ldr	r2, [r3, #12]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3328      	adds	r3, #40	; 0x28
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f107 0108 	add.w	r1, r7, #8
 8008f20:	4610      	mov	r0, r2
 8008f22:	4798      	blx	r3
        return 0;
 8008f24:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8008f26:	f107 0308 	add.w	r3, r7, #8
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f009 fb92 	bl	8012654 <_ZN10TestResultD1Ev>
 8008f30:	e09d      	b.n	800906e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f00c fbbc 	bl	80156b4 <_ZNK20CommandLineArguments11isReversingEv>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d008      	beq.n	8008f54 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	331c      	adds	r3, #28
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4610      	mov	r0, r2
 8008f52:	4798      	blx	r3

    if (arguments_->isShuffling())
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f00c fbc3 	bl	80156e4 <_ZNK20CommandLineArguments11isShufflingEv>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d023      	beq.n	8008fac <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	332c      	adds	r3, #44	; 0x2c
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4941      	ldr	r1, [pc, #260]	; (8009078 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8008f74:	4610      	mov	r0, r2
 8008f76:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685d      	ldr	r5, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3334      	adds	r3, #52	; 0x34
 8008f84:	681c      	ldr	r4, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f00c fbb6 	bl	80156fc <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8008f90:	4603      	mov	r3, r0
 8008f92:	4619      	mov	r1, r3
 8008f94:	4628      	mov	r0, r5
 8008f96:	47a0      	blx	r4
        output_->print("\n");
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	332c      	adds	r3, #44	; 0x2c
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4935      	ldr	r1, [pc, #212]	; (800907c <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8008fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	bf8c      	ite	hi
 8008fb8:	2301      	movhi	r3, #1
 8008fba:	2300      	movls	r3, #0
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d04e      	beq.n	8009060 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f00c fb8c 	bl	80156e4 <_ZNK20CommandLineArguments11isShufflingEv>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00f      	beq.n	8008ff2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68dd      	ldr	r5, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3318      	adds	r3, #24
 8008fde:	681c      	ldr	r4, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f00c fb89 	bl	80156fc <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8008fea:	4603      	mov	r3, r0
 8008fec:	4619      	mov	r1, r3
 8008fee:	4628      	mov	r0, r5
 8008ff0:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6858      	ldr	r0, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3340      	adds	r3, #64	; 0x40
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009002:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009004:	4798      	blx	r3
        TestResult tr(*output_);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	f107 0308 	add.w	r3, r7, #8
 800900e:	4611      	mov	r1, r2
 8009010:	4618      	mov	r0, r3
 8009012:	f009 fae7 	bl	80125e4 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3314      	adds	r3, #20
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f107 0108 	add.w	r1, r7, #8
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 800902c:	f107 0308 	add.w	r3, r7, #8
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff fcef 	bl	8008a14 <_ZNK10TestResult15getFailureCountEv>
 8009036:	4602      	mov	r2, r0
 8009038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800903a:	4413      	add	r3, r2
 800903c:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800903e:	f107 0308 	add.w	r3, r7, #8
 8009042:	4618      	mov	r0, r3
 8009044:	f7ff fcf2 	bl	8008a2c <_ZNK10TestResult9isFailureEv>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800904e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009050:	3301      	adds	r3, #1
 8009052:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8009054:	f107 0308 	add.w	r3, r7, #8
 8009058:	4618      	mov	r0, r3
 800905a:	f009 fafb 	bl	8012654 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800905e:	e7a5      	b.n	8008fac <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8009060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8009066:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8009068:	e000      	b.n	800906c <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 800906a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800906c:	bf00      	nop
 800906e:	4623      	mov	r3, r4
}
 8009070:	4618      	mov	r0, r3
 8009072:	3750      	adds	r7, #80	; 0x50
 8009074:	46bd      	mov	sp, r7
 8009076:	bdb0      	pop	{r4, r5, r7, pc}
 8009078:	0802411c 	.word	0x0802411c
 800907c:	08024148 	.word	0x08024148

08009080 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8009080:	b590      	push	{r4, r7, lr}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8009088:	229d      	movs	r2, #157	; 0x9d
 800908a:	4906      	ldr	r1, [pc, #24]	; (80090a4 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800908c:	201c      	movs	r0, #28
 800908e:	f001 f9eb 	bl	800a468 <_ZnwjPKci>
 8009092:	4604      	mov	r4, r0
 8009094:	4620      	mov	r0, r4
 8009096:	f005 f955 	bl	800e344 <_ZN18TeamCityTestOutputC1Ev>
 800909a:	4623      	mov	r3, r4
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd90      	pop	{r4, r7, pc}
 80090a4:	080240e4 	.word	0x080240e4

080090a8 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 80090a8:	b590      	push	{r4, r7, lr}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 80090b2:	22a2      	movs	r2, #162	; 0xa2
 80090b4:	490a      	ldr	r1, [pc, #40]	; (80090e0 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 80090b6:	2014      	movs	r0, #20
 80090b8:	f001 f9d6 	bl	800a468 <_ZnwjPKci>
 80090bc:	4604      	mov	r4, r0
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 f980 	bl	80093c4 <_ZN15JUnitTestOutputC1Ev>
 80090c4:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fbb2 	bl	8009838 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 80090d4:	68fb      	ldr	r3, [r7, #12]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd90      	pop	{r4, r7, pc}
 80090de:	bf00      	nop
 80090e0:	080240e4 	.word	0x080240e4

080090e4 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 80090e4:	b590      	push	{r4, r7, lr}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 80090ec:	22ab      	movs	r2, #171	; 0xab
 80090ee:	4906      	ldr	r1, [pc, #24]	; (8009108 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 80090f0:	2010      	movs	r0, #16
 80090f2:	f001 f9b9 	bl	800a468 <_ZnwjPKci>
 80090f6:	4604      	mov	r4, r0
 80090f8:	4620      	mov	r0, r4
 80090fa:	f7ff fcb3 	bl	8008a64 <_ZN17ConsoleTestOutputC1Ev>
 80090fe:	4623      	mov	r3, r4
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	bd90      	pop	{r4, r7, pc}
 8009108:	080240e4 	.word	0x080240e4

0800910c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800910c:	b590      	push	{r4, r7, lr}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8009118:	22b0      	movs	r2, #176	; 0xb0
 800911a:	490e      	ldr	r1, [pc, #56]	; (8009154 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 800911c:	2018      	movs	r0, #24
 800911e:	f001 f9a3 	bl	800a468 <_ZnwjPKci>
 8009122:	4604      	mov	r4, r0
 8009124:	4620      	mov	r0, r4
 8009126:	f007 ff83 	bl	8011030 <_ZN19CompositeTestOutputC1Ev>
 800912a:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	335c      	adds	r3, #92	; 0x5c
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68b9      	ldr	r1, [r7, #8]
 8009136:	6978      	ldr	r0, [r7, #20]
 8009138:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3360      	adds	r3, #96	; 0x60
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	6978      	ldr	r0, [r7, #20]
 8009146:	4798      	blx	r3
  return composite;
 8009148:	697b      	ldr	r3, [r7, #20]
}
 800914a:	4618      	mov	r0, r3
 800914c:	371c      	adds	r7, #28
 800914e:	46bd      	mov	sp, r7
 8009150:	bd90      	pop	{r4, r7, pc}
 8009152:	bf00      	nop
 8009154:	080240e4 	.word	0x080240e4

08009158 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8009158:	b5b0      	push	{r4, r5, r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	4618      	mov	r0, r3
 800916a:	f00b fe4f 	bl	8014e0c <_ZN20CommandLineArguments5parseEP10TestPlugin>
 800916e:	4603      	mov	r3, r0
 8009170:	f083 0301 	eor.w	r3, r3, #1
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d029      	beq.n	80091ce <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3310      	adds	r3, #16
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
 8009186:	4602      	mov	r2, r0
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685d      	ldr	r5, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	332c      	adds	r3, #44	; 0x2c
 8009198:	681c      	ldr	r4, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	4618      	mov	r0, r3
 80091a0:	f00c fa10 	bl	80155c4 <_ZNK20CommandLineArguments8needHelpEv>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d006      	beq.n	80091b8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f00c f9fa 	bl	80155a8 <_ZNK20CommandLineArguments4helpEv>
 80091b4:	4603      	mov	r3, r0
 80091b6:	e005      	b.n	80091c4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	4618      	mov	r0, r3
 80091be:	f00c f9e5 	bl	801558c <_ZNK20CommandLineArguments5usageEv>
 80091c2:	4603      	mov	r3, r0
 80091c4:	4619      	mov	r1, r3
 80091c6:	4628      	mov	r0, r5
 80091c8:	47a0      	blx	r4
    return false;
 80091ca:	2300      	movs	r3, #0
 80091cc:	e050      	b.n	8009270 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f00d f84c 	bl	8016270 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d02c      	beq.n	8009238 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	330c      	adds	r3, #12
 80091e4:	681c      	ldr	r4, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f00d f864 	bl	80162b8 <_ZNK20CommandLineArguments14getPackageNameEv>
 80091f0:	4603      	mov	r3, r0
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	47a0      	blx	r4
 80091f8:	4602      	mov	r2, r0
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	4618      	mov	r0, r3
 8009204:	f00c f9ea 	bl	80155dc <_ZNK20CommandLineArguments9isVerboseEv>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d02f      	beq.n	800926e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3314      	adds	r3, #20
 8009214:	681c      	ldr	r4, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685d      	ldr	r5, [r3, #4]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3310      	adds	r3, #16
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	4798      	blx	r3
 8009226:	4603      	mov	r3, r0
 8009228:	461a      	mov	r2, r3
 800922a:	4629      	mov	r1, r5
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	47a0      	blx	r4
 8009230:	4602      	mov	r2, r0
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	605a      	str	r2, [r3, #4]
 8009236:	e01a      	b.n	800926e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	4618      	mov	r0, r3
 800923e:	f00d f829 	bl	8016294 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d009      	beq.n	800925c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3308      	adds	r3, #8
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	4798      	blx	r3
 8009254:	4602      	mov	r2, r0
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	605a      	str	r2, [r3, #4]
 800925a:	e008      	b.n	800926e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3310      	adds	r3, #16
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	4798      	blx	r3
 8009268:	4602      	mov	r2, r0
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	605a      	str	r2, [r3, #4]
  return true;
 800926e:	2301      	movs	r3, #1
}
 8009270:	4618      	mov	r0, r3
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bdb0      	pop	{r4, r5, r7, pc}

08009278 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	4a05      	ldr	r2, [pc, #20]	; (8009298 <_ZN16SetPointerPluginD1Ev+0x20>)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4618      	mov	r0, r3
 800928a:	f008 f9e7 	bl	801165c <_ZN10TestPluginD1Ev>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	08028898 	.word	0x08028898

0800929c <_ZN16SetPointerPluginD0Ev>:
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff ffe7 	bl	8009278 <_ZN16SetPointerPluginD1Ev>
 80092aa:	2114      	movs	r1, #20
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 f8ef 	bl	800a490 <_ZdlPvj>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
        return checkCount_;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	691b      	ldr	r3, [r3, #16]
    }
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4910      	ldr	r1, [pc, #64]	; (8009320 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80092e0:	4618      	mov	r0, r3
 80092e2:	f003 fc84 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	609a      	str	r2, [r3, #8]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	60da      	str	r2, [r3, #12]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	741a      	strb	r2, [r3, #16]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3314      	adds	r3, #20
 80092fc:	4908      	ldr	r1, [pc, #32]	; (8009320 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80092fe:	4618      	mov	r0, r3
 8009300:	f003 fc75 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	61da      	str	r2, [r3, #28]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	621a      	str	r2, [r3, #32]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4618      	mov	r0, r3
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	0802414c 	.word	0x0802414c

08009324 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	605a      	str	r2, [r3, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	609a      	str	r2, [r3, #8]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	60da      	str	r2, [r3, #12]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	611a      	str	r2, [r3, #16]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3314      	adds	r3, #20
 800934e:	4907      	ldr	r1, [pc, #28]	; (800936c <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8009350:	4618      	mov	r0, r3
 8009352:	f003 fc4c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	61da      	str	r2, [r3, #28]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	621a      	str	r2, [r3, #32]
    {
    }
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	0802414c 	.word	0x0802414c

08009370 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3314      	adds	r3, #20
 800937c:	4618      	mov	r0, r3
 800937e:	f003 ffee 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff ffc4 	bl	8009324 <_ZN20JUnitTestGroupResultC1Ev>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3328      	adds	r3, #40	; 0x28
 80093a0:	4907      	ldr	r1, [pc, #28]	; (80093c0 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80093a2:	4618      	mov	r0, r3
 80093a4:	f003 fc23 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3330      	adds	r3, #48	; 0x30
 80093ac:	4904      	ldr	r1, [pc, #16]	; (80093c0 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80093ae:	4618      	mov	r0, r3
 80093b0:	f003 fc1d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	0802414c 	.word	0x0802414c

080093c4 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 80093c4:	b590      	push	{r4, r7, lr}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f007 f936 	bl	8010640 <_ZN10TestOutputC1Ev>
 80093d4:	4a09      	ldr	r2, [pc, #36]	; (80093fc <_ZN15JUnitTestOutputC1Ev+0x38>)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	224d      	movs	r2, #77	; 0x4d
 80093dc:	4908      	ldr	r1, [pc, #32]	; (8009400 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 80093de:	2038      	movs	r0, #56	; 0x38
 80093e0:	f001 f842 	bl	800a468 <_ZnwjPKci>
 80093e4:	4604      	mov	r4, r0
 80093e6:	4620      	mov	r0, r4
 80093e8:	f7ff ffd0 	bl	800938c <_ZN19JUnitTestOutputImplC1Ev>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	611c      	str	r4, [r3, #16]
{
}
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd90      	pop	{r4, r7, pc}
 80093fa:	bf00      	nop
 80093fc:	08028138 	.word	0x08028138
 8009400:	08024150 	.word	0x08024150

08009404 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3330      	adds	r3, #48	; 0x30
 8009410:	4618      	mov	r0, r3
 8009412:	f003 ffa4 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3328      	adds	r3, #40	; 0x28
 800941a:	4618      	mov	r0, r3
 800941c:	f003 ff9f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff ffa4 	bl	8009370 <_ZN20JUnitTestGroupResultD1Ev>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
	...

08009434 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8009434:	b590      	push	{r4, r7, lr}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	4a0c      	ldr	r2, [pc, #48]	; (8009470 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f838 	bl	80094b8 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691c      	ldr	r4, [r3, #16]
 800944c:	2c00      	cmp	r4, #0
 800944e:	d006      	beq.n	800945e <_ZN15JUnitTestOutputD1Ev+0x2a>
 8009450:	4620      	mov	r0, r4
 8009452:	f7ff ffd7 	bl	8009404 <_ZN19JUnitTestOutputImplD1Ev>
 8009456:	2138      	movs	r1, #56	; 0x38
 8009458:	4620      	mov	r0, r4
 800945a:	f001 f819 	bl	800a490 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4618      	mov	r0, r3
 8009462:	f007 f90b 	bl	801067c <_ZN10TestOutputD1Ev>
}
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	bd90      	pop	{r4, r7, pc}
 8009470:	08028138 	.word	0x08028138

08009474 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
}
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff ffd9 	bl	8009434 <_ZN15JUnitTestOutputD1Ev>
 8009482:	2114      	movs	r1, #20
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 f803 	bl	800a490 <_ZdlPvj>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3314      	adds	r3, #20
 80094a0:	4618      	mov	r0, r3
 80094a2:	f003 ff5c 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f003 ff58 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 80094b8:	b590      	push	{r4, r7, lr}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	2200      	movs	r2, #0
 80094ce:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	f103 0414 	add.w	r4, r3, #20
 80094d8:	f107 0308 	add.w	r3, r7, #8
 80094dc:	491d      	ldr	r1, [pc, #116]	; (8009554 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 80094de:	4618      	mov	r0, r3
 80094e0:	f003 fb85 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80094e4:	f107 0308 	add.w	r3, r7, #8
 80094e8:	4619      	mov	r1, r3
 80094ea:	4620      	mov	r0, r4
 80094ec:	f003 fbeb 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 80094f0:	f107 0308 	add.w	r3, r7, #8
 80094f4:	4618      	mov	r0, r3
 80094f6:	f003 ff32 	bl	800d35e <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	617b      	str	r3, [r7, #20]
    while (cur) {
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d018      	beq.n	800953a <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d004      	beq.n	8009520 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	3204      	adds	r2, #4
 800951a:	6812      	ldr	r2, [r2, #0]
 800951c:	4618      	mov	r0, r3
 800951e:	4790      	blx	r2
        delete cur;
 8009520:	697c      	ldr	r4, [r7, #20]
 8009522:	2c00      	cmp	r4, #0
 8009524:	d006      	beq.n	8009534 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8009526:	4620      	mov	r0, r4
 8009528:	f7ff ffb4 	bl	8009494 <_ZN23JUnitTestCaseResultNodeD1Ev>
 800952c:	2128      	movs	r1, #40	; 0x28
 800952e:	4620      	mov	r0, r4
 8009530:	f000 ffae 	bl	800a490 <_ZdlPvj>
        cur = tmp;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	617b      	str	r3, [r7, #20]
    while (cur) {
 8009538:	e7e3      	b.n	8009502 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	2200      	movs	r2, #0
 8009540:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	2200      	movs	r2, #0
 8009548:	621a      	str	r2, [r3, #32]
}
 800954a:	bf00      	nop
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	bd90      	pop	{r4, r7, pc}
 8009552:	bf00      	nop
 8009554:	0802414c 	.word	0x0802414c

08009558 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8009582:	b590      	push	{r4, r7, lr}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	6a1c      	ldr	r4, [r3, #32]
 8009592:	6838      	ldr	r0, [r7, #0]
 8009594:	f009 f9c6 	bl	8012924 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8009598:	4603      	mov	r3, r0
 800959a:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	6a1c      	ldr	r4, [r3, #32]
 80095a2:	6838      	ldr	r0, [r7, #0]
 80095a4:	f7ff fe8a 	bl	80092bc <_ZNK10TestResult13getCheckCountEv>
 80095a8:	4603      	mov	r3, r0
 80095aa:	6223      	str	r3, [r4, #32]
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd90      	pop	{r4, r7, pc}

080095b4 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 80095ca:	b590      	push	{r4, r7, lr}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	691c      	ldr	r4, [r3, #16]
 80095d8:	6838      	ldr	r0, [r7, #0]
 80095da:	f009 f9af 	bl	801293c <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 80095de:	4603      	mov	r3, r0
 80095e0:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3364      	adds	r3, #100	; 0x64
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	4798      	blx	r3
    resetTestGroupResult();
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff ff62 	bl	80094b8 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd90      	pop	{r4, r7, pc}

080095fc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80095fc:	b590      	push	{r4, r7, lr}
 80095fe:	b089      	sub	sp, #36	; 0x24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	3201      	adds	r2, #1
 800960e:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	f103 0414 	add.w	r4, r3, #20
 8009618:	f107 0308 	add.w	r3, r7, #8
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	4618      	mov	r0, r3
 8009620:	f009 fcef 	bl	8013002 <_ZNK10UtestShell8getGroupEv>
 8009624:	f107 0308 	add.w	r3, r7, #8
 8009628:	4619      	mov	r1, r3
 800962a:	4620      	mov	r0, r4
 800962c:	f003 fb4b 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 8009630:	f107 0308 	add.w	r3, r7, #8
 8009634:	4618      	mov	r0, r3
 8009636:	f003 fe92 	bl	800d35e <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800963a:	4b3c      	ldr	r3, [pc, #240]	; (800972c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4798      	blx	r3
 8009640:	4602      	mov	r2, r0
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d110      	bne.n	8009674 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8009652:	2288      	movs	r2, #136	; 0x88
 8009654:	4936      	ldr	r1, [pc, #216]	; (8009730 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8009656:	2028      	movs	r0, #40	; 0x28
 8009658:	f000 ff06 	bl	800a468 <_ZnwjPKci>
 800965c:	4604      	mov	r4, r0
 800965e:	4620      	mov	r0, r4
 8009660:	f7ff fe38 	bl	80092d4 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8009668:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	6912      	ldr	r2, [r2, #16]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	61d3      	str	r3, [r2, #28]
 8009672:	e013      	b.n	800969c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8009674:	228b      	movs	r2, #139	; 0x8b
 8009676:	492e      	ldr	r1, [pc, #184]	; (8009730 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8009678:	2028      	movs	r0, #40	; 0x28
 800967a:	f000 fef5 	bl	800a468 <_ZnwjPKci>
 800967e:	4604      	mov	r4, r0
 8009680:	4620      	mov	r0, r4
 8009682:	f7ff fe27 	bl	80092d4 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	6a1a      	ldr	r2, [r3, #32]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800969a:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	461c      	mov	r4, r3
 80096a4:	f107 0310 	add.w	r3, r7, #16
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f009 fc9a 	bl	8012fe4 <_ZNK10UtestShell7getNameEv>
 80096b0:	f107 0310 	add.w	r3, r7, #16
 80096b4:	4619      	mov	r1, r3
 80096b6:	4620      	mov	r0, r4
 80096b8:	f003 fb05 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 80096bc:	f107 0310 	add.w	r3, r7, #16
 80096c0:	4618      	mov	r0, r3
 80096c2:	f003 fe4c 	bl	800d35e <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	f103 0414 	add.w	r4, r3, #20
 80096d0:	f107 0318 	add.w	r3, r7, #24
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f009 fd55 	bl	8013186 <_ZNK10UtestShell7getFileEv>
 80096dc:	f107 0318 	add.w	r3, r7, #24
 80096e0:	4619      	mov	r1, r3
 80096e2:	4620      	mov	r0, r4
 80096e4:	f003 faef 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 80096e8:	f107 0318 	add.w	r3, r7, #24
 80096ec:	4618      	mov	r0, r3
 80096ee:	f003 fe36 	bl	800d35e <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	6a1c      	ldr	r4, [r3, #32]
 80096f8:	6838      	ldr	r0, [r7, #0]
 80096fa:	f009 fd53 	bl	80131a4 <_ZNK10UtestShell13getLineNumberEv>
 80096fe:	4603      	mov	r3, r0
 8009700:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3318      	adds	r3, #24
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6838      	ldr	r0, [r7, #0]
 800970c:	4798      	blx	r3
 800970e:	4603      	mov	r3, r0
 8009710:	f083 0301 	eor.w	r3, r3, #1
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	2201      	movs	r2, #1
 8009722:	741a      	strb	r2, [r3, #16]
    }
}
 8009724:	bf00      	nop
 8009726:	3724      	adds	r7, #36	; 0x24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd90      	pop	{r4, r7, pc}
 800972c:	200000a8 	.word	0x200000a8
 8009730:	08024150 	.word	0x08024150

08009734 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08a      	sub	sp, #40	; 0x28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8009740:	f107 0310 	add.w	r3, r7, #16
 8009744:	4928      	ldr	r1, [pc, #160]	; (80097e8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8009746:	4618      	mov	r0, r3
 8009748:	f003 fa51 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	3328      	adds	r3, #40	; 0x28
 8009752:	4618      	mov	r0, r3
 8009754:	f003 fdf2 	bl	800d33c <_ZNK12SimpleString7isEmptyEv>
 8009758:	4603      	mov	r3, r0
 800975a:	f083 0301 	eor.w	r3, r3, #1
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00f      	beq.n	8009784 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800976c:	f107 0310 	add.w	r3, r7, #16
 8009770:	4611      	mov	r1, r2
 8009772:	4618      	mov	r0, r3
 8009774:	f003 fe70 	bl	800d458 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8009778:	f107 0310 	add.w	r3, r7, #16
 800977c:	491b      	ldr	r1, [pc, #108]	; (80097ec <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800977e:	4618      	mov	r0, r3
 8009780:	f003 fe7c 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8009784:	f107 0310 	add.w	r3, r7, #16
 8009788:	6879      	ldr	r1, [r7, #4]
 800978a:	4618      	mov	r0, r3
 800978c:	f003 fe64 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3384      	adds	r3, #132	; 0x84
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f107 0018 	add.w	r0, r7, #24
 800979c:	f107 0210 	add.w	r2, r7, #16
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	4798      	blx	r3
 80097a4:	f107 0320 	add.w	r3, r7, #32
 80097a8:	4911      	ldr	r1, [pc, #68]	; (80097f0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 80097aa:	4618      	mov	r0, r3
 80097ac:	f003 fa1f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f107 0220 	add.w	r2, r7, #32
 80097b6:	f107 0118 	add.w	r1, r7, #24
 80097ba:	4618      	mov	r0, r3
 80097bc:	f003 fe31 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 80097c0:	f107 0320 	add.w	r3, r7, #32
 80097c4:	4618      	mov	r0, r3
 80097c6:	f003 fdca 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80097ca:	f107 0318 	add.w	r3, r7, #24
 80097ce:	4618      	mov	r0, r3
 80097d0:	f003 fdc5 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 80097d4:	f107 0310 	add.w	r3, r7, #16
 80097d8:	4618      	mov	r0, r3
 80097da:	f003 fdc0 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 80097de:	bf00      	nop
}
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	3728      	adds	r7, #40	; 0x28
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	0802416c 	.word	0x0802416c
 80097ec:	08024178 	.word	0x08024178
 80097f0:	0802417c 	.word	0x0802417c

080097f4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f003 fa47 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8009808:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800980a:	617b      	str	r3, [r7, #20]
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00a      	beq.n	800982a <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	225f      	movs	r2, #95	; 0x5f
 800981a:	4619      	mov	r1, r3
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f003 fbcc 	bl	800cfba <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	3301      	adds	r3, #1
 8009826:	617b      	str	r3, [r7, #20]
 8009828:	e7f0      	b.n	800980c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 800982a:	bf00      	nop
}
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	08024184 	.word	0x08024184

08009838 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d006      	beq.n	8009858 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	3328      	adds	r3, #40	; 0x28
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	4618      	mov	r0, r3
 8009854:	f003 fa37 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
    }
}
 8009858:	bf00      	nop
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8009860:	b590      	push	{r4, r7, lr}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3368      	adds	r3, #104	; 0x68
 800986e:	681c      	ldr	r4, [r3, #0]
 8009870:	f107 0308 	add.w	r3, r7, #8
 8009874:	4908      	ldr	r1, [pc, #32]	; (8009898 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8009876:	4618      	mov	r0, r3
 8009878:	f003 f9b9 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800987c:	f107 0308 	add.w	r3, r7, #8
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	47a0      	blx	r4
 8009886:	f107 0308 	add.w	r3, r7, #8
 800988a:	4618      	mov	r0, r3
 800988c:	f003 fd67 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8009890:	bf00      	nop
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	bd90      	pop	{r4, r7, pc}
 8009898:	08024190 	.word	0x08024190

0800989c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 800989c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a0:	b08a      	sub	sp, #40	; 0x28
 80098a2:	af04      	add	r7, sp, #16
 80098a4:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 80098ac:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 80098b2:	3314      	adds	r3, #20
 80098b4:	4618      	mov	r0, r3
 80098b6:	f003 fd25 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 80098ba:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 80098c2:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	4a23      	ldr	r2, [pc, #140]	; (8009958 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 80098cc:	fba2 2303 	umull	r2, r3, r2, r3
 80098d0:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 80098d2:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	691a      	ldr	r2, [r3, #16]
 80098da:	4b1f      	ldr	r3, [pc, #124]	; (8009958 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 80098dc:	fba3 1302 	umull	r1, r3, r3, r2
 80098e0:	099b      	lsrs	r3, r3, #6
 80098e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80098e6:	fb01 f303 	mul.w	r3, r1, r3
 80098ea:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 80098ec:	603b      	str	r3, [r7, #0]
 80098ee:	4b1b      	ldr	r3, [pc, #108]	; (800995c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4798      	blx	r3
 80098f4:	4603      	mov	r3, r0
 80098f6:	f107 0008 	add.w	r0, r7, #8
 80098fa:	9303      	str	r3, [sp, #12]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	9302      	str	r3, [sp, #8]
 8009900:	9601      	str	r6, [sp, #4]
 8009902:	9500      	str	r5, [sp, #0]
 8009904:	4623      	mov	r3, r4
 8009906:	4642      	mov	r2, r8
 8009908:	4915      	ldr	r1, [pc, #84]	; (8009960 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 800990a:	f004 fa2f 	bl	800dd6c <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3368      	adds	r3, #104	; 0x68
 8009914:	681c      	ldr	r4, [r3, #0]
 8009916:	f107 0308 	add.w	r3, r7, #8
 800991a:	4618      	mov	r0, r3
 800991c:	f003 fcf2 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009920:	4602      	mov	r2, r0
 8009922:	f107 0310 	add.w	r3, r7, #16
 8009926:	4611      	mov	r1, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f003 f960 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800992e:	f107 0310 	add.w	r3, r7, #16
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	47a0      	blx	r4
 8009938:	f107 0310 	add.w	r3, r7, #16
 800993c:	4618      	mov	r0, r3
 800993e:	f003 fd0e 	bl	800d35e <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8009942:	f107 0308 	add.w	r3, r7, #8
 8009946:	4618      	mov	r0, r3
 8009948:	f003 fd09 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800994c:	bf00      	nop
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009956:	bf00      	nop
 8009958:	10624dd3 	.word	0x10624dd3
 800995c:	200000ac 	.word	0x200000ac
 8009960:	080241bc 	.word	0x080241bc

08009964 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3368      	adds	r3, #104	; 0x68
 8009972:	681c      	ldr	r4, [r3, #0]
 8009974:	f107 0308 	add.w	r3, r7, #8
 8009978:	4912      	ldr	r1, [pc, #72]	; (80099c4 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800997a:	4618      	mov	r0, r3
 800997c:	f003 f937 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009980:	f107 0308 	add.w	r3, r7, #8
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	47a0      	blx	r4
 800998a:	f107 0308 	add.w	r3, r7, #8
 800998e:	4618      	mov	r0, r3
 8009990:	f003 fce5 	bl	800d35e <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3368      	adds	r3, #104	; 0x68
 800999a:	681c      	ldr	r4, [r3, #0]
 800999c:	f107 0310 	add.w	r3, r7, #16
 80099a0:	4909      	ldr	r1, [pc, #36]	; (80099c8 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 80099a2:	4618      	mov	r0, r3
 80099a4:	f003 f923 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80099a8:	f107 0310 	add.w	r3, r7, #16
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	47a0      	blx	r4
 80099b2:	f107 0310 	add.w	r3, r7, #16
 80099b6:	4618      	mov	r0, r3
 80099b8:	f003 fcd1 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 80099bc:	bf00      	nop
 80099be:	371c      	adds	r7, #28
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd90      	pop	{r4, r7, pc}
 80099c4:	0802422c 	.word	0x0802422c
 80099c8:	0802423c 	.word	0x0802423c

080099cc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f003 fc93 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 80099de:	4603      	mov	r3, r0
 80099e0:	4619      	mov	r1, r3
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f003 f903 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 80099e8:	4a0e      	ldr	r2, [pc, #56]	; (8009a24 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 80099ea:	490f      	ldr	r1, [pc, #60]	; (8009a28 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f003 fb13 	bl	800d018 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 80099f2:	4a0e      	ldr	r2, [pc, #56]	; (8009a2c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 80099f4:	490e      	ldr	r1, [pc, #56]	; (8009a30 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f003 fb0e 	bl	800d018 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 80099fc:	4a0d      	ldr	r2, [pc, #52]	; (8009a34 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 80099fe:	490e      	ldr	r1, [pc, #56]	; (8009a38 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f003 fb09 	bl	800d018 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8009a06:	4a0d      	ldr	r2, [pc, #52]	; (8009a3c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8009a08:	490d      	ldr	r1, [pc, #52]	; (8009a40 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f003 fb04 	bl	800d018 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8009a10:	4a0c      	ldr	r2, [pc, #48]	; (8009a44 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8009a12:	490d      	ldr	r1, [pc, #52]	; (8009a48 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f003 faff 	bl	800d018 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8009a1a:	bf00      	nop
}
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	0802424c 	.word	0x0802424c
 8009a28:	08024254 	.word	0x08024254
 8009a2c:	08024258 	.word	0x08024258
 8009a30:	08024260 	.word	0x08024260
 8009a34:	08024264 	.word	0x08024264
 8009a38:	0802426c 	.word	0x0802426c
 8009a3c:	08024270 	.word	0x08024270
 8009a40:	08024278 	.word	0x08024278
 8009a44:	0802427c 	.word	0x0802427c
 8009a48:	08024288 	.word	0x08024288

08009a4c <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8009a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a50:	b096      	sub	sp, #88	; 0x58
 8009a52:	af08      	add	r7, sp, #32
 8009a54:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8009a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 80b2 	beq.w	8009bca <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8009a6a:	3328      	adds	r3, #40	; 0x28
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f003 fc49 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009a72:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	3328      	adds	r3, #40	; 0x28
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f003 fc5e 	bl	800d33c <_ZNK12SimpleString7isEmptyEv>
 8009a80:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8009a86:	4c53      	ldr	r4, [pc, #332]	; (8009bd4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8009a88:	e000      	b.n	8009a8c <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8009a8a:	4c53      	ldr	r4, [pc, #332]	; (8009bd8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8009a90:	3314      	adds	r3, #20
 8009a92:	4618      	mov	r0, r3
 8009a94:	f003 fc36 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009a98:	4605      	mov	r5, r0
 8009a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f003 fc31 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009aa2:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8009aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa6:	6a1a      	ldr	r2, [r3, #32]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009ab0:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	4a49      	ldr	r2, [pc, #292]	; (8009bdc <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8009ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8009abc:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8009abe:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac2:	689a      	ldr	r2, [r3, #8]
 8009ac4:	4b45      	ldr	r3, [pc, #276]	; (8009bdc <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8009ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8009aca:	099b      	lsrs	r3, r3, #6
 8009acc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009ad0:	fb01 f303 	mul.w	r3, r1, r3
 8009ad4:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009ad6:	603b      	str	r3, [r7, #0]
 8009ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ada:	3314      	adds	r3, #20
 8009adc:	4618      	mov	r0, r3
 8009ade:	f003 fc11 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae6:	69db      	ldr	r3, [r3, #28]
 8009ae8:	f107 0014 	add.w	r0, r7, #20
 8009aec:	9306      	str	r3, [sp, #24]
 8009aee:	9205      	str	r2, [sp, #20]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	9204      	str	r2, [sp, #16]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	9203      	str	r2, [sp, #12]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	9302      	str	r3, [sp, #8]
 8009afc:	9601      	str	r6, [sp, #4]
 8009afe:	9500      	str	r5, [sp, #0]
 8009b00:	4623      	mov	r3, r4
 8009b02:	4642      	mov	r2, r8
 8009b04:	4936      	ldr	r1, [pc, #216]	; (8009be0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8009b06:	f004 f931 	bl	800dd6c <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3368      	adds	r3, #104	; 0x68
 8009b10:	681c      	ldr	r4, [r3, #0]
 8009b12:	f107 0314 	add.w	r3, r7, #20
 8009b16:	4618      	mov	r0, r3
 8009b18:	f003 fbf4 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	f107 031c 	add.w	r3, r7, #28
 8009b22:	4611      	mov	r1, r2
 8009b24:	4618      	mov	r0, r3
 8009b26:	f003 f862 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009b2a:	f107 031c 	add.w	r3, r7, #28
 8009b2e:	4619      	mov	r1, r3
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	47a0      	blx	r4
 8009b34:	f107 031c 	add.w	r3, r7, #28
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f003 fc10 	bl	800d35e <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b44:	6a12      	ldr	r2, [r2, #32]
 8009b46:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8009b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d007      	beq.n	8009b60 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3388      	adds	r3, #136	; 0x88
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	4798      	blx	r3
 8009b5e:	e017      	b.n	8009b90 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8009b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b62:	7c1b      	ldrb	r3, [r3, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d013      	beq.n	8009b90 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3368      	adds	r3, #104	; 0x68
 8009b6e:	681c      	ldr	r4, [r3, #0]
 8009b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b74:	491b      	ldr	r1, [pc, #108]	; (8009be4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8009b76:	4618      	mov	r0, r3
 8009b78:	f003 f839 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b80:	4619      	mov	r1, r3
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	47a0      	blx	r4
 8009b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f003 fbe7 	bl	800d35e <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3368      	adds	r3, #104	; 0x68
 8009b96:	681c      	ldr	r4, [r3, #0]
 8009b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b9c:	4912      	ldr	r1, [pc, #72]	; (8009be8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f003 f825 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ba8:	4619      	mov	r1, r3
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	47a0      	blx	r4
 8009bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f003 fbd3 	bl	800d35e <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8009bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8009bbe:	f107 0314 	add.w	r3, r7, #20
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f003 fbcb 	bl	800d35e <_ZN12SimpleStringD1Ev>
    while (cur) {
 8009bc8:	e749      	b.n	8009a5e <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8009bca:	bf00      	nop
 8009bcc:	3738      	adds	r7, #56	; 0x38
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd4:	0802414c 	.word	0x0802414c
 8009bd8:	0802428c 	.word	0x0802428c
 8009bdc:	10624dd3 	.word	0x10624dd3
 8009be0:	08024290 	.word	0x08024290
 8009be4:	080242ec 	.word	0x080242ec
 8009be8:	080242fc 	.word	0x080242fc

08009bec <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8009bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bee:	b091      	sub	sp, #68	; 0x44
 8009bf0:	af02      	add	r7, sp, #8
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	68d9      	ldr	r1, [r3, #12]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3308      	adds	r3, #8
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f107 0210 	add.w	r2, r7, #16
 8009c08:	4610      	mov	r0, r2
 8009c0a:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009c0c:	f107 0310 	add.w	r3, r7, #16
 8009c10:	4618      	mov	r0, r3
 8009c12:	f003 fb77 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009c16:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	3314      	adds	r3, #20
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4610      	mov	r0, r2
 8009c28:	4798      	blx	r3
 8009c2a:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009c2c:	461e      	mov	r6, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3380      	adds	r3, #128	; 0x80
 8009c34:	681c      	ldr	r4, [r3, #0]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	68d9      	ldr	r1, [r3, #12]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3318      	adds	r3, #24
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f107 0220 	add.w	r2, r7, #32
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
 8009c4c:	f107 0318 	add.w	r3, r7, #24
 8009c50:	f107 0220 	add.w	r2, r7, #32
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	4618      	mov	r0, r3
 8009c58:	47a0      	blx	r4
 8009c5a:	f107 0318 	add.w	r3, r7, #24
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f003 fb50 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f107 0008 	add.w	r0, r7, #8
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	4633      	mov	r3, r6
 8009c6e:	462a      	mov	r2, r5
 8009c70:	4924      	ldr	r1, [pc, #144]	; (8009d04 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8009c72:	f004 f87b 	bl	800dd6c <_Z16StringFromFormatPKcz>
 8009c76:	f107 0318 	add.w	r3, r7, #24
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f003 fb6f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8009c80:	f107 0320 	add.w	r3, r7, #32
 8009c84:	4618      	mov	r0, r3
 8009c86:	f003 fb6a 	bl	800d35e <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8009c8a:	f107 0310 	add.w	r3, r7, #16
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f003 fb65 	bl	800d35e <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3368      	adds	r3, #104	; 0x68
 8009c9a:	681c      	ldr	r4, [r3, #0]
 8009c9c:	f107 0308 	add.w	r3, r7, #8
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f003 fb2f 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009cac:	4611      	mov	r1, r2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f002 ff9d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	47a0      	blx	r4
 8009cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f003 fb4b 	bl	800d35e <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3368      	adds	r3, #104	; 0x68
 8009cce:	681c      	ldr	r4, [r3, #0]
 8009cd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cd4:	490c      	ldr	r1, [pc, #48]	; (8009d08 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f002 ff89 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009cdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	47a0      	blx	r4
 8009ce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cea:	4618      	mov	r0, r3
 8009cec:	f003 fb37 	bl	800d35e <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009cf0:	f107 0308 	add.w	r3, r7, #8
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f003 fb32 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8009cfa:	bf00      	nop
 8009cfc:	373c      	adds	r7, #60	; 0x3c
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d02:	bf00      	nop
 8009d04:	0802430c 	.word	0x0802430c
 8009d08:	08024348 	.word	0x08024348

08009d0c <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8009d0c:	b590      	push	{r4, r7, lr}
 8009d0e:	b08d      	sub	sp, #52	; 0x34
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3368      	adds	r3, #104	; 0x68
 8009d1a:	681c      	ldr	r4, [r3, #0]
 8009d1c:	f107 0308 	add.w	r3, r7, #8
 8009d20:	4933      	ldr	r1, [pc, #204]	; (8009df0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8009d22:	4618      	mov	r0, r3
 8009d24:	f002 ff63 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009d28:	f107 0308 	add.w	r3, r7, #8
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	47a0      	blx	r4
 8009d32:	f107 0308 	add.w	r3, r7, #8
 8009d36:	4618      	mov	r0, r3
 8009d38:	f003 fb11 	bl	800d35e <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3368      	adds	r3, #104	; 0x68
 8009d42:	681c      	ldr	r4, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3380      	adds	r3, #128	; 0x80
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	6912      	ldr	r2, [r2, #16]
 8009d50:	3230      	adds	r2, #48	; 0x30
 8009d52:	f107 0010 	add.w	r0, r7, #16
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	4798      	blx	r3
 8009d5a:	f107 0310 	add.w	r3, r7, #16
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	47a0      	blx	r4
 8009d64:	f107 0310 	add.w	r3, r7, #16
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f003 faf8 	bl	800d35e <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3368      	adds	r3, #104	; 0x68
 8009d74:	681c      	ldr	r4, [r3, #0]
 8009d76:	f107 0318 	add.w	r3, r7, #24
 8009d7a:	491e      	ldr	r1, [pc, #120]	; (8009df4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f002 ff36 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009d82:	f107 0318 	add.w	r3, r7, #24
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	47a0      	blx	r4
 8009d8c:	f107 0318 	add.w	r3, r7, #24
 8009d90:	4618      	mov	r0, r3
 8009d92:	f003 fae4 	bl	800d35e <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3368      	adds	r3, #104	; 0x68
 8009d9c:	681c      	ldr	r4, [r3, #0]
 8009d9e:	f107 0320 	add.w	r3, r7, #32
 8009da2:	4915      	ldr	r1, [pc, #84]	; (8009df8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8009da4:	4618      	mov	r0, r3
 8009da6:	f002 ff22 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009daa:	f107 0320 	add.w	r3, r7, #32
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	47a0      	blx	r4
 8009db4:	f107 0320 	add.w	r3, r7, #32
 8009db8:	4618      	mov	r0, r3
 8009dba:	f003 fad0 	bl	800d35e <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3368      	adds	r3, #104	; 0x68
 8009dc4:	681c      	ldr	r4, [r3, #0]
 8009dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dca:	490c      	ldr	r1, [pc, #48]	; (8009dfc <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f002 ff0e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8009dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	47a0      	blx	r4
 8009ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009de0:	4618      	mov	r0, r3
 8009de2:	f003 fabc 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8009de6:	bf00      	nop
 8009de8:	3734      	adds	r7, #52	; 0x34
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd90      	pop	{r4, r7, pc}
 8009dee:	bf00      	nop
 8009df0:	08024354 	.word	0x08024354
 8009df4:	08024364 	.word	0x08024364
 8009df8:	08024374 	.word	0x08024374
 8009dfc:	08024390 	.word	0x08024390

08009e00 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8009e00:	b590      	push	{r4, r7, lr}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3360      	adds	r3, #96	; 0x60
 8009e0e:	681c      	ldr	r4, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	335c      	adds	r3, #92	; 0x5c
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	6912      	ldr	r2, [r2, #16]
 8009e1c:	3214      	adds	r2, #20
 8009e1e:	f107 0008 	add.w	r0, r7, #8
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	4798      	blx	r3
 8009e26:	f107 0308 	add.w	r3, r7, #8
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	47a0      	blx	r4
 8009e30:	f107 0308 	add.w	r3, r7, #8
 8009e34:	4618      	mov	r0, r3
 8009e36:	f003 fa92 	bl	800d35e <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3370      	adds	r3, #112	; 0x70
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	4798      	blx	r3
    writeTestSuiteSummary();
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3374      	adds	r3, #116	; 0x74
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	4798      	blx	r3
    writeProperties();
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3378      	adds	r3, #120	; 0x78
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	4798      	blx	r3
    writeTestCases();
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	337c      	adds	r3, #124	; 0x7c
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	4798      	blx	r3
    writeFileEnding();
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	338c      	adds	r3, #140	; 0x8c
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	4798      	blx	r3
    closeFile();
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	336c      	adds	r3, #108	; 0x6c
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	4798      	blx	r3
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd90      	pop	{r4, r7, pc}

08009e8a <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	6039      	str	r1, [r7, #0]
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	3330      	adds	r3, #48	; 0x30
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f003 fae2 	bl	800d47c <_ZN12SimpleStringpLEPKc>
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
}
 8009eca:	bf00      	nop
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8009f00:	b590      	push	{r4, r7, lr}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d113      	bne.n	8009f3e <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	3201      	adds	r2, #1
 8009f1e:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8009f20:	f240 1233 	movw	r2, #307	; 0x133
 8009f24:	4908      	ldr	r1, [pc, #32]	; (8009f48 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8009f26:	2034      	movs	r0, #52	; 0x34
 8009f28:	f000 fa9e 	bl	800a468 <_ZnwjPKci>
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	4620      	mov	r0, r4
 8009f32:	f004 fd37 	bl	800e9a4 <_ZN11TestFailureC1ERKS_>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	60dc      	str	r4, [r3, #12]
    }
}
 8009f3e:	bf00      	nop
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd90      	pop	{r4, r7, pc}
 8009f46:	bf00      	nop
 8009f48:	08024150 	.word	0x08024150

08009f4c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8009f4c:	b5b0      	push	{r4, r5, r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8009f56:	4b08      	ldr	r3, [pc, #32]	; (8009f78 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8009f58:	681d      	ldr	r5, [r3, #0]
 8009f5a:	6838      	ldr	r0, [r7, #0]
 8009f5c:	f003 f9d2 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009f60:	4602      	mov	r2, r0
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691c      	ldr	r4, [r3, #16]
 8009f66:	4905      	ldr	r1, [pc, #20]	; (8009f7c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8009f68:	4610      	mov	r0, r2
 8009f6a:	47a8      	blx	r5
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bdb0      	pop	{r4, r5, r7, pc}
 8009f78:	200000b4 	.word	0x200000b4
 8009f7c:	080243a0 	.word	0x080243a0

08009f80 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8009f80:	b590      	push	{r4, r7, lr}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8009f8a:	4b08      	ldr	r3, [pc, #32]	; (8009fac <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8009f8c:	681c      	ldr	r4, [r3, #0]
 8009f8e:	6838      	ldr	r0, [r7, #0]
 8009f90:	f003 f9b8 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8009f94:	4602      	mov	r2, r0
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	47a0      	blx	r4
}
 8009fa2:	bf00      	nop
 8009fa4:	370c      	adds	r7, #12
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd90      	pop	{r4, r7, pc}
 8009faa:	bf00      	nop
 8009fac:	200000b8 	.word	0x200000b8

08009fb0 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	6912      	ldr	r2, [r2, #16]
 8009fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	4798      	blx	r3
}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	200000bc 	.word	0x200000bc

08009fd4 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	603b      	str	r3, [r7, #0]
        return false;
 8009fe2:	2300      	movs	r3, #0
    }
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
    {
 8009ff8:	4a04      	ldr	r2, [pc, #16]	; (800a00c <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	601a      	str	r2, [r3, #0]
    }
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	080281e4 	.word	0x080281e4

0800a010 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
    }
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7ff ffe9 	bl	8009ff0 <_ZN17MemoryLeakFailureD1Ev>
 800a01e:	2104      	movs	r1, #4
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fa35 	bl	800a490 <_ZdlPvj>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4618      	mov	r0, r3
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800a030:	b590      	push	{r4, r7, lr}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	687c      	ldr	r4, [r7, #4]
 800a03a:	f000 fc71 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a03e:	4603      	mov	r3, r0
 800a040:	4618      	mov	r0, r3
 800a042:	f00c ff6c 	bl	8016f1e <_ZN18MemoryLeakDetector8getMutexEv>
 800a046:	4603      	mov	r3, r0
 800a048:	4619      	mov	r1, r3
 800a04a:	4620      	mov	r0, r4
 800a04c:	f002 fb24 	bl	800c698 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4618      	mov	r0, r3
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	bd90      	pop	{r4, r7, pc}

0800a05a <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4618      	mov	r0, r3
 800a066:	f002 fb29 	bl	800c6bc <_ZN15ScopedMutexLockD1Ev>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800a074:	b590      	push	{r4, r7, lr}
 800a076:	b087      	sub	sp, #28
 800a078:	af02      	add	r7, sp, #8
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800a080:	f000 fc4e 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a084:	4604      	mov	r4, r0
 800a086:	f006 f8df 	bl	8010248 <_Z25getCurrentMallocAllocatorv>
 800a08a:	4601      	mov	r1, r0
 800a08c:	2301      	movs	r3, #1
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	4620      	mov	r0, r4
 800a09a:	f00d f983 	bl	80173a4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a09e:	4603      	mov	r3, r0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd90      	pop	{r4, r7, pc}

0800a0a8 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800a0a8:	b590      	push	{r4, r7, lr}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af02      	add	r7, sp, #8
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800a0b4:	f000 fc34 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	68f9      	ldr	r1, [r7, #12]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f00c ffdd 	bl	801707c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800a0c2:	f000 fc2d 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	f006 f8be 	bl	8010248 <_Z25getCurrentMallocAllocatorv>
 800a0cc:	4601      	mov	r1, r0
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f00d f996 	bl	801740c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800a0e0:	bf00      	nop
 800a0e2:	3714      	adds	r7, #20
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd90      	pop	{r4, r7, pc}

0800a0e8 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800a0e8:	b590      	push	{r4, r7, lr}
 800a0ea:	b089      	sub	sp, #36	; 0x24
 800a0ec:	af04      	add	r7, sp, #16
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800a0f6:	f000 fc13 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	f006 f8a4 	bl	8010248 <_Z25getCurrentMallocAllocatorv>
 800a100:	4601      	mov	r1, r0
 800a102:	2301      	movs	r3, #1
 800a104:	9302      	str	r3, [sp, #8]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4620      	mov	r0, r4
 800a114:	f00d f9de 	bl	80174d4 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800a118:	4603      	mov	r3, r0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd90      	pop	{r4, r7, pc}
	...

0800a124 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a130:	4b04      	ldr	r3, [pc, #16]	; (800a144 <_ZL13normal_mallocjPKcj+0x20>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	4798      	blx	r3
 800a138:	4603      	mov	r3, r0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	200000c8 	.word	0x200000c8

0800a148 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
 800a154:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800a156:	4b05      	ldr	r3, [pc, #20]	; (800a16c <_ZL14normal_reallocPvjPKcj+0x24>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	4798      	blx	r3
 800a160:	4603      	mov	r3, r0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	200000cc 	.word	0x200000cc

0800a170 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800a17c:	4b03      	ldr	r3, [pc, #12]	; (800a18c <_ZL11normal_freePvPKcj+0x1c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	4798      	blx	r3
}
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	200000d0 	.word	0x200000d0

0800a190 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a190:	b590      	push	{r4, r7, lr}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800a198:	f107 0308 	add.w	r3, r7, #8
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7ff ff47 	bl	800a030 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a1a2:	f000 fbbd 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	f005 ff9e 	bl	80100e8 <_Z22getCurrentNewAllocatorv>
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f00d f864 	bl	8017280 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a1b8:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a1ba:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800a1bc:	f107 0308 	add.w	r3, r7, #8
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7ff ff4a 	bl	800a05a <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800a1c6:	4623      	mov	r3, r4
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd90      	pop	{r4, r7, pc}

0800a1d0 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a1d0:	b590      	push	{r4, r7, lr}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a1d8:	f000 fba2 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a1dc:	4604      	mov	r4, r0
 800a1de:	f005 ff83 	bl	80100e8 <_Z22getCurrentNewAllocatorv>
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f00d f849 	bl	8017280 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a1ee:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd90      	pop	{r4, r7, pc}

0800a1fa <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800a1fa:	b590      	push	{r4, r7, lr}
 800a1fc:	b083      	sub	sp, #12
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a202:	f000 fb8d 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a206:	4604      	mov	r4, r0
 800a208:	f005 ff6e 	bl	80100e8 <_Z22getCurrentNewAllocatorv>
 800a20c:	4601      	mov	r1, r0
 800a20e:	2300      	movs	r3, #0
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	4620      	mov	r0, r4
 800a214:	f00d f834 	bl	8017280 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a218:	4603      	mov	r3, r0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd90      	pop	{r4, r7, pc}

0800a222 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800a222:	b590      	push	{r4, r7, lr}
 800a224:	b089      	sub	sp, #36	; 0x24
 800a226:	af02      	add	r7, sp, #8
 800a228:	60f8      	str	r0, [r7, #12]
 800a22a:	60b9      	str	r1, [r7, #8]
 800a22c:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800a22e:	f000 fb77 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a232:	4604      	mov	r4, r0
 800a234:	f005 ff58 	bl	80100e8 <_Z22getCurrentNewAllocatorv>
 800a238:	4601      	mov	r1, r0
 800a23a:	2300      	movs	r3, #0
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4620      	mov	r0, r4
 800a248:	f00d f8ac 	bl	80173a4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a24c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a24e:	697b      	ldr	r3, [r7, #20]
}
 800a250:	4618      	mov	r0, r3
 800a252:	371c      	adds	r7, #28
 800a254:	46bd      	mov	sp, r7
 800a256:	bd90      	pop	{r4, r7, pc}

0800a258 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800a258:	b590      	push	{r4, r7, lr}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800a260:	f000 fb5e 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a264:	4604      	mov	r4, r0
 800a266:	f005 ff97 	bl	8010198 <_Z27getCurrentNewArrayAllocatorv>
 800a26a:	4601      	mov	r1, r0
 800a26c:	2300      	movs	r3, #0
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	4620      	mov	r0, r4
 800a272:	f00d f805 	bl	8017280 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a276:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a278:	68fb      	ldr	r3, [r7, #12]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd90      	pop	{r4, r7, pc}

0800a282 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800a282:	b590      	push	{r4, r7, lr}
 800a284:	b083      	sub	sp, #12
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800a28a:	f000 fb49 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a28e:	4604      	mov	r4, r0
 800a290:	f005 ff82 	bl	8010198 <_Z27getCurrentNewArrayAllocatorv>
 800a294:	4601      	mov	r1, r0
 800a296:	2300      	movs	r3, #0
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	4620      	mov	r0, r4
 800a29c:	f00c fff0 	bl	8017280 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a2a0:	4603      	mov	r3, r0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	370c      	adds	r7, #12
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd90      	pop	{r4, r7, pc}

0800a2aa <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800a2aa:	b590      	push	{r4, r7, lr}
 800a2ac:	b089      	sub	sp, #36	; 0x24
 800a2ae:	af02      	add	r7, sp, #8
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800a2b6:	f000 fb33 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	f005 ff6c 	bl	8010198 <_Z27getCurrentNewArrayAllocatorv>
 800a2c0:	4601      	mov	r1, r0
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f00d f868 	bl	80173a4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a2d4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a2d6:	697b      	ldr	r3, [r7, #20]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	371c      	adds	r7, #28
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd90      	pop	{r4, r7, pc}

0800a2e0 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800a2e0:	b590      	push	{r4, r7, lr}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800a2e8:	f000 fb1a 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f00c fec3 	bl	801707c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800a2f6:	f000 fb13 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	f005 fef4 	bl	80100e8 <_Z22getCurrentNewAllocatorv>
 800a300:	4601      	mov	r1, r0
 800a302:	2300      	movs	r3, #0
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	4620      	mov	r0, r4
 800a308:	f00d f8ca 	bl	80174a0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	bd90      	pop	{r4, r7, pc}

0800a314 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800a314:	b590      	push	{r4, r7, lr}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800a31c:	f000 fb00 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a320:	4603      	mov	r3, r0
 800a322:	6879      	ldr	r1, [r7, #4]
 800a324:	4618      	mov	r0, r3
 800a326:	f00c fea9 	bl	801707c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800a32a:	f000 faf9 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a32e:	4604      	mov	r4, r0
 800a330:	f005 ff32 	bl	8010198 <_Z27getCurrentNewArrayAllocatorv>
 800a334:	4601      	mov	r1, r0
 800a336:	2300      	movs	r3, #0
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	4620      	mov	r0, r4
 800a33c:	f00d f8b0 	bl	80174a0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	bd90      	pop	{r4, r7, pc}

0800a348 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a350:	4b04      	ldr	r3, [pc, #16]	; (800a364 <_ZL19normal_operator_newj+0x1c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
 800a358:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a35a:	68fb      	ldr	r3, [r7, #12]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	200000c8 	.word	0x200000c8

0800a368 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a370:	4b04      	ldr	r3, [pc, #16]	; (800a384 <_ZL27normal_operator_new_nothrowj+0x1c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	4798      	blx	r3
 800a378:	4603      	mov	r3, r0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	200000c8 	.word	0x200000c8

0800a388 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a394:	4b04      	ldr	r3, [pc, #16]	; (800a3a8 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	4798      	blx	r3
 800a39c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a39e:	697b      	ldr	r3, [r7, #20]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	200000c8 	.word	0x200000c8

0800a3ac <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a3b4:	4b04      	ldr	r3, [pc, #16]	; (800a3c8 <_ZL25normal_operator_new_arrayj+0x1c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
 800a3bc:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a3be:	68fb      	ldr	r3, [r7, #12]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	200000c8 	.word	0x200000c8

0800a3cc <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a3d4:	4b04      	ldr	r3, [pc, #16]	; (800a3e8 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	4798      	blx	r3
 800a3dc:	4603      	mov	r3, r0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	200000c8 	.word	0x200000c8

0800a3ec <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a3f8:	4b04      	ldr	r3, [pc, #16]	; (800a40c <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	4798      	blx	r3
 800a400:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a402:	697b      	ldr	r3, [r7, #20]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	200000c8 	.word	0x200000c8

0800a410 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800a418:	4b03      	ldr	r3, [pc, #12]	; (800a428 <_ZL22normal_operator_deletePv+0x18>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	4798      	blx	r3
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	200000d0 	.word	0x200000d0

0800a42c <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800a434:	4b03      	ldr	r3, [pc, #12]	; (800a444 <_ZL28normal_operator_delete_arrayPv+0x18>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	4798      	blx	r3
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	200000d0 	.word	0x200000d0

0800a448 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800a450:	4b04      	ldr	r3, [pc, #16]	; (800a464 <_Znwj+0x1c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	4798      	blx	r3
 800a458:	4603      	mov	r3, r0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	2000002c 	.word	0x2000002c

0800a468 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800a474:	4b05      	ldr	r3, [pc, #20]	; (800a48c <_ZnwjPKci+0x24>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	68b9      	ldr	r1, [r7, #8]
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	4798      	blx	r3
 800a480:	4603      	mov	r3, r0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	20000034 	.word	0x20000034

0800a490 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800a49a:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <_ZdlPvj+0x1c>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	4798      	blx	r3
}
 800a4a2:	bf00      	nop
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20000044 	.word	0x20000044

0800a4b0 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800a4bc:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <_ZnajPKci+0x24>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	4798      	blx	r3
 800a4c8:	4603      	mov	r3, r0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000040 	.word	0x20000040

0800a4d8 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800a4e0:	4b03      	ldr	r3, [pc, #12]	; (800a4f0 <_ZdaPv+0x18>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	4798      	blx	r3
}
 800a4e8:	bf00      	nop
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20000048 	.word	0x20000048

0800a4f4 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800a4fe:	4b04      	ldr	r3, [pc, #16]	; (800a510 <_ZdaPvj+0x1c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
}
 800a506:	bf00      	nop
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20000048 	.word	0x20000048

0800a514 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800a514:	b480      	push	{r7}
 800a516:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800a518:	4b12      	ldr	r3, [pc, #72]	; (800a564 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800a51a:	4a13      	ldr	r2, [pc, #76]	; (800a568 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800a51c:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800a51e:	4b13      	ldr	r3, [pc, #76]	; (800a56c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800a520:	4a13      	ldr	r2, [pc, #76]	; (800a570 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800a522:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800a524:	4b13      	ldr	r3, [pc, #76]	; (800a574 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800a526:	4a14      	ldr	r2, [pc, #80]	; (800a578 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800a528:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800a52a:	4b14      	ldr	r3, [pc, #80]	; (800a57c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800a52c:	4a14      	ldr	r2, [pc, #80]	; (800a580 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800a52e:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800a530:	4b14      	ldr	r3, [pc, #80]	; (800a584 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800a532:	4a15      	ldr	r2, [pc, #84]	; (800a588 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800a534:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800a536:	4b15      	ldr	r3, [pc, #84]	; (800a58c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800a538:	4a15      	ldr	r2, [pc, #84]	; (800a590 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800a53a:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800a53c:	4b15      	ldr	r3, [pc, #84]	; (800a594 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800a53e:	4a16      	ldr	r2, [pc, #88]	; (800a598 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800a540:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800a542:	4b16      	ldr	r3, [pc, #88]	; (800a59c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800a544:	4a16      	ldr	r2, [pc, #88]	; (800a5a0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800a546:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800a548:	4b16      	ldr	r3, [pc, #88]	; (800a5a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800a54a:	4a17      	ldr	r2, [pc, #92]	; (800a5a8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800a54c:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800a54e:	4b17      	ldr	r3, [pc, #92]	; (800a5ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800a550:	4a17      	ldr	r2, [pc, #92]	; (800a5b0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800a552:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800a554:	4b17      	ldr	r3, [pc, #92]	; (800a5b4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800a556:	4a18      	ldr	r2, [pc, #96]	; (800a5b8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800a558:	601a      	str	r2, [r3, #0]

#endif
}
 800a55a:	bf00      	nop
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	2000002c 	.word	0x2000002c
 800a568:	0800a349 	.word	0x0800a349
 800a56c:	20000030 	.word	0x20000030
 800a570:	0800a369 	.word	0x0800a369
 800a574:	20000034 	.word	0x20000034
 800a578:	0800a389 	.word	0x0800a389
 800a57c:	20000038 	.word	0x20000038
 800a580:	0800a3ad 	.word	0x0800a3ad
 800a584:	2000003c 	.word	0x2000003c
 800a588:	0800a3cd 	.word	0x0800a3cd
 800a58c:	20000040 	.word	0x20000040
 800a590:	0800a3ed 	.word	0x0800a3ed
 800a594:	20000044 	.word	0x20000044
 800a598:	0800a411 	.word	0x0800a411
 800a59c:	20000048 	.word	0x20000048
 800a5a0:	0800a42d 	.word	0x0800a42d
 800a5a4:	20000014 	.word	0x20000014
 800a5a8:	0800a125 	.word	0x0800a125
 800a5ac:	2000001c 	.word	0x2000001c
 800a5b0:	0800a149 	.word	0x0800a149
 800a5b4:	20000018 	.word	0x20000018
 800a5b8:	0800a171 	.word	0x0800a171

0800a5bc <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800a5c0:	4b08      	ldr	r3, [pc, #32]	; (800a5e4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a08      	ldr	r2, [pc, #32]	; (800a5e8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d004      	beq.n	800a5d4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800a5ca:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a07      	ldr	r2, [pc, #28]	; (800a5ec <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d101      	bne.n	800a5d8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e000      	b.n	800a5da <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800a5d8:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	2000002c 	.word	0x2000002c
 800a5e8:	0800a1d1 	.word	0x0800a1d1
 800a5ec:	0800a191 	.word	0x0800a191

0800a5f0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800a5f4:	4b1f      	ldr	r3, [pc, #124]	; (800a674 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	4a1e      	ldr	r2, [pc, #120]	; (800a674 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	4b1d      	ldr	r3, [pc, #116]	; (800a674 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b01      	cmp	r3, #1
 800a604:	bfcc      	ite	gt
 800a606:	2301      	movgt	r3, #1
 800a608:	2300      	movle	r3, #0
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d12e      	bne.n	800a66e <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800a610:	4b19      	ldr	r3, [pc, #100]	; (800a678 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a19      	ldr	r2, [pc, #100]	; (800a67c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800a616:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800a618:	4b19      	ldr	r3, [pc, #100]	; (800a680 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a19      	ldr	r2, [pc, #100]	; (800a684 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800a61e:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800a620:	4b19      	ldr	r3, [pc, #100]	; (800a688 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a19      	ldr	r2, [pc, #100]	; (800a68c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800a626:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800a628:	4b19      	ldr	r3, [pc, #100]	; (800a690 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a19      	ldr	r2, [pc, #100]	; (800a694 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800a62e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800a630:	4b19      	ldr	r3, [pc, #100]	; (800a698 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a19      	ldr	r2, [pc, #100]	; (800a69c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800a636:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800a638:	4b19      	ldr	r3, [pc, #100]	; (800a6a0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a19      	ldr	r2, [pc, #100]	; (800a6a4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800a63e:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800a640:	4b19      	ldr	r3, [pc, #100]	; (800a6a8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a19      	ldr	r2, [pc, #100]	; (800a6ac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800a646:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800a648:	4b19      	ldr	r3, [pc, #100]	; (800a6b0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a19      	ldr	r2, [pc, #100]	; (800a6b4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800a64e:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800a650:	4b19      	ldr	r3, [pc, #100]	; (800a6b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a19      	ldr	r2, [pc, #100]	; (800a6bc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800a656:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800a658:	4b19      	ldr	r3, [pc, #100]	; (800a6c0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a19      	ldr	r2, [pc, #100]	; (800a6c4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800a65e:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800a660:	4b19      	ldr	r3, [pc, #100]	; (800a6c8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a19      	ldr	r2, [pc, #100]	; (800a6cc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800a666:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800a668:	f7ff ff54 	bl	800a514 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800a66c:	e000      	b.n	800a670 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800a66e:	bf00      	nop
#endif
}
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20000848 	.word	0x20000848
 800a678:	2000002c 	.word	0x2000002c
 800a67c:	2000004c 	.word	0x2000004c
 800a680:	20000030 	.word	0x20000030
 800a684:	20000050 	.word	0x20000050
 800a688:	20000034 	.word	0x20000034
 800a68c:	20000054 	.word	0x20000054
 800a690:	20000038 	.word	0x20000038
 800a694:	20000058 	.word	0x20000058
 800a698:	2000003c 	.word	0x2000003c
 800a69c:	2000005c 	.word	0x2000005c
 800a6a0:	20000040 	.word	0x20000040
 800a6a4:	20000060 	.word	0x20000060
 800a6a8:	20000044 	.word	0x20000044
 800a6ac:	20000064 	.word	0x20000064
 800a6b0:	20000048 	.word	0x20000048
 800a6b4:	20000068 	.word	0x20000068
 800a6b8:	20000014 	.word	0x20000014
 800a6bc:	20000020 	.word	0x20000020
 800a6c0:	2000001c 	.word	0x2000001c
 800a6c4:	20000028 	.word	0x20000028
 800a6c8:	20000018 	.word	0x20000018
 800a6cc:	20000024 	.word	0x20000024

0800a6d0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800a6d4:	4b1f      	ldr	r3, [pc, #124]	; (800a754 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	4a1e      	ldr	r2, [pc, #120]	; (800a754 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	4b1d      	ldr	r3, [pc, #116]	; (800a754 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bfcc      	ite	gt
 800a6e6:	2301      	movgt	r3, #1
 800a6e8:	2300      	movle	r3, #0
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d12c      	bne.n	800a74a <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800a6f0:	4b19      	ldr	r3, [pc, #100]	; (800a758 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a19      	ldr	r2, [pc, #100]	; (800a75c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800a6f6:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800a6f8:	4b19      	ldr	r3, [pc, #100]	; (800a760 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a19      	ldr	r2, [pc, #100]	; (800a764 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800a6fe:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800a700:	4b19      	ldr	r3, [pc, #100]	; (800a768 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a19      	ldr	r2, [pc, #100]	; (800a76c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800a706:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800a708:	4b19      	ldr	r3, [pc, #100]	; (800a770 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a19      	ldr	r2, [pc, #100]	; (800a774 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800a70e:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800a710:	4b19      	ldr	r3, [pc, #100]	; (800a778 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a19      	ldr	r2, [pc, #100]	; (800a77c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800a716:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800a718:	4b19      	ldr	r3, [pc, #100]	; (800a780 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a19      	ldr	r2, [pc, #100]	; (800a784 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800a71e:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800a720:	4b19      	ldr	r3, [pc, #100]	; (800a788 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a19      	ldr	r2, [pc, #100]	; (800a78c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800a726:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800a728:	4b19      	ldr	r3, [pc, #100]	; (800a790 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a19      	ldr	r2, [pc, #100]	; (800a794 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800a72e:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800a730:	4b19      	ldr	r3, [pc, #100]	; (800a798 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a19      	ldr	r2, [pc, #100]	; (800a79c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800a736:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800a738:	4b19      	ldr	r3, [pc, #100]	; (800a7a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a19      	ldr	r2, [pc, #100]	; (800a7a4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800a73e:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800a740:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a19      	ldr	r2, [pc, #100]	; (800a7ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	e000      	b.n	800a74c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800a74a:	bf00      	nop
#endif
}
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	20000848 	.word	0x20000848
 800a758:	2000004c 	.word	0x2000004c
 800a75c:	2000002c 	.word	0x2000002c
 800a760:	20000050 	.word	0x20000050
 800a764:	20000030 	.word	0x20000030
 800a768:	20000054 	.word	0x20000054
 800a76c:	20000034 	.word	0x20000034
 800a770:	20000058 	.word	0x20000058
 800a774:	20000038 	.word	0x20000038
 800a778:	2000005c 	.word	0x2000005c
 800a77c:	2000003c 	.word	0x2000003c
 800a780:	20000060 	.word	0x20000060
 800a784:	20000040 	.word	0x20000040
 800a788:	20000064 	.word	0x20000064
 800a78c:	20000044 	.word	0x20000044
 800a790:	20000068 	.word	0x20000068
 800a794:	20000048 	.word	0x20000048
 800a798:	20000020 	.word	0x20000020
 800a79c:	20000014 	.word	0x20000014
 800a7a0:	20000028 	.word	0x20000028
 800a7a4:	2000001c 	.word	0x2000001c
 800a7a8:	20000024 	.word	0x20000024
 800a7ac:	20000018 	.word	0x20000018

0800a7b0 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
    {
 800a7b8:	4a05      	ldr	r2, [pc, #20]	; (800a7d0 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7ff fc15 	bl	8009ff0 <_ZN17MemoryLeakFailureD1Ev>
    }
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	080281d0 	.word	0x080281d0

0800a7d4 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
    }
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff ffe7 	bl	800a7b0 <_ZN25MemoryLeakWarningReporterD1Ev>
 800a7e2:	2104      	movs	r1, #4
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff fe53 	bl	800a490 <_ZdlPvj>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	4a04      	ldr	r2, [pc, #16]	; (800a810 <_ZN14TestTerminatorC1Ev+0x1c>)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	601a      	str	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4618      	mov	r0, r3
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	08028b7c 	.word	0x08028b7c

0800a814 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff ffe8 	bl	800a7f4 <_ZN14TestTerminatorC1Ev>
 800a824:	4a03      	ldr	r2, [pc, #12]	; (800a834 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	601a      	str	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	08028b54 	.word	0x08028b54

0800a838 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800a838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a83a:	b099      	sub	sp, #100	; 0x64
 800a83c:	af02      	add	r7, sp, #8
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800a842:	f009 fdb7 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800a846:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800a848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	339c      	adds	r3, #156	; 0x9c
 800a84e:	681c      	ldr	r4, [r3, #0]
 800a850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a854:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a856:	4618      	mov	r0, r3
 800a858:	f008 fbc4 	bl	8012fe4 <_ZNK10UtestShell7getNameEv>
 800a85c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a860:	4618      	mov	r0, r3
 800a862:	f002 fd4f 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800a866:	4605      	mov	r5, r0
 800a868:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a86a:	f008 fc9b 	bl	80131a4 <_ZNK10UtestShell13getLineNumberEv>
 800a86e:	4606      	mov	r6, r0
 800a870:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	4618      	mov	r0, r3
 800a878:	f002 f9b9 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800a87c:	f107 000c 	add.w	r0, r7, #12
 800a880:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	4633      	mov	r3, r6
 800a888:	462a      	mov	r2, r5
 800a88a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a88c:	f004 fd14 	bl	800f2b8 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800a890:	2300      	movs	r3, #0
 800a892:	653b      	str	r3, [r7, #80]	; 0x50
 800a894:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff ffbb 	bl	800a814 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800a89e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a8a2:	f107 030c 	add.w	r3, r7, #12
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a8aa:	47a0      	blx	r4
 800a8ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f009 fe79 	bl	80145a8 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800a8b6:	f107 030c 	add.w	r3, r7, #12
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 f9ac 	bl	800ac18 <_ZN11FailFailureD1Ev>
 800a8c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f002 fd4a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800a8ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f002 fd45 	bl	800d35e <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800a8d4:	bf00      	nop
 800a8d6:	375c      	adds	r7, #92	; 0x5c
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8dc <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	4a04      	ldr	r2, [pc, #16]	; (800a8f8 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	080281e4 	.word	0x080281e4

0800a8fc <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff ffe8 	bl	800a8dc <_ZN17MemoryLeakFailureC1Ev>
 800a90c:	4a03      	ldr	r2, [pc, #12]	; (800a91c <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	080281d0 	.word	0x080281d0

0800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800a920:	b598      	push	{r3, r4, r7, lr}
 800a922:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800a924:	4b11      	ldr	r3, [pc, #68]	; (800a96c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d11b      	bne.n	800a964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800a92c:	f7ff fe60 	bl	800a5f0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800a930:	2004      	movs	r0, #4
 800a932:	f7ff fd89 	bl	800a448 <_Znwj>
 800a936:	4603      	mov	r3, r0
 800a938:	461c      	mov	r4, r3
 800a93a:	4620      	mov	r0, r4
 800a93c:	f7ff ffde 	bl	800a8fc <_ZN25MemoryLeakWarningReporterC1Ev>
 800a940:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800a942:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800a944:	f241 1050 	movw	r0, #4432	; 0x1150
 800a948:	f7ff fd7e 	bl	800a448 <_Znwj>
 800a94c:	4603      	mov	r3, r0
 800a94e:	461c      	mov	r4, r3
 800a950:	4b07      	ldr	r3, [pc, #28]	; (800a970 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4619      	mov	r1, r3
 800a956:	4620      	mov	r0, r4
 800a958:	f00c fa3e 	bl	8016dd8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800a95c:	4b03      	ldr	r3, [pc, #12]	; (800a96c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a95e:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800a960:	f7ff feb6 	bl	800a6d0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800a964:	4b01      	ldr	r3, [pc, #4]	; (800a96c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a966:	681b      	ldr	r3, [r3, #0]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	bd98      	pop	{r3, r4, r7, pc}
 800a96c:	20000850 	.word	0x20000850
 800a970:	2000084c 	.word	0x2000084c

0800a974 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	78fa      	ldrb	r2, [r7, #3]
 800a984:	765a      	strb	r2, [r3, #25]
}
 800a986:	bf00      	nop
 800a988:	370c      	adds	r7, #12
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
	...

0800a994 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800a998:	f7ff fdbc 	bl	800a514 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800a99c:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	3204      	adds	r2, #4
 800a9a8:	6812      	ldr	r2, [r2, #0]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	4790      	blx	r2
    delete globalReporter;
 800a9ae:	4b08      	ldr	r3, [pc, #32]	; (800a9d0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d004      	beq.n	800a9c0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	3204      	adds	r2, #4
 800a9ba:	6812      	ldr	r2, [r2, #0]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	4790      	blx	r2
    globalDetector = NULLPTR;
 800a9c0:	4b02      	ldr	r3, [pc, #8]	; (800a9cc <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
}
 800a9c6:	bf00      	nop
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20000850 	.word	0x20000850
 800a9d0:	2000084c 	.word	0x2000084c

0800a9d4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	68b9      	ldr	r1, [r7, #8]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f006 fdfd 	bl	80115e4 <_ZN10TestPluginC1ERK12SimpleString>
 800a9ea:	4a14      	ldr	r2, [pc, #80]	; (800aa3c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	761a      	strb	r2, [r3, #24]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	765a      	strb	r2, [r3, #25]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800aa02:	4b0f      	ldr	r3, [pc, #60]	; (800aa40 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d102      	bne.n	800aa10 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800aa0a:	4a0d      	ldr	r2, [pc, #52]	; (800aa40 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d003      	beq.n	800aa1e <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	615a      	str	r2, [r3, #20]
 800aa1c:	e004      	b.n	800aa28 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800aa1e:	f7ff ff7f 	bl	800a920 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800aa22:	4602      	mov	r2, r0
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f00c fa69 	bl	8016f04 <_ZN18MemoryLeakDetector6enableEv>
}
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	080281f8 	.word	0x080281f8
 800aa40:	20000854 	.word	0x20000854

0800aa44 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	4a09      	ldr	r2, [pc, #36]	; (800aa74 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	7e5b      	ldrb	r3, [r3, #25]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800aa5a:	f7ff fd5b 	bl	800a514 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800aa5e:	f7ff ff99 	bl	800a994 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f006 fdf9 	bl	801165c <_ZN10TestPluginD1Ev>
    }
}
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	080281f8 	.word	0x080281f8

0800aa78 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
}
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff ffdf 	bl	800aa44 <_ZN23MemoryLeakWarningPluginD1Ev>
 800aa86:	2124      	movs	r1, #36	; 0x24
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff fd01 	bl	800a490 <_ZdlPvj>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f00c fa0e 	bl	8016eca <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7fd ffb0 	bl	8008a14 <_ZNK10TestResult15getFailureCountEv>
 800aab4:	4602      	mov	r2, r0
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	621a      	str	r2, [r3, #32]
}
 800aaba:	bf00      	nop
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
	...

0800aac4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800aac4:	b590      	push	{r4, r7, lr}
 800aac6:	b097      	sub	sp, #92	; 0x5c
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f00c fa08 	bl	8016eea <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	2103      	movs	r1, #3
 800aae0:	4618      	mov	r0, r3
 800aae2:	f00c fda5 	bl	8017630 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800aae6:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	7e1b      	ldrb	r3, [r3, #24]
 800aaec:	f083 0301 	eor.w	r3, r3, #1
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00e      	beq.n	800ab14 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d009      	beq.n	800ab14 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6a1c      	ldr	r4, [r3, #32]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7fd ff85 	bl	8008a14 <_ZNK10TestResult15getFailureCountEv>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	429c      	cmp	r4, r3
 800ab0e:	d101      	bne.n	800ab14 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e000      	b.n	800ab16 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800ab14:	2300      	movs	r3, #0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d04c      	beq.n	800abb4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800ab1a:	f7ff fd4f 	bl	800a5bc <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d028      	beq.n	800ab76 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	2103      	movs	r1, #3
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f00c fd45 	bl	80175ba <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800ab30:	4602      	mov	r2, r0
 800ab32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ab36:	4611      	mov	r1, r2
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f002 f858 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800ab3e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ab42:	f107 0310 	add.w	r3, r7, #16
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f003 feaf 	bl	800e8ac <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800ab4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ab52:	4618      	mov	r0, r3
 800ab54:	f002 fc03 	bl	800d35e <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3334      	adds	r3, #52	; 0x34
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f107 0210 	add.w	r2, r7, #16
 800ab64:	4611      	mov	r1, r2
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800ab6a:	f107 0310 	add.w	r3, r7, #16
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f003 ff5c 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800ab74:	e01e      	b.n	800abb4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	69db      	ldr	r3, [r3, #28]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d01a      	beq.n	800abb4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3338      	adds	r3, #56	; 0x38
 800ab84:	681c      	ldr	r4, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ab90:	4910      	ldr	r1, [pc, #64]	; (800abd4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800ab92:	4618      	mov	r0, r3
 800ab94:	f003 f8ea 	bl	800dd6c <_Z16StringFromFormatPKcz>
 800ab98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f002 fbb1 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800aba2:	4603      	mov	r3, r0
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	47a0      	blx	r4
 800abaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800abae:	4618      	mov	r0, r3
 800abb0:	f002 fbd5 	bl	800d35e <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	4618      	mov	r0, r3
 800abba:	f00c fd13 	bl	80175e4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	61da      	str	r2, [r3, #28]
}
 800abca:	bf00      	nop
 800abcc:	375c      	adds	r7, #92	; 0x5c
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd90      	pop	{r4, r7, pc}
 800abd2:	bf00      	nop
 800abd4:	080243a4 	.word	0x080243a4

0800abd8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	2102      	movs	r1, #2
 800abe8:	4618      	mov	r0, r3
 800abea:	f00c fd21 	bl	8017630 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800abee:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d007      	beq.n	800ac08 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	2102      	movs	r1, #2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f00c fcdb 	bl	80175ba <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800ac04:	4603      	mov	r3, r0
 800ac06:	e000      	b.n	800ac0a <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800ac08:	4b02      	ldr	r3, [pc, #8]	; (800ac14 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	080243e4 	.word	0x080243e4

0800ac18 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	4a05      	ldr	r2, [pc, #20]	; (800ac38 <_ZN11FailFailureD1Ev+0x20>)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f003 feff 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4618      	mov	r0, r3
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	08028240 	.word	0x08028240

0800ac3c <_ZN11FailFailureD0Ev>:
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7ff ffe7 	bl	800ac18 <_ZN11FailFailureD1Ev>
 800ac4a:	2134      	movs	r1, #52	; 0x34
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff fc1f 	bl	800a490 <_ZdlPvj>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4618      	mov	r0, r3
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4618      	mov	r0, r3
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	4a06      	ldr	r2, [pc, #24]	; (800acb0 <_ZN19MockFailureReporterC1Ev+0x24>)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	711a      	strb	r2, [r3, #4]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	0802941c 	.word	0x0802941c

0800acb4 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	4a04      	ldr	r2, [pc, #16]	; (800acd0 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4618      	mov	r0, r3
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	0802941c 	.word	0x0802941c

0800acd4 <_ZN19MockFailureReporterD0Ev>:
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff ffe9 	bl	800acb4 <_ZN19MockFailureReporterD1Ev>
 800ace2:	2108      	movs	r1, #8
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7ff fbd3 	bl	800a490 <_ZdlPvj>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	4a05      	ldr	r2, [pc, #20]	; (800ad14 <_ZN11MockFailureD1Ev+0x20>)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f003 fe91 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	08028394 	.word	0x08028394

0800ad18 <_ZN11MockFailureD0Ev>:
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff ffe7 	bl	800acf4 <_ZN11MockFailureD1Ev>
 800ad26:	2134      	movs	r1, #52	; 0x34
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff fbb1 	bl	800a490 <_ZdlPvj>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800ad38:	b590      	push	{r4, r7, lr}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
 800ad42:	4a16      	ldr	r2, [pc, #88]	; (800ad9c <_ZN14MockNamedValueC1ERKS_+0x64>)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	1d1a      	adds	r2, r3, #4
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	3304      	adds	r3, #4
 800ad50:	4619      	mov	r1, r3
 800ad52:	4610      	mov	r0, r2
 800ad54:	f001 ff9f 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f103 020c 	add.w	r2, r3, #12
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	330c      	adds	r3, #12
 800ad62:	4619      	mov	r1, r3
 800ad64:	4610      	mov	r0, r2
 800ad66:	f001 ff96 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	f102 0418 	add.w	r4, r2, #24
 800ad72:	3318      	adds	r3, #24
 800ad74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	629a      	str	r2, [r3, #40]	; 0x28
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	62da      	str	r2, [r3, #44]	; 0x2c
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	631a      	str	r2, [r3, #48]	; 0x30
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4618      	mov	r0, r3
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd90      	pop	{r4, r7, pc}
 800ad9c:	0802945c 	.word	0x0802945c

0800ada0 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800adaa:	f107 030c 	add.w	r3, r7, #12
 800adae:	4916      	ldr	r1, [pc, #88]	; (800ae08 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800adb0:	4618      	mov	r0, r3
 800adb2:	f001 ff1c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800adb6:	f107 030c 	add.w	r3, r7, #12
 800adba:	4619      	mov	r1, r3
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f002 fb1f 	bl	800d400 <_ZneRK12SimpleStringS1_>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d005      	beq.n	800add4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800adc8:	6879      	ldr	r1, [r7, #4]
 800adca:	4810      	ldr	r0, [pc, #64]	; (800ae0c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800adcc:	f000 ff70 	bl	800bcb0 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800add0:	4603      	mov	r3, r0
 800add2:	e000      	b.n	800add6 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800add4:	4b0d      	ldr	r3, [pc, #52]	; (800ae0c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800add6:	617b      	str	r3, [r7, #20]
 800add8:	f107 030c 	add.w	r3, r7, #12
 800addc:	4618      	mov	r0, r3
 800adde:	f002 fabe 	bl	800d35e <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	33a8      	adds	r3, #168	; 0xa8
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	6978      	ldr	r0, [r7, #20]
 800adee:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	33ac      	adds	r3, #172	; 0xac
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6978      	ldr	r0, [r7, #20]
 800adfa:	4798      	blx	r3
    return mock_support;
 800adfc:	697b      	ldr	r3, [r7, #20]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3718      	adds	r7, #24
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	080243e8 	.word	0x080243e8
 800ae0c:	20000858 	.word	0x20000858

0800ae10 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800ae1a:	4a21      	ldr	r2, [pc, #132]	; (800aea0 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	605a      	str	r2, [r3, #4]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	609a      	str	r2, [r3, #8]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	731a      	strb	r2, [r3, #12]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f103 0218 	add.w	r2, r3, #24
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	615a      	str	r2, [r3, #20]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3318      	adds	r3, #24
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7ff ff23 	bl	800ac8c <_ZN19MockFailureReporterC1Ev>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3320      	adds	r3, #32
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f010 fefc 	bl	801bc48 <_ZN21MockExpectedCallsListC1Ev>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	62da      	str	r2, [r3, #44]	; 0x2c
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3330      	adds	r3, #48	; 0x30
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f014 fbea 	bl	801f644 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3338      	adds	r3, #56	; 0x38
 800ae74:	4618      	mov	r0, r3
 800ae76:	f014 faf4 	bl	801f462 <_ZN18MockNamedValueListC1Ev>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	333c      	adds	r3, #60	; 0x3c
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f001 ff08 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800ae8e:	2100      	movs	r1, #0
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f894 	bl	800afbe <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	0802826c 	.word	0x0802826c

0800aea4 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	4a0d      	ldr	r2, [pc, #52]	; (800aee4 <_ZN11MockSupportD1Ev+0x40>)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	333c      	adds	r3, #60	; 0x3c
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f002 fa51 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3330      	adds	r3, #48	; 0x30
 800aec0:	4618      	mov	r0, r3
 800aec2:	f014 fbd3 	bl	801f66c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3320      	adds	r3, #32
 800aeca:	4618      	mov	r0, r3
 800aecc:	f010 fed0 	bl	801bc70 <_ZN21MockExpectedCallsListD1Ev>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3318      	adds	r3, #24
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7ff feed 	bl	800acb4 <_ZN19MockFailureReporterD1Ev>
{
}
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	0802826c 	.word	0x0802826c

0800aee8 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
}
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7ff ffd7 	bl	800aea4 <_ZN11MockSupportD1Ev>
 800aef6:	2148      	movs	r1, #72	; 0x48
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff fac9 	bl	800a490 <_ZdlPvj>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	691a      	ldr	r2, [r3, #16]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3310      	adds	r3, #16
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	78f9      	ldrb	r1, [r7, #3]
 800af24:	4610      	mov	r0, r2
 800af26:	4798      	blx	r3
}
 800af28:	bf00      	nop
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d102      	bne.n	800af46 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	3318      	adds	r3, #24
 800af44:	e000      	b.n	800af48 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00a      	beq.n	800af6a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	33c8      	adds	r3, #200	; 0xc8
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	6952      	ldr	r2, [r2, #20]
 800af66:	4611      	mov	r1, r2
 800af68:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3338      	adds	r3, #56	; 0x38
 800af6e:	4618      	mov	r0, r3
 800af70:	f014 fb0d 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800af74:	60f8      	str	r0, [r7, #12]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01c      	beq.n	800afb6 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800af7c:	68f9      	ldr	r1, [r7, #12]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 ff26 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	bf14      	ite	ne
 800af8a:	2301      	movne	r3, #1
 800af8c:	2300      	moveq	r3, #0
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00b      	beq.n	800afac <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800af94:	68f9      	ldr	r1, [r7, #12]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 ff1a 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af9c:	4603      	mov	r3, r0
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	32a4      	adds	r2, #164	; 0xa4
 800afa2:	6812      	ldr	r2, [r2, #0]
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	6949      	ldr	r1, [r1, #20]
 800afa8:	4618      	mov	r0, r3
 800afaa:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f014 f9f7 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	e7df      	b.n	800af76 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800afb6:	bf00      	nop
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b083      	sub	sp, #12
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d102      	bne.n	800afd4 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	e000      	b.n	800afd6 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	6113      	str	r3, [r2, #16]
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b082      	sub	sp, #8
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3330      	adds	r3, #48	; 0x30
 800aff2:	4618      	mov	r0, r3
 800aff4:	f012 fb10 	bl	801d618 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800aff8:	bf00      	nop
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800b000:	b590      	push	{r4, r7, lr}
 800b002:	b087      	sub	sp, #28
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	3330      	adds	r3, #48	; 0x30
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	68b9      	ldr	r1, [r7, #8]
 800b014:	4618      	mov	r0, r3
 800b016:	f014 fb77 	bl	801f708 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	3338      	adds	r3, #56	; 0x38
 800b01e:	4618      	mov	r0, r3
 800b020:	f014 fab5 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b024:	6178      	str	r0, [r7, #20]
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d01c      	beq.n	800b066 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800b02c:	6979      	ldr	r1, [r7, #20]
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f000 fece 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	bf14      	ite	ne
 800b03a:	2301      	movne	r3, #1
 800b03c:	2300      	moveq	r3, #0
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00b      	beq.n	800b05c <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800b044:	6979      	ldr	r1, [r7, #20]
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f000 fec2 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b04c:	4603      	mov	r3, r0
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	32b0      	adds	r2, #176	; 0xb0
 800b052:	6814      	ldr	r4, [r2, #0]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	68b9      	ldr	r1, [r7, #8]
 800b058:	4618      	mov	r0, r3
 800b05a:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b05c:	6978      	ldr	r0, [r7, #20]
 800b05e:	f014 f99f 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b062:	6178      	str	r0, [r7, #20]
 800b064:	e7df      	b.n	800b026 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800b066:	bf00      	nop
 800b068:	371c      	adds	r7, #28
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd90      	pop	{r4, r7, pc}

0800b06e <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800b06e:	b590      	push	{r4, r7, lr}
 800b070:	b087      	sub	sp, #28
 800b072:	af00      	add	r7, sp, #0
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	3330      	adds	r3, #48	; 0x30
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	68b9      	ldr	r1, [r7, #8]
 800b082:	4618      	mov	r0, r3
 800b084:	f014 fb5c 	bl	801f740 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	3338      	adds	r3, #56	; 0x38
 800b08c:	4618      	mov	r0, r3
 800b08e:	f014 fa7e 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b092:	6178      	str	r0, [r7, #20]
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d01c      	beq.n	800b0d4 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800b09a:	6979      	ldr	r1, [r7, #20]
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 fe97 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bf14      	ite	ne
 800b0a8:	2301      	movne	r3, #1
 800b0aa:	2300      	moveq	r3, #0
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00b      	beq.n	800b0ca <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800b0b2:	6979      	ldr	r1, [r7, #20]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 fe8b 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	32b4      	adds	r2, #180	; 0xb4
 800b0c0:	6814      	ldr	r4, [r2, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	68b9      	ldr	r1, [r7, #8]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b0ca:	6978      	ldr	r0, [r7, #20]
 800b0cc:	f014 f968 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b0d0:	6178      	str	r0, [r7, #20]
 800b0d2:	e7df      	b.n	800b094 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800b0d4:	bf00      	nop
 800b0d6:	371c      	adds	r7, #28
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd90      	pop	{r4, r7, pc}

0800b0dc <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3330      	adds	r3, #48	; 0x30
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f014 fb93 	bl	801f818 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3338      	adds	r3, #56	; 0x38
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f014 fa49 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d01b      	beq.n	800b13c <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800b104:	68f9      	ldr	r1, [r7, #12]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fe62 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	bf14      	ite	ne
 800b112:	2301      	movne	r3, #1
 800b114:	2300      	moveq	r3, #0
 800b116:	b2db      	uxtb	r3, r3
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00a      	beq.n	800b132 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800b11c:	68f9      	ldr	r1, [r7, #12]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fe56 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b124:	4603      	mov	r3, r0
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	32b8      	adds	r2, #184	; 0xb8
 800b12a:	6812      	ldr	r2, [r2, #0]
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	4618      	mov	r0, r3
 800b130:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f014 f934 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b138:	60f8      	str	r0, [r7, #12]
 800b13a:	e7e0      	b.n	800b0fe <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800b13c:	bf00      	nop
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3330      	adds	r3, #48	; 0x30
 800b150:	4618      	mov	r0, r3
 800b152:	f014 faba 	bl	801f6ca <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	3338      	adds	r3, #56	; 0x38
 800b15a:	4618      	mov	r0, r3
 800b15c:	f014 fa17 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01a      	beq.n	800b19e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800b168:	68f9      	ldr	r1, [r7, #12]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fe30 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	bf14      	ite	ne
 800b176:	2301      	movne	r3, #1
 800b178:	2300      	moveq	r3, #0
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d009      	beq.n	800b194 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800b180:	68f9      	ldr	r1, [r7, #12]
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fe24 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b188:	4603      	mov	r3, r0
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	32bc      	adds	r2, #188	; 0xbc
 800b18e:	6812      	ldr	r2, [r2, #0]
 800b190:	4618      	mov	r0, r3
 800b192:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f014 f903 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	e7e1      	b.n	800b162 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800b19e:	bf00      	nop
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d004      	beq.n	800b1c0 <_ZN11MockSupport5clearEv+0x1a>
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	3204      	adds	r2, #4
 800b1ba:	6812      	ldr	r2, [r2, #0]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800b1ce:	f00e fe0d 	bl	8019dec <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3320      	adds	r3, #32
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f011 f937 	bl	801c44a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	3338      	adds	r3, #56	; 0x38
 800b202:	4618      	mov	r0, r3
 800b204:	f014 f9c3 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d01a      	beq.n	800b246 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800b210:	68f9      	ldr	r1, [r7, #12]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fddc 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b218:	60b8      	str	r0, [r7, #8]
        if (support) {
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00d      	beq.n	800b23c <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	339c      	adds	r3, #156	; 0x9c
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68b8      	ldr	r0, [r7, #8]
 800b22a:	4798      	blx	r3
            delete support;
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d004      	beq.n	800b23c <_ZN11MockSupport5clearEv+0x96>
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	3204      	adds	r2, #4
 800b236:	6812      	ldr	r2, [r2, #0]
 800b238:	4618      	mov	r0, r3
 800b23a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f014 f8af 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	e7e1      	b.n	800b20a <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3338      	adds	r3, #56	; 0x38
 800b24a:	4618      	mov	r0, r3
 800b24c:	f014 f917 	bl	801f47e <_ZN18MockNamedValueList5clearEv>
}
 800b250:	bf00      	nop
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	731a      	strb	r2, [r3, #12]
}
 800b266:	bf00      	nop
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
	...

0800b274 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800b274:	b590      	push	{r4, r7, lr}
 800b276:	b089      	sub	sp, #36	; 0x24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	333c      	adds	r3, #60	; 0x3c
 800b284:	4618      	mov	r0, r3
 800b286:	f002 f859 	bl	800d33c <_ZNK12SimpleString7isEmptyEv>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d004      	beq.n	800b29a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800b290:	6879      	ldr	r1, [r7, #4]
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f001 fcff 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 800b298:	e021      	b.n	800b2de <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800b2a0:	f107 0318 	add.w	r3, r7, #24
 800b2a4:	4910      	ldr	r1, [pc, #64]	; (800b2e8 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f001 fca1 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800b2ac:	f107 0310 	add.w	r3, r7, #16
 800b2b0:	f107 0218 	add.w	r2, r7, #24
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f002 f8b3 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f107 0110 	add.w	r1, r7, #16
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f002 f8ac 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800b2ca:	f107 0310 	add.w	r3, r7, #16
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f002 f845 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800b2d4:	f107 0318 	add.w	r3, r7, #24
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f002 f840 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	3724      	adds	r7, #36	; 0x24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd90      	pop	{r4, r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	080243ec 	.word	0x080243ec

0800b2ec <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3314      	adds	r3, #20
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	2101      	movs	r1, #1
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	4798      	blx	r3
 800b306:	4603      	mov	r3, r0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	3314      	adds	r3, #20
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	2100      	movs	r1, #0
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
}
 800b32a:	bf00      	nop
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800b334:	b590      	push	{r4, r7, lr}
 800b336:	b089      	sub	sp, #36	; 0x24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b346:	f083 0301 	eor.w	r3, r3, #1
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d003      	beq.n	800b358 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800b350:	f010 fbf6 	bl	801bb40 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800b354:	4603      	mov	r3, r0
 800b356:	e041      	b.n	800b3dc <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f000 fb1b 	bl	800b994 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800b35e:	22a5      	movs	r2, #165	; 0xa5
 800b360:	4920      	ldr	r1, [pc, #128]	; (800b3e4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800b362:	2070      	movs	r0, #112	; 0x70
 800b364:	f7ff f880 	bl	800a468 <_ZnwjPKci>
 800b368:	4604      	mov	r4, r0
 800b36a:	68b9      	ldr	r1, [r7, #8]
 800b36c:	4620      	mov	r0, r4
 800b36e:	f00f f8f3 	bl	801a558 <_ZN23MockCheckedExpectedCallC1Ej>
 800b372:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3308      	adds	r3, #8
 800b37a:	681c      	ldr	r4, [r3, #0]
 800b37c:	f107 0314 	add.w	r3, r7, #20
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	68f9      	ldr	r1, [r7, #12]
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff ff75 	bl	800b274 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800b38a:	f107 0314 	add.w	r3, r7, #20
 800b38e:	4619      	mov	r1, r3
 800b390:	69f8      	ldr	r0, [r7, #28]
 800b392:	47a0      	blx	r4
 800b394:	f107 0314 	add.w	r3, r7, #20
 800b398:	4618      	mov	r0, r3
 800b39a:	f001 ffe0 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	7b1b      	ldrb	r3, [r3, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d013      	beq.n	800b3ce <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3310      	adds	r3, #16
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	6892      	ldr	r2, [r2, #8]
 800b3b2:	1c50      	adds	r0, r2, #1
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	6891      	ldr	r1, [r2, #8]
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	440a      	add	r2, r1
 800b3bc:	4601      	mov	r1, r0
 800b3be:	69f8      	ldr	r0, [r7, #28]
 800b3c0:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	689a      	ldr	r2, [r3, #8]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	441a      	add	r2, r3
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3320      	adds	r3, #32
 800b3d2:	69f9      	ldr	r1, [r7, #28]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f010 fd89 	bl	801beec <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800b3da:	69fb      	ldr	r3, [r7, #28]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3724      	adds	r7, #36	; 0x24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd90      	pop	{r4, r7, pc}
 800b3e4:	080243f0 	.word	0x080243f0

0800b3e8 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800b3e8:	b5b0      	push	{r4, r5, r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	605a      	str	r2, [r3, #4]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685d      	ldr	r5, [r3, #4]
 800b3fe:	22b1      	movs	r2, #177	; 0xb1
 800b400:	490a      	ldr	r1, [pc, #40]	; (800b42c <_ZN11MockSupport16createActualCallEv+0x44>)
 800b402:	202c      	movs	r0, #44	; 0x2c
 800b404:	f7ff f830 	bl	800a468 <_ZnwjPKci>
 800b408:	4604      	mov	r4, r0
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	691a      	ldr	r2, [r3, #16]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3320      	adds	r3, #32
 800b412:	4629      	mov	r1, r5
 800b414:	4620      	mov	r0, r4
 800b416:	f00c fbdb 	bl	8017bd0 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800b422:	4618      	mov	r0, r3
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bdb0      	pop	{r4, r5, r7, pc}
 800b42a:	bf00      	nop
 800b42c:	080243f0 	.word	0x080243f0

0800b430 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00d      	beq.n	800b460 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3320      	adds	r3, #32
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f010 fd2a 	bl	801bea4 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800b450:	4603      	mov	r3, r0
 800b452:	f083 0301 	eor.w	r3, r3, #1
 800b456:	b2db      	uxtb	r3, r3
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800b45c:	2301      	movs	r3, #1
 800b45e:	e000      	b.n	800b462 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800b46a:	b590      	push	{r4, r7, lr}
 800b46c:	b087      	sub	sp, #28
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800b474:	f107 030c 	add.w	r3, r7, #12
 800b478:	683a      	ldr	r2, [r7, #0]
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7ff fef9 	bl	800b274 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	2b00      	cmp	r3, #0
 800b488:	d014      	beq.n	800b4b4 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	33c4      	adds	r3, #196	; 0xc4
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4610      	mov	r0, r2
 800b49a:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d004      	beq.n	800b4ae <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	3204      	adds	r2, #4
 800b4a8:	6812      	ldr	r2, [r2, #0]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b4ba:	f083 0301 	eor.w	r3, r3, #1
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d004      	beq.n	800b4ce <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800b4c4:	f00e fcbe 	bl	8019e44 <_ZN21MockIgnoredActualCall8instanceEv>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	461c      	mov	r4, r3
 800b4cc:	e02f      	b.n	800b52e <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00b      	beq.n	800b4f0 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800b4d8:	f00e fc6e 	bl	8019db8 <_ZN19MockActualCallTrace8instanceEv>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	3208      	adds	r2, #8
 800b4e2:	6812      	ldr	r2, [r2, #0]
 800b4e4:	f107 010c 	add.w	r1, r7, #12
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	4790      	blx	r2
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	e01e      	b.n	800b52e <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800b4f0:	f107 030c 	add.w	r3, r7, #12
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7ff ff9a 	bl	800b430 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d004      	beq.n	800b50c <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800b502:	f00e fc9f 	bl	8019e44 <_ZN21MockIgnoredActualCall8instanceEv>
 800b506:	4603      	mov	r3, r0
 800b508:	461c      	mov	r4, r3
 800b50a:	e010      	b.n	800b52e <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	33c0      	adds	r3, #192	; 0xc0
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	4798      	blx	r3
 800b518:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3308      	adds	r3, #8
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f107 020c 	add.w	r2, r7, #12
 800b526:	4611      	mov	r1, r2
 800b528:	6978      	ldr	r0, [r7, #20]
 800b52a:	4798      	blx	r3
    return *call;
 800b52c:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800b52e:	f107 030c 	add.w	r3, r7, #12
 800b532:	4618      	mov	r0, r3
 800b534:	f001 ff13 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800b538:	4623      	mov	r3, r4
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	371c      	adds	r7, #28
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd90      	pop	{r4, r7, pc}

0800b542 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b084      	sub	sp, #16
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2201      	movs	r2, #1
 800b54e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	3338      	adds	r3, #56	; 0x38
 800b556:	4618      	mov	r0, r3
 800b558:	f014 f819 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b55c:	60f8      	str	r0, [r7, #12]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d01a      	beq.n	800b59a <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800b564:	68f9      	ldr	r1, [r7, #12]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fc32 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bf14      	ite	ne
 800b572:	2301      	movne	r3, #1
 800b574:	2300      	moveq	r3, #0
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d009      	beq.n	800b590 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800b57c:	68f9      	ldr	r1, [r7, #12]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fc26 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b584:	4603      	mov	r3, r0
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	3290      	adds	r2, #144	; 0x90
 800b58a:	6812      	ldr	r2, [r2, #0]
 800b58c:	4618      	mov	r0, r3
 800b58e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f013 ff05 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	e7e1      	b.n	800b55e <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800b59a:	bf00      	nop
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	3338      	adds	r3, #56	; 0x38
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f013 ffe9 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b5bc:	60f8      	str	r0, [r7, #12]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d01a      	beq.n	800b5fa <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800b5c4:	68f9      	ldr	r1, [r7, #12]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fc02 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	bf14      	ite	ne
 800b5d2:	2301      	movne	r3, #1
 800b5d4:	2300      	moveq	r3, #0
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d009      	beq.n	800b5f0 <_ZN11MockSupport7disableEv+0x4e>
 800b5dc:	68f9      	ldr	r1, [r7, #12]
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fbf6 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	3284      	adds	r2, #132	; 0x84
 800b5ea:	6812      	ldr	r2, [r2, #0]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f013 fed5 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	e7e1      	b.n	800b5be <_ZN11MockSupport7disableEv+0x1c>
}
 800b5fa:	bf00      	nop
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3338      	adds	r3, #56	; 0x38
 800b616:	4618      	mov	r0, r3
 800b618:	f013 ffb9 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d01a      	beq.n	800b65a <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800b624:	68f9      	ldr	r1, [r7, #12]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fbd2 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	bf14      	ite	ne
 800b632:	2301      	movne	r3, #1
 800b634:	2300      	moveq	r3, #0
 800b636:	b2db      	uxtb	r3, r3
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d009      	beq.n	800b650 <_ZN11MockSupport6enableEv+0x4e>
 800b63c:	68f9      	ldr	r1, [r7, #12]
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fbc6 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b644:	4603      	mov	r3, r0
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	3288      	adds	r2, #136	; 0x88
 800b64a:	6812      	ldr	r2, [r2, #0]
 800b64c:	4618      	mov	r0, r3
 800b64e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f013 fea5 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	e7e1      	b.n	800b61e <_ZN11MockSupport6enableEv+0x1c>
}
 800b65a:	bf00      	nop
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	78fa      	ldrb	r2, [r7, #3]
 800b672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	3338      	adds	r3, #56	; 0x38
 800b67a:	4618      	mov	r0, r3
 800b67c:	f013 ff87 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b680:	60f8      	str	r0, [r7, #12]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d01b      	beq.n	800b6c0 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800b688:	68f9      	ldr	r1, [r7, #12]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fba0 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	bf14      	ite	ne
 800b696:	2301      	movne	r3, #1
 800b698:	2300      	moveq	r3, #0
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00a      	beq.n	800b6b6 <_ZN11MockSupport7tracingEb+0x54>
 800b6a0:	68f9      	ldr	r1, [r7, #12]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fb94 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	328c      	adds	r2, #140	; 0x8c
 800b6ae:	6812      	ldr	r2, [r2, #0]
 800b6b0:	78f9      	ldrb	r1, [r7, #3]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f013 fe72 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b6bc:	60f8      	str	r0, [r7, #12]
 800b6be:	e7e0      	b.n	800b682 <_ZN11MockSupport7tracingEb+0x20>
}
 800b6c0:	bf00      	nop
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3320      	adds	r3, #32
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f010 fbc1 	bl	801be5c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	3338      	adds	r3, #56	; 0x38
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f013 ff53 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b6e8:	60b8      	str	r0, [r7, #8]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d01f      	beq.n	800b730 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800b6f0:	68b9      	ldr	r1, [r7, #8]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fb6c 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	bf14      	ite	ne
 800b6fe:	2301      	movne	r3, #1
 800b700:	2300      	moveq	r3, #0
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00e      	beq.n	800b726 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800b708:	68b9      	ldr	r1, [r7, #8]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fb60 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b710:	4603      	mov	r3, r0
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	3298      	adds	r2, #152	; 0x98
 800b716:	6812      	ldr	r2, [r2, #0]
 800b718:	4618      	mov	r0, r3
 800b71a:	4790      	blx	r2
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	4413      	add	r3, r2
 800b724:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b726:	68b8      	ldr	r0, [r7, #8]
 800b728:	f013 fe3a 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b72c:	60b8      	str	r0, [r7, #8]
 800b72e:	e7dc      	b.n	800b6ea <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	bf14      	ite	ne
 800b736:	2301      	movne	r3, #1
 800b738:	2300      	moveq	r3, #0
 800b73a:	b2db      	uxtb	r3, r3
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b750:	2b00      	cmp	r3, #0
 800b752:	d010      	beq.n	800b776 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	33bc      	adds	r3, #188	; 0xbc
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4610      	mov	r0, r2
 800b764:	4798      	blx	r3
 800b766:	4603      	mov	r3, r0
 800b768:	f083 0301 	eor.w	r3, r3, #1
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b772:	2301      	movs	r3, #1
 800b774:	e000      	b.n	800b778 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800b776:	2300      	movs	r3, #0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800b77c:	2300      	movs	r3, #0
 800b77e:	e02a      	b.n	800b7d6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	3338      	adds	r3, #56	; 0x38
 800b784:	4618      	mov	r0, r3
 800b786:	f013 ff02 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d020      	beq.n	800b7d4 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800b792:	68f9      	ldr	r1, [r7, #12]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fb1b 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00f      	beq.n	800b7c0 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b7a0:	68f9      	ldr	r1, [r7, #12]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fb14 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff ffca 	bl	800b744 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f083 0301 	eor.w	r3, r3, #1
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e000      	b.n	800b7c2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e005      	b.n	800b7d6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f013 fde8 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b7d0:	60f8      	str	r0, [r7, #12]
 800b7d2:	e7db      	b.n	800b78c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800b7d4:	2301      	movs	r3, #1
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b092      	sub	sp, #72	; 0x48
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b7e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f010 fa2c 	bl	801bc48 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f103 0220 	add.w	r2, r3, #32
 800b7f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f010 fbf3 	bl	801bfe8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	3338      	adds	r3, #56	; 0x38
 800b806:	4618      	mov	r0, r3
 800b808:	f013 fec1 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b80c:	6478      	str	r0, [r7, #68]	; 0x44
 800b80e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b810:	2b00      	cmp	r3, #0
 800b812:	d01d      	beq.n	800b850 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800b814:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fada 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bf14      	ite	ne
 800b822:	2301      	movne	r3, #1
 800b824:	2300      	moveq	r3, #0
 800b826:	b2db      	uxtb	r3, r3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00c      	beq.n	800b846 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b82c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 face 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b834:	4603      	mov	r3, r0
 800b836:	f103 0220 	add.w	r2, r3, #32
 800b83a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b83e:	4611      	mov	r1, r2
 800b840:	4618      	mov	r0, r3
 800b842:	f010 fbd1 	bl	801bfe8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b846:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b848:	f013 fdaa 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b84c:	6478      	str	r0, [r7, #68]	; 0x44
 800b84e:	e7de      	b.n	800b80e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	691a      	ldr	r2, [r3, #16]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	330c      	adds	r3, #12
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4610      	mov	r0, r2
 800b860:	4798      	blx	r3
 800b862:	4601      	mov	r1, r0
 800b864:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b868:	f107 0308 	add.w	r3, r7, #8
 800b86c:	4618      	mov	r0, r3
 800b86e:	f011 f9f5 	bl	801cc5c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	33c4      	adds	r3, #196	; 0xc4
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f107 0208 	add.w	r2, r7, #8
 800b87e:	4611      	mov	r1, r2
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b884:	f107 0308 	add.w	r3, r7, #8
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 fe6d 	bl	800c568 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b88e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b892:	4618      	mov	r0, r3
 800b894:	f010 f9ec 	bl	801bc70 <_ZN21MockExpectedCallsListD1Ev>
}
 800b898:	bf00      	nop
 800b89a:	3748      	adds	r7, #72	; 0x48
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b092      	sub	sp, #72	; 0x48
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b8a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f010 f9cb 	bl	801bc48 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f103 0220 	add.w	r2, r3, #32
 800b8b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b8bc:	4611      	mov	r1, r2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f010 fb92 	bl	801bfe8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3338      	adds	r3, #56	; 0x38
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f013 fe60 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b8ce:	6478      	str	r0, [r7, #68]	; 0x44
 800b8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d01d      	beq.n	800b912 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800b8d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fa79 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	bf14      	ite	ne
 800b8e4:	2301      	movne	r3, #1
 800b8e6:	2300      	moveq	r3, #0
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00c      	beq.n	800b908 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b8ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fa6d 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	f103 0220 	add.w	r2, r3, #32
 800b8fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b900:	4611      	mov	r1, r2
 800b902:	4618      	mov	r0, r3
 800b904:	f010 fb70 	bl	801bfe8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b908:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b90a:	f013 fd49 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800b90e:	6478      	str	r0, [r7, #68]	; 0x44
 800b910:	e7de      	b.n	800b8d0 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	691a      	ldr	r2, [r3, #16]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	330c      	adds	r3, #12
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4610      	mov	r0, r2
 800b922:	4798      	blx	r3
 800b924:	4601      	mov	r1, r0
 800b926:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b92a:	f107 0308 	add.w	r3, r7, #8
 800b92e:	4618      	mov	r0, r3
 800b930:	f011 fa38 	bl	801cda4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	33c4      	adds	r3, #196	; 0xc4
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f107 0208 	add.w	r2, r7, #8
 800b940:	4611      	mov	r1, r2
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b946:	f107 0308 	add.w	r3, r7, #8
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 fe2e 	bl	800c5ac <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b950:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b954:	4618      	mov	r0, r3
 800b956:	f010 f98b 	bl	801bc70 <_ZN21MockExpectedCallsListD1Ev>
}
 800b95a:	bf00      	nop
 800b95c:	3748      	adds	r7, #72	; 0x48
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b082      	sub	sp, #8
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	6039      	str	r1, [r7, #0]
    clear();
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	339c      	adds	r3, #156	; 0x9c
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	691a      	ldr	r2, [r3, #16]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	3308      	adds	r3, #8
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6839      	ldr	r1, [r7, #0]
 800b988:	4610      	mov	r0, r2
 800b98a:	4798      	blx	r3
}
 800b98c:	bf00      	nop
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800b99c:	f008 fd0a 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f007 fb78 	bl	8013098 <_ZN10UtestShell10countCheckEv>
}
 800b9a8:	bf00      	nop
 800b9aa:	3708      	adds	r7, #8
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d008      	beq.n	800b9d2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	33c4      	adds	r3, #196	; 0xc4
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	3338      	adds	r3, #56	; 0x38
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f013 fdd9 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800b9dc:	60f8      	str	r0, [r7, #12]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d023      	beq.n	800ba2c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800b9e4:	68f9      	ldr	r1, [r7, #12]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f9f2 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d009      	beq.n	800ba06 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800b9f2:	68f9      	ldr	r1, [r7, #12]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f9eb 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d001      	beq.n	800ba06 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800ba02:	2301      	movs	r3, #1
 800ba04:	e000      	b.n	800ba08 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800ba06:	2300      	movs	r3, #0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00a      	beq.n	800ba22 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800ba0c:	68f9      	ldr	r1, [r7, #12]
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f9de 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ba14:	4603      	mov	r3, r0
 800ba16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	32c4      	adds	r2, #196	; 0xc4
 800ba1c:	6812      	ldr	r2, [r2, #0]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f013 fcbc 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	e7d8      	b.n	800b9de <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800ba2c:	bf00      	nop
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	3320      	adds	r3, #32
 800ba40:	4618      	mov	r0, r3
 800ba42:	f010 f947 	bl	801bcd4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d001      	beq.n	800ba50 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e027      	b.n	800baa0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3338      	adds	r3, #56	; 0x38
 800ba54:	4618      	mov	r0, r3
 800ba56:	f013 fd9a 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d01d      	beq.n	800ba9e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800ba62:	68f9      	ldr	r1, [r7, #12]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f9b3 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00c      	beq.n	800ba8a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800ba70:	68f9      	ldr	r1, [r7, #12]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f9ac 	bl	800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff ffda 	bl	800ba34 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e000      	b.n	800ba8c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800ba90:	2301      	movs	r3, #1
 800ba92:	e005      	b.n	800baa0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f013 fc83 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	e7de      	b.n	800ba5c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff ff7d 	bl	800b9b0 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff fe44 	bl	800b744 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00a      	beq.n	800bad8 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	3398      	adds	r3, #152	; 0x98
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	4798      	blx	r3
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800bad4:	2301      	movs	r3, #1
 800bad6:	e000      	b.n	800bada <_ZN11MockSupport17checkExpectationsEv+0x32>
 800bad8:	2300      	movs	r3, #0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7ff fe7d 	bl	800b7de <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7ff ffa5 	bl	800ba34 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff fed5 	bl	800b8a0 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	3338      	adds	r3, #56	; 0x38
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f013 fd0e 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	bf14      	ite	ne
 800bb1a:	2301      	movne	r3, #1
 800bb1c:	2300      	moveq	r3, #0
 800bb1e:	b2db      	uxtb	r3, r3
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800bb28:	b590      	push	{r4, r7, lr}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	3338      	adds	r3, #56	; 0x38
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f013 fcf9 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bb3e:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d111      	bne.n	800bb6a <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800bb46:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bb4a:	490a      	ldr	r1, [pc, #40]	; (800bb74 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800bb4c:	2038      	movs	r0, #56	; 0x38
 800bb4e:	f7fe fc8b 	bl	800a468 <_ZnwjPKci>
 800bb52:	4604      	mov	r4, r0
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	4620      	mov	r0, r4
 800bb58:	f011 fd6e 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
 800bb5c:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	3338      	adds	r3, #56	; 0x38
 800bb62:	68f9      	ldr	r1, [r7, #12]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f013 fcad 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd90      	pop	{r4, r7, pc}
 800bb74:	080243f0 	.word	0x080243f0

0800bb78 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7ff ffcd 	bl	800bb28 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800bb8e:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	3344      	adds	r3, #68	; 0x44
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	6879      	ldr	r1, [r7, #4]
 800bb9c:	6978      	ldr	r0, [r7, #20]
 800bb9e:	4798      	blx	r3
}
 800bba0:	bf00      	nop
 800bba2:	3718      	adds	r7, #24
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b088      	sub	sp, #32
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	3338      	adds	r3, #56	; 0x38
 800bbb8:	6879      	ldr	r1, [r7, #4]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f013 fcb8 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bbc0:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d111      	bne.n	800bbec <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800bbc8:	f107 0314 	add.w	r3, r7, #20
 800bbcc:	490b      	ldr	r1, [pc, #44]	; (800bbfc <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f001 f80d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800bbd4:	f107 0314 	add.w	r3, r7, #20
 800bbd8:	4619      	mov	r1, r3
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f011 fd2c 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
 800bbe0:	f107 0314 	add.w	r3, r7, #20
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f001 fbba 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800bbea:	e003      	b.n	800bbf4 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800bbec:	69f9      	ldr	r1, [r7, #28]
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f7ff f8a2 	bl	800ad38 <_ZN14MockNamedValueC1ERKS_>
}
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	3720      	adds	r7, #32
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	080243e8 	.word	0x080243e8

0800bc00 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800bc00:	b590      	push	{r4, r7, lr}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800bc0a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bc0e:	4927      	ldr	r1, [pc, #156]	; (800bcac <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800bc10:	2048      	movs	r0, #72	; 0x48
 800bc12:	f7fe fc29 	bl	800a468 <_ZnwjPKci>
 800bc16:	4604      	mov	r4, r0
 800bc18:	6839      	ldr	r1, [r7, #0]
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f7ff f8f8 	bl	800ae10 <_ZN11MockSupportC1ERK12SimpleString>
 800bc20:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	33a4      	adds	r3, #164	; 0xa4
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	6952      	ldr	r2, [r2, #20]
 800bc2e:	4611      	mov	r1, r2
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d005      	beq.n	800bc4a <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3390      	adds	r3, #144	; 0x90
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bc50:	f083 0301 	eor.w	r3, r3, #1
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d005      	beq.n	800bc66 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3384      	adds	r3, #132	; 0x84
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	7b1b      	ldrb	r3, [r3, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d005      	beq.n	800bc7a <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3308      	adds	r3, #8
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	4798      	blx	r3

    newMock->tracing(tracing_);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	338c      	adds	r3, #140	; 0x8c
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800bc88:	4611      	mov	r1, r2
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	33b8      	adds	r3, #184	; 0xb8
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	3230      	adds	r2, #48	; 0x30
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	4798      	blx	r3
    return newMock;
 800bca0:	68fb      	ldr	r3, [r7, #12]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd90      	pop	{r4, r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	080243f0 	.word	0x080243f0

0800bcb0 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800bcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcb2:	b0ab      	sub	sp, #172	; 0xac
 800bcb4:	af04      	add	r7, sp, #16
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800bcba:	f107 0308 	add.w	r3, r7, #8
 800bcbe:	4941      	ldr	r1, [pc, #260]	; (800bdc4 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 ff94 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800bcc6:	f107 0308 	add.w	r3, r7, #8
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f001 fbc3 	bl	800d458 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800bcd2:	f107 0308 	add.w	r3, r7, #8
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff ff10 	bl	800bafe <_ZN11MockSupport7hasDataERK12SimpleString>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d048      	beq.n	800bd76 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800bce4:	f008 fb66 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800bce8:	4604      	mov	r4, r0
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	3324      	adds	r3, #36	; 0x24
 800bcee:	681d      	ldr	r5, [r3, #0]
 800bcf0:	f107 0318 	add.w	r3, r7, #24
 800bcf4:	f107 0208 	add.w	r2, r7, #8
 800bcf8:	6879      	ldr	r1, [r7, #4]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff ff54 	bl	800bba8 <_ZN11MockSupport7getDataERK12SimpleString>
 800bd00:	f107 0310 	add.w	r3, r7, #16
 800bd04:	f107 0218 	add.w	r2, r7, #24
 800bd08:	4611      	mov	r1, r2
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f011 ff63 	bl	801dbd6 <_ZNK14MockNamedValue7getTypeEv>
 800bd10:	f107 0310 	add.w	r3, r7, #16
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 faf5 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	f008 fb5a 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bd20:	4603      	mov	r3, r0
 800bd22:	9302      	str	r3, [sp, #8]
 800bd24:	f240 13bd 	movw	r3, #445	; 0x1bd
 800bd28:	9301      	str	r3, [sp, #4]
 800bd2a:	4b27      	ldr	r3, [pc, #156]	; (800bdc8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	2300      	movs	r3, #0
 800bd30:	4632      	mov	r2, r6
 800bd32:	4926      	ldr	r1, [pc, #152]	; (800bdcc <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800bd34:	4620      	mov	r0, r4
 800bd36:	47a8      	blx	r5
 800bd38:	f107 0310 	add.w	r3, r7, #16
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f001 fb0e 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800bd42:	f107 0318 	add.w	r3, r7, #24
 800bd46:	4618      	mov	r0, r3
 800bd48:	f011 fca0 	bl	801d68c <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800bd4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd50:	f107 0208 	add.w	r2, r7, #8
 800bd54:	6879      	ldr	r1, [r7, #4]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7ff ff26 	bl	800bba8 <_ZN11MockSupport7getDataERK12SimpleString>
 800bd5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd60:	4618      	mov	r0, r3
 800bd62:	f012 fa51 	bl	801e208 <_ZNK14MockNamedValue16getObjectPointerEv>
 800bd66:	4604      	mov	r4, r0
 800bd68:	bf00      	nop
 800bd6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f011 fc8c 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800bd74:	e01b      	b.n	800bdae <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7ff ff41 	bl	800bc00 <_ZN11MockSupport5cloneERK12SimpleString>
 800bd7e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800bd82:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bd86:	4911      	ldr	r1, [pc, #68]	; (800bdcc <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 ff30 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800bd8e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800bd92:	f107 0108 	add.w	r1, r7, #8
 800bd96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7ff feec 	bl	800bb78 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800bda0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800bda4:	4618      	mov	r0, r3
 800bda6:	f001 fada 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return newMock;
 800bdaa:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800bdae:	f107 0308 	add.w	r3, r7, #8
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 fad3 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800bdb8:	4623      	mov	r3, r4
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	379c      	adds	r7, #156	; 0x9c
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	08024408 	.word	0x08024408
 800bdc8:	080243f0 	.word	0x080243f0
 800bdcc:	08024428 	.word	0x08024428

0800bdd0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800bdd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdd4:	b08b      	sub	sp, #44	; 0x2c
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800bddc:	2500      	movs	r5, #0
 800bdde:	2600      	movs	r6, #0
 800bde0:	f107 0308 	add.w	r3, r7, #8
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f013 fb28 	bl	801f43c <_ZNK22MockNamedValueListNode7getTypeEv>
 800bdec:	f04f 0801 	mov.w	r8, #1
 800bdf0:	f107 0310 	add.w	r3, r7, #16
 800bdf4:	492e      	ldr	r1, [pc, #184]	; (800beb0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f000 fef9 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800bdfc:	f04f 0901 	mov.w	r9, #1
 800be00:	f107 0210 	add.w	r2, r7, #16
 800be04:	f107 0308 	add.w	r3, r7, #8
 800be08:	4611      	mov	r1, r2
 800be0a:	4618      	mov	r0, r3
 800be0c:	f001 fab3 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d01a      	beq.n	800be4c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800be16:	f107 0318 	add.w	r3, r7, #24
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f013 fafa 	bl	801f416 <_ZNK22MockNamedValueListNode7getNameEv>
 800be22:	2501      	movs	r5, #1
 800be24:	f107 0320 	add.w	r3, r7, #32
 800be28:	4922      	ldr	r1, [pc, #136]	; (800beb4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800be2a:	4618      	mov	r0, r3
 800be2c:	f000 fedf 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800be30:	2601      	movs	r6, #1
 800be32:	f107 0220 	add.w	r2, r7, #32
 800be36:	f107 0318 	add.w	r3, r7, #24
 800be3a:	4611      	mov	r1, r2
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 ff54 	bl	800ccea <_ZNK12SimpleString8containsERKS_>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d001      	beq.n	800be4c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800be48:	2401      	movs	r4, #1
 800be4a:	e000      	b.n	800be4e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800be4c:	2400      	movs	r4, #0
 800be4e:	2e00      	cmp	r6, #0
 800be50:	d004      	beq.n	800be5c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800be52:	f107 0320 	add.w	r3, r7, #32
 800be56:	4618      	mov	r0, r3
 800be58:	f001 fa81 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800be5c:	2d00      	cmp	r5, #0
 800be5e:	d004      	beq.n	800be6a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800be60:	f107 0318 	add.w	r3, r7, #24
 800be64:	4618      	mov	r0, r3
 800be66:	f001 fa7a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800be6a:	f1b9 0f00 	cmp.w	r9, #0
 800be6e:	d004      	beq.n	800be7a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800be70:	f107 0310 	add.w	r3, r7, #16
 800be74:	4618      	mov	r0, r3
 800be76:	f001 fa72 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800be7a:	f1b8 0f00 	cmp.w	r8, #0
 800be7e:	d004      	beq.n	800be8a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800be80:	f107 0308 	add.w	r3, r7, #8
 800be84:	4618      	mov	r0, r3
 800be86:	f001 fa6a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800be8a:	2c00      	cmp	r4, #0
 800be8c:	d00a      	beq.n	800bea4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800be8e:	6838      	ldr	r0, [r7, #0]
 800be90:	f013 fa92 	bl	801f3b8 <_ZN22MockNamedValueListNode4itemEv>
 800be94:	4603      	mov	r3, r0
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	32a0      	adds	r2, #160	; 0xa0
 800be9a:	6812      	ldr	r2, [r2, #0]
 800be9c:	4618      	mov	r0, r3
 800be9e:	4790      	blx	r2
 800bea0:	4603      	mov	r3, r0
 800bea2:	e000      	b.n	800bea6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	372c      	adds	r7, #44	; 0x2c
 800beaa:	46bd      	mov	sp, r7
 800beac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beb0:	08024428 	.word	0x08024428
 800beb4:	08024408 	.word	0x08024408

0800beb8 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00a      	beq.n	800bee0 <_ZN11MockSupport11returnValueEv+0x28>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3354      	adds	r3, #84	; 0x54
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	4610      	mov	r0, r2
 800bedc:	4798      	blx	r3
 800bede:	e010      	b.n	800bf02 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800bee0:	f107 0308 	add.w	r3, r7, #8
 800bee4:	4909      	ldr	r1, [pc, #36]	; (800bf0c <_ZN11MockSupport11returnValueEv+0x54>)
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 fe81 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800beec:	f107 0308 	add.w	r3, r7, #8
 800bef0:	4619      	mov	r1, r3
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f011 fba0 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
 800bef8:	f107 0308 	add.w	r3, r7, #8
 800befc:	4618      	mov	r0, r3
 800befe:	f001 fa2e 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	080243e8 	.word	0x080243e8

0800bf10 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800bf10:	b590      	push	{r4, r7, lr}
 800bf12:	b091      	sub	sp, #68	; 0x44
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	3320      	adds	r3, #32
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f107 0208 	add.w	r2, r7, #8
 800bf24:	6879      	ldr	r1, [r7, #4]
 800bf26:	4610      	mov	r0, r2
 800bf28:	4798      	blx	r3
 800bf2a:	f107 0308 	add.w	r3, r7, #8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f011 fe60 	bl	801dbf4 <_ZNK14MockNamedValue12getBoolValueEv>
 800bf34:	4603      	mov	r3, r0
 800bf36:	461c      	mov	r4, r3
 800bf38:	bf00      	nop
 800bf3a:	f107 0308 	add.w	r3, r7, #8
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f011 fba4 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800bf44:	4623      	mov	r3, r4
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3744      	adds	r7, #68	; 0x44
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd90      	pop	{r4, r7, pc}

0800bf4e <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800bf4e:	b590      	push	{r4, r7, lr}
 800bf50:	b091      	sub	sp, #68	; 0x44
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3320      	adds	r3, #32
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f107 0208 	add.w	r2, r7, #8
 800bf62:	6879      	ldr	r1, [r7, #4]
 800bf64:	4610      	mov	r0, r2
 800bf66:	4798      	blx	r3
 800bf68:	f107 0308 	add.w	r3, r7, #8
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f011 fe69 	bl	801dc44 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800bf72:	4604      	mov	r4, r0
 800bf74:	bf00      	nop
 800bf76:	f107 0308 	add.w	r3, r7, #8
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f011 fb86 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800bf80:	4623      	mov	r3, r4
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3744      	adds	r7, #68	; 0x44
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd90      	pop	{r4, r7, pc}

0800bf8a <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800bf8a:	b590      	push	{r4, r7, lr}
 800bf8c:	b091      	sub	sp, #68	; 0x44
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	3320      	adds	r3, #32
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f107 0208 	add.w	r2, r7, #8
 800bf9e:	6879      	ldr	r1, [r7, #4]
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	4798      	blx	r3
 800bfa4:	f107 0308 	add.w	r3, r7, #8
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f011 fe9b 	bl	801dce4 <_ZNK14MockNamedValue11getIntValueEv>
 800bfae:	4604      	mov	r4, r0
 800bfb0:	bf00      	nop
 800bfb2:	f107 0308 	add.w	r3, r7, #8
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f011 fb68 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800bfbc:	4623      	mov	r3, r4
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3744      	adds	r7, #68	; 0x44
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd90      	pop	{r4, r7, pc}

0800bfc6 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b082      	sub	sp, #8
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	331c      	adds	r3, #28
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	4798      	blx	r3
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d007      	beq.n	800bff2 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	335c      	adds	r3, #92	; 0x5c
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	4798      	blx	r3
 800bfee:	4603      	mov	r3, r0
 800bff0:	e000      	b.n	800bff4 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800bff2:	683b      	ldr	r3, [r7, #0]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	331c      	adds	r3, #28
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	4798      	blx	r3
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00a      	beq.n	800c030 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3368      	adds	r3, #104	; 0x68
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	4798      	blx	r3
 800c026:	eeb0 7a40 	vmov.f32	s14, s0
 800c02a:	eef0 7a60 	vmov.f32	s15, s1
 800c02e:	e001      	b.n	800c034 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800c030:	ed97 7b00 	vldr	d7, [r7]
}
 800c034:	eeb0 0a47 	vmov.f32	s0, s14
 800c038:	eef0 0a67 	vmov.f32	s1, s15
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	331c      	adds	r3, #28
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	4798      	blx	r3
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d007      	beq.n	800c06e <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3338      	adds	r3, #56	; 0x38
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	4798      	blx	r3
 800c06a:	4603      	mov	r3, r0
 800c06c:	e000      	b.n	800c070 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800c06e:	683b      	ldr	r3, [r7, #0]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	331c      	adds	r3, #28
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	4798      	blx	r3
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d007      	beq.n	800c0a6 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3324      	adds	r3, #36	; 0x24
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	4798      	blx	r3
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	e000      	b.n	800c0a8 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800c0a6:	78fb      	ldrb	r3, [r7, #3]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	331c      	adds	r3, #28
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	4798      	blx	r3
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d007      	beq.n	800c0dc <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	332c      	adds	r3, #44	; 0x2c
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	4798      	blx	r3
 800c0d8:	4603      	mov	r3, r0
 800c0da:	e000      	b.n	800c0de <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800c0dc:	683b      	ldr	r3, [r7, #0]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b082      	sub	sp, #8
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	331c      	adds	r3, #28
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	4798      	blx	r3
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d007      	beq.n	800c112 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3334      	adds	r3, #52	; 0x34
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	4798      	blx	r3
 800c10e:	4603      	mov	r3, r0
 800c110:	e000      	b.n	800c114 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800c112:	683b      	ldr	r3, [r7, #0]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	331c      	adds	r3, #28
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	4798      	blx	r3
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d007      	beq.n	800c148 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3340      	adds	r3, #64	; 0x40
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	4798      	blx	r3
 800c144:	4603      	mov	r3, r0
 800c146:	e000      	b.n	800c14a <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800c148:	683b      	ldr	r3, [r7, #0]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800c152:	b590      	push	{r4, r7, lr}
 800c154:	b091      	sub	sp, #68	; 0x44
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	3320      	adds	r3, #32
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f107 0208 	add.w	r2, r7, #8
 800c166:	6879      	ldr	r1, [r7, #4]
 800c168:	4610      	mov	r0, r2
 800c16a:	4798      	blx	r3
 800c16c:	f107 0308 	add.w	r3, r7, #8
 800c170:	4618      	mov	r0, r3
 800c172:	f011 fddf 	bl	801dd34 <_ZNK14MockNamedValue15getLongIntValueEv>
 800c176:	4604      	mov	r4, r0
 800c178:	bf00      	nop
 800c17a:	f107 0308 	add.w	r3, r7, #8
 800c17e:	4618      	mov	r0, r3
 800c180:	f011 fa84 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800c184:	4623      	mov	r3, r4
}
 800c186:	4618      	mov	r0, r3
 800c188:	3744      	adds	r7, #68	; 0x44
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd90      	pop	{r4, r7, pc}

0800c18e <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800c18e:	b590      	push	{r4, r7, lr}
 800c190:	b091      	sub	sp, #68	; 0x44
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3320      	adds	r3, #32
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f107 0208 	add.w	r2, r7, #8
 800c1a2:	6879      	ldr	r1, [r7, #4]
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	4798      	blx	r3
 800c1a8:	f107 0308 	add.w	r3, r7, #8
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f011 fe23 	bl	801ddf8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	bf00      	nop
 800c1b6:	f107 0308 	add.w	r3, r7, #8
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f011 fa66 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800c1c0:	4623      	mov	r3, r4
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3744      	adds	r7, #68	; 0x44
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd90      	pop	{r4, r7, pc}
	...

0800c1cc <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800c1cc:	b5b0      	push	{r4, r5, r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af02      	add	r7, sp, #8
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800c1d6:	f008 f8ed 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800c1da:	4604      	mov	r4, r0
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	3368      	adds	r3, #104	; 0x68
 800c1e0:	681d      	ldr	r5, [r3, #0]
 800c1e2:	f008 f8f7 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	f240 2345 	movw	r3, #581	; 0x245
 800c1ee:	4a06      	ldr	r2, [pc, #24]	; (800c208 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800c1f0:	4906      	ldr	r1, [pc, #24]	; (800c20c <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	47a8      	blx	r5
    return cpputest_longlong(0);
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7fe fd2f 	bl	800ac5c <_ZN17cpputest_longlongC1Ei>
}
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bdb0      	pop	{r4, r5, r7, pc}
 800c206:	bf00      	nop
 800c208:	080243f0 	.word	0x080243f0
 800c20c:	08024434 	.word	0x08024434

0800c210 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800c210:	b5b0      	push	{r4, r5, r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af02      	add	r7, sp, #8
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800c21a:	f008 f8cb 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800c21e:	4604      	mov	r4, r0
 800c220:	6823      	ldr	r3, [r4, #0]
 800c222:	3368      	adds	r3, #104	; 0x68
 800c224:	681d      	ldr	r5, [r3, #0]
 800c226:	f008 f8d5 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c22a:	4603      	mov	r3, r0
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	f240 234b 	movw	r3, #587	; 0x24b
 800c232:	4a06      	ldr	r2, [pc, #24]	; (800c24c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800c234:	4906      	ldr	r1, [pc, #24]	; (800c250 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800c236:	4620      	mov	r0, r4
 800c238:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800c23a:	2100      	movs	r1, #0
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7fe fd19 	bl	800ac74 <_ZN18cpputest_ulonglongC1Ei>
}
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bdb0      	pop	{r4, r5, r7, pc}
 800c24a:	bf00      	nop
 800c24c:	080243f0 	.word	0x080243f0
 800c250:	08024454 	.word	0x08024454

0800c254 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800c254:	b5b0      	push	{r4, r5, r7, lr}
 800c256:	b086      	sub	sp, #24
 800c258:	af02      	add	r7, sp, #8
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	4639      	mov	r1, r7
 800c260:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800c264:	f008 f8a6 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800c268:	4604      	mov	r4, r0
 800c26a:	6823      	ldr	r3, [r4, #0]
 800c26c:	3368      	adds	r3, #104	; 0x68
 800c26e:	681d      	ldr	r5, [r3, #0]
 800c270:	f008 f8b0 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c274:	4603      	mov	r3, r0
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	f240 2351 	movw	r3, #593	; 0x251
 800c27c:	4a06      	ldr	r2, [pc, #24]	; (800c298 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800c27e:	4907      	ldr	r1, [pc, #28]	; (800c29c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800c280:	4620      	mov	r0, r4
 800c282:	47a8      	blx	r5
    return defaultValue;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	461a      	mov	r2, r3
 800c288:	463b      	mov	r3, r7
 800c28a:	cb03      	ldmia	r3!, {r0, r1}
 800c28c:	6010      	str	r0, [r2, #0]
 800c28e:	6051      	str	r1, [r2, #4]
}
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bdb0      	pop	{r4, r5, r7, pc}
 800c298:	080243f0 	.word	0x080243f0
 800c29c:	08024434 	.word	0x08024434

0800c2a0 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800c2a0:	b5b0      	push	{r4, r5, r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af02      	add	r7, sp, #8
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800c2b0:	f008 f880 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	6823      	ldr	r3, [r4, #0]
 800c2b8:	3368      	adds	r3, #104	; 0x68
 800c2ba:	681d      	ldr	r5, [r3, #0]
 800c2bc:	f008 f88a 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	f240 2357 	movw	r3, #599	; 0x257
 800c2c8:	4a06      	ldr	r2, [pc, #24]	; (800c2e4 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800c2ca:	4907      	ldr	r1, [pc, #28]	; (800c2e8 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	47a8      	blx	r5
    return defaultValue;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	463b      	mov	r3, r7
 800c2d6:	cb03      	ldmia	r3!, {r0, r1}
 800c2d8:	6010      	str	r0, [r2, #0]
 800c2da:	6051      	str	r1, [r2, #4]
}
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c2e4:	080243f0 	.word	0x080243f0
 800c2e8:	08024454 	.word	0x08024454

0800c2ec <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800c2ec:	b590      	push	{r4, r7, lr}
 800c2ee:	b091      	sub	sp, #68	; 0x44
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3320      	adds	r3, #32
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f107 0208 	add.w	r2, r7, #8
 800c300:	6879      	ldr	r1, [r7, #4]
 800c302:	4610      	mov	r0, r2
 800c304:	4798      	blx	r3
 800c306:	f107 0308 	add.w	r3, r7, #8
 800c30a:	4618      	mov	r0, r3
 800c30c:	f011 fea8 	bl	801e060 <_ZNK14MockNamedValue14getStringValueEv>
 800c310:	4604      	mov	r4, r0
 800c312:	bf00      	nop
 800c314:	f107 0308 	add.w	r3, r7, #8
 800c318:	4618      	mov	r0, r3
 800c31a:	f011 f9b7 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800c31e:	4623      	mov	r3, r4
}
 800c320:	4618      	mov	r0, r3
 800c322:	3744      	adds	r7, #68	; 0x44
 800c324:	46bd      	mov	sp, r7
 800c326:	bd90      	pop	{r4, r7, pc}

0800c328 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	ed2d 8b02 	vpush	{d8}
 800c32e:	b090      	sub	sp, #64	; 0x40
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3320      	adds	r3, #32
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f107 0208 	add.w	r2, r7, #8
 800c340:	6879      	ldr	r1, [r7, #4]
 800c342:	4610      	mov	r0, r2
 800c344:	4798      	blx	r3
 800c346:	f107 0308 	add.w	r3, r7, #8
 800c34a:	4618      	mov	r0, r3
 800c34c:	f011 fe2c 	bl	801dfa8 <_ZNK14MockNamedValue14getDoubleValueEv>
 800c350:	eeb0 8a40 	vmov.f32	s16, s0
 800c354:	eef0 8a60 	vmov.f32	s17, s1
 800c358:	bf00      	nop
 800c35a:	f107 0308 	add.w	r3, r7, #8
 800c35e:	4618      	mov	r0, r3
 800c360:	f011 f994 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800c364:	eeb0 7a48 	vmov.f32	s14, s16
 800c368:	eef0 7a68 	vmov.f32	s15, s17
}
 800c36c:	eeb0 0a47 	vmov.f32	s0, s14
 800c370:	eef0 0a67 	vmov.f32	s1, s15
 800c374:	3740      	adds	r7, #64	; 0x40
 800c376:	46bd      	mov	sp, r7
 800c378:	ecbd 8b02 	vpop	{d8}
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	331c      	adds	r3, #28
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	4798      	blx	r3
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d007      	beq.n	800c3aa <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	336c      	adds	r3, #108	; 0x6c
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	4798      	blx	r3
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	e000      	b.n	800c3ac <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800c3aa:	683b      	ldr	r3, [r7, #0]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	331c      	adds	r3, #28
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	4798      	blx	r3
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d007      	beq.n	800c3e0 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	3378      	adds	r3, #120	; 0x78
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	4798      	blx	r3
 800c3dc:	4603      	mov	r3, r0
 800c3de:	e000      	b.n	800c3e2 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800c3e0:	683b      	ldr	r3, [r7, #0]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b082      	sub	sp, #8
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	331c      	adds	r3, #28
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	4798      	blx	r3
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d007      	beq.n	800c416 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3380      	adds	r3, #128	; 0x80
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	4798      	blx	r3
 800c412:	4603      	mov	r3, r0
 800c414:	e000      	b.n	800c418 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800c416:	683b      	ldr	r3, [r7, #0]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800c420:	b590      	push	{r4, r7, lr}
 800c422:	b091      	sub	sp, #68	; 0x44
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3320      	adds	r3, #32
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f107 0208 	add.w	r2, r7, #8
 800c434:	6879      	ldr	r1, [r7, #4]
 800c436:	4610      	mov	r0, r2
 800c438:	4798      	blx	r3
 800c43a:	f107 0308 	add.w	r3, r7, #8
 800c43e:	4618      	mov	r0, r3
 800c440:	f011 fe36 	bl	801e0b0 <_ZNK14MockNamedValue15getPointerValueEv>
 800c444:	4604      	mov	r4, r0
 800c446:	bf00      	nop
 800c448:	f107 0308 	add.w	r3, r7, #8
 800c44c:	4618      	mov	r0, r3
 800c44e:	f011 f91d 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800c452:	4623      	mov	r3, r4
}
 800c454:	4618      	mov	r0, r3
 800c456:	3744      	adds	r7, #68	; 0x44
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd90      	pop	{r4, r7, pc}

0800c45c <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800c45c:	b590      	push	{r4, r7, lr}
 800c45e:	b091      	sub	sp, #68	; 0x44
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3320      	adds	r3, #32
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f107 0208 	add.w	r2, r7, #8
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	4610      	mov	r0, r2
 800c474:	4798      	blx	r3
 800c476:	f107 0308 	add.w	r3, r7, #8
 800c47a:	4618      	mov	r0, r3
 800c47c:	f011 fe40 	bl	801e100 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800c480:	4604      	mov	r4, r0
 800c482:	bf00      	nop
 800c484:	f107 0308 	add.w	r3, r7, #8
 800c488:	4618      	mov	r0, r3
 800c48a:	f011 f8ff 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800c48e:	4623      	mov	r3, r4
}
 800c490:	4618      	mov	r0, r3
 800c492:	3744      	adds	r7, #68	; 0x44
 800c494:	46bd      	mov	sp, r7
 800c496:	bd90      	pop	{r4, r7, pc}

0800c498 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800c498:	b590      	push	{r4, r7, lr}
 800c49a:	b091      	sub	sp, #68	; 0x44
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3320      	adds	r3, #32
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f107 0208 	add.w	r2, r7, #8
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	4798      	blx	r3
 800c4b2:	f107 0308 	add.w	r3, r7, #8
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f011 fe4a 	bl	801e150 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800c4bc:	4604      	mov	r4, r0
 800c4be:	bf00      	nop
 800c4c0:	f107 0308 	add.w	r3, r7, #8
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f011 f8e1 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 800c4ca:	4623      	mov	r3, r4
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3744      	adds	r7, #68	; 0x44
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd90      	pop	{r4, r7, pc}

0800c4d4 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00a      	beq.n	800c4fa <_ZN11MockSupport14hasReturnValueEv+0x26>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3350      	adds	r3, #80	; 0x50
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4610      	mov	r0, r2
 800c4f4:	4798      	blx	r3
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	e000      	b.n	800c4fc <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <_Z41__static_initialization_and_destruction_0ii>:
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d115      	bne.n	800c540 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d110      	bne.n	800c540 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800c51e:	f107 0308 	add.w	r3, r7, #8
 800c522:	490f      	ldr	r1, [pc, #60]	; (800c560 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c524:	4618      	mov	r0, r3
 800c526:	f000 fb62 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800c52a:	f107 0308 	add.w	r3, r7, #8
 800c52e:	4619      	mov	r1, r3
 800c530:	480c      	ldr	r0, [pc, #48]	; (800c564 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c532:	f7fe fc6d 	bl	800ae10 <_ZN11MockSupportC1ERK12SimpleString>
 800c536:	f107 0308 	add.w	r3, r7, #8
 800c53a:	4618      	mov	r0, r3
 800c53c:	f000 ff0f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d107      	bne.n	800c556 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d102      	bne.n	800c556 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800c550:	4804      	ldr	r0, [pc, #16]	; (800c564 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c552:	f7fe fca7 	bl	800aea4 <_ZN11MockSupportD1Ev>
}
 800c556:	bf00      	nop
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	080243e8 	.word	0x080243e8
 800c564:	20000858 	.word	0x20000858

0800c568 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	4a05      	ldr	r2, [pc, #20]	; (800c588 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4618      	mov	r0, r3
 800c57a:	f7fe fbbb 	bl	800acf4 <_ZN11MockFailureD1Ev>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4618      	mov	r0, r3
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	08028368 	.word	0x08028368

0800c58c <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff ffe7 	bl	800c568 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800c59a:	2134      	movs	r1, #52	; 0x34
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7fd ff77 	bl	800a490 <_ZdlPvj>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	4a05      	ldr	r2, [pc, #20]	; (800c5cc <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	601a      	str	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7fe fb99 	bl	800acf4 <_ZN11MockFailureD1Ev>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	0802833c 	.word	0x0802833c

0800c5d0 <_ZN20MockCallOrderFailureD0Ev>:
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7ff ffe7 	bl	800c5ac <_ZN20MockCallOrderFailureD1Ev>
 800c5de:	2134      	movs	r1, #52	; 0x34
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f7fd ff55 	bl	800a490 <_ZdlPvj>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c5f8:	2001      	movs	r0, #1
 800c5fa:	f7ff ff83 	bl	800c504 <_Z41__static_initialization_and_destruction_0ii>
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800c600:	b580      	push	{r7, lr}
 800c602:	af00      	add	r7, sp, #0
 800c604:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c608:	2000      	movs	r0, #0
 800c60a:	f7ff ff7b 	bl	800c504 <_Z41__static_initialization_and_destruction_0ii>
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800c618:	4b05      	ldr	r3, [pc, #20]	; (800c630 <_ZN11SimpleMutexC1Ev+0x20>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4798      	blx	r3
 800c61e:	4602      	mov	r2, r0
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	601a      	str	r2, [r3, #0]
}
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	200000f0 	.word	0x200000f0

0800c634 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800c63c:	4b05      	ldr	r3, [pc, #20]	; (800c654 <_ZN11SimpleMutexD1Ev+0x20>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	6812      	ldr	r2, [r2, #0]
 800c644:	4610      	mov	r0, r2
 800c646:	4798      	blx	r3
}
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4618      	mov	r0, r3
 800c64c:	3708      	adds	r7, #8
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	200000fc 	.word	0x200000fc

0800c658 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800c660:	4b04      	ldr	r3, [pc, #16]	; (800c674 <_ZN11SimpleMutex4LockEv+0x1c>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	6812      	ldr	r2, [r2, #0]
 800c668:	4610      	mov	r0, r2
 800c66a:	4798      	blx	r3
}
 800c66c:	bf00      	nop
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	200000f4 	.word	0x200000f4

0800c678 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800c680:	4b04      	ldr	r3, [pc, #16]	; (800c694 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	6812      	ldr	r2, [r2, #0]
 800c688:	4610      	mov	r0, r2
 800c68a:	4798      	blx	r3
}
 800c68c:	bf00      	nop
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	200000f8 	.word	0x200000f8

0800c698 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7ff ffd3 	bl	800c658 <_ZN11SimpleMutex4LockEv>
}
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7ff ffd5 	bl	800c678 <_ZN11SimpleMutex6UnlockEv>
}
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800c6dc:	4b05      	ldr	r3, [pc, #20]	; (800c6f4 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d103      	bne.n	800c6ec <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800c6e4:	f003 fd7a 	bl	80101dc <_Z24defaultNewArrayAllocatorv>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	e001      	b.n	800c6f0 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800c6ec:	4b01      	ldr	r3, [pc, #4]	; (800c6f4 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	200008a0 	.word	0x200008a0

0800c6f8 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800c6f8:	b590      	push	{r4, r7, lr}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800c704:	f7ff ffe8 	bl	800c6d8 <_ZN12SimpleString18getStringAllocatorEv>
 800c708:	6803      	ldr	r3, [r0, #0]
 800c70a:	3308      	adds	r3, #8
 800c70c:	681c      	ldr	r4, [r3, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	68f9      	ldr	r1, [r7, #12]
 800c714:	47a0      	blx	r4
 800c716:	4603      	mov	r3, r0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3714      	adds	r7, #20
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd90      	pop	{r4, r7, pc}

0800c720 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800c720:	b590      	push	{r4, r7, lr}
 800c722:	b087      	sub	sp, #28
 800c724:	af02      	add	r7, sp, #8
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
 800c72c:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800c72e:	f7ff ffd3 	bl	800c6d8 <_ZN12SimpleString18getStringAllocatorEv>
 800c732:	6803      	ldr	r3, [r0, #0]
 800c734:	330c      	adds	r3, #12
 800c736:	681c      	ldr	r4, [r3, #0]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	9300      	str	r3, [sp, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	68f9      	ldr	r1, [r7, #12]
 800c742:	47a0      	blx	r4
}
 800c744:	bf00      	nop
 800c746:	3714      	adds	r7, #20
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd90      	pop	{r4, r7, pc}

0800c74c <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800c754:	2284      	movs	r2, #132	; 0x84
 800c756:	4906      	ldr	r1, [pc, #24]	; (800c770 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800c758:	2001      	movs	r0, #1
 800c75a:	f7ff ffcd 	bl	800c6f8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c75e:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	701a      	strb	r2, [r3, #0]
    return empty;
 800c766:	68fb      	ldr	r3, [r7, #12]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	08024480 	.word	0x08024480

0800c774 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	4618      	mov	r0, r3
 800c782:	f001 f809 	bl	800d798 <_ZN12SimpleString7isSpaceEc>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <_ZN12SimpleString4AtoUEPKc+0x20>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3301      	adds	r3, #1
 800c790:	607b      	str	r3, [r7, #4]
 800c792:	e7f3      	b.n	800c77c <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 ffe7 	bl	800d770 <_ZN12SimpleString7isDigitEc>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d005      	beq.n	800c7b4 <_ZN12SimpleString4AtoUEPKc+0x40>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	2b2f      	cmp	r3, #47	; 0x2f
 800c7ae:	d901      	bls.n	800c7b4 <_ZN12SimpleString4AtoUEPKc+0x40>
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e000      	b.n	800c7b6 <_ZN12SimpleString4AtoUEPKc+0x42>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d010      	beq.n	800c7dc <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	4413      	add	r3, r2
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	3b30      	subs	r3, #48	; 0x30
 800c7d2:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	607b      	str	r3, [r7, #4]
 800c7da:	e7dd      	b.n	800c798 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f000 ffd0 	bl	800d798 <_ZN12SimpleString7isSpaceEc>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d003      	beq.n	800c806 <_ZN12SimpleString4AtoIEPKc+0x20>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	3301      	adds	r3, #1
 800c802:	607b      	str	r3, [r7, #4]
 800c804:	e7f3      	b.n	800c7ee <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800c80c:	7afb      	ldrb	r3, [r7, #11]
 800c80e:	2b2d      	cmp	r3, #45	; 0x2d
 800c810:	d002      	beq.n	800c818 <_ZN12SimpleString4AtoIEPKc+0x32>
 800c812:	7afb      	ldrb	r3, [r7, #11]
 800c814:	2b2b      	cmp	r3, #43	; 0x2b
 800c816:	d102      	bne.n	800c81e <_ZN12SimpleString4AtoIEPKc+0x38>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	3301      	adds	r3, #1
 800c81c:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	4618      	mov	r0, r3
 800c828:	f000 ffa2 	bl	800d770 <_ZN12SimpleString7isDigitEc>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00f      	beq.n	800c852 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	4613      	mov	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4413      	add	r3, r2
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	3b30      	subs	r3, #48	; 0x30
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	4413      	add	r3, r2
 800c848:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3301      	adds	r3, #1
 800c84e:	607b      	str	r3, [r7, #4]
 800c850:	e7e7      	b.n	800c822 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800c852:	7afb      	ldrb	r3, [r7, #11]
 800c854:	2b2d      	cmp	r3, #45	; 0x2d
 800c856:	d102      	bne.n	800c85e <_ZN12SimpleString4AtoIEPKc+0x78>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	425b      	negs	r3, r3
 800c85c:	e000      	b.n	800c860 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800c85e:	68fb      	ldr	r3, [r7, #12]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00c      	beq.n	800c894 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	781a      	ldrb	r2, [r3, #0]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	429a      	cmp	r2, r3
 800c884:	d106      	bne.n	800c894 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	3301      	adds	r3, #1
 800c88a:	607b      	str	r3, [r7, #4]
       ++s2;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	3301      	adds	r3, #1
 800c890:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c892:	e7ee      	b.n	800c872 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	461a      	mov	r2, r3
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	1ad3      	subs	r3, r2, r3
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800c8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b8:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	60fb      	str	r3, [r7, #12]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	607a      	str	r2, [r7, #4]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	bf14      	ite	ne
 800c8cc:	2301      	movne	r3, #1
 800c8ce:	2300      	moveq	r3, #0
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d000      	beq.n	800c8d8 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800c8d6:	e7f0      	b.n	800c8ba <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b085      	sub	sp, #20
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	60f8      	str	r0, [r7, #12]
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d013      	beq.n	800c920 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00f      	beq.n	800c920 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	781a      	ldrb	r2, [r3, #0]
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d109      	bne.n	800c920 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	3b01      	subs	r3, #1
 800c910:	607b      	str	r3, [r7, #4]
        ++s1;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	3301      	adds	r3, #1
 800c916:	60fb      	str	r3, [r7, #12]
        ++s2;
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	3301      	adds	r3, #1
 800c91c:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800c91e:	e7e8      	b.n	800c8f2 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d006      	beq.n	800c934 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	e000      	b.n	800c936 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3714      	adds	r7, #20
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr

0800c942 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800c942:	b480      	push	{r7}
 800c944:	b087      	sub	sp, #28
 800c946:	af00      	add	r7, sp, #0
 800c948:	60f8      	str	r0, [r7, #12]
 800c94a:	60b9      	str	r1, [r7, #8]
 800c94c:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d002      	beq.n	800c95e <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	e01e      	b.n	800c9a0 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	781a      	ldrb	r2, [r3, #0]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	3b01      	subs	r3, #1
 800c96e:	607b      	str	r3, [r7, #4]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d005      	beq.n	800c982 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800c97e:	2301      	movs	r3, #1
 800c980:	e000      	b.n	800c984 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800c982:	2300      	movs	r3, #0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00a      	beq.n	800c99e <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	3301      	adds	r3, #1
 800c98c:	60bb      	str	r3, [r7, #8]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	3301      	adds	r3, #1
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	781a      	ldrb	r2, [r3, #0]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800c99c:	e7e5      	b.n	800c96a <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800c99e:	697b      	ldr	r3, [r7, #20]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	371c      	adds	r7, #28
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	e01b      	b.n	800c9fa <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d016      	beq.n	800c9f8 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800c9ca:	6838      	ldr	r0, [r7, #0]
 800c9cc:	f7ff ff6e 	bl	800c8ac <_ZN12SimpleString6StrLenEPKc>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	6839      	ldr	r1, [r7, #0]
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff ff85 	bl	800c8e6 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	bf0c      	ite	eq
 800c9e2:	2301      	moveq	r3, #1
 800c9e4:	2300      	movne	r3, #0
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	e004      	b.n	800c9fa <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	607b      	str	r3, [r7, #4]
 800c9f6:	e7e4      	b.n	800c9c2 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b082      	sub	sp, #8
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	4603      	mov	r3, r0
 800ca0a:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800ca0c:	79fb      	ldrb	r3, [r7, #7]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f000 fed9 	bl	800d7c6 <_ZN12SimpleString7isUpperEc>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <_ZN12SimpleString7ToLowerEc+0x20>
 800ca1a:	79fb      	ldrb	r3, [r7, #7]
 800ca1c:	3320      	adds	r3, #32
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	e000      	b.n	800ca24 <_ZN12SimpleString7ToLowerEc+0x22>
 800ca22:	79fb      	ldrb	r3, [r7, #7]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	613b      	str	r3, [r7, #16]

    while (n--)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	1e5a      	subs	r2, r3, #1
 800ca44:	607a      	str	r2, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	bf14      	ite	ne
 800ca4a:	2301      	movne	r3, #1
 800ca4c:	2300      	moveq	r3, #0
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d013      	beq.n	800ca7c <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	781a      	ldrb	r2, [r3, #0]
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d006      	beq.n	800ca6e <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	461a      	mov	r2, r3
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	e007      	b.n	800ca7e <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	3301      	adds	r3, #1
 800ca72:	617b      	str	r3, [r7, #20]
            ++p2;
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	3301      	adds	r3, #1
 800ca78:	613b      	str	r3, [r7, #16]
    while (n--)
 800ca7a:	e7e1      	b.n	800ca40 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	371c      	adds	r7, #28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
	...

0800ca8c <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00d      	beq.n	800cab8 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6818      	ldr	r0, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6859      	ldr	r1, [r3, #4]
 800caa4:	23ee      	movs	r3, #238	; 0xee
 800caa6:	4a06      	ldr	r2, [pc, #24]	; (800cac0 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800caa8:	f7ff fe3a 	bl	800c720 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	605a      	str	r2, [r3, #4]
    }
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	08024480 	.word	0x08024480

0800cac4 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff ffdd 	bl	800ca8c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2201      	movs	r2, #1
 800cad6:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7ff fe37 	bl	800c74c <_ZNK12SimpleString14getEmptyStringEv>
 800cade:	4602      	mov	r2, r0
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	601a      	str	r2, [r3, #0]
}
 800cae4:	bf00      	nop
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f7ff ffc7 	bl	800ca8c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	68b8      	ldr	r0, [r7, #8]
 800cb0c:	f000 fe12 	bl	800d734 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800cb10:	4602      	mov	r2, r0
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	601a      	str	r2, [r3, #0]
}
 800cb16:	bf00      	nop
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
	...

0800cb20 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7ff ffae 	bl	800ca8c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	f240 1209 	movw	r2, #265	; 0x109
 800cb3e:	4907      	ldr	r1, [pc, #28]	; (800cb5c <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7ff fdd9 	bl	800c6f8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800cb46:	4602      	mov	r2, r0
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2200      	movs	r2, #0
 800cb52:	701a      	strb	r2, [r3, #0]
}
 800cb54:	bf00      	nop
 800cb56:	3708      	adds	r7, #8
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	08024480 	.word	0x08024480

0800cb60 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f7ff ff8d 	bl	800ca8c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	601a      	str	r2, [r3, #0]
}
 800cb7e:	bf00      	nop
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800cb86:	b590      	push	{r4, r7, lr}
 800cb88:	b083      	sub	sp, #12
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	681c      	ldr	r4, [r3, #0]
 800cb94:	6838      	ldr	r0, [r7, #0]
 800cb96:	f000 fbc1 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	461a      	mov	r2, r3
 800cba0:	4621      	mov	r1, r4
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7ff ffa2 	bl	800caec <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd90      	pop	{r4, r7, pc}

0800cbb0 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800cbba:	6838      	ldr	r0, [r7, #0]
 800cbbc:	f7ff fe76 	bl	800c8ac <_ZN12SimpleString6StrLenEPKc>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7ff ff8f 	bl	800caec <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800cbce:	bf00      	nop
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b083      	sub	sp, #12
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
    return buffer_;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	370c      	adds	r7, #12
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr

0800cbee <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b082      	sub	sp, #8
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d103      	bne.n	800cc12 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff ff5a 	bl	800cac4 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800cc10:	e003      	b.n	800cc1a <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff ffcb 	bl	800cbb0 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b088      	sub	sp, #32
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800cc3c:	68b8      	ldr	r0, [r7, #8]
 800cc3e:	f7ff fe35 	bl	800c8ac <_ZN12SimpleString6StrLenEPKc>
 800cc42:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	fb02 f303 	mul.w	r3, r2, r3
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	4619      	mov	r1, r3
 800cc50:	68f8      	ldr	r0, [r7, #12]
 800cc52:	f7ff ff65 	bl	800cb20 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	61bb      	str	r3, [r7, #24]
 800cc60:	69ba      	ldr	r2, [r7, #24]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d20e      	bcs.n	800cc86 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	68b9      	ldr	r1, [r7, #8]
 800cc70:	69f8      	ldr	r0, [r7, #28]
 800cc72:	f7ff fe66 	bl	800c942 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800cc76:	69fa      	ldr	r2, [r7, #28]
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	3301      	adds	r3, #1
 800cc82:	61bb      	str	r3, [r7, #24]
 800cc84:	e7ec      	b.n	800cc60 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	701a      	strb	r2, [r3, #0]
}
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3720      	adds	r7, #32
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b082      	sub	sp, #8
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
 800cc9e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800ccac:	6838      	ldr	r0, [r7, #0]
 800ccae:	f7ff ff92 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff ff7a 	bl	800cbb0 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b082      	sub	sp, #8
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
 800ccce:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d003      	beq.n	800cce0 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7ff ff53 	bl	800cb86 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800cce0:	687b      	ldr	r3, [r7, #4]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800ccea:	b590      	push	{r4, r7, lr}
 800ccec:	b083      	sub	sp, #12
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
 800ccf2:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff ff6e 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	6838      	ldr	r0, [r7, #0]
 800ccfe:	f7ff ff6a 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800cd02:	4603      	mov	r3, r0
 800cd04:	4619      	mov	r1, r3
 800cd06:	4620      	mov	r0, r4
 800cd08:	f7ff fe50 	bl	800c9ac <_ZN12SimpleString6StrStrEPKcS1_>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	bf14      	ite	ne
 800cd12:	2301      	movne	r3, #1
 800cd14:	2300      	moveq	r3, #0
 800cd16:	b2db      	uxtb	r3, r3
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd90      	pop	{r4, r7, pc}

0800cd20 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800cd20:	b590      	push	{r4, r7, lr}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800cd2a:	f107 0308 	add.w	r3, r7, #8
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 fabb 	bl	800d2ac <_ZNK12SimpleString9lowerCaseEv>
 800cd36:	f107 0310 	add.w	r3, r7, #16
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f000 fab5 	bl	800d2ac <_ZNK12SimpleString9lowerCaseEv>
 800cd42:	f107 0210 	add.w	r2, r7, #16
 800cd46:	f107 0308 	add.w	r3, r7, #8
 800cd4a:	4611      	mov	r1, r2
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7ff ffcc 	bl	800ccea <_ZNK12SimpleString8containsERKS_>
 800cd52:	4603      	mov	r3, r0
 800cd54:	461c      	mov	r4, r3
 800cd56:	bf00      	nop
 800cd58:	f107 0310 	add.w	r3, r7, #16
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 fafe 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800cd62:	f107 0308 	add.w	r3, r7, #8
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 faf9 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800cd6c:	4623      	mov	r3, r4
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	371c      	adds	r7, #28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd90      	pop	{r4, r7, pc}

0800cd76 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800cd76:	b590      	push	{r4, r7, lr}
 800cd78:	b083      	sub	sp, #12
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800cd80:	6838      	ldr	r0, [r7, #0]
 800cd82:	f000 facb 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	bf0c      	ite	eq
 800cd8c:	2301      	moveq	r3, #1
 800cd8e:	2300      	movne	r3, #0
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d001      	beq.n	800cd9a <_ZNK12SimpleString10startsWithERKS_+0x24>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e022      	b.n	800cde0 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 fabe 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	bf0c      	ite	eq
 800cda6:	2301      	moveq	r3, #1
 800cda8:	2300      	movne	r3, #0
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	e015      	b.n	800cde0 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f7ff ff0e 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800cdba:	4604      	mov	r4, r0
 800cdbc:	6838      	ldr	r0, [r7, #0]
 800cdbe:	f7ff ff0a 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f7ff fdf0 	bl	800c9ac <_ZN12SimpleString6StrStrEPKcS1_>
 800cdcc:	4604      	mov	r4, r0
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7ff ff01 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	429c      	cmp	r4, r3
 800cdd8:	bf0c      	ite	eq
 800cdda:	2301      	moveq	r3, #1
 800cddc:	2300      	movne	r3, #0
 800cdde:	b2db      	uxtb	r3, r3
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd90      	pop	{r4, r7, pc}

0800cde8 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800cde8:	b590      	push	{r4, r7, lr}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fa92 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800cdf8:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800cdfa:	6838      	ldr	r0, [r7, #0]
 800cdfc:	f000 fa8e 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800ce00:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d101      	bne.n	800ce0c <_ZNK12SimpleString8endsWithERKS_+0x24>
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e020      	b.n	800ce4e <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d101      	bne.n	800ce16 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800ce12:	2300      	movs	r3, #0
 800ce14:	e01b      	b.n	800ce4e <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d201      	bcs.n	800ce22 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e015      	b.n	800ce4e <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7ff fed7 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800ce28:	4601      	mov	r1, r0
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	18cc      	adds	r4, r1, r3
 800ce32:	6838      	ldr	r0, [r7, #0]
 800ce34:	f7ff fecf 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f7ff fd13 	bl	800c868 <_ZN12SimpleString6StrCmpEPKcS1_>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	bf0c      	ite	eq
 800ce48:	2301      	moveq	r3, #1
 800ce4a:	2300      	movne	r3, #0
 800ce4c:	b2db      	uxtb	r3, r3
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3714      	adds	r7, #20
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd90      	pop	{r4, r7, pc}

0800ce56 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b086      	sub	sp, #24
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff feb6 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800ce6a:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	60fb      	str	r3, [r7, #12]
    if (*str){
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d008      	beq.n	800ce8a <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800ce78:	6838      	ldr	r0, [r7, #0]
 800ce7a:	f7ff feac 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	4619      	mov	r1, r3
 800ce82:	6938      	ldr	r0, [r7, #16]
 800ce84:	f7ff fd92 	bl	800c9ac <_ZN12SimpleString6StrStrEPKcS1_>
 800ce88:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d014      	beq.n	800cebc <_ZNK12SimpleString5countERKS_+0x66>
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d011      	beq.n	800cebc <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	613b      	str	r3, [r7, #16]
        str++;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	613b      	str	r3, [r7, #16]
        num++;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	3301      	adds	r3, #1
 800cea6:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800cea8:	6838      	ldr	r0, [r7, #0]
 800ceaa:	f7ff fe94 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	6938      	ldr	r0, [r7, #16]
 800ceb4:	f7ff fd7a 	bl	800c9ac <_ZN12SimpleString6StrStrEPKcS1_>
 800ceb8:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800ceba:	e7e6      	b.n	800ce8a <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800cebc:	697b      	ldr	r3, [r7, #20]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3718      	adds	r7, #24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800cec6:	b590      	push	{r4, r7, lr}
 800cec8:	b091      	sub	sp, #68	; 0x44
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	60f8      	str	r0, [r7, #12]
 800cece:	60b9      	str	r1, [r7, #8]
 800ced0:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f7ff ffbe 	bl	800ce56 <_ZNK12SimpleString5countERKS_>
 800ceda:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800cedc:	68b9      	ldr	r1, [r7, #8]
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f7ff ff82 	bl	800cde8 <_ZNK12SimpleString8endsWithERKS_>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d001      	beq.n	800ceee <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800ceea:	2300      	movs	r3, #0
 800ceec:	e000      	b.n	800cef0 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800ceee:	2301      	movs	r3, #1
 800cef0:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800cef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef6:	4413      	add	r3, r2
 800cef8:	4619      	mov	r1, r3
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f001 f95c 	bl	800e1b8 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f7ff fe68 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800cf06:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800cf08:	2300      	movs	r3, #0
 800cf0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d235      	bcs.n	800cf80 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800cf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf16:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800cf18:	68b8      	ldr	r0, [r7, #8]
 800cf1a:	f7ff fe5c 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	4619      	mov	r1, r3
 800cf22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cf24:	f7ff fd42 	bl	800c9ac <_ZN12SimpleString6StrStrEPKcS1_>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800cf2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f001 f9db 	bl	800e2ec <_ZN22SimpleStringCollectionixEj>
 800cf36:	4604      	mov	r4, r0
 800cf38:	f107 031c 	add.w	r3, r7, #28
 800cf3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff fe55 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800cf44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	f107 0014 	add.w	r0, r7, #20
 800cf4e:	f107 011c 	add.w	r1, r7, #28
 800cf52:	2200      	movs	r2, #0
 800cf54:	f000 fb0c 	bl	800d570 <_ZNK12SimpleString9subStringEjj>
 800cf58:	f107 0314 	add.w	r3, r7, #20
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f7ff feb1 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800cf64:	f107 0314 	add.w	r3, r7, #20
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f000 f9f8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800cf6e:	f107 031c 	add.w	r3, r7, #28
 800cf72:	4618      	mov	r0, r3
 800cf74:	f000 f9f3 	bl	800d35e <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf7e:	e7c5      	b.n	800cf0c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800cf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d015      	beq.n	800cfb2 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800cf86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f001 f9af 	bl	800e2ec <_ZN22SimpleStringCollectionixEj>
 800cf8e:	4604      	mov	r4, r0
 800cf90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7ff fe29 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800cf9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f7ff fe8f 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800cfa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 f9d6 	bl	800d35e <_ZN12SimpleStringD1Ev>
    }
}
 800cfb2:	bf00      	nop
 800cfb4:	3744      	adds	r7, #68	; 0x44
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd90      	pop	{r4, r7, pc}

0800cfba <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
 800cfc2:	460b      	mov	r3, r1
 800cfc4:	70fb      	strb	r3, [r7, #3]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 f9a6 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800cfd0:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60fb      	str	r3, [r7, #12]
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d218      	bcs.n	800d010 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7ff fdf9 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	4413      	add	r3, r2
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	78fa      	ldrb	r2, [r7, #3]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	bf0c      	ite	eq
 800cff2:	2301      	moveq	r3, #1
 800cff4:	2300      	movne	r3, #0
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d005      	beq.n	800d008 <_ZN12SimpleString7replaceEcc+0x4e>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	4413      	add	r3, r2
 800d004:	78ba      	ldrb	r2, [r7, #2]
 800d006:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	3301      	adds	r3, #1
 800d00c:	60fb      	str	r3, [r7, #12]
 800d00e:	e7e2      	b.n	800cfd6 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800d010:	bf00      	nop
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08e      	sub	sp, #56	; 0x38
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800d024:	f107 0310 	add.w	r3, r7, #16
 800d028:	68b9      	ldr	r1, [r7, #8]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff fddf 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800d030:	f107 0310 	add.w	r3, r7, #16
 800d034:	4619      	mov	r1, r3
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f7ff ff0d 	bl	800ce56 <_ZNK12SimpleString5countERKS_>
 800d03c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d03e:	f107 0310 	add.w	r3, r7, #16
 800d042:	4618      	mov	r0, r3
 800d044:	f000 f98b 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d071      	beq.n	800d132 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f000 f964 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d054:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800d056:	68b8      	ldr	r0, [r7, #8]
 800d058:	f7ff fc28 	bl	800c8ac <_ZN12SimpleString6StrLenEPKc>
 800d05c:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7ff fc24 	bl	800c8ac <_ZN12SimpleString6StrLenEPKc>
 800d064:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800d066:	6a3b      	ldr	r3, [r7, #32]
 800d068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d06a:	fb02 f203 	mul.w	r2, r2, r3
 800d06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d070:	441a      	add	r2, r3
 800d072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d076:	fb01 f303 	mul.w	r3, r1, r3
 800d07a:	1ad3      	subs	r3, r2, r3
 800d07c:	3301      	adds	r3, #1
 800d07e:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	2b01      	cmp	r3, #1
 800d084:	d951      	bls.n	800d12a <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800d086:	f240 129d 	movw	r2, #413	; 0x19d
 800d08a:	492c      	ldr	r1, [pc, #176]	; (800d13c <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800d08c:	69f8      	ldr	r0, [r7, #28]
 800d08e:	f7ff fb33 	bl	800c6f8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d092:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800d094:	2300      	movs	r3, #0
 800d096:	637b      	str	r3, [r7, #52]	; 0x34
 800d098:	2300      	movs	r3, #0
 800d09a:	633b      	str	r3, [r7, #48]	; 0x30
 800d09c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d236      	bcs.n	800d112 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f7ff fd96 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ae:	4413      	add	r3, r2
 800d0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0b2:	68b9      	ldr	r1, [r7, #8]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7ff fc16 	bl	800c8e6 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	bf0c      	ite	eq
 800d0c0:	2301      	moveq	r3, #1
 800d0c2:	2300      	movne	r3, #0
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d011      	beq.n	800d0ee <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800d0ca:	69ba      	ldr	r2, [r7, #24]
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	18d0      	adds	r0, r2, r3
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	6879      	ldr	r1, [r7, #4]
 800d0d8:	f7ff fc33 	bl	800c942 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800d0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0de:	6a3b      	ldr	r3, [r7, #32]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800d0e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	4413      	add	r3, r2
 800d0ea:	637b      	str	r3, [r7, #52]	; 0x34
 800d0ec:	e7d6      	b.n	800d09c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f7ff fd71 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f8:	441a      	add	r2, r3
 800d0fa:	69b9      	ldr	r1, [r7, #24]
 800d0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fe:	440b      	add	r3, r1
 800d100:	7812      	ldrb	r2, [r2, #0]
 800d102:	701a      	strb	r2, [r3, #0]
                j++;
 800d104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d106:	3301      	adds	r3, #1
 800d108:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800d10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10c:	3301      	adds	r3, #1
 800d10e:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800d110:	e7c4      	b.n	800d09c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	3b01      	subs	r3, #1
 800d116:	69ba      	ldr	r2, [r7, #24]
 800d118:	4413      	add	r3, r2
 800d11a:	2200      	movs	r2, #0
 800d11c:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800d11e:	69fa      	ldr	r2, [r7, #28]
 800d120:	69b9      	ldr	r1, [r7, #24]
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f7ff fd1c 	bl	800cb60 <_ZN12SimpleString19setInternalBufferToEPcj>
 800d128:	e004      	b.n	800d134 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f7ff fcca 	bl	800cac4 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800d130:	e000      	b.n	800d134 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800d132:	bf00      	nop
}
 800d134:	3738      	adds	r7, #56	; 0x38
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	08024480 	.word	0x08024480

0800d140 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800d140:	b590      	push	{r4, r7, lr}
 800d142:	b089      	sub	sp, #36	; 0x24
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800d14a:	493b      	ldr	r1, [pc, #236]	; (800d238 <_ZNK12SimpleString9printableEv+0xf8>)
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7ff fd4e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800d152:	6838      	ldr	r0, [r7, #0]
 800d154:	f000 f876 	bl	800d244 <_ZNK12SimpleString16getPrintableSizeEv>
 800d158:	4603      	mov	r3, r0
 800d15a:	3301      	adds	r3, #1
 800d15c:	4619      	mov	r1, r3
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7ff fcde 	bl	800cb20 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800d164:	6838      	ldr	r0, [r7, #0]
 800d166:	f000 f8d9 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d16a:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800d16c:	2300      	movs	r3, #0
 800d16e:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800d170:	2300      	movs	r3, #0
 800d172:	61bb      	str	r3, [r7, #24]
 800d174:	69ba      	ldr	r2, [r7, #24]
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d252      	bcs.n	800d222 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	4413      	add	r3, r2
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800d188:	7cfb      	ldrb	r3, [r7, #19]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f000 fb43 	bl	800d816 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d012      	beq.n	800d1bc <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	18d0      	adds	r0, r2, r3
 800d19e:	7cfb      	ldrb	r3, [r7, #19]
 800d1a0:	3b07      	subs	r3, #7
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	4b25      	ldr	r3, [pc, #148]	; (800d23c <_ZNK12SimpleString9printableEv+0xfc>)
 800d1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ac:	2202      	movs	r2, #2
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	f7ff fbc7 	bl	800c942 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	3302      	adds	r3, #2
 800d1b8:	61fb      	str	r3, [r7, #28]
 800d1ba:	e02e      	b.n	800d21a <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800d1bc:	7cfb      	ldrb	r3, [r7, #19]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 fb15 	bl	800d7ee <_ZN12SimpleString9isControlEc>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d01e      	beq.n	800d208 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800d1ca:	7cfa      	ldrb	r2, [r7, #19]
 800d1cc:	f107 0308 	add.w	r3, r7, #8
 800d1d0:	491b      	ldr	r1, [pc, #108]	; (800d240 <_ZNK12SimpleString9printableEv+0x100>)
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fdca 	bl	800dd6c <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	18d4      	adds	r4, r2, r3
 800d1e0:	f107 0308 	add.w	r3, r7, #8
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f000 f88d 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2204      	movs	r2, #4
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f7ff fba6 	bl	800c942 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800d1fc:	f107 0308 	add.w	r3, r7, #8
 800d200:	4618      	mov	r0, r3
 800d202:	f000 f8ac 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800d206:	e008      	b.n	800d21a <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	4413      	add	r3, r2
 800d210:	7cfa      	ldrb	r2, [r7, #19]
 800d212:	701a      	strb	r2, [r3, #0]
            j++;
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	3301      	adds	r3, #1
 800d218:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	3301      	adds	r3, #1
 800d21e:	61bb      	str	r3, [r7, #24]
 800d220:	e7a8      	b.n	800d174 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	4413      	add	r3, r2
 800d22a:	2200      	movs	r2, #0
 800d22c:	701a      	strb	r2, [r3, #0]

    return result;
 800d22e:	bf00      	nop
}
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	3724      	adds	r7, #36	; 0x24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd90      	pop	{r4, r7, pc}
 800d238:	08024540 	.word	0x08024540
 800d23c:	2000006c 	.word	0x2000006c
 800d240:	08024544 	.word	0x08024544

0800d244 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b086      	sub	sp, #24
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 f865 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d252:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800d258:	2300      	movs	r3, #0
 800d25a:	613b      	str	r3, [r7, #16]
 800d25c:	693a      	ldr	r2, [r7, #16]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	429a      	cmp	r2, r3
 800d262:	d21e      	bcs.n	800d2a2 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	4413      	add	r3, r2
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800d270:	7afb      	ldrb	r3, [r7, #11]
 800d272:	4618      	mov	r0, r3
 800d274:	f000 facf 	bl	800d816 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d003      	beq.n	800d286 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	3301      	adds	r3, #1
 800d282:	617b      	str	r3, [r7, #20]
 800d284:	e009      	b.n	800d29a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800d286:	7afb      	ldrb	r3, [r7, #11]
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 fab0 	bl	800d7ee <_ZN12SimpleString9isControlEc>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d002      	beq.n	800d29a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	3303      	adds	r3, #3
 800d298:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	3301      	adds	r3, #1
 800d29e:	613b      	str	r3, [r7, #16]
 800d2a0:	e7dc      	b.n	800d25c <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800d2a2:	697b      	ldr	r3, [r7, #20]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3718      	adds	r7, #24
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800d2ac:	b590      	push	{r4, r7, lr}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7ff fcec 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f82c 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d2c4:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	60fb      	str	r3, [r7, #12]
 800d2ca:	68fa      	ldr	r2, [r7, #12]
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d213      	bcs.n	800d2fa <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7ff fc7f 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	4413      	add	r3, r2
 800d2de:	7819      	ldrb	r1, [r3, #0]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	18d4      	adds	r4, r2, r3
 800d2e8:	4608      	mov	r0, r1
 800d2ea:	f7ff fb8a 	bl	800ca02 <_ZN12SimpleString7ToLowerEc>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	60fb      	str	r3, [r7, #12]
 800d2f8:	e7e7      	b.n	800d2ca <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800d2fa:	bf00      	nop
}
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	bd90      	pop	{r4, r7, pc}

0800d304 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7ff fc62 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d312:	4603      	mov	r3, r0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7ff fc56 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d32a:	4603      	mov	r3, r0
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff fabd 	bl	800c8ac <_ZN12SimpleString6StrLenEPKc>
 800d332:	4603      	mov	r3, r0
}
 800d334:	4618      	mov	r0, r3
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff ffe9 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bf0c      	ite	eq
 800d350:	2301      	moveq	r3, #1
 800d352:	2300      	movne	r3, #0
 800d354:	b2db      	uxtb	r3, r3
}
 800d356:	4618      	mov	r0, r3
 800d358:	3708      	adds	r7, #8
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800d35e:	b580      	push	{r7, lr}
 800d360:	b082      	sub	sp, #8
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f7ff fb90 	bl	800ca8c <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4618      	mov	r0, r3
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800d376:	b590      	push	{r4, r7, lr}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f7ff ffbf 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800d386:	4604      	mov	r4, r0
 800d388:	6838      	ldr	r0, [r7, #0]
 800d38a:	f7ff ffbb 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800d38e:	4603      	mov	r3, r0
 800d390:	4619      	mov	r1, r3
 800d392:	4620      	mov	r0, r4
 800d394:	f7ff fa68 	bl	800c868 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	bf0c      	ite	eq
 800d39e:	2301      	moveq	r3, #1
 800d3a0:	2300      	movne	r3, #0
 800d3a2:	b2db      	uxtb	r3, r3
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd90      	pop	{r4, r7, pc}

0800d3ac <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800d3ac:	b590      	push	{r4, r7, lr}
 800d3ae:	b087      	sub	sp, #28
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800d3b6:	f107 0308 	add.w	r3, r7, #8
 800d3ba:	6879      	ldr	r1, [r7, #4]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff ff75 	bl	800d2ac <_ZNK12SimpleString9lowerCaseEv>
 800d3c2:	f107 0310 	add.w	r3, r7, #16
 800d3c6:	6839      	ldr	r1, [r7, #0]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff ff6f 	bl	800d2ac <_ZNK12SimpleString9lowerCaseEv>
 800d3ce:	f107 0210 	add.w	r2, r7, #16
 800d3d2:	f107 0308 	add.w	r3, r7, #8
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7ff ffcc 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	461c      	mov	r4, r3
 800d3e2:	f107 0310 	add.w	r3, r7, #16
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff ffb9 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800d3ec:	f107 0308 	add.w	r3, r7, #8
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff ffb4 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800d3f6:	4623      	mov	r3, r4
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	371c      	adds	r7, #28
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd90      	pop	{r4, r7, pc}

0800d400 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7ff ffb2 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 800d412:	4603      	mov	r3, r0
 800d414:	f083 0301 	eor.w	r3, r3, #1
 800d418:	b2db      	uxtb	r3, r3
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800d42e:	68b8      	ldr	r0, [r7, #8]
 800d430:	f7ff fbd1 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d434:	4603      	mov	r3, r0
 800d436:	4619      	mov	r1, r3
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f7ff fbd8 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7ff fbc9 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d444:	4603      	mov	r3, r0
 800d446:	4619      	mov	r1, r3
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f000 f817 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    return t;
 800d44e:	bf00      	nop
}
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800d462:	6838      	ldr	r0, [r7, #0]
 800d464:	f7ff fbb7 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d468:	4603      	mov	r3, r0
 800d46a:	4619      	mov	r1, r3
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f000 f805 	bl	800d47c <_ZN12SimpleStringpLEPKc>
 800d472:	4603      	mov	r3, r0
}
 800d474:	4618      	mov	r0, r3
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7ff ff48 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d48c:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800d48e:	6838      	ldr	r0, [r7, #0]
 800d490:	f7ff fa0c 	bl	800c8ac <_ZN12SimpleString6StrLenEPKc>
 800d494:	4603      	mov	r3, r0
 800d496:	3301      	adds	r3, #1
 800d498:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800d49a:	697a      	ldr	r2, [r7, #20]
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	4413      	add	r3, r2
 800d4a0:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff fb97 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	68f9      	ldr	r1, [r7, #12]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 f941 	bl	800d734 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800d4b2:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800d4b4:	68ba      	ldr	r2, [r7, #8]
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	693a      	ldr	r2, [r7, #16]
 800d4bc:	6839      	ldr	r1, [r7, #0]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7ff fa3f 	bl	800c942 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	68b9      	ldr	r1, [r7, #8]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7ff fb49 	bl	800cb60 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800d4ce:	687b      	ldr	r3, [r7, #4]
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3718      	adds	r7, #24
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800d4d8:	b590      	push	{r4, r7, lr}
 800d4da:	b08b      	sub	sp, #44	; 0x2c
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7ff ff18 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	68b8      	ldr	r0, [r7, #8]
 800d4f0:	f7ff ff14 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	429c      	cmp	r4, r3
 800d4f8:	bf8c      	ite	hi
 800d4fa:	2301      	movhi	r3, #1
 800d4fc:	2300      	movls	r3, #0
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	d006      	beq.n	800d512 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800d504:	79fb      	ldrb	r3, [r7, #7]
 800d506:	461a      	mov	r2, r3
 800d508:	68f9      	ldr	r1, [r7, #12]
 800d50a:	68b8      	ldr	r0, [r7, #8]
 800d50c:	f7ff ffe4 	bl	800d4d8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800d510:	e02b      	b.n	800d56a <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800d516:	2300      	movs	r3, #0
 800d518:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800d51a:	68b8      	ldr	r0, [r7, #8]
 800d51c:	f7ff fefe 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d520:	4604      	mov	r4, r0
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f7ff fefa 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d528:	4603      	mov	r3, r0
 800d52a:	1ae2      	subs	r2, r4, r3
 800d52c:	f107 0114 	add.w	r1, r7, #20
 800d530:	f107 0320 	add.w	r3, r7, #32
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff fb75 	bl	800cc24 <_ZN12SimpleStringC1EPKcj>
 800d53a:	f107 0318 	add.w	r3, r7, #24
 800d53e:	f107 0120 	add.w	r1, r7, #32
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff ff6c 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800d54a:	f107 0318 	add.w	r3, r7, #24
 800d54e:	4619      	mov	r1, r3
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f7ff fbb8 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800d556:	f107 0318 	add.w	r3, r7, #24
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff feff 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800d560:	f107 0320 	add.w	r3, r7, #32
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff fefa 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800d56a:	372c      	adds	r7, #44	; 0x2c
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd90      	pop	{r4, r7, pc}

0800d570 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b086      	sub	sp, #24
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
 800d57c:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800d57e:	68b8      	ldr	r0, [r7, #8]
 800d580:	f7ff fecc 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d584:	4603      	mov	r3, r0
 800d586:	3b01      	subs	r3, #1
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	bf8c      	ite	hi
 800d58e:	2301      	movhi	r3, #1
 800d590:	2300      	movls	r3, #0
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b00      	cmp	r3, #0
 800d596:	d004      	beq.n	800d5a2 <_ZNK12SimpleString9subStringEjj+0x32>
 800d598:	4919      	ldr	r1, [pc, #100]	; (800d600 <_ZNK12SimpleString9subStringEjj+0x90>)
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	f7ff fb27 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800d5a0:	e029      	b.n	800d5f6 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800d5a2:	68b8      	ldr	r0, [r7, #8]
 800d5a4:	f7ff fb17 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	441a      	add	r2, r3
 800d5ae:	f107 0310 	add.w	r3, r7, #16
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7ff fb1a 	bl	800cbee <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800d5ba:	f107 0310 	add.w	r3, r7, #16
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7ff feac 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	bf34      	ite	cc
 800d5cc:	2301      	movcc	r3, #1
 800d5ce:	2300      	movcs	r3, #0
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d004      	beq.n	800d5e0 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800d5d6:	693a      	ldr	r2, [r7, #16]
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	4413      	add	r3, r2
 800d5dc:	2200      	movs	r2, #0
 800d5de:	701a      	strb	r2, [r3, #0]

    return newString;
 800d5e0:	f107 0310 	add.w	r3, r7, #16
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f7ff fb55 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800d5ec:	f107 0310 	add.w	r3, r7, #16
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7ff feb4 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	3718      	adds	r7, #24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	08024540 	.word	0x08024540

0800d604 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f04f 33ff 	mov.w	r3, #4294967295
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	68b9      	ldr	r1, [r7, #8]
 800d61a:	f7ff ffa9 	bl	800d570 <_ZNK12SimpleString9subStringEjj>
}
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b082      	sub	sp, #8
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
 800d62e:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7ff fad0 	bl	800cbd6 <_ZNK12SimpleString9getBufferEv>
 800d636:	4602      	mov	r2, r0
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	4413      	add	r3, r2
 800d63c:	781b      	ldrb	r3, [r3, #0]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3708      	adds	r7, #8
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800d646:	b580      	push	{r7, lr}
 800d648:	b082      	sub	sp, #8
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	460b      	mov	r3, r1
 800d650:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800d652:	78fb      	ldrb	r3, [r7, #3]
 800d654:	461a      	mov	r2, r3
 800d656:	2100      	movs	r1, #0
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 f805 	bl	800d668 <_ZNK12SimpleString8findFromEjc>
 800d65e:	4603      	mov	r3, r0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b086      	sub	sp, #24
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	4613      	mov	r3, r2
 800d674:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f7ff fe50 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800d67c:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	617b      	str	r3, [r7, #20]
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	429a      	cmp	r2, r3
 800d688:	d213      	bcs.n	800d6b2 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800d68a:	6979      	ldr	r1, [r7, #20]
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f7ff ffca 	bl	800d626 <_ZNK12SimpleString2atEj>
 800d692:	4603      	mov	r3, r0
 800d694:	461a      	mov	r2, r3
 800d696:	79fb      	ldrb	r3, [r7, #7]
 800d698:	4293      	cmp	r3, r2
 800d69a:	bf0c      	ite	eq
 800d69c:	2301      	moveq	r3, #1
 800d69e:	2300      	movne	r3, #0
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <_ZNK12SimpleString8findFromEjc+0x42>
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	e005      	b.n	800d6b6 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	617b      	str	r3, [r7, #20]
 800d6b0:	e7e7      	b.n	800d682 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800d6b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3718      	adds	r7, #24
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
	...

0800d6c0 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	71fb      	strb	r3, [r7, #7]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800d6d6:	79fb      	ldrb	r3, [r7, #7]
 800d6d8:	4619      	mov	r1, r3
 800d6da:	68b8      	ldr	r0, [r7, #8]
 800d6dc:	f7ff ffb3 	bl	800d646 <_ZNK12SimpleString4findEc>
 800d6e0:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e8:	d104      	bne.n	800d6f4 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800d6ea:	4911      	ldr	r1, [pc, #68]	; (800d730 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f7ff fa7e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800d6f2:	e019      	b.n	800d728 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800d6f4:	79bb      	ldrb	r3, [r7, #6]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	6979      	ldr	r1, [r7, #20]
 800d6fa:	68b8      	ldr	r0, [r7, #8]
 800d6fc:	f7ff ffb4 	bl	800d668 <_ZNK12SimpleString8findFromEjc>
 800d700:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d708:	d106      	bne.n	800d718 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	697a      	ldr	r2, [r7, #20]
 800d70e:	68b9      	ldr	r1, [r7, #8]
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff ff77 	bl	800d604 <_ZNK12SimpleString9subStringEj>
 800d716:	e007      	b.n	800d728 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800d718:	693a      	ldr	r2, [r7, #16]
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	1ad3      	subs	r3, r2, r3
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	697a      	ldr	r2, [r7, #20]
 800d722:	68b9      	ldr	r1, [r7, #8]
 800d724:	f7ff ff24 	bl	800d570 <_ZNK12SimpleString9subStringEjj>
}
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	3718      	adds	r7, #24
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	08024540 	.word	0x08024540

0800d734 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800d73e:	f240 2275 	movw	r2, #629	; 0x275
 800d742:	490a      	ldr	r1, [pc, #40]	; (800d76c <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800d744:	6838      	ldr	r0, [r7, #0]
 800d746:	f7fe ffd7 	bl	800c6f8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d74a:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800d74c:	683a      	ldr	r2, [r7, #0]
 800d74e:	6879      	ldr	r1, [r7, #4]
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f7ff f8f6 	bl	800c942 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	3b01      	subs	r3, #1
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	4413      	add	r3, r2
 800d75e:	2200      	movs	r2, #0
 800d760:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800d762:	68fb      	ldr	r3, [r7, #12]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	08024480 	.word	0x08024480

0800d770 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	4603      	mov	r3, r0
 800d778:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800d77a:	79fb      	ldrb	r3, [r7, #7]
 800d77c:	2b2f      	cmp	r3, #47	; 0x2f
 800d77e:	d904      	bls.n	800d78a <_ZN12SimpleString7isDigitEc+0x1a>
 800d780:	79fb      	ldrb	r3, [r7, #7]
 800d782:	2b39      	cmp	r3, #57	; 0x39
 800d784:	d801      	bhi.n	800d78a <_ZN12SimpleString7isDigitEc+0x1a>
 800d786:	2301      	movs	r3, #1
 800d788:	e000      	b.n	800d78c <_ZN12SimpleString7isDigitEc+0x1c>
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	4603      	mov	r3, r0
 800d7a0:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800d7a2:	79fb      	ldrb	r3, [r7, #7]
 800d7a4:	2b20      	cmp	r3, #32
 800d7a6:	d005      	beq.n	800d7b4 <_ZN12SimpleString7isSpaceEc+0x1c>
 800d7a8:	79fb      	ldrb	r3, [r7, #7]
 800d7aa:	2b08      	cmp	r3, #8
 800d7ac:	d904      	bls.n	800d7b8 <_ZN12SimpleString7isSpaceEc+0x20>
 800d7ae:	79fb      	ldrb	r3, [r7, #7]
 800d7b0:	2b0d      	cmp	r3, #13
 800d7b2:	d801      	bhi.n	800d7b8 <_ZN12SimpleString7isSpaceEc+0x20>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	e000      	b.n	800d7ba <_ZN12SimpleString7isSpaceEc+0x22>
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b083      	sub	sp, #12
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800d7d0:	79fb      	ldrb	r3, [r7, #7]
 800d7d2:	2b40      	cmp	r3, #64	; 0x40
 800d7d4:	d904      	bls.n	800d7e0 <_ZN12SimpleString7isUpperEc+0x1a>
 800d7d6:	79fb      	ldrb	r3, [r7, #7]
 800d7d8:	2b5a      	cmp	r3, #90	; 0x5a
 800d7da:	d801      	bhi.n	800d7e0 <_ZN12SimpleString7isUpperEc+0x1a>
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e000      	b.n	800d7e2 <_ZN12SimpleString7isUpperEc+0x1c>
 800d7e0:	2300      	movs	r3, #0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr

0800d7ee <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800d7ee:	b480      	push	{r7}
 800d7f0:	b083      	sub	sp, #12
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800d7f8:	79fb      	ldrb	r3, [r7, #7]
 800d7fa:	2b1f      	cmp	r3, #31
 800d7fc:	d902      	bls.n	800d804 <_ZN12SimpleString9isControlEc+0x16>
 800d7fe:	79fb      	ldrb	r3, [r7, #7]
 800d800:	2b7f      	cmp	r3, #127	; 0x7f
 800d802:	d101      	bne.n	800d808 <_ZN12SimpleString9isControlEc+0x1a>
 800d804:	2301      	movs	r3, #1
 800d806:	e000      	b.n	800d80a <_ZN12SimpleString9isControlEc+0x1c>
 800d808:	2300      	movs	r3, #0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	370c      	adds	r7, #12
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr

0800d816 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800d816:	b480      	push	{r7}
 800d818:	b083      	sub	sp, #12
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	4603      	mov	r3, r0
 800d81e:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	2b06      	cmp	r3, #6
 800d824:	d904      	bls.n	800d830 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d826:	79fb      	ldrb	r3, [r7, #7]
 800d828:	2b0d      	cmp	r3, #13
 800d82a:	d801      	bhi.n	800d830 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d82c:	2301      	movs	r3, #1
 800d82e:	e000      	b.n	800d832 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
	...

0800d840 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800d84c:	78fb      	ldrb	r3, [r7, #3]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <_Z10StringFromb+0x16>
 800d852:	4a06      	ldr	r2, [pc, #24]	; (800d86c <_Z10StringFromb+0x2c>)
 800d854:	e000      	b.n	800d858 <_Z10StringFromb+0x18>
 800d856:	4a06      	ldr	r2, [pc, #24]	; (800d870 <_Z10StringFromb+0x30>)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4906      	ldr	r1, [pc, #24]	; (800d874 <_Z10StringFromb+0x34>)
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 fa85 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	0802454c 	.word	0x0802454c
 800d870:	08024554 	.word	0x08024554
 800d874:	0802455c 	.word	0x0802455c

0800d878 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7ff f9b2 	bl	800cbee <_ZN12SimpleStringC1EPKc>
}
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
	...

0800d894 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800d894:	b590      	push	{r4, r7, lr}
 800d896:	b085      	sub	sp, #20
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800d89e:	2400      	movs	r4, #0
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00e      	beq.n	800d8c4 <_Z25PrintableStringFromOrNullPKc+0x30>
 800d8a6:	f107 0308 	add.w	r3, r7, #8
 800d8aa:	6839      	ldr	r1, [r7, #0]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff ffe3 	bl	800d878 <_Z10StringFromPKc>
 800d8b2:	2401      	movs	r4, #1
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f107 0208 	add.w	r2, r7, #8
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7ff fc3f 	bl	800d140 <_ZNK12SimpleString9printableEv>
 800d8c2:	e004      	b.n	800d8ce <_Z25PrintableStringFromOrNullPKc+0x3a>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4908      	ldr	r1, [pc, #32]	; (800d8e8 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7ff ffd5 	bl	800d878 <_Z10StringFromPKc>
 800d8ce:	2c00      	cmp	r4, #0
 800d8d0:	d004      	beq.n	800d8dc <_Z25PrintableStringFromOrNullPKc+0x48>
 800d8d2:	f107 0308 	add.w	r3, r7, #8
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7ff fd41 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800d8dc:	bf00      	nop
}
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	3714      	adds	r7, #20
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd90      	pop	{r4, r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	08024560 	.word	0x08024560

0800d8ec <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	683a      	ldr	r2, [r7, #0]
 800d8fa:	4904      	ldr	r1, [pc, #16]	; (800d90c <_Z10StringFromi+0x20>)
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f000 fa35 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	08024568 	.word	0x08024568

0800d910 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	683a      	ldr	r2, [r7, #0]
 800d91e:	4904      	ldr	r1, [pc, #16]	; (800d930 <_Z10StringFroml+0x20>)
 800d920:	4618      	mov	r0, r3
 800d922:	f000 fa23 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	0802456c 	.word	0x0802456c

0800d934 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b086      	sub	sp, #24
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800d93e:	f107 0308 	add.w	r3, r7, #8
 800d942:	4910      	ldr	r1, [pc, #64]	; (800d984 <_Z10StringFromPKv+0x50>)
 800d944:	4618      	mov	r0, r3
 800d946:	f7ff f952 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800d94a:	f107 0310 	add.w	r3, r7, #16
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	4618      	mov	r0, r3
 800d952:	f000 f9a1 	bl	800dc98 <_Z13HexStringFromPKv>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f107 0210 	add.w	r2, r7, #16
 800d95c:	f107 0108 	add.w	r1, r7, #8
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff fd5e 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800d966:	f107 0310 	add.w	r3, r7, #16
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7ff fcf7 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800d970:	f107 0308 	add.w	r3, r7, #8
 800d974:	4618      	mov	r0, r3
 800d976:	f7ff fcf2 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800d97a:	bf00      	nop
}
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	3718      	adds	r7, #24
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	08024570 	.word	0x08024570

0800d988 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800d992:	f107 0308 	add.w	r3, r7, #8
 800d996:	4910      	ldr	r1, [pc, #64]	; (800d9d8 <_Z10StringFromPFvvE+0x50>)
 800d998:	4618      	mov	r0, r3
 800d99a:	f7ff f928 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800d99e:	f107 0310 	add.w	r3, r7, #16
 800d9a2:	6839      	ldr	r1, [r7, #0]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f000 f98b 	bl	800dcc0 <_Z13HexStringFromPFvvE>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f107 0210 	add.w	r2, r7, #16
 800d9b0:	f107 0108 	add.w	r1, r7, #8
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7ff fd34 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800d9ba:	f107 0310 	add.w	r3, r7, #16
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7ff fccd 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800d9c4:	f107 0308 	add.w	r3, r7, #8
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7ff fcc8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800d9ce:	bf00      	nop
}
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	3718      	adds	r7, #24
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	08024570 	.word	0x08024570

0800d9dc <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	683a      	ldr	r2, [r7, #0]
 800d9ea:	4904      	ldr	r1, [pc, #16]	; (800d9fc <_Z13HexStringFroml+0x20>)
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f000 f9bd 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	08024574 	.word	0x08024574

0800da00 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	4904      	ldr	r1, [pc, #16]	; (800da20 <_Z13HexStringFromi+0x20>)
 800da10:	4618      	mov	r0, r3
 800da12:	f000 f9ab 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	08024578 	.word	0x08024578

0800da24 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	460b      	mov	r3, r1
 800da2e:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800da30:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4912      	ldr	r1, [pc, #72]	; (800da80 <_Z13HexStringFroma+0x5c>)
 800da38:	4618      	mov	r0, r3
 800da3a:	f000 f997 	bl	800dd6c <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800da3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da42:	2b00      	cmp	r3, #0
 800da44:	da16      	bge.n	800da74 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7ff fc68 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800da4c:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	1e9a      	subs	r2, r3, #2
 800da52:	f107 030c 	add.w	r3, r7, #12
 800da56:	6879      	ldr	r1, [r7, #4]
 800da58:	4618      	mov	r0, r3
 800da5a:	f7ff fdd3 	bl	800d604 <_ZNK12SimpleString9subStringEj>
 800da5e:	f107 030c 	add.w	r3, r7, #12
 800da62:	4619      	mov	r1, r3
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7ff f92e 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800da6a:	f107 030c 	add.w	r3, r7, #12
 800da6e:	4618      	mov	r0, r3
 800da70:	f7ff fc75 	bl	800d35e <_ZN12SimpleStringD1Ev>
    }
    return result;
 800da74:	bf00      	nop
}
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	3718      	adds	r7, #24
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	08024578 	.word	0x08024578

0800da84 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	683a      	ldr	r2, [r7, #0]
 800da92:	4904      	ldr	r1, [pc, #16]	; (800daa4 <_Z13HexStringFromm+0x20>)
 800da94:	4618      	mov	r0, r3
 800da96:	f000 f969 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	08024574 	.word	0x08024574

0800daa8 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	683a      	ldr	r2, [r7, #0]
 800dab6:	4904      	ldr	r1, [pc, #16]	; (800dac8 <_Z13HexStringFromj+0x20>)
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 f957 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	08024578 	.word	0x08024578

0800dacc <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dad6:	f107 0308 	add.w	r3, r7, #8
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	4618      	mov	r0, r3
 800dade:	f7ff ff8f 	bl	800da00 <_Z13HexStringFromi>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f107 0208 	add.w	r2, r7, #8
 800dae8:	4611      	mov	r1, r2
 800daea:	4618      	mov	r0, r3
 800daec:	f000 f87e 	bl	800dbec <_Z26BracketsFormattedHexString12SimpleString>
 800daf0:	f107 0308 	add.w	r3, r7, #8
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7ff fc32 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800dafa:	bf00      	nop
}
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800db0e:	f107 0308 	add.w	r3, r7, #8
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	4618      	mov	r0, r3
 800db16:	f7ff ffc7 	bl	800daa8 <_Z13HexStringFromj>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f107 0208 	add.w	r2, r7, #8
 800db20:	4611      	mov	r1, r2
 800db22:	4618      	mov	r0, r3
 800db24:	f000 f862 	bl	800dbec <_Z26BracketsFormattedHexString12SimpleString>
 800db28:	f107 0308 	add.w	r3, r7, #8
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7ff fc16 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800db32:	bf00      	nop
}
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800db46:	f107 0308 	add.w	r3, r7, #8
 800db4a:	6839      	ldr	r1, [r7, #0]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff ff45 	bl	800d9dc <_Z13HexStringFroml>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f107 0208 	add.w	r2, r7, #8
 800db58:	4611      	mov	r1, r2
 800db5a:	4618      	mov	r0, r3
 800db5c:	f000 f846 	bl	800dbec <_Z26BracketsFormattedHexString12SimpleString>
 800db60:	f107 0308 	add.w	r3, r7, #8
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff fbfa 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800db6a:	bf00      	nop
}
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800db7e:	f107 0308 	add.w	r3, r7, #8
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	4618      	mov	r0, r3
 800db86:	f7ff ff7d 	bl	800da84 <_Z13HexStringFromm>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f107 0208 	add.w	r2, r7, #8
 800db90:	4611      	mov	r1, r2
 800db92:	4618      	mov	r0, r3
 800db94:	f000 f82a 	bl	800dbec <_Z26BracketsFormattedHexString12SimpleString>
 800db98:	f107 0308 	add.w	r3, r7, #8
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff fbde 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800dba2:	bf00      	nop
}
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800dbb8:	f107 0308 	add.w	r3, r7, #8
 800dbbc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800dbc0:	4611      	mov	r1, r2
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff ff2e 	bl	800da24 <_Z13HexStringFroma>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f107 0208 	add.w	r2, r7, #8
 800dbce:	4611      	mov	r1, r2
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f000 f80b 	bl	800dbec <_Z26BracketsFormattedHexString12SimpleString>
 800dbd6:	f107 0308 	add.w	r3, r7, #8
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7ff fbbf 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800dbe0:	bf00      	nop
}
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
	...

0800dbec <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b088      	sub	sp, #32
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800dbf6:	f107 0310 	add.w	r3, r7, #16
 800dbfa:	4917      	ldr	r1, [pc, #92]	; (800dc58 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7fe fff6 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800dc02:	f107 0308 	add.w	r3, r7, #8
 800dc06:	f107 0110 	add.w	r1, r7, #16
 800dc0a:	683a      	ldr	r2, [r7, #0]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7ff fc08 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800dc12:	f107 0318 	add.w	r3, r7, #24
 800dc16:	4911      	ldr	r1, [pc, #68]	; (800dc5c <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7fe ffe8 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f107 0218 	add.w	r2, r7, #24
 800dc24:	f107 0108 	add.w	r1, r7, #8
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7ff fbfa 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800dc2e:	f107 0318 	add.w	r3, r7, #24
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7ff fb93 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800dc38:	f107 0308 	add.w	r3, r7, #8
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff fb8e 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800dc42:	f107 0310 	add.w	r3, r7, #16
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7ff fb89 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800dc4c:	bf00      	nop
}
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	3720      	adds	r7, #32
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	0802457c 	.word	0x0802457c
 800dc5c:	08024580 	.word	0x08024580

0800dc60 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800dc68:	1d3b      	adds	r3, r7, #4
 800dc6a:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800dc84:	1d3b      	adds	r3, r7, #4
 800dc86:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800dca2:	6838      	ldr	r0, [r7, #0]
 800dca4:	f7ff ffdc 	bl	800dc60 <_ZL25convertPointerToLongValuePKv>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4903      	ldr	r1, [pc, #12]	; (800dcbc <_Z13HexStringFromPKv+0x24>)
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f000 f85c 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	08024574 	.word	0x08024574

0800dcc0 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800dcca:	6838      	ldr	r0, [r7, #0]
 800dccc:	f7ff ffd6 	bl	800dc7c <_ZL33convertFunctionPointerToLongValuePFvvE>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4903      	ldr	r1, [pc, #12]	; (800dce4 <_Z13HexStringFromPFvvE+0x24>)
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 f848 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	08024574 	.word	0x08024574

0800dce8 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b086      	sub	sp, #24
 800dcec:	af02      	add	r7, sp, #8
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	ed87 0b00 	vstr	d0, [r7]
 800dcf4:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800dcf6:	4b18      	ldr	r3, [pc, #96]	; (800dd58 <_Z10StringFromdi+0x70>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	ed97 0b00 	vldr	d0, [r7]
 800dcfe:	4798      	blx	r3
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	bf14      	ite	ne
 800dd06:	2301      	movne	r3, #1
 800dd08:	2300      	moveq	r3, #0
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d004      	beq.n	800dd1a <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800dd10:	4912      	ldr	r1, [pc, #72]	; (800dd5c <_Z10StringFromdi+0x74>)
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	f7fe ff6b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800dd18:	e01a      	b.n	800dd50 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800dd1a:	4b11      	ldr	r3, [pc, #68]	; (800dd60 <_Z10StringFromdi+0x78>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	ed97 0b00 	vldr	d0, [r7]
 800dd22:	4798      	blx	r3
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	bf14      	ite	ne
 800dd2a:	2301      	movne	r3, #1
 800dd2c:	2300      	moveq	r3, #0
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d004      	beq.n	800dd3e <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800dd34:	490b      	ldr	r1, [pc, #44]	; (800dd64 <_Z10StringFromdi+0x7c>)
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	f7fe ff59 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800dd3c:	e008      	b.n	800dd50 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd44:	e9cd 2300 	strd	r2, r3, [sp]
 800dd48:	68ba      	ldr	r2, [r7, #8]
 800dd4a:	4907      	ldr	r1, [pc, #28]	; (800dd68 <_Z10StringFromdi+0x80>)
 800dd4c:	f000 f80e 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	200000e8 	.word	0x200000e8
 800dd5c:	080245b4 	.word	0x080245b4
 800dd60:	200000ec 	.word	0x200000ec
 800dd64:	080245c8 	.word	0x080245c8
 800dd68:	080245d8 	.word	0x080245d8

0800dd6c <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800dd6c:	b40e      	push	{r1, r2, r3}
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b087      	sub	sp, #28
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800dd76:	4910      	ldr	r1, [pc, #64]	; (800ddb8 <_Z16StringFromFormatPKcz+0x4c>)
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f7fe ff38 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800dd7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd82:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800dd84:	f107 0310 	add.w	r3, r7, #16
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f000 f839 	bl	800de04 <_Z17VStringFromFormatPKcSt9__va_list>
 800dd92:	f107 0310 	add.w	r3, r7, #16
 800dd96:	4619      	mov	r1, r3
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7fe ff94 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800dd9e:	f107 0310 	add.w	r3, r7, #16
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7ff fadb 	bl	800d35e <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800dda8:	bf00      	nop
}
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	371c      	adds	r7, #28
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddb4:	b003      	add	sp, #12
 800ddb6:	4770      	bx	lr
 800ddb8:	08024540 	.word	0x08024540

0800ddbc <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	4904      	ldr	r1, [pc, #16]	; (800dddc <_Z10StringFromj+0x20>)
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7ff ffcd 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	080245e4 	.word	0x080245e4

0800dde0 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	683a      	ldr	r2, [r7, #0]
 800ddee:	4904      	ldr	r1, [pc, #16]	; (800de00 <_Z10StringFromm+0x20>)
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7ff ffbb 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	080245e8 	.word	0x080245e8

0800de04 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800de04:	b590      	push	{r4, r7, lr}
 800de06:	b0a7      	sub	sp, #156	; 0x9c
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800de14:	492e      	ldr	r1, [pc, #184]	; (800ded0 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f7fe fee9 	bl	800cbee <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800de1c:	4b2d      	ldr	r3, [pc, #180]	; (800ded4 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800de1e:	681c      	ldr	r4, [r3, #0]
 800de20:	f107 0014 	add.w	r0, r7, #20
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	68ba      	ldr	r2, [r7, #8]
 800de28:	2164      	movs	r1, #100	; 0x64
 800de2a:	47a0      	blx	r4
 800de2c:	4603      	mov	r3, r0
 800de2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800de32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de36:	2b63      	cmp	r3, #99	; 0x63
 800de38:	d813      	bhi.n	800de62 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800de3a:	f107 0214 	add.w	r2, r7, #20
 800de3e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800de42:	4611      	mov	r1, r2
 800de44:	4618      	mov	r0, r3
 800de46:	f7fe fed2 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800de4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800de4e:	4619      	mov	r1, r3
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f7fe ff38 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800de56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7ff fa7f 	bl	800d35e <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800de60:	e031      	b.n	800dec6 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800de62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de66:	3301      	adds	r3, #1
 800de68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800de6c:	f240 32c3 	movw	r2, #963	; 0x3c3
 800de70:	4919      	ldr	r1, [pc, #100]	; (800ded8 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800de72:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800de76:	f7fe fc3f 	bl	800c6f8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800de7a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800de7e:	4b15      	ldr	r3, [pc, #84]	; (800ded4 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800de80:	681c      	ldr	r4, [r3, #0]
 800de82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800de8a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800de8e:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800de90:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800de94:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800de98:	4618      	mov	r0, r3
 800de9a:	f7fe fea8 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800de9e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800dea2:	4619      	mov	r1, r3
 800dea4:	68f8      	ldr	r0, [r7, #12]
 800dea6:	f7fe ff0e 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800deaa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800deae:	4618      	mov	r0, r3
 800deb0:	f7ff fa55 	bl	800d35e <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800deb4:	f240 33c7 	movw	r3, #967	; 0x3c7
 800deb8:	4a07      	ldr	r2, [pc, #28]	; (800ded8 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800deba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800debe:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800dec2:	f7fe fc2d 	bl	800c720 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800dec6:	bf00      	nop
}
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	379c      	adds	r7, #156	; 0x9c
 800decc:	46bd      	mov	sp, r7
 800dece:	bd90      	pop	{r4, r7, pc}
 800ded0:	08024540 	.word	0x08024540
 800ded4:	200000b0 	.word	0x200000b0
 800ded8:	08024480 	.word	0x08024480

0800dedc <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b08a      	sub	sp, #40	; 0x28
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800dee8:	491f      	ldr	r1, [pc, #124]	; (800df68 <_Z16StringFromBinaryPKhj+0x8c>)
 800deea:	68f8      	ldr	r0, [r7, #12]
 800deec:	f7fe fe7f 	bl	800cbee <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800def0:	2300      	movs	r3, #0
 800def2:	627b      	str	r3, [r7, #36]	; 0x24
 800def4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	429a      	cmp	r2, r3
 800defa:	d219      	bcs.n	800df30 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	4413      	add	r3, r2
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	461a      	mov	r2, r3
 800df06:	f107 0314 	add.w	r3, r7, #20
 800df0a:	4918      	ldr	r1, [pc, #96]	; (800df6c <_Z16StringFromBinaryPKhj+0x90>)
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7ff ff2d 	bl	800dd6c <_Z16StringFromFormatPKcz>
 800df12:	f107 0314 	add.w	r3, r7, #20
 800df16:	4619      	mov	r1, r3
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f7ff fa9d 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800df1e:	f107 0314 	add.w	r3, r7, #20
 800df22:	4618      	mov	r0, r3
 800df24:	f7ff fa1b 	bl	800d35e <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	3301      	adds	r3, #1
 800df2c:	627b      	str	r3, [r7, #36]	; 0x24
 800df2e:	e7e1      	b.n	800def4 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f7ff f9f3 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800df36:	4603      	mov	r3, r0
 800df38:	3b01      	subs	r3, #1
 800df3a:	f107 001c 	add.w	r0, r7, #28
 800df3e:	2200      	movs	r2, #0
 800df40:	68f9      	ldr	r1, [r7, #12]
 800df42:	f7ff fb15 	bl	800d570 <_ZNK12SimpleString9subStringEjj>
 800df46:	f107 031c 	add.w	r3, r7, #28
 800df4a:	4619      	mov	r1, r3
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	f7fe feba 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800df52:	f107 031c 	add.w	r3, r7, #28
 800df56:	4618      	mov	r0, r3
 800df58:	f7ff fa01 	bl	800d35e <_ZN12SimpleStringD1Ev>

    return result;
 800df5c:	bf00      	nop
}
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	3728      	adds	r7, #40	; 0x28
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	08024540 	.word	0x08024540
 800df6c:	080245ec 	.word	0x080245ec

0800df70 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d006      	beq.n	800df90 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	68b9      	ldr	r1, [r7, #8]
 800df88:	4618      	mov	r0, r3
 800df8a:	f7ff ffa7 	bl	800dedc <_Z16StringFromBinaryPKhj>
 800df8e:	e004      	b.n	800df9a <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	4904      	ldr	r1, [pc, #16]	; (800dfa4 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800df94:	4618      	mov	r0, r3
 800df96:	f7ff fc6f 	bl	800d878 <_Z10StringFromPKc>
}
 800df9a:	68f8      	ldr	r0, [r7, #12]
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	08024560 	.word	0x08024560

0800dfa8 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b088      	sub	sp, #32
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	4913      	ldr	r1, [pc, #76]	; (800e008 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7ff fed6 	bl	800dd6c <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b80      	cmp	r3, #128	; 0x80
 800dfc4:	bf28      	it	cs
 800dfc6:	2380      	movcs	r3, #128	; 0x80
 800dfc8:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800dfca:	f107 0314 	add.w	r3, r7, #20
 800dfce:	69fa      	ldr	r2, [r7, #28]
 800dfd0:	68b9      	ldr	r1, [r7, #8]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7ff ffcc 	bl	800df70 <_Z22StringFromBinaryOrNullPKhj>
 800dfd8:	f107 0314 	add.w	r3, r7, #20
 800dfdc:	4619      	mov	r1, r3
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f7ff fa3a 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800dfe4:	f107 0314 	add.w	r3, r7, #20
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7ff f9b8 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d903      	bls.n	800dffe <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800dff6:	4905      	ldr	r1, [pc, #20]	; (800e00c <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f7ff fa3f 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800dffe:	bf00      	nop
}
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	3720      	adds	r7, #32
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	080245f4 	.word	0x080245f4
 800e00c:	08024610 	.word	0x08024610

0800e010 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d006      	beq.n	800e030 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	68b9      	ldr	r1, [r7, #8]
 800e028:	4618      	mov	r0, r3
 800e02a:	f7ff ffbd 	bl	800dfa8 <_Z24StringFromBinaryWithSizePKhj>
 800e02e:	e004      	b.n	800e03a <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	4904      	ldr	r1, [pc, #16]	; (800e044 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800e034:	4618      	mov	r0, r3
 800e036:	f7ff fc1f 	bl	800d878 <_Z10StringFromPKc>
}
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	08024560 	.word	0x08024560

0800e048 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b088      	sub	sp, #32
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
 800e054:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800e056:	4925      	ldr	r1, [pc, #148]	; (800e0ec <_Z20StringFromMaskedBitsmmj+0xa4>)
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f7fe fdc8 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	2b04      	cmp	r3, #4
 800e062:	d802      	bhi.n	800e06a <_Z20StringFromMaskedBitsmmj+0x22>
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	00db      	lsls	r3, r3, #3
 800e068:	e000      	b.n	800e06c <_Z20StringFromMaskedBitsmmj+0x24>
 800e06a:	2320      	movs	r3, #32
 800e06c:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	3b01      	subs	r3, #1
 800e072:	2201      	movs	r2, #1
 800e074:	fa02 f303 	lsl.w	r3, r2, r3
 800e078:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800e07a:	2300      	movs	r3, #0
 800e07c:	61fb      	str	r3, [r7, #28]
 800e07e:	69fa      	ldr	r2, [r7, #28]
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	429a      	cmp	r2, r3
 800e084:	d22d      	bcs.n	800e0e2 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	4013      	ands	r3, r2
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00c      	beq.n	800e0aa <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	4013      	ands	r3, r2
 800e096:	2b00      	cmp	r3, #0
 800e098:	d001      	beq.n	800e09e <_Z20StringFromMaskedBitsmmj+0x56>
 800e09a:	4b15      	ldr	r3, [pc, #84]	; (800e0f0 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800e09c:	e000      	b.n	800e0a0 <_Z20StringFromMaskedBitsmmj+0x58>
 800e09e:	4b15      	ldr	r3, [pc, #84]	; (800e0f4 <_Z20StringFromMaskedBitsmmj+0xac>)
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f7ff f9ea 	bl	800d47c <_ZN12SimpleStringpLEPKc>
 800e0a8:	e003      	b.n	800e0b2 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800e0aa:	4913      	ldr	r1, [pc, #76]	; (800e0f8 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	f7ff f9e5 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	f003 0307 	and.w	r3, r3, #7
 800e0b8:	2b07      	cmp	r3, #7
 800e0ba:	d108      	bne.n	800e0ce <_Z20StringFromMaskedBitsmmj+0x86>
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	69fa      	ldr	r2, [r7, #28]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d003      	beq.n	800e0ce <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800e0c6:	490d      	ldr	r1, [pc, #52]	; (800e0fc <_Z20StringFromMaskedBitsmmj+0xb4>)
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7ff f9d7 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	005b      	lsls	r3, r3, #1
 800e0d8:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	61fb      	str	r3, [r7, #28]
 800e0e0:	e7cd      	b.n	800e07e <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800e0e2:	bf00      	nop
}
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	3720      	adds	r7, #32
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	08024540 	.word	0x08024540
 800e0f0:	08024618 	.word	0x08024618
 800e0f4:	0802461c 	.word	0x0802461c
 800e0f8:	08024620 	.word	0x08024620
 800e0fc:	08024624 	.word	0x08024624

0800e100 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800e10a:	683a      	ldr	r2, [r7, #0]
 800e10c:	4b18      	ldr	r3, [pc, #96]	; (800e170 <_Z23StringFromOrdinalNumberj+0x70>)
 800e10e:	fba3 1302 	umull	r1, r3, r3, r2
 800e112:	08d9      	lsrs	r1, r3, #3
 800e114:	460b      	mov	r3, r1
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	440b      	add	r3, r1
 800e11a:	005b      	lsls	r3, r3, #1
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	2b0a      	cmp	r3, #10
 800e124:	d905      	bls.n	800e132 <_Z23StringFromOrdinalNumberj+0x32>
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	2b0d      	cmp	r3, #13
 800e12a:	d802      	bhi.n	800e132 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800e12c:	4b11      	ldr	r3, [pc, #68]	; (800e174 <_Z23StringFromOrdinalNumberj+0x74>)
 800e12e:	60fb      	str	r3, [r7, #12]
 800e130:	e013      	b.n	800e15a <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	2b03      	cmp	r3, #3
 800e136:	d102      	bne.n	800e13e <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800e138:	4b0f      	ldr	r3, [pc, #60]	; (800e178 <_Z23StringFromOrdinalNumberj+0x78>)
 800e13a:	60fb      	str	r3, [r7, #12]
 800e13c:	e00d      	b.n	800e15a <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	2b02      	cmp	r3, #2
 800e142:	d102      	bne.n	800e14a <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800e144:	4b0d      	ldr	r3, [pc, #52]	; (800e17c <_Z23StringFromOrdinalNumberj+0x7c>)
 800e146:	60fb      	str	r3, [r7, #12]
 800e148:	e007      	b.n	800e15a <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d102      	bne.n	800e156 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800e150:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <_Z23StringFromOrdinalNumberj+0x80>)
 800e152:	60fb      	str	r3, [r7, #12]
 800e154:	e001      	b.n	800e15a <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800e156:	4b07      	ldr	r3, [pc, #28]	; (800e174 <_Z23StringFromOrdinalNumberj+0x74>)
 800e158:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	683a      	ldr	r2, [r7, #0]
 800e160:	4908      	ldr	r1, [pc, #32]	; (800e184 <_Z23StringFromOrdinalNumberj+0x84>)
 800e162:	f7ff fe03 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	cccccccd 	.word	0xcccccccd
 800e174:	08024628 	.word	0x08024628
 800e178:	0802462c 	.word	0x0802462c
 800e17c:	08024630 	.word	0x08024630
 800e180:	08024634 	.word	0x08024634
 800e184:	08024638 	.word	0x08024638

0800e188 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	3304      	adds	r3, #4
 800e194:	4907      	ldr	r1, [pc, #28]	; (800e1b4 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe fd29 	bl	800cbee <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	60da      	str	r2, [r3, #12]
}
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	08024540 	.word	0x08024540

0800e1b8 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800e1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d01e      	beq.n	800e208 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	3b04      	subs	r3, #4
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	00db      	lsls	r3, r3, #3
 800e1d8:	18d4      	adds	r4, r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	429c      	cmp	r4, r3
 800e1e0:	d004      	beq.n	800e1ec <_ZN22SimpleStringCollection8allocateEj+0x34>
 800e1e2:	3c08      	subs	r4, #8
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f7ff f8ba 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800e1ea:	e7f6      	b.n	800e1da <_ZN22SimpleStringCollection8allocateEj+0x22>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f1a3 0208 	sub.w	r2, r3, #8
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	3b04      	subs	r3, #4
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	4619      	mov	r1, r3
 800e202:	4610      	mov	r0, r2
 800e204:	f7fc f976 	bl	800a4f4 <_ZdaPvj>

    size_ = _size;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	683a      	ldr	r2, [r7, #0]
 800e20c:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	68dc      	ldr	r4, [r3, #12]
 800e212:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800e216:	d202      	bcs.n	800e21e <_ZN22SimpleStringCollection8allocateEj+0x66>
 800e218:	1c63      	adds	r3, r4, #1
 800e21a:	00db      	lsls	r3, r3, #3
 800e21c:	e001      	b.n	800e222 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800e21e:	f04f 33ff 	mov.w	r3, #4294967295
 800e222:	f240 4227 	movw	r2, #1063	; 0x427
 800e226:	4910      	ldr	r1, [pc, #64]	; (800e268 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fc f941 	bl	800a4b0 <_ZnajPKci>
 800e22e:	4605      	mov	r5, r0
 800e230:	1d2b      	adds	r3, r5, #4
 800e232:	3b04      	subs	r3, #4
 800e234:	2208      	movs	r2, #8
 800e236:	601a      	str	r2, [r3, #0]
 800e238:	1d2b      	adds	r3, r5, #4
 800e23a:	601c      	str	r4, [r3, #0]
 800e23c:	f105 0308 	add.w	r3, r5, #8
 800e240:	1e62      	subs	r2, r4, #1
 800e242:	4614      	mov	r4, r2
 800e244:	461e      	mov	r6, r3
 800e246:	2c00      	cmp	r4, #0
 800e248:	db06      	blt.n	800e258 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800e24a:	4908      	ldr	r1, [pc, #32]	; (800e26c <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800e24c:	4630      	mov	r0, r6
 800e24e:	f7fe fcce 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800e252:	3608      	adds	r6, #8
 800e254:	3c01      	subs	r4, #1
 800e256:	e7f6      	b.n	800e246 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800e258:	f105 0208 	add.w	r2, r5, #8
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	601a      	str	r2, [r3, #0]
}
 800e260:	bf00      	nop
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e268:	08024480 	.word	0x08024480
 800e26c:	08024540 	.word	0x08024540

0800e270 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800e270:	b590      	push	{r4, r7, lr}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d01e      	beq.n	800e2be <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	3b04      	subs	r3, #4
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	00db      	lsls	r3, r3, #3
 800e28e:	18d4      	adds	r4, r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	429c      	cmp	r4, r3
 800e296:	d004      	beq.n	800e2a2 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800e298:	3c08      	subs	r4, #8
 800e29a:	4620      	mov	r0, r4
 800e29c:	f7ff f85f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800e2a0:	e7f6      	b.n	800e290 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f1a3 0208 	sub.w	r2, r3, #8
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	3b04      	subs	r3, #4
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	00db      	lsls	r3, r3, #3
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	f7fc f91b 	bl	800a4f4 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3304      	adds	r3, #4
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7ff f84b 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	370c      	adds	r7, #12
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd90      	pop	{r4, r7, pc}

0800e2d2 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800e2d2:	b480      	push	{r7}
 800e2d4:	b083      	sub	sp, #12
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	6078      	str	r0, [r7, #4]
    return size_;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	68db      	ldr	r3, [r3, #12]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	370c      	adds	r7, #12
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr
	...

0800e2ec <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800e2ec:	b590      	push	{r4, r7, lr}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	683a      	ldr	r2, [r7, #0]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d315      	bcc.n	800e32c <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	1d1c      	adds	r4, r3, #4
 800e304:	f107 0308 	add.w	r3, r7, #8
 800e308:	490d      	ldr	r1, [pc, #52]	; (800e340 <_ZN22SimpleStringCollectionixEj+0x54>)
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fe fc6f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800e310:	f107 0308 	add.w	r3, r7, #8
 800e314:	4619      	mov	r1, r3
 800e316:	4620      	mov	r0, r4
 800e318:	f7fe fcd5 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800e31c:	f107 0308 	add.w	r3, r7, #8
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff f81c 	bl	800d35e <_ZN12SimpleStringD1Ev>
        return empty_;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	3304      	adds	r3, #4
 800e32a:	e004      	b.n	800e336 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	00db      	lsls	r3, r3, #3
 800e334:	4413      	add	r3, r2
}
 800e336:	4618      	mov	r0, r3
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd90      	pop	{r4, r7, pc}
 800e33e:	bf00      	nop
 800e340:	08024540 	.word	0x08024540

0800e344 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fa fb88 	bl	8008a64 <_ZN17ConsoleTestOutputC1Ev>
 800e354:	4a08      	ldr	r2, [pc, #32]	; (800e378 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	601a      	str	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	611a      	str	r2, [r3, #16]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	3314      	adds	r3, #20
 800e364:	4905      	ldr	r1, [pc, #20]	; (800e37c <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800e366:	4618      	mov	r0, r3
 800e368:	f7fe fc41 	bl	800cbee <_ZN12SimpleStringC1EPKc>
{
}
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4618      	mov	r0, r3
 800e370:	3708      	adds	r7, #8
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	080283c0 	.word	0x080283c0
 800e37c:	08024640 	.word	0x08024640

0800e380 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	4a08      	ldr	r2, [pc, #32]	; (800e3ac <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	601a      	str	r2, [r3, #0]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	3314      	adds	r3, #20
 800e392:	4618      	mov	r0, r3
 800e394:	f7fe ffe3 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fa fb74 	bl	8008a88 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	080283c0 	.word	0x080283c0

0800e3b0 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
}
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7ff ffe1 	bl	800e380 <_ZN18TeamCityTestOutputD1Ev>
 800e3be:	211c      	movs	r1, #28
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7fc f865 	bl	800a490 <_ZdlPvj>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3708      	adds	r7, #8
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	332c      	adds	r3, #44	; 0x2c
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	492b      	ldr	r1, [pc, #172]	; (800e494 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800e3ea:	f107 0308 	add.w	r3, r7, #8
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f004 fdf7 	bl	8012fe4 <_ZNK10UtestShell7getNameEv>
 800e3f6:	f107 0308 	add.w	r3, r7, #8
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe ff82 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800e400:	4603      	mov	r3, r0
 800e402:	4619      	mov	r1, r3
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f919 	bl	800e63c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e40a:	f107 0308 	add.w	r3, r7, #8
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fe ffa5 	bl	800d35e <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	332c      	adds	r3, #44	; 0x2c
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	491e      	ldr	r1, [pc, #120]	; (800e498 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800e420:	4610      	mov	r0, r2
 800e422:	4798      	blx	r3
    if (!test.willRun()) {
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	3318      	adds	r3, #24
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	6838      	ldr	r0, [r7, #0]
 800e42e:	4798      	blx	r3
 800e430:	4603      	mov	r3, r0
 800e432:	f083 0301 	eor.w	r3, r3, #1
 800e436:	b2db      	uxtb	r3, r3
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d024      	beq.n	800e486 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	332c      	adds	r3, #44	; 0x2c
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4915      	ldr	r1, [pc, #84]	; (800e49c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800e448:	4610      	mov	r0, r2
 800e44a:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800e44c:	f107 0310 	add.w	r3, r7, #16
 800e450:	6839      	ldr	r1, [r7, #0]
 800e452:	4618      	mov	r0, r3
 800e454:	f004 fdc6 	bl	8012fe4 <_ZNK10UtestShell7getNameEv>
 800e458:	f107 0310 	add.w	r3, r7, #16
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fe ff51 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800e462:	4603      	mov	r3, r0
 800e464:	4619      	mov	r1, r3
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 f8e8 	bl	800e63c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e46c:	f107 0310 	add.w	r3, r7, #16
 800e470:	4618      	mov	r0, r3
 800e472:	f7fe ff74 	bl	800d35e <_ZN12SimpleStringD1Ev>
        print("']\n");
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	332c      	adds	r3, #44	; 0x2c
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4905      	ldr	r1, [pc, #20]	; (800e498 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800e482:	4610      	mov	r0, r2
 800e484:	4798      	blx	r3
    }
    currtest_ = &test;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	683a      	ldr	r2, [r7, #0]
 800e48a:	611a      	str	r2, [r3, #16]
}
 800e48c:	bf00      	nop
 800e48e:	3718      	adds	r7, #24
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	08024644 	.word	0x08024644
 800e498:	08024664 	.word	0x08024664
 800e49c:	08024668 	.word	0x08024668

0800e4a0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e4a0:	b5b0      	push	{r4, r5, r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d03b      	beq.n	800e52a <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	332c      	adds	r3, #44	; 0x2c
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	491d      	ldr	r1, [pc, #116]	; (800e534 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800e4be:	4610      	mov	r0, r2
 800e4c0:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	691a      	ldr	r2, [r3, #16]
 800e4c6:	f107 0308 	add.w	r3, r7, #8
 800e4ca:	4611      	mov	r1, r2
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f004 fd89 	bl	8012fe4 <_ZNK10UtestShell7getNameEv>
 800e4d2:	f107 0308 	add.w	r3, r7, #8
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe ff14 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	4619      	mov	r1, r3
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 f8ab 	bl	800e63c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e4e6:	f107 0308 	add.w	r3, r7, #8
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fe ff37 	bl	800d35e <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	332c      	adds	r3, #44	; 0x2c
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	490f      	ldr	r1, [pc, #60]	; (800e538 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800e500:	687d      	ldr	r5, [r7, #4]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3334      	adds	r3, #52	; 0x34
 800e508:	681c      	ldr	r4, [r3, #0]
 800e50a:	6838      	ldr	r0, [r7, #0]
 800e50c:	f004 fa0a 	bl	8012924 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800e510:	4603      	mov	r3, r0
 800e512:	4619      	mov	r1, r3
 800e514:	4628      	mov	r0, r5
 800e516:	47a0      	blx	r4
    print("']\n");
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	332c      	adds	r3, #44	; 0x2c
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4906      	ldr	r1, [pc, #24]	; (800e53c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800e524:	4610      	mov	r0, r2
 800e526:	4798      	blx	r3
 800e528:	e000      	b.n	800e52c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800e52a:	bf00      	nop
}
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bdb0      	pop	{r4, r5, r7, pc}
 800e532:	bf00      	nop
 800e534:	08024688 	.word	0x08024688
 800e538:	080246a8 	.word	0x080246a8
 800e53c:	08024664 	.word	0x08024664

0800e540 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800e540:	b590      	push	{r4, r7, lr}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f103 0414 	add.w	r4, r3, #20
 800e550:	f107 0308 	add.w	r3, r7, #8
 800e554:	6839      	ldr	r1, [r7, #0]
 800e556:	4618      	mov	r0, r3
 800e558:	f004 fd53 	bl	8013002 <_ZNK10UtestShell8getGroupEv>
 800e55c:	f107 0308 	add.w	r3, r7, #8
 800e560:	4619      	mov	r1, r3
 800e562:	4620      	mov	r0, r4
 800e564:	f7fe fbaf 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800e568:	f107 0308 	add.w	r3, r7, #8
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fe fef6 	bl	800d35e <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	332c      	adds	r3, #44	; 0x2c
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	490c      	ldr	r1, [pc, #48]	; (800e5b0 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800e57e:	4610      	mov	r0, r2
 800e580:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	3314      	adds	r3, #20
 800e586:	4618      	mov	r0, r3
 800e588:	f7fe febc 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800e58c:	4603      	mov	r3, r0
 800e58e:	4619      	mov	r1, r3
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f000 f853 	bl	800e63c <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	332c      	adds	r3, #44	; 0x2c
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4904      	ldr	r1, [pc, #16]	; (800e5b4 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	4798      	blx	r3
}
 800e5a6:	bf00      	nop
 800e5a8:	3714      	adds	r7, #20
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd90      	pop	{r4, r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	080246b8 	.word	0x080246b8
 800e5b4:	08024664 	.word	0x08024664

0800e5b8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800e5b8:	b590      	push	{r4, r7, lr}
 800e5ba:	b085      	sub	sp, #20
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f103 0414 	add.w	r4, r3, #20
 800e5c8:	f107 0308 	add.w	r3, r7, #8
 800e5cc:	4918      	ldr	r1, [pc, #96]	; (800e630 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7fe fb0d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800e5d4:	f107 0308 	add.w	r3, r7, #8
 800e5d8:	4619      	mov	r1, r3
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f7fe fecb 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	461c      	mov	r4, r3
 800e5e4:	f107 0308 	add.w	r3, r7, #8
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7fe feb8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800e5ee:	2c00      	cmp	r4, #0
 800e5f0:	d11a      	bne.n	800e628 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	332c      	adds	r3, #44	; 0x2c
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	490d      	ldr	r1, [pc, #52]	; (800e634 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800e5fe:	4610      	mov	r0, r2
 800e600:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3314      	adds	r3, #20
 800e606:	4618      	mov	r0, r3
 800e608:	f7fe fe7c 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800e60c:	4603      	mov	r3, r0
 800e60e:	4619      	mov	r1, r3
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 f813 	bl	800e63c <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	332c      	adds	r3, #44	; 0x2c
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4905      	ldr	r1, [pc, #20]	; (800e638 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800e622:	4610      	mov	r0, r2
 800e624:	4798      	blx	r3
 800e626:	e000      	b.n	800e62a <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800e628:	bf00      	nop
}
 800e62a:	3714      	adds	r7, #20
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd90      	pop	{r4, r7, pc}
 800e630:	08024640 	.word	0x08024640
 800e634:	080246dc 	.word	0x080246dc
 800e638:	08024664 	.word	0x08024664

0800e63c <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
    while (*s) {
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d03f      	beq.n	800e6ce <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	2b27      	cmp	r3, #39	; 0x27
 800e654:	d00b      	beq.n	800e66e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	2b7c      	cmp	r3, #124	; 0x7c
 800e65c:	d007      	beq.n	800e66e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	2b5b      	cmp	r3, #91	; 0x5b
 800e664:	d003      	beq.n	800e66e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	2b5d      	cmp	r3, #93	; 0x5d
 800e66c:	d107      	bne.n	800e67e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800e66e:	237c      	movs	r3, #124	; 0x7c
 800e670:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	73bb      	strb	r3, [r7, #14]
 800e67c:	e01a      	b.n	800e6b4 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	2b0d      	cmp	r3, #13
 800e684:	d106      	bne.n	800e694 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800e686:	237c      	movs	r3, #124	; 0x7c
 800e688:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800e68a:	2372      	movs	r3, #114	; 0x72
 800e68c:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e68e:	2300      	movs	r3, #0
 800e690:	73bb      	strb	r3, [r7, #14]
 800e692:	e00f      	b.n	800e6b4 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	2b0a      	cmp	r3, #10
 800e69a:	d106      	bne.n	800e6aa <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800e69c:	237c      	movs	r3, #124	; 0x7c
 800e69e:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800e6a0:	236e      	movs	r3, #110	; 0x6e
 800e6a2:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	73bb      	strb	r3, [r7, #14]
 800e6a8:	e004      	b.n	800e6b4 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3328      	adds	r3, #40	; 0x28
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f107 010c 	add.w	r1, r7, #12
 800e6c2:	4610      	mov	r0, r2
 800e6c4:	4798      	blx	r3
        s++;
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	603b      	str	r3, [r7, #0]
    while (*s) {
 800e6cc:	e7bb      	b.n	800e646 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800e6ce:	bf00      	nop
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
	...

0800e6d8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800e6d8:	b5b0      	push	{r4, r5, r7, lr}
 800e6da:	b08a      	sub	sp, #40	; 0x28
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	332c      	adds	r3, #44	; 0x2c
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4968      	ldr	r1, [pc, #416]	; (800e890 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	3310      	adds	r3, #16
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f107 0208 	add.w	r2, r7, #8
 800e6fe:	6839      	ldr	r1, [r7, #0]
 800e700:	4610      	mov	r0, r2
 800e702:	4798      	blx	r3
 800e704:	f107 0308 	add.w	r3, r7, #8
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fe fdfb 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800e70e:	4603      	mov	r3, r0
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff ff92 	bl	800e63c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e718:	f107 0308 	add.w	r3, r7, #8
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7fe fe1e 	bl	800d35e <_ZN12SimpleStringD1Ev>
    print("' message='");
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	332c      	adds	r3, #44	; 0x2c
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4959      	ldr	r1, [pc, #356]	; (800e894 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800e72e:	4610      	mov	r0, r2
 800e730:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800e732:	6838      	ldr	r0, [r7, #0]
 800e734:	f000 fa15 	bl	800eb62 <_ZNK11TestFailure17isOutsideTestFileEv>
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d105      	bne.n	800e74a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800e73e:	6838      	ldr	r0, [r7, #0]
 800e740:	f000 fa21 	bl	800eb86 <_ZNK11TestFailure18isInHelperFunctionEv>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d001      	beq.n	800e74e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800e74a:	2301      	movs	r3, #1
 800e74c:	e000      	b.n	800e750 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800e74e:	2300      	movs	r3, #0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d042      	beq.n	800e7da <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	332c      	adds	r3, #44	; 0x2c
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	494e      	ldr	r1, [pc, #312]	; (800e898 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800e760:	4610      	mov	r0, r2
 800e762:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800e764:	687d      	ldr	r5, [r7, #4]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	332c      	adds	r3, #44	; 0x2c
 800e76c:	681c      	ldr	r4, [r3, #0]
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	331c      	adds	r3, #28
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f107 0210 	add.w	r2, r7, #16
 800e77a:	6839      	ldr	r1, [r7, #0]
 800e77c:	4610      	mov	r0, r2
 800e77e:	4798      	blx	r3
 800e780:	f107 0310 	add.w	r3, r7, #16
 800e784:	4618      	mov	r0, r3
 800e786:	f7fe fdbd 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800e78a:	4603      	mov	r3, r0
 800e78c:	4619      	mov	r1, r3
 800e78e:	4628      	mov	r0, r5
 800e790:	47a0      	blx	r4
 800e792:	f107 0310 	add.w	r3, r7, #16
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe fde1 	bl	800d35e <_ZN12SimpleStringD1Ev>
        print(":");
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	332c      	adds	r3, #44	; 0x2c
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	493d      	ldr	r1, [pc, #244]	; (800e89c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800e7ac:	687d      	ldr	r5, [r7, #4]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3334      	adds	r3, #52	; 0x34
 800e7b4:	681c      	ldr	r4, [r3, #0]
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3320      	adds	r3, #32
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	6838      	ldr	r0, [r7, #0]
 800e7c0:	4798      	blx	r3
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	47a0      	blx	r4
        print("): ");
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	332c      	adds	r3, #44	; 0x2c
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4932      	ldr	r1, [pc, #200]	; (800e8a0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800e7d6:	4610      	mov	r0, r2
 800e7d8:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	3308      	adds	r3, #8
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f107 0218 	add.w	r2, r7, #24
 800e7e6:	6839      	ldr	r1, [r7, #0]
 800e7e8:	4610      	mov	r0, r2
 800e7ea:	4798      	blx	r3
 800e7ec:	f107 0318 	add.w	r3, r7, #24
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7fe fd87 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f7ff ff1e 	bl	800e63c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e800:	f107 0318 	add.w	r3, r7, #24
 800e804:	4618      	mov	r0, r3
 800e806:	f7fe fdaa 	bl	800d35e <_ZN12SimpleStringD1Ev>
    print(":");
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	332c      	adds	r3, #44	; 0x2c
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4921      	ldr	r1, [pc, #132]	; (800e89c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e816:	4610      	mov	r0, r2
 800e818:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800e81a:	687d      	ldr	r5, [r7, #4]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	3334      	adds	r3, #52	; 0x34
 800e822:	681c      	ldr	r4, [r3, #0]
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	3314      	adds	r3, #20
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6838      	ldr	r0, [r7, #0]
 800e82e:	4798      	blx	r3
 800e830:	4603      	mov	r3, r0
 800e832:	4619      	mov	r1, r3
 800e834:	4628      	mov	r0, r5
 800e836:	47a0      	blx	r4

    print("' details='");
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	332c      	adds	r3, #44	; 0x2c
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4918      	ldr	r1, [pc, #96]	; (800e8a4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800e844:	4610      	mov	r0, r2
 800e846:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3318      	adds	r3, #24
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f107 0220 	add.w	r2, r7, #32
 800e854:	6839      	ldr	r1, [r7, #0]
 800e856:	4610      	mov	r0, r2
 800e858:	4798      	blx	r3
 800e85a:	f107 0320 	add.w	r3, r7, #32
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fe fd50 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800e864:	4603      	mov	r3, r0
 800e866:	4619      	mov	r1, r3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f7ff fee7 	bl	800e63c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e86e:	f107 0320 	add.w	r3, r7, #32
 800e872:	4618      	mov	r0, r3
 800e874:	f7fe fd73 	bl	800d35e <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	332c      	adds	r3, #44	; 0x2c
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4909      	ldr	r1, [pc, #36]	; (800e8a8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800e884:	4610      	mov	r0, r2
 800e886:	4798      	blx	r3
}
 800e888:	bf00      	nop
 800e88a:	3728      	adds	r7, #40	; 0x28
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bdb0      	pop	{r4, r5, r7, pc}
 800e890:	08024700 	.word	0x08024700
 800e894:	08024720 	.word	0x08024720
 800e898:	0802472c 	.word	0x0802472c
 800e89c:	0802473c 	.word	0x0802473c
 800e8a0:	08024740 	.word	0x08024740
 800e8a4:	08024744 	.word	0x08024744
 800e8a8:	08024664 	.word	0x08024664

0800e8ac <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800e8b8:	4a1a      	ldr	r2, [pc, #104]	; (800e924 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	601a      	str	r2, [r3, #0]
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	3314      	adds	r3, #20
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	3204      	adds	r2, #4
 800e8ca:	68b9      	ldr	r1, [r7, #8]
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	4798      	blx	r3
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	330c      	adds	r3, #12
 800e8d4:	68b9      	ldr	r1, [r7, #8]
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f004 fb84 	bl	8012fe4 <_ZNK10UtestShell7getNameEv>
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	3314      	adds	r3, #20
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f004 fc4f 	bl	8013186 <_ZNK10UtestShell7getFileEv>
 800e8e8:	68b8      	ldr	r0, [r7, #8]
 800e8ea:	f004 fc5b 	bl	80131a4 <_ZNK10UtestShell13getLineNumberEv>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	61da      	str	r2, [r3, #28]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	3320      	adds	r3, #32
 800e8f8:	68b9      	ldr	r1, [r7, #8]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f004 fc43 	bl	8013186 <_ZNK10UtestShell7getFileEv>
 800e900:	68b8      	ldr	r0, [r7, #8]
 800e902:	f004 fc4f 	bl	80131a4 <_ZNK10UtestShell13getLineNumberEv>
 800e906:	4602      	mov	r2, r0
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	629a      	str	r2, [r3, #40]	; 0x28
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	332c      	adds	r3, #44	; 0x2c
 800e910:	6879      	ldr	r1, [r7, #4]
 800e912:	4618      	mov	r0, r3
 800e914:	f7fe f9bf 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
{
}
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	4618      	mov	r0, r3
 800e91c:	3710      	adds	r7, #16
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	0802868c 	.word	0x0802868c

0800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]
 800e934:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800e936:	4a19      	ldr	r2, [pc, #100]	; (800e99c <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	601a      	str	r2, [r3, #0]
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	3314      	adds	r3, #20
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	3204      	adds	r2, #4
 800e948:	68b9      	ldr	r1, [r7, #8]
 800e94a:	4610      	mov	r0, r2
 800e94c:	4798      	blx	r3
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	330c      	adds	r3, #12
 800e952:	68b9      	ldr	r1, [r7, #8]
 800e954:	4618      	mov	r0, r3
 800e956:	f004 fb45 	bl	8012fe4 <_ZNK10UtestShell7getNameEv>
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	3314      	adds	r3, #20
 800e95e:	6879      	ldr	r1, [r7, #4]
 800e960:	4618      	mov	r0, r3
 800e962:	f7fe f944 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	683a      	ldr	r2, [r7, #0]
 800e96a:	61da      	str	r2, [r3, #28]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	3320      	adds	r3, #32
 800e970:	68b9      	ldr	r1, [r7, #8]
 800e972:	4618      	mov	r0, r3
 800e974:	f004 fc07 	bl	8013186 <_ZNK10UtestShell7getFileEv>
 800e978:	68b8      	ldr	r0, [r7, #8]
 800e97a:	f004 fc13 	bl	80131a4 <_ZNK10UtestShell13getLineNumberEv>
 800e97e:	4602      	mov	r2, r0
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	629a      	str	r2, [r3, #40]	; 0x28
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	332c      	adds	r3, #44	; 0x2c
 800e988:	4905      	ldr	r1, [pc, #20]	; (800e9a0 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe f92f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
{
}
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	4618      	mov	r0, r3
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	0802868c 	.word	0x0802868c
 800e9a0:	08024750 	.word	0x08024750

0800e9a4 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800e9ae:	4a1e      	ldr	r2, [pc, #120]	; (800ea28 <_ZN11TestFailureC1ERKS_+0x84>)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	601a      	str	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	1d1a      	adds	r2, r3, #4
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	3304      	adds	r3, #4
 800e9bc:	4619      	mov	r1, r3
 800e9be:	4610      	mov	r0, r2
 800e9c0:	f7fe f969 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f103 020c 	add.w	r2, r3, #12
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	330c      	adds	r3, #12
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	4610      	mov	r0, r2
 800e9d2:	f7fe f960 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f103 0214 	add.w	r2, r3, #20
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	3314      	adds	r3, #20
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	4610      	mov	r0, r2
 800e9e4:	f7fe f957 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	69da      	ldr	r2, [r3, #28]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	61da      	str	r2, [r3, #28]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f103 0220 	add.w	r2, r3, #32
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	3320      	adds	r3, #32
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4610      	mov	r0, r2
 800e9fe:	f7fe f94a 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	629a      	str	r2, [r3, #40]	; 0x28
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	332c      	adds	r3, #44	; 0x2c
 800ea14:	4619      	mov	r1, r3
 800ea16:	4610      	mov	r0, r2
 800ea18:	f7fe f93d 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
{
}
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	0802868c 	.word	0x0802868c

0800ea2c <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	4a10      	ldr	r2, [pc, #64]	; (800ea78 <_ZN11TestFailureD1Ev+0x4c>)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	601a      	str	r2, [r3, #0]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	332c      	adds	r3, #44	; 0x2c
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7fe fc8d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	3320      	adds	r3, #32
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7fe fc88 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	3314      	adds	r3, #20
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fe fc83 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	330c      	adds	r3, #12
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7fe fc7e 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	3304      	adds	r3, #4
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe fc79 	bl	800d35e <_ZN12SimpleStringD1Ev>
{
}
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	0802868c 	.word	0x0802868c

0800ea7c <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
}
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f7ff ffd1 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800ea8a:	2134      	movs	r1, #52	; 0x34
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f7fb fcff 	bl	800a490 <_ZdlPvj>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4618      	mov	r0, r3
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
    return fileName_;
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	3314      	adds	r3, #20
 800eaaa:	4619      	mov	r1, r3
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f7fe f8f2 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
}
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b082      	sub	sp, #8
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	3320      	adds	r3, #32
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7fe f8e3 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
}
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
    return testName_;
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	3304      	adds	r3, #4
 800eae6:	4619      	mov	r1, r3
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7fe f8d4 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
}
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	3708      	adds	r7, #8
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}

0800eaf6 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800eaf6:	b580      	push	{r7, lr}
 800eaf8:	b082      	sub	sp, #8
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
 800eafe:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	330c      	adds	r3, #12
 800eb04:	4619      	mov	r1, r3
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f7fe f8c5 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
}
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	69db      	ldr	r3, [r3, #28]
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	370c      	adds	r7, #12
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
    return message_;
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	332c      	adds	r3, #44	; 0x2c
 800eb52:	4619      	mov	r1, r3
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7fe f89e 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
}
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b082      	sub	sp, #8
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f103 0220 	add.w	r2, r3, #32
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	3314      	adds	r3, #20
 800eb74:	4619      	mov	r1, r3
 800eb76:	4610      	mov	r0, r2
 800eb78:	f7fe fc42 	bl	800d400 <_ZneRK12SimpleStringS1_>
 800eb7c:	4603      	mov	r3, r0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800eb86:	b480      	push	{r7}
 800eb88:	b083      	sub	sp, #12
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	69da      	ldr	r2, [r3, #28]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb96:	429a      	cmp	r2, r3
 800eb98:	bf34      	ite	cc
 800eb9a:	2301      	movcc	r3, #1
 800eb9c:	2300      	movcs	r3, #0
 800eb9e:	b2db      	uxtb	r3, r3
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800ebac:	b590      	push	{r4, r7, lr}
 800ebae:	b085      	sub	sp, #20
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7fe fba2 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	6838      	ldr	r0, [r7, #0]
 800ebc4:	f7fe fb9e 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4903      	ldr	r1, [pc, #12]	; (800ebdc <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800ebd0:	f7ff f8cc 	bl	800dd6c <_Z16StringFromFormatPKcz>
}
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	3714      	adds	r7, #20
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd90      	pop	{r4, r7, pc}
 800ebdc:	0802475c 	.word	0x0802475c

0800ebe0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800ebe0:	b590      	push	{r4, r7, lr}
 800ebe2:	b097      	sub	sp, #92	; 0x5c
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800ebee:	494c      	ldr	r1, [pc, #304]	; (800ed20 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	f7fd fffc 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800ebf6:	2314      	movs	r3, #20
 800ebf8:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800ebfa:	230a      	movs	r3, #10
 800ebfc:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ebfe:	f107 0320 	add.w	r3, r7, #32
 800ec02:	220a      	movs	r2, #10
 800ec04:	4947      	ldr	r1, [pc, #284]	; (800ed24 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fe f80c 	bl	800cc24 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ec0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec10:	f107 0120 	add.w	r1, r7, #32
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fe fc03 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800ec1c:	f107 0318 	add.w	r3, r7, #24
 800ec20:	f107 0220 	add.w	r2, r7, #32
 800ec24:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fe fbfa 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800ec2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7fe fb93 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ec38:	f107 0310 	add.w	r3, r7, #16
 800ec3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec3e:	493a      	ldr	r1, [pc, #232]	; (800ed28 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7ff f893 	bl	800dd6c <_Z16StringFromFormatPKcz>

    result += "\n";
 800ec46:	4939      	ldr	r1, [pc, #228]	; (800ed2c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800ec48:	68f8      	ldr	r0, [r7, #12]
 800ec4a:	f7fe fc17 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800ec4e:	f107 0310 	add.w	r3, r7, #16
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fe fb56 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800ec58:	4604      	mov	r4, r0
 800ec5a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ec5e:	f107 0118 	add.w	r1, r7, #24
 800ec62:	2314      	movs	r3, #20
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	f7fe fc83 	bl	800d570 <_ZNK12SimpleString9subStringEjj>
 800ec6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fe fb48 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800ec74:	4603      	mov	r3, r0
 800ec76:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ec7a:	4622      	mov	r2, r4
 800ec7c:	492c      	ldr	r1, [pc, #176]	; (800ed30 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800ec7e:	f7ff f875 	bl	800dd6c <_Z16StringFromFormatPKcz>
 800ec82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ec86:	4619      	mov	r1, r3
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f7fe fbe5 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800ec8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fe fb63 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800ec98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fe fb5e 	bl	800d35e <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800eca2:	f107 0310 	add.w	r3, r7, #16
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fe fb38 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 800ecac:	4603      	mov	r3, r0
 800ecae:	f103 020a 	add.w	r2, r3, #10
 800ecb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ecb6:	491b      	ldr	r1, [pc, #108]	; (800ed24 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fd ffb3 	bl	800cc24 <_ZN12SimpleStringC1EPKcj>
 800ecbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fe fb1e 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ecce:	4919      	ldr	r1, [pc, #100]	; (800ed34 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7ff f84b 	bl	800dd6c <_Z16StringFromFormatPKcz>
 800ecd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ecda:	4619      	mov	r1, r3
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f7fe fbbb 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800ece2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fe fb39 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800ecec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fe fb34 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return result;
 800ecf6:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ecf8:	f107 0310 	add.w	r3, r7, #16
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7fe fb2e 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ed02:	f107 0318 	add.w	r3, r7, #24
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fe fb29 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ed0c:	f107 0320 	add.w	r3, r7, #32
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7fe fb24 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return result;
 800ed16:	bf00      	nop
}
 800ed18:	68f8      	ldr	r0, [r7, #12]
 800ed1a:	375c      	adds	r7, #92	; 0x5c
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd90      	pop	{r4, r7, pc}
 800ed20:	0802477c 	.word	0x0802477c
 800ed24:	08024780 	.word	0x08024780
 800ed28:	08024784 	.word	0x08024784
 800ed2c:	080247ac 	.word	0x080247ac
 800ed30:	080247b0 	.word	0x080247b0
 800ed34:	080247b8 	.word	0x080247b8

0800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800ed38:	b590      	push	{r4, r7, lr}
 800ed3a:	b087      	sub	sp, #28
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800ed44:	491a      	ldr	r1, [pc, #104]	; (800edb0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f7fd ff51 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f7fe faf5 	bl	800d33c <_ZNK12SimpleString7isEmptyEv>
 800ed52:	4603      	mov	r3, r0
 800ed54:	f083 0301 	eor.w	r3, r3, #1
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d022      	beq.n	800eda4 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800ed5e:	f107 0310 	add.w	r3, r7, #16
 800ed62:	4914      	ldr	r1, [pc, #80]	; (800edb4 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fd ff42 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800ed6a:	f107 0310 	add.w	r3, r7, #16
 800ed6e:	4619      	mov	r1, r3
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f7fe f800 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 800ed76:	4603      	mov	r3, r0
 800ed78:	f083 0301 	eor.w	r3, r3, #1
 800ed7c:	b2dc      	uxtb	r4, r3
 800ed7e:	f107 0310 	add.w	r3, r7, #16
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fe faeb 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800ed88:	2c00      	cmp	r4, #0
 800ed8a:	d003      	beq.n	800ed94 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800ed8c:	490a      	ldr	r1, [pc, #40]	; (800edb8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f7fe fb74 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800ed94:	6879      	ldr	r1, [r7, #4]
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7fe fb5e 	bl	800d458 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800ed9c:	4907      	ldr	r1, [pc, #28]	; (800edbc <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f7fe fb6c 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800eda4:	bf00      	nop
}
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	371c      	adds	r7, #28
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd90      	pop	{r4, r7, pc}
 800edae:	bf00      	nop
 800edb0:	0802477c 	.word	0x0802477c
 800edb4:	080247c0 	.word	0x080247c0
 800edb8:	080247cc 	.word	0x080247cc
 800edbc:	080247d8 	.word	0x080247d8

0800edc0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800edc0:	b590      	push	{r4, r7, lr}
 800edc2:	b089      	sub	sp, #36	; 0x24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	607a      	str	r2, [r7, #4]
 800edcc:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	68b9      	ldr	r1, [r7, #8]
 800edd6:	f7ff fda7 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800edda:	4a19      	ldr	r2, [pc, #100]	; (800ee40 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ede6:	68f9      	ldr	r1, [r7, #12]
 800ede8:	f107 0310 	add.w	r3, r7, #16
 800edec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edee:	4618      	mov	r0, r3
 800edf0:	f7ff ffa2 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800edf4:	f107 0310 	add.w	r3, r7, #16
 800edf8:	4619      	mov	r1, r3
 800edfa:	4620      	mov	r0, r4
 800edfc:	f7fd ff63 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800ee00:	f107 0310 	add.w	r3, r7, #16
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe faaa 	bl	800d35e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ee10:	68f9      	ldr	r1, [r7, #12]
 800ee12:	f107 0018 	add.w	r0, r7, #24
 800ee16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee1a:	f7ff fec7 	bl	800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ee1e:	f107 0318 	add.w	r3, r7, #24
 800ee22:	4619      	mov	r1, r3
 800ee24:	4620      	mov	r0, r4
 800ee26:	f7fe fb17 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800ee2a:	f107 0318 	add.w	r3, r7, #24
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fe fa95 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	4618      	mov	r0, r3
 800ee38:	3724      	adds	r7, #36	; 0x24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd90      	pop	{r4, r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	08028660 	.word	0x08028660

0800ee44 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800ee44:	b5b0      	push	{r4, r5, r7, lr}
 800ee46:	b094      	sub	sp, #80	; 0x50
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6278      	str	r0, [r7, #36]	; 0x24
 800ee4c:	6239      	str	r1, [r7, #32]
 800ee4e:	61fa      	str	r2, [r7, #28]
 800ee50:	61bb      	str	r3, [r7, #24]
 800ee52:	ed87 0b04 	vstr	d0, [r7, #16]
 800ee56:	ed87 1b02 	vstr	d1, [r7, #8]
 800ee5a:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800ee5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	69fa      	ldr	r2, [r7, #28]
 800ee64:	6a39      	ldr	r1, [r7, #32]
 800ee66:	f7ff fd5f 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ee6a:	4a4a      	ldr	r2, [pc, #296]	; (800ef94 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ee70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee72:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ee76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff ff5a 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ee84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee88:	4619      	mov	r1, r3
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f7fd ff1b 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800ee90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fe fa62 	bl	800d35e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eea0:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800eea2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eea6:	2107      	movs	r1, #7
 800eea8:	ed97 0b04 	vldr	d0, [r7, #16]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fe ff1b 	bl	800dce8 <_Z10StringFromdi>
 800eeb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eeb6:	2107      	movs	r1, #7
 800eeb8:	ed97 0b02 	vldr	d0, [r7, #8]
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fe ff13 	bl	800dce8 <_Z10StringFromdi>
 800eec2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800eec6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eeca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800eece:	4629      	mov	r1, r5
 800eed0:	f7ff fe6c 	bl	800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800eed4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eed8:	4619      	mov	r1, r3
 800eeda:	4620      	mov	r0, r4
 800eedc:	f7fe fabc 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800eee0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7fe fa3a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800eeea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fe fa35 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800eef4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7fe fa30 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef00:	332c      	adds	r3, #44	; 0x2c
 800ef02:	4925      	ldr	r1, [pc, #148]	; (800ef98 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fe fab9 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ef10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef14:	2107      	movs	r1, #7
 800ef16:	ed97 0b00 	vldr	d0, [r7]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fe fee4 	bl	800dce8 <_Z10StringFromdi>
 800ef20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef24:	4619      	mov	r1, r3
 800ef26:	4620      	mov	r0, r4
 800ef28:	f7fe fa96 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800ef2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7fe fa14 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef38:	332c      	adds	r3, #44	; 0x2c
 800ef3a:	4918      	ldr	r1, [pc, #96]	; (800ef9c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fe fa9d 	bl	800d47c <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800ef42:	4b17      	ldr	r3, [pc, #92]	; (800efa0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	ed97 0b04 	vldr	d0, [r7, #16]
 800ef4a:	4798      	blx	r3
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d10f      	bne.n	800ef72 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800ef52:	4b13      	ldr	r3, [pc, #76]	; (800efa0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	ed97 0b02 	vldr	d0, [r7, #8]
 800ef5a:	4798      	blx	r3
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d107      	bne.n	800ef72 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800ef62:	4b0f      	ldr	r3, [pc, #60]	; (800efa0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	ed97 0b00 	vldr	d0, [r7]
 800ef6a:	4798      	blx	r3
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800ef72:	2301      	movs	r3, #1
 800ef74:	e000      	b.n	800ef78 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800ef76:	2300      	movs	r3, #0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d005      	beq.n	800ef88 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	332c      	adds	r3, #44	; 0x2c
 800ef80:	4908      	ldr	r1, [pc, #32]	; (800efa4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe fa7a 	bl	800d47c <_ZN12SimpleStringpLEPKc>
}
 800ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3750      	adds	r7, #80	; 0x50
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bdb0      	pop	{r4, r5, r7, pc}
 800ef92:	bf00      	nop
 800ef94:	08028634 	.word	0x08028634
 800ef98:	080247dc 	.word	0x080247dc
 800ef9c:	080247f4 	.word	0x080247f4
 800efa0:	200000e8 	.word	0x200000e8
 800efa4:	080247f8 	.word	0x080247f8

0800efa8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800efa8:	b590      	push	{r4, r7, lr}
 800efaa:	b093      	sub	sp, #76	; 0x4c
 800efac:	af02      	add	r7, sp, #8
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
 800efb4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	68b9      	ldr	r1, [r7, #8]
 800efbe:	f7ff fcb3 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800efc2:	4a4f      	ldr	r2, [pc, #316]	; (800f100 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800efce:	68f9      	ldr	r1, [r7, #12]
 800efd0:	f107 0320 	add.w	r3, r7, #32
 800efd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff feae 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800efdc:	f107 0320 	add.w	r3, r7, #32
 800efe0:	4619      	mov	r1, r3
 800efe2:	4620      	mov	r0, r4
 800efe4:	f7fd fe6f 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800efe8:	f107 0320 	add.w	r3, r7, #32
 800efec:	4618      	mov	r0, r3
 800efee:	f7fe f9b6 	bl	800d35e <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800eff2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800eff4:	f7fe f986 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800eff8:	4602      	mov	r2, r0
 800effa:	f107 0318 	add.w	r3, r7, #24
 800effe:	4611      	mov	r1, r2
 800f000:	4618      	mov	r0, r3
 800f002:	f7fe fc47 	bl	800d894 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800f006:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f008:	f7fe f97c 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800f00c:	4602      	mov	r2, r0
 800f00e:	f107 0310 	add.w	r3, r7, #16
 800f012:	4611      	mov	r1, r2
 800f014:	4618      	mov	r0, r3
 800f016:	f7fe fc3d 	bl	800d894 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f020:	68f9      	ldr	r1, [r7, #12]
 800f022:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f026:	f107 0310 	add.w	r3, r7, #16
 800f02a:	f107 0218 	add.w	r2, r7, #24
 800f02e:	f7ff fdbd 	bl	800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f036:	4619      	mov	r1, r3
 800f038:	4620      	mov	r0, r4
 800f03a:	f7fe fa0d 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800f03e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f042:	4618      	mov	r0, r3
 800f044:	f7fe f98b 	bl	800d35e <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800f048:	2300      	movs	r3, #0
 800f04a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f04c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f04e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f050:	f7fe fae9 	bl	800d626 <_ZNK12SimpleString2atEj>
 800f054:	4603      	mov	r3, r0
 800f056:	461c      	mov	r4, r3
 800f058:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f05a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f05c:	f7fe fae3 	bl	800d626 <_ZNK12SimpleString2atEj>
 800f060:	4603      	mov	r3, r0
 800f062:	429c      	cmp	r4, r3
 800f064:	bf0c      	ite	eq
 800f066:	2301      	moveq	r3, #1
 800f068:	2300      	movne	r3, #0
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800f070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f072:	3301      	adds	r3, #1
 800f074:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f076:	e7e9      	b.n	800f04c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f078:	2300      	movs	r3, #0
 800f07a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f07c:	f107 0310 	add.w	r3, r7, #16
 800f080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f082:	4618      	mov	r0, r3
 800f084:	f7fe facf 	bl	800d626 <_ZNK12SimpleString2atEj>
 800f088:	4603      	mov	r3, r0
 800f08a:	461c      	mov	r4, r3
 800f08c:	f107 0318 	add.w	r3, r7, #24
 800f090:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f092:	4618      	mov	r0, r3
 800f094:	f7fe fac7 	bl	800d626 <_ZNK12SimpleString2atEj>
 800f098:	4603      	mov	r3, r0
 800f09a:	429c      	cmp	r4, r3
 800f09c:	bf0c      	ite	eq
 800f09e:	2301      	moveq	r3, #1
 800f0a0:	2300      	movne	r3, #0
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d003      	beq.n	800f0b0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800f0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0ae:	e7e5      	b.n	800f07c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f0b6:	68f9      	ldr	r1, [r7, #12]
 800f0b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f0bc:	f107 0210 	add.w	r2, r7, #16
 800f0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0c2:	9300      	str	r3, [sp, #0]
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c6:	f7ff fd8b 	bl	800ebe0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f0ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f7fe f9c1 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800f0d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fe f93f 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800f0e0:	f107 0310 	add.w	r3, r7, #16
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fe f93a 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800f0ea:	f107 0318 	add.w	r3, r7, #24
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fe f935 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3744      	adds	r7, #68	; 0x44
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd90      	pop	{r4, r7, pc}
 800f0fe:	bf00      	nop
 800f100:	08028608 	.word	0x08028608

0800f104 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800f104:	b590      	push	{r4, r7, lr}
 800f106:	b087      	sub	sp, #28
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
 800f110:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f112:	68f8      	ldr	r0, [r7, #12]
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	68b9      	ldr	r1, [r7, #8]
 800f11a:	f7ff fc05 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f11e:	4a1a      	ldr	r2, [pc, #104]	; (800f188 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f12a:	68f9      	ldr	r1, [r7, #12]
 800f12c:	f107 0310 	add.w	r3, r7, #16
 800f130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f132:	4618      	mov	r0, r3
 800f134:	f7ff fe00 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f138:	f107 0310 	add.w	r3, r7, #16
 800f13c:	4619      	mov	r1, r3
 800f13e:	4620      	mov	r0, r4
 800f140:	f7fd fdc1 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800f144:	f107 0310 	add.w	r3, r7, #16
 800f148:	4618      	mov	r0, r3
 800f14a:	f7fe f908 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	332c      	adds	r3, #44	; 0x2c
 800f152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f154:	4618      	mov	r0, r3
 800f156:	f7fe f97f 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	332c      	adds	r3, #44	; 0x2c
 800f15e:	490b      	ldr	r1, [pc, #44]	; (800f18c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800f160:	4618      	mov	r0, r3
 800f162:	f7fe f98b 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	332c      	adds	r3, #44	; 0x2c
 800f16a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7fe f973 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	332c      	adds	r3, #44	; 0x2c
 800f176:	4906      	ldr	r1, [pc, #24]	; (800f190 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f178:	4618      	mov	r0, r3
 800f17a:	f7fe f97f 	bl	800d47c <_ZN12SimpleStringpLEPKc>
}
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	4618      	mov	r0, r3
 800f182:	371c      	adds	r7, #28
 800f184:	46bd      	mov	sp, r7
 800f186:	bd90      	pop	{r4, r7, pc}
 800f188:	080285dc 	.word	0x080285dc
 800f18c:	0802481c 	.word	0x0802481c
 800f190:	08024820 	.word	0x08024820

0800f194 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f194:	b5b0      	push	{r4, r5, r7, lr}
 800f196:	b088      	sub	sp, #32
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
 800f1a0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	68b9      	ldr	r1, [r7, #8]
 800f1aa:	f7ff fbbd 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f1ae:	4a1c      	ldr	r2, [pc, #112]	; (800f220 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f1ba:	68f9      	ldr	r1, [r7, #12]
 800f1bc:	f107 0310 	add.w	r3, r7, #16
 800f1c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7ff fdb8 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f1c8:	f107 0310 	add.w	r3, r7, #16
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	f7fd fd79 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800f1d4:	f107 0310 	add.w	r3, r7, #16
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7fe f8c0 	bl	800d35e <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f1e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1e6:	f7fe f88d 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800f1ea:	4605      	mov	r5, r0
 800f1ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1ee:	f7fe f889 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	f107 0018 	add.w	r0, r7, #24
 800f1f8:	462a      	mov	r2, r5
 800f1fa:	490a      	ldr	r1, [pc, #40]	; (800f224 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800f1fc:	f7fe fdb6 	bl	800dd6c <_Z16StringFromFormatPKcz>
 800f200:	f107 0318 	add.w	r3, r7, #24
 800f204:	4619      	mov	r1, r3
 800f206:	4620      	mov	r0, r4
 800f208:	f7fe f926 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800f20c:	f107 0318 	add.w	r3, r7, #24
 800f210:	4618      	mov	r0, r3
 800f212:	f7fe f8a4 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	4618      	mov	r0, r3
 800f21a:	3720      	adds	r7, #32
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bdb0      	pop	{r4, r5, r7, pc}
 800f220:	080285b0 	.word	0x080285b0
 800f224:	0802482c 	.word	0x0802482c

0800f228 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800f228:	b590      	push	{r4, r7, lr}
 800f22a:	b087      	sub	sp, #28
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	607a      	str	r2, [r7, #4]
 800f234:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	68b9      	ldr	r1, [r7, #8]
 800f23e:	f7ff fb73 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f242:	4a1a      	ldr	r2, [pc, #104]	; (800f2ac <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f24e:	68f9      	ldr	r1, [r7, #12]
 800f250:	f107 0310 	add.w	r3, r7, #16
 800f254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f256:	4618      	mov	r0, r3
 800f258:	f7ff fd6e 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f25c:	f107 0310 	add.w	r3, r7, #16
 800f260:	4619      	mov	r1, r3
 800f262:	4620      	mov	r0, r4
 800f264:	f7fd fd2f 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800f268:	f107 0310 	add.w	r3, r7, #16
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fe f876 	bl	800d35e <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	332c      	adds	r3, #44	; 0x2c
 800f276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f278:	4618      	mov	r0, r3
 800f27a:	f7fe f8ed 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	332c      	adds	r3, #44	; 0x2c
 800f282:	490b      	ldr	r1, [pc, #44]	; (800f2b0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800f284:	4618      	mov	r0, r3
 800f286:	f7fe f8f9 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	332c      	adds	r3, #44	; 0x2c
 800f28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f290:	4618      	mov	r0, r3
 800f292:	f7fe f8e1 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	332c      	adds	r3, #44	; 0x2c
 800f29a:	4906      	ldr	r1, [pc, #24]	; (800f2b4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fe f8ed 	bl	800d47c <_ZN12SimpleStringpLEPKc>
}
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	371c      	adds	r7, #28
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd90      	pop	{r4, r7, pc}
 800f2ac:	08028584 	.word	0x08028584
 800f2b0:	0802481c 	.word	0x0802481c
 800f2b4:	08024820 	.word	0x08024820

0800f2b8 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	607a      	str	r2, [r7, #4]
 800f2c4:	603b      	str	r3, [r7, #0]
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	68b9      	ldr	r1, [r7, #8]
 800f2ce:	f7ff fb2b 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f2d2:	4a07      	ldr	r2, [pc, #28]	; (800f2f0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	332c      	adds	r3, #44	; 0x2c
 800f2dc:	69b9      	ldr	r1, [r7, #24]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7fd fcf1 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
}
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	08028240 	.word	0x08028240

0800f2f4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800f2f4:	b590      	push	{r4, r7, lr}
 800f2f6:	b09d      	sub	sp, #116	; 0x74
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	607a      	str	r2, [r7, #4]
 800f300:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f302:	68f8      	ldr	r0, [r7, #12]
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	68b9      	ldr	r1, [r7, #8]
 800f30a:	f7ff fb0d 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f30e:	4a5d      	ldr	r2, [pc, #372]	; (800f484 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f31a:	68f9      	ldr	r1, [r7, #12]
 800f31c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f320:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f324:	4618      	mov	r0, r3
 800f326:	f7ff fd07 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f32a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f32e:	4619      	mov	r1, r3
 800f330:	4620      	mov	r0, r4
 800f332:	f7fd fcc8 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800f336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fe f80f 	bl	800d35e <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800f340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f344:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f348:	4618      	mov	r0, r3
 800f34a:	f7fe fae1 	bl	800d910 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800f34e:	f107 0320 	add.w	r3, r7, #32
 800f352:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f356:	4618      	mov	r0, r3
 800f358:	f7fe fada 	bl	800d910 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f35c:	f107 0120 	add.w	r1, r7, #32
 800f360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f364:	2220      	movs	r2, #32
 800f366:	4618      	mov	r0, r3
 800f368:	f7fe f8b6 	bl	800d4d8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f36c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f370:	4945      	ldr	r1, [pc, #276]	; (800f488 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800f372:	4618      	mov	r0, r3
 800f374:	f7fd fc3b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800f378:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f37c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f380:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f384:	4618      	mov	r0, r3
 800f386:	f7fe f84c 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f38a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f38e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f392:	4618      	mov	r0, r3
 800f394:	f7fe fbd2 	bl	800db3c <_Z30BracketsFormattedHexStringFroml>
 800f398:	f107 0318 	add.w	r3, r7, #24
 800f39c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f3a0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fe f83c 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f3aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fd ffd5 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f3b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7fd ffd0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f3be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fd ffcb 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f3c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f3cc:	492e      	ldr	r1, [pc, #184]	; (800f488 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7fd fc0d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800f3d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f3d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f3dc:	f107 0120 	add.w	r1, r7, #32
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fe f81e 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f3e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f3ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fe fba4 	bl	800db3c <_Z30BracketsFormattedHexStringFroml>
 800f3f4:	f107 0310 	add.w	r3, r7, #16
 800f3f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f3fc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f400:	4618      	mov	r0, r3
 800f402:	f7fe f80e 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f406:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fd ffa7 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f410:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f414:	4618      	mov	r0, r3
 800f416:	f7fd ffa2 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f41a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fd ff9d 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f42a:	68f9      	ldr	r1, [r7, #12]
 800f42c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f430:	f107 0318 	add.w	r3, r7, #24
 800f434:	f107 0210 	add.w	r2, r7, #16
 800f438:	f7ff fbb8 	bl	800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f43c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f440:	4619      	mov	r1, r3
 800f442:	4620      	mov	r0, r4
 800f444:	f7fe f808 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800f448:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fd ff86 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f452:	f107 0310 	add.w	r3, r7, #16
 800f456:	4618      	mov	r0, r3
 800f458:	f7fd ff81 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f45c:	f107 0318 	add.w	r3, r7, #24
 800f460:	4618      	mov	r0, r3
 800f462:	f7fd ff7c 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800f466:	f107 0320 	add.w	r3, r7, #32
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fd ff77 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800f470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f474:	4618      	mov	r0, r3
 800f476:	f7fd ff72 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	4618      	mov	r0, r3
 800f47e:	3774      	adds	r7, #116	; 0x74
 800f480:	46bd      	mov	sp, r7
 800f482:	bd90      	pop	{r4, r7, pc}
 800f484:	08028558 	.word	0x08028558
 800f488:	08024780 	.word	0x08024780

0800f48c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800f48c:	b590      	push	{r4, r7, lr}
 800f48e:	b09d      	sub	sp, #116	; 0x74
 800f490:	af00      	add	r7, sp, #0
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	607a      	str	r2, [r7, #4]
 800f498:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	68b9      	ldr	r1, [r7, #8]
 800f4a2:	f7ff fa41 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f4a6:	4a5d      	ldr	r2, [pc, #372]	; (800f61c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f4b2:	68f9      	ldr	r1, [r7, #12]
 800f4b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f4b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7ff fc3b 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f4c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f7fd fbfc 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800f4ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fd ff43 	bl	800d35e <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800f4d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4dc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fe fc7d 	bl	800dde0 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800f4e6:	f107 0320 	add.w	r3, r7, #32
 800f4ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fe fc76 	bl	800dde0 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f4f4:	f107 0120 	add.w	r1, r7, #32
 800f4f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4fc:	2220      	movs	r2, #32
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7fd ffea 	bl	800d4d8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f508:	4945      	ldr	r1, [pc, #276]	; (800f620 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7fd fb6f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800f510:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f514:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f518:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fd ff80 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f526:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fe fb22 	bl	800db74 <_Z30BracketsFormattedHexStringFromm>
 800f530:	f107 0318 	add.w	r3, r7, #24
 800f534:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f538:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fd ff70 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f542:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f546:	4618      	mov	r0, r3
 800f548:	f7fd ff09 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f54c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f550:	4618      	mov	r0, r3
 800f552:	f7fd ff04 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f556:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fd feff 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f560:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f564:	492e      	ldr	r1, [pc, #184]	; (800f620 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800f566:	4618      	mov	r0, r3
 800f568:	f7fd fb41 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800f56c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f570:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f574:	f107 0120 	add.w	r1, r7, #32
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fd ff52 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f57e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f582:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f586:	4618      	mov	r0, r3
 800f588:	f7fe faf4 	bl	800db74 <_Z30BracketsFormattedHexStringFromm>
 800f58c:	f107 0310 	add.w	r3, r7, #16
 800f590:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f594:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fd ff42 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f59e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fd fedb 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f5a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7fd fed6 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f5b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fd fed1 	bl	800d35e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f5c2:	68f9      	ldr	r1, [r7, #12]
 800f5c4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f5c8:	f107 0318 	add.w	r3, r7, #24
 800f5cc:	f107 0210 	add.w	r2, r7, #16
 800f5d0:	f7ff faec 	bl	800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f5d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5d8:	4619      	mov	r1, r3
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f7fd ff3c 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800f5e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fd feba 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f5ea:	f107 0310 	add.w	r3, r7, #16
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fd feb5 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f5f4:	f107 0318 	add.w	r3, r7, #24
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7fd feb0 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800f5fe:	f107 0320 	add.w	r3, r7, #32
 800f602:	4618      	mov	r0, r3
 800f604:	f7fd feab 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800f608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7fd fea6 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	4618      	mov	r0, r3
 800f616:	3774      	adds	r7, #116	; 0x74
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd90      	pop	{r4, r7, pc}
 800f61c:	0802852c 	.word	0x0802852c
 800f620:	08024780 	.word	0x08024780

0800f624 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800f624:	b590      	push	{r4, r7, lr}
 800f626:	b09d      	sub	sp, #116	; 0x74
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
 800f630:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f632:	68f8      	ldr	r0, [r7, #12]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	68b9      	ldr	r1, [r7, #8]
 800f63a:	f7ff f975 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f63e:	4a5f      	ldr	r2, [pc, #380]	; (800f7bc <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f64a:	68f9      	ldr	r1, [r7, #12]
 800f64c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f650:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f654:	4618      	mov	r0, r3
 800f656:	f7ff fb6f 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f65a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f65e:	4619      	mov	r1, r3
 800f660:	4620      	mov	r0, r4
 800f662:	f7fd fb30 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800f666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fd fe77 	bl	800d35e <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800f670:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800f674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f678:	4611      	mov	r1, r2
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fe f936 	bl	800d8ec <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800f680:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800f684:	f107 0320 	add.w	r3, r7, #32
 800f688:	4611      	mov	r1, r2
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fe f92e 	bl	800d8ec <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f690:	f107 0120 	add.w	r1, r7, #32
 800f694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f698:	2220      	movs	r2, #32
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fd ff1c 	bl	800d4d8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f6a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f6a4:	4946      	ldr	r1, [pc, #280]	; (800f7c0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fd faa1 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800f6ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f6b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f6b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7fd feb2 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f6be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f6c2:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800f6c6:	4611      	mov	r1, r2
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fe fa6f 	bl	800dbac <_Z30BracketsFormattedHexStringFroma>
 800f6ce:	f107 0318 	add.w	r3, r7, #24
 800f6d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f6d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fd fea1 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f6e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fd fe3a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f6ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fd fe35 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f6f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fd fe30 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f6fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f702:	492f      	ldr	r1, [pc, #188]	; (800f7c0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800f704:	4618      	mov	r0, r3
 800f706:	f7fd fa72 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 800f70a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f70e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f712:	f107 0120 	add.w	r1, r7, #32
 800f716:	4618      	mov	r0, r3
 800f718:	f7fd fe83 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f71c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f720:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800f724:	4611      	mov	r1, r2
 800f726:	4618      	mov	r0, r3
 800f728:	f7fe fa40 	bl	800dbac <_Z30BracketsFormattedHexStringFroma>
 800f72c:	f107 0310 	add.w	r3, r7, #16
 800f730:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f734:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f738:	4618      	mov	r0, r3
 800f73a:	f7fd fe72 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 800f73e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f742:	4618      	mov	r0, r3
 800f744:	f7fd fe0b 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f748:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7fd fe06 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800f752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f756:	4618      	mov	r0, r3
 800f758:	f7fd fe01 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f762:	68f9      	ldr	r1, [r7, #12]
 800f764:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f768:	f107 0318 	add.w	r3, r7, #24
 800f76c:	f107 0210 	add.w	r2, r7, #16
 800f770:	f7ff fa1c 	bl	800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f774:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f778:	4619      	mov	r1, r3
 800f77a:	4620      	mov	r0, r4
 800f77c:	f7fd fe6c 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800f780:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f784:	4618      	mov	r0, r3
 800f786:	f7fd fdea 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f78a:	f107 0310 	add.w	r3, r7, #16
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fd fde5 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f794:	f107 0318 	add.w	r3, r7, #24
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fd fde0 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800f79e:	f107 0320 	add.w	r3, r7, #32
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fd fddb 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800f7a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7fd fdd6 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3774      	adds	r7, #116	; 0x74
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd90      	pop	{r4, r7, pc}
 800f7bc:	08028500 	.word	0x08028500
 800f7c0:	08024780 	.word	0x08024780

0800f7c4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f7c4:	b590      	push	{r4, r7, lr}
 800f7c6:	b093      	sub	sp, #76	; 0x4c
 800f7c8:	af02      	add	r7, sp, #8
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
 800f7d0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	68b9      	ldr	r1, [r7, #8]
 800f7da:	f7ff f8a5 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f7de:	4a4a      	ldr	r2, [pc, #296]	; (800f908 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f7ea:	68f9      	ldr	r1, [r7, #12]
 800f7ec:	f107 0320 	add.w	r3, r7, #32
 800f7f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7ff faa0 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f7f8:	f107 0320 	add.w	r3, r7, #32
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	4620      	mov	r0, r4
 800f800:	f7fd fa61 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800f804:	f107 0320 	add.w	r3, r7, #32
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fd fda8 	bl	800d35e <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f80e:	f107 0318 	add.w	r3, r7, #24
 800f812:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f814:	4618      	mov	r0, r3
 800f816:	f7fe f83d 	bl	800d894 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f81a:	f107 0310 	add.w	r3, r7, #16
 800f81e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f820:	4618      	mov	r0, r3
 800f822:	f7fe f837 	bl	800d894 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f82c:	68f9      	ldr	r1, [r7, #12]
 800f82e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f832:	f107 0310 	add.w	r3, r7, #16
 800f836:	f107 0218 	add.w	r2, r7, #24
 800f83a:	f7ff f9b7 	bl	800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f83e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f842:	4619      	mov	r1, r3
 800f844:	4620      	mov	r0, r4
 800f846:	f7fd fe07 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800f84a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fd fd85 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f856:	2b00      	cmp	r3, #0
 800f858:	d046      	beq.n	800f8e8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800f85a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d043      	beq.n	800f8e8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f860:	2300      	movs	r3, #0
 800f862:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f864:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f868:	4413      	add	r3, r2
 800f86a:	781a      	ldrb	r2, [r3, #0]
 800f86c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f870:	440b      	add	r3, r1
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	429a      	cmp	r2, r3
 800f876:	d103      	bne.n	800f880 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800f878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f87a:	3301      	adds	r3, #1
 800f87c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f87e:	e7f1      	b.n	800f864 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f880:	2300      	movs	r3, #0
 800f882:	63bb      	str	r3, [r7, #56]	; 0x38
 800f884:	f107 0310 	add.w	r3, r7, #16
 800f888:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fd fecb 	bl	800d626 <_ZNK12SimpleString2atEj>
 800f890:	4603      	mov	r3, r0
 800f892:	461c      	mov	r4, r3
 800f894:	f107 0318 	add.w	r3, r7, #24
 800f898:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fd fec3 	bl	800d626 <_ZNK12SimpleString2atEj>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	429c      	cmp	r4, r3
 800f8a4:	bf0c      	ite	eq
 800f8a6:	2301      	moveq	r3, #1
 800f8a8:	2300      	movne	r3, #0
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d003      	beq.n	800f8b8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8b6:	e7e5      	b.n	800f884 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f8be:	68f9      	ldr	r1, [r7, #12]
 800f8c0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f8c4:	f107 0210 	add.w	r2, r7, #16
 800f8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ca:	9300      	str	r3, [sp, #0]
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	f7ff f987 	bl	800ebe0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f8d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f7fd fdbd 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800f8de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fd fd3b 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f8e8:	f107 0310 	add.w	r3, r7, #16
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fd fd36 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f8f2:	f107 0318 	add.w	r3, r7, #24
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fd fd31 	bl	800d35e <_ZN12SimpleStringD1Ev>
    }
}
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	4618      	mov	r0, r3
 800f900:	3744      	adds	r7, #68	; 0x44
 800f902:	46bd      	mov	sp, r7
 800f904:	bd90      	pop	{r4, r7, pc}
 800f906:	bf00      	nop
 800f908:	080284d4 	.word	0x080284d4

0800f90c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f90c:	b590      	push	{r4, r7, lr}
 800f90e:	b093      	sub	sp, #76	; 0x4c
 800f910:	af02      	add	r7, sp, #8
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
 800f918:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f91a:	68f8      	ldr	r0, [r7, #12]
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	68b9      	ldr	r1, [r7, #8]
 800f922:	f7ff f801 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f926:	4a55      	ldr	r2, [pc, #340]	; (800fa7c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f932:	68f9      	ldr	r1, [r7, #12]
 800f934:	f107 0320 	add.w	r3, r7, #32
 800f938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7ff f9fc 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f940:	f107 0320 	add.w	r3, r7, #32
 800f944:	4619      	mov	r1, r3
 800f946:	4620      	mov	r0, r4
 800f948:	f7fd f9bd 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800f94c:	f107 0320 	add.w	r3, r7, #32
 800f950:	4618      	mov	r0, r3
 800f952:	f7fd fd04 	bl	800d35e <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f956:	f107 0318 	add.w	r3, r7, #24
 800f95a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fd ff99 	bl	800d894 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f962:	f107 0310 	add.w	r3, r7, #16
 800f966:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fd ff93 	bl	800d894 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f974:	68f9      	ldr	r1, [r7, #12]
 800f976:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f97a:	f107 0310 	add.w	r3, r7, #16
 800f97e:	f107 0218 	add.w	r2, r7, #24
 800f982:	f7ff f913 	bl	800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f98a:	4619      	mov	r1, r3
 800f98c:	4620      	mov	r0, r4
 800f98e:	f7fd fd63 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800f992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f996:	4618      	mov	r0, r3
 800f998:	f7fd fce1 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f99c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d05c      	beq.n	800fa5c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800f9a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d059      	beq.n	800fa5c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9b0:	4413      	add	r3, r2
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fd f824 	bl	800ca02 <_ZN12SimpleString7ToLowerEc>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	461c      	mov	r4, r3
 800f9be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9c2:	4413      	add	r3, r2
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fd f81b 	bl	800ca02 <_ZN12SimpleString7ToLowerEc>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	429c      	cmp	r4, r3
 800f9d0:	bf0c      	ite	eq
 800f9d2:	2301      	moveq	r3, #1
 800f9d4:	2300      	movne	r3, #0
 800f9d6:	b2db      	uxtb	r3, r3
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d003      	beq.n	800f9e4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800f9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9de:	3301      	adds	r3, #1
 800f9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9e2:	e7e3      	b.n	800f9ac <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800f9e8:	f107 0310 	add.w	r3, r7, #16
 800f9ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fd fe19 	bl	800d626 <_ZNK12SimpleString2atEj>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fd f803 	bl	800ca02 <_ZN12SimpleString7ToLowerEc>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	461c      	mov	r4, r3
 800fa00:	f107 0318 	add.w	r3, r7, #24
 800fa04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fd fe0d 	bl	800d626 <_ZNK12SimpleString2atEj>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fc fff7 	bl	800ca02 <_ZN12SimpleString7ToLowerEc>
 800fa14:	4603      	mov	r3, r0
 800fa16:	429c      	cmp	r4, r3
 800fa18:	bf0c      	ite	eq
 800fa1a:	2301      	moveq	r3, #1
 800fa1c:	2300      	movne	r3, #0
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d003      	beq.n	800fa2c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800fa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa26:	3301      	adds	r3, #1
 800fa28:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa2a:	e7dd      	b.n	800f9e8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fa32:	68f9      	ldr	r1, [r7, #12]
 800fa34:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800fa38:	f107 0210 	add.w	r2, r7, #16
 800fa3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa42:	f7ff f8cd 	bl	800ebe0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800fa46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f7fd fd03 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800fa52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fd fc81 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800fa5c:	f107 0310 	add.w	r3, r7, #16
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fd fc7c 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fa66:	f107 0318 	add.w	r3, r7, #24
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fd fc77 	bl	800d35e <_ZN12SimpleStringD1Ev>
    }
}
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	4618      	mov	r0, r3
 800fa74:	3744      	adds	r7, #68	; 0x44
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd90      	pop	{r4, r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	080284a8 	.word	0x080284a8

0800fa80 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800fa80:	b5b0      	push	{r4, r5, r7, lr}
 800fa82:	b092      	sub	sp, #72	; 0x48
 800fa84:	af02      	add	r7, sp, #8
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	607a      	str	r2, [r7, #4]
 800fa8c:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fa8e:	68f8      	ldr	r0, [r7, #12]
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	68b9      	ldr	r1, [r7, #8]
 800fa96:	f7fe ff47 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fa9a:	4a40      	ldr	r2, [pc, #256]	; (800fb9c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800faa6:	68f9      	ldr	r1, [r7, #12]
 800faa8:	f107 031c 	add.w	r3, r7, #28
 800faac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800faae:	4618      	mov	r0, r3
 800fab0:	f7ff f942 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fab4:	f107 031c 	add.w	r3, r7, #28
 800fab8:	4619      	mov	r1, r3
 800faba:	4620      	mov	r0, r4
 800fabc:	f7fd f903 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800fac0:	f107 031c 	add.w	r3, r7, #28
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7fd fc4a 	bl	800d35e <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800faca:	f107 0314 	add.w	r3, r7, #20
 800face:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe fa4c 	bl	800df70 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fade:	68fd      	ldr	r5, [r7, #12]
 800fae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fae6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fae8:	4618      	mov	r0, r3
 800faea:	f7fe fa41 	bl	800df70 <_Z22StringFromBinaryOrNullPKhj>
 800faee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800faf2:	f107 0314 	add.w	r3, r7, #20
 800faf6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fafa:	4629      	mov	r1, r5
 800fafc:	f7ff f856 	bl	800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fb00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb04:	4619      	mov	r1, r3
 800fb06:	4620      	mov	r0, r4
 800fb08:	f7fd fca6 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800fb0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7fd fc24 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800fb16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fd fc1f 	bl	800d35e <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800fb20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d02f      	beq.n	800fb86 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800fb26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d02c      	beq.n	800fb86 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb34:	4413      	add	r3, r2
 800fb36:	781a      	ldrb	r2, [r3, #0]
 800fb38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb3c:	440b      	add	r3, r1
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d103      	bne.n	800fb4c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800fb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb46:	3301      	adds	r3, #1
 800fb48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb4a:	e7f1      	b.n	800fb30 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fb52:	68f9      	ldr	r1, [r7, #12]
 800fb54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb56:	4613      	mov	r3, r2
 800fb58:	005b      	lsls	r3, r3, #1
 800fb5a:	4413      	add	r3, r2
 800fb5c:	1c5d      	adds	r5, r3, #1
 800fb5e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800fb62:	f107 0214 	add.w	r2, r7, #20
 800fb66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb68:	9300      	str	r3, [sp, #0]
 800fb6a:	462b      	mov	r3, r5
 800fb6c:	f7ff f838 	bl	800ebe0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800fb70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fb74:	4619      	mov	r1, r3
 800fb76:	4620      	mov	r0, r4
 800fb78:	f7fd fc6e 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800fb7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fd fbec 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800fb86:	f107 0314 	add.w	r3, r7, #20
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fd fbe7 	bl	800d35e <_ZN12SimpleStringD1Ev>
	}
}
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	4618      	mov	r0, r3
 800fb94:	3740      	adds	r7, #64	; 0x40
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bdb0      	pop	{r4, r5, r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	0802847c 	.word	0x0802847c

0800fba0 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800fba0:	b5b0      	push	{r4, r5, r7, lr}
 800fba2:	b08c      	sub	sp, #48	; 0x30
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	607a      	str	r2, [r7, #4]
 800fbac:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fbae:	68f8      	ldr	r0, [r7, #12]
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	687a      	ldr	r2, [r7, #4]
 800fbb4:	68b9      	ldr	r1, [r7, #8]
 800fbb6:	f7fe feb7 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fbba:	4a26      	ldr	r2, [pc, #152]	; (800fc54 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fbc6:	68f9      	ldr	r1, [r7, #12]
 800fbc8:	f107 0310 	add.w	r3, r7, #16
 800fbcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7ff f8b2 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fbd4:	f107 0310 	add.w	r3, r7, #16
 800fbd8:	4619      	mov	r1, r3
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f7fd f873 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800fbe0:	f107 0310 	add.w	r3, r7, #16
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7fd fbba 	bl	800d35e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fbf0:	68fd      	ldr	r5, [r7, #12]
 800fbf2:	f107 0020 	add.w	r0, r7, #32
 800fbf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fbfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fbfc:	f7fe fa24 	bl	800e048 <_Z20StringFromMaskedBitsmmj>
 800fc00:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fc04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc0a:	f7fe fa1d 	bl	800e048 <_Z20StringFromMaskedBitsmmj>
 800fc0e:	f107 0018 	add.w	r0, r7, #24
 800fc12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc16:	f107 0220 	add.w	r2, r7, #32
 800fc1a:	4629      	mov	r1, r5
 800fc1c:	f7fe ffc6 	bl	800ebac <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fc20:	f107 0318 	add.w	r3, r7, #24
 800fc24:	4619      	mov	r1, r3
 800fc26:	4620      	mov	r0, r4
 800fc28:	f7fd fc16 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800fc2c:	f107 0318 	add.w	r3, r7, #24
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7fd fb94 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800fc36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fd fb8f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 800fc40:	f107 0320 	add.w	r3, r7, #32
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fd fb8a 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3730      	adds	r7, #48	; 0x30
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bdb0      	pop	{r4, r5, r7, pc}
 800fc54:	08028450 	.word	0x08028450

0800fc58 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800fc58:	b590      	push	{r4, r7, lr}
 800fc5a:	b089      	sub	sp, #36	; 0x24
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]
 800fc64:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fc66:	68f8      	ldr	r0, [r7, #12]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	68b9      	ldr	r1, [r7, #8]
 800fc6e:	f7fe fe5b 	bl	800e928 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fc72:	4a1a      	ldr	r2, [pc, #104]	; (800fcdc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fc7e:	68f9      	ldr	r1, [r7, #12]
 800fc80:	f107 0310 	add.w	r3, r7, #16
 800fc84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7ff f856 	bl	800ed38 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fc8c:	f107 0310 	add.w	r3, r7, #16
 800fc90:	4619      	mov	r1, r3
 800fc92:	4620      	mov	r0, r4
 800fc94:	f7fd f817 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 800fc98:	f107 0310 	add.w	r3, r7, #16
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fd fb5e 	bl	800d35e <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcaa:	f7fd fb2b 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	f107 0318 	add.w	r3, r7, #24
 800fcb4:	490a      	ldr	r1, [pc, #40]	; (800fce0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fe f858 	bl	800dd6c <_Z16StringFromFormatPKcz>
 800fcbc:	f107 0318 	add.w	r3, r7, #24
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	f7fd fbc8 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 800fcc8:	f107 0318 	add.w	r3, r7, #24
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fd fb46 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3724      	adds	r7, #36	; 0x24
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd90      	pop	{r4, r7, pc}
 800fcdc:	08028424 	.word	0x08028424
 800fce0:	08024850 	.word	0x08024850

0800fce4 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	4a05      	ldr	r2, [pc, #20]	; (800fd04 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	601a      	str	r2, [r3, #0]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f7fe fe99 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3708      	adds	r7, #8
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	08028424 	.word	0x08028424

0800fd08 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f7ff ffe7 	bl	800fce4 <_ZN25FeatureUnsupportedFailureD1Ev>
 800fd16:	2134      	movs	r1, #52	; 0x34
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7fa fbb9 	bl	800a490 <_ZdlPvj>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	4618      	mov	r0, r3
 800fd22:	3708      	adds	r7, #8
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	4a05      	ldr	r2, [pc, #20]	; (800fd48 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	601a      	str	r2, [r3, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fe fe77 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4618      	mov	r0, r3
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	08028450 	.word	0x08028450

0800fd4c <_ZN16BitsEqualFailureD0Ev>:
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7ff ffe7 	bl	800fd28 <_ZN16BitsEqualFailureD1Ev>
 800fd5a:	2134      	movs	r1, #52	; 0x34
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f7fa fb97 	bl	800a490 <_ZdlPvj>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4618      	mov	r0, r3
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	4a05      	ldr	r2, [pc, #20]	; (800fd8c <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	601a      	str	r2, [r3, #0]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fe fe55 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4618      	mov	r0, r3
 800fd86:	3708      	adds	r7, #8
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	0802847c 	.word	0x0802847c

0800fd90 <_ZN18BinaryEqualFailureD0Ev>:
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b082      	sub	sp, #8
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f7ff ffe7 	bl	800fd6c <_ZN18BinaryEqualFailureD1Ev>
 800fd9e:	2134      	movs	r1, #52	; 0x34
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f7fa fb75 	bl	800a490 <_ZdlPvj>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3708      	adds	r7, #8
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	4a05      	ldr	r2, [pc, #20]	; (800fdd0 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	601a      	str	r2, [r3, #0]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7fe fe33 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	080284a8 	.word	0x080284a8

0800fdd4 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7ff ffe7 	bl	800fdb0 <_ZN24StringEqualNoCaseFailureD1Ev>
 800fde2:	2134      	movs	r1, #52	; 0x34
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f7fa fb53 	bl	800a490 <_ZdlPvj>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	4a05      	ldr	r2, [pc, #20]	; (800fe14 <_ZN18StringEqualFailureD1Ev+0x20>)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	601a      	str	r2, [r3, #0]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7fe fe11 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3708      	adds	r7, #8
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	080284d4 	.word	0x080284d4

0800fe18 <_ZN18StringEqualFailureD0Ev>:
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7ff ffe7 	bl	800fdf4 <_ZN18StringEqualFailureD1Ev>
 800fe26:	2134      	movs	r1, #52	; 0x34
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7fa fb31 	bl	800a490 <_ZdlPvj>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4618      	mov	r0, r3
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	4a05      	ldr	r2, [pc, #20]	; (800fe58 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	601a      	str	r2, [r3, #0]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fe fdef 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4618      	mov	r0, r3
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	08028500 	.word	0x08028500

0800fe5c <_ZN23SignedBytesEqualFailureD0Ev>:
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7ff ffe7 	bl	800fe38 <_ZN23SignedBytesEqualFailureD1Ev>
 800fe6a:	2134      	movs	r1, #52	; 0x34
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7fa fb0f 	bl	800a490 <_ZdlPvj>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4618      	mov	r0, r3
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	4a05      	ldr	r2, [pc, #20]	; (800fe9c <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	601a      	str	r2, [r3, #0]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7fe fdcd 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	0802852c 	.word	0x0802852c

0800fea0 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff ffe7 	bl	800fe7c <_ZN25UnsignedLongsEqualFailureD1Ev>
 800feae:	2134      	movs	r1, #52	; 0x34
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f7fa faed 	bl	800a490 <_ZdlPvj>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	4a05      	ldr	r2, [pc, #20]	; (800fee0 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	601a      	str	r2, [r3, #0]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fe fdab 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	4618      	mov	r0, r3
 800feda:	3708      	adds	r7, #8
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	08028558 	.word	0x08028558

0800fee4 <_ZN17LongsEqualFailureD0Ev>:
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f7ff ffe7 	bl	800fec0 <_ZN17LongsEqualFailureD1Ev>
 800fef2:	2134      	movs	r1, #52	; 0x34
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7fa facb 	bl	800a490 <_ZdlPvj>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	4618      	mov	r0, r3
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	4a05      	ldr	r2, [pc, #20]	; (800ff24 <_ZN12CheckFailureD1Ev+0x20>)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	601a      	str	r2, [r3, #0]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7fe fd89 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	08028584 	.word	0x08028584

0800ff28 <_ZN12CheckFailureD0Ev>:
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7ff ffe7 	bl	800ff04 <_ZN12CheckFailureD1Ev>
 800ff36:	2134      	movs	r1, #52	; 0x34
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7fa faa9 	bl	800a490 <_ZdlPvj>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	4618      	mov	r0, r3
 800ff42:	3708      	adds	r7, #8
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	4a05      	ldr	r2, [pc, #20]	; (800ff68 <_ZN15ContainsFailureD1Ev+0x20>)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	601a      	str	r2, [r3, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7fe fd67 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	4618      	mov	r0, r3
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	080285b0 	.word	0x080285b0

0800ff6c <_ZN15ContainsFailureD0Ev>:
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f7ff ffe7 	bl	800ff48 <_ZN15ContainsFailureD1Ev>
 800ff7a:	2134      	movs	r1, #52	; 0x34
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7fa fa87 	bl	800a490 <_ZdlPvj>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4618      	mov	r0, r3
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	4a05      	ldr	r2, [pc, #20]	; (800ffac <_ZN17ComparisonFailureD1Ev+0x20>)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	601a      	str	r2, [r3, #0]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fe fd45 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	080285dc 	.word	0x080285dc

0800ffb0 <_ZN17ComparisonFailureD0Ev>:
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7ff ffe7 	bl	800ff8c <_ZN17ComparisonFailureD1Ev>
 800ffbe:	2134      	movs	r1, #52	; 0x34
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7fa fa65 	bl	800a490 <_ZdlPvj>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	4a05      	ldr	r2, [pc, #20]	; (800fff0 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	601a      	str	r2, [r3, #0]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fe fd23 	bl	800ea2c <_ZN11TestFailureD1Ev>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	08028608 	.word	0x08028608

0800fff4 <_ZN17CheckEqualFailureD0Ev>:
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f7ff ffe7 	bl	800ffd0 <_ZN17CheckEqualFailureD1Ev>
 8010002:	2134      	movs	r1, #52	; 0x34
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7fa fa43 	bl	800a490 <_ZdlPvj>
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	4618      	mov	r0, r3
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	4a05      	ldr	r2, [pc, #20]	; (8010034 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4618      	mov	r0, r3
 8010026:	f7fe fd01 	bl	800ea2c <_ZN11TestFailureD1Ev>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4618      	mov	r0, r3
 801002e:	3708      	adds	r7, #8
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	08028634 	.word	0x08028634

08010038 <_ZN19DoublesEqualFailureD0Ev>:
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7ff ffe7 	bl	8010014 <_ZN19DoublesEqualFailureD1Ev>
 8010046:	2134      	movs	r1, #52	; 0x34
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7fa fa21 	bl	800a490 <_ZdlPvj>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4618      	mov	r0, r3
 8010052:	3708      	adds	r7, #8
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	4a05      	ldr	r2, [pc, #20]	; (8010078 <_ZN13EqualsFailureD1Ev+0x20>)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	601a      	str	r2, [r3, #0]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4618      	mov	r0, r3
 801006a:	f7fe fcdf 	bl	800ea2c <_ZN11TestFailureD1Ev>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4618      	mov	r0, r3
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	08028660 	.word	0x08028660

0801007c <_ZN13EqualsFailureD0Ev>:
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7ff ffe7 	bl	8010058 <_ZN13EqualsFailureD1Ev>
 801008a:	2134      	movs	r1, #52	; 0x34
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f7fa f9ff 	bl	800a490 <_ZdlPvj>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4618      	mov	r0, r3
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 801009c:	b5b0      	push	{r4, r5, r7, lr}
 801009e:	b086      	sub	sp, #24
 80100a0:	af02      	add	r7, sp, #8
 80100a2:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 80100a4:	4b0d      	ldr	r3, [pc, #52]	; (80100dc <_ZL13checkedMallocj+0x40>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	4798      	blx	r3
 80100ac:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d10e      	bne.n	80100d2 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 80100b4:	f004 f97e 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80100b8:	4604      	mov	r4, r0
 80100ba:	6823      	ldr	r3, [r4, #0]
 80100bc:	3368      	adds	r3, #104	; 0x68
 80100be:	681d      	ldr	r5, [r3, #0]
 80100c0:	f004 f988 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80100c4:	4603      	mov	r3, r0
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	2325      	movs	r3, #37	; 0x25
 80100ca:	4a05      	ldr	r2, [pc, #20]	; (80100e0 <_ZL13checkedMallocj+0x44>)
 80100cc:	4905      	ldr	r1, [pc, #20]	; (80100e4 <_ZL13checkedMallocj+0x48>)
 80100ce:	4620      	mov	r0, r4
 80100d0:	47a8      	blx	r5
    return mem;
 80100d2:	68fb      	ldr	r3, [r7, #12]
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bdb0      	pop	{r4, r5, r7, pc}
 80100dc:	200000c8 	.word	0x200000c8
 80100e0:	080248c4 	.word	0x080248c4
 80100e4:	080248e4 	.word	0x080248e4

080100e8 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 80100ec:	4b04      	ldr	r3, [pc, #16]	; (8010100 <_Z22getCurrentNewAllocatorv+0x18>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d101      	bne.n	80100f8 <_Z22getCurrentNewAllocatorv+0x10>
 80100f4:	f000 f806 	bl	8010104 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 80100f8:	4b01      	ldr	r3, [pc, #4]	; (8010100 <_Z22getCurrentNewAllocatorv+0x18>)
 80100fa:	681b      	ldr	r3, [r3, #0]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	200008a4 	.word	0x200008a4

08010104 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 8010104:	b580      	push	{r7, lr}
 8010106:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 8010108:	f000 f810 	bl	801012c <_Z19defaultNewAllocatorv>
 801010c:	4603      	mov	r3, r0
 801010e:	4a02      	ldr	r2, [pc, #8]	; (8010118 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 8010110:	6013      	str	r3, [r2, #0]
}
 8010112:	bf00      	nop
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	200008a4 	.word	0x200008a4

0801011c <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 801011c:	b580      	push	{r7, lr}
 801011e:	af00      	add	r7, sp, #0
 8010120:	4801      	ldr	r0, [pc, #4]	; (8010128 <__tcf_0+0xc>)
 8010122:	f000 f909 	bl	8010338 <_ZN19TestMemoryAllocatorD1Ev>
 8010126:	bd80      	pop	{r7, pc}
 8010128:	200008b0 	.word	0x200008b0

0801012c <_Z19defaultNewAllocatorv>:
{
 801012c:	b580      	push	{r7, lr}
 801012e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8010130:	4b13      	ldr	r3, [pc, #76]	; (8010180 <_Z19defaultNewAllocatorv+0x54>)
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	f3bf 8f5b 	dmb	ish
 8010138:	b2db      	uxtb	r3, r3
 801013a:	f003 0301 	and.w	r3, r3, #1
 801013e:	2b00      	cmp	r3, #0
 8010140:	bf0c      	ite	eq
 8010142:	2301      	moveq	r3, #1
 8010144:	2300      	movne	r3, #0
 8010146:	b2db      	uxtb	r3, r3
 8010148:	2b00      	cmp	r3, #0
 801014a:	d016      	beq.n	801017a <_Z19defaultNewAllocatorv+0x4e>
 801014c:	480c      	ldr	r0, [pc, #48]	; (8010180 <_Z19defaultNewAllocatorv+0x54>)
 801014e:	f00f fc0f 	bl	801f970 <__cxa_guard_acquire>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	bf14      	ite	ne
 8010158:	2301      	movne	r3, #1
 801015a:	2300      	moveq	r3, #0
 801015c:	b2db      	uxtb	r3, r3
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00b      	beq.n	801017a <_Z19defaultNewAllocatorv+0x4e>
 8010162:	4b08      	ldr	r3, [pc, #32]	; (8010184 <_Z19defaultNewAllocatorv+0x58>)
 8010164:	4a08      	ldr	r2, [pc, #32]	; (8010188 <_Z19defaultNewAllocatorv+0x5c>)
 8010166:	4909      	ldr	r1, [pc, #36]	; (801018c <_Z19defaultNewAllocatorv+0x60>)
 8010168:	4809      	ldr	r0, [pc, #36]	; (8010190 <_Z19defaultNewAllocatorv+0x64>)
 801016a:	f000 f8c5 	bl	80102f8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 801016e:	4804      	ldr	r0, [pc, #16]	; (8010180 <_Z19defaultNewAllocatorv+0x54>)
 8010170:	f00f fc0a 	bl	801f988 <__cxa_guard_release>
 8010174:	4807      	ldr	r0, [pc, #28]	; (8010194 <_Z19defaultNewAllocatorv+0x68>)
 8010176:	f00f fc2e 	bl	801f9d6 <atexit>
    return &allocator;
 801017a:	4b05      	ldr	r3, [pc, #20]	; (8010190 <_Z19defaultNewAllocatorv+0x64>)
}
 801017c:	4618      	mov	r0, r3
 801017e:	bd80      	pop	{r7, pc}
 8010180:	200008c4 	.word	0x200008c4
 8010184:	08024904 	.word	0x08024904
 8010188:	0802490c 	.word	0x0802490c
 801018c:	08024910 	.word	0x08024910
 8010190:	200008b0 	.word	0x200008b0
 8010194:	0801011d 	.word	0x0801011d

08010198 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8010198:	b580      	push	{r7, lr}
 801019a:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 801019c:	4b04      	ldr	r3, [pc, #16]	; (80101b0 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d101      	bne.n	80101a8 <_Z27getCurrentNewArrayAllocatorv+0x10>
 80101a4:	f000 f806 	bl	80101b4 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 80101a8:	4b01      	ldr	r3, [pc, #4]	; (80101b0 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 80101aa:	681b      	ldr	r3, [r3, #0]
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	200008a8 	.word	0x200008a8

080101b4 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 80101b8:	f000 f810 	bl	80101dc <_Z24defaultNewArrayAllocatorv>
 80101bc:	4603      	mov	r3, r0
 80101be:	4a02      	ldr	r2, [pc, #8]	; (80101c8 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 80101c0:	6013      	str	r3, [r2, #0]
}
 80101c2:	bf00      	nop
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	200008a8 	.word	0x200008a8

080101cc <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 80101cc:	b580      	push	{r7, lr}
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	4801      	ldr	r0, [pc, #4]	; (80101d8 <__tcf_1+0xc>)
 80101d2:	f000 f8b1 	bl	8010338 <_ZN19TestMemoryAllocatorD1Ev>
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	200008c8 	.word	0x200008c8

080101dc <_Z24defaultNewArrayAllocatorv>:
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 80101e0:	4b13      	ldr	r3, [pc, #76]	; (8010230 <_Z24defaultNewArrayAllocatorv+0x54>)
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	f3bf 8f5b 	dmb	ish
 80101e8:	b2db      	uxtb	r3, r3
 80101ea:	f003 0301 	and.w	r3, r3, #1
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	bf0c      	ite	eq
 80101f2:	2301      	moveq	r3, #1
 80101f4:	2300      	movne	r3, #0
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d016      	beq.n	801022a <_Z24defaultNewArrayAllocatorv+0x4e>
 80101fc:	480c      	ldr	r0, [pc, #48]	; (8010230 <_Z24defaultNewArrayAllocatorv+0x54>)
 80101fe:	f00f fbb7 	bl	801f970 <__cxa_guard_acquire>
 8010202:	4603      	mov	r3, r0
 8010204:	2b00      	cmp	r3, #0
 8010206:	bf14      	ite	ne
 8010208:	2301      	movne	r3, #1
 801020a:	2300      	moveq	r3, #0
 801020c:	b2db      	uxtb	r3, r3
 801020e:	2b00      	cmp	r3, #0
 8010210:	d00b      	beq.n	801022a <_Z24defaultNewArrayAllocatorv+0x4e>
 8010212:	4b08      	ldr	r3, [pc, #32]	; (8010234 <_Z24defaultNewArrayAllocatorv+0x58>)
 8010214:	4a08      	ldr	r2, [pc, #32]	; (8010238 <_Z24defaultNewArrayAllocatorv+0x5c>)
 8010216:	4909      	ldr	r1, [pc, #36]	; (801023c <_Z24defaultNewArrayAllocatorv+0x60>)
 8010218:	4809      	ldr	r0, [pc, #36]	; (8010240 <_Z24defaultNewArrayAllocatorv+0x64>)
 801021a:	f000 f86d 	bl	80102f8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 801021e:	4804      	ldr	r0, [pc, #16]	; (8010230 <_Z24defaultNewArrayAllocatorv+0x54>)
 8010220:	f00f fbb2 	bl	801f988 <__cxa_guard_release>
 8010224:	4807      	ldr	r0, [pc, #28]	; (8010244 <_Z24defaultNewArrayAllocatorv+0x68>)
 8010226:	f00f fbd6 	bl	801f9d6 <atexit>
    return &allocator;
 801022a:	4b05      	ldr	r3, [pc, #20]	; (8010240 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 801022c:	4618      	mov	r0, r3
 801022e:	bd80      	pop	{r7, pc}
 8010230:	200008dc 	.word	0x200008dc
 8010234:	08024928 	.word	0x08024928
 8010238:	08024934 	.word	0x08024934
 801023c:	0802493c 	.word	0x0802493c
 8010240:	200008c8 	.word	0x200008c8
 8010244:	080101cd 	.word	0x080101cd

08010248 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 8010248:	b580      	push	{r7, lr}
 801024a:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 801024c:	4b04      	ldr	r3, [pc, #16]	; (8010260 <_Z25getCurrentMallocAllocatorv+0x18>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d101      	bne.n	8010258 <_Z25getCurrentMallocAllocatorv+0x10>
 8010254:	f000 f806 	bl	8010264 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 8010258:	4b01      	ldr	r3, [pc, #4]	; (8010260 <_Z25getCurrentMallocAllocatorv+0x18>)
 801025a:	681b      	ldr	r3, [r3, #0]
}
 801025c:	4618      	mov	r0, r3
 801025e:	bd80      	pop	{r7, pc}
 8010260:	200008ac 	.word	0x200008ac

08010264 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 8010264:	b580      	push	{r7, lr}
 8010266:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 8010268:	f000 f810 	bl	801028c <_Z22defaultMallocAllocatorv>
 801026c:	4603      	mov	r3, r0
 801026e:	4a02      	ldr	r2, [pc, #8]	; (8010278 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 8010270:	6013      	str	r3, [r2, #0]
}
 8010272:	bf00      	nop
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	200008ac 	.word	0x200008ac

0801027c <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 801027c:	b580      	push	{r7, lr}
 801027e:	af00      	add	r7, sp, #0
 8010280:	4801      	ldr	r0, [pc, #4]	; (8010288 <__tcf_2+0xc>)
 8010282:	f000 f859 	bl	8010338 <_ZN19TestMemoryAllocatorD1Ev>
 8010286:	bd80      	pop	{r7, pc}
 8010288:	200008e0 	.word	0x200008e0

0801028c <_Z22defaultMallocAllocatorv>:
{
 801028c:	b580      	push	{r7, lr}
 801028e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8010290:	4b13      	ldr	r3, [pc, #76]	; (80102e0 <_Z22defaultMallocAllocatorv+0x54>)
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	f3bf 8f5b 	dmb	ish
 8010298:	b2db      	uxtb	r3, r3
 801029a:	f003 0301 	and.w	r3, r3, #1
 801029e:	2b00      	cmp	r3, #0
 80102a0:	bf0c      	ite	eq
 80102a2:	2301      	moveq	r3, #1
 80102a4:	2300      	movne	r3, #0
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d016      	beq.n	80102da <_Z22defaultMallocAllocatorv+0x4e>
 80102ac:	480c      	ldr	r0, [pc, #48]	; (80102e0 <_Z22defaultMallocAllocatorv+0x54>)
 80102ae:	f00f fb5f 	bl	801f970 <__cxa_guard_acquire>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	bf14      	ite	ne
 80102b8:	2301      	movne	r3, #1
 80102ba:	2300      	moveq	r3, #0
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00b      	beq.n	80102da <_Z22defaultMallocAllocatorv+0x4e>
 80102c2:	4b08      	ldr	r3, [pc, #32]	; (80102e4 <_Z22defaultMallocAllocatorv+0x58>)
 80102c4:	4a08      	ldr	r2, [pc, #32]	; (80102e8 <_Z22defaultMallocAllocatorv+0x5c>)
 80102c6:	4909      	ldr	r1, [pc, #36]	; (80102ec <_Z22defaultMallocAllocatorv+0x60>)
 80102c8:	4809      	ldr	r0, [pc, #36]	; (80102f0 <_Z22defaultMallocAllocatorv+0x64>)
 80102ca:	f000 f815 	bl	80102f8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80102ce:	4804      	ldr	r0, [pc, #16]	; (80102e0 <_Z22defaultMallocAllocatorv+0x54>)
 80102d0:	f00f fb5a 	bl	801f988 <__cxa_guard_release>
 80102d4:	4807      	ldr	r0, [pc, #28]	; (80102f4 <_Z22defaultMallocAllocatorv+0x68>)
 80102d6:	f00f fb7e 	bl	801f9d6 <atexit>
    return &allocator;
 80102da:	4b05      	ldr	r3, [pc, #20]	; (80102f0 <_Z22defaultMallocAllocatorv+0x64>)
}
 80102dc:	4618      	mov	r0, r3
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	200008f4 	.word	0x200008f4
 80102e4:	08024958 	.word	0x08024958
 80102e8:	08024960 	.word	0x08024960
 80102ec:	08024968 	.word	0x08024968
 80102f0:	200008e0 	.word	0x200008e0
 80102f4:	0801027d 	.word	0x0801027d

080102f8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 80102f8:	b480      	push	{r7}
 80102fa:	b085      	sub	sp, #20
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
 8010304:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 8010306:	4a0b      	ldr	r2, [pc, #44]	; (8010334 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	601a      	str	r2, [r3, #0]
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	605a      	str	r2, [r3, #4]
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	609a      	str	r2, [r3, #8]
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	683a      	ldr	r2, [r7, #0]
 801031c:	60da      	str	r2, [r3, #12]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2200      	movs	r2, #0
 8010322:	741a      	strb	r2, [r3, #16]
{
}
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	4618      	mov	r0, r3
 8010328:	3714      	adds	r7, #20
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop
 8010334:	080286ec 	.word	0x080286ec

08010338 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	4a06      	ldr	r2, [pc, #24]	; (801035c <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2201      	movs	r2, #1
 801034a:	741a      	strb	r2, [r3, #16]
}
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4618      	mov	r0, r3
 8010350:	370c      	adds	r7, #12
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr
 801035a:	bf00      	nop
 801035c:	080286ec 	.word	0x080286ec

08010360 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
}
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7ff ffe5 	bl	8010338 <_ZN19TestMemoryAllocatorD1Ev>
 801036e:	2114      	movs	r1, #20
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f7fa f88d 	bl	800a490 <_ZdlPvj>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4618      	mov	r0, r3
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	7c1b      	ldrb	r3, [r3, #16]
}
 801038c:	4618      	mov	r0, r3
 801038e:	370c      	adds	r7, #12
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr

08010398 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 8010398:	b590      	push	{r4, r7, lr}
 801039a:	b083      	sub	sp, #12
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	3310      	adds	r3, #16
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	4798      	blx	r3
 80103ae:	4604      	mov	r4, r0
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	3310      	adds	r3, #16
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	6838      	ldr	r0, [r7, #0]
 80103ba:	4798      	blx	r3
 80103bc:	4603      	mov	r3, r0
 80103be:	4619      	mov	r1, r3
 80103c0:	4620      	mov	r0, r4
 80103c2:	f7fc fa51 	bl	800c868 <_ZN12SimpleString6StrCmpEPKcS1_>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	bf0c      	ite	eq
 80103cc:	2301      	moveq	r3, #1
 80103ce:	2300      	movne	r3, #0
 80103d0:	b2db      	uxtb	r3, r3
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	370c      	adds	r7, #12
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd90      	pop	{r4, r7, pc}
	...

080103dc <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 80103dc:	b590      	push	{r4, r7, lr}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	3308      	adds	r3, #8
 80103ec:	681c      	ldr	r4, [r3, #0]
 80103ee:	2301      	movs	r3, #1
 80103f0:	4a04      	ldr	r2, [pc, #16]	; (8010404 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 80103f2:	6839      	ldr	r1, [r7, #0]
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	47a0      	blx	r4
 80103f8:	4603      	mov	r3, r0
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	370c      	adds	r7, #12
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd90      	pop	{r4, r7, pc}
 8010402:	bf00      	nop
 8010404:	08024984 	.word	0x08024984

08010408 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 8010408:	b590      	push	{r4, r7, lr}
 801040a:	b085      	sub	sp, #20
 801040c:	af02      	add	r7, sp, #8
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	330c      	adds	r3, #12
 8010418:	681c      	ldr	r4, [r3, #0]
 801041a:	2301      	movs	r3, #1
 801041c:	9300      	str	r3, [sp, #0]
 801041e:	4b04      	ldr	r3, [pc, #16]	; (8010430 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 8010420:	2200      	movs	r2, #0
 8010422:	6839      	ldr	r1, [r7, #0]
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	47a0      	blx	r4
}
 8010428:	bf00      	nop
 801042a:	370c      	adds	r7, #12
 801042c:	46bd      	mov	sp, r7
 801042e:	bd90      	pop	{r4, r7, pc}
 8010430:	08024984 	.word	0x08024984

08010434 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	607a      	str	r2, [r7, #4]
 8010440:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 8010442:	68b8      	ldr	r0, [r7, #8]
 8010444:	f7ff fe2a 	bl	801009c <_ZL13checkedMallocj>
 8010448:	4603      	mov	r3, r0
}
 801044a:	4618      	mov	r0, r3
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
	...

08010454 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	607a      	str	r2, [r7, #4]
 8010460:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 8010462:	4b04      	ldr	r3, [pc, #16]	; (8010474 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	68b8      	ldr	r0, [r7, #8]
 8010468:	4798      	blx	r3
}
 801046a:	bf00      	nop
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	200000d0 	.word	0x200000d0

08010478 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
    return name_;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	685b      	ldr	r3, [r3, #4]
}
 8010484:	4618      	mov	r0, r3
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 8010490:	b480      	push	{r7}
 8010492:	b083      	sub	sp, #12
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	689b      	ldr	r3, [r3, #8]
}
 801049c:	4618      	mov	r0, r3
 801049e:	370c      	adds	r7, #12
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr

080104a8 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 80104a8:	b480      	push	{r7}
 80104aa:	b083      	sub	sp, #12
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
    return free_name_;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	68db      	ldr	r3, [r3, #12]
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr

080104c0 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
    return this;
 80104c8:	687b      	ldr	r3, [r7, #4]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	370c      	adds	r7, #12
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
	...

080104d8 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	4a05      	ldr	r2, [pc, #20]	; (80104f8 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	601a      	str	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4618      	mov	r0, r3
 80104ea:	f7ff ff25 	bl	8010338 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4618      	mov	r0, r3
 80104f2:	3708      	adds	r7, #8
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	080286b8 	.word	0x080286b8

080104fc <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
}
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f7ff ffe7 	bl	80104d8 <_ZN20NullUnknownAllocatorD1Ev>
 801050a:	2114      	movs	r1, #20
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f7f9 ffbf 	bl	800a490 <_ZdlPvj>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4618      	mov	r0, r3
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 801051c:	b480      	push	{r7}
 801051e:	b085      	sub	sp, #20
 8010520:	af00      	add	r7, sp, #0
 8010522:	60f8      	str	r0, [r7, #12]
 8010524:	60b9      	str	r1, [r7, #8]
 8010526:	607a      	str	r2, [r7, #4]
 8010528:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 801052a:	2300      	movs	r3, #0
}
 801052c:	4618      	mov	r0, r3
 801052e:	3714      	adds	r7, #20
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 8010538:	b480      	push	{r7}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
 8010544:	603b      	str	r3, [r7, #0]
}
 8010546:	bf00      	nop
 8010548:	3714      	adds	r7, #20
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr
	...

08010554 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	4b06      	ldr	r3, [pc, #24]	; (8010578 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8010560:	4a05      	ldr	r2, [pc, #20]	; (8010578 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8010562:	4906      	ldr	r1, [pc, #24]	; (801057c <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 8010564:	f7ff fec8 	bl	80102f8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010568:	4a05      	ldr	r2, [pc, #20]	; (8010580 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	601a      	str	r2, [r3, #0]
{
}
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4618      	mov	r0, r3
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	080249b8 	.word	0x080249b8
 801057c:	080249c0 	.word	0x080249c0
 8010580:	080286b8 	.word	0x080286b8

08010584 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 8010584:	b580      	push	{r7, lr}
 8010586:	af00      	add	r7, sp, #0
 8010588:	4801      	ldr	r0, [pc, #4]	; (8010590 <__tcf_3+0xc>)
 801058a:	f7ff ffa5 	bl	80104d8 <_ZN20NullUnknownAllocatorD1Ev>
 801058e:	bd80      	pop	{r7, pc}
 8010590:	200008f8 	.word	0x200008f8

08010594 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 8010594:	b580      	push	{r7, lr}
 8010596:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 8010598:	4b12      	ldr	r3, [pc, #72]	; (80105e4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	f3bf 8f5b 	dmb	ish
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	f003 0301 	and.w	r3, r3, #1
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	bf0c      	ite	eq
 80105aa:	2301      	moveq	r3, #1
 80105ac:	2300      	movne	r3, #0
 80105ae:	b2db      	uxtb	r3, r3
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d013      	beq.n	80105dc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 80105b4:	480b      	ldr	r0, [pc, #44]	; (80105e4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80105b6:	f00f f9db 	bl	801f970 <__cxa_guard_acquire>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	bf14      	ite	ne
 80105c0:	2301      	movne	r3, #1
 80105c2:	2300      	moveq	r3, #0
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d008      	beq.n	80105dc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 80105ca:	4807      	ldr	r0, [pc, #28]	; (80105e8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 80105cc:	f7ff ffc2 	bl	8010554 <_ZN20NullUnknownAllocatorC1Ev>
 80105d0:	4804      	ldr	r0, [pc, #16]	; (80105e4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 80105d2:	f00f f9d9 	bl	801f988 <__cxa_guard_release>
 80105d6:	4805      	ldr	r0, [pc, #20]	; (80105ec <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 80105d8:	f00f f9fd 	bl	801f9d6 <atexit>
    return &allocator;
 80105dc:	4b02      	ldr	r3, [pc, #8]	; (80105e8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 80105de:	4618      	mov	r0, r3
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	2000090c 	.word	0x2000090c
 80105e8:	200008f8 	.word	0x200008f8
 80105ec:	08010585 	.word	0x08010585

080105f0 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
        return testCount_;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	689b      	ldr	r3, [r3, #8]
    }
 80105fc:	4618      	mov	r0, r3
 80105fe:	370c      	adds	r7, #12
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr

08010608 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 8010608:	b480      	push	{r7}
 801060a:	b083      	sub	sp, #12
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	699b      	ldr	r3, [r3, #24]
    }
 8010614:	4618      	mov	r0, r3
 8010616:	370c      	adds	r7, #12
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 8010620:	b580      	push	{r7, lr}
 8010622:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 8010624:	4b05      	ldr	r3, [pc, #20]	; (801063c <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	2b02      	cmp	r3, #2
 801062a:	d103      	bne.n	8010634 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 801062c:	f004 fa4a 	bl	8014ac4 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 8010630:	4603      	mov	r3, r0
 8010632:	e001      	b.n	8010638 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 8010634:	4b01      	ldr	r3, [pc, #4]	; (801063c <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 8010636:	781b      	ldrb	r3, [r3, #0]
}
 8010638:	4618      	mov	r0, r3
 801063a:	bd80      	pop	{r7, pc}
 801063c:	20000088 	.word	0x20000088

08010640 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 8010648:	4a0a      	ldr	r2, [pc, #40]	; (8010674 <_ZN10TestOutputC1Ev+0x34>)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	601a      	str	r2, [r3, #0]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	605a      	str	r2, [r3, #4]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2200      	movs	r2, #0
 8010658:	721a      	strb	r2, [r3, #8]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	725a      	strb	r2, [r3, #9]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	4a05      	ldr	r2, [pc, #20]	; (8010678 <_ZN10TestOutputC1Ev+0x38>)
 8010664:	60da      	str	r2, [r3, #12]
{
}
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4618      	mov	r0, r3
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr
 8010674:	080287f0 	.word	0x080287f0
 8010678:	08024dc0 	.word	0x08024dc0

0801067c <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	4a04      	ldr	r2, [pc, #16]	; (8010698 <_ZN10TestOutputD1Ev+0x1c>)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	601a      	str	r2, [r3, #0]
{
}
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	4618      	mov	r0, r3
 801068e:	370c      	adds	r7, #12
 8010690:	46bd      	mov	sp, r7
 8010692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010696:	4770      	bx	lr
 8010698:	080287f0 	.word	0x080287f0

0801069c <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 801069c:	b480      	push	{r7}
 801069e:	b083      	sub	sp, #12
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	460b      	mov	r3, r1
 80106a6:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	78fa      	ldrb	r2, [r7, #3]
 80106ac:	721a      	strb	r2, [r3, #8]
}
 80106ae:	bf00      	nop
 80106b0:	370c      	adds	r7, #12
 80106b2:	46bd      	mov	sp, r7
 80106b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b8:	4770      	bx	lr

080106ba <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 80106ba:	b480      	push	{r7}
 80106bc:	b083      	sub	sp, #12
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
    color_ = true;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2201      	movs	r2, #1
 80106c6:	725a      	strb	r2, [r3, #9]
}
 80106c8:	bf00      	nop
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	3328      	adds	r3, #40	; 0x28
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	6839      	ldr	r1, [r7, #0]
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	4798      	blx	r3
}
 80106ec:	bf00      	nop
 80106ee:	3708      	adds	r7, #8
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 80106f4:	b590      	push	{r4, r7, lr}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	332c      	adds	r3, #44	; 0x2c
 8010704:	681c      	ldr	r4, [r3, #0]
 8010706:	f107 0308 	add.w	r3, r7, #8
 801070a:	6839      	ldr	r1, [r7, #0]
 801070c:	4618      	mov	r0, r3
 801070e:	f7fd f8ff 	bl	800d910 <_Z10StringFroml>
 8010712:	f107 0308 	add.w	r3, r7, #8
 8010716:	4618      	mov	r0, r3
 8010718:	f7fc fdf4 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801071c:	4603      	mov	r3, r0
 801071e:	4619      	mov	r1, r3
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	47a0      	blx	r4
 8010724:	f107 0308 	add.w	r3, r7, #8
 8010728:	4618      	mov	r0, r3
 801072a:	f7fc fe18 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 801072e:	bf00      	nop
 8010730:	3714      	adds	r7, #20
 8010732:	46bd      	mov	sp, r7
 8010734:	bd90      	pop	{r4, r7, pc}

08010736 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 8010736:	b590      	push	{r4, r7, lr}
 8010738:	b085      	sub	sp, #20
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
 801073e:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	332c      	adds	r3, #44	; 0x2c
 8010746:	681c      	ldr	r4, [r3, #0]
 8010748:	f107 0308 	add.w	r3, r7, #8
 801074c:	6839      	ldr	r1, [r7, #0]
 801074e:	4618      	mov	r0, r3
 8010750:	f7fd fb34 	bl	800ddbc <_Z10StringFromj>
 8010754:	f107 0308 	add.w	r3, r7, #8
 8010758:	4618      	mov	r0, r3
 801075a:	f7fc fdd3 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801075e:	4603      	mov	r3, r0
 8010760:	4619      	mov	r1, r3
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	47a0      	blx	r4
 8010766:	f107 0308 	add.w	r3, r7, #8
 801076a:	4618      	mov	r0, r3
 801076c:	f7fc fdf7 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8010770:	bf00      	nop
 8010772:	3714      	adds	r7, #20
 8010774:	46bd      	mov	sp, r7
 8010776:	bd90      	pop	{r4, r7, pc}

08010778 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8010778:	b590      	push	{r4, r7, lr}
 801077a:	b087      	sub	sp, #28
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	332c      	adds	r3, #44	; 0x2c
 801078a:	681c      	ldr	r4, [r3, #0]
 801078c:	f107 0310 	add.w	r3, r7, #16
 8010790:	2106      	movs	r1, #6
 8010792:	ed97 0b00 	vldr	d0, [r7]
 8010796:	4618      	mov	r0, r3
 8010798:	f7fd faa6 	bl	800dce8 <_Z10StringFromdi>
 801079c:	f107 0310 	add.w	r3, r7, #16
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fc fdaf 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 80107a6:	4603      	mov	r3, r0
 80107a8:	4619      	mov	r1, r3
 80107aa:	68f8      	ldr	r0, [r7, #12]
 80107ac:	47a0      	blx	r4
 80107ae:	f107 0310 	add.w	r3, r7, #16
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fc fdd3 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 80107b8:	bf00      	nop
 80107ba:	371c      	adds	r7, #28
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd90      	pop	{r4, r7, pc}

080107c0 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6039      	str	r1, [r7, #0]
    p.print(s);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	332c      	adds	r3, #44	; 0x2c
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	6839      	ldr	r1, [r7, #0]
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	4798      	blx	r3
    return p;
 80107d8:	687b      	ldr	r3, [r7, #4]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
	...

080107e4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80107e4:	b590      	push	{r4, r7, lr}
 80107e6:	b085      	sub	sp, #20
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	7a1b      	ldrb	r3, [r3, #8]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d01a      	beq.n	801082c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	332c      	adds	r3, #44	; 0x2c
 80107fc:	681c      	ldr	r4, [r3, #0]
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	3314      	adds	r3, #20
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	f107 0208 	add.w	r2, r7, #8
 801080a:	6839      	ldr	r1, [r7, #0]
 801080c:	4610      	mov	r0, r2
 801080e:	4798      	blx	r3
 8010810:	f107 0308 	add.w	r3, r7, #8
 8010814:	4618      	mov	r0, r3
 8010816:	f7fc fd75 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801081a:	4603      	mov	r3, r0
 801081c:	4619      	mov	r1, r3
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	47a0      	blx	r4
 8010822:	f107 0308 	add.w	r3, r7, #8
 8010826:	4618      	mov	r0, r3
 8010828:	f7fc fd99 	bl	800d35e <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	3318      	adds	r3, #24
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	6838      	ldr	r0, [r7, #0]
 8010836:	4798      	blx	r3
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d007      	beq.n	801084e <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	3344      	adds	r3, #68	; 0x44
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4907      	ldr	r1, [pc, #28]	; (8010864 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 801084c:	e006      	b.n	801085c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	3344      	adds	r3, #68	; 0x44
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4904      	ldr	r1, [pc, #16]	; (8010868 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	4798      	blx	r3
}
 801085c:	bf00      	nop
 801085e:	3714      	adds	r7, #20
 8010860:	46bd      	mov	sp, r7
 8010862:	bd90      	pop	{r4, r7, pc}
 8010864:	08024dc0 	.word	0x08024dc0
 8010868:	08024dc4 	.word	0x08024dc4

0801086c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 801086c:	b590      	push	{r4, r7, lr}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	7a1b      	ldrb	r3, [r3, #8]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d019      	beq.n	80108b2 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	332c      	adds	r3, #44	; 0x2c
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4910      	ldr	r1, [pc, #64]	; (80108c8 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	3334      	adds	r3, #52	; 0x34
 8010892:	681c      	ldr	r4, [r3, #0]
 8010894:	6838      	ldr	r0, [r7, #0]
 8010896:	f002 f845 	bl	8012924 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 801089a:	4603      	mov	r3, r0
 801089c:	4619      	mov	r1, r3
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	47a0      	blx	r4
        print(" ms\n");
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	332c      	adds	r3, #44	; 0x2c
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	4908      	ldr	r1, [pc, #32]	; (80108cc <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 80108b0:	e005      	b.n	80108be <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	3358      	adds	r3, #88	; 0x58
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	4798      	blx	r3
}
 80108be:	bf00      	nop
 80108c0:	370c      	adds	r7, #12
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd90      	pop	{r4, r7, pc}
 80108c6:	bf00      	nop
 80108c8:	08024dc8 	.word	0x08024dc8
 80108cc:	08024dcc 	.word	0x08024dcc

080108d0 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	332c      	adds	r3, #44	; 0x2c
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	68d2      	ldr	r2, [r2, #12]
 80108e4:	4611      	mov	r1, r2
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	1c5a      	adds	r2, r3, #1
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	605a      	str	r2, [r3, #4]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	685a      	ldr	r2, [r3, #4]
 80108f8:	4b0d      	ldr	r3, [pc, #52]	; (8010930 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 80108fa:	fb83 1302 	smull	r1, r3, r3, r2
 80108fe:	1119      	asrs	r1, r3, #4
 8010900:	17d3      	asrs	r3, r2, #31
 8010902:	1acb      	subs	r3, r1, r3
 8010904:	2132      	movs	r1, #50	; 0x32
 8010906:	fb01 f303 	mul.w	r3, r1, r3
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	2b00      	cmp	r3, #0
 801090e:	bf0c      	ite	eq
 8010910:	2301      	moveq	r3, #1
 8010912:	2300      	movne	r3, #0
 8010914:	b2db      	uxtb	r3, r3
 8010916:	2b00      	cmp	r3, #0
 8010918:	d006      	beq.n	8010928 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	332c      	adds	r3, #44	; 0x2c
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	4904      	ldr	r1, [pc, #16]	; (8010934 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	4798      	blx	r3
}
 8010928:	bf00      	nop
 801092a:	3708      	adds	r7, #8
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}
 8010930:	51eb851f 	.word	0x51eb851f
 8010934:	08024dd4 	.word	0x08024dd4

08010938 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8010938:	b480      	push	{r7}
 801093a:	b083      	sub	sp, #12
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	683a      	ldr	r2, [r7, #0]
 8010946:	60da      	str	r2, [r3, #12]
}
 8010948:	bf00      	nop
 801094a:	370c      	adds	r7, #12
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr

08010954 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 8010954:	b480      	push	{r7}
 8010956:	b083      	sub	sp, #12
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
}
 801095c:	bf00      	nop
 801095e:	370c      	adds	r7, #12
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr

08010968 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
}
 8010972:	bf00      	nop
 8010974:	370c      	adds	r7, #12
 8010976:	46bd      	mov	sp, r7
 8010978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097c:	4770      	bx	lr

0801097e <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 801097e:	b480      	push	{r7}
 8010980:	b083      	sub	sp, #12
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
 8010986:	6039      	str	r1, [r7, #0]
}
 8010988:	bf00      	nop
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8010994:	b590      	push	{r4, r7, lr}
 8010996:	b085      	sub	sp, #20
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
    print("\n");
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	332c      	adds	r3, #44	; 0x2c
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	496f      	ldr	r1, [pc, #444]	; (8010b64 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 80109ac:	6838      	ldr	r0, [r7, #0]
 80109ae:	f7f8 f83d 	bl	8008a2c <_ZNK10TestResult9isFailureEv>
 80109b2:	4603      	mov	r3, r0
 80109b4:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 80109b6:	6838      	ldr	r0, [r7, #0]
 80109b8:	f7f8 f82c 	bl	8008a14 <_ZNK10TestResult15getFailureCountEv>
 80109bc:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 80109be:	7bfb      	ldrb	r3, [r7, #15]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d02b      	beq.n	8010a1c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	7a5b      	ldrb	r3, [r3, #9]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d006      	beq.n	80109da <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	332c      	adds	r3, #44	; 0x2c
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4964      	ldr	r1, [pc, #400]	; (8010b68 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	4798      	blx	r3
        }
        print("Errors (");
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	332c      	adds	r3, #44	; 0x2c
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4962      	ldr	r1, [pc, #392]	; (8010b6c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	4798      	blx	r3
        if (failureCount > 0) {
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00e      	beq.n	8010a0c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	3334      	adds	r3, #52	; 0x34
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	68b9      	ldr	r1, [r7, #8]
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	4798      	blx	r3
            print(" failures, ");
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	332c      	adds	r3, #44	; 0x2c
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	495a      	ldr	r1, [pc, #360]	; (8010b70 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	4798      	blx	r3
 8010a0a:	e019      	b.n	8010a40 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	332c      	adds	r3, #44	; 0x2c
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	4957      	ldr	r1, [pc, #348]	; (8010b74 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	4798      	blx	r3
 8010a1a:	e011      	b.n	8010a40 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	7a5b      	ldrb	r3, [r3, #9]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d006      	beq.n	8010a32 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	332c      	adds	r3, #44	; 0x2c
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4952      	ldr	r1, [pc, #328]	; (8010b78 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	4798      	blx	r3
        }
        print("OK (");
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	332c      	adds	r3, #44	; 0x2c
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4950      	ldr	r1, [pc, #320]	; (8010b7c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	4798      	blx	r3
    }
    print(result.getTestCount());
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	3334      	adds	r3, #52	; 0x34
 8010a46:	681c      	ldr	r4, [r3, #0]
 8010a48:	6838      	ldr	r0, [r7, #0]
 8010a4a:	f7ff fdd1 	bl	80105f0 <_ZNK10TestResult12getTestCountEv>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	4619      	mov	r1, r3
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	47a0      	blx	r4
    print(" tests, ");
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	332c      	adds	r3, #44	; 0x2c
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4948      	ldr	r1, [pc, #288]	; (8010b80 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	4798      	blx	r3
    print(result.getRunCount());
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	3334      	adds	r3, #52	; 0x34
 8010a6a:	681c      	ldr	r4, [r3, #0]
 8010a6c:	6838      	ldr	r0, [r7, #0]
 8010a6e:	f7f7 ffb9 	bl	80089e4 <_ZNK10TestResult11getRunCountEv>
 8010a72:	4603      	mov	r3, r0
 8010a74:	4619      	mov	r1, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	47a0      	blx	r4
    print(" ran, ");
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	332c      	adds	r3, #44	; 0x2c
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4940      	ldr	r1, [pc, #256]	; (8010b84 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	4798      	blx	r3
    print(result.getCheckCount());
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	3334      	adds	r3, #52	; 0x34
 8010a8e:	681c      	ldr	r4, [r3, #0]
 8010a90:	6838      	ldr	r0, [r7, #0]
 8010a92:	f7f8 fc13 	bl	80092bc <_ZNK10TestResult13getCheckCountEv>
 8010a96:	4603      	mov	r3, r0
 8010a98:	4619      	mov	r1, r3
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	47a0      	blx	r4
    print(" checks, ");
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	332c      	adds	r3, #44	; 0x2c
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4938      	ldr	r1, [pc, #224]	; (8010b88 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	4798      	blx	r3
    print(result.getIgnoredCount());
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	3334      	adds	r3, #52	; 0x34
 8010ab2:	681c      	ldr	r4, [r3, #0]
 8010ab4:	6838      	ldr	r0, [r7, #0]
 8010ab6:	f7f7 ffa1 	bl	80089fc <_ZNK10TestResult15getIgnoredCountEv>
 8010aba:	4603      	mov	r3, r0
 8010abc:	4619      	mov	r1, r3
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	47a0      	blx	r4
    print(" ignored, ");
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	332c      	adds	r3, #44	; 0x2c
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	4930      	ldr	r1, [pc, #192]	; (8010b8c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	3334      	adds	r3, #52	; 0x34
 8010ad6:	681c      	ldr	r4, [r3, #0]
 8010ad8:	6838      	ldr	r0, [r7, #0]
 8010ada:	f7ff fd95 	bl	8010608 <_ZNK10TestResult19getFilteredOutCountEv>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	47a0      	blx	r4
    print(" filtered out, ");
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	332c      	adds	r3, #44	; 0x2c
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	4928      	ldr	r1, [pc, #160]	; (8010b90 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	3334      	adds	r3, #52	; 0x34
 8010afa:	681c      	ldr	r4, [r3, #0]
 8010afc:	6838      	ldr	r0, [r7, #0]
 8010afe:	f001 ff05 	bl	801290c <_ZNK10TestResult21getTotalExecutionTimeEv>
 8010b02:	4603      	mov	r3, r0
 8010b04:	4619      	mov	r1, r3
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	47a0      	blx	r4
    print(" ms)");
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	332c      	adds	r3, #44	; 0x2c
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4920      	ldr	r1, [pc, #128]	; (8010b94 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	4798      	blx	r3
    if (color_) {
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	7a5b      	ldrb	r3, [r3, #9]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d006      	beq.n	8010b2e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	332c      	adds	r3, #44	; 0x2c
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	491b      	ldr	r1, [pc, #108]	; (8010b98 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 8010b2e:	7bfb      	ldrb	r3, [r7, #15]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d009      	beq.n	8010b48 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d106      	bne.n	8010b48 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	332c      	adds	r3, #44	; 0x2c
 8010b40:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 8010b42:	4916      	ldr	r1, [pc, #88]	; (8010b9c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	4798      	blx	r3
    }
    print("\n\n");
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	332c      	adds	r3, #44	; 0x2c
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4913      	ldr	r1, [pc, #76]	; (8010ba0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	4798      	blx	r3

    dotCount_ = 0;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	605a      	str	r2, [r3, #4]
}
 8010b5c:	bf00      	nop
 8010b5e:	3714      	adds	r7, #20
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd90      	pop	{r4, r7, pc}
 8010b64:	08024dd4 	.word	0x08024dd4
 8010b68:	08024dd8 	.word	0x08024dd8
 8010b6c:	08024de0 	.word	0x08024de0
 8010b70:	08024dec 	.word	0x08024dec
 8010b74:	08024df8 	.word	0x08024df8
 8010b78:	08024e08 	.word	0x08024e08
 8010b7c:	08024e10 	.word	0x08024e10
 8010b80:	08024e18 	.word	0x08024e18
 8010b84:	08024e24 	.word	0x08024e24
 8010b88:	08024e2c 	.word	0x08024e2c
 8010b8c:	08024e38 	.word	0x08024e38
 8010b90:	08024e44 	.word	0x08024e44
 8010b94:	08024e54 	.word	0x08024e54
 8010b98:	08024e5c 	.word	0x08024e5c
 8010b9c:	08024e60 	.word	0x08024e60
 8010ba0:	08024f04 	.word	0x08024f04

08010ba4 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	d922      	bls.n	8010bfc <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	332c      	adds	r3, #44	; 0x2c
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	4911      	ldr	r1, [pc, #68]	; (8010c04 <_ZN10TestOutput12printTestRunEjj+0x60>)
 8010bc0:	68f8      	ldr	r0, [r7, #12]
 8010bc2:	4798      	blx	r3
        print(number);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	3334      	adds	r3, #52	; 0x34
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	68b9      	ldr	r1, [r7, #8]
 8010bce:	68f8      	ldr	r0, [r7, #12]
 8010bd0:	4798      	blx	r3
        print(" of ");
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	332c      	adds	r3, #44	; 0x2c
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	490b      	ldr	r1, [pc, #44]	; (8010c08 <_ZN10TestOutput12printTestRunEjj+0x64>)
 8010bdc:	68f8      	ldr	r0, [r7, #12]
 8010bde:	4798      	blx	r3
        print(total);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	3334      	adds	r3, #52	; 0x34
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	6879      	ldr	r1, [r7, #4]
 8010bea:	68f8      	ldr	r0, [r7, #12]
 8010bec:	4798      	blx	r3
        print("\n");
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	332c      	adds	r3, #44	; 0x2c
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	4905      	ldr	r1, [pc, #20]	; (8010c0c <_ZN10TestOutput12printTestRunEjj+0x68>)
 8010bf8:	68f8      	ldr	r0, [r7, #12]
 8010bfa:	4798      	blx	r3
    }
}
 8010bfc:	bf00      	nop
 8010bfe:	3710      	adds	r7, #16
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	08024f08 	.word	0x08024f08
 8010c08:	08024f14 	.word	0x08024f14
 8010c0c:	08024dd4 	.word	0x08024dd4

08010c10 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 8010c1a:	6838      	ldr	r0, [r7, #0]
 8010c1c:	f7fd ffa1 	bl	800eb62 <_ZNK11TestFailure17isOutsideTestFileEv>
 8010c20:	4603      	mov	r3, r0
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d105      	bne.n	8010c32 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 8010c26:	6838      	ldr	r0, [r7, #0]
 8010c28:	f7fd ffad 	bl	800eb86 <_ZNK11TestFailure18isInHelperFunctionEv>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d001      	beq.n	8010c36 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 8010c32:	2301      	movs	r3, #1
 8010c34:	e000      	b.n	8010c38 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 8010c36:	2300      	movs	r3, #0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d004      	beq.n	8010c46 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 8010c3c:	6839      	ldr	r1, [r7, #0]
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 f81d 	bl	8010c7e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 8010c44:	e003      	b.n	8010c4e <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 8010c46:	6839      	ldr	r1, [r7, #0]
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 f86b 	bl	8010d24 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	3318      	adds	r3, #24
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f107 0208 	add.w	r2, r7, #8
 8010c5a:	6839      	ldr	r1, [r7, #0]
 8010c5c:	4610      	mov	r0, r2
 8010c5e:	4798      	blx	r3
 8010c60:	f107 0308 	add.w	r3, r7, #8
 8010c64:	4619      	mov	r1, r3
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f000 f8b2 	bl	8010dd0 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 8010c6c:	f107 0308 	add.w	r3, r7, #8
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7fc fb74 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8010c76:	bf00      	nop
 8010c78:	3710      	adds	r7, #16
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}

08010c7e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 8010c7e:	b580      	push	{r7, lr}
 8010c80:	b088      	sub	sp, #32
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
 8010c86:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	331c      	adds	r3, #28
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f107 0208 	add.w	r2, r7, #8
 8010c94:	6839      	ldr	r1, [r7, #0]
 8010c96:	4610      	mov	r0, r2
 8010c98:	4798      	blx	r3
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	3320      	adds	r3, #32
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	6838      	ldr	r0, [r7, #0]
 8010ca4:	4798      	blx	r3
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	f107 0308 	add.w	r3, r7, #8
 8010cac:	4619      	mov	r1, r3
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f000 f8be 	bl	8010e30 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010cb4:	f107 0308 	add.w	r3, r7, #8
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7fc fb50 	bl	800d35e <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	330c      	adds	r3, #12
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f107 0210 	add.w	r2, r7, #16
 8010cca:	6839      	ldr	r1, [r7, #0]
 8010ccc:	4610      	mov	r0, r2
 8010cce:	4798      	blx	r3
 8010cd0:	f107 0310 	add.w	r3, r7, #16
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f000 f85c 	bl	8010d94 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010cdc:	f107 0310 	add.w	r3, r7, #16
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7fc fb3c 	bl	800d35e <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	3308      	adds	r3, #8
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f107 0218 	add.w	r2, r7, #24
 8010cf2:	6839      	ldr	r1, [r7, #0]
 8010cf4:	4610      	mov	r0, r2
 8010cf6:	4798      	blx	r3
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	3314      	adds	r3, #20
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	6838      	ldr	r0, [r7, #0]
 8010d02:	4798      	blx	r3
 8010d04:	4602      	mov	r2, r0
 8010d06:	f107 0318 	add.w	r3, r7, #24
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f000 f88f 	bl	8010e30 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010d12:	f107 0318 	add.w	r3, r7, #24
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fc fb21 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8010d1c:	bf00      	nop
 8010d1e:	3720      	adds	r7, #32
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b086      	sub	sp, #24
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	3308      	adds	r3, #8
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f107 0208 	add.w	r2, r7, #8
 8010d3a:	6839      	ldr	r1, [r7, #0]
 8010d3c:	4610      	mov	r0, r2
 8010d3e:	4798      	blx	r3
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	3314      	adds	r3, #20
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	6838      	ldr	r0, [r7, #0]
 8010d4a:	4798      	blx	r3
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	f107 0308 	add.w	r3, r7, #8
 8010d52:	4619      	mov	r1, r3
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f000 f86b 	bl	8010e30 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010d5a:	f107 0308 	add.w	r3, r7, #8
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fc fafd 	bl	800d35e <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	330c      	adds	r3, #12
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f107 0210 	add.w	r2, r7, #16
 8010d70:	6839      	ldr	r1, [r7, #0]
 8010d72:	4610      	mov	r0, r2
 8010d74:	4798      	blx	r3
 8010d76:	f107 0310 	add.w	r3, r7, #16
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f000 f809 	bl	8010d94 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010d82:	f107 0310 	add.w	r3, r7, #16
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7fc fae9 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8010d8c:	bf00      	nop
 8010d8e:	3718      	adds	r7, #24
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 8010d94:	b590      	push	{r4, r7, lr}
 8010d96:	b083      	sub	sp, #12
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	332c      	adds	r3, #44	; 0x2c
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4909      	ldr	r1, [pc, #36]	; (8010dcc <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	4798      	blx	r3
    print(testName.asCharString());
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	332c      	adds	r3, #44	; 0x2c
 8010db2:	681c      	ldr	r4, [r3, #0]
 8010db4:	6838      	ldr	r0, [r7, #0]
 8010db6:	f7fc faa5 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	47a0      	blx	r4
}
 8010dc2:	bf00      	nop
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd90      	pop	{r4, r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	08024f1c 	.word	0x08024f1c

08010dd0 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8010dd0:	b590      	push	{r4, r7, lr}
 8010dd2:	b083      	sub	sp, #12
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
    print("\n");
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	332c      	adds	r3, #44	; 0x2c
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	4910      	ldr	r1, [pc, #64]	; (8010e24 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	4798      	blx	r3
    print("\t");
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	332c      	adds	r3, #44	; 0x2c
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	490d      	ldr	r1, [pc, #52]	; (8010e28 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	4798      	blx	r3
    print(reason.asCharString());
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	332c      	adds	r3, #44	; 0x2c
 8010dfc:	681c      	ldr	r4, [r3, #0]
 8010dfe:	6838      	ldr	r0, [r7, #0]
 8010e00:	f7fc fa80 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8010e04:	4603      	mov	r3, r0
 8010e06:	4619      	mov	r1, r3
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	47a0      	blx	r4
    print("\n\n");
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	332c      	adds	r3, #44	; 0x2c
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4905      	ldr	r1, [pc, #20]	; (8010e2c <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	4798      	blx	r3
}
 8010e1a:	bf00      	nop
 8010e1c:	370c      	adds	r7, #12
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd90      	pop	{r4, r7, pc}
 8010e22:	bf00      	nop
 8010e24:	08024dd4 	.word	0x08024dd4
 8010e28:	08024f2c 	.word	0x08024f2c
 8010e2c:	08024f04 	.word	0x08024f04

08010e30 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 8010e30:	b590      	push	{r4, r7, lr}
 8010e32:	b089      	sub	sp, #36	; 0x24
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 8010e3c:	f7ff fbf0 	bl	8010620 <_ZN10TestOutput21getWorkingEnvironmentEv>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	bf0c      	ite	eq
 8010e46:	2301      	moveq	r3, #1
 8010e48:	2300      	movne	r3, #0
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d015      	beq.n	8010e7c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	3354      	adds	r3, #84	; 0x54
 8010e56:	681c      	ldr	r4, [r3, #0]
 8010e58:	f107 0310 	add.w	r3, r7, #16
 8010e5c:	68b9      	ldr	r1, [r7, #8]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fb ff19 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 8010e64:	f107 0310 	add.w	r3, r7, #16
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	68f8      	ldr	r0, [r7, #12]
 8010e6e:	47a0      	blx	r4
 8010e70:	f107 0310 	add.w	r3, r7, #16
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7fc fa72 	bl	800d35e <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 8010e7a:	e014      	b.n	8010ea6 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	3350      	adds	r3, #80	; 0x50
 8010e82:	681c      	ldr	r4, [r3, #0]
 8010e84:	f107 0318 	add.w	r3, r7, #24
 8010e88:	68b9      	ldr	r1, [r7, #8]
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fb ff03 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 8010e90:	f107 0318 	add.w	r3, r7, #24
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	4619      	mov	r1, r3
 8010e98:	68f8      	ldr	r0, [r7, #12]
 8010e9a:	47a0      	blx	r4
 8010e9c:	f107 0318 	add.w	r3, r7, #24
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fc fa5c 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8010ea6:	bf00      	nop
 8010ea8:	3724      	adds	r7, #36	; 0x24
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd90      	pop	{r4, r7, pc}
	...

08010eb0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8010eb0:	b590      	push	{r4, r7, lr}
 8010eb2:	b085      	sub	sp, #20
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	607a      	str	r2, [r7, #4]
    print("\n");
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	332c      	adds	r3, #44	; 0x2c
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4916      	ldr	r1, [pc, #88]	; (8010f20 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	4798      	blx	r3
    print(file.asCharString());
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	332c      	adds	r3, #44	; 0x2c
 8010ed0:	681c      	ldr	r4, [r3, #0]
 8010ed2:	68b8      	ldr	r0, [r7, #8]
 8010ed4:	f7fc fa16 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	4619      	mov	r1, r3
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	47a0      	blx	r4
    print(":");
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	332c      	adds	r3, #44	; 0x2c
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	490e      	ldr	r1, [pc, #56]	; (8010f24 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	4798      	blx	r3
    print(lineNumber);
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	3334      	adds	r3, #52	; 0x34
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	6879      	ldr	r1, [r7, #4]
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	4798      	blx	r3
    print(":");
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	332c      	adds	r3, #44	; 0x2c
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	4907      	ldr	r1, [pc, #28]	; (8010f24 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8010f06:	68f8      	ldr	r0, [r7, #12]
 8010f08:	4798      	blx	r3
    print(" error:");
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	332c      	adds	r3, #44	; 0x2c
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4905      	ldr	r1, [pc, #20]	; (8010f28 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 8010f14:	68f8      	ldr	r0, [r7, #12]
 8010f16:	4798      	blx	r3
}
 8010f18:	bf00      	nop
 8010f1a:	3714      	adds	r7, #20
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd90      	pop	{r4, r7, pc}
 8010f20:	08024dd4 	.word	0x08024dd4
 8010f24:	08024f30 	.word	0x08024f30
 8010f28:	08024f34 	.word	0x08024f34

08010f2c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8010f2c:	b590      	push	{r4, r7, lr}
 8010f2e:	b085      	sub	sp, #20
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	607a      	str	r2, [r7, #4]
    print("\n");
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	332c      	adds	r3, #44	; 0x2c
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4916      	ldr	r1, [pc, #88]	; (8010f9c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	4798      	blx	r3
    print(file.asCharString());
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	332c      	adds	r3, #44	; 0x2c
 8010f4c:	681c      	ldr	r4, [r3, #0]
 8010f4e:	68b8      	ldr	r0, [r7, #8]
 8010f50:	f7fc f9d8 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8010f54:	4603      	mov	r3, r0
 8010f56:	4619      	mov	r1, r3
 8010f58:	68f8      	ldr	r0, [r7, #12]
 8010f5a:	47a0      	blx	r4
    print("(");
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	332c      	adds	r3, #44	; 0x2c
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	490e      	ldr	r1, [pc, #56]	; (8010fa0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 8010f66:	68f8      	ldr	r0, [r7, #12]
 8010f68:	4798      	blx	r3
    print(lineNumber);
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	3334      	adds	r3, #52	; 0x34
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	6879      	ldr	r1, [r7, #4]
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	4798      	blx	r3
    print("):");
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	332c      	adds	r3, #44	; 0x2c
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	4908      	ldr	r1, [pc, #32]	; (8010fa4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 8010f82:	68f8      	ldr	r0, [r7, #12]
 8010f84:	4798      	blx	r3
    print(" error:");
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	332c      	adds	r3, #44	; 0x2c
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	4906      	ldr	r1, [pc, #24]	; (8010fa8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	4798      	blx	r3
}
 8010f94:	bf00      	nop
 8010f96:	3714      	adds	r7, #20
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd90      	pop	{r4, r7, pc}
 8010f9c:	08024dd4 	.word	0x08024dd4
 8010fa0:	08024f3c 	.word	0x08024f3c
 8010fa4:	08024f40 	.word	0x08024f40
 8010fa8:	08024f34 	.word	0x08024f34

08010fac <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	7a1b      	ldrb	r3, [r3, #8]
 8010fba:	2b02      	cmp	r3, #2
 8010fbc:	d106      	bne.n	8010fcc <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	3328      	adds	r3, #40	; 0x28
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	6839      	ldr	r1, [r7, #0]
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	4798      	blx	r3
}
 8010fcc:	bf00      	nop
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
    while (*s) {
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d009      	beq.n	8010ffa <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 8010fe6:	4b0a      	ldr	r3, [pc, #40]	; (8011010 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	683a      	ldr	r2, [r7, #0]
 8010fec:	7812      	ldrb	r2, [r2, #0]
 8010fee:	4610      	mov	r0, r2
 8010ff0:	4798      	blx	r3
        s++;
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	603b      	str	r3, [r7, #0]
    while (*s) {
 8010ff8:	e7f1      	b.n	8010fde <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	334c      	adds	r3, #76	; 0x4c
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	4798      	blx	r3
}
 8011006:	bf00      	nop
 8011008:	3708      	adds	r7, #8
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	200000c0 	.word	0x200000c0

08011014 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 801101c:	4b03      	ldr	r3, [pc, #12]	; (801102c <_ZN17ConsoleTestOutput5flushEv+0x18>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4798      	blx	r3
}
 8011022:	bf00      	nop
 8011024:	3708      	adds	r7, #8
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	200000c4 	.word	0x200000c4

08011030 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	4618      	mov	r0, r3
 801103c:	f7ff fb00 	bl	8010640 <_ZN10TestOutputC1Ev>
 8011040:	4a06      	ldr	r2, [pc, #24]	; (801105c <_ZN19CompositeTestOutputC1Ev+0x2c>)
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	601a      	str	r2, [r3, #0]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2200      	movs	r2, #0
 801104a:	611a      	str	r2, [r3, #16]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2200      	movs	r2, #0
 8011050:	615a      	str	r2, [r3, #20]
{
}
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	4618      	mov	r0, r3
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	08028720 	.word	0x08028720

08011060 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	4a0e      	ldr	r2, [pc, #56]	; (80110a4 <_ZN19CompositeTestOutputD1Ev+0x44>)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	691b      	ldr	r3, [r3, #16]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d004      	beq.n	8011080 <_ZN19CompositeTestOutputD1Ev+0x20>
 8011076:	681a      	ldr	r2, [r3, #0]
 8011078:	3204      	adds	r2, #4
 801107a:	6812      	ldr	r2, [r2, #0]
 801107c:	4618      	mov	r0, r3
 801107e:	4790      	blx	r2
  delete outputTwo_;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	695b      	ldr	r3, [r3, #20]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d004      	beq.n	8011092 <_ZN19CompositeTestOutputD1Ev+0x32>
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	3204      	adds	r2, #4
 801108c:	6812      	ldr	r2, [r2, #0]
 801108e:	4618      	mov	r0, r3
 8011090:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff faf1 	bl	801067c <_ZN10TestOutputD1Ev>
}
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4618      	mov	r0, r3
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	08028720 	.word	0x08028720

080110a8 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
}
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7ff ffd5 	bl	8011060 <_ZN19CompositeTestOutputD1Ev>
 80110b6:	2118      	movs	r1, #24
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7f9 f9e9 	bl	800a490 <_ZdlPvj>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	4618      	mov	r0, r3
 80110c2:	3708      	adds	r7, #8
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	691b      	ldr	r3, [r3, #16]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d004      	beq.n	80110e4 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	3204      	adds	r2, #4
 80110de:	6812      	ldr	r2, [r2, #0]
 80110e0:	4618      	mov	r0, r3
 80110e2:	4790      	blx	r2
  outputOne_ = output;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	683a      	ldr	r2, [r7, #0]
 80110e8:	611a      	str	r2, [r3, #16]
}
 80110ea:	bf00      	nop
 80110ec:	3708      	adds	r7, #8
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}

080110f2 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b082      	sub	sp, #8
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
 80110fa:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	695b      	ldr	r3, [r3, #20]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d004      	beq.n	801110e <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	3204      	adds	r2, #4
 8011108:	6812      	ldr	r2, [r2, #0]
 801110a:	4618      	mov	r0, r3
 801110c:	4790      	blx	r2
  outputTwo_ = output;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	683a      	ldr	r2, [r7, #0]
 8011112:	615a      	str	r2, [r3, #20]
}
 8011114:	bf00      	nop
 8011116:	3708      	adds	r7, #8
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	691b      	ldr	r3, [r3, #16]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d008      	beq.n	801113e <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	691a      	ldr	r2, [r3, #16]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	691b      	ldr	r3, [r3, #16]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	3308      	adds	r3, #8
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	4610      	mov	r0, r2
 801113c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	695b      	ldr	r3, [r3, #20]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d008      	beq.n	8011158 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	695a      	ldr	r2, [r3, #20]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	695b      	ldr	r3, [r3, #20]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	3308      	adds	r3, #8
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	4610      	mov	r0, r2
 8011156:	4798      	blx	r3
}
 8011158:	bf00      	nop
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	691b      	ldr	r3, [r3, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d009      	beq.n	8011186 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	691a      	ldr	r2, [r3, #16]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	691b      	ldr	r3, [r3, #16]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	330c      	adds	r3, #12
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	6839      	ldr	r1, [r7, #0]
 8011182:	4610      	mov	r0, r2
 8011184:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	695b      	ldr	r3, [r3, #20]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d009      	beq.n	80111a2 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	695a      	ldr	r2, [r3, #20]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	695b      	ldr	r3, [r3, #20]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	330c      	adds	r3, #12
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	6839      	ldr	r1, [r7, #0]
 801119e:	4610      	mov	r0, r2
 80111a0:	4798      	blx	r3
}
 80111a2:	bf00      	nop
 80111a4:	3708      	adds	r7, #8
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}

080111aa <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b082      	sub	sp, #8
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	6078      	str	r0, [r7, #4]
 80111b2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	691b      	ldr	r3, [r3, #16]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d009      	beq.n	80111d0 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	691a      	ldr	r2, [r3, #16]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	691b      	ldr	r3, [r3, #16]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	3310      	adds	r3, #16
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	6839      	ldr	r1, [r7, #0]
 80111cc:	4610      	mov	r0, r2
 80111ce:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	695b      	ldr	r3, [r3, #20]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d009      	beq.n	80111ec <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	695a      	ldr	r2, [r3, #20]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	695b      	ldr	r3, [r3, #20]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	3310      	adds	r3, #16
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	6839      	ldr	r1, [r7, #0]
 80111e8:	4610      	mov	r0, r2
 80111ea:	4798      	blx	r3
}
 80111ec:	bf00      	nop
 80111ee:	3708      	adds	r7, #8
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}

080111f4 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	691b      	ldr	r3, [r3, #16]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d009      	beq.n	801121a <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	691a      	ldr	r2, [r3, #16]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	691b      	ldr	r3, [r3, #16]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	3314      	adds	r3, #20
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	6839      	ldr	r1, [r7, #0]
 8011216:	4610      	mov	r0, r2
 8011218:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	695b      	ldr	r3, [r3, #20]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d009      	beq.n	8011236 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	695a      	ldr	r2, [r3, #20]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	695b      	ldr	r3, [r3, #20]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	3314      	adds	r3, #20
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	6839      	ldr	r1, [r7, #0]
 8011232:	4610      	mov	r0, r2
 8011234:	4798      	blx	r3
}
 8011236:	bf00      	nop
 8011238:	3708      	adds	r7, #8
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}

0801123e <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 801123e:	b580      	push	{r7, lr}
 8011240:	b082      	sub	sp, #8
 8011242:	af00      	add	r7, sp, #0
 8011244:	6078      	str	r0, [r7, #4]
 8011246:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	691b      	ldr	r3, [r3, #16]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d009      	beq.n	8011264 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	691a      	ldr	r2, [r3, #16]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	691b      	ldr	r3, [r3, #16]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	3318      	adds	r3, #24
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	6839      	ldr	r1, [r7, #0]
 8011260:	4610      	mov	r0, r2
 8011262:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	695b      	ldr	r3, [r3, #20]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d009      	beq.n	8011280 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	695a      	ldr	r2, [r3, #20]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	695b      	ldr	r3, [r3, #20]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	3318      	adds	r3, #24
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	6839      	ldr	r1, [r7, #0]
 801127c:	4610      	mov	r0, r2
 801127e:	4798      	blx	r3
}
 8011280:	bf00      	nop
 8011282:	3708      	adds	r7, #8
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}

08011288 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	691b      	ldr	r3, [r3, #16]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d009      	beq.n	80112ae <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	691a      	ldr	r2, [r3, #16]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	691b      	ldr	r3, [r3, #16]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	331c      	adds	r3, #28
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	6839      	ldr	r1, [r7, #0]
 80112aa:	4610      	mov	r0, r2
 80112ac:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	695b      	ldr	r3, [r3, #20]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d009      	beq.n	80112ca <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	695a      	ldr	r2, [r3, #20]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	695b      	ldr	r3, [r3, #20]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	331c      	adds	r3, #28
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	6839      	ldr	r1, [r7, #0]
 80112c6:	4610      	mov	r0, r2
 80112c8:	4798      	blx	r3
}
 80112ca:	bf00      	nop
 80112cc:	3708      	adds	r7, #8
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b082      	sub	sp, #8
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
 80112da:	460b      	mov	r3, r1
 80112dc:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	691b      	ldr	r3, [r3, #16]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d009      	beq.n	80112fa <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	691a      	ldr	r2, [r3, #16]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	691b      	ldr	r3, [r3, #16]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	3320      	adds	r3, #32
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	78f9      	ldrb	r1, [r7, #3]
 80112f6:	4610      	mov	r0, r2
 80112f8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	695b      	ldr	r3, [r3, #20]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d009      	beq.n	8011316 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	695a      	ldr	r2, [r3, #20]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	695b      	ldr	r3, [r3, #20]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	3320      	adds	r3, #32
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	78f9      	ldrb	r1, [r7, #3]
 8011312:	4610      	mov	r0, r2
 8011314:	4798      	blx	r3
}
 8011316:	bf00      	nop
 8011318:	3708      	adds	r7, #8
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}

0801131e <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 801131e:	b580      	push	{r7, lr}
 8011320:	b082      	sub	sp, #8
 8011322:	af00      	add	r7, sp, #0
 8011324:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	691b      	ldr	r3, [r3, #16]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d008      	beq.n	8011340 <_ZN19CompositeTestOutput5colorEv+0x22>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	691a      	ldr	r2, [r3, #16]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	691b      	ldr	r3, [r3, #16]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	3324      	adds	r3, #36	; 0x24
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4610      	mov	r0, r2
 801133e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	695b      	ldr	r3, [r3, #20]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d008      	beq.n	801135a <_ZN19CompositeTestOutput5colorEv+0x3c>
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	695a      	ldr	r2, [r3, #20]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	695b      	ldr	r3, [r3, #20]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	3324      	adds	r3, #36	; 0x24
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	4610      	mov	r0, r2
 8011358:	4798      	blx	r3
}
 801135a:	bf00      	nop
 801135c:	3708      	adds	r7, #8
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}

08011362 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 8011362:	b580      	push	{r7, lr}
 8011364:	b082      	sub	sp, #8
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
 801136a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	691b      	ldr	r3, [r3, #16]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d009      	beq.n	8011388 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	691a      	ldr	r2, [r3, #16]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	691b      	ldr	r3, [r3, #16]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	3328      	adds	r3, #40	; 0x28
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	6839      	ldr	r1, [r7, #0]
 8011384:	4610      	mov	r0, r2
 8011386:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	695b      	ldr	r3, [r3, #20]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d009      	beq.n	80113a4 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	695a      	ldr	r2, [r3, #20]
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	695b      	ldr	r3, [r3, #20]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	3328      	adds	r3, #40	; 0x28
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	6839      	ldr	r1, [r7, #0]
 80113a0:	4610      	mov	r0, r2
 80113a2:	4798      	blx	r3
}
 80113a4:	bf00      	nop
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	691b      	ldr	r3, [r3, #16]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d009      	beq.n	80113d2 <_ZN19CompositeTestOutput5printEPKc+0x26>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	691a      	ldr	r2, [r3, #16]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	691b      	ldr	r3, [r3, #16]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	332c      	adds	r3, #44	; 0x2c
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	6839      	ldr	r1, [r7, #0]
 80113ce:	4610      	mov	r0, r2
 80113d0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	695b      	ldr	r3, [r3, #20]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d009      	beq.n	80113ee <_ZN19CompositeTestOutput5printEPKc+0x42>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	695a      	ldr	r2, [r3, #20]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	695b      	ldr	r3, [r3, #20]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	332c      	adds	r3, #44	; 0x2c
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	6839      	ldr	r1, [r7, #0]
 80113ea:	4610      	mov	r0, r2
 80113ec:	4798      	blx	r3
}
 80113ee:	bf00      	nop
 80113f0:	3708      	adds	r7, #8
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}

080113f6 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 80113f6:	b580      	push	{r7, lr}
 80113f8:	b082      	sub	sp, #8
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	691b      	ldr	r3, [r3, #16]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d009      	beq.n	801141c <_ZN19CompositeTestOutput5printEl+0x26>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	691a      	ldr	r2, [r3, #16]
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	691b      	ldr	r3, [r3, #16]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	3330      	adds	r3, #48	; 0x30
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	6839      	ldr	r1, [r7, #0]
 8011418:	4610      	mov	r0, r2
 801141a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	695b      	ldr	r3, [r3, #20]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d009      	beq.n	8011438 <_ZN19CompositeTestOutput5printEl+0x42>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	695a      	ldr	r2, [r3, #20]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	695b      	ldr	r3, [r3, #20]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	3330      	adds	r3, #48	; 0x30
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	6839      	ldr	r1, [r7, #0]
 8011434:	4610      	mov	r0, r2
 8011436:	4798      	blx	r3
}
 8011438:	bf00      	nop
 801143a:	3708      	adds	r7, #8
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	691b      	ldr	r3, [r3, #16]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d009      	beq.n	8011466 <_ZN19CompositeTestOutput5printEj+0x26>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	691a      	ldr	r2, [r3, #16]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	691b      	ldr	r3, [r3, #16]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	3334      	adds	r3, #52	; 0x34
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	6839      	ldr	r1, [r7, #0]
 8011462:	4610      	mov	r0, r2
 8011464:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	695b      	ldr	r3, [r3, #20]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d009      	beq.n	8011482 <_ZN19CompositeTestOutput5printEj+0x42>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	695a      	ldr	r2, [r3, #20]
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	695b      	ldr	r3, [r3, #20]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	3334      	adds	r3, #52	; 0x34
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	6839      	ldr	r1, [r7, #0]
 801147e:	4610      	mov	r0, r2
 8011480:	4798      	blx	r3
}
 8011482:	bf00      	nop
 8011484:	3708      	adds	r7, #8
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b084      	sub	sp, #16
 801148e:	af00      	add	r7, sp, #0
 8011490:	60f8      	str	r0, [r7, #12]
 8011492:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	691b      	ldr	r3, [r3, #16]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d00a      	beq.n	80114b4 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	691a      	ldr	r2, [r3, #16]
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	691b      	ldr	r3, [r3, #16]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	3338      	adds	r3, #56	; 0x38
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	ed97 0b00 	vldr	d0, [r7]
 80114b0:	4610      	mov	r0, r2
 80114b2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	695b      	ldr	r3, [r3, #20]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d00a      	beq.n	80114d2 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	695a      	ldr	r2, [r3, #20]
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	695b      	ldr	r3, [r3, #20]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	3338      	adds	r3, #56	; 0x38
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	ed97 0b00 	vldr	d0, [r7]
 80114ce:	4610      	mov	r0, r2
 80114d0:	4798      	blx	r3
}
 80114d2:	bf00      	nop
 80114d4:	3710      	adds	r7, #16
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}

080114da <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 80114da:	b580      	push	{r7, lr}
 80114dc:	b082      	sub	sp, #8
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
 80114e2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	691b      	ldr	r3, [r3, #16]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d009      	beq.n	8011500 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	691a      	ldr	r2, [r3, #16]
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	691b      	ldr	r3, [r3, #16]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	333c      	adds	r3, #60	; 0x3c
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	6839      	ldr	r1, [r7, #0]
 80114fc:	4610      	mov	r0, r2
 80114fe:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	695b      	ldr	r3, [r3, #20]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d009      	beq.n	801151c <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	695a      	ldr	r2, [r3, #20]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	695b      	ldr	r3, [r3, #20]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	333c      	adds	r3, #60	; 0x3c
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	6839      	ldr	r1, [r7, #0]
 8011518:	4610      	mov	r0, r2
 801151a:	4798      	blx	r3
}
 801151c:	bf00      	nop
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	691b      	ldr	r3, [r3, #16]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d009      	beq.n	801154a <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	691a      	ldr	r2, [r3, #16]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	691b      	ldr	r3, [r3, #16]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	3344      	adds	r3, #68	; 0x44
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	6839      	ldr	r1, [r7, #0]
 8011546:	4610      	mov	r0, r2
 8011548:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	695b      	ldr	r3, [r3, #20]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d009      	beq.n	8011566 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	695a      	ldr	r2, [r3, #20]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	695b      	ldr	r3, [r3, #20]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	3344      	adds	r3, #68	; 0x44
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	6839      	ldr	r1, [r7, #0]
 8011562:	4610      	mov	r0, r2
 8011564:	4798      	blx	r3
}
 8011566:	bf00      	nop
 8011568:	3708      	adds	r7, #8
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 801156e:	b580      	push	{r7, lr}
 8011570:	b082      	sub	sp, #8
 8011572:	af00      	add	r7, sp, #0
 8011574:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	691b      	ldr	r3, [r3, #16]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d008      	beq.n	8011590 <_ZN19CompositeTestOutput5flushEv+0x22>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	691a      	ldr	r2, [r3, #16]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	691b      	ldr	r3, [r3, #16]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	334c      	adds	r3, #76	; 0x4c
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	4610      	mov	r0, r2
 801158e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	695b      	ldr	r3, [r3, #20]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d008      	beq.n	80115aa <_ZN19CompositeTestOutput5flushEv+0x3c>
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	695a      	ldr	r2, [r3, #20]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	695b      	ldr	r3, [r3, #20]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	334c      	adds	r3, #76	; 0x4c
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	4610      	mov	r0, r2
 80115a8:	4798      	blx	r3
}
 80115aa:	bf00      	nop
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 80115b2:	b480      	push	{r7}
 80115b4:	b085      	sub	sp, #20
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	60f8      	str	r0, [r7, #12]
 80115ba:	60b9      	str	r1, [r7, #8]
 80115bc:	607a      	str	r2, [r7, #4]
    }
 80115be:	bf00      	nop
 80115c0:	3714      	adds	r7, #20
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr

080115ca <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 80115ca:	b480      	push	{r7}
 80115cc:	b085      	sub	sp, #20
 80115ce:	af00      	add	r7, sp, #0
 80115d0:	60f8      	str	r0, [r7, #12]
 80115d2:	60b9      	str	r1, [r7, #8]
 80115d4:	607a      	str	r2, [r7, #4]
    }
 80115d6:	bf00      	nop
 80115d8:	3714      	adds	r7, #20
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr
	...

080115e4 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 80115ee:	4a0b      	ldr	r2, [pc, #44]	; (801161c <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	601a      	str	r2, [r3, #0]
 80115f4:	f000 f9ce 	bl	8011994 <_ZN14NullTestPlugin8instanceEv>
 80115f8:	4602      	mov	r2, r0
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	605a      	str	r2, [r3, #4]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	3308      	adds	r3, #8
 8011602:	6839      	ldr	r1, [r7, #0]
 8011604:	4618      	mov	r0, r3
 8011606:	f7fb fb46 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2201      	movs	r2, #1
 801160e:	741a      	strb	r2, [r3, #16]
{
}
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	4618      	mov	r0, r3
 8011614:	3708      	adds	r7, #8
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	080288dc 	.word	0x080288dc

08011620 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 801162a:	4a0a      	ldr	r2, [pc, #40]	; (8011654 <_ZN10TestPluginC1EPS_+0x34>)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	601a      	str	r2, [r3, #0]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	683a      	ldr	r2, [r7, #0]
 8011634:	605a      	str	r2, [r3, #4]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	3308      	adds	r3, #8
 801163a:	4907      	ldr	r1, [pc, #28]	; (8011658 <_ZN10TestPluginC1EPS_+0x38>)
 801163c:	4618      	mov	r0, r3
 801163e:	f7fb fad6 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	741a      	strb	r2, [r3, #16]
{
}
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	4618      	mov	r0, r3
 801164c:	3708      	adds	r7, #8
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	080288dc 	.word	0x080288dc
 8011658:	08024f44 	.word	0x08024f44

0801165c <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	4a06      	ldr	r2, [pc, #24]	; (8011680 <_ZN10TestPluginD1Ev+0x24>)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	601a      	str	r2, [r3, #0]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	3308      	adds	r3, #8
 801166e:	4618      	mov	r0, r3
 8011670:	f7fb fe75 	bl	800d35e <_ZN12SimpleStringD1Ev>
{
}
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	4618      	mov	r0, r3
 8011678:	3708      	adds	r7, #8
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}
 801167e:	bf00      	nop
 8011680:	080288dc 	.word	0x080288dc

08011684 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
}
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7ff ffe5 	bl	801165c <_ZN10TestPluginD1Ev>
 8011692:	2114      	movs	r1, #20
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7f8 fefb 	bl	800a490 <_ZdlPvj>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4618      	mov	r0, r3
 801169e:	3708      	adds	r7, #8
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 80116a4:	b480      	push	{r7}
 80116a6:	b083      	sub	sp, #12
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	683a      	ldr	r2, [r7, #0]
 80116b2:	605a      	str	r2, [r3, #4]
    return this;
 80116b4:	687b      	ldr	r3, [r7, #4]
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	370c      	adds	r7, #12
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr

080116c2 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b084      	sub	sp, #16
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	60f8      	str	r0, [r7, #12]
 80116ca:	60b9      	str	r1, [r7, #8]
 80116cc:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	7c1b      	ldrb	r3, [r3, #16]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d007      	beq.n	80116e6 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	3308      	adds	r3, #8
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	68b9      	ldr	r1, [r7, #8]
 80116e2:	68f8      	ldr	r0, [r7, #12]
 80116e4:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	6858      	ldr	r0, [r3, #4]
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	3314      	adds	r3, #20
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	687a      	ldr	r2, [r7, #4]
 80116f6:	68b9      	ldr	r1, [r7, #8]
 80116f8:	4798      	blx	r3
}
 80116fa:	bf00      	nop
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}

08011702 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 8011702:	b580      	push	{r7, lr}
 8011704:	b084      	sub	sp, #16
 8011706:	af00      	add	r7, sp, #0
 8011708:	60f8      	str	r0, [r7, #12]
 801170a:	60b9      	str	r1, [r7, #8]
 801170c:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	6858      	ldr	r0, [r3, #4]
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	3318      	adds	r3, #24
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	68b9      	ldr	r1, [r7, #8]
 8011720:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	7c1b      	ldrb	r3, [r3, #16]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d007      	beq.n	801173a <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	330c      	adds	r3, #12
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	68b9      	ldr	r1, [r7, #8]
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	4798      	blx	r3
}
 801173a:	bf00      	nop
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}

08011742 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 8011742:	b590      	push	{r4, r7, lr}
 8011744:	b085      	sub	sp, #20
 8011746:	af00      	add	r7, sp, #0
 8011748:	60f8      	str	r0, [r7, #12]
 801174a:	60b9      	str	r1, [r7, #8]
 801174c:	607a      	str	r2, [r7, #4]
 801174e:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	331c      	adds	r3, #28
 8011756:	681c      	ldr	r4, [r3, #0]
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	68b9      	ldr	r1, [r7, #8]
 801175e:	68f8      	ldr	r0, [r7, #12]
 8011760:	47a0      	blx	r4
 8011762:	4603      	mov	r3, r0
}
 8011764:	4618      	mov	r0, r3
 8011766:	3714      	adds	r7, #20
 8011768:	46bd      	mov	sp, r7
 801176a:	bd90      	pop	{r4, r7, pc}

0801176c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 801176c:	b590      	push	{r4, r7, lr}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
 8011778:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	3310      	adds	r3, #16
 8011780:	681c      	ldr	r4, [r3, #0]
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	68b9      	ldr	r1, [r7, #8]
 8011788:	68f8      	ldr	r0, [r7, #12]
 801178a:	47a0      	blx	r4
 801178c:	4603      	mov	r3, r0
 801178e:	2b00      	cmp	r3, #0
 8011790:	d001      	beq.n	8011796 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 8011792:	2301      	movs	r3, #1
 8011794:	e011      	b.n	80117ba <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d00c      	beq.n	80117b8 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	6858      	ldr	r0, [r3, #4]
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	331c      	adds	r3, #28
 80117aa:	681c      	ldr	r4, [r3, #0]
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	68b9      	ldr	r1, [r7, #8]
 80117b2:	47a0      	blx	r4
 80117b4:	4603      	mov	r3, r0
 80117b6:	e000      	b.n	80117ba <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 80117b8:	2300      	movs	r3, #0
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3714      	adds	r7, #20
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd90      	pop	{r4, r7, pc}

080117c2 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 80117c2:	b480      	push	{r7}
 80117c4:	b083      	sub	sp, #12
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
    return name_;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	3308      	adds	r3, #8
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	370c      	adds	r7, #12
 80117d2:	46bd      	mov	sp, r7
 80117d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d8:	4770      	bx	lr

080117da <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 80117da:	b580      	push	{r7, lr}
 80117dc:	b082      	sub	sp, #8
 80117de:	af00      	add	r7, sp, #0
 80117e0:	6078      	str	r0, [r7, #4]
 80117e2:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	3308      	adds	r3, #8
 80117e8:	4619      	mov	r1, r3
 80117ea:	6838      	ldr	r0, [r7, #0]
 80117ec:	f7fb fdc3 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d001      	beq.n	80117fa <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	e00d      	b.n	8011816 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d007      	beq.n	8011812 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	6839      	ldr	r1, [r7, #0]
 8011808:	4618      	mov	r0, r3
 801180a:	f7ff ffe6 	bl	80117da <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 801180e:	4603      	mov	r3, r0
 8011810:	e001      	b.n	8011816 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	685b      	ldr	r3, [r3, #4]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}

0801181e <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 801181e:	b480      	push	{r7}
 8011820:	b083      	sub	sp, #12
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
    return next_;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	685b      	ldr	r3, [r3, #4]
}
 801182a:	4618      	mov	r0, r3
 801182c:	370c      	adds	r7, #12
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr

08011836 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 8011836:	b580      	push	{r7, lr}
 8011838:	b084      	sub	sp, #16
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
 801183e:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8011840:	2300      	movs	r3, #0
 8011842:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00e      	beq.n	801186a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	4618      	mov	r0, r3
 8011852:	f7ff ffb6 	bl	80117c2 <_ZN10TestPlugin7getNameEv>
 8011856:	4603      	mov	r3, r0
 8011858:	6839      	ldr	r1, [r7, #0]
 801185a:	4618      	mov	r0, r3
 801185c:	f7fb fd8b 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d001      	beq.n	801186a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8011866:	2301      	movs	r3, #1
 8011868:	e000      	b.n	801186c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 801186a:	2300      	movs	r3, #0
 801186c:	2b00      	cmp	r3, #0
 801186e:	d007      	beq.n	8011880 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	685a      	ldr	r2, [r3, #4]
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8011880:	68fb      	ldr	r3, [r7, #12]
}
 8011882:	4618      	mov	r0, r3
 8011884:	3710      	adds	r7, #16
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}

0801188a <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 801188a:	b480      	push	{r7}
 801188c:	b083      	sub	sp, #12
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2200      	movs	r2, #0
 8011896:	741a      	strb	r2, [r3, #16]
}
 8011898:	bf00      	nop
 801189a:	370c      	adds	r7, #12
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr

080118a4 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2201      	movs	r2, #1
 80118b0:	741a      	strb	r2, [r3, #16]
}
 80118b2:	bf00      	nop
 80118b4:	370c      	adds	r7, #12
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr

080118be <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 80118be:	b480      	push	{r7}
 80118c0:	b083      	sub	sp, #12
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
    return enabled_;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	7c1b      	ldrb	r3, [r3, #16]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	370c      	adds	r7, #12
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr
	...

080118d8 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6839      	ldr	r1, [r7, #0]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7ff fe7c 	bl	80115e4 <_ZN10TestPluginC1ERK12SimpleString>
 80118ec:	4a05      	ldr	r2, [pc, #20]	; (8011904 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 80118f2:	4b05      	ldr	r3, [pc, #20]	; (8011908 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 80118f4:	2200      	movs	r2, #0
 80118f6:	601a      	str	r2, [r3, #0]
}
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4618      	mov	r0, r3
 80118fc:	3708      	adds	r7, #8
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	08028898 	.word	0x08028898
 8011908:	20000910 	.word	0x20000910

0801190c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 801190c:	b480      	push	{r7}
 801190e:	b087      	sub	sp, #28
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011918:	4b0e      	ldr	r3, [pc, #56]	; (8011954 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	3b01      	subs	r3, #1
 801191e:	617b      	str	r3, [r7, #20]
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	2b00      	cmp	r3, #0
 8011924:	db0d      	blt.n	8011942 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 8011926:	4a0c      	ldr	r2, [pc, #48]	; (8011958 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801192e:	490a      	ldr	r1, [pc, #40]	; (8011958 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	00db      	lsls	r3, r3, #3
 8011934:	440b      	add	r3, r1
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	3b01      	subs	r3, #1
 801193e:	617b      	str	r3, [r7, #20]
 8011940:	e7ee      	b.n	8011920 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 8011942:	4b04      	ldr	r3, [pc, #16]	; (8011954 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8011944:	2200      	movs	r2, #0
 8011946:	601a      	str	r2, [r3, #0]
}
 8011948:	bf00      	nop
 801194a:	371c      	adds	r7, #28
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	20000910 	.word	0x20000910
 8011958:	20000914 	.word	0x20000914

0801195c <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2100      	movs	r1, #0
 8011968:	4618      	mov	r0, r3
 801196a:	f7ff fe59 	bl	8011620 <_ZN10TestPluginC1EPS_>
 801196e:	4a04      	ldr	r2, [pc, #16]	; (8011980 <_ZN14NullTestPluginC1Ev+0x24>)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	601a      	str	r2, [r3, #0]
{
}
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	4618      	mov	r0, r3
 8011978:	3708      	adds	r7, #8
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	08028854 	.word	0x08028854

08011984 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8011984:	b580      	push	{r7, lr}
 8011986:	af00      	add	r7, sp, #0
 8011988:	4801      	ldr	r0, [pc, #4]	; (8011990 <__tcf_0+0xc>)
 801198a:	f000 f849 	bl	8011a20 <_ZN14NullTestPluginD1Ev>
 801198e:	bd80      	pop	{r7, pc}
 8011990:	20000a14 	.word	0x20000a14

08011994 <_ZN14NullTestPlugin8instanceEv>:
{
 8011994:	b580      	push	{r7, lr}
 8011996:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8011998:	4b12      	ldr	r3, [pc, #72]	; (80119e4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801199a:	781b      	ldrb	r3, [r3, #0]
 801199c:	f3bf 8f5b 	dmb	ish
 80119a0:	b2db      	uxtb	r3, r3
 80119a2:	f003 0301 	and.w	r3, r3, #1
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	bf0c      	ite	eq
 80119aa:	2301      	moveq	r3, #1
 80119ac:	2300      	movne	r3, #0
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d013      	beq.n	80119dc <_ZN14NullTestPlugin8instanceEv+0x48>
 80119b4:	480b      	ldr	r0, [pc, #44]	; (80119e4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 80119b6:	f00d ffdb 	bl	801f970 <__cxa_guard_acquire>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	bf14      	ite	ne
 80119c0:	2301      	movne	r3, #1
 80119c2:	2300      	moveq	r3, #0
 80119c4:	b2db      	uxtb	r3, r3
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d008      	beq.n	80119dc <_ZN14NullTestPlugin8instanceEv+0x48>
 80119ca:	4807      	ldr	r0, [pc, #28]	; (80119e8 <_ZN14NullTestPlugin8instanceEv+0x54>)
 80119cc:	f7ff ffc6 	bl	801195c <_ZN14NullTestPluginC1Ev>
 80119d0:	4804      	ldr	r0, [pc, #16]	; (80119e4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 80119d2:	f00d ffd9 	bl	801f988 <__cxa_guard_release>
 80119d6:	4805      	ldr	r0, [pc, #20]	; (80119ec <_ZN14NullTestPlugin8instanceEv+0x58>)
 80119d8:	f00d fffd 	bl	801f9d6 <atexit>
    return &_instance;
 80119dc:	4b02      	ldr	r3, [pc, #8]	; (80119e8 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 80119de:	4618      	mov	r0, r3
 80119e0:	bd80      	pop	{r7, pc}
 80119e2:	bf00      	nop
 80119e4:	20000a28 	.word	0x20000a28
 80119e8:	20000a14 	.word	0x20000a14
 80119ec:	08011985 	.word	0x08011985

080119f0 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 80119f0:	b480      	push	{r7}
 80119f2:	b085      	sub	sp, #20
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	607a      	str	r2, [r7, #4]
}
 80119fc:	bf00      	nop
 80119fe:	3714      	adds	r7, #20
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b085      	sub	sp, #20
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	607a      	str	r2, [r7, #4]
}
 8011a14:	bf00      	nop
 8011a16:	3714      	adds	r7, #20
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	4a05      	ldr	r2, [pc, #20]	; (8011a40 <_ZN14NullTestPluginD1Ev+0x20>)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	601a      	str	r2, [r3, #0]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff fe13 	bl	801165c <_ZN10TestPluginD1Ev>
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3708      	adds	r7, #8
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}
 8011a40:	08028854 	.word	0x08028854

08011a44 <_ZN14NullTestPluginD0Ev>:
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f7ff ffe7 	bl	8011a20 <_ZN14NullTestPluginD1Ev>
 8011a52:	2114      	movs	r1, #20
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f7f8 fd1b 	bl	800a490 <_ZdlPvj>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3708      	adds	r7, #8
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8011a6c:	4a0f      	ldr	r2, [pc, #60]	; (8011aac <_ZN12TestRegistryC1Ev+0x48>)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	601a      	str	r2, [r3, #0]
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2200      	movs	r2, #0
 8011a76:	605a      	str	r2, [r3, #4]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	609a      	str	r2, [r3, #8]
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	60da      	str	r2, [r3, #12]
 8011a84:	f7ff ff86 	bl	8011994 <_ZN14NullTestPlugin8instanceEv>
 8011a88:	4602      	mov	r2, r0
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	611a      	str	r2, [r3, #16]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2200      	movs	r2, #0
 8011a92:	751a      	strb	r2, [r3, #20]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2200      	movs	r2, #0
 8011a98:	619a      	str	r2, [r3, #24]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	771a      	strb	r2, [r3, #28]
{
}
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3708      	adds	r7, #8
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	08028920 	.word	0x08028920

08011ab0 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8011ab0:	b480      	push	{r7}
 8011ab2:	b083      	sub	sp, #12
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	4a04      	ldr	r2, [pc, #16]	; (8011acc <_ZN12TestRegistryD1Ev+0x1c>)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	601a      	str	r2, [r3, #0]
{
}
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	370c      	adds	r7, #12
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr
 8011acc:	08028920 	.word	0x08028920

08011ad0 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
}
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f7ff ffe9 	bl	8011ab0 <_ZN12TestRegistryD1Ev>
 8011ade:	2120      	movs	r1, #32
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7f8 fcd5 	bl	800a490 <_ZdlPvj>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	3708      	adds	r7, #8
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	3308      	adds	r3, #8
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	687a      	ldr	r2, [r7, #4]
 8011b04:	6852      	ldr	r2, [r2, #4]
 8011b06:	4611      	mov	r1, r2
 8011b08:	6838      	ldr	r0, [r7, #0]
 8011b0a:	4798      	blx	r3
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	605a      	str	r2, [r3, #4]
}
 8011b12:	bf00      	nop
 8011b14:	3708      	adds	r7, #8
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8011b1a:	b580      	push	{r7, lr}
 8011b1c:	b084      	sub	sp, #16
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
 8011b22:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 8011b24:	2301      	movs	r3, #1
 8011b26:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	3308      	adds	r3, #8
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	6838      	ldr	r0, [r7, #0]
 8011b32:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	60bb      	str	r3, [r7, #8]
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d05c      	beq.n	8011bfa <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	7d1b      	ldrb	r3, [r3, #20]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d005      	beq.n	8011b54 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	3380      	adds	r3, #128	; 0x80
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	68b8      	ldr	r0, [r7, #8]
 8011b52:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	7f1b      	ldrb	r3, [r3, #28]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d005      	beq.n	8011b68 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	3384      	adds	r3, #132	; 0x84
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	68b8      	ldr	r0, [r7, #8]
 8011b66:	4798      	blx	r3

        if (groupStart) {
 8011b68:	7bfb      	ldrb	r3, [r7, #15]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d008      	beq.n	8011b80 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	3310      	adds	r3, #16
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	68b9      	ldr	r1, [r7, #8]
 8011b78:	6838      	ldr	r0, [r7, #0]
 8011b7a:	4798      	blx	r3
            groupStart = false;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	3320      	adds	r3, #32
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	6838      	ldr	r0, [r7, #0]
 8011b8a:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	68b9      	ldr	r1, [r7, #8]
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f000 fb79 	bl	8012288 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d016      	beq.n	8011bca <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	3318      	adds	r3, #24
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	68b9      	ldr	r1, [r7, #8]
 8011ba6:	6838      	ldr	r0, [r7, #0]
 8011ba8:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	3390      	adds	r3, #144	; 0x90
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	6911      	ldr	r1, [r2, #16]
 8011bb6:	683a      	ldr	r2, [r7, #0]
 8011bb8:	68b8      	ldr	r0, [r7, #8]
 8011bba:	4798      	blx	r3
            result.currentTestEnded(test);
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	331c      	adds	r3, #28
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	68b9      	ldr	r1, [r7, #8]
 8011bc6:	6838      	ldr	r0, [r7, #0]
 8011bc8:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 8011bca:	68b9      	ldr	r1, [r7, #8]
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f000 fa5b 	bl	8012088 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d008      	beq.n	8011bea <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8011bd8:	2301      	movs	r3, #1
 8011bda:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	3314      	adds	r3, #20
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	68b9      	ldr	r1, [r7, #8]
 8011be6:	6838      	ldr	r0, [r7, #0]
 8011be8:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	330c      	adds	r3, #12
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	68b8      	ldr	r0, [r7, #8]
 8011bf4:	4798      	blx	r3
 8011bf6:	60b8      	str	r0, [r7, #8]
 8011bf8:	e79f      	b.n	8011b3a <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	330c      	adds	r3, #12
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	6838      	ldr	r0, [r7, #0]
 8011c04:	4798      	blx	r3
    currentRepetition_++;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	699b      	ldr	r3, [r3, #24]
 8011c0a:	1c5a      	adds	r2, r3, #1
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	619a      	str	r2, [r3, #24]
}
 8011c10:	bf00      	nop
 8011c12:	3710      	adds	r7, #16
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8011c18:	b590      	push	{r4, r7, lr}
 8011c1a:	b08f      	sub	sp, #60	; 0x3c
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 8011c22:	f107 0314 	add.w	r3, r7, #20
 8011c26:	4953      	ldr	r1, [pc, #332]	; (8011d74 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7fa ffe0 	bl	800cbee <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	637b      	str	r3, [r7, #52]	; 0x34
 8011c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d04d      	beq.n	8011cd6 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 8011c3a:	f107 030c 	add.w	r3, r7, #12
 8011c3e:	494d      	ldr	r1, [pc, #308]	; (8011d74 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7fa ffd4 	bl	800cbee <_ZN12SimpleStringC1EPKc>
        gname += "#";
 8011c46:	f107 030c 	add.w	r3, r7, #12
 8011c4a:	494b      	ldr	r1, [pc, #300]	; (8011d78 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7fb fc15 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 8011c52:	f107 031c 	add.w	r3, r7, #28
 8011c56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f001 f9d2 	bl	8013002 <_ZNK10UtestShell8getGroupEv>
 8011c5e:	f107 021c 	add.w	r2, r7, #28
 8011c62:	f107 030c 	add.w	r3, r7, #12
 8011c66:	4611      	mov	r1, r2
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7fb fbf5 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8011c6e:	f107 031c 	add.w	r3, r7, #28
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7fb fb73 	bl	800d35e <_ZN12SimpleStringD1Ev>
        gname += "#";
 8011c78:	f107 030c 	add.w	r3, r7, #12
 8011c7c:	493e      	ldr	r1, [pc, #248]	; (8011d78 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7fb fbfc 	bl	800d47c <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8011c84:	f107 020c 	add.w	r2, r7, #12
 8011c88:	f107 0314 	add.w	r3, r7, #20
 8011c8c:	4611      	mov	r1, r2
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fb f82b 	bl	800ccea <_ZNK12SimpleString8containsERKS_>
 8011c94:	4603      	mov	r3, r0
 8011c96:	f083 0301 	eor.w	r3, r3, #1
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d00d      	beq.n	8011cbc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8011ca0:	f107 020c 	add.w	r2, r7, #12
 8011ca4:	f107 0314 	add.w	r3, r7, #20
 8011ca8:	4611      	mov	r1, r2
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7fb fbd4 	bl	800d458 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8011cb0:	f107 0314 	add.w	r3, r7, #20
 8011cb4:	4931      	ldr	r1, [pc, #196]	; (8011d7c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fb fbe0 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8011cbc:	f107 030c 	add.w	r3, r7, #12
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7fb fb4c 	bl	800d35e <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	330c      	adds	r3, #12
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011cd0:	4798      	blx	r3
 8011cd2:	6378      	str	r0, [r7, #52]	; 0x34
 8011cd4:	e7ae      	b.n	8011c34 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 8011cd6:	f107 0314 	add.w	r3, r7, #20
 8011cda:	4a26      	ldr	r2, [pc, #152]	; (8011d74 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011cdc:	4926      	ldr	r1, [pc, #152]	; (8011d78 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fb f99a 	bl	800d018 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8011ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ce8:	4924      	ldr	r1, [pc, #144]	; (8011d7c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fa ff7f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8011cf0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011cf4:	f107 0314 	add.w	r3, r7, #20
 8011cf8:	4611      	mov	r1, r2
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7fb f874 	bl	800cde8 <_ZNK12SimpleString8endsWithERKS_>
 8011d00:	4603      	mov	r3, r0
 8011d02:	461c      	mov	r4, r3
 8011d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7fb fb28 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8011d0e:	2c00      	cmp	r4, #0
 8011d10:	d01a      	beq.n	8011d48 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 8011d12:	f107 0314 	add.w	r3, r7, #20
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7fb fb00 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	3b01      	subs	r3, #1
 8011d20:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8011d24:	f107 0114 	add.w	r1, r7, #20
 8011d28:	2200      	movs	r2, #0
 8011d2a:	f7fb fc21 	bl	800d570 <_ZNK12SimpleString9subStringEjj>
 8011d2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011d32:	f107 0314 	add.w	r3, r7, #20
 8011d36:	4611      	mov	r1, r2
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7fa ffc4 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 8011d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fb fb0b 	bl	800d35e <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	3338      	adds	r3, #56	; 0x38
 8011d4e:	681c      	ldr	r4, [r3, #0]
 8011d50:	f107 0314 	add.w	r3, r7, #20
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fb fad5 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	4619      	mov	r1, r3
 8011d5e:	6838      	ldr	r0, [r7, #0]
 8011d60:	47a0      	blx	r4
    SimpleString groupList;
 8011d62:	f107 0314 	add.w	r3, r7, #20
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fb faf9 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8011d6c:	bf00      	nop
 8011d6e:	373c      	adds	r7, #60	; 0x3c
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd90      	pop	{r4, r7, pc}
 8011d74:	08024f94 	.word	0x08024f94
 8011d78:	08024f98 	.word	0x08024f98
 8011d7c:	08024f9c 	.word	0x08024f9c

08011d80 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8011d80:	b590      	push	{r4, r7, lr}
 8011d82:	b091      	sub	sp, #68	; 0x44
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 8011d8a:	f107 0314 	add.w	r3, r7, #20
 8011d8e:	4964      	ldr	r1, [pc, #400]	; (8011f20 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fa ff2c 	bl	800cbee <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d06e      	beq.n	8011e80 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 8011da2:	683a      	ldr	r2, [r7, #0]
 8011da4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f000 fa6e 	bl	8012288 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8011dac:	4603      	mov	r3, r0
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d05e      	beq.n	8011e70 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 8011db2:	f107 030c 	add.w	r3, r7, #12
 8011db6:	495a      	ldr	r1, [pc, #360]	; (8011f20 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7fa ff18 	bl	800cbee <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 8011dbe:	f107 030c 	add.w	r3, r7, #12
 8011dc2:	4958      	ldr	r1, [pc, #352]	; (8011f24 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7fb fb59 	bl	800d47c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 8011dca:	f107 031c 	add.w	r3, r7, #28
 8011dce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f001 f916 	bl	8013002 <_ZNK10UtestShell8getGroupEv>
 8011dd6:	f107 021c 	add.w	r2, r7, #28
 8011dda:	f107 030c 	add.w	r3, r7, #12
 8011dde:	4611      	mov	r1, r2
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7fb fb39 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8011de6:	f107 031c 	add.w	r3, r7, #28
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7fb fab7 	bl	800d35e <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8011df0:	f107 030c 	add.w	r3, r7, #12
 8011df4:	494c      	ldr	r1, [pc, #304]	; (8011f28 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fb fb40 	bl	800d47c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 8011dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e02:	4618      	mov	r0, r3
 8011e04:	f001 f8ee 	bl	8012fe4 <_ZNK10UtestShell7getNameEv>
 8011e08:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e0c:	f107 030c 	add.w	r3, r7, #12
 8011e10:	4611      	mov	r1, r2
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7fb fb20 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8011e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fb fa9e 	bl	800d35e <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 8011e22:	f107 030c 	add.w	r3, r7, #12
 8011e26:	493f      	ldr	r1, [pc, #252]	; (8011f24 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7fb fb27 	bl	800d47c <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 8011e2e:	f107 020c 	add.w	r2, r7, #12
 8011e32:	f107 0314 	add.w	r3, r7, #20
 8011e36:	4611      	mov	r1, r2
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7fa ff56 	bl	800ccea <_ZNK12SimpleString8containsERKS_>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	f083 0301 	eor.w	r3, r3, #1
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d00d      	beq.n	8011e66 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8011e4a:	f107 020c 	add.w	r2, r7, #12
 8011e4e:	f107 0314 	add.w	r3, r7, #20
 8011e52:	4611      	mov	r1, r2
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7fb faff 	bl	800d458 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8011e5a:	f107 0314 	add.w	r3, r7, #20
 8011e5e:	4933      	ldr	r1, [pc, #204]	; (8011f2c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7fb fb0b 	bl	800d47c <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8011e66:	f107 030c 	add.w	r3, r7, #12
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7fb fa77 	bl	800d35e <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	330c      	adds	r3, #12
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011e7a:	4798      	blx	r3
 8011e7c:	63f8      	str	r0, [r7, #60]	; 0x3c
 8011e7e:	e78d      	b.n	8011d9c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8011e80:	f107 0314 	add.w	r3, r7, #20
 8011e84:	4a26      	ldr	r2, [pc, #152]	; (8011f20 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8011e86:	4927      	ldr	r1, [pc, #156]	; (8011f24 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fb f8c5 	bl	800d018 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 8011e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011e92:	4926      	ldr	r1, [pc, #152]	; (8011f2c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7fa feaa 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8011e9a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011e9e:	f107 0314 	add.w	r3, r7, #20
 8011ea2:	4611      	mov	r1, r2
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7fa ff9f 	bl	800cde8 <_ZNK12SimpleString8endsWithERKS_>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	461c      	mov	r4, r3
 8011eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7fb fa53 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8011eb8:	2c00      	cmp	r4, #0
 8011eba:	d01a      	beq.n	8011ef2 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8011ebc:	f107 0314 	add.w	r3, r7, #20
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7fb fa2b 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	3b01      	subs	r3, #1
 8011eca:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8011ece:	f107 0114 	add.w	r1, r7, #20
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	f7fb fb4c 	bl	800d570 <_ZNK12SimpleString9subStringEjj>
 8011ed8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011edc:	f107 0314 	add.w	r3, r7, #20
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fa feef 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 8011ee8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011eec:	4618      	mov	r0, r3
 8011eee:	f7fb fa36 	bl	800d35e <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	3338      	adds	r3, #56	; 0x38
 8011ef8:	681c      	ldr	r4, [r3, #0]
 8011efa:	f107 0314 	add.w	r3, r7, #20
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fb fa00 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8011f04:	4603      	mov	r3, r0
 8011f06:	4619      	mov	r1, r3
 8011f08:	6838      	ldr	r0, [r7, #0]
 8011f0a:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8011f0c:	f107 0314 	add.w	r3, r7, #20
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fb fa24 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8011f16:	bf00      	nop
 8011f18:	3744      	adds	r7, #68	; 0x44
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd90      	pop	{r4, r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	08024f94 	.word	0x08024f94
 8011f24:	08024f98 	.word	0x08024f98
 8011f28:	08024fa0 	.word	0x08024fa0
 8011f2c:	08024f9c 	.word	0x08024f9c

08011f30 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 8011f30:	b590      	push	{r4, r7, lr}
 8011f32:	b091      	sub	sp, #68	; 0x44
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 8011f3a:	f107 0314 	add.w	r3, r7, #20
 8011f3e:	494f      	ldr	r1, [pc, #316]	; (801207c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7fa fe54 	bl	800cbee <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d07d      	beq.n	801204e <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 8011f52:	f107 030c 	add.w	r3, r7, #12
 8011f56:	4949      	ldr	r1, [pc, #292]	; (801207c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7fa fe48 	bl	800cbee <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 8011f5e:	f107 031c 	add.w	r3, r7, #28
 8011f62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f64:	4618      	mov	r0, r3
 8011f66:	f001 f84c 	bl	8013002 <_ZNK10UtestShell8getGroupEv>
 8011f6a:	f107 021c 	add.w	r2, r7, #28
 8011f6e:	f107 030c 	add.w	r3, r7, #12
 8011f72:	4611      	mov	r1, r2
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7fb fa6f 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8011f7a:	f107 031c 	add.w	r3, r7, #28
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fb f9ed 	bl	800d35e <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8011f84:	f107 030c 	add.w	r3, r7, #12
 8011f88:	493d      	ldr	r1, [pc, #244]	; (8012080 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7fb fa76 	bl	800d47c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8011f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f96:	4618      	mov	r0, r3
 8011f98:	f001 f824 	bl	8012fe4 <_ZNK10UtestShell7getNameEv>
 8011f9c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011fa0:	f107 030c 	add.w	r3, r7, #12
 8011fa4:	4611      	mov	r1, r2
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7fb fa56 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8011fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7fb f9d4 	bl	800d35e <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8011fb6:	f107 030c 	add.w	r3, r7, #12
 8011fba:	4931      	ldr	r1, [pc, #196]	; (8012080 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7fb fa5d 	bl	800d47c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 8011fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011fc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f001 f8dc 	bl	8013186 <_ZNK10UtestShell7getFileEv>
 8011fce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011fd2:	f107 030c 	add.w	r3, r7, #12
 8011fd6:	4611      	mov	r1, r2
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7fb fa3d 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8011fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7fb f9bb 	bl	800d35e <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8011fe8:	f107 030c 	add.w	r3, r7, #12
 8011fec:	4924      	ldr	r1, [pc, #144]	; (8012080 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7fb fa44 	bl	800d47c <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8011ff4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ff6:	f001 f8d5 	bl	80131a4 <_ZNK10UtestShell13getLineNumberEv>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012002:	4920      	ldr	r1, [pc, #128]	; (8012084 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8012004:	4618      	mov	r0, r3
 8012006:	f7fb feb1 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801200a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801200e:	f107 030c 	add.w	r3, r7, #12
 8012012:	4611      	mov	r1, r2
 8012014:	4618      	mov	r0, r3
 8012016:	f7fb fa1f 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801201a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801201e:	4618      	mov	r0, r3
 8012020:	f7fb f99d 	bl	800d35e <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 8012024:	f107 020c 	add.w	r2, r7, #12
 8012028:	f107 0314 	add.w	r3, r7, #20
 801202c:	4611      	mov	r1, r2
 801202e:	4618      	mov	r0, r3
 8012030:	f7fb fa12 	bl	800d458 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 8012034:	f107 030c 	add.w	r3, r7, #12
 8012038:	4618      	mov	r0, r3
 801203a:	f7fb f990 	bl	800d35e <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801203e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	330c      	adds	r3, #12
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012048:	4798      	blx	r3
 801204a:	63f8      	str	r0, [r7, #60]	; 0x3c
 801204c:	e77e      	b.n	8011f4c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	3338      	adds	r3, #56	; 0x38
 8012054:	681c      	ldr	r4, [r3, #0]
 8012056:	f107 0314 	add.w	r3, r7, #20
 801205a:	4618      	mov	r0, r3
 801205c:	f7fb f952 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8012060:	4603      	mov	r3, r0
 8012062:	4619      	mov	r1, r3
 8012064:	6838      	ldr	r0, [r7, #0]
 8012066:	47a0      	blx	r4
    SimpleString testLocations;
 8012068:	f107 0314 	add.w	r3, r7, #20
 801206c:	4618      	mov	r0, r3
 801206e:	f7fb f976 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8012072:	bf00      	nop
 8012074:	3744      	adds	r7, #68	; 0x44
 8012076:	46bd      	mov	sp, r7
 8012078:	bd90      	pop	{r4, r7, pc}
 801207a:	bf00      	nop
 801207c:	08024f94 	.word	0x08024f94
 8012080:	08024fa0 	.word	0x08024fa0
 8012084:	08024fa4 	.word	0x08024fa4

08012088 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8012088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801208a:	b087      	sub	sp, #28
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 8012092:	2400      	movs	r4, #0
 8012094:	2500      	movs	r5, #0
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d028      	beq.n	80120ee <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	330c      	adds	r3, #12
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	6838      	ldr	r0, [r7, #0]
 80120a6:	4798      	blx	r3
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d01f      	beq.n	80120ee <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80120ae:	f107 0308 	add.w	r3, r7, #8
 80120b2:	6839      	ldr	r1, [r7, #0]
 80120b4:	4618      	mov	r0, r3
 80120b6:	f000 ffa4 	bl	8013002 <_ZNK10UtestShell8getGroupEv>
 80120ba:	2401      	movs	r4, #1
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	330c      	adds	r3, #12
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	6838      	ldr	r0, [r7, #0]
 80120c6:	4798      	blx	r3
 80120c8:	4602      	mov	r2, r0
 80120ca:	f107 0310 	add.w	r3, r7, #16
 80120ce:	4611      	mov	r1, r2
 80120d0:	4618      	mov	r0, r3
 80120d2:	f000 ff96 	bl	8013002 <_ZNK10UtestShell8getGroupEv>
 80120d6:	2501      	movs	r5, #1
 80120d8:	f107 0210 	add.w	r2, r7, #16
 80120dc:	f107 0308 	add.w	r3, r7, #8
 80120e0:	4611      	mov	r1, r2
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7fb f98c 	bl	800d400 <_ZneRK12SimpleStringS1_>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d001      	beq.n	80120f2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 80120ee:	2601      	movs	r6, #1
 80120f0:	e000      	b.n	80120f4 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 80120f2:	2600      	movs	r6, #0
 80120f4:	2d00      	cmp	r5, #0
 80120f6:	d004      	beq.n	8012102 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 80120f8:	f107 0310 	add.w	r3, r7, #16
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fb f92e 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8012102:	2c00      	cmp	r4, #0
 8012104:	d004      	beq.n	8012110 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8012106:	f107 0308 	add.w	r3, r7, #8
 801210a:	4618      	mov	r0, r3
 801210c:	f7fb f927 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8012110:	4633      	mov	r3, r6
}
 8012112:	4618      	mov	r0, r3
 8012114:	371c      	adds	r7, #28
 8012116:	46bd      	mov	sp, r7
 8012118:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801211a <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 801211a:	b580      	push	{r7, lr}
 801211c:	b082      	sub	sp, #8
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d00a      	beq.n	8012140 <_ZN12TestRegistry10countTestsEv+0x26>
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	685a      	ldr	r2, [r3, #4]
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	3310      	adds	r3, #16
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	4610      	mov	r0, r2
 801213a:	4798      	blx	r3
 801213c:	4603      	mov	r3, r0
 801213e:	e000      	b.n	8012142 <_ZN12TestRegistry10countTestsEv+0x28>
 8012140:	2300      	movs	r3, #0
}
 8012142:	4618      	mov	r0, r3
 8012144:	3708      	adds	r7, #8
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
	...

0801214c <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 801214c:	b580      	push	{r7, lr}
 801214e:	af00      	add	r7, sp, #0
 8012150:	4801      	ldr	r0, [pc, #4]	; (8012158 <__tcf_0+0xc>)
 8012152:	f7ff fcad 	bl	8011ab0 <_ZN12TestRegistryD1Ev>
 8012156:	bd80      	pop	{r7, pc}
 8012158:	20000a30 	.word	0x20000a30

0801215c <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 801215c:	b580      	push	{r7, lr}
 801215e:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8012160:	4b15      	ldr	r3, [pc, #84]	; (80121b8 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	f3bf 8f5b 	dmb	ish
 8012168:	b2db      	uxtb	r3, r3
 801216a:	f003 0301 	and.w	r3, r3, #1
 801216e:	2b00      	cmp	r3, #0
 8012170:	bf0c      	ite	eq
 8012172:	2301      	moveq	r3, #1
 8012174:	2300      	movne	r3, #0
 8012176:	b2db      	uxtb	r3, r3
 8012178:	2b00      	cmp	r3, #0
 801217a:	d013      	beq.n	80121a4 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 801217c:	480e      	ldr	r0, [pc, #56]	; (80121b8 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801217e:	f00d fbf7 	bl	801f970 <__cxa_guard_acquire>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	bf14      	ite	ne
 8012188:	2301      	movne	r3, #1
 801218a:	2300      	moveq	r3, #0
 801218c:	b2db      	uxtb	r3, r3
 801218e:	2b00      	cmp	r3, #0
 8012190:	d008      	beq.n	80121a4 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8012192:	480a      	ldr	r0, [pc, #40]	; (80121bc <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8012194:	f7ff fc66 	bl	8011a64 <_ZN12TestRegistryC1Ev>
 8012198:	4807      	ldr	r0, [pc, #28]	; (80121b8 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801219a:	f00d fbf5 	bl	801f988 <__cxa_guard_release>
 801219e:	4808      	ldr	r0, [pc, #32]	; (80121c0 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 80121a0:	f00d fc19 	bl	801f9d6 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 80121a4:	4b07      	ldr	r3, [pc, #28]	; (80121c4 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d002      	beq.n	80121b2 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 80121ac:	4b05      	ldr	r3, [pc, #20]	; (80121c4 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	e000      	b.n	80121b4 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 80121b2:	4b02      	ldr	r3, [pc, #8]	; (80121bc <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	20000a50 	.word	0x20000a50
 80121bc:	20000a30 	.word	0x20000a30
 80121c0:	0801214d 	.word	0x0801214d
 80121c4:	20000a2c 	.word	0x20000a2c

080121c8 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b083      	sub	sp, #12
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 80121d2:	4a04      	ldr	r2, [pc, #16]	; (80121e4 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	6013      	str	r3, [r2, #0]
}
 80121d8:	bf00      	nop
 80121da:	370c      	adds	r7, #12
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr
 80121e4:	20000a2c 	.word	0x20000a2c

080121e8 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d00a      	beq.n	801220e <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	685a      	ldr	r2, [r3, #4]
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	330c      	adds	r3, #12
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	4610      	mov	r0, r2
 8012208:	4798      	blx	r3
 801220a:	4603      	mov	r3, r0
 801220c:	e000      	b.n	8012210 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 801220e:	2300      	movs	r3, #0
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	6053      	str	r3, [r2, #4]

}
 8012214:	bf00      	nop
 8012216:	3708      	adds	r7, #8
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	683a      	ldr	r2, [r7, #0]
 801222a:	609a      	str	r2, [r3, #8]
}
 801222c:	bf00      	nop
 801222e:	370c      	adds	r7, #12
 8012230:	46bd      	mov	sp, r7
 8012232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012236:	4770      	bx	lr

08012238 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8012238:	b480      	push	{r7}
 801223a:	b083      	sub	sp, #12
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	683a      	ldr	r2, [r7, #0]
 8012246:	60da      	str	r2, [r3, #12]
}
 8012248:	bf00      	nop
 801224a:	370c      	adds	r7, #12
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8012254:	b480      	push	{r7}
 8012256:	b083      	sub	sp, #12
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2201      	movs	r2, #1
 8012260:	771a      	strb	r2, [r3, #28]
}
 8012262:	bf00      	nop
 8012264:	370c      	adds	r7, #12
 8012266:	46bd      	mov	sp, r7
 8012268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226c:	4770      	bx	lr

0801226e <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 801226e:	b480      	push	{r7}
 8012270:	b083      	sub	sp, #12
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2201      	movs	r2, #1
 801227a:	751a      	strb	r2, [r3, #20]
}
 801227c:	bf00      	nop
 801227e:	370c      	adds	r7, #12
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr

08012288 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	68d9      	ldr	r1, [r3, #12]
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	689b      	ldr	r3, [r3, #8]
 801229c:	461a      	mov	r2, r3
 801229e:	68b8      	ldr	r0, [r7, #8]
 80122a0:	f000 ffbb 	bl	801321a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 80122a4:	4603      	mov	r3, r0
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d001      	beq.n	80122ae <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 80122aa:	2301      	movs	r3, #1
 80122ac:	e006      	b.n	80122bc <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	332c      	adds	r3, #44	; 0x2c
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	4798      	blx	r3
        return false;
 80122ba:	2300      	movs	r3, #0
    }
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3710      	adds	r7, #16
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 80122cc:	f7ff fb62 	bl	8011994 <_ZN14NullTestPlugin8instanceEv>
 80122d0:	4602      	mov	r2, r0
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	611a      	str	r2, [r3, #16]
}
 80122d6:	bf00      	nop
 80122d8:	3708      	adds	r7, #8
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 80122de:	b580      	push	{r7, lr}
 80122e0:	b082      	sub	sp, #8
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
 80122e6:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	3324      	adds	r3, #36	; 0x24
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	6912      	ldr	r2, [r2, #16]
 80122f4:	4611      	mov	r1, r2
 80122f6:	6838      	ldr	r0, [r7, #0]
 80122f8:	4798      	blx	r3
 80122fa:	4602      	mov	r2, r0
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	611a      	str	r2, [r3, #16]
}
 8012300:	bf00      	nop
 8012302:	3708      	adds	r7, #8
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8012308:	b480      	push	{r7}
 801230a:	b083      	sub	sp, #12
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	691b      	ldr	r3, [r3, #16]
}
 8012314:	4618      	mov	r0, r3
 8012316:	370c      	adds	r7, #12
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr

08012320 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	691b      	ldr	r3, [r3, #16]
 801232e:	6839      	ldr	r1, [r7, #0]
 8012330:	4618      	mov	r0, r3
 8012332:	f7ff fa52 	bl	80117da <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8012336:	4603      	mov	r3, r0
}
 8012338:	4618      	mov	r0, r3
 801233a:	3708      	adds	r7, #8
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b082      	sub	sp, #8
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	691a      	ldr	r2, [r3, #16]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	691b      	ldr	r3, [r3, #16]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	3328      	adds	r3, #40	; 0x28
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	6839      	ldr	r1, [r7, #0]
 801235a:	4610      	mov	r0, r2
 801235c:	4798      	blx	r3
 801235e:	4602      	mov	r2, r0
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	691b      	ldr	r3, [r3, #16]
 8012364:	429a      	cmp	r2, r3
 8012366:	bf0c      	ite	eq
 8012368:	2301      	moveq	r3, #1
 801236a:	2300      	movne	r3, #0
 801236c:	b2db      	uxtb	r3, r3
 801236e:	2b00      	cmp	r3, #0
 8012370:	d00b      	beq.n	801238a <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	691a      	ldr	r2, [r3, #16]
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	691b      	ldr	r3, [r3, #16]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	332c      	adds	r3, #44	; 0x2c
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4610      	mov	r0, r2
 8012382:	4798      	blx	r3
 8012384:	4602      	mov	r2, r0
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	691b      	ldr	r3, [r3, #16]
 801238e:	4618      	mov	r0, r3
 8012390:	f7ff fa17 	bl	80117c2 <_ZN10TestPlugin7getNameEv>
 8012394:	4603      	mov	r3, r0
 8012396:	6839      	ldr	r1, [r7, #0]
 8012398:	4618      	mov	r0, r3
 801239a:	f7fa ffec 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d00b      	beq.n	80123bc <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	691a      	ldr	r2, [r3, #16]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	691b      	ldr	r3, [r3, #16]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	332c      	adds	r3, #44	; 0x2c
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	4610      	mov	r0, r2
 80123b4:	4798      	blx	r3
 80123b6:	4602      	mov	r2, r0
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	691a      	ldr	r2, [r3, #16]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	691b      	ldr	r3, [r3, #16]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	3328      	adds	r3, #40	; 0x28
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	6839      	ldr	r1, [r7, #0]
 80123cc:	4610      	mov	r0, r2
 80123ce:	4798      	blx	r3
}
 80123d0:	bf00      	nop
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
    int count = 0;
 80123e0:	2300      	movs	r3, #0
 80123e2:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	691b      	ldr	r3, [r3, #16]
 80123e8:	60bb      	str	r3, [r7, #8]
 80123ea:	f7ff fad3 	bl	8011994 <_ZN14NullTestPlugin8instanceEv>
 80123ee:	4602      	mov	r2, r0
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	4293      	cmp	r3, r2
 80123f4:	bf14      	ite	ne
 80123f6:	2301      	movne	r3, #1
 80123f8:	2300      	moveq	r3, #0
 80123fa:	b2db      	uxtb	r3, r3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d00a      	beq.n	8012416 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	3301      	adds	r3, #1
 8012404:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	332c      	adds	r3, #44	; 0x2c
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	68b8      	ldr	r0, [r7, #8]
 8012410:	4798      	blx	r3
 8012412:	60b8      	str	r0, [r7, #8]
 8012414:	e7e9      	b.n	80123ea <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8012416:	68fb      	ldr	r3, [r7, #12]
}
 8012418:	4618      	mov	r0, r3
 801241a:	3710      	adds	r7, #16
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}

08012420 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8012420:	b480      	push	{r7}
 8012422:	b083      	sub	sp, #12
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
    return tests_;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	685b      	ldr	r3, [r3, #4]
}
 801242c:	4618      	mov	r0, r3
 801242e:	370c      	adds	r7, #12
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr

08012438 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b084      	sub	sp, #16
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	334c      	adds	r3, #76	; 0x4c
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	4798      	blx	r3
 801244e:	4602      	mov	r2, r0
 8012450:	f107 0308 	add.w	r3, r7, #8
 8012454:	4611      	mov	r1, r2
 8012456:	4618      	mov	r0, r3
 8012458:	f002 f8f8 	bl	801464c <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 801245c:	f107 0308 	add.w	r3, r7, #8
 8012460:	6839      	ldr	r1, [r7, #0]
 8012462:	4618      	mov	r0, r3
 8012464:	f002 f980 	bl	8014768 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8012468:	f107 0308 	add.w	r3, r7, #8
 801246c:	4618      	mov	r0, r3
 801246e:	f002 fa13 	bl	8014898 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8012472:	4602      	mov	r2, r0
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8012478:	f107 0308 	add.w	r3, r7, #8
 801247c:	4618      	mov	r0, r3
 801247e:	f002 f939 	bl	80146f4 <_ZN22UtestShellPointerArrayD1Ev>
}
 8012482:	bf00      	nop
 8012484:	3710      	adds	r7, #16
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b084      	sub	sp, #16
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	334c      	adds	r3, #76	; 0x4c
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	4798      	blx	r3
 801249e:	4602      	mov	r2, r0
 80124a0:	f107 0308 	add.w	r3, r7, #8
 80124a4:	4611      	mov	r1, r2
 80124a6:	4618      	mov	r0, r3
 80124a8:	f002 f8d0 	bl	801464c <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 80124ac:	f107 0308 	add.w	r3, r7, #8
 80124b0:	4618      	mov	r0, r3
 80124b2:	f002 f995 	bl	80147e0 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 80124b6:	f107 0308 	add.w	r3, r7, #8
 80124ba:	4618      	mov	r0, r3
 80124bc:	f002 f9ec 	bl	8014898 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 80124c0:	4602      	mov	r2, r0
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 80124c6:	f107 0308 	add.w	r3, r7, #8
 80124ca:	4618      	mov	r0, r3
 80124cc:	f002 f912 	bl	80146f4 <_ZN22UtestShellPointerArrayD1Ev>
}
 80124d0:	bf00      	nop
 80124d2:	3710      	adds	r7, #16
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	685b      	ldr	r3, [r3, #4]
 80124e6:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d00b      	beq.n	8012506 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	330c      	adds	r3, #12
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	68f8      	ldr	r0, [r7, #12]
 80124f8:	4798      	blx	r3
 80124fa:	4602      	mov	r2, r0
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	4293      	cmp	r3, r2
 8012500:	d001      	beq.n	8012506 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8012502:	2301      	movs	r3, #1
 8012504:	e000      	b.n	8012508 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8012506:	2300      	movs	r3, #0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d007      	beq.n	801251c <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	330c      	adds	r3, #12
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	68f8      	ldr	r0, [r7, #12]
 8012516:	4798      	blx	r3
 8012518:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 801251a:	e7e5      	b.n	80124e8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 801251c:	68fb      	ldr	r3, [r7, #12]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}

08012526 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 8012526:	b590      	push	{r4, r7, lr}
 8012528:	b087      	sub	sp, #28
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
 801252e:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	617b      	str	r3, [r7, #20]
    while (current) {
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d01e      	beq.n	801257a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 801253c:	f107 030c 	add.w	r3, r7, #12
 8012540:	6979      	ldr	r1, [r7, #20]
 8012542:	4618      	mov	r0, r3
 8012544:	f000 fd4e 	bl	8012fe4 <_ZNK10UtestShell7getNameEv>
 8012548:	f107 030c 	add.w	r3, r7, #12
 801254c:	6839      	ldr	r1, [r7, #0]
 801254e:	4618      	mov	r0, r3
 8012550:	f7fa ff11 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8012554:	4603      	mov	r3, r0
 8012556:	461c      	mov	r4, r3
 8012558:	f107 030c 	add.w	r3, r7, #12
 801255c:	4618      	mov	r0, r3
 801255e:	f7fa fefe 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8012562:	2c00      	cmp	r4, #0
 8012564:	d001      	beq.n	801256a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	e008      	b.n	801257c <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	330c      	adds	r3, #12
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	6978      	ldr	r0, [r7, #20]
 8012574:	4798      	blx	r3
 8012576:	6178      	str	r0, [r7, #20]
    while (current) {
 8012578:	e7dd      	b.n	8012536 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 801257a:	2300      	movs	r3, #0
}
 801257c:	4618      	mov	r0, r3
 801257e:	371c      	adds	r7, #28
 8012580:	46bd      	mov	sp, r7
 8012582:	bd90      	pop	{r4, r7, pc}

08012584 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8012584:	b590      	push	{r4, r7, lr}
 8012586:	b087      	sub	sp, #28
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	617b      	str	r3, [r7, #20]
    while (current) {
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d01e      	beq.n	80125d8 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 801259a:	f107 030c 	add.w	r3, r7, #12
 801259e:	6979      	ldr	r1, [r7, #20]
 80125a0:	4618      	mov	r0, r3
 80125a2:	f000 fd2e 	bl	8013002 <_ZNK10UtestShell8getGroupEv>
 80125a6:	f107 030c 	add.w	r3, r7, #12
 80125aa:	6839      	ldr	r1, [r7, #0]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7fa fee2 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 80125b2:	4603      	mov	r3, r0
 80125b4:	461c      	mov	r4, r3
 80125b6:	f107 030c 	add.w	r3, r7, #12
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7fa fecf 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80125c0:	2c00      	cmp	r4, #0
 80125c2:	d001      	beq.n	80125c8 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	e008      	b.n	80125da <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	330c      	adds	r3, #12
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	6978      	ldr	r0, [r7, #20]
 80125d2:	4798      	blx	r3
 80125d4:	6178      	str	r0, [r7, #20]
    while (current) {
 80125d6:	e7dd      	b.n	8012594 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 80125d8:	2300      	movs	r3, #0
}
 80125da:	4618      	mov	r0, r3
 80125dc:	371c      	adds	r7, #28
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd90      	pop	{r4, r7, pc}
	...

080125e4 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 80125ee:	4a18      	ldr	r2, [pc, #96]	; (8012650 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	601a      	str	r2, [r3, #0]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	683a      	ldr	r2, [r7, #0]
 80125f8:	605a      	str	r2, [r3, #4]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2200      	movs	r2, #0
 80125fe:	609a      	str	r2, [r3, #8]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2200      	movs	r2, #0
 8012604:	60da      	str	r2, [r3, #12]
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2200      	movs	r2, #0
 801260a:	611a      	str	r2, [r3, #16]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2200      	movs	r2, #0
 8012610:	615a      	str	r2, [r3, #20]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2200      	movs	r2, #0
 8012616:	619a      	str	r2, [r3, #24]
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2200      	movs	r2, #0
 801261c:	61da      	str	r2, [r3, #28]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2200      	movs	r2, #0
 8012622:	621a      	str	r2, [r3, #32]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2200      	movs	r2, #0
 8012628:	625a      	str	r2, [r3, #36]	; 0x24
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2200      	movs	r2, #0
 801262e:	629a      	str	r2, [r3, #40]	; 0x28
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2200      	movs	r2, #0
 8012634:	62da      	str	r2, [r3, #44]	; 0x2c
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2200      	movs	r2, #0
 801263a:	631a      	str	r2, [r3, #48]	; 0x30
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2200      	movs	r2, #0
 8012640:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	4618      	mov	r0, r3
 8012646:	370c      	adds	r7, #12
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr
 8012650:	0802898c 	.word	0x0802898c

08012654 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8012654:	b480      	push	{r7}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	4a04      	ldr	r2, [pc, #16]	; (8012670 <_ZN10TestResultD1Ev+0x1c>)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	601a      	str	r2, [r3, #0]
{
}
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	4618      	mov	r0, r3
 8012666:	370c      	adds	r7, #12
 8012668:	46bd      	mov	sp, r7
 801266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266e:	4770      	bx	lr
 8012670:	0802898c 	.word	0x0802898c

08012674 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8012674:	b580      	push	{r7, lr}
 8012676:	b082      	sub	sp, #8
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
}
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f7ff ffe9 	bl	8012654 <_ZN10TestResultD1Ev>
 8012682:	2138      	movs	r1, #56	; 0x38
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f7f7 ff03 	bl	800a490 <_ZdlPvj>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	4618      	mov	r0, r3
 801268e:	3708      	adds	r7, #8
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	685a      	ldr	r2, [r3, #4]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	685b      	ldr	r3, [r3, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	3318      	adds	r3, #24
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	6839      	ldr	r1, [r7, #0]
 80126ae:	4610      	mov	r0, r2
 80126b0:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80126b2:	4b05      	ldr	r3, [pc, #20]	; (80126c8 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	4798      	blx	r3
 80126b8:	4603      	mov	r3, r0
 80126ba:	461a      	mov	r2, r3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80126c0:	bf00      	nop
 80126c2:	3708      	adds	r7, #8
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	200000a8 	.word	0x200000a8

080126cc <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 80126d6:	4b0c      	ldr	r3, [pc, #48]	; (8012708 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	4798      	blx	r3
 80126dc:	4603      	mov	r3, r0
 80126de:	461a      	mov	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126e4:	1ad2      	subs	r2, r2, r3
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	685a      	ldr	r2, [r3, #4]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	331c      	adds	r3, #28
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	6879      	ldr	r1, [r7, #4]
 80126fa:	4610      	mov	r0, r2
 80126fc:	4798      	blx	r3
}
 80126fe:	bf00      	nop
 8012700:	3708      	adds	r7, #8
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	200000a8 	.word	0x200000a8

0801270c <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	685a      	ldr	r2, [r3, #4]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	3310      	adds	r3, #16
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	6839      	ldr	r1, [r7, #0]
 8012726:	4610      	mov	r0, r2
 8012728:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 801272a:	4b05      	ldr	r3, [pc, #20]	; (8012740 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	4798      	blx	r3
 8012730:	4603      	mov	r3, r0
 8012732:	461a      	mov	r2, r3
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012738:	bf00      	nop
 801273a:	3708      	adds	r7, #8
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}
 8012740:	200000a8 	.word	0x200000a8

08012744 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	6039      	str	r1, [r7, #0]
    output_.print(text);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	685a      	ldr	r2, [r3, #4]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	332c      	adds	r3, #44	; 0x2c
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	6839      	ldr	r1, [r7, #0]
 801275e:	4610      	mov	r0, r2
 8012760:	4798      	blx	r3
}
 8012762:	bf00      	nop
 8012764:	3708      	adds	r7, #8
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 801276a:	b580      	push	{r7, lr}
 801276c:	b082      	sub	sp, #8
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
 8012772:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	685a      	ldr	r2, [r3, #4]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	3348      	adds	r3, #72	; 0x48
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	6839      	ldr	r1, [r7, #0]
 8012784:	4610      	mov	r0, r2
 8012786:	4798      	blx	r3
}
 8012788:	bf00      	nop
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 801279a:	4b0c      	ldr	r3, [pc, #48]	; (80127cc <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	4798      	blx	r3
 80127a0:	4603      	mov	r3, r0
 80127a2:	461a      	mov	r2, r3
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127a8:	1ad2      	subs	r2, r2, r3
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	685a      	ldr	r2, [r3, #4]
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	3314      	adds	r3, #20
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	6879      	ldr	r1, [r7, #4]
 80127be:	4610      	mov	r0, r2
 80127c0:	4798      	blx	r3

}
 80127c2:	bf00      	nop
 80127c4:	3708      	adds	r7, #8
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	200000a8 	.word	0x200000a8

080127d0 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	685a      	ldr	r2, [r3, #4]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	333c      	adds	r3, #60	; 0x3c
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	6839      	ldr	r1, [r7, #0]
 80127ea:	4610      	mov	r0, r2
 80127ec:	4798      	blx	r3
    failureCount_++;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	695b      	ldr	r3, [r3, #20]
 80127f2:	1c5a      	adds	r2, r3, #1
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	615a      	str	r2, [r3, #20]
}
 80127f8:	bf00      	nop
 80127fa:	3708      	adds	r7, #8
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
    testCount_++;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	689b      	ldr	r3, [r3, #8]
 801280c:	1c5a      	adds	r2, r3, #1
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	609a      	str	r2, [r3, #8]
}
 8012812:	bf00      	nop
 8012814:	370c      	adds	r7, #12
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr

0801281e <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 801281e:	b480      	push	{r7}
 8012820:	b083      	sub	sp, #12
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
    runCount_++;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	1c5a      	adds	r2, r3, #1
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	60da      	str	r2, [r3, #12]
}
 8012830:	bf00      	nop
 8012832:	370c      	adds	r7, #12
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr

0801283c <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 801283c:	b480      	push	{r7}
 801283e:	b083      	sub	sp, #12
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	691b      	ldr	r3, [r3, #16]
 8012848:	1c5a      	adds	r2, r3, #1
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	611a      	str	r2, [r3, #16]
}
 801284e:	bf00      	nop
 8012850:	370c      	adds	r7, #12
 8012852:	46bd      	mov	sp, r7
 8012854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012858:	4770      	bx	lr

0801285a <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 801285a:	b480      	push	{r7}
 801285c:	b083      	sub	sp, #12
 801285e:	af00      	add	r7, sp, #0
 8012860:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	699b      	ldr	r3, [r3, #24]
 8012866:	1c5a      	adds	r2, r3, #1
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	619a      	str	r2, [r3, #24]
}
 801286c:	bf00      	nop
 801286e:	370c      	adds	r7, #12
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr

08012878 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8012878:	b480      	push	{r7}
 801287a:	b083      	sub	sp, #12
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	69db      	ldr	r3, [r3, #28]
 8012884:	1c5a      	adds	r2, r3, #1
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	61da      	str	r2, [r3, #28]
}
 801288a:	bf00      	nop
 801288c:	370c      	adds	r7, #12
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr
	...

08012898 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80128a0:	4b09      	ldr	r3, [pc, #36]	; (80128c8 <_ZN10TestResult12testsStartedEv+0x30>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	4798      	blx	r3
 80128a6:	4603      	mov	r3, r0
 80128a8:	461a      	mov	r2, r3
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	685a      	ldr	r2, [r3, #4]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	3308      	adds	r3, #8
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4610      	mov	r0, r2
 80128be:	4798      	blx	r3
}
 80128c0:	bf00      	nop
 80128c2:	3708      	adds	r7, #8
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	200000a8 	.word	0x200000a8

080128cc <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 80128d4:	4b0c      	ldr	r3, [pc, #48]	; (8012908 <_ZN10TestResult10testsEndedEv+0x3c>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4798      	blx	r3
 80128da:	4603      	mov	r3, r0
 80128dc:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128e2:	68fa      	ldr	r2, [r7, #12]
 80128e4:	1ad2      	subs	r2, r2, r3
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	685a      	ldr	r2, [r3, #4]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	330c      	adds	r3, #12
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6879      	ldr	r1, [r7, #4]
 80128fa:	4610      	mov	r0, r2
 80128fc:	4798      	blx	r3
}
 80128fe:	bf00      	nop
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
 8012906:	bf00      	nop
 8012908:	200000a8 	.word	0x200000a8

0801290c <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 801290c:	b480      	push	{r7}
 801290e:	b083      	sub	sp, #12
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6a1b      	ldr	r3, [r3, #32]
}
 8012918:	4618      	mov	r0, r3
 801291a:	370c      	adds	r7, #12
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8012930:	4618      	mov	r0, r3
 8012932:	370c      	adds	r7, #12
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr

0801293c <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8012948:	4618      	mov	r0, r3
 801294a:	370c      	adds	r7, #12
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr

08012954 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8012954:	b590      	push	{r4, r7, lr}
 8012956:	b087      	sub	sp, #28
 8012958:	af00      	add	r7, sp, #0
 801295a:	ed87 0b04 	vstr	d0, [r7, #16]
 801295e:	ed87 1b02 	vstr	d1, [r7, #8]
 8012962:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8012966:	4b2c      	ldr	r3, [pc, #176]	; (8012a18 <_Z13doubles_equalddd+0xc4>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	ed97 0b04 	vldr	d0, [r7, #16]
 801296e:	4798      	blx	r3
 8012970:	4603      	mov	r3, r0
 8012972:	2b00      	cmp	r3, #0
 8012974:	d10f      	bne.n	8012996 <_Z13doubles_equalddd+0x42>
 8012976:	4b28      	ldr	r3, [pc, #160]	; (8012a18 <_Z13doubles_equalddd+0xc4>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	ed97 0b02 	vldr	d0, [r7, #8]
 801297e:	4798      	blx	r3
 8012980:	4603      	mov	r3, r0
 8012982:	2b00      	cmp	r3, #0
 8012984:	d107      	bne.n	8012996 <_Z13doubles_equalddd+0x42>
 8012986:	4b24      	ldr	r3, [pc, #144]	; (8012a18 <_Z13doubles_equalddd+0xc4>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	ed97 0b00 	vldr	d0, [r7]
 801298e:	4798      	blx	r3
 8012990:	4603      	mov	r3, r0
 8012992:	2b00      	cmp	r3, #0
 8012994:	d001      	beq.n	801299a <_Z13doubles_equalddd+0x46>
 8012996:	2301      	movs	r3, #1
 8012998:	e000      	b.n	801299c <_Z13doubles_equalddd+0x48>
 801299a:	2300      	movs	r3, #0
 801299c:	2b00      	cmp	r3, #0
 801299e:	d001      	beq.n	80129a4 <_Z13doubles_equalddd+0x50>
        return false;
 80129a0:	2300      	movs	r3, #0
 80129a2:	e035      	b.n	8012a10 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 80129a4:	4b1d      	ldr	r3, [pc, #116]	; (8012a1c <_Z13doubles_equalddd+0xc8>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	ed97 0b04 	vldr	d0, [r7, #16]
 80129ac:	4798      	blx	r3
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d009      	beq.n	80129c8 <_Z13doubles_equalddd+0x74>
 80129b4:	4b19      	ldr	r3, [pc, #100]	; (8012a1c <_Z13doubles_equalddd+0xc8>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80129bc:	4798      	blx	r3
 80129be:	4603      	mov	r3, r0
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d001      	beq.n	80129c8 <_Z13doubles_equalddd+0x74>
 80129c4:	2301      	movs	r3, #1
 80129c6:	e000      	b.n	80129ca <_Z13doubles_equalddd+0x76>
 80129c8:	2300      	movs	r3, #0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d001      	beq.n	80129d2 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 80129ce:	2301      	movs	r3, #1
 80129d0:	e01e      	b.n	8012a10 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 80129d2:	4b13      	ldr	r3, [pc, #76]	; (8012a20 <_Z13doubles_equalddd+0xcc>)
 80129d4:	681c      	ldr	r4, [r3, #0]
 80129d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80129da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80129de:	f7ed fc93 	bl	8000308 <__aeabi_dsub>
 80129e2:	4602      	mov	r2, r0
 80129e4:	460b      	mov	r3, r1
 80129e6:	ec43 2b17 	vmov	d7, r2, r3
 80129ea:	eeb0 0a47 	vmov.f32	s0, s14
 80129ee:	eef0 0a67 	vmov.f32	s1, s15
 80129f2:	47a0      	blx	r4
 80129f4:	ec53 2b10 	vmov	r2, r3, d0
 80129f8:	2101      	movs	r1, #1
 80129fa:	460c      	mov	r4, r1
 80129fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012a00:	f7ed feae 	bl	8000760 <__aeabi_dcmpge>
 8012a04:	4603      	mov	r3, r0
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d101      	bne.n	8012a0e <_Z13doubles_equalddd+0xba>
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	461c      	mov	r4, r3
 8012a0e:	b2e3      	uxtb	r3, r4
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	371c      	adds	r7, #28
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd90      	pop	{r4, r7, pc}
 8012a18:	200000e8 	.word	0x200000e8
 8012a1c:	200000ec 	.word	0x200000ec
 8012a20:	200000dc 	.word	0x200000dc

08012a24 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8012a24:	b480      	push	{r7}
 8012a26:	b083      	sub	sp, #12
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	332c      	adds	r3, #44	; 0x2c
    }
 8012a30:	4618      	mov	r0, r3
 8012a32:	370c      	adds	r7, #12
 8012a34:	46bd      	mov	sp, r7
 8012a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3a:	4770      	bx	lr

08012a3c <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
    {
 8012a44:	4a0a      	ldr	r2, [pc, #40]	; (8012a70 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	601a      	str	r2, [r3, #0]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	332c      	adds	r3, #44	; 0x2c
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7ff fe00 	bl	8012654 <_ZN10TestResultD1Ev>
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	331c      	adds	r3, #28
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7f6 f815 	bl	8008a88 <_ZN17ConsoleTestOutputD1Ev>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	4618      	mov	r0, r3
 8012a62:	f000 f943 	bl	8012cec <_ZN10UtestShellD1Ev>
    }
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3708      	adds	r7, #8
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}
 8012a70:	080289d4 	.word	0x080289d4

08012a74 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
    }
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f7ff ffdd 	bl	8012a3c <_ZN22OutsideTestRunnerUTestD1Ev>
 8012a82:	2164      	movs	r1, #100	; 0x64
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f7f7 fd03 	bl	800a490 <_ZdlPvj>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3708      	adds	r7, #8
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}

08012a94 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b084      	sub	sp, #16
 8012a98:	af02      	add	r7, sp, #8
 8012a9a:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	9300      	str	r3, [sp, #0]
 8012aa2:	4b0d      	ldr	r3, [pc, #52]	; (8012ad8 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8012aa4:	4a0d      	ldr	r2, [pc, #52]	; (8012adc <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8012aa6:	490e      	ldr	r1, [pc, #56]	; (8012ae0 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8012aa8:	f000 f8f8 	bl	8012c9c <_ZN10UtestShellC1EPKcS1_S1_j>
 8012aac:	4a0d      	ldr	r2, [pc, #52]	; (8012ae4 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	601a      	str	r2, [r3, #0]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	331c      	adds	r3, #28
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7f5 ffd4 	bl	8008a64 <_ZN17ConsoleTestOutputC1Ev>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	331c      	adds	r3, #28
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	4610      	mov	r0, r2
 8012aca:	f7ff fd8b 	bl	80125e4 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3708      	adds	r7, #8
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	08024fa8 	.word	0x08024fa8
 8012adc:	08024fb8 	.word	0x08024fb8
 8012ae0:	08024ff8 	.word	0x08024ff8
 8012ae4:	080289d4 	.word	0x080289d4

08012ae8 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	4801      	ldr	r0, [pc, #4]	; (8012af4 <__tcf_0+0xc>)
 8012aee:	f7ff ffa5 	bl	8012a3c <_ZN22OutsideTestRunnerUTestD1Ev>
 8012af2:	bd80      	pop	{r7, pc}
 8012af4:	20000a54 	.word	0x20000a54

08012af8 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8012afc:	4b12      	ldr	r3, [pc, #72]	; (8012b48 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	f3bf 8f5b 	dmb	ish
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	f003 0301 	and.w	r3, r3, #1
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	bf0c      	ite	eq
 8012b0e:	2301      	moveq	r3, #1
 8012b10:	2300      	movne	r3, #0
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d013      	beq.n	8012b40 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012b18:	480b      	ldr	r0, [pc, #44]	; (8012b48 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012b1a:	f00c ff29 	bl	801f970 <__cxa_guard_acquire>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	bf14      	ite	ne
 8012b24:	2301      	movne	r3, #1
 8012b26:	2300      	moveq	r3, #0
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d008      	beq.n	8012b40 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012b2e:	4807      	ldr	r0, [pc, #28]	; (8012b4c <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8012b30:	f7ff ffb0 	bl	8012a94 <_ZN22OutsideTestRunnerUTestC1Ev>
 8012b34:	4804      	ldr	r0, [pc, #16]	; (8012b48 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012b36:	f00c ff27 	bl	801f988 <__cxa_guard_release>
 8012b3a:	4805      	ldr	r0, [pc, #20]	; (8012b50 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8012b3c:	f00c ff4b 	bl	801f9d6 <atexit>
    return instance_;
 8012b40:	4b02      	ldr	r3, [pc, #8]	; (8012b4c <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	20000ab8 	.word	0x20000ab8
 8012b4c:	20000a54 	.word	0x20000a54
 8012b50:	08012ae9 	.word	0x08012ae9

08012b54 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b082      	sub	sp, #8
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	330c      	adds	r3, #12
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	6878      	ldr	r0, [r7, #4]
 8012b66:	4798      	blx	r3
    }
 8012b68:	bf00      	nop
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	3314      	adds	r3, #20
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	4798      	blx	r3
    }
 8012b84:	bf00      	nop
 8012b86:	3708      	adds	r7, #8
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	3310      	adds	r3, #16
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	4798      	blx	r3
    }
 8012ba0:	bf00      	nop
 8012ba2:	3708      	adds	r7, #8
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}

08012ba8 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8012ba8:	b480      	push	{r7}
 8012baa:	b085      	sub	sp, #20
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	60f8      	str	r0, [r7, #12]
 8012bb0:	60b9      	str	r1, [r7, #8]
 8012bb2:	607a      	str	r2, [r7, #4]
 8012bb4:	603b      	str	r3, [r7, #0]
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	68ba      	ldr	r2, [r7, #8]
 8012bba:	601a      	str	r2, [r3, #0]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	605a      	str	r2, [r3, #4]
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	683a      	ldr	r2, [r7, #0]
 8012bc6:	609a      	str	r2, [r3, #8]
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3714      	adds	r7, #20
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd4:	4770      	bx	lr

08012bd6 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b086      	sub	sp, #24
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	685b      	ldr	r3, [r3, #4]
 8012bec:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	689b      	ldr	r3, [r3, #8]
 8012bf2:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	3394      	adds	r3, #148	; 0x94
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	68ba      	ldr	r2, [r7, #8]
 8012bfe:	68f9      	ldr	r1, [r7, #12]
 8012c00:	6938      	ldr	r0, [r7, #16]
 8012c02:	4798      	blx	r3
    }
 8012c04:	bf00      	nop
 8012c06:	3718      	adds	r7, #24
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}

08012c0c <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b086      	sub	sp, #24
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8012c2a:	4b05      	ldr	r3, [pc, #20]	; (8012c40 <helperDoRunOneTestSeperateProcess+0x34>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	68ba      	ldr	r2, [r7, #8]
 8012c30:	68f9      	ldr	r1, [r7, #12]
 8012c32:	6938      	ldr	r0, [r7, #16]
 8012c34:	4798      	blx	r3
    }
 8012c36:	bf00      	nop
 8012c38:	3718      	adds	r7, #24
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	2000009c 	.word	0x2000009c

08012c44 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8012c4c:	4a0f      	ldr	r2, [pc, #60]	; (8012c8c <_ZN10UtestShellC1Ev+0x48>)
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	601a      	str	r2, [r3, #0]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	4a0e      	ldr	r2, [pc, #56]	; (8012c90 <_ZN10UtestShellC1Ev+0x4c>)
 8012c56:	605a      	str	r2, [r3, #4]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	4a0e      	ldr	r2, [pc, #56]	; (8012c94 <_ZN10UtestShellC1Ev+0x50>)
 8012c5c:	609a      	str	r2, [r3, #8]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	4a0d      	ldr	r2, [pc, #52]	; (8012c98 <_ZN10UtestShellC1Ev+0x54>)
 8012c62:	60da      	str	r2, [r3, #12]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2200      	movs	r2, #0
 8012c68:	611a      	str	r2, [r3, #16]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	615a      	str	r2, [r3, #20]
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2200      	movs	r2, #0
 8012c74:	761a      	strb	r2, [r3, #24]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	765a      	strb	r2, [r3, #25]
{
}
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	4618      	mov	r0, r3
 8012c80:	370c      	adds	r7, #12
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	08028a94 	.word	0x08028a94
 8012c90:	08025044 	.word	0x08025044
 8012c94:	08025058 	.word	0x08025058
 8012c98:	08025068 	.word	0x08025068

08012c9c <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8012c9c:	b480      	push	{r7}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	607a      	str	r2, [r7, #4]
 8012ca8:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8012caa:	4a0f      	ldr	r2, [pc, #60]	; (8012ce8 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	601a      	str	r2, [r3, #0]
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	68ba      	ldr	r2, [r7, #8]
 8012cb4:	605a      	str	r2, [r3, #4]
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	687a      	ldr	r2, [r7, #4]
 8012cba:	609a      	str	r2, [r3, #8]
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	683a      	ldr	r2, [r7, #0]
 8012cc0:	60da      	str	r2, [r3, #12]
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	69ba      	ldr	r2, [r7, #24]
 8012cc6:	611a      	str	r2, [r3, #16]
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	615a      	str	r2, [r3, #20]
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	761a      	strb	r2, [r3, #24]
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	765a      	strb	r2, [r3, #25]
{
}
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	4618      	mov	r0, r3
 8012cde:	3714      	adds	r7, #20
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce6:	4770      	bx	lr
 8012ce8:	08028a94 	.word	0x08028a94

08012cec <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	4a04      	ldr	r2, [pc, #16]	; (8012d08 <_ZN10UtestShellD1Ev+0x1c>)
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	601a      	str	r2, [r3, #0]
{
}
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	370c      	adds	r7, #12
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr
 8012d08:	08028a94 	.word	0x08028a94

08012d0c <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
}
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f7ff ffe9 	bl	8012cec <_ZN10UtestShellD1Ev>
 8012d1a:	211c      	movs	r1, #28
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7f7 fbb7 	bl	800a490 <_ZdlPvj>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	4618      	mov	r0, r3
 8012d26:	3708      	adds	r7, #8
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}

08012d2c <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 8012d32:	2300      	movs	r3, #0
 8012d34:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	3310      	adds	r3, #16
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	4798      	blx	r3
}
 8012d42:	bf00      	nop
 8012d44:	3708      	adds	r7, #8
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
	...

08012d4c <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 8012d50:	4b02      	ldr	r3, [pc, #8]	; (8012d5c <_ZN10UtestShell5crashEv+0x10>)
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	4798      	blx	r3
}
 8012d56:	bf00      	nop
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	20000098 	.word	0x20000098

08012d60 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b088      	sub	sp, #32
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	60f8      	str	r0, [r7, #12]
 8012d68:	60b9      	str	r1, [r7, #8]
 8012d6a:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	3324      	adds	r3, #36	; 0x24
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8012d7e:	f107 0014 	add.w	r0, r7, #20
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	68ba      	ldr	r2, [r7, #8]
 8012d86:	68f9      	ldr	r1, [r7, #12]
 8012d88:	f7ff ff0e 	bl	8012ba8 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	337c      	adds	r3, #124	; 0x7c
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	68f8      	ldr	r0, [r7, #12]
 8012d96:	4798      	blx	r3
 8012d98:	4603      	mov	r3, r0
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d007      	beq.n	8012dae <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8012d9e:	4b09      	ldr	r3, [pc, #36]	; (8012dc4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f107 0214 	add.w	r2, r7, #20
 8012da6:	4611      	mov	r1, r2
 8012da8:	4807      	ldr	r0, [pc, #28]	; (8012dc8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8012daa:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8012dac:	e006      	b.n	8012dbc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8012dae:	4b05      	ldr	r3, [pc, #20]	; (8012dc4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	f107 0214 	add.w	r2, r7, #20
 8012db6:	4611      	mov	r1, r2
 8012db8:	4804      	ldr	r0, [pc, #16]	; (8012dcc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8012dba:	4798      	blx	r3
}
 8012dbc:	bf00      	nop
 8012dbe:	3720      	adds	r7, #32
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	200000a4 	.word	0x200000a4
 8012dc8:	08012c0d 	.word	0x08012c0d
 8012dcc:	08012bd7 	.word	0x08012bd7

08012dd0 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8012dd0:	b590      	push	{r4, r7, lr}
 8012dd2:	b083      	sub	sp, #12
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
    return new Utest();
 8012dd8:	22d3      	movs	r2, #211	; 0xd3
 8012dda:	4906      	ldr	r1, [pc, #24]	; (8012df4 <_ZN10UtestShell10createTestEv+0x24>)
 8012ddc:	2004      	movs	r0, #4
 8012dde:	f7f7 fb43 	bl	800a468 <_ZnwjPKci>
 8012de2:	4604      	mov	r4, r0
 8012de4:	4620      	mov	r0, r4
 8012de6:	f001 fb0f 	bl	8014408 <_ZN5UtestC1Ev>
 8012dea:	4623      	mov	r3, r4
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	370c      	adds	r7, #12
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd90      	pop	{r4, r7, pc}
 8012df4:	08025078 	.word	0x08025078

08012df8 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b082      	sub	sp, #8
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	6039      	str	r1, [r7, #0]
    delete test;
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d004      	beq.n	8012e12 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	3204      	adds	r2, #4
 8012e0c:	6812      	ldr	r2, [r2, #0]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	4790      	blx	r2
}
 8012e12:	bf00      	nop
 8012e14:	3708      	adds	r7, #8
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
	...

08012e1c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b088      	sub	sp, #32
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	60f8      	str	r0, [r7, #12]
 8012e24:	60b9      	str	r1, [r7, #8]
 8012e26:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	333c      	adds	r3, #60	; 0x3c
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	4940      	ldr	r1, [pc, #256]	; (8012f34 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	3314      	adds	r3, #20
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	68f9      	ldr	r1, [r7, #12]
 8012e42:	68b8      	ldr	r0, [r7, #8]
 8012e44:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	333c      	adds	r3, #60	; 0x3c
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	493a      	ldr	r1, [pc, #232]	; (8012f38 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8012e54:	f001 faae 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8012e58:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8012e5a:	68f8      	ldr	r0, [r7, #12]
 8012e5c:	f001 fa90 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8012e60:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8012e62:	6879      	ldr	r1, [r7, #4]
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f001 fa6b 	bl	8014340 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8012e6a:	68f9      	ldr	r1, [r7, #12]
 8012e6c:	68f8      	ldr	r0, [r7, #12]
 8012e6e:	f001 fa77 	bl	8014360 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	333c      	adds	r3, #60	; 0x3c
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4930      	ldr	r1, [pc, #192]	; (8012f3c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	4798      	blx	r3
    Utest* testToRun = createTest();
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	3388      	adds	r3, #136	; 0x88
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	4798      	blx	r3
 8012e8c:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	333c      	adds	r3, #60	; 0x3c
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	492a      	ldr	r1, [pc, #168]	; (8012f40 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	333c      	adds	r3, #60	; 0x3c
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	4927      	ldr	r1, [pc, #156]	; (8012f44 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	4798      	blx	r3
    testToRun->run();
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	3308      	adds	r3, #8
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	6978      	ldr	r0, [r7, #20]
 8012eb4:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	333c      	adds	r3, #60	; 0x3c
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	4922      	ldr	r1, [pc, #136]	; (8012f48 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8012ec4:	69f9      	ldr	r1, [r7, #28]
 8012ec6:	68f8      	ldr	r0, [r7, #12]
 8012ec8:	f001 fa4a 	bl	8014360 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8012ecc:	69b9      	ldr	r1, [r7, #24]
 8012ece:	68f8      	ldr	r0, [r7, #12]
 8012ed0:	f001 fa36 	bl	8014340 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	333c      	adds	r3, #60	; 0x3c
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	491b      	ldr	r1, [pc, #108]	; (8012f4c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	4798      	blx	r3
    destroyTest(testToRun);
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	338c      	adds	r3, #140	; 0x8c
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	6979      	ldr	r1, [r7, #20]
 8012eec:	68f8      	ldr	r0, [r7, #12]
 8012eee:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	333c      	adds	r3, #60	; 0x3c
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	4915      	ldr	r1, [pc, #84]	; (8012f50 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	333c      	adds	r3, #60	; 0x3c
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	4913      	ldr	r1, [pc, #76]	; (8012f54 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	3318      	adds	r3, #24
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	687a      	ldr	r2, [r7, #4]
 8012f16:	68f9      	ldr	r1, [r7, #12]
 8012f18:	68b8      	ldr	r0, [r7, #8]
 8012f1a:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	333c      	adds	r3, #60	; 0x3c
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	490c      	ldr	r1, [pc, #48]	; (8012f58 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	4798      	blx	r3
}
 8012f2a:	bf00      	nop
 8012f2c:	3720      	adds	r7, #32
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	0802508c 	.word	0x0802508c
 8012f38:	080250b0 	.word	0x080250b0
 8012f3c:	080250d0 	.word	0x080250d0
 8012f40:	080250ec 	.word	0x080250ec
 8012f44:	08025108 	.word	0x08025108
 8012f48:	08025124 	.word	0x08025124
 8012f4c:	0802513c 	.word	0x0802513c
 8012f50:	08025158 	.word	0x08025158
 8012f54:	08025174 	.word	0x08025174
 8012f58:	08025198 	.word	0x08025198

08012f5c <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8012f5c:	b480      	push	{r7}
 8012f5e:	b083      	sub	sp, #12
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
    return next_;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	695b      	ldr	r3, [r3, #20]
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	370c      	adds	r7, #12
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr

08012f74 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8012f74:	b480      	push	{r7}
 8012f76:	b083      	sub	sp, #12
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	6039      	str	r1, [r7, #0]
    next_ = test;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	683a      	ldr	r2, [r7, #0]
 8012f82:	615a      	str	r2, [r3, #20]
    return this;
 8012f84:	687b      	ldr	r3, [r7, #4]
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	370c      	adds	r7, #12
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr

08012f92 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b082      	sub	sp, #8
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	695b      	ldr	r3, [r3, #20]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d00b      	beq.n	8012fba <_ZN10UtestShell10countTestsEv+0x28>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	695a      	ldr	r2, [r3, #20]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	695b      	ldr	r3, [r3, #20]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	3310      	adds	r3, #16
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	4610      	mov	r0, r2
 8012fb2:	4798      	blx	r3
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	e000      	b.n	8012fbc <_ZN10UtestShell10countTestsEv+0x2a>
 8012fba:	2301      	movs	r3, #1
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	6039      	str	r1, [r7, #0]
    return "TEST";
 8012fce:	4904      	ldr	r1, [pc, #16]	; (8012fe0 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f7f9 fe0c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
}
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	3708      	adds	r7, #8
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	080251bc 	.word	0x080251bc

08012fe4 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	689b      	ldr	r3, [r3, #8]
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f7f9 fdfa 	bl	800cbee <_ZN12SimpleStringC1EPKc>
}
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	3708      	adds	r7, #8
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}

08013002 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 8013002:	b580      	push	{r7, lr}
 8013004:	b082      	sub	sp, #8
 8013006:	af00      	add	r7, sp, #0
 8013008:	6078      	str	r0, [r7, #4]
 801300a:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	685b      	ldr	r3, [r3, #4]
 8013010:	4619      	mov	r1, r3
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f7f9 fdeb 	bl	800cbee <_ZN12SimpleStringC1EPKc>
}
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	33a0      	adds	r3, #160	; 0xa0
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	687a      	ldr	r2, [r7, #4]
 8013034:	6839      	ldr	r1, [r7, #0]
 8013036:	4610      	mov	r0, r2
 8013038:	4798      	blx	r3
    formattedName += "(";
 801303a:	490e      	ldr	r1, [pc, #56]	; (8013074 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f7fa fa1d 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	4619      	mov	r1, r3
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f7fa fa17 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 801304e:	490a      	ldr	r1, [pc, #40]	; (8013078 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f7fa fa13 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	689b      	ldr	r3, [r3, #8]
 801305a:	4619      	mov	r1, r3
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f7fa fa0d 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8013062:	4906      	ldr	r1, [pc, #24]	; (801307c <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f7fa fa09 	bl	800d47c <_ZN12SimpleStringpLEPKc>

    return formattedName;
 801306a:	bf00      	nop
}
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	3708      	adds	r7, #8
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}
 8013074:	080251c4 	.word	0x080251c4
 8013078:	080251c8 	.word	0x080251c8
 801307c:	080251cc 	.word	0x080251cc

08013080 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8013080:	b480      	push	{r7}
 8013082:	b083      	sub	sp, #12
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	7e5b      	ldrb	r3, [r3, #25]
}
 801308c:	4618      	mov	r0, r3
 801308e:	370c      	adds	r7, #12
 8013090:	46bd      	mov	sp, r7
 8013092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013096:	4770      	bx	lr

08013098 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f001 f96d 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 80130a6:	4603      	mov	r3, r0
 80130a8:	681a      	ldr	r2, [r3, #0]
 80130aa:	3228      	adds	r2, #40	; 0x28
 80130ac:	6812      	ldr	r2, [r2, #0]
 80130ae:	4618      	mov	r0, r3
 80130b0:	4790      	blx	r2
}
 80130b2:	bf00      	nop
 80130b4:	3708      	adds	r7, #8
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}

080130ba <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 80130ba:	b480      	push	{r7}
 80130bc:	b083      	sub	sp, #12
 80130be:	af00      	add	r7, sp, #0
 80130c0:	6078      	str	r0, [r7, #4]
    return true;
 80130c2:	2301      	movs	r3, #1
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	370c      	adds	r7, #12
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr

080130d0 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 80130d0:	b480      	push	{r7}
 80130d2:	b083      	sub	sp, #12
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	7e1b      	ldrb	r3, [r3, #24]
}
 80130dc:	4618      	mov	r0, r3
 80130de:	370c      	adds	r7, #12
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr

080130e8 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2201      	movs	r2, #1
 80130f4:	761a      	strb	r2, [r3, #24]
}
 80130f6:	bf00      	nop
 80130f8:	370c      	adds	r7, #12
 80130fa:	46bd      	mov	sp, r7
 80130fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013100:	4770      	bx	lr

08013102 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8013102:	b480      	push	{r7}
 8013104:	b083      	sub	sp, #12
 8013106:	af00      	add	r7, sp, #0
 8013108:	6078      	str	r0, [r7, #4]

}
 801310a:	bf00      	nop
 801310c:	370c      	adds	r7, #12
 801310e:	46bd      	mov	sp, r7
 8013110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013114:	4770      	bx	lr

08013116 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8013116:	b480      	push	{r7}
 8013118:	b083      	sub	sp, #12
 801311a:	af00      	add	r7, sp, #0
 801311c:	6078      	str	r0, [r7, #4]
 801311e:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	683a      	ldr	r2, [r7, #0]
 8013124:	60da      	str	r2, [r3, #12]
}
 8013126:	bf00      	nop
 8013128:	370c      	adds	r7, #12
 801312a:	46bd      	mov	sp, r7
 801312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013130:	4770      	bx	lr

08013132 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8013132:	b480      	push	{r7}
 8013134:	b083      	sub	sp, #12
 8013136:	af00      	add	r7, sp, #0
 8013138:	6078      	str	r0, [r7, #4]
 801313a:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	683a      	ldr	r2, [r7, #0]
 8013140:	611a      	str	r2, [r3, #16]
}
 8013142:	bf00      	nop
 8013144:	370c      	adds	r7, #12
 8013146:	46bd      	mov	sp, r7
 8013148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314c:	4770      	bx	lr

0801314e <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 801314e:	b480      	push	{r7}
 8013150:	b083      	sub	sp, #12
 8013152:	af00      	add	r7, sp, #0
 8013154:	6078      	str	r0, [r7, #4]
 8013156:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	683a      	ldr	r2, [r7, #0]
 801315c:	605a      	str	r2, [r3, #4]
}
 801315e:	bf00      	nop
 8013160:	370c      	adds	r7, #12
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr

0801316a <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 801316a:	b480      	push	{r7}
 801316c:	b083      	sub	sp, #12
 801316e:	af00      	add	r7, sp, #0
 8013170:	6078      	str	r0, [r7, #4]
 8013172:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	683a      	ldr	r2, [r7, #0]
 8013178:	609a      	str	r2, [r3, #8]
}
 801317a:	bf00      	nop
 801317c:	370c      	adds	r7, #12
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr

08013186 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8013186:	b580      	push	{r7, lr}
 8013188:	b082      	sub	sp, #8
 801318a:	af00      	add	r7, sp, #0
 801318c:	6078      	str	r0, [r7, #4]
 801318e:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	68db      	ldr	r3, [r3, #12]
 8013194:	4619      	mov	r1, r3
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f7f9 fd29 	bl	800cbee <_ZN12SimpleStringC1EPKc>
}
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	3708      	adds	r7, #8
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}

080131a4 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	691b      	ldr	r3, [r3, #16]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	370c      	adds	r7, #12
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr

080131bc <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 80131bc:	b590      	push	{r4, r7, lr}
 80131be:	b087      	sub	sp, #28
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	60f8      	str	r0, [r7, #12]
 80131c4:	60b9      	str	r1, [r7, #8]
 80131c6:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d101      	bne.n	80131d2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 80131ce:	2301      	movs	r3, #1
 80131d0:	e01f      	b.n	8013212 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d01b      	beq.n	8013210 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 80131d8:	f107 0310 	add.w	r3, r7, #16
 80131dc:	68b9      	ldr	r1, [r7, #8]
 80131de:	4618      	mov	r0, r3
 80131e0:	f7f9 fd05 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80131e4:	f107 0310 	add.w	r3, r7, #16
 80131e8:	4619      	mov	r1, r3
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f00c fb93 	bl	801f916 <_ZNK10TestFilter5matchERK12SimpleString>
 80131f0:	4603      	mov	r3, r0
 80131f2:	461c      	mov	r4, r3
 80131f4:	f107 0310 	add.w	r3, r7, #16
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fa f8b0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80131fe:	2c00      	cmp	r4, #0
 8013200:	d001      	beq.n	8013206 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8013202:	2301      	movs	r3, #1
 8013204:	e005      	b.n	8013212 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f00c fb5f 	bl	801f8ca <_ZNK10TestFilter7getNextEv>
 801320c:	6078      	str	r0, [r7, #4]
 801320e:	e7e0      	b.n	80131d2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8013210:	2300      	movs	r3, #0
}
 8013212:	4618      	mov	r0, r3
 8013214:	371c      	adds	r7, #28
 8013216:	46bd      	mov	sp, r7
 8013218:	bd90      	pop	{r4, r7, pc}

0801321a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 801321a:	b580      	push	{r7, lr}
 801321c:	b084      	sub	sp, #16
 801321e:	af00      	add	r7, sp, #0
 8013220:	60f8      	str	r0, [r7, #12]
 8013222:	60b9      	str	r1, [r7, #8]
 8013224:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	68ba      	ldr	r2, [r7, #8]
 801322c:	4619      	mov	r1, r3
 801322e:	68f8      	ldr	r0, [r7, #12]
 8013230:	f7ff ffc4 	bl	80131bc <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8013234:	4603      	mov	r3, r0
 8013236:	2b00      	cmp	r3, #0
 8013238:	d00b      	beq.n	8013252 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	4619      	mov	r1, r3
 8013242:	68f8      	ldr	r0, [r7, #12]
 8013244:	f7ff ffba 	bl	80131bc <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8013248:	4603      	mov	r3, r0
 801324a:	2b00      	cmp	r3, #0
 801324c:	d001      	beq.n	8013252 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801324e:	2301      	movs	r3, #1
 8013250:	e000      	b.n	8013254 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8013252:	2300      	movs	r3, #0
}
 8013254:	4618      	mov	r0, r3
 8013256:	3710      	adds	r7, #16
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}

0801325c <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 801325c:	b590      	push	{r4, r7, lr}
 801325e:	b083      	sub	sp, #12
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
 8013264:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	339c      	adds	r3, #156	; 0x9c
 801326c:	681c      	ldr	r4, [r3, #0]
 801326e:	f001 f8b1 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8013272:	4603      	mov	r3, r0
 8013274:	461a      	mov	r2, r3
 8013276:	6839      	ldr	r1, [r7, #0]
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 801327c:	bf00      	nop
 801327e:	370c      	adds	r7, #12
 8013280:	46bd      	mov	sp, r7
 8013282:	bd90      	pop	{r4, r7, pc}

08013284 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b084      	sub	sp, #16
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	2201      	movs	r2, #1
 8013294:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8013296:	68f8      	ldr	r0, [r7, #12]
 8013298:	f001 f872 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 801329c:	4603      	mov	r3, r0
 801329e:	681a      	ldr	r2, [r3, #0]
 80132a0:	3234      	adds	r2, #52	; 0x34
 80132a2:	6812      	ldr	r2, [r2, #0]
 80132a4:	68b9      	ldr	r1, [r7, #8]
 80132a6:	4618      	mov	r0, r3
 80132a8:	4790      	blx	r2
    terminator.exitCurrentTest();
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80132b4:	bf00      	nop
 80132b6:	3710      	adds	r7, #16
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}

080132bc <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b082      	sub	sp, #8
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
 80132c4:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	6838      	ldr	r0, [r7, #0]
 80132ce:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80132d0:	bf00      	nop
 80132d2:	3708      	adds	r7, #8
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80132d8:	b590      	push	{r4, r7, lr}
 80132da:	b09d      	sub	sp, #116	; 0x74
 80132dc:	af04      	add	r7, sp, #16
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	607a      	str	r2, [r7, #4]
 80132e2:	603b      	str	r3, [r7, #0]
 80132e4:	460b      	mov	r3, r1
 80132e6:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80132e8:	68f8      	ldr	r0, [r7, #12]
 80132ea:	f001 f849 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 80132ee:	4603      	mov	r3, r0
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	3228      	adds	r2, #40	; 0x28
 80132f4:	6812      	ldr	r2, [r2, #0]
 80132f6:	4618      	mov	r0, r3
 80132f8:	4790      	blx	r2
    if (!condition)
 80132fa:	7afb      	ldrb	r3, [r7, #11]
 80132fc:	f083 0301 	eor.w	r3, r3, #1
 8013300:	b2db      	uxtb	r3, r3
 8013302:	2b00      	cmp	r3, #0
 8013304:	d03f      	beq.n	8013386 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	339c      	adds	r3, #156	; 0x9c
 801330c:	681c      	ldr	r4, [r3, #0]
 801330e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013312:	6879      	ldr	r1, [r7, #4]
 8013314:	4618      	mov	r0, r3
 8013316:	f7f9 fc6a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801331a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801331e:	6839      	ldr	r1, [r7, #0]
 8013320:	4618      	mov	r0, r3
 8013322:	f7f9 fc64 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013326:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801332a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801332c:	4618      	mov	r0, r3
 801332e:	f7f9 fc5e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013332:	f107 0014 	add.w	r0, r7, #20
 8013336:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801333a:	9302      	str	r3, [sp, #8]
 801333c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013340:	9301      	str	r3, [sp, #4]
 8013342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013346:	9300      	str	r3, [sp, #0]
 8013348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801334a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801334c:	68f9      	ldr	r1, [r7, #12]
 801334e:	f7fb ff6b 	bl	800f228 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013352:	f107 0314 	add.w	r3, r7, #20
 8013356:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013358:	4619      	mov	r1, r3
 801335a:	68f8      	ldr	r0, [r7, #12]
 801335c:	47a0      	blx	r4
 801335e:	f107 0314 	add.w	r3, r7, #20
 8013362:	4618      	mov	r0, r3
 8013364:	f7fc fdce 	bl	800ff04 <_ZN12CheckFailureD1Ev>
 8013368:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801336c:	4618      	mov	r0, r3
 801336e:	f7f9 fff6 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013372:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013376:	4618      	mov	r0, r3
 8013378:	f7f9 fff1 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801337c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013380:	4618      	mov	r0, r3
 8013382:	f7f9 ffec 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8013386:	bf00      	nop
 8013388:	3764      	adds	r7, #100	; 0x64
 801338a:	46bd      	mov	sp, r7
 801338c:	bd90      	pop	{r4, r7, pc}

0801338e <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801338e:	b590      	push	{r4, r7, lr}
 8013390:	b097      	sub	sp, #92	; 0x5c
 8013392:	af02      	add	r7, sp, #8
 8013394:	60f8      	str	r0, [r7, #12]
 8013396:	60b9      	str	r1, [r7, #8]
 8013398:	607a      	str	r2, [r7, #4]
 801339a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801339c:	68f8      	ldr	r0, [r7, #12]
 801339e:	f000 ffef 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 80133a2:	4603      	mov	r3, r0
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	3228      	adds	r2, #40	; 0x28
 80133a8:	6812      	ldr	r2, [r2, #0]
 80133aa:	4618      	mov	r0, r3
 80133ac:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	339c      	adds	r3, #156	; 0x9c
 80133b4:	681c      	ldr	r4, [r3, #0]
 80133b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133ba:	68b9      	ldr	r1, [r7, #8]
 80133bc:	4618      	mov	r0, r3
 80133be:	f7f9 fc16 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80133c2:	f107 0014 	add.w	r0, r7, #20
 80133c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133ca:	9300      	str	r3, [sp, #0]
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	68f9      	ldr	r1, [r7, #12]
 80133d2:	f7fb ff71 	bl	800f2b8 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80133d6:	f107 0314 	add.w	r3, r7, #20
 80133da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80133dc:	4619      	mov	r1, r3
 80133de:	68f8      	ldr	r0, [r7, #12]
 80133e0:	47a0      	blx	r4
 80133e2:	f107 0314 	add.w	r3, r7, #20
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7f7 fc16 	bl	800ac18 <_ZN11FailFailureD1Ev>
 80133ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7f9 ffb4 	bl	800d35e <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 80133f6:	bf00      	nop
 80133f8:	3754      	adds	r7, #84	; 0x54
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd90      	pop	{r4, r7, pc}

080133fe <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80133fe:	b590      	push	{r4, r7, lr}
 8013400:	b0a7      	sub	sp, #156	; 0x9c
 8013402:	af04      	add	r7, sp, #16
 8013404:	60f8      	str	r0, [r7, #12]
 8013406:	60b9      	str	r1, [r7, #8]
 8013408:	607a      	str	r2, [r7, #4]
 801340a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801340c:	68f8      	ldr	r0, [r7, #12]
 801340e:	f000 ffb7 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013412:	4603      	mov	r3, r0
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	3228      	adds	r2, #40	; 0x28
 8013418:	6812      	ldr	r2, [r2, #0]
 801341a:	4618      	mov	r0, r3
 801341c:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d102      	bne.n	801342a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d068      	beq.n	80134fc <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d002      	beq.n	8013436 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d12a      	bne.n	801348c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	339c      	adds	r3, #156	; 0x9c
 801343c:	681c      	ldr	r4, [r3, #0]
 801343e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013442:	6839      	ldr	r1, [r7, #0]
 8013444:	4618      	mov	r0, r3
 8013446:	f7f9 fbd2 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801344a:	f107 0010 	add.w	r0, r7, #16
 801344e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013452:	9302      	str	r3, [sp, #8]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	9301      	str	r3, [sp, #4]
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013460:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013464:	68f9      	ldr	r1, [r7, #12]
 8013466:	f7fc f9ad 	bl	800f7c4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801346a:	f107 0310 	add.w	r3, r7, #16
 801346e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013472:	4619      	mov	r1, r3
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	47a0      	blx	r4
 8013478:	f107 0310 	add.w	r3, r7, #16
 801347c:	4618      	mov	r0, r3
 801347e:	f7fc fcb9 	bl	800fdf4 <_ZN18StringEqualFailureD1Ev>
 8013482:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013486:	4618      	mov	r0, r3
 8013488:	f7f9 ff69 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 801348c:	6879      	ldr	r1, [r7, #4]
 801348e:	68b8      	ldr	r0, [r7, #8]
 8013490:	f7f9 f9ea 	bl	800c868 <_ZN12SimpleString6StrCmpEPKcS1_>
 8013494:	4603      	mov	r3, r0
 8013496:	2b00      	cmp	r3, #0
 8013498:	bf14      	ite	ne
 801349a:	2301      	movne	r3, #1
 801349c:	2300      	moveq	r3, #0
 801349e:	b2db      	uxtb	r3, r3
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d02c      	beq.n	80134fe <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	339c      	adds	r3, #156	; 0x9c
 80134aa:	681c      	ldr	r4, [r3, #0]
 80134ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80134b0:	6839      	ldr	r1, [r7, #0]
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7f9 fb9b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80134b8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80134bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80134c0:	9302      	str	r3, [sp, #8]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	9301      	str	r3, [sp, #4]
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	9300      	str	r3, [sp, #0]
 80134ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80134ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80134d2:	68f9      	ldr	r1, [r7, #12]
 80134d4:	f7fc f976 	bl	800f7c4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80134d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80134dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80134e0:	4619      	mov	r1, r3
 80134e2:	68f8      	ldr	r0, [r7, #12]
 80134e4:	47a0      	blx	r4
 80134e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7fc fc82 	bl	800fdf4 <_ZN18StringEqualFailureD1Ev>
 80134f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7f9 ff32 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80134fa:	e000      	b.n	80134fe <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80134fc:	bf00      	nop
}
 80134fe:	378c      	adds	r7, #140	; 0x8c
 8013500:	46bd      	mov	sp, r7
 8013502:	bd90      	pop	{r4, r7, pc}

08013504 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013504:	b590      	push	{r4, r7, lr}
 8013506:	b0a7      	sub	sp, #156	; 0x9c
 8013508:	af04      	add	r7, sp, #16
 801350a:	60f8      	str	r0, [r7, #12]
 801350c:	60b9      	str	r1, [r7, #8]
 801350e:	607a      	str	r2, [r7, #4]
 8013510:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f000 ff34 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013518:	4603      	mov	r3, r0
 801351a:	681a      	ldr	r2, [r3, #0]
 801351c:	3228      	adds	r2, #40	; 0x28
 801351e:	6812      	ldr	r2, [r2, #0]
 8013520:	4618      	mov	r0, r3
 8013522:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d102      	bne.n	8013530 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d06b      	beq.n	8013608 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d002      	beq.n	801353c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d12b      	bne.n	8013594 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	339c      	adds	r3, #156	; 0x9c
 8013542:	681c      	ldr	r4, [r3, #0]
 8013544:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013548:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801354c:	4618      	mov	r0, r3
 801354e:	f7f9 fb4e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013552:	f107 0010 	add.w	r0, r7, #16
 8013556:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801355a:	9302      	str	r3, [sp, #8]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	9301      	str	r3, [sp, #4]
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	9300      	str	r3, [sp, #0]
 8013564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013568:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801356c:	68f9      	ldr	r1, [r7, #12]
 801356e:	f7fc f929 	bl	800f7c4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013572:	f107 0310 	add.w	r3, r7, #16
 8013576:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801357a:	4619      	mov	r1, r3
 801357c:	68f8      	ldr	r0, [r7, #12]
 801357e:	47a0      	blx	r4
 8013580:	f107 0310 	add.w	r3, r7, #16
 8013584:	4618      	mov	r0, r3
 8013586:	f7fc fc35 	bl	800fdf4 <_ZN18StringEqualFailureD1Ev>
 801358a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801358e:	4618      	mov	r0, r3
 8013590:	f7f9 fee5 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8013594:	683a      	ldr	r2, [r7, #0]
 8013596:	6879      	ldr	r1, [r7, #4]
 8013598:	68b8      	ldr	r0, [r7, #8]
 801359a:	f7f9 f9a4 	bl	800c8e6 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	bf14      	ite	ne
 80135a4:	2301      	movne	r3, #1
 80135a6:	2300      	moveq	r3, #0
 80135a8:	b2db      	uxtb	r3, r3
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d02d      	beq.n	801360a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	339c      	adds	r3, #156	; 0x9c
 80135b4:	681c      	ldr	r4, [r3, #0]
 80135b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80135ba:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80135be:	4618      	mov	r0, r3
 80135c0:	f7f9 fb15 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80135c4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80135c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80135cc:	9302      	str	r3, [sp, #8]
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	9301      	str	r3, [sp, #4]
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	9300      	str	r3, [sp, #0]
 80135d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80135da:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80135de:	68f9      	ldr	r1, [r7, #12]
 80135e0:	f7fc f8f0 	bl	800f7c4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80135e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80135e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80135ec:	4619      	mov	r1, r3
 80135ee:	68f8      	ldr	r0, [r7, #12]
 80135f0:	47a0      	blx	r4
 80135f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7fc fbfc 	bl	800fdf4 <_ZN18StringEqualFailureD1Ev>
 80135fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013600:	4618      	mov	r0, r3
 8013602:	f7f9 feac 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013606:	e000      	b.n	801360a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013608:	bf00      	nop
}
 801360a:	378c      	adds	r7, #140	; 0x8c
 801360c:	46bd      	mov	sp, r7
 801360e:	bd90      	pop	{r4, r7, pc}

08013610 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013610:	b590      	push	{r4, r7, lr}
 8013612:	b0ab      	sub	sp, #172	; 0xac
 8013614:	af04      	add	r7, sp, #16
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
 801361c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801361e:	68f8      	ldr	r0, [r7, #12]
 8013620:	f000 feae 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013624:	4603      	mov	r3, r0
 8013626:	681a      	ldr	r2, [r3, #0]
 8013628:	3228      	adds	r2, #40	; 0x28
 801362a:	6812      	ldr	r2, [r2, #0]
 801362c:	4618      	mov	r0, r3
 801362e:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d102      	bne.n	801363c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d07c      	beq.n	8013736 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d002      	beq.n	8013648 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d128      	bne.n	801369a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	3398      	adds	r3, #152	; 0x98
 801364e:	681c      	ldr	r4, [r3, #0]
 8013650:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013654:	6839      	ldr	r1, [r7, #0]
 8013656:	4618      	mov	r0, r3
 8013658:	f7f9 fac9 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801365c:	f107 0010 	add.w	r0, r7, #16
 8013660:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013664:	9302      	str	r3, [sp, #8]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	9301      	str	r3, [sp, #4]
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	9300      	str	r3, [sp, #0]
 801366e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013676:	68f9      	ldr	r1, [r7, #12]
 8013678:	f7fc f948 	bl	800f90c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801367c:	f107 0310 	add.w	r3, r7, #16
 8013680:	4619      	mov	r1, r3
 8013682:	68f8      	ldr	r0, [r7, #12]
 8013684:	47a0      	blx	r4
 8013686:	f107 0310 	add.w	r3, r7, #16
 801368a:	4618      	mov	r0, r3
 801368c:	f7fc fb90 	bl	800fdb0 <_ZN24StringEqualNoCaseFailureD1Ev>
 8013690:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013694:	4618      	mov	r0, r3
 8013696:	f7f9 fe62 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 801369a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801369e:	68b9      	ldr	r1, [r7, #8]
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7f9 faa4 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80136a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80136aa:	6879      	ldr	r1, [r7, #4]
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7f9 fa9e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80136b2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80136b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80136ba:	4611      	mov	r1, r2
 80136bc:	4618      	mov	r0, r3
 80136be:	f7f9 fe75 	bl	800d3ac <_ZNK12SimpleString12equalsNoCaseERKS_>
 80136c2:	4603      	mov	r3, r0
 80136c4:	f083 0301 	eor.w	r3, r3, #1
 80136c8:	b2dc      	uxtb	r4, r3
 80136ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7f9 fe45 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80136d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80136d8:	4618      	mov	r0, r3
 80136da:	f7f9 fe40 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80136de:	2c00      	cmp	r4, #0
 80136e0:	d02a      	beq.n	8013738 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	3398      	adds	r3, #152	; 0x98
 80136e8:	681c      	ldr	r4, [r3, #0]
 80136ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80136ee:	6839      	ldr	r1, [r7, #0]
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7f9 fa7c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80136f6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80136fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80136fe:	9302      	str	r3, [sp, #8]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	9301      	str	r3, [sp, #4]
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	9300      	str	r3, [sp, #0]
 8013708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801370c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013710:	68f9      	ldr	r1, [r7, #12]
 8013712:	f7fc f8fb 	bl	800f90c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013716:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801371a:	4619      	mov	r1, r3
 801371c:	68f8      	ldr	r0, [r7, #12]
 801371e:	47a0      	blx	r4
 8013720:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013724:	4618      	mov	r0, r3
 8013726:	f7fc fb43 	bl	800fdb0 <_ZN24StringEqualNoCaseFailureD1Ev>
 801372a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801372e:	4618      	mov	r0, r3
 8013730:	f7f9 fe15 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013734:	e000      	b.n	8013738 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013736:	bf00      	nop
}
 8013738:	379c      	adds	r7, #156	; 0x9c
 801373a:	46bd      	mov	sp, r7
 801373c:	bd90      	pop	{r4, r7, pc}

0801373e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801373e:	b590      	push	{r4, r7, lr}
 8013740:	b0b3      	sub	sp, #204	; 0xcc
 8013742:	af04      	add	r7, sp, #16
 8013744:	60f8      	str	r0, [r7, #12]
 8013746:	60b9      	str	r1, [r7, #8]
 8013748:	607a      	str	r2, [r7, #4]
 801374a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801374c:	68f8      	ldr	r0, [r7, #12]
 801374e:	f000 fe17 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013752:	4603      	mov	r3, r0
 8013754:	681a      	ldr	r2, [r3, #0]
 8013756:	3228      	adds	r2, #40	; 0x28
 8013758:	6812      	ldr	r2, [r2, #0]
 801375a:	4618      	mov	r0, r3
 801375c:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d103      	bne.n	801376c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	2b00      	cmp	r3, #0
 8013768:	f000 80ad 	beq.w	80138c6 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d002      	beq.n	8013778 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d140      	bne.n	80137fa <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	3398      	adds	r3, #152	; 0x98
 801377e:	681c      	ldr	r4, [r3, #0]
 8013780:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013784:	68b9      	ldr	r1, [r7, #8]
 8013786:	4618      	mov	r0, r3
 8013788:	f7f9 fa31 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801378c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013790:	6879      	ldr	r1, [r7, #4]
 8013792:	4618      	mov	r0, r3
 8013794:	f7f9 fa2b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013798:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801379c:	6839      	ldr	r1, [r7, #0]
 801379e:	4618      	mov	r0, r3
 80137a0:	f7f9 fa25 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80137a4:	f107 0010 	add.w	r0, r7, #16
 80137a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80137ac:	9302      	str	r3, [sp, #8]
 80137ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80137b2:	9301      	str	r3, [sp, #4]
 80137b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80137b8:	9300      	str	r3, [sp, #0]
 80137ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80137be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80137c2:	68f9      	ldr	r1, [r7, #12]
 80137c4:	f7fb fce6 	bl	800f194 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80137c8:	f107 0310 	add.w	r3, r7, #16
 80137cc:	4619      	mov	r1, r3
 80137ce:	68f8      	ldr	r0, [r7, #12]
 80137d0:	47a0      	blx	r4
 80137d2:	f107 0310 	add.w	r3, r7, #16
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7fc fbb6 	bl	800ff48 <_ZN15ContainsFailureD1Ev>
 80137dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7f9 fdbc 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80137e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7f9 fdb7 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80137f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7f9 fdb2 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 80137fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80137fe:	6879      	ldr	r1, [r7, #4]
 8013800:	4618      	mov	r0, r3
 8013802:	f7f9 f9f4 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013806:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801380a:	68b9      	ldr	r1, [r7, #8]
 801380c:	4618      	mov	r0, r3
 801380e:	f7f9 f9ee 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013812:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013816:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801381a:	4611      	mov	r1, r2
 801381c:	4618      	mov	r0, r3
 801381e:	f7f9 fa64 	bl	800ccea <_ZNK12SimpleString8containsERKS_>
 8013822:	4603      	mov	r3, r0
 8013824:	f083 0301 	eor.w	r3, r3, #1
 8013828:	b2dc      	uxtb	r4, r3
 801382a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801382e:	4618      	mov	r0, r3
 8013830:	f7f9 fd95 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013834:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013838:	4618      	mov	r0, r3
 801383a:	f7f9 fd90 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801383e:	2c00      	cmp	r4, #0
 8013840:	d042      	beq.n	80138c8 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	3398      	adds	r3, #152	; 0x98
 8013848:	681c      	ldr	r4, [r3, #0]
 801384a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801384e:	68b9      	ldr	r1, [r7, #8]
 8013850:	4618      	mov	r0, r3
 8013852:	f7f9 f9cc 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013856:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801385a:	6879      	ldr	r1, [r7, #4]
 801385c:	4618      	mov	r0, r3
 801385e:	f7f9 f9c6 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013862:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013866:	6839      	ldr	r1, [r7, #0]
 8013868:	4618      	mov	r0, r3
 801386a:	f7f9 f9c0 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801386e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013872:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013876:	9302      	str	r3, [sp, #8]
 8013878:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801387c:	9301      	str	r3, [sp, #4]
 801387e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013882:	9300      	str	r3, [sp, #0]
 8013884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013888:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801388c:	68f9      	ldr	r1, [r7, #12]
 801388e:	f7fb fc81 	bl	800f194 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013892:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013896:	4619      	mov	r1, r3
 8013898:	68f8      	ldr	r0, [r7, #12]
 801389a:	47a0      	blx	r4
 801389c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7fc fb51 	bl	800ff48 <_ZN15ContainsFailureD1Ev>
 80138a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7f9 fd57 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80138b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7f9 fd52 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80138ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80138be:	4618      	mov	r0, r3
 80138c0:	f7f9 fd4d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80138c4:	e000      	b.n	80138c8 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80138c6:	bf00      	nop
}
 80138c8:	37bc      	adds	r7, #188	; 0xbc
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd90      	pop	{r4, r7, pc}

080138ce <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80138ce:	b590      	push	{r4, r7, lr}
 80138d0:	b0b3      	sub	sp, #204	; 0xcc
 80138d2:	af04      	add	r7, sp, #16
 80138d4:	60f8      	str	r0, [r7, #12]
 80138d6:	60b9      	str	r1, [r7, #8]
 80138d8:	607a      	str	r2, [r7, #4]
 80138da:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80138dc:	68f8      	ldr	r0, [r7, #12]
 80138de:	f000 fd4f 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 80138e2:	4603      	mov	r3, r0
 80138e4:	681a      	ldr	r2, [r3, #0]
 80138e6:	3228      	adds	r2, #40	; 0x28
 80138e8:	6812      	ldr	r2, [r2, #0]
 80138ea:	4618      	mov	r0, r3
 80138ec:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d103      	bne.n	80138fc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f000 80ad 	beq.w	8013a56 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d002      	beq.n	8013908 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d140      	bne.n	801398a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	3398      	adds	r3, #152	; 0x98
 801390e:	681c      	ldr	r4, [r3, #0]
 8013910:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013914:	68b9      	ldr	r1, [r7, #8]
 8013916:	4618      	mov	r0, r3
 8013918:	f7f9 f969 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801391c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013920:	6879      	ldr	r1, [r7, #4]
 8013922:	4618      	mov	r0, r3
 8013924:	f7f9 f963 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801392c:	6839      	ldr	r1, [r7, #0]
 801392e:	4618      	mov	r0, r3
 8013930:	f7f9 f95d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013934:	f107 0010 	add.w	r0, r7, #16
 8013938:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801393c:	9302      	str	r3, [sp, #8]
 801393e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013942:	9301      	str	r3, [sp, #4]
 8013944:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013948:	9300      	str	r3, [sp, #0]
 801394a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801394e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013952:	68f9      	ldr	r1, [r7, #12]
 8013954:	f7fb fc1e 	bl	800f194 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013958:	f107 0310 	add.w	r3, r7, #16
 801395c:	4619      	mov	r1, r3
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	47a0      	blx	r4
 8013962:	f107 0310 	add.w	r3, r7, #16
 8013966:	4618      	mov	r0, r3
 8013968:	f7fc faee 	bl	800ff48 <_ZN15ContainsFailureD1Ev>
 801396c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013970:	4618      	mov	r0, r3
 8013972:	f7f9 fcf4 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013976:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801397a:	4618      	mov	r0, r3
 801397c:	f7f9 fcef 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013980:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013984:	4618      	mov	r0, r3
 8013986:	f7f9 fcea 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 801398a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801398e:	6879      	ldr	r1, [r7, #4]
 8013990:	4618      	mov	r0, r3
 8013992:	f7f9 f92c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013996:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801399a:	68b9      	ldr	r1, [r7, #8]
 801399c:	4618      	mov	r0, r3
 801399e:	f7f9 f926 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80139a2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80139a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80139aa:	4611      	mov	r1, r2
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7f9 f9b7 	bl	800cd20 <_ZNK12SimpleString14containsNoCaseERKS_>
 80139b2:	4603      	mov	r3, r0
 80139b4:	f083 0301 	eor.w	r3, r3, #1
 80139b8:	b2dc      	uxtb	r4, r3
 80139ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80139be:	4618      	mov	r0, r3
 80139c0:	f7f9 fccd 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80139c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7f9 fcc8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80139ce:	2c00      	cmp	r4, #0
 80139d0:	d042      	beq.n	8013a58 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	3398      	adds	r3, #152	; 0x98
 80139d8:	681c      	ldr	r4, [r3, #0]
 80139da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80139de:	68b9      	ldr	r1, [r7, #8]
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7f9 f904 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80139e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80139ea:	6879      	ldr	r1, [r7, #4]
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7f9 f8fe 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80139f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80139f6:	6839      	ldr	r1, [r7, #0]
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7f9 f8f8 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80139fe:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013a02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013a06:	9302      	str	r3, [sp, #8]
 8013a08:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013a0c:	9301      	str	r3, [sp, #4]
 8013a0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013a12:	9300      	str	r3, [sp, #0]
 8013a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013a18:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013a1c:	68f9      	ldr	r1, [r7, #12]
 8013a1e:	f7fb fbb9 	bl	800f194 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013a22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013a26:	4619      	mov	r1, r3
 8013a28:	68f8      	ldr	r0, [r7, #12]
 8013a2a:	47a0      	blx	r4
 8013a2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fc fa89 	bl	800ff48 <_ZN15ContainsFailureD1Ev>
 8013a36:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7f9 fc8f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013a40:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7f9 fc8a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013a4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7f9 fc85 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013a54:	e000      	b.n	8013a58 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013a56:	bf00      	nop
}
 8013a58:	37bc      	adds	r7, #188	; 0xbc
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd90      	pop	{r4, r7, pc}

08013a5e <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013a5e:	b590      	push	{r4, r7, lr}
 8013a60:	b099      	sub	sp, #100	; 0x64
 8013a62:	af04      	add	r7, sp, #16
 8013a64:	60f8      	str	r0, [r7, #12]
 8013a66:	60b9      	str	r1, [r7, #8]
 8013a68:	607a      	str	r2, [r7, #4]
 8013a6a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013a6c:	68f8      	ldr	r0, [r7, #12]
 8013a6e:	f000 fc87 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013a72:	4603      	mov	r3, r0
 8013a74:	681a      	ldr	r2, [r3, #0]
 8013a76:	3228      	adds	r2, #40	; 0x28
 8013a78:	6812      	ldr	r2, [r2, #0]
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	4790      	blx	r2
    if (expected != actual)
 8013a7e:	68ba      	ldr	r2, [r7, #8]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d027      	beq.n	8013ad6 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	339c      	adds	r3, #156	; 0x9c
 8013a8c:	681c      	ldr	r4, [r3, #0]
 8013a8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a92:	6839      	ldr	r1, [r7, #0]
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7f9 f8aa 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013a9a:	f107 0014 	add.w	r0, r7, #20
 8013a9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013aa2:	9302      	str	r3, [sp, #8]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	9301      	str	r3, [sp, #4]
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	9300      	str	r3, [sp, #0]
 8013aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013aae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ab0:	68f9      	ldr	r1, [r7, #12]
 8013ab2:	f7fb fc1f 	bl	800f2f4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8013ab6:	f107 0314 	add.w	r3, r7, #20
 8013aba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013abc:	4619      	mov	r1, r3
 8013abe:	68f8      	ldr	r0, [r7, #12]
 8013ac0:	47a0      	blx	r4
 8013ac2:	f107 0314 	add.w	r3, r7, #20
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7fc f9fa 	bl	800fec0 <_ZN17LongsEqualFailureD1Ev>
 8013acc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7f9 fc44 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8013ad6:	bf00      	nop
 8013ad8:	3754      	adds	r7, #84	; 0x54
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd90      	pop	{r4, r7, pc}

08013ade <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013ade:	b590      	push	{r4, r7, lr}
 8013ae0:	b099      	sub	sp, #100	; 0x64
 8013ae2:	af04      	add	r7, sp, #16
 8013ae4:	60f8      	str	r0, [r7, #12]
 8013ae6:	60b9      	str	r1, [r7, #8]
 8013ae8:	607a      	str	r2, [r7, #4]
 8013aea:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013aec:	68f8      	ldr	r0, [r7, #12]
 8013aee:	f000 fc47 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013af2:	4603      	mov	r3, r0
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	3228      	adds	r2, #40	; 0x28
 8013af8:	6812      	ldr	r2, [r2, #0]
 8013afa:	4618      	mov	r0, r3
 8013afc:	4790      	blx	r2
    if (expected != actual)
 8013afe:	68ba      	ldr	r2, [r7, #8]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d027      	beq.n	8013b56 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	339c      	adds	r3, #156	; 0x9c
 8013b0c:	681c      	ldr	r4, [r3, #0]
 8013b0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b12:	6839      	ldr	r1, [r7, #0]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7f9 f86a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013b1a:	f107 0014 	add.w	r0, r7, #20
 8013b1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b22:	9302      	str	r3, [sp, #8]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	9301      	str	r3, [sp, #4]
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	9300      	str	r3, [sp, #0]
 8013b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013b30:	68f9      	ldr	r1, [r7, #12]
 8013b32:	f7fb fcab 	bl	800f48c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8013b36:	f107 0314 	add.w	r3, r7, #20
 8013b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013b3c:	4619      	mov	r1, r3
 8013b3e:	68f8      	ldr	r0, [r7, #12]
 8013b40:	47a0      	blx	r4
 8013b42:	f107 0314 	add.w	r3, r7, #20
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7fc f998 	bl	800fe7c <_ZN25UnsignedLongsEqualFailureD1Ev>
 8013b4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7f9 fc04 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8013b56:	bf00      	nop
 8013b58:	3754      	adds	r7, #84	; 0x54
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd90      	pop	{r4, r7, pc}
	...

08013b60 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013b60:	b082      	sub	sp, #8
 8013b62:	b590      	push	{r4, r7, lr}
 8013b64:	b099      	sub	sp, #100	; 0x64
 8013b66:	af02      	add	r7, sp, #8
 8013b68:	60f8      	str	r0, [r7, #12]
 8013b6a:	1d38      	adds	r0, r7, #4
 8013b6c:	e880 0006 	stmia.w	r0, {r1, r2}
 8013b70:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013b72:	68f8      	ldr	r0, [r7, #12]
 8013b74:	f000 fc04 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	681a      	ldr	r2, [r3, #0]
 8013b7c:	3228      	adds	r2, #40	; 0x28
 8013b7e:	6812      	ldr	r2, [r2, #0]
 8013b80:	4618      	mov	r0, r3
 8013b82:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	339c      	adds	r3, #156	; 0x9c
 8013b8a:	681c      	ldr	r4, [r3, #0]
 8013b8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b90:	4919      	ldr	r1, [pc, #100]	; (8013bf8 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7f9 f82b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013b98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013b9c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7f9 f825 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013ba4:	f107 0014 	add.w	r0, r7, #20
 8013ba8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013bac:	9301      	str	r3, [sp, #4]
 8013bae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013bb2:	9300      	str	r3, [sp, #0]
 8013bb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013bb6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013bb8:	68f9      	ldr	r1, [r7, #12]
 8013bba:	f7fc f84d 	bl	800fc58 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013bbe:	f107 0314 	add.w	r3, r7, #20
 8013bc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	68f8      	ldr	r0, [r7, #12]
 8013bca:	47a0      	blx	r4
 8013bcc:	f107 0314 	add.w	r3, r7, #20
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7fc f887 	bl	800fce4 <_ZN25FeatureUnsupportedFailureD1Ev>
 8013bd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7f9 fbbf 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013be0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7f9 fbba 	bl	800d35e <_ZN12SimpleStringD1Ev>
#endif
}
 8013bea:	bf00      	nop
 8013bec:	375c      	adds	r7, #92	; 0x5c
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013bf4:	b002      	add	sp, #8
 8013bf6:	4770      	bx	lr
 8013bf8:	080251d0 	.word	0x080251d0

08013bfc <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013bfc:	b082      	sub	sp, #8
 8013bfe:	b590      	push	{r4, r7, lr}
 8013c00:	b099      	sub	sp, #100	; 0x64
 8013c02:	af02      	add	r7, sp, #8
 8013c04:	60f8      	str	r0, [r7, #12]
 8013c06:	1d38      	adds	r0, r7, #4
 8013c08:	e880 0006 	stmia.w	r0, {r1, r2}
 8013c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013c0e:	68f8      	ldr	r0, [r7, #12]
 8013c10:	f000 fbb6 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013c14:	4603      	mov	r3, r0
 8013c16:	681a      	ldr	r2, [r3, #0]
 8013c18:	3228      	adds	r2, #40	; 0x28
 8013c1a:	6812      	ldr	r2, [r2, #0]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	339c      	adds	r3, #156	; 0x9c
 8013c26:	681c      	ldr	r4, [r3, #0]
 8013c28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013c2c:	4919      	ldr	r1, [pc, #100]	; (8013c94 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7f8 ffdd 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013c34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013c38:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7f8 ffd7 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013c40:	f107 0014 	add.w	r0, r7, #20
 8013c44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013c48:	9301      	str	r3, [sp, #4]
 8013c4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c52:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013c54:	68f9      	ldr	r1, [r7, #12]
 8013c56:	f7fb ffff 	bl	800fc58 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013c5a:	f107 0314 	add.w	r3, r7, #20
 8013c5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013c62:	4619      	mov	r1, r3
 8013c64:	68f8      	ldr	r0, [r7, #12]
 8013c66:	47a0      	blx	r4
 8013c68:	f107 0314 	add.w	r3, r7, #20
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7fc f839 	bl	800fce4 <_ZN25FeatureUnsupportedFailureD1Ev>
 8013c72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7f9 fb71 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013c7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7f9 fb6c 	bl	800d35e <_ZN12SimpleStringD1Ev>
#endif
}
 8013c86:	bf00      	nop
 8013c88:	375c      	adds	r7, #92	; 0x5c
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013c90:	b002      	add	sp, #8
 8013c92:	4770      	bx	lr
 8013c94:	080251d0 	.word	0x080251d0

08013c98 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013c98:	b590      	push	{r4, r7, lr}
 8013c9a:	b099      	sub	sp, #100	; 0x64
 8013c9c:	af04      	add	r7, sp, #16
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	607b      	str	r3, [r7, #4]
 8013ca2:	460b      	mov	r3, r1
 8013ca4:	72fb      	strb	r3, [r7, #11]
 8013ca6:	4613      	mov	r3, r2
 8013ca8:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8013caa:	68f8      	ldr	r0, [r7, #12]
 8013cac:	f000 fb68 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	681a      	ldr	r2, [r3, #0]
 8013cb4:	3228      	adds	r2, #40	; 0x28
 8013cb6:	6812      	ldr	r2, [r2, #0]
 8013cb8:	4618      	mov	r0, r3
 8013cba:	4790      	blx	r2
    if (expected != actual)
 8013cbc:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8013cc0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	d029      	beq.n	8013d1c <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	339c      	adds	r3, #156	; 0x9c
 8013cce:	681c      	ldr	r4, [r3, #0]
 8013cd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013cd4:	6879      	ldr	r1, [r7, #4]
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f8 ff89 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013cdc:	f107 0014 	add.w	r0, r7, #20
 8013ce0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ce4:	9302      	str	r3, [sp, #8]
 8013ce6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8013cea:	9301      	str	r3, [sp, #4]
 8013cec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013cf0:	9300      	str	r3, [sp, #0]
 8013cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013cf6:	68f9      	ldr	r1, [r7, #12]
 8013cf8:	f7fb fc94 	bl	800f624 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8013cfc:	f107 0314 	add.w	r3, r7, #20
 8013d00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013d02:	4619      	mov	r1, r3
 8013d04:	68f8      	ldr	r0, [r7, #12]
 8013d06:	47a0      	blx	r4
 8013d08:	f107 0314 	add.w	r3, r7, #20
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7fc f893 	bl	800fe38 <_ZN23SignedBytesEqualFailureD1Ev>
 8013d12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7f9 fb21 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8013d1c:	bf00      	nop
 8013d1e:	3754      	adds	r7, #84	; 0x54
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd90      	pop	{r4, r7, pc}

08013d24 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013d24:	b590      	push	{r4, r7, lr}
 8013d26:	b09d      	sub	sp, #116	; 0x74
 8013d28:	af04      	add	r7, sp, #16
 8013d2a:	60f8      	str	r0, [r7, #12]
 8013d2c:	60b9      	str	r1, [r7, #8]
 8013d2e:	607a      	str	r2, [r7, #4]
 8013d30:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013d32:	68f8      	ldr	r0, [r7, #12]
 8013d34:	f000 fb24 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	3228      	adds	r2, #40	; 0x28
 8013d3e:	6812      	ldr	r2, [r2, #0]
 8013d40:	4618      	mov	r0, r3
 8013d42:	4790      	blx	r2
    if (expected != actual)
 8013d44:	68ba      	ldr	r2, [r7, #8]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d03f      	beq.n	8013dcc <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	339c      	adds	r3, #156	; 0x9c
 8013d52:	681c      	ldr	r4, [r3, #0]
 8013d54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d58:	68b9      	ldr	r1, [r7, #8]
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7f9 fdea 	bl	800d934 <_Z10StringFromPKv>
 8013d60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013d64:	6879      	ldr	r1, [r7, #4]
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7f9 fde4 	bl	800d934 <_Z10StringFromPKv>
 8013d6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013d70:	6839      	ldr	r1, [r7, #0]
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7f8 ff3b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013d78:	f107 0014 	add.w	r0, r7, #20
 8013d7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013d80:	9302      	str	r3, [sp, #8]
 8013d82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013d86:	9301      	str	r3, [sp, #4]
 8013d88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d8c:	9300      	str	r3, [sp, #0]
 8013d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013d90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013d92:	68f9      	ldr	r1, [r7, #12]
 8013d94:	f7fb f814 	bl	800edc0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013d98:	f107 0314 	add.w	r3, r7, #20
 8013d9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013d9e:	4619      	mov	r1, r3
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	47a0      	blx	r4
 8013da4:	f107 0314 	add.w	r3, r7, #20
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7fc f955 	bl	8010058 <_ZN13EqualsFailureD1Ev>
 8013dae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7f9 fad3 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013db8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7f9 face 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7f9 fac9 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8013dcc:	bf00      	nop
 8013dce:	3764      	adds	r7, #100	; 0x64
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd90      	pop	{r4, r7, pc}

08013dd4 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013dd4:	b590      	push	{r4, r7, lr}
 8013dd6:	b09d      	sub	sp, #116	; 0x74
 8013dd8:	af04      	add	r7, sp, #16
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	607a      	str	r2, [r7, #4]
 8013de0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013de2:	68f8      	ldr	r0, [r7, #12]
 8013de4:	f000 facc 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013de8:	4603      	mov	r3, r0
 8013dea:	681a      	ldr	r2, [r3, #0]
 8013dec:	3228      	adds	r2, #40	; 0x28
 8013dee:	6812      	ldr	r2, [r2, #0]
 8013df0:	4618      	mov	r0, r3
 8013df2:	4790      	blx	r2
    if (expected != actual)
 8013df4:	68ba      	ldr	r2, [r7, #8]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	d03f      	beq.n	8013e7c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	339c      	adds	r3, #156	; 0x9c
 8013e02:	681c      	ldr	r4, [r3, #0]
 8013e04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e08:	68b9      	ldr	r1, [r7, #8]
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7f9 fdbc 	bl	800d988 <_Z10StringFromPFvvE>
 8013e10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013e14:	6879      	ldr	r1, [r7, #4]
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7f9 fdb6 	bl	800d988 <_Z10StringFromPFvvE>
 8013e1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e20:	6839      	ldr	r1, [r7, #0]
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7f8 fee3 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013e28:	f107 0014 	add.w	r0, r7, #20
 8013e2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e30:	9302      	str	r3, [sp, #8]
 8013e32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013e36:	9301      	str	r3, [sp, #4]
 8013e38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e3c:	9300      	str	r3, [sp, #0]
 8013e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013e42:	68f9      	ldr	r1, [r7, #12]
 8013e44:	f7fa ffbc 	bl	800edc0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013e48:	f107 0314 	add.w	r3, r7, #20
 8013e4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013e4e:	4619      	mov	r1, r3
 8013e50:	68f8      	ldr	r0, [r7, #12]
 8013e52:	47a0      	blx	r4
 8013e54:	f107 0314 	add.w	r3, r7, #20
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7fc f8fd 	bl	8010058 <_ZN13EqualsFailureD1Ev>
 8013e5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7f9 fa7b 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013e68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7f9 fa76 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8013e72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7f9 fa71 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8013e7c:	bf00      	nop
 8013e7e:	3764      	adds	r7, #100	; 0x64
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd90      	pop	{r4, r7, pc}

08013e84 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013e84:	b590      	push	{r4, r7, lr}
 8013e86:	b09d      	sub	sp, #116	; 0x74
 8013e88:	af02      	add	r7, sp, #8
 8013e8a:	6278      	str	r0, [r7, #36]	; 0x24
 8013e8c:	ed87 0b06 	vstr	d0, [r7, #24]
 8013e90:	ed87 1b04 	vstr	d1, [r7, #16]
 8013e94:	ed87 2b02 	vstr	d2, [r7, #8]
 8013e98:	6239      	str	r1, [r7, #32]
 8013e9a:	607a      	str	r2, [r7, #4]
 8013e9c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013e9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ea0:	f000 fa6e 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	3228      	adds	r2, #40	; 0x28
 8013eaa:	6812      	ldr	r2, [r2, #0]
 8013eac:	4618      	mov	r0, r3
 8013eae:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8013eb0:	ed97 2b02 	vldr	d2, [r7, #8]
 8013eb4:	ed97 1b04 	vldr	d1, [r7, #16]
 8013eb8:	ed97 0b06 	vldr	d0, [r7, #24]
 8013ebc:	f7fe fd4a 	bl	8012954 <_Z13doubles_equalddd>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	f083 0301 	eor.w	r3, r3, #1
 8013ec6:	b2db      	uxtb	r3, r3
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d029      	beq.n	8013f20 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8013ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	339c      	adds	r3, #156	; 0x9c
 8013ed2:	681c      	ldr	r4, [r3, #0]
 8013ed4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013ed8:	6a39      	ldr	r1, [r7, #32]
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7f8 fe87 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013ee0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8013ee4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	ed97 2b02 	vldr	d2, [r7, #8]
 8013eee:	ed97 1b04 	vldr	d1, [r7, #16]
 8013ef2:	ed97 0b06 	vldr	d0, [r7, #24]
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	687a      	ldr	r2, [r7, #4]
 8013efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013efc:	f7fa ffa2 	bl	800ee44 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8013f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013f04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013f06:	4619      	mov	r1, r3
 8013f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f0a:	47a0      	blx	r4
 8013f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fc f87f 	bl	8010014 <_ZN19DoublesEqualFailureD1Ev>
 8013f16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7f9 fa1f 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8013f20:	bf00      	nop
 8013f22:	376c      	adds	r7, #108	; 0x6c
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd90      	pop	{r4, r7, pc}

08013f28 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013f28:	b590      	push	{r4, r7, lr}
 8013f2a:	b0a7      	sub	sp, #156	; 0x9c
 8013f2c:	af04      	add	r7, sp, #16
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	607a      	str	r2, [r7, #4]
 8013f34:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f000 fa22 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	681a      	ldr	r2, [r3, #0]
 8013f40:	3228      	adds	r2, #40	; 0x28
 8013f42:	6812      	ldr	r2, [r2, #0]
 8013f44:	4618      	mov	r0, r3
 8013f46:	4790      	blx	r2
	if (length == 0) return;
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d075      	beq.n	801403a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d102      	bne.n	8013f5a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d071      	beq.n	801403e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d002      	beq.n	8013f66 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d12d      	bne.n	8013fc2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	339c      	adds	r3, #156	; 0x9c
 8013f6c:	681c      	ldr	r4, [r3, #0]
 8013f6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013f72:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7f8 fe39 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013f7c:	f107 0010 	add.w	r0, r7, #16
 8013f80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013f84:	9303      	str	r3, [sp, #12]
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	9302      	str	r3, [sp, #8]
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	9301      	str	r3, [sp, #4]
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	9300      	str	r3, [sp, #0]
 8013f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013f96:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013f9a:	68f9      	ldr	r1, [r7, #12]
 8013f9c:	f7fb fd70 	bl	800fa80 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8013fa0:	f107 0310 	add.w	r3, r7, #16
 8013fa4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013fa8:	4619      	mov	r1, r3
 8013faa:	68f8      	ldr	r0, [r7, #12]
 8013fac:	47a0      	blx	r4
 8013fae:	f107 0310 	add.w	r3, r7, #16
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7fb feda 	bl	800fd6c <_ZN18BinaryEqualFailureD1Ev>
 8013fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7f9 f9ce 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8013fc2:	683a      	ldr	r2, [r7, #0]
 8013fc4:	6879      	ldr	r1, [r7, #4]
 8013fc6:	68b8      	ldr	r0, [r7, #8]
 8013fc8:	f7f8 fd30 	bl	800ca2c <_ZN12SimpleString6MemCmpEPKvS1_j>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	bf14      	ite	ne
 8013fd2:	2301      	movne	r3, #1
 8013fd4:	2300      	moveq	r3, #0
 8013fd6:	b2db      	uxtb	r3, r3
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d031      	beq.n	8014040 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	339c      	adds	r3, #156	; 0x9c
 8013fe2:	681c      	ldr	r4, [r3, #0]
 8013fe4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013fe8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7f8 fdfe 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8013ff2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8013ff6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013ffa:	9303      	str	r3, [sp, #12]
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	9302      	str	r3, [sp, #8]
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	9301      	str	r3, [sp, #4]
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	9300      	str	r3, [sp, #0]
 8014008:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801400c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014010:	68f9      	ldr	r1, [r7, #12]
 8014012:	f7fb fd35 	bl	800fa80 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8014016:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801401a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801401e:	4619      	mov	r1, r3
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	47a0      	blx	r4
 8014024:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014028:	4618      	mov	r0, r3
 801402a:	f7fb fe9f 	bl	800fd6c <_ZN18BinaryEqualFailureD1Ev>
 801402e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014032:	4618      	mov	r0, r3
 8014034:	f7f9 f993 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014038:	e002      	b.n	8014040 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 801403a:	bf00      	nop
 801403c:	e000      	b.n	8014040 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801403e:	bf00      	nop
}
 8014040:	378c      	adds	r7, #140	; 0x8c
 8014042:	46bd      	mov	sp, r7
 8014044:	bd90      	pop	{r4, r7, pc}

08014046 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014046:	b590      	push	{r4, r7, lr}
 8014048:	b09b      	sub	sp, #108	; 0x6c
 801404a:	af06      	add	r7, sp, #24
 801404c:	60f8      	str	r0, [r7, #12]
 801404e:	60b9      	str	r1, [r7, #8]
 8014050:	607a      	str	r2, [r7, #4]
 8014052:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014054:	68f8      	ldr	r0, [r7, #12]
 8014056:	f000 f993 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 801405a:	4603      	mov	r3, r0
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	3228      	adds	r2, #40	; 0x28
 8014060:	6812      	ldr	r2, [r2, #0]
 8014062:	4618      	mov	r0, r3
 8014064:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8014066:	68ba      	ldr	r2, [r7, #8]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	405a      	eors	r2, r3
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	4013      	ands	r3, r2
 8014070:	2b00      	cmp	r3, #0
 8014072:	d02b      	beq.n	80140cc <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	339c      	adds	r3, #156	; 0x9c
 801407a:	681c      	ldr	r4, [r3, #0]
 801407c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014080:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014082:	4618      	mov	r0, r3
 8014084:	f7f8 fdb3 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014088:	f107 0014 	add.w	r0, r7, #20
 801408c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014090:	9304      	str	r3, [sp, #16]
 8014092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014094:	9303      	str	r3, [sp, #12]
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	9302      	str	r3, [sp, #8]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	9301      	str	r3, [sp, #4]
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	9300      	str	r3, [sp, #0]
 80140a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80140a6:	68f9      	ldr	r1, [r7, #12]
 80140a8:	f7fb fd7a 	bl	800fba0 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 80140ac:	f107 0314 	add.w	r3, r7, #20
 80140b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80140b2:	4619      	mov	r1, r3
 80140b4:	68f8      	ldr	r0, [r7, #12]
 80140b6:	47a0      	blx	r4
 80140b8:	f107 0314 	add.w	r3, r7, #20
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fb fe33 	bl	800fd28 <_ZN16BitsEqualFailureD1Ev>
 80140c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7f9 f949 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 80140cc:	bf00      	nop
 80140ce:	3754      	adds	r7, #84	; 0x54
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd90      	pop	{r4, r7, pc}

080140d4 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 80140d4:	b590      	push	{r4, r7, lr}
 80140d6:	b09d      	sub	sp, #116	; 0x74
 80140d8:	af04      	add	r7, sp, #16
 80140da:	60f8      	str	r0, [r7, #12]
 80140dc:	607a      	str	r2, [r7, #4]
 80140de:	603b      	str	r3, [r7, #0]
 80140e0:	460b      	mov	r3, r1
 80140e2:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80140e4:	68f8      	ldr	r0, [r7, #12]
 80140e6:	f000 f94b 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 80140ea:	4603      	mov	r3, r0
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	3228      	adds	r2, #40	; 0x28
 80140f0:	6812      	ldr	r2, [r2, #0]
 80140f2:	4618      	mov	r0, r3
 80140f4:	4790      	blx	r2
    if (failed)
 80140f6:	7afb      	ldrb	r3, [r7, #11]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d03f      	beq.n	801417c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	339c      	adds	r3, #156	; 0x9c
 8014102:	681c      	ldr	r4, [r3, #0]
 8014104:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014108:	6879      	ldr	r1, [r7, #4]
 801410a:	4618      	mov	r0, r3
 801410c:	f7f8 fd6f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014110:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014114:	6839      	ldr	r1, [r7, #0]
 8014116:	4618      	mov	r0, r3
 8014118:	f7f8 fd69 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801411c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014120:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014122:	4618      	mov	r0, r3
 8014124:	f7f8 fd63 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014128:	f107 0014 	add.w	r0, r7, #20
 801412c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014130:	9302      	str	r3, [sp, #8]
 8014132:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014136:	9301      	str	r3, [sp, #4]
 8014138:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801413c:	9300      	str	r3, [sp, #0]
 801413e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014140:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014142:	68f9      	ldr	r1, [r7, #12]
 8014144:	f7fa ff30 	bl	800efa8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014148:	f107 0314 	add.w	r3, r7, #20
 801414c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801414e:	4619      	mov	r1, r3
 8014150:	68f8      	ldr	r0, [r7, #12]
 8014152:	47a0      	blx	r4
 8014154:	f107 0314 	add.w	r3, r7, #20
 8014158:	4618      	mov	r0, r3
 801415a:	f7fb ff39 	bl	800ffd0 <_ZN17CheckEqualFailureD1Ev>
 801415e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014162:	4618      	mov	r0, r3
 8014164:	f7f9 f8fb 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014168:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801416c:	4618      	mov	r0, r3
 801416e:	f7f9 f8f6 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014172:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014176:	4618      	mov	r0, r3
 8014178:	f7f9 f8f1 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 801417c:	bf00      	nop
 801417e:	3764      	adds	r7, #100	; 0x64
 8014180:	46bd      	mov	sp, r7
 8014182:	bd90      	pop	{r4, r7, pc}

08014184 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8014184:	b590      	push	{r4, r7, lr}
 8014186:	b09d      	sub	sp, #116	; 0x74
 8014188:	af04      	add	r7, sp, #16
 801418a:	60f8      	str	r0, [r7, #12]
 801418c:	607a      	str	r2, [r7, #4]
 801418e:	603b      	str	r3, [r7, #0]
 8014190:	460b      	mov	r3, r1
 8014192:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8014194:	68f8      	ldr	r0, [r7, #12]
 8014196:	f000 f8f3 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 801419a:	4603      	mov	r3, r0
 801419c:	681a      	ldr	r2, [r3, #0]
 801419e:	3228      	adds	r2, #40	; 0x28
 80141a0:	6812      	ldr	r2, [r2, #0]
 80141a2:	4618      	mov	r0, r3
 80141a4:	4790      	blx	r2
    if (!comparison)
 80141a6:	7afb      	ldrb	r3, [r7, #11]
 80141a8:	f083 0301 	eor.w	r3, r3, #1
 80141ac:	b2db      	uxtb	r3, r3
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d03f      	beq.n	8014232 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	339c      	adds	r3, #156	; 0x9c
 80141b8:	681c      	ldr	r4, [r3, #0]
 80141ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141be:	6879      	ldr	r1, [r7, #4]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7f8 fd14 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80141c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80141ca:	6839      	ldr	r1, [r7, #0]
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7f8 fd0e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80141d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80141d6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80141d8:	4618      	mov	r0, r3
 80141da:	f7f8 fd08 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80141de:	f107 0014 	add.w	r0, r7, #20
 80141e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80141e6:	9302      	str	r3, [sp, #8]
 80141e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80141ec:	9301      	str	r3, [sp, #4]
 80141ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141f2:	9300      	str	r3, [sp, #0]
 80141f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80141f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80141f8:	68f9      	ldr	r1, [r7, #12]
 80141fa:	f7fa ff83 	bl	800f104 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80141fe:	f107 0314 	add.w	r3, r7, #20
 8014202:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014204:	4619      	mov	r1, r3
 8014206:	68f8      	ldr	r0, [r7, #12]
 8014208:	47a0      	blx	r4
 801420a:	f107 0314 	add.w	r3, r7, #20
 801420e:	4618      	mov	r0, r3
 8014210:	f7fb febc 	bl	800ff8c <_ZN17ComparisonFailureD1Ev>
 8014214:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014218:	4618      	mov	r0, r3
 801421a:	f7f9 f8a0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801421e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014222:	4618      	mov	r0, r3
 8014224:	f7f9 f89b 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014228:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801422c:	4618      	mov	r0, r3
 801422e:	f7f9 f896 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8014232:	bf00      	nop
 8014234:	3764      	adds	r7, #100	; 0x64
 8014236:	46bd      	mov	sp, r7
 8014238:	bd90      	pop	{r4, r7, pc}
	...

0801423c <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 801423c:	b5b0      	push	{r4, r5, r7, lr}
 801423e:	b088      	sub	sp, #32
 8014240:	af00      	add	r7, sp, #0
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	60b9      	str	r1, [r7, #8]
 8014246:	607a      	str	r2, [r7, #4]
 8014248:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 801424a:	f107 0310 	add.w	r3, r7, #16
 801424e:	4924      	ldr	r1, [pc, #144]	; (80142e0 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8014250:	4618      	mov	r0, r3
 8014252:	f7f8 fccc 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8014256:	f107 0310 	add.w	r3, r7, #16
 801425a:	6879      	ldr	r1, [r7, #4]
 801425c:	4618      	mov	r0, r3
 801425e:	f7f9 f90d 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8014262:	f107 0310 	add.w	r3, r7, #16
 8014266:	491f      	ldr	r1, [pc, #124]	; (80142e4 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8014268:	4618      	mov	r0, r3
 801426a:	f7f9 f907 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 801426e:	f107 0318 	add.w	r3, r7, #24
 8014272:	6839      	ldr	r1, [r7, #0]
 8014274:	4618      	mov	r0, r3
 8014276:	f7f9 fda1 	bl	800ddbc <_Z10StringFromj>
 801427a:	f107 0218 	add.w	r2, r7, #24
 801427e:	f107 0310 	add.w	r3, r7, #16
 8014282:	4611      	mov	r1, r2
 8014284:	4618      	mov	r0, r3
 8014286:	f7f9 f8e7 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801428a:	f107 0318 	add.w	r3, r7, #24
 801428e:	4618      	mov	r0, r3
 8014290:	f7f9 f865 	bl	800d35e <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8014294:	f107 0310 	add.w	r3, r7, #16
 8014298:	4913      	ldr	r1, [pc, #76]	; (80142e8 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 801429a:	4618      	mov	r0, r3
 801429c:	f7f9 f8ee 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 80142a0:	f107 0310 	add.w	r3, r7, #16
 80142a4:	68b9      	ldr	r1, [r7, #8]
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7f9 f8e8 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 80142ac:	68f8      	ldr	r0, [r7, #12]
 80142ae:	f000 f867 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 80142b2:	4604      	mov	r4, r0
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	3338      	adds	r3, #56	; 0x38
 80142b8:	681d      	ldr	r5, [r3, #0]
 80142ba:	f107 0310 	add.w	r3, r7, #16
 80142be:	4618      	mov	r0, r3
 80142c0:	f7f9 f820 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 80142c4:	4603      	mov	r3, r0
 80142c6:	4619      	mov	r1, r3
 80142c8:	4620      	mov	r0, r4
 80142ca:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 80142cc:	f107 0310 	add.w	r3, r7, #16
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7f9 f844 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 80142d6:	bf00      	nop
 80142d8:	3720      	adds	r7, #32
 80142da:	46bd      	mov	sp, r7
 80142dc:	bdb0      	pop	{r4, r5, r7, pc}
 80142de:	bf00      	nop
 80142e0:	080251e8 	.word	0x080251e8
 80142e4:	080251ec 	.word	0x080251ec
 80142e8:	080251f0 	.word	0x080251f0

080142ec <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 80142ec:	b590      	push	{r4, r7, lr}
 80142ee:	b085      	sub	sp, #20
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	60f8      	str	r0, [r7, #12]
 80142f4:	60b9      	str	r1, [r7, #8]
 80142f6:	607a      	str	r2, [r7, #4]
 80142f8:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	3370      	adds	r3, #112	; 0x70
 8014300:	681c      	ldr	r4, [r3, #0]
 8014302:	68b8      	ldr	r0, [r7, #8]
 8014304:	f7f8 fffe 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 8014308:	4601      	mov	r1, r0
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	687a      	ldr	r2, [r7, #4]
 801430e:	68f8      	ldr	r0, [r7, #12]
 8014310:	47a0      	blx	r4
}
 8014312:	bf00      	nop
 8014314:	3714      	adds	r7, #20
 8014316:	46bd      	mov	sp, r7
 8014318:	bd90      	pop	{r4, r7, pc}

0801431a <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 801431a:	b580      	push	{r7, lr}
 801431c:	b082      	sub	sp, #8
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]
 8014322:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f000 f82b 	bl	8014380 <_ZN10UtestShell13getTestResultEv>
 801432a:	4603      	mov	r3, r0
 801432c:	681a      	ldr	r2, [r3, #0]
 801432e:	323c      	adds	r2, #60	; 0x3c
 8014330:	6812      	ldr	r2, [r2, #0]
 8014332:	6839      	ldr	r1, [r7, #0]
 8014334:	4618      	mov	r0, r3
 8014336:	4790      	blx	r2
}
 8014338:	bf00      	nop
 801433a:	3708      	adds	r7, #8
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}

08014340 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8014340:	b480      	push	{r7}
 8014342:	b083      	sub	sp, #12
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 801434a:	4a04      	ldr	r2, [pc, #16]	; (801435c <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	6013      	str	r3, [r2, #0]
}
 8014350:	bf00      	nop
 8014352:	370c      	adds	r7, #12
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr
 801435c:	20000abc 	.word	0x20000abc

08014360 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8014360:	b480      	push	{r7}
 8014362:	b083      	sub	sp, #12
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
 8014368:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 801436a:	4a04      	ldr	r2, [pc, #16]	; (801437c <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 801436c:	683b      	ldr	r3, [r7, #0]
 801436e:	6013      	str	r3, [r2, #0]
}
 8014370:	bf00      	nop
 8014372:	370c      	adds	r7, #12
 8014374:	46bd      	mov	sp, r7
 8014376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437a:	4770      	bx	lr
 801437c:	20000ac0 	.word	0x20000ac0

08014380 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b082      	sub	sp, #8
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8014388:	4b09      	ldr	r3, [pc, #36]	; (80143b0 <_ZN10UtestShell13getTestResultEv+0x30>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d109      	bne.n	80143a4 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8014390:	f7fe fbb2 	bl	8012af8 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8014394:	4603      	mov	r3, r0
 8014396:	681a      	ldr	r2, [r3, #0]
 8014398:	32a4      	adds	r2, #164	; 0xa4
 801439a:	6812      	ldr	r2, [r2, #0]
 801439c:	4618      	mov	r0, r3
 801439e:	4790      	blx	r2
 80143a0:	4603      	mov	r3, r0
 80143a2:	e001      	b.n	80143a8 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 80143a4:	4b02      	ldr	r3, [pc, #8]	; (80143b0 <_ZN10UtestShell13getTestResultEv+0x30>)
 80143a6:	681b      	ldr	r3, [r3, #0]
}
 80143a8:	4618      	mov	r0, r3
 80143aa:	3708      	adds	r7, #8
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}
 80143b0:	20000abc 	.word	0x20000abc

080143b4 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 80143b8:	4b05      	ldr	r3, [pc, #20]	; (80143d0 <_ZN10UtestShell10getCurrentEv+0x1c>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d103      	bne.n	80143c8 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 80143c0:	f7fe fb9a 	bl	8012af8 <_ZN22OutsideTestRunnerUTest8instanceEv>
 80143c4:	4603      	mov	r3, r0
 80143c6:	e001      	b.n	80143cc <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 80143c8:	4b01      	ldr	r3, [pc, #4]	; (80143d0 <_ZN10UtestShell10getCurrentEv+0x1c>)
 80143ca:	681b      	ldr	r3, [r3, #0]
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	bd80      	pop	{r7, pc}
 80143d0:	20000ac0 	.word	0x20000ac0

080143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 80143d4:	b480      	push	{r7}
 80143d6:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 80143d8:	4b03      	ldr	r3, [pc, #12]	; (80143e8 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 80143da:	681b      	ldr	r3, [r3, #0]
}
 80143dc:	4618      	mov	r0, r3
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr
 80143e6:	bf00      	nop
 80143e8:	20000094 	.word	0x20000094

080143ec <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 80143ec:	b480      	push	{r7}
 80143ee:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 80143f0:	4b03      	ldr	r3, [pc, #12]	; (8014400 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 80143f2:	4a04      	ldr	r2, [pc, #16]	; (8014404 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 80143f4:	601a      	str	r2, [r3, #0]
}
 80143f6:	bf00      	nop
 80143f8:	46bd      	mov	sp, r7
 80143fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fe:	4770      	bx	lr
 8014400:	20000094 	.word	0x20000094
 8014404:	20000090 	.word	0x20000090

08014408 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8014408:	b480      	push	{r7}
 801440a:	b083      	sub	sp, #12
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	4a04      	ldr	r2, [pc, #16]	; (8014424 <_ZN5UtestC1Ev+0x1c>)
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	601a      	str	r2, [r3, #0]
{
}
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	4618      	mov	r0, r3
 801441a:	370c      	adds	r7, #12
 801441c:	46bd      	mov	sp, r7
 801441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014422:	4770      	bx	lr
 8014424:	08028b90 	.word	0x08028b90

08014428 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8014428:	b480      	push	{r7}
 801442a:	b083      	sub	sp, #12
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	4a04      	ldr	r2, [pc, #16]	; (8014444 <_ZN5UtestD1Ev+0x1c>)
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	601a      	str	r2, [r3, #0]
{
}
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	4618      	mov	r0, r3
 801443a:	370c      	adds	r7, #12
 801443c:	46bd      	mov	sp, r7
 801443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014442:	4770      	bx	lr
 8014444:	08028b90 	.word	0x08028b90

08014448 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8014448:	b580      	push	{r7, lr}
 801444a:	b082      	sub	sp, #8
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
}
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f7ff ffe9 	bl	8014428 <_ZN5UtestD1Ev>
 8014456:	2104      	movs	r1, #4
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f7f6 f819 	bl	800a490 <_ZdlPvj>
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	4618      	mov	r0, r3
 8014462:	3708      	adds	r7, #8
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b082      	sub	sp, #8
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8014470:	4b0d      	ldr	r3, [pc, #52]	; (80144a8 <_ZN5Utest3runEv+0x40>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	6879      	ldr	r1, [r7, #4]
 8014476:	480d      	ldr	r0, [pc, #52]	; (80144ac <_ZN5Utest3runEv+0x44>)
 8014478:	4798      	blx	r3
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	bf14      	ite	ne
 8014480:	2301      	movne	r3, #1
 8014482:	2300      	moveq	r3, #0
 8014484:	b2db      	uxtb	r3, r3
 8014486:	2b00      	cmp	r3, #0
 8014488:	d004      	beq.n	8014494 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 801448a:	4b07      	ldr	r3, [pc, #28]	; (80144a8 <_ZN5Utest3runEv+0x40>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	6879      	ldr	r1, [r7, #4]
 8014490:	4807      	ldr	r0, [pc, #28]	; (80144b0 <_ZN5Utest3runEv+0x48>)
 8014492:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8014494:	4b04      	ldr	r3, [pc, #16]	; (80144a8 <_ZN5Utest3runEv+0x40>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	6879      	ldr	r1, [r7, #4]
 801449a:	4806      	ldr	r0, [pc, #24]	; (80144b4 <_ZN5Utest3runEv+0x4c>)
 801449c:	4798      	blx	r3
}
 801449e:	bf00      	nop
 80144a0:	3708      	adds	r7, #8
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
 80144a6:	bf00      	nop
 80144a8:	200000a4 	.word	0x200000a4
 80144ac:	08012b55 	.word	0x08012b55
 80144b0:	08012b71 	.word	0x08012b71
 80144b4:	08012b8d 	.word	0x08012b8d

080144b8 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 80144b8:	b480      	push	{r7}
 80144ba:	b083      	sub	sp, #12
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
}
 80144c0:	bf00      	nop
 80144c2:	370c      	adds	r7, #12
 80144c4:	46bd      	mov	sp, r7
 80144c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ca:	4770      	bx	lr

080144cc <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 80144cc:	b480      	push	{r7}
 80144ce:	b083      	sub	sp, #12
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
}
 80144d4:	bf00      	nop
 80144d6:	370c      	adds	r7, #12
 80144d8:	46bd      	mov	sp, r7
 80144da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144de:	4770      	bx	lr

080144e0 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 80144e0:	b480      	push	{r7}
 80144e2:	b083      	sub	sp, #12
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
}
 80144e8:	bf00      	nop
 80144ea:	370c      	adds	r7, #12
 80144ec:	46bd      	mov	sp, r7
 80144ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f2:	4770      	bx	lr

080144f4 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 80144f4:	b480      	push	{r7}
 80144f6:	b083      	sub	sp, #12
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
 80144fc:	4a04      	ldr	r2, [pc, #16]	; (8014510 <_ZN14TestTerminatorD1Ev+0x1c>)
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	601a      	str	r2, [r3, #0]
{
}
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	4618      	mov	r0, r3
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr
 8014510:	08028b7c 	.word	0x08028b7c

08014514 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 801451c:	2300      	movs	r3, #0
 801451e:	60fb      	str	r3, [r7, #12]
 8014520:	f107 030c 	add.w	r3, r7, #12
 8014524:	4618      	mov	r0, r3
 8014526:	f7f6 f975 	bl	800a814 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 801452a:	f107 030c 	add.w	r3, r7, #12
 801452e:	4618      	mov	r0, r3
 8014530:	f000 f82c 	bl	801458c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8014534:	f107 030c 	add.w	r3, r7, #12
 8014538:	4618      	mov	r0, r3
 801453a:	f000 f835 	bl	80145a8 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 801453e:	bf00      	nop
 8014540:	3710      	adds	r7, #16
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
	...

08014548 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	4a05      	ldr	r2, [pc, #20]	; (8014568 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	601a      	str	r2, [r3, #0]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	4618      	mov	r0, r3
 801455a:	f7ff ffcb 	bl	80144f4 <_ZN14TestTerminatorD1Ev>
{
}
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	4618      	mov	r0, r3
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}
 8014568:	08028b68 	.word	0x08028b68

0801456c <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
}
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f7ff ffe7 	bl	8014548 <_ZN20NormalTestTerminatorD1Ev>
 801457a:	2104      	movs	r1, #4
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f7f5 ff87 	bl	800a490 <_ZdlPvj>
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	4618      	mov	r0, r3
 8014586:	3708      	adds	r7, #8
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}

0801458c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8014594:	4b03      	ldr	r3, [pc, #12]	; (80145a4 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801459a:	bf00      	nop
 801459c:	3708      	adds	r7, #8
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}
 80145a2:	bf00      	nop
 80145a4:	200000a0 	.word	0x200000a0

080145a8 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	4a05      	ldr	r2, [pc, #20]	; (80145c8 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	601a      	str	r2, [r3, #0]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7ff ff9b 	bl	80144f4 <_ZN14TestTerminatorD1Ev>
{
}
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	4618      	mov	r0, r3
 80145c2:	3708      	adds	r7, #8
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}
 80145c8:	08028b54 	.word	0x08028b54

080145cc <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
}
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f7ff ffe7 	bl	80145a8 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 80145da:	2104      	movs	r1, #4
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f7f5 ff57 	bl	800a490 <_ZdlPvj>
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	4618      	mov	r0, r3
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b082      	sub	sp, #8
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 80145f4:	f7fe fbaa 	bl	8012d4c <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7ff ff8a 	bl	8014514 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8014600:	bf00      	nop
 8014602:	3708      	adds	r7, #8
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}

08014608 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	4a05      	ldr	r2, [pc, #20]	; (8014628 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	601a      	str	r2, [r3, #0]
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	4618      	mov	r0, r3
 801461a:	f7ff ff95 	bl	8014548 <_ZN20NormalTestTerminatorD1Ev>
{
}
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	4618      	mov	r0, r3
 8014622:	3708      	adds	r7, #8
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}
 8014628:	08028b40 	.word	0x08028b40

0801462c <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 801462c:	b580      	push	{r7, lr}
 801462e:	b082      	sub	sp, #8
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
}
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f7ff ffe7 	bl	8014608 <_ZN22CrashingTestTerminatorD1Ev>
 801463a:	2104      	movs	r1, #4
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f7f5 ff27 	bl	800a490 <_ZdlPvj>
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	4618      	mov	r0, r3
 8014646:	3708      	adds	r7, #8
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 801464c:	b580      	push	{r7, lr}
 801464e:	b084      	sub	sp, #16
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2200      	movs	r2, #0
 801465a:	601a      	str	r2, [r3, #0]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2200      	movs	r2, #0
 8014660:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d007      	beq.n	8014678 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	3310      	adds	r3, #16
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	6838      	ldr	r0, [r7, #0]
 8014672:	4798      	blx	r3
 8014674:	4603      	mov	r3, r0
 8014676:	e000      	b.n	801467a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8014678:	2300      	movs	r3, #0
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d02d      	beq.n	80146e2 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	685b      	ldr	r3, [r3, #4]
 801468a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801468e:	4293      	cmp	r3, r2
 8014690:	d201      	bcs.n	8014696 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8014692:	009b      	lsls	r3, r3, #2
 8014694:	e001      	b.n	801469a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8014696:	f04f 33ff 	mov.w	r3, #4294967295
 801469a:	f240 3237 	movw	r2, #823	; 0x337
 801469e:	4914      	ldr	r1, [pc, #80]	; (80146f0 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7f5 ff05 	bl	800a4b0 <_ZnajPKci>
 80146a6:	4602      	mov	r2, r0
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80146b0:	2300      	movs	r3, #0
 80146b2:	60bb      	str	r3, [r7, #8]
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	68ba      	ldr	r2, [r7, #8]
 80146ba:	429a      	cmp	r2, r3
 80146bc:	d212      	bcs.n	80146e4 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681a      	ldr	r2, [r3, #0]
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	009b      	lsls	r3, r3, #2
 80146c6:	4413      	add	r3, r2
 80146c8:	68fa      	ldr	r2, [r7, #12]
 80146ca:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	330c      	adds	r3, #12
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	68f8      	ldr	r0, [r7, #12]
 80146d6:	4798      	blx	r3
 80146d8:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	3301      	adds	r3, #1
 80146de:	60bb      	str	r3, [r7, #8]
 80146e0:	e7e8      	b.n	80146b4 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 80146e2:	bf00      	nop
    }
}
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	4618      	mov	r0, r3
 80146e8:	3710      	adds	r7, #16
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	08025078 	.word	0x08025078

080146f4 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d004      	beq.n	801470e <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	4618      	mov	r0, r3
 801470a:	f7f5 fee5 	bl	800a4d8 <_ZdaPv>
}
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	4618      	mov	r0, r3
 8014712:	3708      	adds	r7, #8
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}

08014718 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8014718:	b480      	push	{r7}
 801471a:	b087      	sub	sp, #28
 801471c:	af00      	add	r7, sp, #0
 801471e:	60f8      	str	r0, [r7, #12]
 8014720:	60b9      	str	r1, [r7, #8]
 8014722:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	009b      	lsls	r3, r3, #2
 801472c:	4413      	add	r3, r2
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	681a      	ldr	r2, [r3, #0]
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	009b      	lsls	r3, r3, #2
 801473a:	4413      	add	r3, r2
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	681a      	ldr	r2, [r3, #0]
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	009b      	lsls	r3, r3, #2
 8014748:	4413      	add	r3, r2
 801474a:	697a      	ldr	r2, [r7, #20]
 801474c:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	681a      	ldr	r2, [r3, #0]
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	009b      	lsls	r3, r3, #2
 8014756:	4413      	add	r3, r2
 8014758:	693a      	ldr	r2, [r7, #16]
 801475a:	601a      	str	r2, [r3, #0]
}
 801475c:	bf00      	nop
 801475e:	371c      	adds	r7, #28
 8014760:	46bd      	mov	sp, r7
 8014762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014766:	4770      	bx	lr

08014768 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b084      	sub	sp, #16
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
 8014770:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d028      	beq.n	80147cc <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 801477a:	4b17      	ldr	r3, [pc, #92]	; (80147d8 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	6838      	ldr	r0, [r7, #0]
 8014780:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	685b      	ldr	r3, [r3, #4]
 8014786:	3b01      	subs	r3, #1
 8014788:	60fb      	str	r3, [r7, #12]
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d019      	beq.n	80147c4 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	685b      	ldr	r3, [r3, #4]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d01b      	beq.n	80147d0 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8014798:	4b10      	ldr	r3, [pc, #64]	; (80147dc <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	4798      	blx	r3
 801479e:	4603      	mov	r3, r0
 80147a0:	461a      	mov	r2, r3
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	3301      	adds	r3, #1
 80147a6:	fbb2 f1f3 	udiv	r1, r2, r3
 80147aa:	fb03 f301 	mul.w	r3, r3, r1
 80147ae:	1ad3      	subs	r3, r2, r3
 80147b0:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 80147b2:	68ba      	ldr	r2, [r7, #8]
 80147b4:	68f9      	ldr	r1, [r7, #12]
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7ff ffae 	bl	8014718 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	3b01      	subs	r3, #1
 80147c0:	60fb      	str	r3, [r7, #12]
 80147c2:	e7e2      	b.n	801478a <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f000 f834 	bl	8014832 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80147ca:	e002      	b.n	80147d2 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 80147cc:	bf00      	nop
 80147ce:	e000      	b.n	80147d2 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 80147d0:	bf00      	nop
}
 80147d2:	3710      	adds	r7, #16
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	200000e0 	.word	0x200000e0
 80147dc:	200000e4 	.word	0x200000e4

080147e0 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b086      	sub	sp, #24
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d01c      	beq.n	801482a <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	085b      	lsrs	r3, r3, #1
 80147f6:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 80147f8:	2300      	movs	r3, #0
 80147fa:	617b      	str	r3, [r7, #20]
 80147fc:	697a      	ldr	r2, [r7, #20]
 80147fe:	693b      	ldr	r3, [r7, #16]
 8014800:	429a      	cmp	r2, r3
 8014802:	d20e      	bcs.n	8014822 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	685a      	ldr	r2, [r3, #4]
 8014808:	697b      	ldr	r3, [r7, #20]
 801480a:	1ad3      	subs	r3, r2, r3
 801480c:	3b01      	subs	r3, #1
 801480e:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8014810:	68fa      	ldr	r2, [r7, #12]
 8014812:	6979      	ldr	r1, [r7, #20]
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7ff ff7f 	bl	8014718 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 801481a:	697b      	ldr	r3, [r7, #20]
 801481c:	3301      	adds	r3, #1
 801481e:	617b      	str	r3, [r7, #20]
 8014820:	e7ec      	b.n	80147fc <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f000 f805 	bl	8014832 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8014828:	e000      	b.n	801482c <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 801482a:	bf00      	nop
}
 801482c:	3718      	adds	r7, #24
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}

08014832 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8014832:	b580      	push	{r7, lr}
 8014834:	b084      	sub	sp, #16
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 801483a:	2300      	movs	r3, #0
 801483c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801483e:	2300      	movs	r3, #0
 8014840:	60bb      	str	r3, [r7, #8]
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	685b      	ldr	r3, [r3, #4]
 8014846:	68ba      	ldr	r2, [r7, #8]
 8014848:	429a      	cmp	r2, r3
 801484a:	d221      	bcs.n	8014890 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	681a      	ldr	r2, [r3, #0]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6859      	ldr	r1, [r3, #4]
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	1acb      	subs	r3, r1, r3
 8014858:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801485c:	3b01      	subs	r3, #1
 801485e:	009b      	lsls	r3, r3, #2
 8014860:	4413      	add	r3, r2
 8014862:	6818      	ldr	r0, [r3, #0]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	681a      	ldr	r2, [r3, #0]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6859      	ldr	r1, [r3, #4]
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	1acb      	subs	r3, r1, r3
 8014870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014874:	3b01      	subs	r3, #1
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	4413      	add	r3, r2
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	3308      	adds	r3, #8
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	68f9      	ldr	r1, [r7, #12]
 8014884:	4798      	blx	r3
 8014886:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	3301      	adds	r3, #1
 801488c:	60bb      	str	r3, [r7, #8]
 801488e:	e7d8      	b.n	8014842 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8014890:	bf00      	nop
 8014892:	3710      	adds	r7, #16
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
    return get(0);
 80148a0:	2100      	movs	r1, #0
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f000 f805 	bl	80148b2 <_ZNK22UtestShellPointerArray3getEj>
 80148a8:	4603      	mov	r3, r0
}
 80148aa:	4618      	mov	r0, r3
 80148ac:	3708      	adds	r7, #8
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}

080148b2 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 80148b2:	b480      	push	{r7}
 80148b4:	b083      	sub	sp, #12
 80148b6:	af00      	add	r7, sp, #0
 80148b8:	6078      	str	r0, [r7, #4]
 80148ba:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	685b      	ldr	r3, [r3, #4]
 80148c0:	683a      	ldr	r2, [r7, #0]
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d301      	bcc.n	80148ca <_ZNK22UtestShellPointerArray3getEj+0x18>
 80148c6:	2300      	movs	r3, #0
 80148c8:	e005      	b.n	80148d6 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	009b      	lsls	r3, r3, #2
 80148d2:	4413      	add	r3, r2
 80148d4:	681b      	ldr	r3, [r3, #0]
}
 80148d6:	4618      	mov	r0, r3
 80148d8:	370c      	adds	r7, #12
 80148da:	46bd      	mov	sp, r7
 80148dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e0:	4770      	bx	lr
	...

080148e4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	60f8      	str	r0, [r7, #12]
 80148ec:	60b9      	str	r1, [r7, #8]
 80148ee:	607a      	str	r2, [r7, #4]
 80148f0:	603b      	str	r3, [r7, #0]
 80148f2:	4a10      	ldr	r2, [pc, #64]	; (8014934 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 80148f8:	6879      	ldr	r1, [r7, #4]
 80148fa:	68b8      	ldr	r0, [r7, #8]
 80148fc:	f7fe fc27 	bl	801314e <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8014900:	6839      	ldr	r1, [r7, #0]
 8014902:	68b8      	ldr	r0, [r7, #8]
 8014904:	f7fe fc31 	bl	801316a <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8014908:	69b9      	ldr	r1, [r7, #24]
 801490a:	68b8      	ldr	r0, [r7, #8]
 801490c:	f7fe fc03 	bl	8013116 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8014910:	69f9      	ldr	r1, [r7, #28]
 8014912:	68b8      	ldr	r0, [r7, #8]
 8014914:	f7fe fc0d 	bl	8013132 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8014918:	f7fd fc20 	bl	801215c <_ZN12TestRegistry18getCurrentRegistryEv>
 801491c:	4603      	mov	r3, r0
 801491e:	681a      	ldr	r2, [r3, #0]
 8014920:	3208      	adds	r2, #8
 8014922:	6812      	ldr	r2, [r2, #0]
 8014924:	68b9      	ldr	r1, [r7, #8]
 8014926:	4618      	mov	r0, r3
 8014928:	4790      	blx	r2
}
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	4618      	mov	r0, r3
 801492e:	3710      	adds	r7, #16
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}
 8014934:	08028a84 	.word	0x08028a84

08014938 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8014938:	b480      	push	{r7}
 801493a:	b083      	sub	sp, #12
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	4a04      	ldr	r2, [pc, #16]	; (8014954 <_ZN13TestInstallerD1Ev+0x1c>)
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	601a      	str	r2, [r3, #0]
{
}
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	4618      	mov	r0, r3
 801494a:	370c      	adds	r7, #12
 801494c:	46bd      	mov	sp, r7
 801494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014952:	4770      	bx	lr
 8014954:	08028a84 	.word	0x08028a84

08014958 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8014958:	b580      	push	{r7, lr}
 801495a:	b082      	sub	sp, #8
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
}
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	f7ff ffe9 	bl	8014938 <_ZN13TestInstallerD1Ev>
 8014966:	2104      	movs	r1, #4
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f7f5 fd91 	bl	800a490 <_ZdlPvj>
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	4618      	mov	r0, r3
 8014972:	3708      	adds	r7, #8
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}

08014978 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8014978:	b580      	push	{r7, lr}
 801497a:	b082      	sub	sp, #8
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
 8014980:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d10a      	bne.n	801499e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014988:	683b      	ldr	r3, [r7, #0]
 801498a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801498e:	4293      	cmp	r3, r2
 8014990:	d105      	bne.n	801499e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014992:	4805      	ldr	r0, [pc, #20]	; (80149a8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8014994:	f7ff fe38 	bl	8014608 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8014998:	4804      	ldr	r0, [pc, #16]	; (80149ac <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801499a:	f7ff fdd5 	bl	8014548 <_ZN20NormalTestTerminatorD1Ev>
}
 801499e:	bf00      	nop
 80149a0:	3708      	adds	r7, #8
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}
 80149a6:	bf00      	nop
 80149a8:	20000090 	.word	0x20000090
 80149ac:	2000008c 	.word	0x2000008c

080149b0 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 80149b0:	b580      	push	{r7, lr}
 80149b2:	af00      	add	r7, sp, #0
 80149b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80149b8:	2001      	movs	r0, #1
 80149ba:	f7ff ffdd 	bl	8014978 <_Z41__static_initialization_and_destruction_0ii>
 80149be:	bd80      	pop	{r7, pc}

080149c0 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 80149c0:	b580      	push	{r7, lr}
 80149c2:	af00      	add	r7, sp, #0
 80149c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80149c8:	2000      	movs	r0, #0
 80149ca:	f7ff ffd5 	bl	8014978 <_Z41__static_initialization_and_destruction_0ii>
 80149ce:	bd80      	pop	{r7, pc}

080149d0 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80149d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	ed87 0b00 	vstr	d0, [r7]
 80149da:	683c      	ldr	r4, [r7, #0]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80149e2:	2301      	movs	r3, #1
 80149e4:	461e      	mov	r6, r3
 80149e6:	f04f 32ff 	mov.w	r2, #4294967295
 80149ea:	4b10      	ldr	r3, [pc, #64]	; (8014a2c <_ZSt5isinfd+0x5c>)
 80149ec:	4620      	mov	r0, r4
 80149ee:	4629      	mov	r1, r5
 80149f0:	f7eb feca 	bl	8000788 <__aeabi_dcmpun>
 80149f4:	4603      	mov	r3, r0
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d10b      	bne.n	8014a12 <_ZSt5isinfd+0x42>
 80149fa:	f04f 32ff 	mov.w	r2, #4294967295
 80149fe:	4b0b      	ldr	r3, [pc, #44]	; (8014a2c <_ZSt5isinfd+0x5c>)
 8014a00:	4620      	mov	r0, r4
 8014a02:	4629      	mov	r1, r5
 8014a04:	f7eb fea2 	bl	800074c <__aeabi_dcmple>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d101      	bne.n	8014a12 <_ZSt5isinfd+0x42>
 8014a0e:	2300      	movs	r3, #0
 8014a10:	461e      	mov	r6, r3
 8014a12:	b2f3      	uxtb	r3, r6
 8014a14:	f083 0301 	eor.w	r3, r3, #1
 8014a18:	b2db      	uxtb	r3, r3
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	bf14      	ite	ne
 8014a1e:	2301      	movne	r3, #1
 8014a20:	2300      	moveq	r3, #0
 8014a22:	b2db      	uxtb	r3, r3
 8014a24:	4618      	mov	r0, r3
 8014a26:	370c      	adds	r7, #12
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a2c:	7fefffff 	.word	0x7fefffff

08014a30 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8014a30:	b590      	push	{r4, r7, lr}
 8014a32:	b083      	sub	sp, #12
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	ed87 0b00 	vstr	d0, [r7]
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	461c      	mov	r4, r3
 8014a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014a46:	f7eb fe9f 	bl	8000788 <__aeabi_dcmpun>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d101      	bne.n	8014a54 <_ZSt5isnand+0x24>
 8014a50:	2300      	movs	r3, #0
 8014a52:	461c      	mov	r4, r3
 8014a54:	b2e3      	uxtb	r3, r4
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	bf14      	ite	ne
 8014a5a:	2301      	movne	r3, #1
 8014a5c:	2300      	moveq	r3, #0
 8014a5e:	b2db      	uxtb	r3, r3
 8014a60:	4618      	mov	r0, r3
 8014a62:	370c      	adds	r7, #12
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd90      	pop	{r4, r7, pc}

08014a68 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8014a68:	b590      	push	{r4, r7, lr}
 8014a6a:	b095      	sub	sp, #84	; 0x54
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	60f8      	str	r0, [r7, #12]
 8014a70:	60b9      	str	r1, [r7, #8]
 8014a72:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	3334      	adds	r3, #52	; 0x34
 8014a7a:	681c      	ldr	r4, [r3, #0]
 8014a7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014a80:	490f      	ldr	r1, [pc, #60]	; (8014ac0 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7f8 f8b3 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014a88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014a8c:	f107 0314 	add.w	r3, r7, #20
 8014a90:	68f9      	ldr	r1, [r7, #12]
 8014a92:	4618      	mov	r0, r3
 8014a94:	f7f9 ff0a 	bl	800e8ac <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8014a98:	f107 0314 	add.w	r3, r7, #20
 8014a9c:	4619      	mov	r1, r3
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	47a0      	blx	r4
 8014aa2:	f107 0314 	add.w	r3, r7, #20
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7f9 ffc0 	bl	800ea2c <_ZN11TestFailureD1Ev>
 8014aac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f8 fc54 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8014ab6:	bf00      	nop
 8014ab8:	3754      	adds	r7, #84	; 0x54
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd90      	pop	{r4, r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	08025200 	.word	0x08025200

08014ac4 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8014ac8:	2301      	movs	r3, #1
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	46bd      	mov	sp, r7
 8014ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad2:	4770      	bx	lr

08014ad4 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
 8014adc:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8014ade:	4b13      	ldr	r3, [pc, #76]	; (8014b2c <PlatformSpecificSetJmpImplementation+0x58>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	225c      	movs	r2, #92	; 0x5c
 8014ae4:	fb02 f303 	mul.w	r3, r2, r3
 8014ae8:	4a11      	ldr	r2, [pc, #68]	; (8014b30 <PlatformSpecificSetJmpImplementation+0x5c>)
 8014aea:	4413      	add	r3, r2
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7eb fb97 	bl	8000220 <setjmp>
 8014af2:	4603      	mov	r3, r0
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	bf0c      	ite	eq
 8014af8:	2301      	moveq	r3, #1
 8014afa:	2300      	movne	r3, #0
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d00e      	beq.n	8014b20 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8014b02:	4b0a      	ldr	r3, [pc, #40]	; (8014b2c <PlatformSpecificSetJmpImplementation+0x58>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	3301      	adds	r3, #1
 8014b08:	4a08      	ldr	r2, [pc, #32]	; (8014b2c <PlatformSpecificSetJmpImplementation+0x58>)
 8014b0a:	6013      	str	r3, [r2, #0]
        function(data);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6838      	ldr	r0, [r7, #0]
 8014b10:	4798      	blx	r3
        jmp_buf_index--;
 8014b12:	4b06      	ldr	r3, [pc, #24]	; (8014b2c <PlatformSpecificSetJmpImplementation+0x58>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	3b01      	subs	r3, #1
 8014b18:	4a04      	ldr	r2, [pc, #16]	; (8014b2c <PlatformSpecificSetJmpImplementation+0x58>)
 8014b1a:	6013      	str	r3, [r2, #0]
        return 1;
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	e000      	b.n	8014b22 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8014b20:	2300      	movs	r3, #0
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	3708      	adds	r7, #8
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
 8014b2a:	bf00      	nop
 8014b2c:	20000e5c 	.word	0x20000e5c
 8014b30:	20000ac4 	.word	0x20000ac4

08014b34 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8014b38:	4b07      	ldr	r3, [pc, #28]	; (8014b58 <PlatformSpecificLongJmpImplementation+0x24>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	3b01      	subs	r3, #1
 8014b3e:	4a06      	ldr	r2, [pc, #24]	; (8014b58 <PlatformSpecificLongJmpImplementation+0x24>)
 8014b40:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8014b42:	4b05      	ldr	r3, [pc, #20]	; (8014b58 <PlatformSpecificLongJmpImplementation+0x24>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	225c      	movs	r2, #92	; 0x5c
 8014b48:	fb02 f303 	mul.w	r3, r2, r3
 8014b4c:	4a03      	ldr	r2, [pc, #12]	; (8014b5c <PlatformSpecificLongJmpImplementation+0x28>)
 8014b4e:	4413      	add	r3, r2
 8014b50:	2101      	movs	r1, #1
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7eb fb6a 	bl	800022c <longjmp>
 8014b58:	20000e5c 	.word	0x20000e5c
 8014b5c:	20000ac4 	.word	0x20000ac4

08014b60 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8014b60:	b480      	push	{r7}
 8014b62:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8014b64:	2300      	movs	r3, #0
#endif
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6e:	4770      	bx	lr

08014b70 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b084      	sub	sp, #16
 8014b74:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8014b76:	2000      	movs	r0, #0
 8014b78:	f00e ec4e 	blx	8023418 <__time_veneer>
 8014b7c:	4602      	mov	r2, r0
 8014b7e:	460b      	mov	r3, r1
 8014b80:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8014b84:	463b      	mov	r3, r7
 8014b86:	4618      	mov	r0, r3
 8014b88:	f00b fb7a 	bl	8020280 <localtime>
 8014b8c:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	4a04      	ldr	r2, [pc, #16]	; (8014ba4 <TimeStringImplementation+0x34>)
 8014b92:	2150      	movs	r1, #80	; 0x50
 8014b94:	4804      	ldr	r0, [pc, #16]	; (8014ba8 <TimeStringImplementation+0x38>)
 8014b96:	f00c fc7b 	bl	8021490 <strftime>
    return dateTime;
 8014b9a:	4b03      	ldr	r3, [pc, #12]	; (8014ba8 <TimeStringImplementation+0x38>)
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3710      	adds	r7, #16
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	0802523c 	.word	0x0802523c
 8014ba8:	20000e60 	.word	0x20000e60

08014bac <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b082      	sub	sp, #8
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8014bb6:	6839      	ldr	r1, [r7, #0]
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f00b f997 	bl	801feec <fopen>
 8014bbe:	4603      	mov	r3, r0
#endif
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3708      	adds	r7, #8
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8014bd2:	6839      	ldr	r1, [r7, #0]
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f00b f9f7 	bl	801ffc8 <fputs>
}
 8014bda:	bf00      	nop
 8014bdc:	3708      	adds	r7, #8
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}

08014be2 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8014be2:	b580      	push	{r7, lr}
 8014be4:	b082      	sub	sp, #8
 8014be6:	af00      	add	r7, sp, #0
 8014be8:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f00a ff78 	bl	801fae0 <fclose>
}
 8014bf0:	bf00      	nop
 8014bf2:	3708      	adds	r7, #8
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	af00      	add	r7, sp, #0
  fflush(stdout);
 8014bfc:	4b03      	ldr	r3, [pc, #12]	; (8014c0c <PlatformSpecificFlushImplementation+0x14>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	689b      	ldr	r3, [r3, #8]
 8014c02:	4618      	mov	r0, r3
 8014c04:	f00b f836 	bl	801fc74 <fflush>
}
 8014c08:	bf00      	nop
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	20000108 	.word	0x20000108

08014c10 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8014c1a:	ed97 0b00 	vldr	d0, [r7]
 8014c1e:	f7ff ff07 	bl	8014a30 <_ZSt5isnand>
 8014c22:	4603      	mov	r3, r0
}
 8014c24:	4618      	mov	r0, r3
 8014c26:	3708      	adds	r7, #8
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b082      	sub	sp, #8
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8014c36:	ed97 0b00 	vldr	d0, [r7]
 8014c3a:	f7ff fec9 	bl	80149d0 <_ZSt5isinfd>
 8014c3e:	4603      	mov	r3, r0
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3708      	adds	r7, #8
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8014c48:	b480      	push	{r7}
 8014c4a:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8014c4c:	2300      	movs	r3, #0
#endif

}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	46bd      	mov	sp, r7
 8014c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c56:	4770      	bx	lr

08014c58 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8014c58:	b480      	push	{r7}
 8014c5a:	b083      	sub	sp, #12
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
}
 8014c60:	bf00      	nop
 8014c62:	370c      	adds	r7, #12
 8014c64:	46bd      	mov	sp, r7
 8014c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6a:	4770      	bx	lr

08014c6c <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8014c6c:	b480      	push	{r7}
 8014c6e:	b083      	sub	sp, #12
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
}
 8014c74:	bf00      	nop
 8014c76:	370c      	adds	r7, #12
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7e:	4770      	bx	lr

08014c80 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8014c80:	b480      	push	{r7}
 8014c82:	b083      	sub	sp, #12
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
}
 8014c88:	bf00      	nop
 8014c8a:	370c      	adds	r7, #12
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c92:	4770      	bx	lr

08014c94 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b084      	sub	sp, #16
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	60f8      	str	r0, [r7, #12]
 8014c9c:	60b9      	str	r1, [r7, #8]
 8014c9e:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8014ca0:	4a25      	ldr	r2, [pc, #148]	; (8014d38 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	601a      	str	r2, [r3, #0]
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	68ba      	ldr	r2, [r7, #8]
 8014caa:	605a      	str	r2, [r3, #4]
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	609a      	str	r2, [r3, #8]
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	731a      	strb	r2, [r3, #12]
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	735a      	strb	r2, [r3, #13]
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	739a      	strb	r2, [r3, #14]
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	73da      	strb	r2, [r3, #15]
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2200      	movs	r2, #0
 8014cce:	741a      	strb	r2, [r3, #16]
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	745a      	strb	r2, [r3, #17]
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	749a      	strb	r2, [r3, #18]
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	2200      	movs	r2, #0
 8014ce0:	74da      	strb	r2, [r3, #19]
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	751a      	strb	r2, [r3, #20]
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	2200      	movs	r2, #0
 8014cec:	755a      	strb	r2, [r3, #21]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	759a      	strb	r2, [r3, #22]
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	75da      	strb	r2, [r3, #23]
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	761a      	strb	r2, [r3, #24]
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2201      	movs	r2, #1
 8014d04:	61da      	str	r2, [r3, #28]
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	621a      	str	r2, [r3, #32]
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	625a      	str	r2, [r3, #36]	; 0x24
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	2200      	movs	r2, #0
 8014d16:	629a      	str	r2, [r3, #40]	; 0x28
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	3330      	adds	r3, #48	; 0x30
 8014d24:	4905      	ldr	r1, [pc, #20]	; (8014d3c <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7f7 ff61 	bl	800cbee <_ZN12SimpleStringC1EPKc>
{
}
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3710      	adds	r7, #16
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}
 8014d36:	bf00      	nop
 8014d38:	08028bb0 	.word	0x08028bb0
 8014d3c:	08025250 	.word	0x08025250

08014d40 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b082      	sub	sp, #8
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7f8 fb07 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	4618      	mov	r0, r3
 8014d54:	3708      	adds	r7, #8
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
	...

08014d5c <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8014d5c:	b590      	push	{r4, r7, lr}
 8014d5e:	b085      	sub	sp, #20
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	4a20      	ldr	r2, [pc, #128]	; (8014de8 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d015      	beq.n	8014d9e <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d76:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f00a fda4 	bl	801f8ca <_ZNK10TestFilter7getNextEv>
 8014d82:	4602      	mov	r2, r0
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8014d88:	68fc      	ldr	r4, [r7, #12]
 8014d8a:	2c00      	cmp	r4, #0
 8014d8c:	d0ed      	beq.n	8014d6a <_ZN20CommandLineArgumentsD1Ev+0xe>
 8014d8e:	4620      	mov	r0, r4
 8014d90:	f7ff ffd6 	bl	8014d40 <_ZN10TestFilterD1Ev>
 8014d94:	2110      	movs	r1, #16
 8014d96:	4620      	mov	r0, r4
 8014d98:	f7f5 fb7a 	bl	800a490 <_ZdlPvj>
    while(groupFilters_) {
 8014d9c:	e7e5      	b.n	8014d6a <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d015      	beq.n	8014dd2 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014daa:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014db0:	4618      	mov	r0, r3
 8014db2:	f00a fd8a 	bl	801f8ca <_ZNK10TestFilter7getNextEv>
 8014db6:	4602      	mov	r2, r0
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8014dbc:	68bc      	ldr	r4, [r7, #8]
 8014dbe:	2c00      	cmp	r4, #0
 8014dc0:	d0ed      	beq.n	8014d9e <_ZN20CommandLineArgumentsD1Ev+0x42>
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	f7ff ffbc 	bl	8014d40 <_ZN10TestFilterD1Ev>
 8014dc8:	2110      	movs	r1, #16
 8014dca:	4620      	mov	r0, r4
 8014dcc:	f7f5 fb60 	bl	800a490 <_ZdlPvj>
    while(nameFilters_) {
 8014dd0:	e7e5      	b.n	8014d9e <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	3330      	adds	r3, #48	; 0x30
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7f8 fac1 	bl	800d35e <_ZN12SimpleStringD1Ev>
    }
}
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	4618      	mov	r0, r3
 8014de0:	3714      	adds	r7, #20
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd90      	pop	{r4, r7, pc}
 8014de6:	bf00      	nop
 8014de8:	08028bb0 	.word	0x08028bb0

08014dec <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
}
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f7ff ffb1 	bl	8014d5c <_ZN20CommandLineArgumentsD1Ev>
 8014dfa:	2138      	movs	r1, #56	; 0x38
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	f7f5 fb47 	bl	800a490 <_ZdlPvj>
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	4618      	mov	r0, r3
 8014e06:	3708      	adds	r7, #8
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}

08014e0c <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8014e0c:	b5b0      	push	{r4, r5, r7, lr}
 8014e0e:	b0be      	sub	sp, #248	; 0xf8
 8014e10:	af02      	add	r7, sp, #8
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
 8014e16:	2400      	movs	r4, #0
    bool correctParameters = true;
 8014e18:	2301      	movs	r3, #1
 8014e1a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 8014e1e:	2301      	movs	r3, #1
 8014e20:	613b      	str	r3, [r7, #16]
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	685a      	ldr	r2, [r3, #4]
 8014e26:	693b      	ldr	r3, [r7, #16]
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	f340 83a4 	ble.w	8015576 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	689a      	ldr	r2, [r3, #8]
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	009b      	lsls	r3, r3, #2
 8014e36:	4413      	add	r3, r2
 8014e38:	681a      	ldr	r2, [r3, #0]
 8014e3a:	f107 0308 	add.w	r3, r7, #8
 8014e3e:	4611      	mov	r1, r2
 8014e40:	4618      	mov	r0, r3
 8014e42:	f7f7 fed4 	bl	800cbee <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8014e46:	f107 0314 	add.w	r3, r7, #20
 8014e4a:	49c8      	ldr	r1, [pc, #800]	; (801516c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7f7 fece 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014e52:	f107 0214 	add.w	r2, r7, #20
 8014e56:	f107 0308 	add.w	r3, r7, #8
 8014e5a:	4611      	mov	r1, r2
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7f8 fa8a 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8014e62:	4603      	mov	r3, r0
 8014e64:	461d      	mov	r5, r3
 8014e66:	f107 0314 	add.w	r3, r7, #20
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7f8 fa77 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014e70:	2d00      	cmp	r5, #0
 8014e72:	d006      	beq.n	8014e82 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2201      	movs	r2, #1
 8014e78:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014e80:	e366      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8014e82:	f107 031c 	add.w	r3, r7, #28
 8014e86:	49ba      	ldr	r1, [pc, #744]	; (8015170 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7f7 feb0 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014e8e:	f107 021c 	add.w	r2, r7, #28
 8014e92:	f107 0308 	add.w	r3, r7, #8
 8014e96:	4611      	mov	r1, r2
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7f8 fa6c 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	461d      	mov	r5, r3
 8014ea2:	f107 031c 	add.w	r3, r7, #28
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f7f8 fa59 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014eac:	2d00      	cmp	r5, #0
 8014eae:	d003      	beq.n	8014eb8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	735a      	strb	r2, [r3, #13]
 8014eb6:	e34b      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8014eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ebc:	49ad      	ldr	r1, [pc, #692]	; (8015174 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7f7 fe95 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014ec4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014ec8:	f107 0308 	add.w	r3, r7, #8
 8014ecc:	4611      	mov	r1, r2
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7f8 fa51 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	461d      	mov	r5, r3
 8014ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014edc:	4618      	mov	r0, r3
 8014ede:	f7f8 fa3e 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014ee2:	2d00      	cmp	r5, #0
 8014ee4:	d003      	beq.n	8014eee <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2201      	movs	r2, #1
 8014eea:	739a      	strb	r2, [r3, #14]
 8014eec:	e330      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8014eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014ef2:	49a1      	ldr	r1, [pc, #644]	; (8015178 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f7f7 fe7a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014efa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014efe:	f107 0308 	add.w	r3, r7, #8
 8014f02:	4611      	mov	r1, r2
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7f8 fa36 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	461d      	mov	r5, r3
 8014f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7f8 fa23 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014f18:	2d00      	cmp	r5, #0
 8014f1a:	d003      	beq.n	8014f24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2201      	movs	r2, #1
 8014f20:	73da      	strb	r2, [r3, #15]
 8014f22:	e315      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8014f24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014f28:	4994      	ldr	r1, [pc, #592]	; (801517c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7f7 fe5f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014f30:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014f34:	f107 0308 	add.w	r3, r7, #8
 8014f38:	4611      	mov	r1, r2
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7f8 fa1b 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8014f40:	4603      	mov	r3, r0
 8014f42:	461d      	mov	r5, r3
 8014f44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7f8 fa08 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014f4e:	2d00      	cmp	r5, #0
 8014f50:	d003      	beq.n	8014f5a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2201      	movs	r2, #1
 8014f56:	741a      	strb	r2, [r3, #16]
 8014f58:	e2fa      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8014f5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014f5e:	4988      	ldr	r1, [pc, #544]	; (8015180 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8014f60:	4618      	mov	r0, r3
 8014f62:	f7f7 fe44 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014f66:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014f6a:	f107 0308 	add.w	r3, r7, #8
 8014f6e:	4611      	mov	r1, r2
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7f8 fa00 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8014f76:	4603      	mov	r3, r0
 8014f78:	461d      	mov	r5, r3
 8014f7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7f8 f9ed 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014f84:	2d00      	cmp	r5, #0
 8014f86:	d003      	beq.n	8014f90 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2201      	movs	r2, #1
 8014f8c:	755a      	strb	r2, [r3, #21]
 8014f8e:	e2df      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8014f90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014f94:	497b      	ldr	r1, [pc, #492]	; (8015184 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7f7 fe29 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014f9c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8014fa0:	f107 0308 	add.w	r3, r7, #8
 8014fa4:	4611      	mov	r1, r2
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7f8 f9e5 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8014fac:	4603      	mov	r3, r0
 8014fae:	461d      	mov	r5, r3
 8014fb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7f8 f9d2 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014fba:	2d00      	cmp	r5, #0
 8014fbc:	d003      	beq.n	8014fc6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2201      	movs	r2, #1
 8014fc2:	745a      	strb	r2, [r3, #17]
 8014fc4:	e2c4      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8014fc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014fca:	496f      	ldr	r1, [pc, #444]	; (8015188 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7f7 fe0e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8014fd2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8014fd6:	f107 0308 	add.w	r3, r7, #8
 8014fda:	4611      	mov	r1, r2
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7f8 f9ca 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	461d      	mov	r5, r3
 8014fe6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7f8 f9b7 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8014ff0:	2d00      	cmp	r5, #0
 8014ff2:	d003      	beq.n	8014ffc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	2201      	movs	r2, #1
 8014ff8:	749a      	strb	r2, [r3, #18]
 8014ffa:	e2a9      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8014ffc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015000:	4962      	ldr	r1, [pc, #392]	; (801518c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8015002:	4618      	mov	r0, r3
 8015004:	f7f7 fdf3 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015008:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801500c:	f107 0308 	add.w	r3, r7, #8
 8015010:	4611      	mov	r1, r2
 8015012:	4618      	mov	r0, r3
 8015014:	f7f8 f9af 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8015018:	4603      	mov	r3, r0
 801501a:	461d      	mov	r5, r3
 801501c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015020:	4618      	mov	r0, r3
 8015022:	f7f8 f99c 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015026:	2d00      	cmp	r5, #0
 8015028:	d003      	beq.n	8015032 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2201      	movs	r2, #1
 801502e:	74da      	strb	r2, [r3, #19]
 8015030:	e28e      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 8015032:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015036:	4956      	ldr	r1, [pc, #344]	; (8015190 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8015038:	4618      	mov	r0, r3
 801503a:	f7f7 fdd8 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801503e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8015042:	f107 0308 	add.w	r3, r7, #8
 8015046:	4611      	mov	r1, r2
 8015048:	4618      	mov	r0, r3
 801504a:	f7f8 f994 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801504e:	4603      	mov	r3, r0
 8015050:	461d      	mov	r5, r3
 8015052:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015056:	4618      	mov	r0, r3
 8015058:	f7f8 f981 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801505c:	2d00      	cmp	r5, #0
 801505e:	d003      	beq.n	8015068 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2201      	movs	r2, #1
 8015064:	751a      	strb	r2, [r3, #20]
 8015066:	e273      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8015068:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801506c:	4949      	ldr	r1, [pc, #292]	; (8015194 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 801506e:	4618      	mov	r0, r3
 8015070:	f7f7 fdbd 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015074:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015078:	f107 0308 	add.w	r3, r7, #8
 801507c:	4611      	mov	r1, r2
 801507e:	4618      	mov	r0, r3
 8015080:	f7f8 f979 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8015084:	4603      	mov	r3, r0
 8015086:	461d      	mov	r5, r3
 8015088:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801508c:	4618      	mov	r0, r3
 801508e:	f7f8 f966 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015092:	2d00      	cmp	r5, #0
 8015094:	d003      	beq.n	801509e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	2201      	movs	r2, #1
 801509a:	759a      	strb	r2, [r3, #22]
 801509c:	e258      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 801509e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80150a2:	493d      	ldr	r1, [pc, #244]	; (8015198 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 80150a4:	4618      	mov	r0, r3
 80150a6:	f7f7 fda2 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80150aa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80150ae:	f107 0308 	add.w	r3, r7, #8
 80150b2:	4611      	mov	r1, r2
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7f7 fe5e 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 80150ba:	4603      	mov	r3, r0
 80150bc:	461d      	mov	r5, r3
 80150be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7f8 f94b 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80150c8:	2d00      	cmp	r5, #0
 80150ca:	d009      	beq.n	80150e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6859      	ldr	r1, [r3, #4]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	689a      	ldr	r2, [r3, #8]
 80150d4:	f107 0310 	add.w	r3, r7, #16
 80150d8:	6878      	ldr	r0, [r7, #4]
 80150da:	f000 fb33 	bl	8015744 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 80150de:	e237      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 80150e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80150e4:	492d      	ldr	r1, [pc, #180]	; (801519c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7f7 fd81 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80150ec:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80150f0:	f107 0308 	add.w	r3, r7, #8
 80150f4:	4611      	mov	r1, r2
 80150f6:	4618      	mov	r0, r3
 80150f8:	f7f7 fe3d 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 80150fc:	4603      	mov	r3, r0
 80150fe:	461d      	mov	r5, r3
 8015100:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015104:	4618      	mov	r0, r3
 8015106:	f7f8 f92a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801510a:	2d00      	cmp	r5, #0
 801510c:	d009      	beq.n	8015122 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	6859      	ldr	r1, [r3, #4]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	689a      	ldr	r2, [r3, #8]
 8015116:	f107 0310 	add.w	r3, r7, #16
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f000 fc40 	bl	80159a0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8015120:	e216      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8015122:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015126:	491e      	ldr	r1, [pc, #120]	; (80151a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8015128:	4618      	mov	r0, r3
 801512a:	f7f7 fd60 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801512e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8015132:	f107 0308 	add.w	r3, r7, #8
 8015136:	4611      	mov	r1, r2
 8015138:	4618      	mov	r0, r3
 801513a:	f7f7 fe1c 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 801513e:	4603      	mov	r3, r0
 8015140:	461d      	mov	r5, r3
 8015142:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015146:	4618      	mov	r0, r3
 8015148:	f7f8 f909 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801514c:	2d00      	cmp	r5, #0
 801514e:	d029      	beq.n	80151a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6859      	ldr	r1, [r3, #4]
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	689a      	ldr	r2, [r3, #8]
 8015158:	f107 0310 	add.w	r3, r7, #16
 801515c:	6878      	ldr	r0, [r7, #4]
 801515e:	f000 fc61 	bl	8015a24 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8015162:	4603      	mov	r3, r0
 8015164:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015168:	e1f2      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801516a:	bf00      	nop
 801516c:	08025254 	.word	0x08025254
 8015170:	08025258 	.word	0x08025258
 8015174:	0802525c 	.word	0x0802525c
 8015178:	08025260 	.word	0x08025260
 801517c:	08025264 	.word	0x08025264
 8015180:	08025268 	.word	0x08025268
 8015184:	0802526c 	.word	0x0802526c
 8015188:	08025270 	.word	0x08025270
 801518c:	08025274 	.word	0x08025274
 8015190:	08025278 	.word	0x08025278
 8015194:	0802527c 	.word	0x0802527c
 8015198:	08025280 	.word	0x08025280
 801519c:	08025284 	.word	0x08025284
 80151a0:	08025288 	.word	0x08025288
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 80151a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80151a8:	49b9      	ldr	r1, [pc, #740]	; (8015490 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7f7 fd1f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80151b0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80151b4:	f107 0308 	add.w	r3, r7, #8
 80151b8:	4611      	mov	r1, r2
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7f7 fddb 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 80151c0:	4603      	mov	r3, r0
 80151c2:	461d      	mov	r5, r3
 80151c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80151c8:	4618      	mov	r0, r3
 80151ca:	f7f8 f8c8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80151ce:	2d00      	cmp	r5, #0
 80151d0:	d009      	beq.n	80151e6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6859      	ldr	r1, [r3, #4]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	689a      	ldr	r2, [r3, #8]
 80151da:	f107 0310 	add.w	r3, r7, #16
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f000 fccc 	bl	8015b7c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 80151e4:	e1b4      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 80151e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80151ea:	49aa      	ldr	r1, [pc, #680]	; (8015494 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7f7 fcfe 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80151f2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80151f6:	f107 0308 	add.w	r3, r7, #8
 80151fa:	4611      	mov	r1, r2
 80151fc:	4618      	mov	r0, r3
 80151fe:	f7f7 fdba 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 8015202:	4603      	mov	r3, r0
 8015204:	461d      	mov	r5, r3
 8015206:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801520a:	4618      	mov	r0, r3
 801520c:	f7f8 f8a7 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015210:	2d00      	cmp	r5, #0
 8015212:	d009      	beq.n	8015228 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	6859      	ldr	r1, [r3, #4]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	689a      	ldr	r2, [r3, #8]
 801521c:	f107 0310 	add.w	r3, r7, #16
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f000 fcf1 	bl	8015c08 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8015226:	e193      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8015228:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801522c:	499a      	ldr	r1, [pc, #616]	; (8015498 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 801522e:	4618      	mov	r0, r3
 8015230:	f7f7 fcdd 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015234:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8015238:	f107 0308 	add.w	r3, r7, #8
 801523c:	4611      	mov	r1, r2
 801523e:	4618      	mov	r0, r3
 8015240:	f7f7 fd99 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 8015244:	4603      	mov	r3, r0
 8015246:	461d      	mov	r5, r3
 8015248:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801524c:	4618      	mov	r0, r3
 801524e:	f7f8 f886 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015252:	2d00      	cmp	r5, #0
 8015254:	d009      	beq.n	801526a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	6859      	ldr	r1, [r3, #4]
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	689a      	ldr	r2, [r3, #8]
 801525e:	f107 0310 	add.w	r3, r7, #16
 8015262:	6878      	ldr	r0, [r7, #4]
 8015264:	f000 fd16 	bl	8015c94 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8015268:	e172      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 801526a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801526e:	498b      	ldr	r1, [pc, #556]	; (801549c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8015270:	4618      	mov	r0, r3
 8015272:	f7f7 fcbc 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015276:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801527a:	f107 0308 	add.w	r3, r7, #8
 801527e:	4611      	mov	r1, r2
 8015280:	4618      	mov	r0, r3
 8015282:	f7f7 fd78 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 8015286:	4603      	mov	r3, r0
 8015288:	461d      	mov	r5, r3
 801528a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801528e:	4618      	mov	r0, r3
 8015290:	f7f8 f865 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015294:	2d00      	cmp	r5, #0
 8015296:	d009      	beq.n	80152ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6859      	ldr	r1, [r3, #4]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	689a      	ldr	r2, [r3, #8]
 80152a0:	f107 0310 	add.w	r3, r7, #16
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f000 fd3d 	bl	8015d24 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 80152aa:	e151      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 80152ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80152b0:	497b      	ldr	r1, [pc, #492]	; (80154a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7f7 fc9b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80152b8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80152bc:	f107 0308 	add.w	r3, r7, #8
 80152c0:	4611      	mov	r1, r2
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7f7 fd57 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 80152c8:	4603      	mov	r3, r0
 80152ca:	461d      	mov	r5, r3
 80152cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80152d0:	4618      	mov	r0, r3
 80152d2:	f7f8 f844 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80152d6:	2d00      	cmp	r5, #0
 80152d8:	d009      	beq.n	80152ee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	6859      	ldr	r1, [r3, #4]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	689a      	ldr	r2, [r3, #8]
 80152e2:	f107 0310 	add.w	r3, r7, #16
 80152e6:	6878      	ldr	r0, [r7, #4]
 80152e8:	f000 fd5e 	bl	8015da8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 80152ec:	e130      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 80152ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80152f2:	496c      	ldr	r1, [pc, #432]	; (80154a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7f7 fc7a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80152fa:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80152fe:	f107 0308 	add.w	r3, r7, #8
 8015302:	4611      	mov	r1, r2
 8015304:	4618      	mov	r0, r3
 8015306:	f7f7 fd36 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 801530a:	4603      	mov	r3, r0
 801530c:	461d      	mov	r5, r3
 801530e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015312:	4618      	mov	r0, r3
 8015314:	f7f8 f823 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015318:	2d00      	cmp	r5, #0
 801531a:	d009      	beq.n	8015330 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	6859      	ldr	r1, [r3, #4]
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	689a      	ldr	r2, [r3, #8]
 8015324:	f107 0310 	add.w	r3, r7, #16
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	f000 fd83 	bl	8015e34 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 801532e:	e10f      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8015330:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8015334:	495c      	ldr	r1, [pc, #368]	; (80154a8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8015336:	4618      	mov	r0, r3
 8015338:	f7f7 fc59 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801533c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8015340:	f107 0308 	add.w	r3, r7, #8
 8015344:	4611      	mov	r1, r2
 8015346:	4618      	mov	r0, r3
 8015348:	f7f7 fd15 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 801534c:	4603      	mov	r3, r0
 801534e:	461d      	mov	r5, r3
 8015350:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8015354:	4618      	mov	r0, r3
 8015356:	f7f8 f802 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801535a:	2d00      	cmp	r5, #0
 801535c:	d009      	beq.n	8015372 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	6859      	ldr	r1, [r3, #4]
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	689a      	ldr	r2, [r3, #8]
 8015366:	f107 0310 	add.w	r3, r7, #16
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f000 fda8 	bl	8015ec0 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8015370:	e0ee      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8015372:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015376:	494d      	ldr	r1, [pc, #308]	; (80154ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8015378:	4618      	mov	r0, r3
 801537a:	f7f7 fc38 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801537e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8015382:	f107 0308 	add.w	r3, r7, #8
 8015386:	4611      	mov	r1, r2
 8015388:	4618      	mov	r0, r3
 801538a:	f7f7 fcf4 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 801538e:	4603      	mov	r3, r0
 8015390:	461d      	mov	r5, r3
 8015392:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015396:	4618      	mov	r0, r3
 8015398:	f7f7 ffe1 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801539c:	2d00      	cmp	r5, #0
 801539e:	d00c      	beq.n	80153ba <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	6859      	ldr	r1, [r3, #4]
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	689a      	ldr	r2, [r3, #8]
 80153a8:	f107 0310 	add.w	r3, r7, #16
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f000 fa29 	bl	8015804 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 80153b2:	4603      	mov	r3, r0
 80153b4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80153b8:	e0ca      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 80153ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80153be:	493c      	ldr	r1, [pc, #240]	; (80154b0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80153c0:	4618      	mov	r0, r3
 80153c2:	f7f7 fc14 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80153c6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80153ca:	f107 0308 	add.w	r3, r7, #8
 80153ce:	4611      	mov	r1, r2
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7f7 fcd0 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 80153d6:	4603      	mov	r3, r0
 80153d8:	461d      	mov	r5, r3
 80153da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80153de:	4618      	mov	r0, r3
 80153e0:	f7f7 ffbd 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80153e4:	2d00      	cmp	r5, #0
 80153e6:	d00b      	beq.n	8015400 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	6859      	ldr	r1, [r3, #4]
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	689a      	ldr	r2, [r3, #8]
 80153f0:	f107 0310 	add.w	r3, r7, #16
 80153f4:	482e      	ldr	r0, [pc, #184]	; (80154b0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80153f6:	9000      	str	r0, [sp, #0]
 80153f8:	6878      	ldr	r0, [r7, #4]
 80153fa:	f000 fda9 	bl	8015f50 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80153fe:	e0a7      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8015400:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015404:	492b      	ldr	r1, [pc, #172]	; (80154b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8015406:	4618      	mov	r0, r3
 8015408:	f7f7 fbf1 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801540c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8015410:	f107 0308 	add.w	r3, r7, #8
 8015414:	4611      	mov	r1, r2
 8015416:	4618      	mov	r0, r3
 8015418:	f7f7 fcad 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 801541c:	4603      	mov	r3, r0
 801541e:	461d      	mov	r5, r3
 8015420:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015424:	4618      	mov	r0, r3
 8015426:	f7f7 ff9a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801542a:	2d00      	cmp	r5, #0
 801542c:	d00b      	beq.n	8015446 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	6859      	ldr	r1, [r3, #4]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	689a      	ldr	r2, [r3, #8]
 8015436:	f107 0310 	add.w	r3, r7, #16
 801543a:	481e      	ldr	r0, [pc, #120]	; (80154b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 801543c:	9000      	str	r0, [sp, #0]
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f000 fd86 	bl	8015f50 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8015444:	e084      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8015446:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801544a:	491b      	ldr	r1, [pc, #108]	; (80154b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 801544c:	4618      	mov	r0, r3
 801544e:	f7f7 fbce 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015452:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8015456:	f107 0308 	add.w	r3, r7, #8
 801545a:	4611      	mov	r1, r2
 801545c:	4618      	mov	r0, r3
 801545e:	f7f7 fc8a 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 8015462:	4603      	mov	r3, r0
 8015464:	461d      	mov	r5, r3
 8015466:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801546a:	4618      	mov	r0, r3
 801546c:	f7f7 ff77 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015470:	2d00      	cmp	r5, #0
 8015472:	d023      	beq.n	80154bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	6859      	ldr	r1, [r3, #4]
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	689a      	ldr	r2, [r3, #8]
 801547c:	f107 0310 	add.w	r3, r7, #16
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	f000 fe3b 	bl	80160fc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8015486:	4603      	mov	r3, r0
 8015488:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801548c:	e060      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801548e:	bf00      	nop
 8015490:	0802528c 	.word	0x0802528c
 8015494:	08025290 	.word	0x08025290
 8015498:	08025294 	.word	0x08025294
 801549c:	0802529c 	.word	0x0802529c
 80154a0:	080252a0 	.word	0x080252a0
 80154a4:	080252a4 	.word	0x080252a4
 80154a8:	080252a8 	.word	0x080252a8
 80154ac:	080252b0 	.word	0x080252b0
 80154b0:	080252b4 	.word	0x080252b4
 80154b4:	080252bc 	.word	0x080252bc
 80154b8:	080252cc 	.word	0x080252cc
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 80154bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80154c0:	4930      	ldr	r1, [pc, #192]	; (8015584 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 80154c2:	4618      	mov	r0, r3
 80154c4:	f7f7 fb93 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80154c8:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80154cc:	f107 0308 	add.w	r3, r7, #8
 80154d0:	4611      	mov	r1, r2
 80154d2:	4618      	mov	r0, r3
 80154d4:	f7f7 fc4f 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 80154d8:	4603      	mov	r3, r0
 80154da:	461d      	mov	r5, r3
 80154dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80154e0:	4618      	mov	r0, r3
 80154e2:	f7f7 ff3c 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80154e6:	2d00      	cmp	r5, #0
 80154e8:	d00e      	beq.n	8015508 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	331c      	adds	r3, #28
 80154f0:	681d      	ldr	r5, [r3, #0]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	6859      	ldr	r1, [r3, #4]
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	689a      	ldr	r2, [r3, #8]
 80154fa:	693b      	ldr	r3, [r7, #16]
 80154fc:	6838      	ldr	r0, [r7, #0]
 80154fe:	47a8      	blx	r5
 8015500:	4603      	mov	r3, r0
 8015502:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015506:	e023      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8015508:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801550c:	491e      	ldr	r1, [pc, #120]	; (8015588 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 801550e:	4618      	mov	r0, r3
 8015510:	f7f7 fb6d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015514:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8015518:	f107 0308 	add.w	r3, r7, #8
 801551c:	4611      	mov	r1, r2
 801551e:	4618      	mov	r0, r3
 8015520:	f7f7 fc29 	bl	800cd76 <_ZNK12SimpleString10startsWithERKS_>
 8015524:	4603      	mov	r3, r0
 8015526:	461d      	mov	r5, r3
 8015528:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801552c:	4618      	mov	r0, r3
 801552e:	f7f7 ff16 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015532:	2d00      	cmp	r5, #0
 8015534:	d009      	beq.n	801554a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	6859      	ldr	r1, [r3, #4]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	689a      	ldr	r2, [r3, #8]
 801553e:	f107 0310 	add.w	r3, r7, #16
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f000 fd98 	bl	8016078 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8015548:	e002      	b.n	8015550 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 801554a:	2300      	movs	r3, #0
 801554c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8015550:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8015554:	2b00      	cmp	r3, #0
 8015556:	d102      	bne.n	801555e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8015558:	2400      	movs	r4, #0
 801555a:	2500      	movs	r5, #0
 801555c:	e000      	b.n	8015560 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 801555e:	2501      	movs	r5, #1
 8015560:	f107 0308 	add.w	r3, r7, #8
 8015564:	4618      	mov	r0, r3
 8015566:	f7f7 fefa 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801556a:	2d01      	cmp	r5, #1
 801556c:	d104      	bne.n	8015578 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	3301      	adds	r3, #1
 8015572:	613b      	str	r3, [r7, #16]
 8015574:	e455      	b.n	8014e22 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8015576:	2401      	movs	r4, #1
 8015578:	4623      	mov	r3, r4
}
 801557a:	4618      	mov	r0, r3
 801557c:	37f0      	adds	r7, #240	; 0xf0
 801557e:	46bd      	mov	sp, r7
 8015580:	bdb0      	pop	{r4, r5, r7, pc}
 8015582:	bf00      	nop
 8015584:	08025264 	.word	0x08025264
 8015588:	080252d0 	.word	0x080252d0

0801558c <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 801558c:	b480      	push	{r7}
 801558e:	b083      	sub	sp, #12
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8015594:	4b03      	ldr	r3, [pc, #12]	; (80155a4 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8015596:	4618      	mov	r0, r3
 8015598:	370c      	adds	r7, #12
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr
 80155a2:	bf00      	nop
 80155a4:	080252d4 	.word	0x080252d4

080155a8 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 80155a8:	b480      	push	{r7}
 80155aa:	b083      	sub	sp, #12
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 80155b0:	4b03      	ldr	r3, [pc, #12]	; (80155c0 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	370c      	adds	r7, #12
 80155b6:	46bd      	mov	sp, r7
 80155b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155bc:	4770      	bx	lr
 80155be:	bf00      	nop
 80155c0:	08025404 	.word	0x08025404

080155c4 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 80155c4:	b480      	push	{r7}
 80155c6:	b083      	sub	sp, #12
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
    return needHelp_;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	7b1b      	ldrb	r3, [r3, #12]
}
 80155d0:	4618      	mov	r0, r3
 80155d2:	370c      	adds	r7, #12
 80155d4:	46bd      	mov	sp, r7
 80155d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155da:	4770      	bx	lr

080155dc <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 80155dc:	b480      	push	{r7}
 80155de:	b083      	sub	sp, #12
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
    return verbose_;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	7b5b      	ldrb	r3, [r3, #13]
}
 80155e8:	4618      	mov	r0, r3
 80155ea:	370c      	adds	r7, #12
 80155ec:	46bd      	mov	sp, r7
 80155ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f2:	4770      	bx	lr

080155f4 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 80155f4:	b480      	push	{r7}
 80155f6:	b083      	sub	sp, #12
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	7b9b      	ldrb	r3, [r3, #14]
}
 8015600:	4618      	mov	r0, r3
 8015602:	370c      	adds	r7, #12
 8015604:	46bd      	mov	sp, r7
 8015606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560a:	4770      	bx	lr

0801560c <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 801560c:	b480      	push	{r7}
 801560e:	b083      	sub	sp, #12
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
    return color_;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	7bdb      	ldrb	r3, [r3, #15]
}
 8015618:	4618      	mov	r0, r3
 801561a:	370c      	adds	r7, #12
 801561c:	46bd      	mov	sp, r7
 801561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015622:	4770      	bx	lr

08015624 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8015624:	b480      	push	{r7}
 8015626:	b083      	sub	sp, #12
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	7c5b      	ldrb	r3, [r3, #17]
}
 8015630:	4618      	mov	r0, r3
 8015632:	370c      	adds	r7, #12
 8015634:	46bd      	mov	sp, r7
 8015636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563a:	4770      	bx	lr

0801563c <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 801563c:	b480      	push	{r7}
 801563e:	b083      	sub	sp, #12
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	7c9b      	ldrb	r3, [r3, #18]
}
 8015648:	4618      	mov	r0, r3
 801564a:	370c      	adds	r7, #12
 801564c:	46bd      	mov	sp, r7
 801564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015652:	4770      	bx	lr

08015654 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8015654:	b480      	push	{r7}
 8015656:	b083      	sub	sp, #12
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	7cdb      	ldrb	r3, [r3, #19]
}
 8015660:	4618      	mov	r0, r3
 8015662:	370c      	adds	r7, #12
 8015664:	46bd      	mov	sp, r7
 8015666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566a:	4770      	bx	lr

0801566c <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 801566c:	b480      	push	{r7}
 801566e:	b083      	sub	sp, #12
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	7d1b      	ldrb	r3, [r3, #20]
}
 8015678:	4618      	mov	r0, r3
 801567a:	370c      	adds	r7, #12
 801567c:	46bd      	mov	sp, r7
 801567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015682:	4770      	bx	lr

08015684 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8015684:	b480      	push	{r7}
 8015686:	b083      	sub	sp, #12
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	7c1b      	ldrb	r3, [r3, #16]
}
 8015690:	4618      	mov	r0, r3
 8015692:	370c      	adds	r7, #12
 8015694:	46bd      	mov	sp, r7
 8015696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569a:	4770      	bx	lr

0801569c <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 801569c:	b480      	push	{r7}
 801569e:	b083      	sub	sp, #12
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
    return repeat_;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	69db      	ldr	r3, [r3, #28]
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	370c      	adds	r7, #12
 80156ac:	46bd      	mov	sp, r7
 80156ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b2:	4770      	bx	lr

080156b4 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 80156b4:	b480      	push	{r7}
 80156b6:	b083      	sub	sp, #12
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
    return reversing_;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	7d5b      	ldrb	r3, [r3, #21]
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	370c      	adds	r7, #12
 80156c4:	46bd      	mov	sp, r7
 80156c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ca:	4770      	bx	lr

080156cc <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 80156cc:	b480      	push	{r7}
 80156ce:	b083      	sub	sp, #12
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	7d9b      	ldrb	r3, [r3, #22]
}
 80156d8:	4618      	mov	r0, r3
 80156da:	370c      	adds	r7, #12
 80156dc:	46bd      	mov	sp, r7
 80156de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e2:	4770      	bx	lr

080156e4 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
    return shuffling_;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	7ddb      	ldrb	r3, [r3, #23]
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	370c      	adds	r7, #12
 80156f4:	46bd      	mov	sp, r7
 80156f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fa:	4770      	bx	lr

080156fc <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 80156fc:	b480      	push	{r7}
 80156fe:	b083      	sub	sp, #12
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	6a1b      	ldr	r3, [r3, #32]
}
 8015708:	4618      	mov	r0, r3
 801570a:	370c      	adds	r7, #12
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr

08015714 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8015714:	b480      	push	{r7}
 8015716:	b083      	sub	sp, #12
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8015720:	4618      	mov	r0, r3
 8015722:	370c      	adds	r7, #12
 8015724:	46bd      	mov	sp, r7
 8015726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572a:	4770      	bx	lr

0801572c <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 801572c:	b480      	push	{r7}
 801572e:	b083      	sub	sp, #12
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015738:	4618      	mov	r0, r3
 801573a:	370c      	adds	r7, #12
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr

08015744 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b086      	sub	sp, #24
 8015748:	af00      	add	r7, sp, #0
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	607a      	str	r2, [r7, #4]
 8015750:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	2200      	movs	r2, #0
 8015756:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	009b      	lsls	r3, r3, #2
 801575e:	687a      	ldr	r2, [r7, #4]
 8015760:	4413      	add	r3, r2
 8015762:	681a      	ldr	r2, [r3, #0]
 8015764:	f107 0310 	add.w	r3, r7, #16
 8015768:	4611      	mov	r1, r2
 801576a:	4618      	mov	r0, r3
 801576c:	f7f7 fa3f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8015770:	f107 0310 	add.w	r3, r7, #16
 8015774:	4618      	mov	r0, r3
 8015776:	f7f7 fdd1 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 801577a:	4603      	mov	r3, r0
 801577c:	2b02      	cmp	r3, #2
 801577e:	bf8c      	ite	hi
 8015780:	2301      	movhi	r3, #1
 8015782:	2300      	movls	r3, #0
 8015784:	b2db      	uxtb	r3, r3
 8015786:	2b00      	cmp	r3, #0
 8015788:	d00e      	beq.n	80157a8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	009b      	lsls	r3, r3, #2
 8015790:	687a      	ldr	r2, [r7, #4]
 8015792:	4413      	add	r3, r2
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	3302      	adds	r3, #2
 8015798:	4618      	mov	r0, r3
 801579a:	f7f7 f824 	bl	800c7e6 <_ZN12SimpleString4AtoIEPKc>
 801579e:	4603      	mov	r3, r0
 80157a0:	461a      	mov	r2, r3
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	61da      	str	r2, [r3, #28]
 80157a6:	e01c      	b.n	80157e2 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 80157a8:	683b      	ldr	r3, [r7, #0]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	3301      	adds	r3, #1
 80157ae:	68ba      	ldr	r2, [r7, #8]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	dd16      	ble.n	80157e2 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	3301      	adds	r3, #1
 80157ba:	009b      	lsls	r3, r3, #2
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	4413      	add	r3, r2
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7f7 f80f 	bl	800c7e6 <_ZN12SimpleString4AtoIEPKc>
 80157c8:	4603      	mov	r3, r0
 80157ca:	461a      	mov	r2, r3
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	69db      	ldr	r3, [r3, #28]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d004      	beq.n	80157e2 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	1c5a      	adds	r2, r3, #1
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	69db      	ldr	r3, [r3, #28]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d102      	bne.n	80157f0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	2202      	movs	r2, #2
 80157ee:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 80157f0:	f107 0310 	add.w	r3, r7, #16
 80157f4:	4618      	mov	r0, r3
 80157f6:	f7f7 fdb2 	bl	800d35e <_ZN12SimpleStringD1Ev>

}
 80157fa:	bf00      	nop
 80157fc:	3718      	adds	r7, #24
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
	...

08015804 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8015804:	b590      	push	{r4, r7, lr}
 8015806:	b089      	sub	sp, #36	; 0x24
 8015808:	af00      	add	r7, sp, #0
 801580a:	60f8      	str	r0, [r7, #12]
 801580c:	60b9      	str	r1, [r7, #8]
 801580e:	607a      	str	r2, [r7, #4]
 8015810:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	2201      	movs	r2, #1
 8015816:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8015818:	4b34      	ldr	r3, [pc, #208]	; (80158ec <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	4798      	blx	r3
 801581e:	4603      	mov	r3, r0
 8015820:	461a      	mov	r2, r3
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	6a1b      	ldr	r3, [r3, #32]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d104      	bne.n	8015838 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	6a1b      	ldr	r3, [r3, #32]
 8015832:	1c5a      	adds	r2, r3, #1
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	009b      	lsls	r3, r3, #2
 801583e:	687a      	ldr	r2, [r7, #4]
 8015840:	4413      	add	r3, r2
 8015842:	681a      	ldr	r2, [r3, #0]
 8015844:	f107 0314 	add.w	r3, r7, #20
 8015848:	4611      	mov	r1, r2
 801584a:	4618      	mov	r0, r3
 801584c:	f7f7 f9cf 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8015850:	f107 0314 	add.w	r3, r7, #20
 8015854:	4618      	mov	r0, r3
 8015856:	f7f7 fd61 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 801585a:	4603      	mov	r3, r0
 801585c:	2b02      	cmp	r3, #2
 801585e:	bf8c      	ite	hi
 8015860:	2301      	movhi	r3, #1
 8015862:	2300      	movls	r3, #0
 8015864:	b2db      	uxtb	r3, r3
 8015866:	2b00      	cmp	r3, #0
 8015868:	d010      	beq.n	801588c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	2201      	movs	r2, #1
 801586e:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8015870:	683b      	ldr	r3, [r7, #0]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	009b      	lsls	r3, r3, #2
 8015876:	687a      	ldr	r2, [r7, #4]
 8015878:	4413      	add	r3, r2
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	3302      	adds	r3, #2
 801587e:	4618      	mov	r0, r3
 8015880:	f7f6 ff78 	bl	800c774 <_ZN12SimpleString4AtoUEPKc>
 8015884:	4602      	mov	r2, r0
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	621a      	str	r2, [r3, #32]
 801588a:	e01e      	b.n	80158ca <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	3301      	adds	r3, #1
 8015892:	68ba      	ldr	r2, [r7, #8]
 8015894:	429a      	cmp	r2, r3
 8015896:	dd18      	ble.n	80158ca <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	3301      	adds	r3, #1
 801589e:	009b      	lsls	r3, r3, #2
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	4413      	add	r3, r2
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7f6 ff64 	bl	800c774 <_ZN12SimpleString4AtoUEPKc>
 80158ac:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 80158ae:	69fb      	ldr	r3, [r7, #28]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d00a      	beq.n	80158ca <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	2201      	movs	r2, #1
 80158b8:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	69fa      	ldr	r2, [r7, #28]
 80158be:	621a      	str	r2, [r3, #32]
            i++;
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	1c5a      	adds	r2, r3, #1
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	6a1b      	ldr	r3, [r3, #32]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	bf14      	ite	ne
 80158d2:	2301      	movne	r3, #1
 80158d4:	2300      	moveq	r3, #0
 80158d6:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 80158d8:	f107 0314 	add.w	r3, r7, #20
 80158dc:	4618      	mov	r0, r3
 80158de:	f7f7 fd3e 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 80158e2:	4623      	mov	r3, r4
}
 80158e4:	4618      	mov	r0, r3
 80158e6:	3724      	adds	r7, #36	; 0x24
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd90      	pop	{r4, r7, pc}
 80158ec:	200000a8 	.word	0x200000a8

080158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b088      	sub	sp, #32
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	60f8      	str	r0, [r7, #12]
 80158f8:	60b9      	str	r1, [r7, #8]
 80158fa:	607a      	str	r2, [r7, #4]
 80158fc:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 80158fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015900:	f7f7 fd0c 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 8015904:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8015906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	009b      	lsls	r3, r3, #2
 801590c:	683a      	ldr	r2, [r7, #0]
 801590e:	4413      	add	r3, r2
 8015910:	681a      	ldr	r2, [r3, #0]
 8015912:	f107 0314 	add.w	r3, r7, #20
 8015916:	4611      	mov	r1, r2
 8015918:	4618      	mov	r0, r3
 801591a:	f7f7 f968 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 801591e:	f107 0314 	add.w	r3, r7, #20
 8015922:	4618      	mov	r0, r3
 8015924:	f7f7 fcfa 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 8015928:	4602      	mov	r2, r0
 801592a:	69fb      	ldr	r3, [r7, #28]
 801592c:	4293      	cmp	r3, r2
 801592e:	bf34      	ite	cc
 8015930:	2301      	movcc	r3, #1
 8015932:	2300      	movcs	r3, #0
 8015934:	b2db      	uxtb	r3, r3
 8015936:	2b00      	cmp	r3, #0
 8015938:	d00c      	beq.n	8015954 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 801593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	683a      	ldr	r2, [r7, #0]
 8015942:	4413      	add	r3, r2
 8015944:	681a      	ldr	r2, [r3, #0]
 8015946:	69fb      	ldr	r3, [r7, #28]
 8015948:	4413      	add	r3, r2
 801594a:	4619      	mov	r1, r3
 801594c:	68f8      	ldr	r0, [r7, #12]
 801594e:	f7f7 f94e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015952:	e019      	b.n	8015988 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8015954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	3301      	adds	r3, #1
 801595a:	687a      	ldr	r2, [r7, #4]
 801595c:	429a      	cmp	r2, r3
 801595e:	dd0f      	ble.n	8015980 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8015960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	1c5a      	adds	r2, r3, #1
 8015966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015968:	601a      	str	r2, [r3, #0]
 801596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	683a      	ldr	r2, [r7, #0]
 8015972:	4413      	add	r3, r2
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	4619      	mov	r1, r3
 8015978:	68f8      	ldr	r0, [r7, #12]
 801597a:	f7f7 f938 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801597e:	e003      	b.n	8015988 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8015980:	4906      	ldr	r1, [pc, #24]	; (801599c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8015982:	68f8      	ldr	r0, [r7, #12]
 8015984:	f7f7 f933 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8015988:	f107 0314 	add.w	r3, r7, #20
 801598c:	4618      	mov	r0, r3
 801598e:	f7f7 fce6 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8015992:	68f8      	ldr	r0, [r7, #12]
 8015994:	3720      	adds	r7, #32
 8015996:	46bd      	mov	sp, r7
 8015998:	bd80      	pop	{r7, pc}
 801599a:	bf00      	nop
 801599c:	08025250 	.word	0x08025250

080159a0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 80159a0:	b5b0      	push	{r4, r5, r7, lr}
 80159a2:	b08c      	sub	sp, #48	; 0x30
 80159a4:	af02      	add	r7, sp, #8
 80159a6:	60f8      	str	r0, [r7, #12]
 80159a8:	60b9      	str	r1, [r7, #8]
 80159aa:	607a      	str	r2, [r7, #4]
 80159ac:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 80159ae:	f107 031c 	add.w	r3, r7, #28
 80159b2:	491a      	ldr	r1, [pc, #104]	; (8015a1c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 80159b4:	4618      	mov	r0, r3
 80159b6:	f7f7 f91a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80159ba:	f107 0014 	add.w	r0, r7, #20
 80159be:	f107 031c 	add.w	r3, r7, #28
 80159c2:	9301      	str	r3, [sp, #4]
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	9300      	str	r3, [sp, #0]
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	68ba      	ldr	r2, [r7, #8]
 80159cc:	68f9      	ldr	r1, [r7, #12]
 80159ce:	f7ff ff8f 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80159d2:	f107 0514 	add.w	r5, r7, #20
 80159d6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80159da:	4911      	ldr	r1, [pc, #68]	; (8015a20 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 80159dc:	2010      	movs	r0, #16
 80159de:	f7f4 fd43 	bl	800a468 <_ZnwjPKci>
 80159e2:	4604      	mov	r4, r0
 80159e4:	4629      	mov	r1, r5
 80159e6:	4620      	mov	r0, r4
 80159e8:	f009 ff40 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 80159ec:	627c      	str	r4, [r7, #36]	; 0x24
 80159ee:	f107 0314 	add.w	r3, r7, #20
 80159f2:	4618      	mov	r0, r3
 80159f4:	f7f7 fcb3 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80159f8:	f107 031c 	add.w	r3, r7, #28
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7f7 fcae 	bl	800d35e <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a06:	4619      	mov	r1, r3
 8015a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a0a:	f009 ff4f 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8015a0e:	4602      	mov	r2, r0
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015a14:	bf00      	nop
 8015a16:	3728      	adds	r7, #40	; 0x28
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8015a1c:	08025284 	.word	0x08025284
 8015a20:	08025c18 	.word	0x08025c18

08015a24 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8015a24:	b5b0      	push	{r4, r5, r7, lr}
 8015a26:	b092      	sub	sp, #72	; 0x48
 8015a28:	af02      	add	r7, sp, #8
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
 8015a30:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a36:	494e      	ldr	r1, [pc, #312]	; (8015b70 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7f7 f8d8 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015a3e:	f107 0020 	add.w	r0, r7, #32
 8015a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a46:	9301      	str	r3, [sp, #4]
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	9300      	str	r3, [sp, #0]
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	68ba      	ldr	r2, [r7, #8]
 8015a50:	68f9      	ldr	r1, [r7, #12]
 8015a52:	f7ff ff4d 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7f7 fc7f 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8015a60:	f107 0310 	add.w	r3, r7, #16
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7f8 fb8f 	bl	800e188 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8015a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a6e:	4941      	ldr	r1, [pc, #260]	; (8015b74 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7f7 f8bc 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015a76:	f107 0210 	add.w	r2, r7, #16
 8015a7a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015a7e:	f107 0320 	add.w	r3, r7, #32
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7f7 fa1f 	bl	800cec6 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8015a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7f7 fc66 	bl	800d35e <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8015a92:	f107 0310 	add.w	r3, r7, #16
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7f8 fc1b 	bl	800e2d2 <_ZNK22SimpleStringCollection4sizeEv>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	2b02      	cmp	r3, #2
 8015aa0:	bf14      	ite	ne
 8015aa2:	2301      	movne	r3, #1
 8015aa4:	2300      	moveq	r3, #0
 8015aa6:	b2db      	uxtb	r3, r3
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d001      	beq.n	8015ab0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8015aac:	2400      	movs	r4, #0
 8015aae:	e04f      	b.n	8015b50 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8015ab0:	f107 0310 	add.w	r3, r7, #16
 8015ab4:	2100      	movs	r1, #0
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f7f8 fc18 	bl	800e2ec <_ZN22SimpleStringCollectionixEj>
 8015abc:	4604      	mov	r4, r0
 8015abe:	f107 0310 	add.w	r3, r7, #16
 8015ac2:	2100      	movs	r1, #0
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7f8 fc11 	bl	800e2ec <_ZN22SimpleStringCollectionixEj>
 8015aca:	4603      	mov	r3, r0
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f7 fc25 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	3b01      	subs	r3, #1
 8015ad6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8015ada:	2200      	movs	r2, #0
 8015adc:	4621      	mov	r1, r4
 8015ade:	f7f7 fd47 	bl	800d570 <_ZNK12SimpleString9subStringEjj>
 8015ae2:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8015ae6:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8015aea:	4923      	ldr	r1, [pc, #140]	; (8015b78 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015aec:	2010      	movs	r0, #16
 8015aee:	f7f4 fcbb 	bl	800a468 <_ZnwjPKci>
 8015af2:	4604      	mov	r4, r0
 8015af4:	4629      	mov	r1, r5
 8015af6:	4620      	mov	r0, r4
 8015af8:	f009 feb8 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b00:	4619      	mov	r1, r3
 8015b02:	4620      	mov	r0, r4
 8015b04:	f009 fed2 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8015b08:	4602      	mov	r2, r0
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	625a      	str	r2, [r3, #36]	; 0x24
 8015b0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015b12:	4618      	mov	r0, r3
 8015b14:	f7f7 fc23 	bl	800d35e <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8015b18:	f107 0310 	add.w	r3, r7, #16
 8015b1c:	2101      	movs	r1, #1
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f7f8 fbe4 	bl	800e2ec <_ZN22SimpleStringCollectionixEj>
 8015b24:	4605      	mov	r5, r0
 8015b26:	f240 121f 	movw	r2, #287	; 0x11f
 8015b2a:	4913      	ldr	r1, [pc, #76]	; (8015b78 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015b2c:	2010      	movs	r0, #16
 8015b2e:	f7f4 fc9b 	bl	800a468 <_ZnwjPKci>
 8015b32:	4604      	mov	r4, r0
 8015b34:	4629      	mov	r1, r5
 8015b36:	4620      	mov	r0, r4
 8015b38:	f009 fe98 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b40:	4619      	mov	r1, r3
 8015b42:	4620      	mov	r0, r4
 8015b44:	f009 feb2 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8015b48:	4602      	mov	r2, r0
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8015b4e:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8015b50:	f107 0310 	add.w	r3, r7, #16
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7f8 fb8b 	bl	800e270 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015b5a:	f107 0320 	add.w	r3, r7, #32
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7f7 fbfd 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015b64:	4623      	mov	r3, r4
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3740      	adds	r7, #64	; 0x40
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8015b6e:	bf00      	nop
 8015b70:	08025288 	.word	0x08025288
 8015b74:	08025c38 	.word	0x08025c38
 8015b78:	08025c18 	.word	0x08025c18

08015b7c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8015b7c:	b5b0      	push	{r4, r5, r7, lr}
 8015b7e:	b08c      	sub	sp, #48	; 0x30
 8015b80:	af02      	add	r7, sp, #8
 8015b82:	60f8      	str	r0, [r7, #12]
 8015b84:	60b9      	str	r1, [r7, #8]
 8015b86:	607a      	str	r2, [r7, #4]
 8015b88:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8015b8a:	f107 031c 	add.w	r3, r7, #28
 8015b8e:	491c      	ldr	r1, [pc, #112]	; (8015c00 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8015b90:	4618      	mov	r0, r3
 8015b92:	f7f7 f82c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015b96:	f107 0014 	add.w	r0, r7, #20
 8015b9a:	f107 031c 	add.w	r3, r7, #28
 8015b9e:	9301      	str	r3, [sp, #4]
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	9300      	str	r3, [sp, #0]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	68ba      	ldr	r2, [r7, #8]
 8015ba8:	68f9      	ldr	r1, [r7, #12]
 8015baa:	f7ff fea1 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015bae:	f107 0514 	add.w	r5, r7, #20
 8015bb2:	f240 1225 	movw	r2, #293	; 0x125
 8015bb6:	4913      	ldr	r1, [pc, #76]	; (8015c04 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8015bb8:	2010      	movs	r0, #16
 8015bba:	f7f4 fc55 	bl	800a468 <_ZnwjPKci>
 8015bbe:	4604      	mov	r4, r0
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	f009 fe52 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 8015bc8:	627c      	str	r4, [r7, #36]	; 0x24
 8015bca:	f107 0314 	add.w	r3, r7, #20
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7f7 fbc5 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015bd4:	f107 031c 	add.w	r3, r7, #28
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7f7 fbc0 	bl	800d35e <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015be0:	f009 fe7f 	bl	801f8e2 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be8:	4619      	mov	r1, r3
 8015bea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015bec:	f009 fe5e 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8015bf0:	4602      	mov	r2, r0
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015bf6:	bf00      	nop
 8015bf8:	3728      	adds	r7, #40	; 0x28
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8015bfe:	bf00      	nop
 8015c00:	0802528c 	.word	0x0802528c
 8015c04:	08025c18 	.word	0x08025c18

08015c08 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8015c08:	b5b0      	push	{r4, r5, r7, lr}
 8015c0a:	b08c      	sub	sp, #48	; 0x30
 8015c0c:	af02      	add	r7, sp, #8
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	60b9      	str	r1, [r7, #8]
 8015c12:	607a      	str	r2, [r7, #4]
 8015c14:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8015c16:	f107 031c 	add.w	r3, r7, #28
 8015c1a:	491c      	ldr	r1, [pc, #112]	; (8015c8c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7f6 ffe6 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015c22:	f107 0014 	add.w	r0, r7, #20
 8015c26:	f107 031c 	add.w	r3, r7, #28
 8015c2a:	9301      	str	r3, [sp, #4]
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	9300      	str	r3, [sp, #0]
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	68ba      	ldr	r2, [r7, #8]
 8015c34:	68f9      	ldr	r1, [r7, #12]
 8015c36:	f7ff fe5b 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015c3a:	f107 0514 	add.w	r5, r7, #20
 8015c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015c42:	4913      	ldr	r1, [pc, #76]	; (8015c90 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8015c44:	2010      	movs	r0, #16
 8015c46:	f7f4 fc0f 	bl	800a468 <_ZnwjPKci>
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	4629      	mov	r1, r5
 8015c4e:	4620      	mov	r0, r4
 8015c50:	f009 fe0c 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 8015c54:	627c      	str	r4, [r7, #36]	; 0x24
 8015c56:	f107 0314 	add.w	r3, r7, #20
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7f7 fb7f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015c60:	f107 031c 	add.w	r3, r7, #28
 8015c64:	4618      	mov	r0, r3
 8015c66:	f7f7 fb7a 	bl	800d35e <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8015c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c6c:	f009 fe46 	bl	801f8fc <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c74:	4619      	mov	r1, r3
 8015c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c78:	f009 fe18 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8015c7c:	4602      	mov	r2, r0
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015c82:	bf00      	nop
 8015c84:	3728      	adds	r7, #40	; 0x28
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bdb0      	pop	{r4, r5, r7, pc}
 8015c8a:	bf00      	nop
 8015c8c:	08025290 	.word	0x08025290
 8015c90:	08025c18 	.word	0x08025c18

08015c94 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8015c94:	b5b0      	push	{r4, r5, r7, lr}
 8015c96:	b08c      	sub	sp, #48	; 0x30
 8015c98:	af02      	add	r7, sp, #8
 8015c9a:	60f8      	str	r0, [r7, #12]
 8015c9c:	60b9      	str	r1, [r7, #8]
 8015c9e:	607a      	str	r2, [r7, #4]
 8015ca0:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8015ca2:	f107 031c 	add.w	r3, r7, #28
 8015ca6:	491d      	ldr	r1, [pc, #116]	; (8015d1c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7f6 ffa0 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015cae:	f107 0014 	add.w	r0, r7, #20
 8015cb2:	f107 031c 	add.w	r3, r7, #28
 8015cb6:	9301      	str	r3, [sp, #4]
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	9300      	str	r3, [sp, #0]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	68ba      	ldr	r2, [r7, #8]
 8015cc0:	68f9      	ldr	r1, [r7, #12]
 8015cc2:	f7ff fe15 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015cc6:	f107 0514 	add.w	r5, r7, #20
 8015cca:	f240 1233 	movw	r2, #307	; 0x133
 8015cce:	4914      	ldr	r1, [pc, #80]	; (8015d20 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8015cd0:	2010      	movs	r0, #16
 8015cd2:	f7f4 fbc9 	bl	800a468 <_ZnwjPKci>
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	4629      	mov	r1, r5
 8015cda:	4620      	mov	r0, r4
 8015cdc:	f009 fdc6 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 8015ce0:	627c      	str	r4, [r7, #36]	; 0x24
 8015ce2:	f107 0314 	add.w	r3, r7, #20
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7f7 fb39 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015cec:	f107 031c 	add.w	r3, r7, #28
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f7f7 fb34 	bl	800d35e <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cf8:	f009 fdf3 	bl	801f8e2 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8015cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cfe:	f009 fdfd 	bl	801f8fc <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d06:	4619      	mov	r1, r3
 8015d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d0a:	f009 fdcf 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8015d0e:	4602      	mov	r2, r0
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015d14:	bf00      	nop
 8015d16:	3728      	adds	r7, #40	; 0x28
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8015d1c:	08025294 	.word	0x08025294
 8015d20:	08025c18 	.word	0x08025c18

08015d24 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8015d24:	b5b0      	push	{r4, r5, r7, lr}
 8015d26:	b08c      	sub	sp, #48	; 0x30
 8015d28:	af02      	add	r7, sp, #8
 8015d2a:	60f8      	str	r0, [r7, #12]
 8015d2c:	60b9      	str	r1, [r7, #8]
 8015d2e:	607a      	str	r2, [r7, #4]
 8015d30:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8015d32:	f107 031c 	add.w	r3, r7, #28
 8015d36:	491a      	ldr	r1, [pc, #104]	; (8015da0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f7f6 ff58 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015d3e:	f107 0014 	add.w	r0, r7, #20
 8015d42:	f107 031c 	add.w	r3, r7, #28
 8015d46:	9301      	str	r3, [sp, #4]
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	9300      	str	r3, [sp, #0]
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	68ba      	ldr	r2, [r7, #8]
 8015d50:	68f9      	ldr	r1, [r7, #12]
 8015d52:	f7ff fdcd 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015d56:	f107 0514 	add.w	r5, r7, #20
 8015d5a:	f240 123b 	movw	r2, #315	; 0x13b
 8015d5e:	4911      	ldr	r1, [pc, #68]	; (8015da4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8015d60:	2010      	movs	r0, #16
 8015d62:	f7f4 fb81 	bl	800a468 <_ZnwjPKci>
 8015d66:	4604      	mov	r4, r0
 8015d68:	4629      	mov	r1, r5
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	f009 fd7e 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 8015d70:	627c      	str	r4, [r7, #36]	; 0x24
 8015d72:	f107 0314 	add.w	r3, r7, #20
 8015d76:	4618      	mov	r0, r3
 8015d78:	f7f7 faf1 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015d7c:	f107 031c 	add.w	r3, r7, #28
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7f7 faec 	bl	800d35e <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d8e:	f009 fd8d 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8015d92:	4602      	mov	r2, r0
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015d98:	bf00      	nop
 8015d9a:	3728      	adds	r7, #40	; 0x28
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8015da0:	0802529c 	.word	0x0802529c
 8015da4:	08025c18 	.word	0x08025c18

08015da8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015da8:	b5b0      	push	{r4, r5, r7, lr}
 8015daa:	b08c      	sub	sp, #48	; 0x30
 8015dac:	af02      	add	r7, sp, #8
 8015dae:	60f8      	str	r0, [r7, #12]
 8015db0:	60b9      	str	r1, [r7, #8]
 8015db2:	607a      	str	r2, [r7, #4]
 8015db4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8015db6:	f107 031c 	add.w	r3, r7, #28
 8015dba:	491c      	ldr	r1, [pc, #112]	; (8015e2c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	f7f6 ff16 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015dc2:	f107 0014 	add.w	r0, r7, #20
 8015dc6:	f107 031c 	add.w	r3, r7, #28
 8015dca:	9301      	str	r3, [sp, #4]
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	9300      	str	r3, [sp, #0]
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	68ba      	ldr	r2, [r7, #8]
 8015dd4:	68f9      	ldr	r1, [r7, #12]
 8015dd6:	f7ff fd8b 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015dda:	f107 0514 	add.w	r5, r7, #20
 8015dde:	f240 1241 	movw	r2, #321	; 0x141
 8015de2:	4913      	ldr	r1, [pc, #76]	; (8015e30 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8015de4:	2010      	movs	r0, #16
 8015de6:	f7f4 fb3f 	bl	800a468 <_ZnwjPKci>
 8015dea:	4604      	mov	r4, r0
 8015dec:	4629      	mov	r1, r5
 8015dee:	4620      	mov	r0, r4
 8015df0:	f009 fd3c 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 8015df4:	627c      	str	r4, [r7, #36]	; 0x24
 8015df6:	f107 0314 	add.w	r3, r7, #20
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7f7 faaf 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015e00:	f107 031c 	add.w	r3, r7, #28
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7f7 faaa 	bl	800d35e <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8015e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e0c:	f009 fd69 	bl	801f8e2 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e14:	4619      	mov	r1, r3
 8015e16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e18:	f009 fd48 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8015e1c:	4602      	mov	r2, r0
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015e22:	bf00      	nop
 8015e24:	3728      	adds	r7, #40	; 0x28
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bdb0      	pop	{r4, r5, r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	080252a0 	.word	0x080252a0
 8015e30:	08025c18 	.word	0x08025c18

08015e34 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8015e34:	b5b0      	push	{r4, r5, r7, lr}
 8015e36:	b08c      	sub	sp, #48	; 0x30
 8015e38:	af02      	add	r7, sp, #8
 8015e3a:	60f8      	str	r0, [r7, #12]
 8015e3c:	60b9      	str	r1, [r7, #8]
 8015e3e:	607a      	str	r2, [r7, #4]
 8015e40:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8015e42:	f107 031c 	add.w	r3, r7, #28
 8015e46:	491c      	ldr	r1, [pc, #112]	; (8015eb8 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7f6 fed0 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015e4e:	f107 0014 	add.w	r0, r7, #20
 8015e52:	f107 031c 	add.w	r3, r7, #28
 8015e56:	9301      	str	r3, [sp, #4]
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	9300      	str	r3, [sp, #0]
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	68ba      	ldr	r2, [r7, #8]
 8015e60:	68f9      	ldr	r1, [r7, #12]
 8015e62:	f7ff fd45 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015e66:	f107 0514 	add.w	r5, r7, #20
 8015e6a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015e6e:	4913      	ldr	r1, [pc, #76]	; (8015ebc <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8015e70:	2010      	movs	r0, #16
 8015e72:	f7f4 faf9 	bl	800a468 <_ZnwjPKci>
 8015e76:	4604      	mov	r4, r0
 8015e78:	4629      	mov	r1, r5
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	f009 fcf6 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 8015e80:	627c      	str	r4, [r7, #36]	; 0x24
 8015e82:	f107 0314 	add.w	r3, r7, #20
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7f7 fa69 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015e8c:	f107 031c 	add.w	r3, r7, #28
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7f7 fa64 	bl	800d35e <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8015e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015e98:	f009 fd30 	bl	801f8fc <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ea4:	f009 fd02 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8015ea8:	4602      	mov	r2, r0
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015eae:	bf00      	nop
 8015eb0:	3728      	adds	r7, #40	; 0x28
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8015eb6:	bf00      	nop
 8015eb8:	080252a4 	.word	0x080252a4
 8015ebc:	08025c18 	.word	0x08025c18

08015ec0 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8015ec0:	b5b0      	push	{r4, r5, r7, lr}
 8015ec2:	b08c      	sub	sp, #48	; 0x30
 8015ec4:	af02      	add	r7, sp, #8
 8015ec6:	60f8      	str	r0, [r7, #12]
 8015ec8:	60b9      	str	r1, [r7, #8]
 8015eca:	607a      	str	r2, [r7, #4]
 8015ecc:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8015ece:	f107 031c 	add.w	r3, r7, #28
 8015ed2:	491d      	ldr	r1, [pc, #116]	; (8015f48 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7f6 fe8a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015eda:	f107 0014 	add.w	r0, r7, #20
 8015ede:	f107 031c 	add.w	r3, r7, #28
 8015ee2:	9301      	str	r3, [sp, #4]
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	9300      	str	r3, [sp, #0]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	68ba      	ldr	r2, [r7, #8]
 8015eec:	68f9      	ldr	r1, [r7, #12]
 8015eee:	f7ff fcff 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015ef2:	f107 0514 	add.w	r5, r7, #20
 8015ef6:	f240 124f 	movw	r2, #335	; 0x14f
 8015efa:	4914      	ldr	r1, [pc, #80]	; (8015f4c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8015efc:	2010      	movs	r0, #16
 8015efe:	f7f4 fab3 	bl	800a468 <_ZnwjPKci>
 8015f02:	4604      	mov	r4, r0
 8015f04:	4629      	mov	r1, r5
 8015f06:	4620      	mov	r0, r4
 8015f08:	f009 fcb0 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 8015f0c:	627c      	str	r4, [r7, #36]	; 0x24
 8015f0e:	f107 0314 	add.w	r3, r7, #20
 8015f12:	4618      	mov	r0, r3
 8015f14:	f7f7 fa23 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8015f18:	f107 031c 	add.w	r3, r7, #28
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7f7 fa1e 	bl	800d35e <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8015f22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f24:	f009 fcea 	bl	801f8fc <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8015f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f2a:	f009 fcda 	bl	801f8e2 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f32:	4619      	mov	r1, r3
 8015f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f36:	f009 fcb9 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8015f3a:	4602      	mov	r2, r0
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015f40:	bf00      	nop
 8015f42:	3728      	adds	r7, #40	; 0x28
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bdb0      	pop	{r4, r5, r7, pc}
 8015f48:	080252a8 	.word	0x080252a8
 8015f4c:	08025c18 	.word	0x08025c18

08015f50 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8015f50:	b5b0      	push	{r4, r5, r7, lr}
 8015f52:	b092      	sub	sp, #72	; 0x48
 8015f54:	af02      	add	r7, sp, #8
 8015f56:	60f8      	str	r0, [r7, #12]
 8015f58:	60b9      	str	r1, [r7, #8]
 8015f5a:	607a      	str	r2, [r7, #4]
 8015f5c:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8015f5e:	f107 0320 	add.w	r3, r7, #32
 8015f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7f6 fe42 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8015f6a:	f107 0018 	add.w	r0, r7, #24
 8015f6e:	f107 0320 	add.w	r3, r7, #32
 8015f72:	9301      	str	r3, [sp, #4]
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	9300      	str	r3, [sp, #0]
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	68ba      	ldr	r2, [r7, #8]
 8015f7c:	68f9      	ldr	r1, [r7, #12]
 8015f7e:	f7ff fcb7 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015f82:	f107 0320 	add.w	r3, r7, #32
 8015f86:	4618      	mov	r0, r3
 8015f88:	f7f7 f9e9 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8015f8c:	f107 0010 	add.w	r0, r7, #16
 8015f90:	f107 0118 	add.w	r1, r7, #24
 8015f94:	2329      	movs	r3, #41	; 0x29
 8015f96:	222c      	movs	r2, #44	; 0x2c
 8015f98:	f7f7 fb92 	bl	800d6c0 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8015f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015fa0:	f107 0110 	add.w	r1, r7, #16
 8015fa4:	2202      	movs	r2, #2
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f7f7 fb2c 	bl	800d604 <_ZNK12SimpleString9subStringEj>
 8015fac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015fb0:	f107 0310 	add.w	r3, r7, #16
 8015fb4:	4611      	mov	r1, r2
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f7f6 fe85 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 8015fbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f7f7 f9cc 	bl	800d35e <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8015fc6:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8015fca:	492a      	ldr	r1, [pc, #168]	; (8016074 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8015fcc:	2010      	movs	r0, #16
 8015fce:	f7f4 fa4b 	bl	800a468 <_ZnwjPKci>
 8015fd2:	4604      	mov	r4, r0
 8015fd4:	f107 0310 	add.w	r3, r7, #16
 8015fd8:	4619      	mov	r1, r3
 8015fda:	4620      	mov	r0, r4
 8015fdc:	f009 fc46 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 8015fe0:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8015fe2:	f107 0318 	add.w	r3, r7, #24
 8015fe6:	2100      	movs	r1, #0
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7f7 fb1c 	bl	800d626 <_ZNK12SimpleString2atEj>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	461a      	mov	r2, r3
 8015ff2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8015ff6:	f107 0118 	add.w	r1, r7, #24
 8015ffa:	232c      	movs	r3, #44	; 0x2c
 8015ffc:	f7f7 fb60 	bl	800d6c0 <_ZNK12SimpleString17subStringFromTillEcc>
 8016000:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8016004:	f240 125b 	movw	r2, #347	; 0x15b
 8016008:	491a      	ldr	r1, [pc, #104]	; (8016074 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801600a:	2010      	movs	r0, #16
 801600c:	f7f4 fa2c 	bl	800a468 <_ZnwjPKci>
 8016010:	4604      	mov	r4, r0
 8016012:	4629      	mov	r1, r5
 8016014:	4620      	mov	r0, r4
 8016016:	f009 fc29 	bl	801f86c <_ZN10TestFilterC1ERK12SimpleString>
 801601a:	63bc      	str	r4, [r7, #56]	; 0x38
 801601c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016020:	4618      	mov	r0, r3
 8016022:	f7f7 f99c 	bl	800d35e <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8016026:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016028:	f009 fc5b 	bl	801f8e2 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 801602c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801602e:	f009 fc58 	bl	801f8e2 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016036:	4619      	mov	r1, r3
 8016038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801603a:	f009 fc37 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 801603e:	4602      	mov	r2, r0
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016048:	4619      	mov	r1, r3
 801604a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801604c:	f009 fc2e 	bl	801f8ac <_ZN10TestFilter3addEPS_>
 8016050:	4602      	mov	r2, r0
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8016056:	f107 0310 	add.w	r3, r7, #16
 801605a:	4618      	mov	r0, r3
 801605c:	f7f7 f97f 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8016060:	f107 0318 	add.w	r3, r7, #24
 8016064:	4618      	mov	r0, r3
 8016066:	f7f7 f97a 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 801606a:	bf00      	nop
 801606c:	3740      	adds	r7, #64	; 0x40
 801606e:	46bd      	mov	sp, r7
 8016070:	bdb0      	pop	{r4, r5, r7, pc}
 8016072:	bf00      	nop
 8016074:	08025c18 	.word	0x08025c18

08016078 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8016078:	b590      	push	{r4, r7, lr}
 801607a:	b08b      	sub	sp, #44	; 0x2c
 801607c:	af02      	add	r7, sp, #8
 801607e:	60f8      	str	r0, [r7, #12]
 8016080:	60b9      	str	r1, [r7, #8]
 8016082:	607a      	str	r2, [r7, #4]
 8016084:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8016086:	f107 0318 	add.w	r3, r7, #24
 801608a:	491b      	ldr	r1, [pc, #108]	; (80160f8 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 801608c:	4618      	mov	r0, r3
 801608e:	f7f6 fdae 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8016092:	f107 0010 	add.w	r0, r7, #16
 8016096:	f107 0318 	add.w	r3, r7, #24
 801609a:	9301      	str	r3, [sp, #4]
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	9300      	str	r3, [sp, #0]
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	68ba      	ldr	r2, [r7, #8]
 80160a4:	68f9      	ldr	r1, [r7, #12]
 80160a6:	f7ff fc23 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80160aa:	f107 0318 	add.w	r3, r7, #24
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7f7 f955 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 80160b4:	f107 0310 	add.w	r3, r7, #16
 80160b8:	4618      	mov	r0, r3
 80160ba:	f7f7 f92f 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 80160be:	4603      	mov	r3, r0
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	bf0c      	ite	eq
 80160c4:	2301      	moveq	r3, #1
 80160c6:	2300      	movne	r3, #0
 80160c8:	b2db      	uxtb	r3, r3
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d001      	beq.n	80160d2 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 80160ce:	2400      	movs	r4, #0
 80160d0:	e008      	b.n	80160e4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	3330      	adds	r3, #48	; 0x30
 80160d6:	f107 0210 	add.w	r2, r7, #16
 80160da:	4611      	mov	r1, r2
 80160dc:	4618      	mov	r0, r3
 80160de:	f7f6 fdf2 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80160e2:	2401      	movs	r4, #1
 80160e4:	f107 0310 	add.w	r3, r7, #16
 80160e8:	4618      	mov	r0, r3
 80160ea:	f7f7 f938 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80160ee:	2c01      	cmp	r4, #1
}
 80160f0:	3724      	adds	r7, #36	; 0x24
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd90      	pop	{r4, r7, pc}
 80160f6:	bf00      	nop
 80160f8:	080252d0 	.word	0x080252d0

080160fc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 80160fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160fe:	b093      	sub	sp, #76	; 0x4c
 8016100:	af02      	add	r7, sp, #8
 8016102:	60f8      	str	r0, [r7, #12]
 8016104:	60b9      	str	r1, [r7, #8]
 8016106:	607a      	str	r2, [r7, #4]
 8016108:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 801610a:	f107 0318 	add.w	r3, r7, #24
 801610e:	4953      	ldr	r1, [pc, #332]	; (801625c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8016110:	4618      	mov	r0, r3
 8016112:	f7f6 fd6c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8016116:	f107 0010 	add.w	r0, r7, #16
 801611a:	f107 0318 	add.w	r3, r7, #24
 801611e:	9301      	str	r3, [sp, #4]
 8016120:	683b      	ldr	r3, [r7, #0]
 8016122:	9300      	str	r3, [sp, #0]
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	68ba      	ldr	r2, [r7, #8]
 8016128:	68f9      	ldr	r1, [r7, #12]
 801612a:	f7ff fbe1 	bl	80158f0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801612e:	f107 0318 	add.w	r3, r7, #24
 8016132:	4618      	mov	r0, r3
 8016134:	f7f7 f913 	bl	800d35e <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8016138:	f107 0310 	add.w	r3, r7, #16
 801613c:	4618      	mov	r0, r3
 801613e:	f7f7 f8ed 	bl	800d31c <_ZNK12SimpleString4sizeEv>
 8016142:	4603      	mov	r3, r0
 8016144:	2b00      	cmp	r3, #0
 8016146:	bf0c      	ite	eq
 8016148:	2301      	moveq	r3, #1
 801614a:	2300      	movne	r3, #0
 801614c:	b2db      	uxtb	r3, r3
 801614e:	2b00      	cmp	r3, #0
 8016150:	d001      	beq.n	8016156 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8016152:	2400      	movs	r4, #0
 8016154:	e078      	b.n	8016248 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8016156:	2500      	movs	r5, #0
 8016158:	f107 0320 	add.w	r3, r7, #32
 801615c:	4940      	ldr	r1, [pc, #256]	; (8016260 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 801615e:	4618      	mov	r0, r3
 8016160:	f7f6 fd45 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8016164:	2601      	movs	r6, #1
 8016166:	f107 0220 	add.w	r2, r7, #32
 801616a:	f107 0310 	add.w	r3, r7, #16
 801616e:	4611      	mov	r1, r2
 8016170:	4618      	mov	r0, r3
 8016172:	f7f7 f900 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8016176:	4603      	mov	r3, r0
 8016178:	2b00      	cmp	r3, #0
 801617a:	d111      	bne.n	80161a0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 801617c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016180:	4938      	ldr	r1, [pc, #224]	; (8016264 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8016182:	4618      	mov	r0, r3
 8016184:	f7f6 fd33 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8016188:	2501      	movs	r5, #1
 801618a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801618e:	f107 0310 	add.w	r3, r7, #16
 8016192:	4611      	mov	r1, r2
 8016194:	4618      	mov	r0, r3
 8016196:	f7f7 f8ee 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801619a:	4603      	mov	r3, r0
 801619c:	2b00      	cmp	r3, #0
 801619e:	d001      	beq.n	80161a4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 80161a0:	2401      	movs	r4, #1
 80161a2:	e000      	b.n	80161a6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 80161a4:	2400      	movs	r4, #0
 80161a6:	2d00      	cmp	r5, #0
 80161a8:	d004      	beq.n	80161b4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 80161aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7f7 f8d5 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80161b4:	2e00      	cmp	r6, #0
 80161b6:	d004      	beq.n	80161c2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 80161b8:	f107 0320 	add.w	r3, r7, #32
 80161bc:	4618      	mov	r0, r3
 80161be:	f7f7 f8ce 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80161c2:	2c00      	cmp	r4, #0
 80161c4:	d005      	beq.n	80161d2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	2200      	movs	r2, #0
 80161ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80161ce:	2401      	movs	r4, #1
 80161d0:	e03a      	b.n	8016248 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 80161d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161d6:	4924      	ldr	r1, [pc, #144]	; (8016268 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 80161d8:	4618      	mov	r0, r3
 80161da:	f7f6 fd08 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80161de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80161e2:	f107 0310 	add.w	r3, r7, #16
 80161e6:	4611      	mov	r1, r2
 80161e8:	4618      	mov	r0, r3
 80161ea:	f7f7 f8c4 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 80161ee:	4603      	mov	r3, r0
 80161f0:	461c      	mov	r4, r3
 80161f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7f7 f8b1 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80161fc:	2c00      	cmp	r4, #0
 80161fe:	d005      	beq.n	801620c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2201      	movs	r2, #1
 8016204:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8016208:	2401      	movs	r4, #1
 801620a:	e01d      	b.n	8016248 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 801620c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016210:	4916      	ldr	r1, [pc, #88]	; (801626c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8016212:	4618      	mov	r0, r3
 8016214:	f7f6 fceb 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8016218:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801621c:	f107 0310 	add.w	r3, r7, #16
 8016220:	4611      	mov	r1, r2
 8016222:	4618      	mov	r0, r3
 8016224:	f7f7 f8a7 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8016228:	4603      	mov	r3, r0
 801622a:	461c      	mov	r4, r3
 801622c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016230:	4618      	mov	r0, r3
 8016232:	f7f7 f894 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8016236:	2c00      	cmp	r4, #0
 8016238:	d005      	beq.n	8016246 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	2202      	movs	r2, #2
 801623e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8016242:	2401      	movs	r4, #1
 8016244:	e000      	b.n	8016248 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8016246:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8016248:	f107 0310 	add.w	r3, r7, #16
 801624c:	4618      	mov	r0, r3
 801624e:	f7f7 f886 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8016252:	4623      	mov	r3, r4
}
 8016254:	4618      	mov	r0, r3
 8016256:	3744      	adds	r7, #68	; 0x44
 8016258:	46bd      	mov	sp, r7
 801625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801625c:	080252cc 	.word	0x080252cc
 8016260:	08025c3c 	.word	0x08025c3c
 8016264:	08025c44 	.word	0x08025c44
 8016268:	08025c4c 	.word	0x08025c4c
 801626c:	08025c54 	.word	0x08025c54

08016270 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8016270:	b480      	push	{r7}
 8016272:	b083      	sub	sp, #12
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801627e:	2b01      	cmp	r3, #1
 8016280:	bf0c      	ite	eq
 8016282:	2301      	moveq	r3, #1
 8016284:	2300      	movne	r3, #0
 8016286:	b2db      	uxtb	r3, r3
}
 8016288:	4618      	mov	r0, r3
 801628a:	370c      	adds	r7, #12
 801628c:	46bd      	mov	sp, r7
 801628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016292:	4770      	bx	lr

08016294 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8016294:	b480      	push	{r7}
 8016296:	b083      	sub	sp, #12
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80162a2:	2b02      	cmp	r3, #2
 80162a4:	bf0c      	ite	eq
 80162a6:	2301      	moveq	r3, #1
 80162a8:	2300      	movne	r3, #0
 80162aa:	b2db      	uxtb	r3, r3
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	370c      	adds	r7, #12
 80162b0:	46bd      	mov	sp, r7
 80162b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b6:	4770      	bx	lr

080162b8 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 80162b8:	b480      	push	{r7}
 80162ba:	b083      	sub	sp, #12
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
    return packageName_;
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	3330      	adds	r3, #48	; 0x30
}
 80162c4:	4618      	mov	r0, r3
 80162c6:	370c      	adds	r7, #12
 80162c8:	46bd      	mov	sp, r7
 80162ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ce:	4770      	bx	lr

080162d0 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 80162d0:	b480      	push	{r7}
 80162d2:	b083      	sub	sp, #12
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2200      	movs	r2, #0
 80162dc:	601a      	str	r2, [r3, #0]
    {}
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	4618      	mov	r0, r3
 80162e2:	370c      	adds	r7, #12
 80162e4:	46bd      	mov	sp, r7
 80162e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ea:	4770      	bx	lr

080162ec <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 80162ec:	b480      	push	{r7}
 80162ee:	b083      	sub	sp, #12
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80162fa:	2200      	movs	r2, #0
 80162fc:	601a      	str	r2, [r3, #0]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016304:	3304      	adds	r3, #4
 8016306:	f640 72ff 	movw	r2, #4095	; 0xfff
 801630a:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2200      	movs	r2, #0
 8016310:	701a      	strb	r2, [r3, #0]
}
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	4618      	mov	r0, r3
 8016316:	370c      	adds	r7, #12
 8016318:	46bd      	mov	sp, r7
 801631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631e:	4770      	bx	lr

08016320 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8016320:	b480      	push	{r7}
 8016322:	b083      	sub	sp, #12
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801632e:	2200      	movs	r2, #0
 8016330:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	2200      	movs	r2, #0
 8016336:	701a      	strb	r2, [r3, #0]
}
 8016338:	bf00      	nop
 801633a:	370c      	adds	r7, #12
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr

08016344 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8016344:	b40e      	push	{r1, r2, r3}
 8016346:	b590      	push	{r4, r7, lr}
 8016348:	b086      	sub	sp, #24
 801634a:	af00      	add	r7, sp, #0
 801634c:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016354:	3304      	adds	r3, #4
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	1ad3      	subs	r3, r2, r3
 8016362:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d032      	beq.n	80163d0 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 801636a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801636e:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8016370:	4b1b      	ldr	r3, [pc, #108]	; (80163e0 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8016372:	681c      	ldr	r4, [r3, #0]
 8016374:	687a      	ldr	r2, [r7, #4]
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	18d0      	adds	r0, r2, r3
 8016380:	697b      	ldr	r3, [r7, #20]
 8016382:	1c59      	adds	r1, r3, #1
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016388:	47a0      	blx	r4
 801638a:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	2b00      	cmp	r3, #0
 8016390:	dd09      	ble.n	80163a6 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016398:	681a      	ldr	r2, [r3, #0]
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	441a      	add	r2, r3
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80163a4:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80163ac:	681a      	ldr	r2, [r3, #0]
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80163b4:	3304      	adds	r3, #4
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	429a      	cmp	r2, r3
 80163ba:	d90a      	bls.n	80163d2 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80163c2:	3304      	adds	r3, #4
 80163c4:	681a      	ldr	r2, [r3, #0]
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80163cc:	601a      	str	r2, [r3, #0]
 80163ce:	e000      	b.n	80163d2 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 80163d0:	bf00      	nop
    va_end(arguments);
}
 80163d2:	3718      	adds	r7, #24
 80163d4:	46bd      	mov	sp, r7
 80163d6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80163da:	b003      	add	sp, #12
 80163dc:	4770      	bx	lr
 80163de:	bf00      	nop
 80163e0:	200000b0 	.word	0x200000b0

080163e4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b08c      	sub	sp, #48	; 0x30
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 80163f4:	2310      	movs	r3, #16
 80163f6:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 80163f8:	2300      	movs	r3, #0
 80163fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 80163fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	429a      	cmp	r2, r3
 8016402:	d273      	bcs.n	80164ec <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8016404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016406:	493b      	ldr	r1, [pc, #236]	; (80164f4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8016408:	68f8      	ldr	r0, [r7, #12]
 801640a:	f7ff ff9b 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 801640e:	687a      	ldr	r2, [r7, #4]
 8016410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016412:	1ad3      	subs	r3, r2, r3
 8016414:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8016416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016418:	2b10      	cmp	r3, #16
 801641a:	d901      	bls.n	8016420 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 801641c:	2310      	movs	r3, #16
 801641e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8016420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016422:	f1c3 0310 	rsb	r3, r3, #16
 8016426:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8016428:	2300      	movs	r3, #0
 801642a:	62bb      	str	r3, [r7, #40]	; 0x28
 801642c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016430:	429a      	cmp	r2, r3
 8016432:	d215      	bcs.n	8016460 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8016434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016438:	4413      	add	r3, r2
 801643a:	69fa      	ldr	r2, [r7, #28]
 801643c:	4413      	add	r3, r2
 801643e:	781b      	ldrb	r3, [r3, #0]
 8016440:	461a      	mov	r2, r3
 8016442:	492d      	ldr	r1, [pc, #180]	; (80164f8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8016444:	68f8      	ldr	r0, [r7, #12]
 8016446:	f7ff ff7d 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 801644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801644c:	2b07      	cmp	r3, #7
 801644e:	d103      	bne.n	8016458 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8016450:	492a      	ldr	r1, [pc, #168]	; (80164fc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8016452:	68f8      	ldr	r0, [r7, #12]
 8016454:	f7ff ff76 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645a:	3301      	adds	r3, #1
 801645c:	62bb      	str	r3, [r7, #40]	; 0x28
 801645e:	e7e5      	b.n	801642c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8016460:	2300      	movs	r3, #0
 8016462:	62bb      	str	r3, [r7, #40]	; 0x28
 8016464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016466:	697b      	ldr	r3, [r7, #20]
 8016468:	429a      	cmp	r2, r3
 801646a:	d207      	bcs.n	801647c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 801646c:	4924      	ldr	r1, [pc, #144]	; (8016500 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 801646e:	68f8      	ldr	r0, [r7, #12]
 8016470:	f7ff ff68 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8016474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016476:	3301      	adds	r3, #1
 8016478:	62bb      	str	r3, [r7, #40]	; 0x28
 801647a:	e7f3      	b.n	8016464 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	2b08      	cmp	r3, #8
 8016480:	d903      	bls.n	801648a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8016482:	491e      	ldr	r1, [pc, #120]	; (80164fc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8016484:	68f8      	ldr	r0, [r7, #12]
 8016486:	f7ff ff5d 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 801648a:	491e      	ldr	r1, [pc, #120]	; (8016504 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 801648c:	68f8      	ldr	r0, [r7, #12]
 801648e:	f7ff ff59 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016492:	2300      	movs	r3, #0
 8016494:	62bb      	str	r3, [r7, #40]	; 0x28
 8016496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801649a:	429a      	cmp	r2, r3
 801649c:	d21d      	bcs.n	80164da <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 801649e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164a2:	4413      	add	r3, r2
 80164a4:	69fa      	ldr	r2, [r7, #28]
 80164a6:	4413      	add	r3, r2
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 80164ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80164b2:	2b1f      	cmp	r3, #31
 80164b4:	d903      	bls.n	80164be <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 80164b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80164ba:	2b7e      	cmp	r3, #126	; 0x7e
 80164bc:	d902      	bls.n	80164c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 80164be:	232e      	movs	r3, #46	; 0x2e
 80164c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 80164c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80164c8:	461a      	mov	r2, r3
 80164ca:	490f      	ldr	r1, [pc, #60]	; (8016508 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 80164cc:	68f8      	ldr	r0, [r7, #12]
 80164ce:	f7ff ff39 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80164d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d4:	3301      	adds	r3, #1
 80164d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80164d8:	e7dd      	b.n	8016496 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 80164da:	490c      	ldr	r1, [pc, #48]	; (801650c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 80164dc:	68f8      	ldr	r0, [r7, #12]
 80164de:	f7ff ff31 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 80164e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e6:	4413      	add	r3, r2
 80164e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80164ea:	e787      	b.n	80163fc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 80164ec:	bf00      	nop
 80164ee:	3730      	adds	r7, #48	; 0x30
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}
 80164f4:	08025c6c 	.word	0x08025c6c
 80164f8:	08025c78 	.word	0x08025c78
 80164fc:	08025c80 	.word	0x08025c80
 8016500:	08025c84 	.word	0x08025c84
 8016504:	08025c88 	.word	0x08025c88
 8016508:	08025c8c 	.word	0x08025c8c
 801650c:	08025c90 	.word	0x08025c90

08016510 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8016510:	b480      	push	{r7}
 8016512:	b083      	sub	sp, #12
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
    return buffer_;
 8016518:	687b      	ldr	r3, [r7, #4]
}
 801651a:	4618      	mov	r0, r3
 801651c:	370c      	adds	r7, #12
 801651e:	46bd      	mov	sp, r7
 8016520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016524:	4770      	bx	lr

08016526 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8016526:	b480      	push	{r7}
 8016528:	b083      	sub	sp, #12
 801652a:	af00      	add	r7, sp, #0
 801652c:	6078      	str	r0, [r7, #4]
 801652e:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016536:	3304      	adds	r3, #4
 8016538:	683a      	ldr	r2, [r7, #0]
 801653a:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016542:	3304      	adds	r3, #4
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801654a:	d306      	bcc.n	801655a <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016552:	3304      	adds	r3, #4
 8016554:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016558:	601a      	str	r2, [r3, #0]
}
 801655a:	bf00      	nop
 801655c:	370c      	adds	r7, #12
 801655e:	46bd      	mov	sp, r7
 8016560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016564:	4770      	bx	lr

08016566 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8016566:	b480      	push	{r7}
 8016568:	b083      	sub	sp, #12
 801656a:	af00      	add	r7, sp, #0
 801656c:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016574:	3304      	adds	r3, #4
 8016576:	f640 72ff 	movw	r2, #4095	; 0xfff
 801657a:	601a      	str	r2, [r3, #0]
}
 801657c:	bf00      	nop
 801657e:	370c      	adds	r7, #12
 8016580:	46bd      	mov	sp, r7
 8016582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016586:	4770      	bx	lr

08016588 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8016588:	b480      	push	{r7}
 801658a:	b083      	sub	sp, #12
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016596:	681a      	ldr	r2, [r3, #0]
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801659e:	3304      	adds	r3, #4
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	429a      	cmp	r2, r3
 80165a4:	bf2c      	ite	cs
 80165a6:	2301      	movcs	r3, #1
 80165a8:	2300      	movcc	r3, #0
 80165aa:	b2db      	uxtb	r3, r3
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	370c      	adds	r7, #12
 80165b0:	46bd      	mov	sp, r7
 80165b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b6:	4770      	bx	lr

080165b8 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b082      	sub	sp, #8
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2200      	movs	r2, #0
 80165c4:	601a      	str	r2, [r3, #0]
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	2200      	movs	r2, #0
 80165ca:	711a      	strb	r2, [r3, #4]
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	3308      	adds	r3, #8
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7ff fe8b 	bl	80162ec <_ZN18SimpleStringBufferC1Ev>
{
}
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	4618      	mov	r0, r3
 80165da:	3708      	adds	r7, #8
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}

080165e0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 80165e0:	b5b0      	push	{r4, r5, r7, lr}
 80165e2:	b086      	sub	sp, #24
 80165e4:	af02      	add	r7, sp, #8
 80165e6:	60f8      	str	r0, [r7, #12]
 80165e8:	60b9      	str	r1, [r7, #8]
 80165ea:	607a      	str	r2, [r7, #4]
 80165ec:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	f103 0408 	add.w	r4, r3, #8
 80165f4:	687d      	ldr	r5, [r7, #4]
 80165f6:	6a3b      	ldr	r3, [r7, #32]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	3314      	adds	r3, #20
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	6a38      	ldr	r0, [r7, #32]
 8016600:	4798      	blx	r3
 8016602:	4603      	mov	r3, r0
 8016604:	9301      	str	r3, [sp, #4]
 8016606:	683b      	ldr	r3, [r7, #0]
 8016608:	9300      	str	r3, [sp, #0]
 801660a:	462b      	mov	r3, r5
 801660c:	68ba      	ldr	r2, [r7, #8]
 801660e:	4904      	ldr	r1, [pc, #16]	; (8016620 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8016610:	4620      	mov	r0, r4
 8016612:	f7ff fe97 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016616:	bf00      	nop
 8016618:	3710      	adds	r7, #16
 801661a:	46bd      	mov	sp, r7
 801661c:	bdb0      	pop	{r4, r5, r7, pc}
 801661e:	bf00      	nop
 8016620:	08025c94 	.word	0x08025c94

08016624 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8016624:	b5b0      	push	{r4, r5, r7, lr}
 8016626:	b086      	sub	sp, #24
 8016628:	af02      	add	r7, sp, #8
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	60b9      	str	r1, [r7, #8]
 801662e:	607a      	str	r2, [r7, #4]
 8016630:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	f103 0408 	add.w	r4, r3, #8
 8016638:	687d      	ldr	r5, [r7, #4]
 801663a:	683b      	ldr	r3, [r7, #0]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	3318      	adds	r3, #24
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	6838      	ldr	r0, [r7, #0]
 8016644:	4798      	blx	r3
 8016646:	4603      	mov	r3, r0
 8016648:	9300      	str	r3, [sp, #0]
 801664a:	462b      	mov	r3, r5
 801664c:	68ba      	ldr	r2, [r7, #8]
 801664e:	4904      	ldr	r1, [pc, #16]	; (8016660 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8016650:	4620      	mov	r0, r4
 8016652:	f7ff fe77 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016656:	bf00      	nop
 8016658:	3710      	adds	r7, #16
 801665a:	46bd      	mov	sp, r7
 801665c:	bdb0      	pop	{r4, r5, r7, pc}
 801665e:	bf00      	nop
 8016660:	08025ccc 	.word	0x08025ccc

08016664 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b082      	sub	sp, #8
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	3308      	adds	r3, #8
 8016670:	4903      	ldr	r1, [pc, #12]	; (8016680 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8016672:	4618      	mov	r0, r3
 8016674:	f7ff fe66 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016678:	bf00      	nop
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	08025cfc 	.word	0x08025cfc

08016684 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b084      	sub	sp, #16
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2200      	movs	r2, #0
 8016690:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2200      	movs	r2, #0
 8016696:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8016698:	2367      	movs	r3, #103	; 0x67
 801669a:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	f203 1311 	addw	r3, r3, #273	; 0x111
 80166a2:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	f103 0208 	add.w	r2, r3, #8
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80166b0:	4619      	mov	r1, r3
 80166b2:	4610      	mov	r0, r2
 80166b4:	f7ff ff37 	bl	8016526 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 80166b8:	bf00      	nop
 80166ba:	3710      	adds	r7, #16
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}

080166c0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 80166c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166c2:	b089      	sub	sp, #36	; 0x24
 80166c4:	af04      	add	r7, sp, #16
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d102      	bne.n	80166d8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 80166d2:	68f8      	ldr	r0, [r7, #12]
 80166d4:	f000 f882 	bl	80167dc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	1c5a      	adds	r2, r3, #1
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	f103 0508 	add.w	r5, r3, #8
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80166ec:	68bb      	ldr	r3, [r7, #8]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80166f2:	68bb      	ldr	r3, [r7, #8]
 80166f4:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80166f6:	68bb      	ldr	r3, [r7, #8]
 80166f8:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80166fa:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80166fc:	68bb      	ldr	r3, [r7, #8]
 80166fe:	695a      	ldr	r2, [r3, #20]
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	695b      	ldr	r3, [r3, #20]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	3314      	adds	r3, #20
 8016708:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801670a:	4610      	mov	r0, r2
 801670c:	4798      	blx	r3
 801670e:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016714:	9303      	str	r3, [sp, #12]
 8016716:	9202      	str	r2, [sp, #8]
 8016718:	683a      	ldr	r2, [r7, #0]
 801671a:	9201      	str	r2, [sp, #4]
 801671c:	9400      	str	r4, [sp, #0]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	4632      	mov	r2, r6
 8016722:	4915      	ldr	r1, [pc, #84]	; (8016778 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8016724:	4628      	mov	r0, r5
 8016726:	f7ff fe0d 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	f103 0008 	add.w	r0, r3, #8
 8016730:	68bb      	ldr	r3, [r7, #8]
 8016732:	6899      	ldr	r1, [r3, #8]
 8016734:	68bb      	ldr	r3, [r7, #8]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	461a      	mov	r2, r3
 801673a:	f7ff fe53 	bl	80163e4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	695a      	ldr	r2, [r3, #20]
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	695b      	ldr	r3, [r3, #20]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	3314      	adds	r3, #20
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	4610      	mov	r0, r2
 801674e:	4798      	blx	r3
 8016750:	4603      	mov	r3, r0
 8016752:	490a      	ldr	r1, [pc, #40]	; (801677c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8016754:	4618      	mov	r0, r3
 8016756:	f7f6 f887 	bl	800c868 <_ZN12SimpleString6StrCmpEPKcS1_>
 801675a:	4603      	mov	r3, r0
 801675c:	2b00      	cmp	r3, #0
 801675e:	bf0c      	ite	eq
 8016760:	2301      	moveq	r3, #1
 8016762:	2300      	movne	r3, #0
 8016764:	b2db      	uxtb	r3, r3
 8016766:	2b00      	cmp	r3, #0
 8016768:	d002      	beq.n	8016770 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	2201      	movs	r2, #1
 801676e:	711a      	strb	r2, [r3, #4]
}
 8016770:	bf00      	nop
 8016772:	3714      	adds	r7, #20
 8016774:	46bd      	mov	sp, r7
 8016776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016778:	08025d1c 	.word	0x08025d1c
 801677c:	08025d7c 	.word	0x08025d7c

08016780 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d103      	bne.n	8016798 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f7ff ff67 	bl	8016664 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8016796:	e01e      	b.n	80167d6 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	3308      	adds	r3, #8
 801679c:	4618      	mov	r0, r3
 801679e:	f7ff fef3 	bl	8016588 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 80167a2:	4603      	mov	r3, r0
 80167a4:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	3308      	adds	r3, #8
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7ff fedb 	bl	8016566 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 80167b0:	7bfb      	ldrb	r3, [r7, #15]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d002      	beq.n	80167bc <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f000 f820 	bl	80167fc <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	4619      	mov	r1, r3
 80167c2:	6878      	ldr	r0, [r7, #4]
 80167c4:	f000 f82a 	bl	801681c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	791b      	ldrb	r3, [r3, #4]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d002      	beq.n	80167d6 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f000 f839 	bl	8016848 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 80167d6:	3710      	adds	r7, #16
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}

080167dc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b082      	sub	sp, #8
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	3308      	adds	r3, #8
 80167e8:	4903      	ldr	r1, [pc, #12]	; (80167f8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 80167ea:	4618      	mov	r0, r3
 80167ec:	f7ff fdaa 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80167f0:	bf00      	nop
 80167f2:	3708      	adds	r7, #8
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	08025d84 	.word	0x08025d84

080167fc <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	3308      	adds	r3, #8
 8016808:	4903      	ldr	r1, [pc, #12]	; (8016818 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 801680a:	4618      	mov	r0, r3
 801680c:	f7ff fd9a 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016810:	bf00      	nop
 8016812:	3708      	adds	r7, #8
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}
 8016818:	08025d9c 	.word	0x08025d9c

0801681c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f103 0008 	add.w	r0, r3, #8
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	4a04      	ldr	r2, [pc, #16]	; (8016840 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8016830:	4904      	ldr	r1, [pc, #16]	; (8016844 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8016832:	f7ff fd87 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016836:	bf00      	nop
 8016838:	3708      	adds	r7, #8
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}
 801683e:	bf00      	nop
 8016840:	08025de4 	.word	0x08025de4
 8016844:	08025dfc 	.word	0x08025dfc

08016848 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	3308      	adds	r3, #8
 8016854:	4903      	ldr	r1, [pc, #12]	; (8016864 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8016856:	4618      	mov	r0, r3
 8016858:	f7ff fd74 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801685c:	bf00      	nop
 801685e:	3708      	adds	r7, #8
 8016860:	46bd      	mov	sp, r7
 8016862:	bd80      	pop	{r7, pc}
 8016864:	08025e04 	.word	0x08025e04

08016868 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b08a      	sub	sp, #40	; 0x28
 801686c:	af06      	add	r7, sp, #24
 801686e:	60f8      	str	r0, [r7, #12]
 8016870:	60b9      	str	r1, [r7, #8]
 8016872:	607a      	str	r2, [r7, #4]
 8016874:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8016876:	f7f9 fe8d 	bl	8010594 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 801687a:	4602      	mov	r2, r0
 801687c:	69bb      	ldr	r3, [r7, #24]
 801687e:	9305      	str	r3, [sp, #20]
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	9304      	str	r3, [sp, #16]
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	9303      	str	r3, [sp, #12]
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	9302      	str	r3, [sp, #8]
 801688c:	9201      	str	r2, [sp, #4]
 801688e:	2300      	movs	r3, #0
 8016890:	9300      	str	r3, [sp, #0]
 8016892:	2300      	movs	r3, #0
 8016894:	4a04      	ldr	r2, [pc, #16]	; (80168a8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8016896:	4905      	ldr	r1, [pc, #20]	; (80168ac <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8016898:	68f8      	ldr	r0, [r7, #12]
 801689a:	f000 f855 	bl	8016948 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801689e:	bf00      	nop
 80168a0:	3710      	adds	r7, #16
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	08025c60 	.word	0x08025c60
 80168ac:	08025f18 	.word	0x08025f18

080168b0 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80168b0:	b590      	push	{r4, r7, lr}
 80168b2:	b08b      	sub	sp, #44	; 0x2c
 80168b4:	af06      	add	r7, sp, #24
 80168b6:	60f8      	str	r0, [r7, #12]
 80168b8:	60b9      	str	r1, [r7, #8]
 80168ba:	607a      	str	r2, [r7, #4]
 80168bc:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80168be:	68bb      	ldr	r3, [r7, #8]
 80168c0:	68d8      	ldr	r0, [r3, #12]
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	691c      	ldr	r4, [r3, #16]
 80168c6:	68bb      	ldr	r3, [r7, #8]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	68ba      	ldr	r2, [r7, #8]
 80168cc:	6952      	ldr	r2, [r2, #20]
 80168ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80168d0:	9105      	str	r1, [sp, #20]
 80168d2:	6a39      	ldr	r1, [r7, #32]
 80168d4:	9104      	str	r1, [sp, #16]
 80168d6:	6839      	ldr	r1, [r7, #0]
 80168d8:	9103      	str	r1, [sp, #12]
 80168da:	6879      	ldr	r1, [r7, #4]
 80168dc:	9102      	str	r1, [sp, #8]
 80168de:	9201      	str	r2, [sp, #4]
 80168e0:	9300      	str	r3, [sp, #0]
 80168e2:	4623      	mov	r3, r4
 80168e4:	4602      	mov	r2, r0
 80168e6:	4904      	ldr	r1, [pc, #16]	; (80168f8 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80168e8:	68f8      	ldr	r0, [r7, #12]
 80168ea:	f000 f82d 	bl	8016948 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80168ee:	bf00      	nop
 80168f0:	3714      	adds	r7, #20
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd90      	pop	{r4, r7, pc}
 80168f6:	bf00      	nop
 80168f8:	08025f3c 	.word	0x08025f3c

080168fc <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80168fc:	b590      	push	{r4, r7, lr}
 80168fe:	b08b      	sub	sp, #44	; 0x2c
 8016900:	af06      	add	r7, sp, #24
 8016902:	60f8      	str	r0, [r7, #12]
 8016904:	60b9      	str	r1, [r7, #8]
 8016906:	607a      	str	r2, [r7, #4]
 8016908:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801690a:	68bb      	ldr	r3, [r7, #8]
 801690c:	68d8      	ldr	r0, [r3, #12]
 801690e:	68bb      	ldr	r3, [r7, #8]
 8016910:	691c      	ldr	r4, [r3, #16]
 8016912:	68bb      	ldr	r3, [r7, #8]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	68ba      	ldr	r2, [r7, #8]
 8016918:	6952      	ldr	r2, [r2, #20]
 801691a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801691c:	9105      	str	r1, [sp, #20]
 801691e:	6a39      	ldr	r1, [r7, #32]
 8016920:	9104      	str	r1, [sp, #16]
 8016922:	6839      	ldr	r1, [r7, #0]
 8016924:	9103      	str	r1, [sp, #12]
 8016926:	6879      	ldr	r1, [r7, #4]
 8016928:	9102      	str	r1, [sp, #8]
 801692a:	9201      	str	r2, [sp, #4]
 801692c:	9300      	str	r3, [sp, #0]
 801692e:	4623      	mov	r3, r4
 8016930:	4602      	mov	r2, r0
 8016932:	4904      	ldr	r1, [pc, #16]	; (8016944 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8016934:	68f8      	ldr	r0, [r7, #12]
 8016936:	f000 f807 	bl	8016948 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801693a:	bf00      	nop
 801693c:	3714      	adds	r7, #20
 801693e:	46bd      	mov	sp, r7
 8016940:	bd90      	pop	{r4, r7, pc}
 8016942:	bf00      	nop
 8016944:	08025f64 	.word	0x08025f64

08016948 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016948:	b590      	push	{r4, r7, lr}
 801694a:	b087      	sub	sp, #28
 801694c:	af02      	add	r7, sp, #8
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	60b9      	str	r1, [r7, #8]
 8016952:	607a      	str	r2, [r7, #4]
 8016954:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	3308      	adds	r3, #8
 801695a:	68ba      	ldr	r2, [r7, #8]
 801695c:	4910      	ldr	r1, [pc, #64]	; (80169a0 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 801695e:	4618      	mov	r0, r3
 8016960:	f7ff fcf0 	bl	8016344 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8016964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016966:	9300      	str	r3, [sp, #0]
 8016968:	6a3b      	ldr	r3, [r7, #32]
 801696a:	683a      	ldr	r2, [r7, #0]
 801696c:	6879      	ldr	r1, [r7, #4]
 801696e:	68f8      	ldr	r0, [r7, #12]
 8016970:	f7ff fe36 	bl	80165e0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8016974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801697a:	68f8      	ldr	r0, [r7, #12]
 801697c:	f7ff fe52 	bl	8016624 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8016980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	3308      	adds	r3, #8
 8016986:	681c      	ldr	r4, [r3, #0]
 8016988:	68f8      	ldr	r0, [r7, #12]
 801698a:	f000 f80b 	bl	80169a4 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801698e:	4603      	mov	r3, r0
 8016990:	4619      	mov	r1, r3
 8016992:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016994:	47a0      	blx	r4
}
 8016996:	bf00      	nop
 8016998:	3714      	adds	r7, #20
 801699a:	46bd      	mov	sp, r7
 801699c:	bd90      	pop	{r4, r7, pc}
 801699e:	bf00      	nop
 80169a0:	08025f90 	.word	0x08025f90

080169a4 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b082      	sub	sp, #8
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	3308      	adds	r3, #8
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7ff fdad 	bl	8016510 <_ZN18SimpleStringBuffer8toStringEv>
 80169b6:	4603      	mov	r3, r0
}
 80169b8:	4618      	mov	r0, r3
 80169ba:	3708      	adds	r7, #8
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}

080169c0 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	3308      	adds	r3, #8
 80169cc:	4618      	mov	r0, r3
 80169ce:	f7ff fca7 	bl	8016320 <_ZN18SimpleStringBuffer5clearEv>
}
 80169d2:	bf00      	nop
 80169d4:	3708      	adds	r7, #8
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}

080169da <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 80169da:	b480      	push	{r7}
 80169dc:	b085      	sub	sp, #20
 80169de:	af00      	add	r7, sp, #0
 80169e0:	60f8      	str	r0, [r7, #12]
 80169e2:	60b9      	str	r1, [r7, #8]
 80169e4:	607a      	str	r2, [r7, #4]
 80169e6:	603b      	str	r3, [r7, #0]
    number_ = number;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	687a      	ldr	r2, [r7, #4]
 80169ec:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	68ba      	ldr	r2, [r7, #8]
 80169f2:	609a      	str	r2, [r3, #8]
    size_ = size;
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	683a      	ldr	r2, [r7, #0]
 80169f8:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	69ba      	ldr	r2, [r7, #24]
 80169fe:	615a      	str	r2, [r3, #20]
    period_ = period;
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	7f3a      	ldrb	r2, [r7, #28]
 8016a04:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016a0c:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a12:	60da      	str	r2, [r3, #12]
    line_ = line;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a18:	611a      	str	r2, [r3, #16]
}
 8016a1a:	bf00      	nop
 8016a1c:	3714      	adds	r7, #20
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a24:	4770      	bx	lr

08016a26 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016a26:	b480      	push	{r7}
 8016a28:	b085      	sub	sp, #20
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	60f8      	str	r0, [r7, #12]
 8016a2e:	60b9      	str	r1, [r7, #8]
 8016a30:	4613      	mov	r3, r2
 8016a32:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8016a34:	79fb      	ldrb	r3, [r7, #7]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d00b      	beq.n	8016a52 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8016a3a:	68bb      	ldr	r3, [r7, #8]
 8016a3c:	7e1b      	ldrb	r3, [r3, #24]
 8016a3e:	79fa      	ldrb	r2, [r7, #7]
 8016a40:	429a      	cmp	r2, r3
 8016a42:	d006      	beq.n	8016a52 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	7e1b      	ldrb	r3, [r3, #24]
 8016a48:	2b01      	cmp	r3, #1
 8016a4a:	d004      	beq.n	8016a56 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8016a4c:	79fb      	ldrb	r3, [r7, #7]
 8016a4e:	2b02      	cmp	r3, #2
 8016a50:	d101      	bne.n	8016a56 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8016a52:	2301      	movs	r3, #1
 8016a54:	e000      	b.n	8016a58 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8016a56:	2300      	movs	r3, #0
}
 8016a58:	4618      	mov	r0, r3
 8016a5a:	3714      	adds	r7, #20
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a62:	4770      	bx	lr

08016a64 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8016a64:	b480      	push	{r7}
 8016a66:	b083      	sub	sp, #12
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
 8016a6c:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681a      	ldr	r2, [r3, #0]
 8016a72:	683b      	ldr	r3, [r7, #0]
 8016a74:	61da      	str	r2, [r3, #28]
    head_ = node;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	683a      	ldr	r2, [r7, #0]
 8016a7a:	601a      	str	r2, [r3, #0]
}
 8016a7c:	bf00      	nop
 8016a7e:	370c      	adds	r7, #12
 8016a80:	46bd      	mov	sp, r7
 8016a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a86:	4770      	bx	lr

08016a88 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b085      	sub	sp, #20
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8016a98:	2300      	movs	r3, #0
 8016a9a:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d019      	beq.n	8016ad6 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	689b      	ldr	r3, [r3, #8]
 8016aa6:	683a      	ldr	r2, [r7, #0]
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d10e      	bne.n	8016aca <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8016aac:	68bb      	ldr	r3, [r7, #8]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d005      	beq.n	8016abe <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	69da      	ldr	r2, [r3, #28]
 8016ab6:	68bb      	ldr	r3, [r7, #8]
 8016ab8:	61da      	str	r2, [r3, #28]
                return cur;
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	e00c      	b.n	8016ad8 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	69da      	ldr	r2, [r3, #28]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	601a      	str	r2, [r3, #0]
                return cur;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	e006      	b.n	8016ad8 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	69db      	ldr	r3, [r3, #28]
 8016ad2:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8016ad4:	e7e2      	b.n	8016a9c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8016ad6:	2300      	movs	r3, #0
}
 8016ad8:	4618      	mov	r0, r3
 8016ada:	3714      	adds	r7, #20
 8016adc:	46bd      	mov	sp, r7
 8016ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae2:	4770      	bx	lr

08016ae4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8016ae4:	b480      	push	{r7}
 8016ae6:	b085      	sub	sp, #20
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d00a      	beq.n	8016b10 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	689b      	ldr	r3, [r3, #8]
 8016afe:	683a      	ldr	r2, [r7, #0]
 8016b00:	429a      	cmp	r2, r3
 8016b02:	d101      	bne.n	8016b08 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	e004      	b.n	8016b12 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	69db      	ldr	r3, [r3, #28]
 8016b0c:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016b0e:	e7f1      	b.n	8016af4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8016b10:	2300      	movs	r3, #0
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	3714      	adds	r7, #20
 8016b16:	46bd      	mov	sp, r7
 8016b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1c:	4770      	bx	lr

08016b1e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016b1e:	b580      	push	{r7, lr}
 8016b20:	b086      	sub	sp, #24
 8016b22:	af00      	add	r7, sp, #0
 8016b24:	60f8      	str	r0, [r7, #12]
 8016b26:	60b9      	str	r1, [r7, #8]
 8016b28:	4613      	mov	r3, r2
 8016b2a:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	617b      	str	r3, [r7, #20]
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d00e      	beq.n	8016b54 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8016b36:	79fb      	ldrb	r3, [r7, #7]
 8016b38:	461a      	mov	r2, r3
 8016b3a:	6979      	ldr	r1, [r7, #20]
 8016b3c:	68f8      	ldr	r0, [r7, #12]
 8016b3e:	f7ff ff72 	bl	8016a26 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016b42:	4603      	mov	r3, r0
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d001      	beq.n	8016b4c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8016b48:	697b      	ldr	r3, [r7, #20]
 8016b4a:	e004      	b.n	8016b56 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	69db      	ldr	r3, [r3, #28]
 8016b50:	617b      	str	r3, [r7, #20]
 8016b52:	e7ed      	b.n	8016b30 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8016b54:	2300      	movs	r3, #0
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	3718      	adds	r7, #24
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8016b5e:	b580      	push	{r7, lr}
 8016b60:	b082      	sub	sp, #8
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	6078      	str	r0, [r7, #4]
 8016b66:	460b      	mov	r3, r1
 8016b68:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	78fa      	ldrb	r2, [r7, #3]
 8016b70:	4619      	mov	r1, r3
 8016b72:	6878      	ldr	r0, [r7, #4]
 8016b74:	f7ff ffd3 	bl	8016b1e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016b78:	4603      	mov	r3, r0
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	3708      	adds	r7, #8
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}

08016b82 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b084      	sub	sp, #16
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	60f8      	str	r0, [r7, #12]
 8016b8a:	60b9      	str	r1, [r7, #8]
 8016b8c:	4613      	mov	r3, r2
 8016b8e:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	69db      	ldr	r3, [r3, #28]
 8016b94:	79fa      	ldrb	r2, [r7, #7]
 8016b96:	4619      	mov	r1, r3
 8016b98:	68f8      	ldr	r0, [r7, #12]
 8016b9a:	f7ff ffc0 	bl	8016b1e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016b9e:	4603      	mov	r3, r0
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3710      	adds	r7, #16
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}

08016ba8 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b084      	sub	sp, #16
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	60bb      	str	r3, [r7, #8]
 8016bbe:	68bb      	ldr	r3, [r7, #8]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d00f      	beq.n	8016be4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8016bc4:	78fb      	ldrb	r3, [r7, #3]
 8016bc6:	461a      	mov	r2, r3
 8016bc8:	68b9      	ldr	r1, [r7, #8]
 8016bca:	6878      	ldr	r0, [r7, #4]
 8016bcc:	f7ff ff2b 	bl	8016a26 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d002      	beq.n	8016bdc <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	3301      	adds	r3, #1
 8016bda:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016bdc:	68bb      	ldr	r3, [r7, #8]
 8016bde:	69db      	ldr	r3, [r3, #28]
 8016be0:	60bb      	str	r3, [r7, #8]
 8016be2:	e7ec      	b.n	8016bbe <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8016be4:	68fb      	ldr	r3, [r7, #12]
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3710      	adds	r7, #16
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
	...

08016bf0 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8016bf0:	b480      	push	{r7}
 8016bf2:	b083      	sub	sp, #12
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
 8016bf8:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8016bfa:	6839      	ldr	r1, [r7, #0]
 8016bfc:	4b09      	ldr	r3, [pc, #36]	; (8016c24 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8016bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8016c02:	1aca      	subs	r2, r1, r3
 8016c04:	0852      	lsrs	r2, r2, #1
 8016c06:	4413      	add	r3, r2
 8016c08:	099a      	lsrs	r2, r3, #6
 8016c0a:	4613      	mov	r3, r2
 8016c0c:	00db      	lsls	r3, r3, #3
 8016c0e:	4413      	add	r3, r2
 8016c10:	00db      	lsls	r3, r3, #3
 8016c12:	4413      	add	r3, r2
 8016c14:	1aca      	subs	r2, r1, r3
 8016c16:	4613      	mov	r3, r2
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	370c      	adds	r7, #12
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c22:	4770      	bx	lr
 8016c24:	c0e07039 	.word	0xc0e07039

08016c28 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b082      	sub	sp, #8
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
 8016c30:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	689b      	ldr	r3, [r3, #8]
 8016c36:	4619      	mov	r1, r3
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f7ff ffd9 	bl	8016bf0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	009b      	lsls	r3, r3, #2
 8016c42:	687a      	ldr	r2, [r7, #4]
 8016c44:	4413      	add	r3, r2
 8016c46:	6839      	ldr	r1, [r7, #0]
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7ff ff0b 	bl	8016a64 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8016c4e:	bf00      	nop
 8016c50:	3708      	adds	r7, #8
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}

08016c56 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8016c56:	b580      	push	{r7, lr}
 8016c58:	b082      	sub	sp, #8
 8016c5a:	af00      	add	r7, sp, #0
 8016c5c:	6078      	str	r0, [r7, #4]
 8016c5e:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8016c60:	6839      	ldr	r1, [r7, #0]
 8016c62:	6878      	ldr	r0, [r7, #4]
 8016c64:	f7ff ffc4 	bl	8016bf0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	009b      	lsls	r3, r3, #2
 8016c6c:	687a      	ldr	r2, [r7, #4]
 8016c6e:	4413      	add	r3, r2
 8016c70:	6839      	ldr	r1, [r7, #0]
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7ff ff08 	bl	8016a88 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8016c78:	4603      	mov	r3, r0
}
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	3708      	adds	r7, #8
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	bd80      	pop	{r7, pc}

08016c82 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8016c82:	b580      	push	{r7, lr}
 8016c84:	b082      	sub	sp, #8
 8016c86:	af00      	add	r7, sp, #0
 8016c88:	6078      	str	r0, [r7, #4]
 8016c8a:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8016c8c:	6839      	ldr	r1, [r7, #0]
 8016c8e:	6878      	ldr	r0, [r7, #4]
 8016c90:	f7ff ffae 	bl	8016bf0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016c94:	4603      	mov	r3, r0
 8016c96:	009b      	lsls	r3, r3, #2
 8016c98:	687a      	ldr	r2, [r7, #4]
 8016c9a:	4413      	add	r3, r2
 8016c9c:	6839      	ldr	r1, [r7, #0]
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f7ff ff20 	bl	8016ae4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8016ca4:	4603      	mov	r3, r0
}
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	3708      	adds	r7, #8
 8016caa:	46bd      	mov	sp, r7
 8016cac:	bd80      	pop	{r7, pc}

08016cae <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8016cae:	b580      	push	{r7, lr}
 8016cb0:	b084      	sub	sp, #16
 8016cb2:	af00      	add	r7, sp, #0
 8016cb4:	6078      	str	r0, [r7, #4]
 8016cb6:	460b      	mov	r3, r1
 8016cb8:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8016cba:	2300      	movs	r3, #0
 8016cbc:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	60bb      	str	r3, [r7, #8]
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	2b48      	cmp	r3, #72	; 0x48
 8016cc6:	dc10      	bgt.n	8016cea <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8016cc8:	68bb      	ldr	r3, [r7, #8]
 8016cca:	009b      	lsls	r3, r3, #2
 8016ccc:	687a      	ldr	r2, [r7, #4]
 8016cce:	4413      	add	r3, r2
 8016cd0:	78fa      	ldrb	r2, [r7, #3]
 8016cd2:	4611      	mov	r1, r2
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f7ff ff67 	bl	8016ba8 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8016cda:	4602      	mov	r2, r0
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	4413      	add	r3, r2
 8016ce0:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8016ce2:	68bb      	ldr	r3, [r7, #8]
 8016ce4:	3301      	adds	r3, #1
 8016ce6:	60bb      	str	r3, [r7, #8]
 8016ce8:	e7eb      	b.n	8016cc2 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8016cea:	68fb      	ldr	r3, [r7, #12]
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3710      	adds	r7, #16
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b084      	sub	sp, #16
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
 8016cfc:	460b      	mov	r3, r1
 8016cfe:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8016d00:	2300      	movs	r3, #0
 8016d02:	60fb      	str	r3, [r7, #12]
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	2b48      	cmp	r3, #72	; 0x48
 8016d08:	dc12      	bgt.n	8016d30 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	009b      	lsls	r3, r3, #2
 8016d0e:	687a      	ldr	r2, [r7, #4]
 8016d10:	4413      	add	r3, r2
 8016d12:	78fa      	ldrb	r2, [r7, #3]
 8016d14:	4611      	mov	r1, r2
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7ff ff21 	bl	8016b5e <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8016d1c:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8016d1e:	68bb      	ldr	r3, [r7, #8]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d001      	beq.n	8016d28 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	e004      	b.n	8016d32 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	3301      	adds	r3, #1
 8016d2c:	60fb      	str	r3, [r7, #12]
 8016d2e:	e7e9      	b.n	8016d04 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8016d30:	2300      	movs	r3, #0
}
 8016d32:	4618      	mov	r0, r3
 8016d34:	3710      	adds	r7, #16
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}

08016d3a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8016d3a:	b580      	push	{r7, lr}
 8016d3c:	b086      	sub	sp, #24
 8016d3e:	af00      	add	r7, sp, #0
 8016d40:	60f8      	str	r0, [r7, #12]
 8016d42:	60b9      	str	r1, [r7, #8]
 8016d44:	4613      	mov	r3, r2
 8016d46:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	689b      	ldr	r3, [r3, #8]
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	68f8      	ldr	r0, [r7, #12]
 8016d50:	f7ff ff4e 	bl	8016bf0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016d54:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8016d56:	697b      	ldr	r3, [r7, #20]
 8016d58:	009b      	lsls	r3, r3, #2
 8016d5a:	68fa      	ldr	r2, [r7, #12]
 8016d5c:	4413      	add	r3, r2
 8016d5e:	79fa      	ldrb	r2, [r7, #7]
 8016d60:	68b9      	ldr	r1, [r7, #8]
 8016d62:	4618      	mov	r0, r3
 8016d64:	f7ff ff0d 	bl	8016b82 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016d68:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8016d6a:	693b      	ldr	r3, [r7, #16]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d001      	beq.n	8016d74 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8016d70:	693b      	ldr	r3, [r7, #16]
 8016d72:	e019      	b.n	8016da8 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	3301      	adds	r3, #1
 8016d78:	617b      	str	r3, [r7, #20]
 8016d7a:	697b      	ldr	r3, [r7, #20]
 8016d7c:	2b48      	cmp	r3, #72	; 0x48
 8016d7e:	d812      	bhi.n	8016da6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8016d80:	697b      	ldr	r3, [r7, #20]
 8016d82:	009b      	lsls	r3, r3, #2
 8016d84:	68fa      	ldr	r2, [r7, #12]
 8016d86:	4413      	add	r3, r2
 8016d88:	79fa      	ldrb	r2, [r7, #7]
 8016d8a:	4611      	mov	r1, r2
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f7ff fee6 	bl	8016b5e <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8016d92:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8016d94:	693b      	ldr	r3, [r7, #16]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d001      	beq.n	8016d9e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8016d9a:	693b      	ldr	r3, [r7, #16]
 8016d9c:	e004      	b.n	8016da8 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	3301      	adds	r3, #1
 8016da2:	617b      	str	r3, [r7, #20]
 8016da4:	e7e9      	b.n	8016d7a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8016da6:	2300      	movs	r3, #0
}
 8016da8:	4618      	mov	r0, r3
 8016daa:	3718      	adds	r7, #24
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd80      	pop	{r7, pc}

08016db0 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8016db0:	b5b0      	push	{r4, r5, r7, lr}
 8016db2:	b082      	sub	sp, #8
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	2448      	movs	r4, #72	; 0x48
 8016dbc:	461d      	mov	r5, r3
 8016dbe:	2c00      	cmp	r4, #0
 8016dc0:	db05      	blt.n	8016dce <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8016dc2:	4628      	mov	r0, r5
 8016dc4:	f7ff fa84 	bl	80162d0 <_ZN22MemoryLeakDetectorListC1Ev>
 8016dc8:	3504      	adds	r5, #4
 8016dca:	3c01      	subs	r4, #1
 8016dcc:	e7f7      	b.n	8016dbe <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	3708      	adds	r7, #8
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	bdb0      	pop	{r4, r5, r7, pc}

08016dd8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8016dd8:	b590      	push	{r4, r7, lr}
 8016dda:	b083      	sub	sp, #12
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
 8016de0:	6039      	str	r1, [r7, #0]
 8016de2:	4a1d      	ldr	r2, [pc, #116]	; (8016e58 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	601a      	str	r2, [r3, #0]
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	330c      	adds	r3, #12
 8016dec:	4618      	mov	r0, r3
 8016dee:	f7ff fbe3 	bl	80165b8 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016df8:	331c      	adds	r3, #28
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f7ff ffd8 	bl	8016db0 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016e06:	2201      	movs	r2, #1
 8016e08:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016e10:	3304      	adds	r3, #4
 8016e12:	2201      	movs	r2, #1
 8016e14:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	2201      	movs	r2, #1
 8016e1a:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016e22:	3308      	adds	r3, #8
 8016e24:	2200      	movs	r2, #0
 8016e26:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	683a      	ldr	r2, [r7, #0]
 8016e2c:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8016e2e:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8016e32:	490a      	ldr	r1, [pc, #40]	; (8016e5c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8016e34:	2004      	movs	r0, #4
 8016e36:	f7f3 fb17 	bl	800a468 <_ZnwjPKci>
 8016e3a:	4604      	mov	r4, r0
 8016e3c:	4620      	mov	r0, r4
 8016e3e:	f7f5 fbe7 	bl	800c610 <_ZN11SimpleMutexC1Ev>
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016e48:	330c      	adds	r3, #12
 8016e4a:	601c      	str	r4, [r3, #0]
}
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	4618      	mov	r0, r3
 8016e50:	370c      	adds	r7, #12
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd90      	pop	{r4, r7, pc}
 8016e56:	bf00      	nop
 8016e58:	08028bc4 	.word	0x08028bc4
 8016e5c:	08025f94 	.word	0x08025f94

08016e60 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8016e60:	b590      	push	{r4, r7, lr}
 8016e62:	b083      	sub	sp, #12
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
 8016e68:	4a0e      	ldr	r2, [pc, #56]	; (8016ea4 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016e74:	330c      	adds	r3, #12
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d00d      	beq.n	8016e98 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016e82:	330c      	adds	r3, #12
 8016e84:	681c      	ldr	r4, [r3, #0]
 8016e86:	2c00      	cmp	r4, #0
 8016e88:	d006      	beq.n	8016e98 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	f7f5 fbd2 	bl	800c634 <_ZN11SimpleMutexD1Ev>
 8016e90:	2104      	movs	r1, #4
 8016e92:	4620      	mov	r0, r4
 8016e94:	f7f3 fafc 	bl	800a490 <_ZdlPvj>
    }
}
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	370c      	adds	r7, #12
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bd90      	pop	{r4, r7, pc}
 8016ea2:	bf00      	nop
 8016ea4:	08028bc4 	.word	0x08028bc4

08016ea8 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b082      	sub	sp, #8
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
}
 8016eb0:	6878      	ldr	r0, [r7, #4]
 8016eb2:	f7ff ffd5 	bl	8016e60 <_ZN18MemoryLeakDetectorD1Ev>
 8016eb6:	f241 1150 	movw	r1, #4432	; 0x1150
 8016eba:	6878      	ldr	r0, [r7, #4]
 8016ebc:	f7f3 fae8 	bl	800a490 <_ZdlPvj>
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	3708      	adds	r7, #8
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	bd80      	pop	{r7, pc}

08016eca <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8016eca:	b580      	push	{r7, lr}
 8016ecc:	b082      	sub	sp, #8
 8016ece:	af00      	add	r7, sp, #0
 8016ed0:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	330c      	adds	r3, #12
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7ff fd72 	bl	80169c0 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	2203      	movs	r2, #3
 8016ee0:	721a      	strb	r2, [r3, #8]
}
 8016ee2:	bf00      	nop
 8016ee4:	3708      	adds	r7, #8
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}

08016eea <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8016eea:	b480      	push	{r7}
 8016eec:	b083      	sub	sp, #12
 8016eee:	af00      	add	r7, sp, #0
 8016ef0:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	2202      	movs	r2, #2
 8016ef6:	721a      	strb	r2, [r3, #8]
}
 8016ef8:	bf00      	nop
 8016efa:	370c      	adds	r7, #12
 8016efc:	46bd      	mov	sp, r7
 8016efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f02:	4770      	bx	lr

08016f04 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8016f04:	b480      	push	{r7}
 8016f06:	b083      	sub	sp, #12
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2202      	movs	r2, #2
 8016f10:	721a      	strb	r2, [r3, #8]
}
 8016f12:	bf00      	nop
 8016f14:	370c      	adds	r7, #12
 8016f16:	46bd      	mov	sp, r7
 8016f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1c:	4770      	bx	lr

08016f1e <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8016f1e:	b480      	push	{r7}
 8016f20:	b083      	sub	sp, #12
 8016f22:	af00      	add	r7, sp, #0
 8016f24:	6078      	str	r0, [r7, #4]
    return mutex_;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016f2c:	330c      	adds	r3, #12
 8016f2e:	681b      	ldr	r3, [r3, #0]
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	370c      	adds	r7, #12
 8016f34:	46bd      	mov	sp, r7
 8016f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3a:	4770      	bx	lr

08016f3c <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8016f3c:	b480      	push	{r7}
 8016f3e:	b083      	sub	sp, #12
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f023 0303 	bic.w	r3, r3, #3
 8016f4a:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	370c      	adds	r7, #12
 8016f50:	46bd      	mov	sp, r7
 8016f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f56:	4770      	bx	lr

08016f58 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b082      	sub	sp, #8
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
 8016f60:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	3303      	adds	r3, #3
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7ff ffe8 	bl	8016f3c <_ZL31calculateVoidPointerAlignedSizej>
 8016f6c:	4603      	mov	r3, r0
}
 8016f6e:	4618      	mov	r0, r3
 8016f70:	3708      	adds	r7, #8
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd80      	pop	{r7, pc}

08016f76 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8016f76:	b580      	push	{r7, lr}
 8016f78:	b084      	sub	sp, #16
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	60f8      	str	r0, [r7, #12]
 8016f7e:	60b9      	str	r1, [r7, #8]
 8016f80:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8016f82:	6879      	ldr	r1, [r7, #4]
 8016f84:	68f8      	ldr	r0, [r7, #12]
 8016f86:	f7ff ffe7 	bl	8016f58 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016f8a:	4602      	mov	r2, r0
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	4413      	add	r3, r2
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	3710      	adds	r7, #16
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}

08016f98 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b08a      	sub	sp, #40	; 0x28
 8016f9c:	af06      	add	r7, sp, #24
 8016f9e:	60f8      	str	r0, [r7, #12]
 8016fa0:	60b9      	str	r1, [r7, #8]
 8016fa2:	607a      	str	r2, [r7, #4]
 8016fa4:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016fac:	3304      	adds	r3, #4
 8016fae:	681a      	ldr	r2, [r3, #0]
 8016fb0:	1c51      	adds	r1, r2, #1
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016fb8:	3304      	adds	r3, #4
 8016fba:	6019      	str	r1, [r3, #0]
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	7a19      	ldrb	r1, [r3, #8]
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016fc6:	3308      	adds	r3, #8
 8016fc8:	781b      	ldrb	r3, [r3, #0]
 8016fca:	6a38      	ldr	r0, [r7, #32]
 8016fcc:	9004      	str	r0, [sp, #16]
 8016fce:	69f8      	ldr	r0, [r7, #28]
 8016fd0:	9003      	str	r0, [sp, #12]
 8016fd2:	9302      	str	r3, [sp, #8]
 8016fd4:	9101      	str	r1, [sp, #4]
 8016fd6:	69bb      	ldr	r3, [r7, #24]
 8016fd8:	9300      	str	r3, [sp, #0]
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	6879      	ldr	r1, [r7, #4]
 8016fde:	68b8      	ldr	r0, [r7, #8]
 8016fe0:	f7ff fcfb 	bl	80169da <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	689a      	ldr	r2, [r3, #8]
 8016fe8:	68bb      	ldr	r3, [r7, #8]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	4413      	add	r3, r2
 8016fee:	4619      	mov	r1, r3
 8016ff0:	68f8      	ldr	r0, [r7, #12]
 8016ff2:	f000 f861 	bl	80170b8 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ffc:	331c      	adds	r3, #28
 8016ffe:	68b9      	ldr	r1, [r7, #8]
 8017000:	4618      	mov	r0, r3
 8017002:	f7ff fe11 	bl	8016c28 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8017006:	bf00      	nop
 8017008:	3710      	adds	r7, #16
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}

0801700e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801700e:	b580      	push	{r7, lr}
 8017010:	b08a      	sub	sp, #40	; 0x28
 8017012:	af04      	add	r7, sp, #16
 8017014:	60f8      	str	r0, [r7, #12]
 8017016:	60b9      	str	r1, [r7, #8]
 8017018:	607a      	str	r2, [r7, #4]
 801701a:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 801701c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017020:	9302      	str	r3, [sp, #8]
 8017022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017024:	9301      	str	r3, [sp, #4]
 8017026:	6a3b      	ldr	r3, [r7, #32]
 8017028:	9300      	str	r3, [sp, #0]
 801702a:	683b      	ldr	r3, [r7, #0]
 801702c:	687a      	ldr	r2, [r7, #4]
 801702e:	68b9      	ldr	r1, [r7, #8]
 8017030:	68f8      	ldr	r0, [r7, #12]
 8017032:	f000 f96f 	bl	8017314 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8017036:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d101      	bne.n	8017042 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 801703e:	2300      	movs	r3, #0
 8017040:	e017      	b.n	8017072 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8017042:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017046:	9300      	str	r3, [sp, #0]
 8017048:	697b      	ldr	r3, [r7, #20]
 801704a:	683a      	ldr	r2, [r7, #0]
 801704c:	68b9      	ldr	r1, [r7, #8]
 801704e:	68f8      	ldr	r0, [r7, #12]
 8017050:	f000 f98a 	bl	8017368 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8017054:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8017056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017058:	9302      	str	r3, [sp, #8]
 801705a:	6a3b      	ldr	r3, [r7, #32]
 801705c:	9301      	str	r3, [sp, #4]
 801705e:	68bb      	ldr	r3, [r7, #8]
 8017060:	9300      	str	r3, [sp, #0]
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	697a      	ldr	r2, [r7, #20]
 8017066:	6939      	ldr	r1, [r7, #16]
 8017068:	68f8      	ldr	r0, [r7, #12]
 801706a:	f7ff ff95 	bl	8016f98 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801706e:	693b      	ldr	r3, [r7, #16]
 8017070:	689b      	ldr	r3, [r3, #8]
}
 8017072:	4618      	mov	r0, r3
 8017074:	3718      	adds	r7, #24
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}
	...

0801707c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b084      	sub	sp, #16
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
 8017084:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801708c:	331c      	adds	r3, #28
 801708e:	6839      	ldr	r1, [r7, #0]
 8017090:	4618      	mov	r0, r3
 8017092:	f7ff fdf6 	bl	8016c82 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8017096:	60f8      	str	r0, [r7, #12]
  if (node)
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d006      	beq.n	80170ac <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801709e:	4b05      	ldr	r3, [pc, #20]	; (80170b4 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	68fa      	ldr	r2, [r7, #12]
 80170a4:	6812      	ldr	r2, [r2, #0]
 80170a6:	21cd      	movs	r1, #205	; 0xcd
 80170a8:	6838      	ldr	r0, [r7, #0]
 80170aa:	4798      	blx	r3
#endif
}
 80170ac:	bf00      	nop
 80170ae:	3710      	adds	r7, #16
 80170b0:	46bd      	mov	sp, r7
 80170b2:	bd80      	pop	{r7, pc}
 80170b4:	200000d8 	.word	0x200000d8

080170b8 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 80170b8:	b480      	push	{r7}
 80170ba:	b085      	sub	sp, #20
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80170c2:	2300      	movs	r3, #0
 80170c4:	60fb      	str	r3, [r7, #12]
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	2b02      	cmp	r3, #2
 80170ca:	d812      	bhi.n	80170f2 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 80170cc:	68f9      	ldr	r1, [r7, #12]
 80170ce:	4b0c      	ldr	r3, [pc, #48]	; (8017100 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 80170d0:	fba3 2301 	umull	r2, r3, r3, r1
 80170d4:	085a      	lsrs	r2, r3, #1
 80170d6:	4613      	mov	r3, r2
 80170d8:	005b      	lsls	r3, r3, #1
 80170da:	4413      	add	r3, r2
 80170dc:	1aca      	subs	r2, r1, r3
 80170de:	6839      	ldr	r1, [r7, #0]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	440b      	add	r3, r1
 80170e4:	4907      	ldr	r1, [pc, #28]	; (8017104 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 80170e6:	5c8a      	ldrb	r2, [r1, r2]
 80170e8:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	3301      	adds	r3, #1
 80170ee:	60fb      	str	r3, [r7, #12]
 80170f0:	e7e9      	b.n	80170c6 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 80170f2:	bf00      	nop
 80170f4:	3714      	adds	r7, #20
 80170f6:	46bd      	mov	sp, r7
 80170f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fc:	4770      	bx	lr
 80170fe:	bf00      	nop
 8017100:	aaaaaaab 	.word	0xaaaaaaab
 8017104:	08028bb8 	.word	0x08028bb8

08017108 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8017108:	b480      	push	{r7}
 801710a:	b085      	sub	sp, #20
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
 8017110:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8017112:	2300      	movs	r3, #0
 8017114:	60fb      	str	r3, [r7, #12]
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	2b02      	cmp	r3, #2
 801711a:	d816      	bhi.n	801714a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 801711c:	683a      	ldr	r2, [r7, #0]
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	4413      	add	r3, r2
 8017122:	7818      	ldrb	r0, [r3, #0]
 8017124:	68f9      	ldr	r1, [r7, #12]
 8017126:	4b0c      	ldr	r3, [pc, #48]	; (8017158 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8017128:	fba3 2301 	umull	r2, r3, r3, r1
 801712c:	085a      	lsrs	r2, r3, #1
 801712e:	4613      	mov	r3, r2
 8017130:	005b      	lsls	r3, r3, #1
 8017132:	4413      	add	r3, r2
 8017134:	1aca      	subs	r2, r1, r3
 8017136:	4b09      	ldr	r3, [pc, #36]	; (801715c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8017138:	5c9b      	ldrb	r3, [r3, r2]
 801713a:	4298      	cmp	r0, r3
 801713c:	d001      	beq.n	8017142 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 801713e:	2300      	movs	r3, #0
 8017140:	e004      	b.n	801714c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	3301      	adds	r3, #1
 8017146:	60fb      	str	r3, [r7, #12]
 8017148:	e7e5      	b.n	8017116 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 801714a:	2301      	movs	r3, #1
}
 801714c:	4618      	mov	r0, r3
 801714e:	3714      	adds	r7, #20
 8017150:	46bd      	mov	sp, r7
 8017152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017156:	4770      	bx	lr
 8017158:	aaaaaaab 	.word	0xaaaaaaab
 801715c:	08028bb8 	.word	0x08028bb8

08017160 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b084      	sub	sp, #16
 8017164:	af00      	add	r7, sp, #0
 8017166:	60f8      	str	r0, [r7, #12]
 8017168:	60b9      	str	r1, [r7, #8]
 801716a:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 801716c:	68ba      	ldr	r2, [r7, #8]
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	429a      	cmp	r2, r3
 8017172:	d101      	bne.n	8017178 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8017174:	2301      	movs	r3, #1
 8017176:	e013      	b.n	80171a0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801717e:	781b      	ldrb	r3, [r3, #0]
 8017180:	f083 0301 	eor.w	r3, r3, #1
 8017184:	b2db      	uxtb	r3, r3
 8017186:	2b00      	cmp	r3, #0
 8017188:	d001      	beq.n	801718e <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 801718a:	2301      	movs	r3, #1
 801718c:	e008      	b.n	80171a0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	331c      	adds	r3, #28
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	68b9      	ldr	r1, [r7, #8]
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	4798      	blx	r3
 801719c:	4603      	mov	r3, r0
 801719e:	bf00      	nop
}
 80171a0:	4618      	mov	r0, r3
 80171a2:	3710      	adds	r7, #16
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd80      	pop	{r7, pc}

080171a8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 80171a8:	b590      	push	{r4, r7, lr}
 80171aa:	b087      	sub	sp, #28
 80171ac:	af02      	add	r7, sp, #8
 80171ae:	60f8      	str	r0, [r7, #12]
 80171b0:	60b9      	str	r1, [r7, #8]
 80171b2:	607a      	str	r2, [r7, #4]
 80171b4:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	695a      	ldr	r2, [r3, #20]
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	695b      	ldr	r3, [r3, #20]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	3328      	adds	r3, #40	; 0x28
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	4610      	mov	r0, r2
 80171c6:	4798      	blx	r3
 80171c8:	4604      	mov	r4, r0
 80171ca:	6a3b      	ldr	r3, [r7, #32]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	3328      	adds	r3, #40	; 0x28
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	6a38      	ldr	r0, [r7, #32]
 80171d4:	4798      	blx	r3
 80171d6:	4603      	mov	r3, r0
 80171d8:	461a      	mov	r2, r3
 80171da:	4621      	mov	r1, r4
 80171dc:	68f8      	ldr	r0, [r7, #12]
 80171de:	f7ff ffbf 	bl	8017160 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 80171e2:	4603      	mov	r3, r0
 80171e4:	f083 0301 	eor.w	r3, r3, #1
 80171e8:	b2db      	uxtb	r3, r3
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d014      	beq.n	8017218 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	f103 040c 	add.w	r4, r3, #12
 80171f4:	6a3b      	ldr	r3, [r7, #32]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	3328      	adds	r3, #40	; 0x28
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	6a38      	ldr	r0, [r7, #32]
 80171fe:	4798      	blx	r3
 8017200:	4602      	mov	r2, r0
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	685b      	ldr	r3, [r3, #4]
 8017206:	9301      	str	r3, [sp, #4]
 8017208:	9200      	str	r2, [sp, #0]
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	687a      	ldr	r2, [r7, #4]
 801720e:	68b9      	ldr	r1, [r7, #8]
 8017210:	4620      	mov	r0, r4
 8017212:	f7ff fb4d 	bl	80168b0 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8017216:	e02e      	b.n	8017276 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8017218:	68bb      	ldr	r3, [r7, #8]
 801721a:	689a      	ldr	r2, [r3, #8]
 801721c:	68bb      	ldr	r3, [r7, #8]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	4413      	add	r3, r2
 8017222:	4619      	mov	r1, r3
 8017224:	68f8      	ldr	r0, [r7, #12]
 8017226:	f7ff ff6f 	bl	8017108 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 801722a:	4603      	mov	r3, r0
 801722c:	f083 0301 	eor.w	r3, r3, #1
 8017230:	b2db      	uxtb	r3, r3
 8017232:	2b00      	cmp	r3, #0
 8017234:	d014      	beq.n	8017260 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	f103 040c 	add.w	r4, r3, #12
 801723c:	6a3b      	ldr	r3, [r7, #32]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	3328      	adds	r3, #40	; 0x28
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	6a38      	ldr	r0, [r7, #32]
 8017246:	4798      	blx	r3
 8017248:	4602      	mov	r2, r0
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	685b      	ldr	r3, [r3, #4]
 801724e:	9301      	str	r3, [sp, #4]
 8017250:	9200      	str	r2, [sp, #0]
 8017252:	683b      	ldr	r3, [r7, #0]
 8017254:	687a      	ldr	r2, [r7, #4]
 8017256:	68b9      	ldr	r1, [r7, #8]
 8017258:	4620      	mov	r0, r4
 801725a:	f7ff fb4f 	bl	80168fc <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 801725e:	e00a      	b.n	8017276 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8017260:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017264:	2b00      	cmp	r3, #0
 8017266:	d006      	beq.n	8017276 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8017268:	6a3b      	ldr	r3, [r7, #32]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	3324      	adds	r3, #36	; 0x24
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	68b9      	ldr	r1, [r7, #8]
 8017272:	6a38      	ldr	r0, [r7, #32]
 8017274:	4798      	blx	r3
}
 8017276:	bf00      	nop
 8017278:	3714      	adds	r7, #20
 801727a:	46bd      	mov	sp, r7
 801727c:	bd90      	pop	{r4, r7, pc}
	...

08017280 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b086      	sub	sp, #24
 8017284:	af02      	add	r7, sp, #8
 8017286:	60f8      	str	r0, [r7, #12]
 8017288:	60b9      	str	r1, [r7, #8]
 801728a:	607a      	str	r2, [r7, #4]
 801728c:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 801728e:	4b08      	ldr	r3, [pc, #32]	; (80172b0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8017290:	681a      	ldr	r2, [r3, #0]
 8017292:	78fb      	ldrb	r3, [r7, #3]
 8017294:	9301      	str	r3, [sp, #4]
 8017296:	2300      	movs	r3, #0
 8017298:	9300      	str	r3, [sp, #0]
 801729a:	4613      	mov	r3, r2
 801729c:	687a      	ldr	r2, [r7, #4]
 801729e:	68b9      	ldr	r1, [r7, #8]
 80172a0:	68f8      	ldr	r0, [r7, #12]
 80172a2:	f000 f87f 	bl	80173a4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80172a6:	4603      	mov	r3, r0
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	3710      	adds	r7, #16
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}
 80172b0:	20000100 	.word	0x20000100

080172b4 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80172b4:	b590      	push	{r4, r7, lr}
 80172b6:	b085      	sub	sp, #20
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	60f8      	str	r0, [r7, #12]
 80172bc:	60b9      	str	r1, [r7, #8]
 80172be:	607a      	str	r2, [r7, #4]
 80172c0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 80172c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d00e      	beq.n	80172e8 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 80172ca:	68bb      	ldr	r3, [r7, #8]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	3308      	adds	r3, #8
 80172d0:	681c      	ldr	r4, [r3, #0]
 80172d2:	6879      	ldr	r1, [r7, #4]
 80172d4:	68f8      	ldr	r0, [r7, #12]
 80172d6:	f7ff fe3f 	bl	8016f58 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80172da:	4601      	mov	r1, r0
 80172dc:	6a3b      	ldr	r3, [r7, #32]
 80172de:	683a      	ldr	r2, [r7, #0]
 80172e0:	68b8      	ldr	r0, [r7, #8]
 80172e2:	47a0      	blx	r4
 80172e4:	4603      	mov	r3, r0
 80172e6:	e010      	b.n	801730a <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 80172e8:	68bb      	ldr	r3, [r7, #8]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	3308      	adds	r3, #8
 80172ee:	681c      	ldr	r4, [r3, #0]
 80172f0:	6879      	ldr	r1, [r7, #4]
 80172f2:	68f8      	ldr	r0, [r7, #12]
 80172f4:	f7ff fe30 	bl	8016f58 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80172f8:	4603      	mov	r3, r0
 80172fa:	f103 0120 	add.w	r1, r3, #32
 80172fe:	6a3b      	ldr	r3, [r7, #32]
 8017300:	683a      	ldr	r2, [r7, #0]
 8017302:	68b8      	ldr	r0, [r7, #8]
 8017304:	47a0      	blx	r4
 8017306:	4603      	mov	r3, r0
 8017308:	bf00      	nop
}
 801730a:	4618      	mov	r0, r3
 801730c:	3714      	adds	r7, #20
 801730e:	46bd      	mov	sp, r7
 8017310:	bd90      	pop	{r4, r7, pc}
	...

08017314 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8017314:	b590      	push	{r4, r7, lr}
 8017316:	b085      	sub	sp, #20
 8017318:	af00      	add	r7, sp, #0
 801731a:	60f8      	str	r0, [r7, #12]
 801731c:	60b9      	str	r1, [r7, #8]
 801731e:	607a      	str	r2, [r7, #4]
 8017320:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8017322:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017326:	2b00      	cmp	r3, #0
 8017328:	d00b      	beq.n	8017342 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 801732a:	4b0e      	ldr	r3, [pc, #56]	; (8017364 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 801732c:	681c      	ldr	r4, [r3, #0]
 801732e:	6839      	ldr	r1, [r7, #0]
 8017330:	68f8      	ldr	r0, [r7, #12]
 8017332:	f7ff fe11 	bl	8016f58 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017336:	4603      	mov	r3, r0
 8017338:	4619      	mov	r1, r3
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	47a0      	blx	r4
 801733e:	4603      	mov	r3, r0
 8017340:	e00c      	b.n	801735c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8017342:	4b08      	ldr	r3, [pc, #32]	; (8017364 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8017344:	681c      	ldr	r4, [r3, #0]
 8017346:	6839      	ldr	r1, [r7, #0]
 8017348:	68f8      	ldr	r0, [r7, #12]
 801734a:	f7ff fe05 	bl	8016f58 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801734e:	4603      	mov	r3, r0
 8017350:	3320      	adds	r3, #32
 8017352:	4619      	mov	r1, r3
 8017354:	6878      	ldr	r0, [r7, #4]
 8017356:	47a0      	blx	r4
 8017358:	4603      	mov	r3, r0
 801735a:	bf00      	nop
}
 801735c:	4618      	mov	r0, r3
 801735e:	3714      	adds	r7, #20
 8017360:	46bd      	mov	sp, r7
 8017362:	bd90      	pop	{r4, r7, pc}
 8017364:	200000cc 	.word	0x200000cc

08017368 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b084      	sub	sp, #16
 801736c:	af00      	add	r7, sp, #0
 801736e:	60f8      	str	r0, [r7, #12]
 8017370:	60b9      	str	r1, [r7, #8]
 8017372:	607a      	str	r2, [r7, #4]
 8017374:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8017376:	7e3b      	ldrb	r3, [r7, #24]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d008      	beq.n	801738e <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	3320      	adds	r3, #32
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	2120      	movs	r1, #32
 8017386:	68b8      	ldr	r0, [r7, #8]
 8017388:	4798      	blx	r3
 801738a:	4603      	mov	r3, r0
 801738c:	e006      	b.n	801739c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 801738e:	687a      	ldr	r2, [r7, #4]
 8017390:	6839      	ldr	r1, [r7, #0]
 8017392:	68f8      	ldr	r0, [r7, #12]
 8017394:	f7ff fdef 	bl	8016f76 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8017398:	4603      	mov	r3, r0
 801739a:	bf00      	nop
}
 801739c:	4618      	mov	r0, r3
 801739e:	3710      	adds	r7, #16
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}

080173a4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80173a4:	b580      	push	{r7, lr}
 80173a6:	b08a      	sub	sp, #40	; 0x28
 80173a8:	af04      	add	r7, sp, #16
 80173aa:	60f8      	str	r0, [r7, #12]
 80173ac:	60b9      	str	r1, [r7, #8]
 80173ae:	607a      	str	r2, [r7, #4]
 80173b0:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 80173b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80173b6:	9301      	str	r3, [sp, #4]
 80173b8:	6a3b      	ldr	r3, [r7, #32]
 80173ba:	9300      	str	r3, [sp, #0]
 80173bc:	683b      	ldr	r3, [r7, #0]
 80173be:	687a      	ldr	r2, [r7, #4]
 80173c0:	68b9      	ldr	r1, [r7, #8]
 80173c2:	68f8      	ldr	r0, [r7, #12]
 80173c4:	f7ff ff76 	bl	80172b4 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 80173c8:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d101      	bne.n	80173d4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 80173d0:	2300      	movs	r3, #0
 80173d2:	e017      	b.n	8017404 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 80173d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80173d8:	9300      	str	r3, [sp, #0]
 80173da:	697b      	ldr	r3, [r7, #20]
 80173dc:	687a      	ldr	r2, [r7, #4]
 80173de:	68b9      	ldr	r1, [r7, #8]
 80173e0:	68f8      	ldr	r0, [r7, #12]
 80173e2:	f7ff ffc1 	bl	8017368 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80173e6:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80173e8:	6a3b      	ldr	r3, [r7, #32]
 80173ea:	9302      	str	r3, [sp, #8]
 80173ec:	683b      	ldr	r3, [r7, #0]
 80173ee:	9301      	str	r3, [sp, #4]
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	9300      	str	r3, [sp, #0]
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	697a      	ldr	r2, [r7, #20]
 80173f8:	6939      	ldr	r1, [r7, #16]
 80173fa:	68f8      	ldr	r0, [r7, #12]
 80173fc:	f7ff fdcc 	bl	8016f98 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8017400:	693b      	ldr	r3, [r7, #16]
 8017402:	689b      	ldr	r3, [r3, #8]
}
 8017404:	4618      	mov	r0, r3
 8017406:	3718      	adds	r7, #24
 8017408:	46bd      	mov	sp, r7
 801740a:	bd80      	pop	{r7, pc}

0801740c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 801740c:	b590      	push	{r4, r7, lr}
 801740e:	b089      	sub	sp, #36	; 0x24
 8017410:	af02      	add	r7, sp, #8
 8017412:	60f8      	str	r0, [r7, #12]
 8017414:	60b9      	str	r1, [r7, #8]
 8017416:	607a      	str	r2, [r7, #4]
 8017418:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d03a      	beq.n	8017496 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017426:	331c      	adds	r3, #28
 8017428:	6879      	ldr	r1, [r7, #4]
 801742a:	4618      	mov	r0, r3
 801742c:	f7ff fc13 	bl	8016c56 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8017430:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8017432:	697b      	ldr	r3, [r7, #20]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d10b      	bne.n	8017450 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	f103 000c 	add.w	r0, r3, #12
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	685b      	ldr	r3, [r3, #4]
 8017442:	9300      	str	r3, [sp, #0]
 8017444:	68bb      	ldr	r3, [r7, #8]
 8017446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017448:	6839      	ldr	r1, [r7, #0]
 801744a:	f7ff fa0d 	bl	8016868 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 801744e:	e023      	b.n	8017498 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8017450:	68b8      	ldr	r0, [r7, #8]
 8017452:	f7f8 ff95 	bl	8010380 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8017456:	4603      	mov	r3, r0
 8017458:	f083 0301 	eor.w	r3, r3, #1
 801745c:	b2db      	uxtb	r3, r3
 801745e:	2b00      	cmp	r3, #0
 8017460:	d01a      	beq.n	8017498 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8017462:	697b      	ldr	r3, [r7, #20]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8017468:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801746c:	9301      	str	r3, [sp, #4]
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	9300      	str	r3, [sp, #0]
 8017472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017474:	683a      	ldr	r2, [r7, #0]
 8017476:	6979      	ldr	r1, [r7, #20]
 8017478:	68f8      	ldr	r0, [r7, #12]
 801747a:	f7ff fe95 	bl	80171a8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 801747e:	68bb      	ldr	r3, [r7, #8]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	330c      	adds	r3, #12
 8017484:	681c      	ldr	r4, [r3, #0]
 8017486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017488:	9300      	str	r3, [sp, #0]
 801748a:	683b      	ldr	r3, [r7, #0]
 801748c:	693a      	ldr	r2, [r7, #16]
 801748e:	6879      	ldr	r1, [r7, #4]
 8017490:	68b8      	ldr	r0, [r7, #8]
 8017492:	47a0      	blx	r4
 8017494:	e000      	b.n	8017498 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8017496:	bf00      	nop
    }
}
 8017498:	371c      	adds	r7, #28
 801749a:	46bd      	mov	sp, r7
 801749c:	bd90      	pop	{r4, r7, pc}
	...

080174a0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b086      	sub	sp, #24
 80174a4:	af02      	add	r7, sp, #8
 80174a6:	60f8      	str	r0, [r7, #12]
 80174a8:	60b9      	str	r1, [r7, #8]
 80174aa:	607a      	str	r2, [r7, #4]
 80174ac:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 80174ae:	4b08      	ldr	r3, [pc, #32]	; (80174d0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 80174b0:	681a      	ldr	r2, [r3, #0]
 80174b2:	78fb      	ldrb	r3, [r7, #3]
 80174b4:	9301      	str	r3, [sp, #4]
 80174b6:	2300      	movs	r3, #0
 80174b8:	9300      	str	r3, [sp, #0]
 80174ba:	4613      	mov	r3, r2
 80174bc:	687a      	ldr	r2, [r7, #4]
 80174be:	68b9      	ldr	r1, [r7, #8]
 80174c0:	68f8      	ldr	r0, [r7, #12]
 80174c2:	f7ff ffa3 	bl	801740c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 80174c6:	bf00      	nop
 80174c8:	3710      	adds	r7, #16
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	bf00      	nop
 80174d0:	20000100 	.word	0x20000100

080174d4 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b08a      	sub	sp, #40	; 0x28
 80174d8:	af04      	add	r7, sp, #16
 80174da:	60f8      	str	r0, [r7, #12]
 80174dc:	60b9      	str	r1, [r7, #8]
 80174de:	607a      	str	r2, [r7, #4]
 80174e0:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d023      	beq.n	8017530 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80174ee:	331c      	adds	r3, #28
 80174f0:	6879      	ldr	r1, [r7, #4]
 80174f2:	4618      	mov	r0, r3
 80174f4:	f7ff fbaf 	bl	8016c56 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80174f8:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d10c      	bne.n	801751a <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	f103 000c 	add.w	r0, r3, #12
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	685b      	ldr	r3, [r3, #4]
 801750a:	9300      	str	r3, [sp, #0]
 801750c:	68bb      	ldr	r3, [r7, #8]
 801750e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017510:	6a39      	ldr	r1, [r7, #32]
 8017512:	f7ff f9a9 	bl	8016868 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8017516:	2300      	movs	r3, #0
 8017518:	e019      	b.n	801754e <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 801751a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801751e:	9301      	str	r3, [sp, #4]
 8017520:	68bb      	ldr	r3, [r7, #8]
 8017522:	9300      	str	r3, [sp, #0]
 8017524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017526:	6a3a      	ldr	r2, [r7, #32]
 8017528:	6979      	ldr	r1, [r7, #20]
 801752a:	68f8      	ldr	r0, [r7, #12]
 801752c:	f7ff fe3c 	bl	80171a8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8017530:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017534:	9302      	str	r3, [sp, #8]
 8017536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017538:	9301      	str	r3, [sp, #4]
 801753a:	6a3b      	ldr	r3, [r7, #32]
 801753c:	9300      	str	r3, [sp, #0]
 801753e:	683b      	ldr	r3, [r7, #0]
 8017540:	687a      	ldr	r2, [r7, #4]
 8017542:	68b9      	ldr	r1, [r7, #8]
 8017544:	68f8      	ldr	r0, [r7, #12]
 8017546:	f7ff fd62 	bl	801700e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 801754a:	4603      	mov	r3, r0
 801754c:	bf00      	nop
}
 801754e:	4618      	mov	r0, r3
 8017550:	3718      	adds	r7, #24
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}

08017556 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8017556:	b580      	push	{r7, lr}
 8017558:	b084      	sub	sp, #16
 801755a:	af00      	add	r7, sp, #0
 801755c:	6078      	str	r0, [r7, #4]
 801755e:	460b      	mov	r3, r1
 8017560:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017568:	331c      	adds	r3, #28
 801756a:	78fa      	ldrb	r2, [r7, #3]
 801756c:	4611      	mov	r1, r2
 801756e:	4618      	mov	r0, r3
 8017570:	f7ff fbc0 	bl	8016cf4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8017574:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	330c      	adds	r3, #12
 801757a:	4618      	mov	r0, r3
 801757c:	f7ff f882 	bl	8016684 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d010      	beq.n	80175a8 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	330c      	adds	r3, #12
 801758a:	68f9      	ldr	r1, [r7, #12]
 801758c:	4618      	mov	r0, r3
 801758e:	f7ff f897 	bl	80166c0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017598:	331c      	adds	r3, #28
 801759a:	78fa      	ldrb	r2, [r7, #3]
 801759c:	68f9      	ldr	r1, [r7, #12]
 801759e:	4618      	mov	r0, r3
 80175a0:	f7ff fbcb 	bl	8016d3a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80175a4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80175a6:	e7eb      	b.n	8017580 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	330c      	adds	r3, #12
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7ff f8e7 	bl	8016780 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 80175b2:	bf00      	nop
 80175b4:	3710      	adds	r7, #16
 80175b6:	46bd      	mov	sp, r7
 80175b8:	bd80      	pop	{r7, pc}

080175ba <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 80175ba:	b580      	push	{r7, lr}
 80175bc:	b082      	sub	sp, #8
 80175be:	af00      	add	r7, sp, #0
 80175c0:	6078      	str	r0, [r7, #4]
 80175c2:	460b      	mov	r3, r1
 80175c4:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 80175c6:	78fb      	ldrb	r3, [r7, #3]
 80175c8:	4619      	mov	r1, r3
 80175ca:	6878      	ldr	r0, [r7, #4]
 80175cc:	f7ff ffc3 	bl	8017556 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	330c      	adds	r3, #12
 80175d4:	4618      	mov	r0, r3
 80175d6:	f7ff f9e5 	bl	80169a4 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80175da:	4603      	mov	r3, r0
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3708      	adds	r7, #8
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}

080175e4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b084      	sub	sp, #16
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175f2:	331c      	adds	r3, #28
 80175f4:	2103      	movs	r1, #3
 80175f6:	4618      	mov	r0, r3
 80175f8:	f7ff fb7c 	bl	8016cf4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80175fc:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d011      	beq.n	8017628 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	7e1b      	ldrb	r3, [r3, #24]
 8017608:	2b03      	cmp	r3, #3
 801760a:	d102      	bne.n	8017612 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	2202      	movs	r2, #2
 8017610:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017618:	331c      	adds	r3, #28
 801761a:	2203      	movs	r2, #3
 801761c:	68f9      	ldr	r1, [r7, #12]
 801761e:	4618      	mov	r0, r3
 8017620:	f7ff fb8b 	bl	8016d3a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017624:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8017626:	e7ea      	b.n	80175fe <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8017628:	bf00      	nop
 801762a:	3710      	adds	r7, #16
 801762c:	46bd      	mov	sp, r7
 801762e:	bd80      	pop	{r7, pc}

08017630 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
 8017638:	460b      	mov	r3, r1
 801763a:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017642:	331c      	adds	r3, #28
 8017644:	78fa      	ldrb	r2, [r7, #3]
 8017646:	4611      	mov	r1, r2
 8017648:	4618      	mov	r0, r3
 801764a:	f7ff fb30 	bl	8016cae <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 801764e:	4603      	mov	r3, r0
}
 8017650:	4618      	mov	r0, r3
 8017652:	3708      	adds	r7, #8
 8017654:	46bd      	mov	sp, r7
 8017656:	bd80      	pop	{r7, pc}

08017658 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8017658:	b580      	push	{r7, lr}
 801765a:	b084      	sub	sp, #16
 801765c:	af00      	add	r7, sp, #0
 801765e:	60f8      	str	r0, [r7, #12]
 8017660:	60b9      	str	r1, [r7, #8]
 8017662:	607a      	str	r2, [r7, #4]
 8017664:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	68b9      	ldr	r1, [r7, #8]
 801766a:	4618      	mov	r0, r3
 801766c:	f7f5 fb13 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	3308      	adds	r3, #8
 8017674:	6879      	ldr	r1, [r7, #4]
 8017676:	4618      	mov	r0, r3
 8017678:	f7f5 fb0d 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	683a      	ldr	r2, [r7, #0]
 8017680:	611a      	str	r2, [r3, #16]
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	2200      	movs	r2, #0
 8017686:	615a      	str	r2, [r3, #20]
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	4618      	mov	r0, r3
 801768c:	3710      	adds	r7, #16
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}

08017692 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8017692:	b480      	push	{r7}
 8017694:	b083      	sub	sp, #12
 8017696:	af00      	add	r7, sp, #0
 8017698:	6078      	str	r0, [r7, #4]
 801769a:	6039      	str	r1, [r7, #0]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	4618      	mov	r0, r3
 80176a0:	370c      	adds	r7, #12
 80176a2:	46bd      	mov	sp, r7
 80176a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a8:	4770      	bx	lr

080176aa <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 80176aa:	b480      	push	{r7}
 80176ac:	b083      	sub	sp, #12
 80176ae:	af00      	add	r7, sp, #0
 80176b0:	6078      	str	r0, [r7, #4]
 80176b2:	6039      	str	r1, [r7, #0]
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	4618      	mov	r0, r3
 80176b8:	370c      	adds	r7, #12
 80176ba:	46bd      	mov	sp, r7
 80176bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c0:	4770      	bx	lr

080176c2 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 80176c2:	b480      	push	{r7}
 80176c4:	b085      	sub	sp, #20
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	60f8      	str	r0, [r7, #12]
 80176ca:	60b9      	str	r1, [r7, #8]
 80176cc:	4613      	mov	r3, r2
 80176ce:	71fb      	strb	r3, [r7, #7]
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	4618      	mov	r0, r3
 80176d4:	3714      	adds	r7, #20
 80176d6:	46bd      	mov	sp, r7
 80176d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176dc:	4770      	bx	lr

080176de <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80176de:	b480      	push	{r7}
 80176e0:	b085      	sub	sp, #20
 80176e2:	af00      	add	r7, sp, #0
 80176e4:	60f8      	str	r0, [r7, #12]
 80176e6:	60b9      	str	r1, [r7, #8]
 80176e8:	607a      	str	r2, [r7, #4]
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	4618      	mov	r0, r3
 80176ee:	3714      	adds	r7, #20
 80176f0:	46bd      	mov	sp, r7
 80176f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f6:	4770      	bx	lr

080176f8 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 80176f8:	b480      	push	{r7}
 80176fa:	b085      	sub	sp, #20
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	60f8      	str	r0, [r7, #12]
 8017700:	60b9      	str	r1, [r7, #8]
 8017702:	607a      	str	r2, [r7, #4]
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	4618      	mov	r0, r3
 8017708:	3714      	adds	r7, #20
 801770a:	46bd      	mov	sp, r7
 801770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017710:	4770      	bx	lr

08017712 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8017712:	b480      	push	{r7}
 8017714:	b085      	sub	sp, #20
 8017716:	af00      	add	r7, sp, #0
 8017718:	60f8      	str	r0, [r7, #12]
 801771a:	60b9      	str	r1, [r7, #8]
 801771c:	607a      	str	r2, [r7, #4]
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	4618      	mov	r0, r3
 8017722:	3714      	adds	r7, #20
 8017724:	46bd      	mov	sp, r7
 8017726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772a:	4770      	bx	lr

0801772c <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801772c:	b480      	push	{r7}
 801772e:	b085      	sub	sp, #20
 8017730:	af00      	add	r7, sp, #0
 8017732:	60f8      	str	r0, [r7, #12]
 8017734:	60b9      	str	r1, [r7, #8]
 8017736:	607a      	str	r2, [r7, #4]
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	4618      	mov	r0, r3
 801773c:	3714      	adds	r7, #20
 801773e:	46bd      	mov	sp, r7
 8017740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017744:	4770      	bx	lr

08017746 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8017746:	b480      	push	{r7}
 8017748:	b085      	sub	sp, #20
 801774a:	af00      	add	r7, sp, #0
 801774c:	60f8      	str	r0, [r7, #12]
 801774e:	60b9      	str	r1, [r7, #8]
 8017750:	4639      	mov	r1, r7
 8017752:	e881 000c 	stmia.w	r1, {r2, r3}
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	4618      	mov	r0, r3
 801775a:	3714      	adds	r7, #20
 801775c:	46bd      	mov	sp, r7
 801775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017762:	4770      	bx	lr

08017764 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8017764:	b480      	push	{r7}
 8017766:	b085      	sub	sp, #20
 8017768:	af00      	add	r7, sp, #0
 801776a:	60f8      	str	r0, [r7, #12]
 801776c:	60b9      	str	r1, [r7, #8]
 801776e:	4639      	mov	r1, r7
 8017770:	e881 000c 	stmia.w	r1, {r2, r3}
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	4618      	mov	r0, r3
 8017778:	3714      	adds	r7, #20
 801777a:	46bd      	mov	sp, r7
 801777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017780:	4770      	bx	lr

08017782 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8017782:	b480      	push	{r7}
 8017784:	b085      	sub	sp, #20
 8017786:	af00      	add	r7, sp, #0
 8017788:	60f8      	str	r0, [r7, #12]
 801778a:	60b9      	str	r1, [r7, #8]
 801778c:	ed87 0b00 	vstr	d0, [r7]
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	4618      	mov	r0, r3
 8017794:	3714      	adds	r7, #20
 8017796:	46bd      	mov	sp, r7
 8017798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779c:	4770      	bx	lr

0801779e <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801779e:	b480      	push	{r7}
 80177a0:	b085      	sub	sp, #20
 80177a2:	af00      	add	r7, sp, #0
 80177a4:	60f8      	str	r0, [r7, #12]
 80177a6:	60b9      	str	r1, [r7, #8]
 80177a8:	607a      	str	r2, [r7, #4]
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	4618      	mov	r0, r3
 80177ae:	3714      	adds	r7, #20
 80177b0:	46bd      	mov	sp, r7
 80177b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b6:	4770      	bx	lr

080177b8 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 80177b8:	b480      	push	{r7}
 80177ba:	b085      	sub	sp, #20
 80177bc:	af00      	add	r7, sp, #0
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	60b9      	str	r1, [r7, #8]
 80177c2:	607a      	str	r2, [r7, #4]
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	4618      	mov	r0, r3
 80177c8:	3714      	adds	r7, #20
 80177ca:	46bd      	mov	sp, r7
 80177cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d0:	4770      	bx	lr

080177d2 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 80177d2:	b480      	push	{r7}
 80177d4:	b085      	sub	sp, #20
 80177d6:	af00      	add	r7, sp, #0
 80177d8:	60f8      	str	r0, [r7, #12]
 80177da:	60b9      	str	r1, [r7, #8]
 80177dc:	607a      	str	r2, [r7, #4]
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	4618      	mov	r0, r3
 80177e2:	3714      	adds	r7, #20
 80177e4:	46bd      	mov	sp, r7
 80177e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ea:	4770      	bx	lr

080177ec <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 80177ec:	b480      	push	{r7}
 80177ee:	b085      	sub	sp, #20
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	60f8      	str	r0, [r7, #12]
 80177f4:	60b9      	str	r1, [r7, #8]
 80177f6:	607a      	str	r2, [r7, #4]
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	4618      	mov	r0, r3
 80177fc:	3714      	adds	r7, #20
 80177fe:	46bd      	mov	sp, r7
 8017800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017804:	4770      	bx	lr

08017806 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8017806:	b480      	push	{r7}
 8017808:	b085      	sub	sp, #20
 801780a:	af00      	add	r7, sp, #0
 801780c:	60f8      	str	r0, [r7, #12]
 801780e:	60b9      	str	r1, [r7, #8]
 8017810:	607a      	str	r2, [r7, #4]
 8017812:	603b      	str	r3, [r7, #0]
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	4618      	mov	r0, r3
 8017818:	3714      	adds	r7, #20
 801781a:	46bd      	mov	sp, r7
 801781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017820:	4770      	bx	lr

08017822 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8017822:	b480      	push	{r7}
 8017824:	b085      	sub	sp, #20
 8017826:	af00      	add	r7, sp, #0
 8017828:	60f8      	str	r0, [r7, #12]
 801782a:	60b9      	str	r1, [r7, #8]
 801782c:	607a      	str	r2, [r7, #4]
 801782e:	603b      	str	r3, [r7, #0]
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	4618      	mov	r0, r3
 8017834:	3714      	adds	r7, #20
 8017836:	46bd      	mov	sp, r7
 8017838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801783c:	4770      	bx	lr

0801783e <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 801783e:	b480      	push	{r7}
 8017840:	b085      	sub	sp, #20
 8017842:	af00      	add	r7, sp, #0
 8017844:	60f8      	str	r0, [r7, #12]
 8017846:	60b9      	str	r1, [r7, #8]
 8017848:	607a      	str	r2, [r7, #4]
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	4618      	mov	r0, r3
 801784e:	3714      	adds	r7, #20
 8017850:	46bd      	mov	sp, r7
 8017852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017856:	4770      	bx	lr

08017858 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8017858:	b480      	push	{r7}
 801785a:	b085      	sub	sp, #20
 801785c:	af00      	add	r7, sp, #0
 801785e:	60f8      	str	r0, [r7, #12]
 8017860:	60b9      	str	r1, [r7, #8]
 8017862:	607a      	str	r2, [r7, #4]
 8017864:	603b      	str	r3, [r7, #0]
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	4618      	mov	r0, r3
 801786a:	3714      	adds	r7, #20
 801786c:	46bd      	mov	sp, r7
 801786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017872:	4770      	bx	lr

08017874 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8017874:	b480      	push	{r7}
 8017876:	b083      	sub	sp, #12
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
 801787c:	2300      	movs	r3, #0
 801787e:	4618      	mov	r0, r3
 8017880:	370c      	adds	r7, #12
 8017882:	46bd      	mov	sp, r7
 8017884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017888:	4770      	bx	lr
	...

0801788c <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 801788c:	b580      	push	{r7, lr}
 801788e:	b084      	sub	sp, #16
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
 8017894:	6039      	str	r1, [r7, #0]
 8017896:	f107 0308 	add.w	r3, r7, #8
 801789a:	4909      	ldr	r1, [pc, #36]	; (80178c0 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 801789c:	4618      	mov	r0, r3
 801789e:	f7f5 f9a6 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80178a2:	f107 0308 	add.w	r3, r7, #8
 80178a6:	4619      	mov	r1, r3
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f005 fec5 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
 80178ae:	f107 0308 	add.w	r3, r7, #8
 80178b2:	4618      	mov	r0, r3
 80178b4:	f7f5 fd53 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80178b8:	6878      	ldr	r0, [r7, #4]
 80178ba:	3710      	adds	r7, #16
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}
 80178c0:	08025fb4 	.word	0x08025fb4

080178c4 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 80178c4:	b480      	push	{r7}
 80178c6:	b083      	sub	sp, #12
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
 80178cc:	460b      	mov	r3, r1
 80178ce:	70fb      	strb	r3, [r7, #3]
 80178d0:	78fb      	ldrb	r3, [r7, #3]
 80178d2:	4618      	mov	r0, r3
 80178d4:	370c      	adds	r7, #12
 80178d6:	46bd      	mov	sp, r7
 80178d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178dc:	4770      	bx	lr

080178de <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 80178de:	b480      	push	{r7}
 80178e0:	b083      	sub	sp, #12
 80178e2:	af00      	add	r7, sp, #0
 80178e4:	6078      	str	r0, [r7, #4]
 80178e6:	2300      	movs	r3, #0
 80178e8:	4618      	mov	r0, r3
 80178ea:	370c      	adds	r7, #12
 80178ec:	46bd      	mov	sp, r7
 80178ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f2:	4770      	bx	lr

080178f4 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 80178f4:	b480      	push	{r7}
 80178f6:	b083      	sub	sp, #12
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
 80178fc:	2300      	movs	r3, #0
 80178fe:	4618      	mov	r0, r3
 8017900:	370c      	adds	r7, #12
 8017902:	46bd      	mov	sp, r7
 8017904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017908:	4770      	bx	lr

0801790a <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 801790a:	b480      	push	{r7}
 801790c:	b083      	sub	sp, #12
 801790e:	af00      	add	r7, sp, #0
 8017910:	6078      	str	r0, [r7, #4]
 8017912:	6039      	str	r1, [r7, #0]
 8017914:	683b      	ldr	r3, [r7, #0]
 8017916:	4618      	mov	r0, r3
 8017918:	370c      	adds	r7, #12
 801791a:	46bd      	mov	sp, r7
 801791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017920:	4770      	bx	lr

08017922 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8017922:	b480      	push	{r7}
 8017924:	b083      	sub	sp, #12
 8017926:	af00      	add	r7, sp, #0
 8017928:	6078      	str	r0, [r7, #4]
 801792a:	2300      	movs	r3, #0
 801792c:	4618      	mov	r0, r3
 801792e:	370c      	adds	r7, #12
 8017930:	46bd      	mov	sp, r7
 8017932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017936:	4770      	bx	lr

08017938 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8017938:	b480      	push	{r7}
 801793a:	b083      	sub	sp, #12
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
 8017940:	6039      	str	r1, [r7, #0]
 8017942:	683b      	ldr	r3, [r7, #0]
 8017944:	4618      	mov	r0, r3
 8017946:	370c      	adds	r7, #12
 8017948:	46bd      	mov	sp, r7
 801794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794e:	4770      	bx	lr

08017950 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8017950:	b480      	push	{r7}
 8017952:	b083      	sub	sp, #12
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
 8017958:	2300      	movs	r3, #0
 801795a:	4618      	mov	r0, r3
 801795c:	370c      	adds	r7, #12
 801795e:	46bd      	mov	sp, r7
 8017960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017964:	4770      	bx	lr

08017966 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8017966:	b480      	push	{r7}
 8017968:	b083      	sub	sp, #12
 801796a:	af00      	add	r7, sp, #0
 801796c:	6078      	str	r0, [r7, #4]
 801796e:	6039      	str	r1, [r7, #0]
 8017970:	683b      	ldr	r3, [r7, #0]
 8017972:	4618      	mov	r0, r3
 8017974:	370c      	adds	r7, #12
 8017976:	46bd      	mov	sp, r7
 8017978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801797c:	4770      	bx	lr

0801797e <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 801797e:	b580      	push	{r7, lr}
 8017980:	b082      	sub	sp, #8
 8017982:	af00      	add	r7, sp, #0
 8017984:	6078      	str	r0, [r7, #4]
 8017986:	6039      	str	r1, [r7, #0]
 8017988:	2100      	movs	r1, #0
 801798a:	6878      	ldr	r0, [r7, #4]
 801798c:	f7f3 f972 	bl	800ac74 <_ZN18cpputest_ulonglongC1Ei>
 8017990:	6878      	ldr	r0, [r7, #4]
 8017992:	3708      	adds	r7, #8
 8017994:	46bd      	mov	sp, r7
 8017996:	bd80      	pop	{r7, pc}

08017998 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8017998:	b480      	push	{r7}
 801799a:	b085      	sub	sp, #20
 801799c:	af00      	add	r7, sp, #0
 801799e:	60f8      	str	r0, [r7, #12]
 80179a0:	60b9      	str	r1, [r7, #8]
 80179a2:	4639      	mov	r1, r7
 80179a4:	e881 000c 	stmia.w	r1, {r2, r3}
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	461a      	mov	r2, r3
 80179ac:	463b      	mov	r3, r7
 80179ae:	cb03      	ldmia	r3!, {r0, r1}
 80179b0:	6010      	str	r0, [r2, #0]
 80179b2:	6051      	str	r1, [r2, #4]
 80179b4:	68f8      	ldr	r0, [r7, #12]
 80179b6:	3714      	adds	r7, #20
 80179b8:	46bd      	mov	sp, r7
 80179ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179be:	4770      	bx	lr

080179c0 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
 80179c8:	6039      	str	r1, [r7, #0]
 80179ca:	2100      	movs	r1, #0
 80179cc:	6878      	ldr	r0, [r7, #4]
 80179ce:	f7f3 f945 	bl	800ac5c <_ZN17cpputest_longlongC1Ei>
 80179d2:	6878      	ldr	r0, [r7, #4]
 80179d4:	3708      	adds	r7, #8
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}

080179da <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 80179da:	b480      	push	{r7}
 80179dc:	b085      	sub	sp, #20
 80179de:	af00      	add	r7, sp, #0
 80179e0:	60f8      	str	r0, [r7, #12]
 80179e2:	60b9      	str	r1, [r7, #8]
 80179e4:	4639      	mov	r1, r7
 80179e6:	e881 000c 	stmia.w	r1, {r2, r3}
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	461a      	mov	r2, r3
 80179ee:	463b      	mov	r3, r7
 80179f0:	cb03      	ldmia	r3!, {r0, r1}
 80179f2:	6010      	str	r0, [r2, #0]
 80179f4:	6051      	str	r1, [r2, #4]
 80179f6:	68f8      	ldr	r0, [r7, #12]
 80179f8:	3714      	adds	r7, #20
 80179fa:	46bd      	mov	sp, r7
 80179fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a00:	4770      	bx	lr

08017a02 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8017a02:	b480      	push	{r7}
 8017a04:	b083      	sub	sp, #12
 8017a06:	af00      	add	r7, sp, #0
 8017a08:	6078      	str	r0, [r7, #4]
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	370c      	adds	r7, #12
 8017a10:	46bd      	mov	sp, r7
 8017a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a16:	4770      	bx	lr

08017a18 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8017a18:	b480      	push	{r7}
 8017a1a:	b083      	sub	sp, #12
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
 8017a20:	6039      	str	r1, [r7, #0]
 8017a22:	683b      	ldr	r3, [r7, #0]
 8017a24:	4618      	mov	r0, r3
 8017a26:	370c      	adds	r7, #12
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a2e:	4770      	bx	lr

08017a30 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8017a30:	b480      	push	{r7}
 8017a32:	b083      	sub	sp, #12
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
 8017a38:	f04f 0200 	mov.w	r2, #0
 8017a3c:	f04f 0300 	mov.w	r3, #0
 8017a40:	ec43 2b17 	vmov	d7, r2, r3
 8017a44:	eeb0 0a47 	vmov.f32	s0, s14
 8017a48:	eef0 0a67 	vmov.f32	s1, s15
 8017a4c:	370c      	adds	r7, #12
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a54:	4770      	bx	lr

08017a56 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8017a56:	b480      	push	{r7}
 8017a58:	b085      	sub	sp, #20
 8017a5a:	af00      	add	r7, sp, #0
 8017a5c:	60f8      	str	r0, [r7, #12]
 8017a5e:	ed87 0b00 	vstr	d0, [r7]
 8017a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017a66:	ec43 2b17 	vmov	d7, r2, r3
 8017a6a:	eeb0 0a47 	vmov.f32	s0, s14
 8017a6e:	eef0 0a67 	vmov.f32	s1, s15
 8017a72:	3714      	adds	r7, #20
 8017a74:	46bd      	mov	sp, r7
 8017a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7a:	4770      	bx	lr

08017a7c <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8017a7c:	b480      	push	{r7}
 8017a7e:	b083      	sub	sp, #12
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
 8017a84:	4b03      	ldr	r3, [pc, #12]	; (8017a94 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8017a86:	4618      	mov	r0, r3
 8017a88:	370c      	adds	r7, #12
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a90:	4770      	bx	lr
 8017a92:	bf00      	nop
 8017a94:	08025fb4 	.word	0x08025fb4

08017a98 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8017a98:	b480      	push	{r7}
 8017a9a:	b083      	sub	sp, #12
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	6039      	str	r1, [r7, #0]
 8017aa2:	683b      	ldr	r3, [r7, #0]
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	370c      	adds	r7, #12
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aae:	4770      	bx	lr

08017ab0 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8017ab0:	b480      	push	{r7}
 8017ab2:	b083      	sub	sp, #12
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	6078      	str	r0, [r7, #4]
 8017ab8:	2300      	movs	r3, #0
 8017aba:	4618      	mov	r0, r3
 8017abc:	370c      	adds	r7, #12
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac4:	4770      	bx	lr

08017ac6 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8017ac6:	b480      	push	{r7}
 8017ac8:	b083      	sub	sp, #12
 8017aca:	af00      	add	r7, sp, #0
 8017acc:	6078      	str	r0, [r7, #4]
 8017ace:	6039      	str	r1, [r7, #0]
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	370c      	adds	r7, #12
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017adc:	4770      	bx	lr

08017ade <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8017ade:	b480      	push	{r7}
 8017ae0:	b083      	sub	sp, #12
 8017ae2:	af00      	add	r7, sp, #0
 8017ae4:	6078      	str	r0, [r7, #4]
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	4618      	mov	r0, r3
 8017aea:	370c      	adds	r7, #12
 8017aec:	46bd      	mov	sp, r7
 8017aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af2:	4770      	bx	lr

08017af4 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8017af4:	b480      	push	{r7}
 8017af6:	b083      	sub	sp, #12
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
 8017afc:	6039      	str	r1, [r7, #0]
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	4618      	mov	r0, r3
 8017b02:	370c      	adds	r7, #12
 8017b04:	46bd      	mov	sp, r7
 8017b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0a:	4770      	bx	lr

08017b0c <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8017b0c:	b480      	push	{r7}
 8017b0e:	b083      	sub	sp, #12
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
 8017b14:	2300      	movs	r3, #0
 8017b16:	4618      	mov	r0, r3
 8017b18:	370c      	adds	r7, #12
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b20:	4770      	bx	lr

08017b22 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8017b22:	b480      	push	{r7}
 8017b24:	b083      	sub	sp, #12
 8017b26:	af00      	add	r7, sp, #0
 8017b28:	6078      	str	r0, [r7, #4]
 8017b2a:	6039      	str	r1, [r7, #0]
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	4618      	mov	r0, r3
 8017b30:	370c      	adds	r7, #12
 8017b32:	46bd      	mov	sp, r7
 8017b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b38:	4770      	bx	lr

08017b3a <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8017b3a:	b480      	push	{r7}
 8017b3c:	b083      	sub	sp, #12
 8017b3e:	af00      	add	r7, sp, #0
 8017b40:	6078      	str	r0, [r7, #4]
 8017b42:	6039      	str	r1, [r7, #0]
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	4618      	mov	r0, r3
 8017b48:	370c      	adds	r7, #12
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b50:	4770      	bx	lr
	...

08017b54 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8017b54:	b480      	push	{r7}
 8017b56:	b083      	sub	sp, #12
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
 8017b5c:	4a04      	ldr	r2, [pc, #16]	; (8017b70 <_ZN14MockActualCallC1Ev+0x1c>)
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	601a      	str	r2, [r3, #0]
{
}
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	4618      	mov	r0, r3
 8017b66:	370c      	adds	r7, #12
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6e:	4770      	bx	lr
 8017b70:	08028fbc 	.word	0x08028fbc

08017b74 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8017b74:	b480      	push	{r7}
 8017b76:	b083      	sub	sp, #12
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
 8017b7c:	4a04      	ldr	r2, [pc, #16]	; (8017b90 <_ZN14MockActualCallD1Ev+0x1c>)
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	601a      	str	r2, [r3, #0]
{
}
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	4618      	mov	r0, r3
 8017b86:	370c      	adds	r7, #12
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8e:	4770      	bx	lr
 8017b90:	08028fbc 	.word	0x08028fbc

08017b94 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b082      	sub	sp, #8
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
 8017b9c:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	3304      	adds	r3, #4
 8017ba2:	6839      	ldr	r1, [r7, #0]
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f7f5 f88e 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
}
 8017baa:	bf00      	nop
 8017bac:	3708      	adds	r7, #8
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd80      	pop	{r7, pc}

08017bb2 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8017bb2:	b580      	push	{r7, lr}
 8017bb4:	b082      	sub	sp, #8
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	6078      	str	r0, [r7, #4]
 8017bba:	6039      	str	r1, [r7, #0]
    return functionName_;
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	3304      	adds	r3, #4
 8017bc0:	4619      	mov	r1, r3
 8017bc2:	6878      	ldr	r0, [r7, #4]
 8017bc4:	f7f5 f867 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
}
 8017bc8:	6878      	ldr	r0, [r7, #4]
 8017bca:	3708      	adds	r7, #8
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	bd80      	pop	{r7, pc}

08017bd0 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b084      	sub	sp, #16
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	60f8      	str	r0, [r7, #12]
 8017bd8:	60b9      	str	r1, [r7, #8]
 8017bda:	607a      	str	r2, [r7, #4]
 8017bdc:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	4618      	mov	r0, r3
 8017be2:	f7ff ffb7 	bl	8017b54 <_ZN14MockActualCallC1Ev>
 8017be6:	4a17      	ldr	r2, [pc, #92]	; (8017c44 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	601a      	str	r2, [r3, #0]
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	3304      	adds	r3, #4
 8017bf0:	4915      	ldr	r1, [pc, #84]	; (8017c48 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f7f4 fffb 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	68ba      	ldr	r2, [r7, #8]
 8017bfc:	60da      	str	r2, [r3, #12]
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	687a      	ldr	r2, [r7, #4]
 8017c02:	611a      	str	r2, [r3, #16]
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	2202      	movs	r2, #2
 8017c08:	751a      	strb	r2, [r3, #20]
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	755a      	strb	r2, [r3, #21]
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	2200      	movs	r2, #0
 8017c14:	619a      	str	r2, [r3, #24]
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	331c      	adds	r3, #28
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f004 f814 	bl	801bc48 <_ZN21MockExpectedCallsListC1Ev>
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	683a      	ldr	r2, [r7, #0]
 8017c24:	625a      	str	r2, [r3, #36]	; 0x24
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	2200      	movs	r2, #0
 8017c2a:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	331c      	adds	r3, #28
 8017c30:	6839      	ldr	r1, [r7, #0]
 8017c32:	4618      	mov	r0, r3
 8017c34:	f004 f986 	bl	801bf44 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	3710      	adds	r7, #16
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	bf00      	nop
 8017c44:	08028ebc 	.word	0x08028ebc
 8017c48:	08025fb4 	.word	0x08025fb4

08017c4c <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b082      	sub	sp, #8
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
 8017c54:	4a0c      	ldr	r2, [pc, #48]	; (8017c88 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f001 fae4 	bl	8019228 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	331c      	adds	r3, #28
 8017c64:	4618      	mov	r0, r3
 8017c66:	f004 f803 	bl	801bc70 <_ZN21MockExpectedCallsListD1Ev>
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	3304      	adds	r3, #4
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f7f5 fb75 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	4618      	mov	r0, r3
 8017c78:	f7ff ff7c 	bl	8017b74 <_ZN14MockActualCallD1Ev>
}
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	4618      	mov	r0, r3
 8017c80:	3708      	adds	r7, #8
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}
 8017c86:	bf00      	nop
 8017c88:	08028ebc 	.word	0x08028ebc

08017c8c <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b082      	sub	sp, #8
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
}
 8017c94:	6878      	ldr	r0, [r7, #4]
 8017c96:	f7ff ffd9 	bl	8017c4c <_ZN21MockCheckedActualCallD1Ev>
 8017c9a:	212c      	movs	r1, #44	; 0x2c
 8017c9c:	6878      	ldr	r0, [r7, #4]
 8017c9e:	f7f2 fbf7 	bl	800a490 <_ZdlPvj>
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	3708      	adds	r7, #8
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	bd80      	pop	{r7, pc}

08017cac <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8017cac:	b480      	push	{r7}
 8017cae:	b083      	sub	sp, #12
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
 8017cb4:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	683a      	ldr	r2, [r7, #0]
 8017cba:	611a      	str	r2, [r3, #16]
}
 8017cbc:	bf00      	nop
 8017cbe:	370c      	adds	r7, #12
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc6:	4770      	bx	lr

08017cc8 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b082      	sub	sp, #8
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	691a      	ldr	r2, [r3, #16]
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	691b      	ldr	r3, [r3, #16]
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	330c      	adds	r3, #12
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	4610      	mov	r0, r2
 8017ce0:	4798      	blx	r3
 8017ce2:	4603      	mov	r3, r0
}
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	3708      	adds	r7, #8
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	bd80      	pop	{r7, pc}

08017cec <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b082      	sub	sp, #8
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	33c0      	adds	r3, #192	; 0xc0
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	6878      	ldr	r0, [r7, #4]
 8017d00:	4798      	blx	r3
 8017d02:	4603      	mov	r3, r0
 8017d04:	f083 0301 	eor.w	r3, r3, #1
 8017d08:	b2db      	uxtb	r3, r3
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d010      	beq.n	8017d30 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	33ec      	adds	r3, #236	; 0xec
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	2101      	movs	r1, #1
 8017d18:	6878      	ldr	r0, [r7, #4]
 8017d1a:	4798      	blx	r3
        reporter_->failTest(failure);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	691a      	ldr	r2, [r3, #16]
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	691b      	ldr	r3, [r3, #16]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	3308      	adds	r3, #8
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	6839      	ldr	r1, [r7, #0]
 8017d2c:	4610      	mov	r0, r2
 8017d2e:	4798      	blx	r3
    }
}
 8017d30:	bf00      	nop
 8017d32:	3708      	adds	r7, #8
 8017d34:	46bd      	mov	sp, r7
 8017d36:	bd80      	pop	{r7, pc}

08017d38 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8017d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d3c:	b0bc      	sub	sp, #240	; 0xf0
 8017d3e:	af00      	add	r7, sp, #0
 8017d40:	6078      	str	r0, [r7, #4]
 8017d42:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017d4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	f000 80f5 	beq.w	8017f40 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8017d56:	683b      	ldr	r3, [r7, #0]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	339c      	adds	r3, #156	; 0x9c
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017d62:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8017d66:	6839      	ldr	r1, [r7, #0]
 8017d68:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8017d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f006 fa6e 	bl	801e250 <_ZNK14MockNamedValue9getCopierEv>
 8017d74:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8017d78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d013      	beq.n	8017da8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8017d80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	3308      	adds	r3, #8
 8017d88:	681c      	ldr	r4, [r3, #0]
 8017d8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017d8e:	691d      	ldr	r5, [r3, #16]
 8017d90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017d94:	4618      	mov	r0, r3
 8017d96:	f006 fa2b 	bl	801e1f0 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	4629      	mov	r1, r5
 8017da0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8017da4:	47a0      	blx	r4
 8017da6:	e0c0      	b.n	8017f2a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8017da8:	2500      	movs	r5, #0
 8017daa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017dae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017db2:	4611      	mov	r1, r2
 8017db4:	4618      	mov	r0, r3
 8017db6:	f005 ff0e 	bl	801dbd6 <_ZNK14MockNamedValue7getTypeEv>
 8017dba:	2601      	movs	r6, #1
 8017dbc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017dc0:	4962      	ldr	r1, [pc, #392]	; (8017f4c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	f7f4 ff13 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8017dc8:	f04f 0801 	mov.w	r8, #1
 8017dcc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8017dd0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017dd4:	4611      	mov	r1, r2
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7f5 facd 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d015      	beq.n	8017e0e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8017de2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017de6:	f103 0408 	add.w	r4, r3, #8
 8017dea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017dee:	4958      	ldr	r1, [pc, #352]	; (8017f50 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8017df0:	4618      	mov	r0, r3
 8017df2:	f7f4 fefc 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8017df6:	2501      	movs	r5, #1
 8017df8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f7f5 fab9 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 8017e04:	4603      	mov	r3, r0
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d001      	beq.n	8017e0e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8017e0a:	2401      	movs	r4, #1
 8017e0c:	e000      	b.n	8017e10 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8017e0e:	2400      	movs	r4, #0
 8017e10:	2d00      	cmp	r5, #0
 8017e12:	d004      	beq.n	8017e1e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8017e14:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017e18:	4618      	mov	r0, r3
 8017e1a:	f7f5 faa0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8017e1e:	f1b8 0f00 	cmp.w	r8, #0
 8017e22:	d004      	beq.n	8017e2e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8017e24:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f7f5 fa98 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8017e2e:	2e00      	cmp	r6, #0
 8017e30:	d004      	beq.n	8017e3c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 8017e32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7f5 fa91 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8017e3c:	2c00      	cmp	r4, #0
 8017e3e:	d018      	beq.n	8017e72 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8017e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017e44:	4618      	mov	r0, r3
 8017e46:	f006 f95b 	bl	801e100 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8017e4a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8017e4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017e52:	4618      	mov	r0, r3
 8017e54:	f006 f9e4 	bl	801e220 <_ZNK14MockNamedValue7getSizeEv>
 8017e58:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8017e5c:	4b3d      	ldr	r3, [pc, #244]	; (8017f54 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017e64:	6910      	ldr	r0, [r2, #16]
 8017e66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017e6a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8017e6e:	4798      	blx	r3
 8017e70:	e05b      	b.n	8017f2a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8017e72:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017e76:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017e7a:	4611      	mov	r1, r2
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f005 fe9b 	bl	801dbb8 <_ZNK14MockNamedValue7getNameEv>
 8017e82:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017e86:	4934      	ldr	r1, [pc, #208]	; (8017f58 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f7f4 feb0 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8017e8e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8017e92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017e96:	4611      	mov	r1, r2
 8017e98:	4618      	mov	r0, r3
 8017e9a:	f7f5 fab1 	bl	800d400 <_ZneRK12SimpleStringS1_>
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	461c      	mov	r4, r3
 8017ea2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f7f5 fa59 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8017eac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f7f5 fa54 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8017eb6:	2c00      	cmp	r4, #0
 8017eb8:	d037      	beq.n	8017f2a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8017eba:	683b      	ldr	r3, [r7, #0]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	339c      	adds	r3, #156	; 0x9c
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8017ec6:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8017eca:	6839      	ldr	r1, [r7, #0]
 8017ecc:	4798      	blx	r3
 8017ece:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8017ed2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8017ed6:	4611      	mov	r1, r2
 8017ed8:	4618      	mov	r0, r3
 8017eda:	f005 fe7c 	bl	801dbd6 <_ZNK14MockNamedValue7getTypeEv>
 8017ede:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f005 fbd2 	bl	801d68c <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	33cc      	adds	r3, #204	; 0xcc
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	6878      	ldr	r0, [r7, #4]
 8017ef2:	4798      	blx	r3
 8017ef4:	4601      	mov	r1, r0
 8017ef6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8017efa:	f107 030c 	add.w	r3, r7, #12
 8017efe:	4618      	mov	r0, r3
 8017f00:	f005 faee 	bl	801d4e0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	33dc      	adds	r3, #220	; 0xdc
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	f107 020c 	add.w	r2, r7, #12
 8017f10:	4611      	mov	r1, r2
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8017f16:	f107 030c 	add.w	r3, r7, #12
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f001 ffe2 	bl	8019ee4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8017f20:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8017f24:	4618      	mov	r0, r3
 8017f26:	f7f5 fa1a 	bl	800d35e <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8017f2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f005 fbac 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8017f34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017f38:	695b      	ldr	r3, [r3, #20]
 8017f3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017f3e:	e705      	b.n	8017d4c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8017f40:	bf00      	nop
 8017f42:	37f0      	adds	r7, #240	; 0xf0
 8017f44:	46bd      	mov	sp, r7
 8017f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f4a:	bf00      	nop
 8017f4c:	08025fb8 	.word	0x08025fb8
 8017f50:	08025fc4 	.word	0x08025fc4
 8017f54:	200000d4 	.word	0x200000d4
 8017f58:	08025fb4 	.word	0x08025fb4

08017f5c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b084      	sub	sp, #16
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	331c      	adds	r3, #28
 8017f68:	4618      	mov	r0, r3
 8017f6a:	f004 f9bb 	bl	801c2e4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8017f6e:	4602      	mov	r2, r0
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	699b      	ldr	r3, [r3, #24]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d00f      	beq.n	8017f9c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	33d4      	adds	r3, #212	; 0xd4
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	687a      	ldr	r2, [r7, #4]
 8017f86:	6992      	ldr	r2, [r2, #24]
 8017f88:	4611      	mov	r1, r2
 8017f8a:	6878      	ldr	r0, [r7, #4]
 8017f8c:	4798      	blx	r3
        callHasSucceeded();
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	33d0      	adds	r3, #208	; 0xd0
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	6878      	ldr	r0, [r7, #4]
 8017f98:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8017f9a:	e00f      	b.n	8017fbc <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	331c      	adds	r3, #28
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f004 f9cc 	bl	801c33e <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8017fa6:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d006      	beq.n	8017fbc <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	33d4      	adds	r3, #212	; 0xd4
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	68f9      	ldr	r1, [r7, #12]
 8017fb8:	6878      	ldr	r0, [r7, #4]
 8017fba:	4798      	blx	r3
}
 8017fbc:	bf00      	nop
 8017fbe:	3710      	adds	r7, #16
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}

08017fc4 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b082      	sub	sp, #8
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	33ec      	adds	r3, #236	; 0xec
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	2102      	movs	r1, #2
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	4798      	blx	r3
}
 8017fda:	bf00      	nop
 8017fdc:	3708      	adds	r7, #8
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd80      	pop	{r7, pc}

08017fe2 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8017fe2:	b580      	push	{r7, lr}
 8017fe4:	b082      	sub	sp, #8
 8017fe6:	af00      	add	r7, sp, #0
 8017fe8:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	699b      	ldr	r3, [r3, #24]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d00b      	beq.n	801800a <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	699a      	ldr	r2, [r3, #24]
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	699b      	ldr	r3, [r3, #24]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	33ec      	adds	r3, #236	; 0xec
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	4610      	mov	r0, r2
 8018002:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2200      	movs	r2, #0
 8018008:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	331c      	adds	r3, #28
 801800e:	4618      	mov	r0, r3
 8018010:	f004 f85c 	bl	801c0cc <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8018014:	bf00      	nop
 8018016:	3708      	adds	r7, #8
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}

0801801c <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 801801c:	b590      	push	{r4, r7, lr}
 801801e:	b091      	sub	sp, #68	; 0x44
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	6039      	str	r1, [r7, #0]
    setName(name);
 8018026:	6839      	ldr	r1, [r7, #0]
 8018028:	6878      	ldr	r0, [r7, #4]
 801802a:	f7ff fdb3 	bl	8017b94 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	33ec      	adds	r3, #236	; 0xec
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	2100      	movs	r1, #0
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	331c      	adds	r3, #28
 8018040:	6839      	ldr	r1, [r7, #0]
 8018042:	4618      	mov	r0, r3
 8018044:	f003 ffec 	bl	801c020 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	331c      	adds	r3, #28
 801804c:	4618      	mov	r0, r3
 801804e:	f003 fe7c 	bl	801bd4a <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018052:	4603      	mov	r3, r0
 8018054:	2b00      	cmp	r3, #0
 8018056:	d01d      	beq.n	8018094 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	33cc      	adds	r3, #204	; 0xcc
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	6878      	ldr	r0, [r7, #4]
 8018062:	4798      	blx	r3
 8018064:	4601      	mov	r1, r0
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801806a:	f107 000c 	add.w	r0, r7, #12
 801806e:	683a      	ldr	r2, [r7, #0]
 8018070:	f004 fe24 	bl	801ccbc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	33dc      	adds	r3, #220	; 0xdc
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	f107 020c 	add.w	r2, r7, #12
 8018080:	4611      	mov	r1, r2
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	4798      	blx	r3
        return *this;
 8018086:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8018088:	f107 030c 	add.w	r3, r7, #12
 801808c:	4618      	mov	r0, r3
 801808e:	f001 ff4b 	bl	8019f28 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8018092:	e006      	b.n	80180a2 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	33d8      	adds	r3, #216	; 0xd8
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	6878      	ldr	r0, [r7, #4]
 801809e:	4798      	blx	r3

    return *this;
 80180a0:	687c      	ldr	r4, [r7, #4]
 80180a2:	4623      	mov	r3, r4
}
 80180a4:	4618      	mov	r0, r3
 80180a6:	3744      	adds	r7, #68	; 0x44
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bd90      	pop	{r4, r7, pc}

080180ac <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 80180ac:	b480      	push	{r7}
 80180ae:	b083      	sub	sp, #12
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
 80180b4:	6039      	str	r1, [r7, #0]
    return *this;
 80180b6:	687b      	ldr	r3, [r7, #4]
}
 80180b8:	4618      	mov	r0, r3
 80180ba:	370c      	adds	r7, #12
 80180bc:	46bd      	mov	sp, r7
 80180be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c2:	4770      	bx	lr

080180c4 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 80180c4:	b590      	push	{r4, r7, lr}
 80180c6:	b097      	sub	sp, #92	; 0x5c
 80180c8:	af02      	add	r7, sp, #8
 80180ca:	6078      	str	r0, [r7, #4]
 80180cc:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	33c0      	adds	r3, #192	; 0xc0
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	6878      	ldr	r0, [r7, #4]
 80180d8:	4798      	blx	r3
 80180da:	4603      	mov	r3, r0
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d164      	bne.n	80181aa <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	33ec      	adds	r3, #236	; 0xec
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	2100      	movs	r1, #0
 80180ea:	6878      	ldr	r0, [r7, #4]
 80180ec:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	33e8      	adds	r3, #232	; 0xe8
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	6878      	ldr	r0, [r7, #4]
 80180f8:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	331c      	adds	r3, #28
 80180fe:	6839      	ldr	r1, [r7, #0]
 8018100:	4618      	mov	r0, r3
 8018102:	f004 f86b 	bl	801c1dc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	331c      	adds	r3, #28
 801810a:	4618      	mov	r0, r3
 801810c:	f003 fe1d 	bl	801bd4a <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018110:	4603      	mov	r3, r0
 8018112:	2b00      	cmp	r3, #0
 8018114:	d02b      	beq.n	801816e <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	33cc      	adds	r3, #204	; 0xcc
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	6878      	ldr	r0, [r7, #4]
 8018120:	4798      	blx	r3
 8018122:	4604      	mov	r4, r0
 8018124:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018128:	6879      	ldr	r1, [r7, #4]
 801812a:	4618      	mov	r0, r3
 801812c:	f7ff fd41 	bl	8017bb2 <_ZNK21MockCheckedActualCall7getNameEv>
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018134:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018138:	f107 000c 	add.w	r0, r7, #12
 801813c:	9300      	str	r3, [sp, #0]
 801813e:	683b      	ldr	r3, [r7, #0]
 8018140:	4621      	mov	r1, r4
 8018142:	f004 fe7f 	bl	801ce44 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8018146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801814a:	4618      	mov	r0, r3
 801814c:	f7f5 f907 	bl	800d35e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	33dc      	adds	r3, #220	; 0xdc
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	f107 020c 	add.w	r2, r7, #12
 801815c:	4611      	mov	r1, r2
 801815e:	6878      	ldr	r0, [r7, #4]
 8018160:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8018162:	f107 030c 	add.w	r3, r7, #12
 8018166:	4618      	mov	r0, r3
 8018168:	f001 ff00 	bl	8019f6c <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801816c:	e01e      	b.n	80181ac <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	f103 041c 	add.w	r4, r3, #28
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	335c      	adds	r3, #92	; 0x5c
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018180:	6839      	ldr	r1, [r7, #0]
 8018182:	4610      	mov	r0, r2
 8018184:	4798      	blx	r3
 8018186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801818a:	4619      	mov	r1, r3
 801818c:	4620      	mov	r0, r4
 801818e:	f004 f9b8 	bl	801c502 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8018192:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018196:	4618      	mov	r0, r3
 8018198:	f7f5 f8e1 	bl	800d35e <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	33d8      	adds	r3, #216	; 0xd8
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	6878      	ldr	r0, [r7, #4]
 80181a6:	4798      	blx	r3
 80181a8:	e000      	b.n	80181ac <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 80181aa:	bf00      	nop
}
 80181ac:	3754      	adds	r7, #84	; 0x54
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd90      	pop	{r4, r7, pc}

080181b2 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 80181b2:	b590      	push	{r4, r7, lr}
 80181b4:	b097      	sub	sp, #92	; 0x5c
 80181b6:	af02      	add	r7, sp, #8
 80181b8:	6078      	str	r0, [r7, #4]
 80181ba:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	33c0      	adds	r3, #192	; 0xc0
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	6878      	ldr	r0, [r7, #4]
 80181c6:	4798      	blx	r3
 80181c8:	4603      	mov	r3, r0
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d164      	bne.n	8018298 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	33ec      	adds	r3, #236	; 0xec
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	2100      	movs	r1, #0
 80181d8:	6878      	ldr	r0, [r7, #4]
 80181da:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	33e8      	adds	r3, #232	; 0xe8
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	331c      	adds	r3, #28
 80181ec:	6839      	ldr	r1, [r7, #0]
 80181ee:	4618      	mov	r0, r3
 80181f0:	f004 f820 	bl	801c234 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	331c      	adds	r3, #28
 80181f8:	4618      	mov	r0, r3
 80181fa:	f003 fda6 	bl	801bd4a <_ZNK21MockExpectedCallsList7isEmptyEv>
 80181fe:	4603      	mov	r3, r0
 8018200:	2b00      	cmp	r3, #0
 8018202:	d02b      	beq.n	801825c <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	33cc      	adds	r3, #204	; 0xcc
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	6878      	ldr	r0, [r7, #4]
 801820e:	4798      	blx	r3
 8018210:	4604      	mov	r4, r0
 8018212:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018216:	6879      	ldr	r1, [r7, #4]
 8018218:	4618      	mov	r0, r3
 801821a:	f7ff fcca 	bl	8017bb2 <_ZNK21MockCheckedActualCall7getNameEv>
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018222:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018226:	f107 000c 	add.w	r0, r7, #12
 801822a:	9300      	str	r3, [sp, #0]
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	4621      	mov	r1, r4
 8018230:	f004 ff6a 	bl	801d108 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8018234:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018238:	4618      	mov	r0, r3
 801823a:	f7f5 f890 	bl	800d35e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	33dc      	adds	r3, #220	; 0xdc
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	f107 020c 	add.w	r2, r7, #12
 801824a:	4611      	mov	r1, r2
 801824c:	6878      	ldr	r0, [r7, #4]
 801824e:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8018250:	f107 030c 	add.w	r3, r7, #12
 8018254:	4618      	mov	r0, r3
 8018256:	f001 feab 	bl	8019fb0 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801825a:	e01e      	b.n	801829a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	f103 041c 	add.w	r4, r3, #28
 8018262:	683b      	ldr	r3, [r7, #0]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	335c      	adds	r3, #92	; 0x5c
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801826e:	6839      	ldr	r1, [r7, #0]
 8018270:	4610      	mov	r0, r2
 8018272:	4798      	blx	r3
 8018274:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018278:	4619      	mov	r1, r3
 801827a:	4620      	mov	r0, r4
 801827c:	f004 f95e 	bl	801c53c <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8018280:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018284:	4618      	mov	r0, r3
 8018286:	f7f5 f86a 	bl	800d35e <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	33d8      	adds	r3, #216	; 0xd8
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	6878      	ldr	r0, [r7, #4]
 8018294:	4798      	blx	r3
 8018296:	e000      	b.n	801829a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8018298:	bf00      	nop
}
 801829a:	3754      	adds	r7, #84	; 0x54
 801829c:	46bd      	mov	sp, r7
 801829e:	bd90      	pop	{r4, r7, pc}

080182a0 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 80182a0:	b590      	push	{r4, r7, lr}
 80182a2:	b093      	sub	sp, #76	; 0x4c
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	60f8      	str	r0, [r7, #12]
 80182a8:	60b9      	str	r1, [r7, #8]
 80182aa:	4613      	mov	r3, r2
 80182ac:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 80182ae:	f107 0310 	add.w	r3, r7, #16
 80182b2:	68b9      	ldr	r1, [r7, #8]
 80182b4:	4618      	mov	r0, r3
 80182b6:	f005 f9bf 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80182ba:	79fa      	ldrb	r2, [r7, #7]
 80182bc:	f107 0310 	add.w	r3, r7, #16
 80182c0:	4611      	mov	r1, r2
 80182c2:	4618      	mov	r0, r3
 80182c4:	f005 fa0a 	bl	801d6dc <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	33e0      	adds	r3, #224	; 0xe0
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	f107 0210 	add.w	r2, r7, #16
 80182d4:	4611      	mov	r1, r2
 80182d6:	68f8      	ldr	r0, [r7, #12]
 80182d8:	4798      	blx	r3
    return *this;
 80182da:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80182dc:	f107 0310 	add.w	r3, r7, #16
 80182e0:	4618      	mov	r0, r3
 80182e2:	f005 f9d3 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 80182e6:	4623      	mov	r3, r4
}
 80182e8:	4618      	mov	r0, r3
 80182ea:	374c      	adds	r7, #76	; 0x4c
 80182ec:	46bd      	mov	sp, r7
 80182ee:	bd90      	pop	{r4, r7, pc}

080182f0 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80182f0:	b590      	push	{r4, r7, lr}
 80182f2:	b093      	sub	sp, #76	; 0x4c
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	60f8      	str	r0, [r7, #12]
 80182f8:	60b9      	str	r1, [r7, #8]
 80182fa:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80182fc:	f107 0310 	add.w	r3, r7, #16
 8018300:	68b9      	ldr	r1, [r7, #8]
 8018302:	4618      	mov	r0, r3
 8018304:	f005 f998 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018308:	f107 0310 	add.w	r3, r7, #16
 801830c:	6879      	ldr	r1, [r7, #4]
 801830e:	4618      	mov	r0, r3
 8018310:	f005 fa08 	bl	801d724 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	33e0      	adds	r3, #224	; 0xe0
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	f107 0210 	add.w	r2, r7, #16
 8018320:	4611      	mov	r1, r2
 8018322:	68f8      	ldr	r0, [r7, #12]
 8018324:	4798      	blx	r3
    return *this;
 8018326:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018328:	f107 0310 	add.w	r3, r7, #16
 801832c:	4618      	mov	r0, r3
 801832e:	f005 f9ad 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018332:	4623      	mov	r3, r4
}
 8018334:	4618      	mov	r0, r3
 8018336:	374c      	adds	r7, #76	; 0x4c
 8018338:	46bd      	mov	sp, r7
 801833a:	bd90      	pop	{r4, r7, pc}

0801833c <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 801833c:	b590      	push	{r4, r7, lr}
 801833e:	b093      	sub	sp, #76	; 0x4c
 8018340:	af00      	add	r7, sp, #0
 8018342:	60f8      	str	r0, [r7, #12]
 8018344:	60b9      	str	r1, [r7, #8]
 8018346:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018348:	f107 0310 	add.w	r3, r7, #16
 801834c:	68b9      	ldr	r1, [r7, #8]
 801834e:	4618      	mov	r0, r3
 8018350:	f005 f972 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018354:	f107 0310 	add.w	r3, r7, #16
 8018358:	6879      	ldr	r1, [r7, #4]
 801835a:	4618      	mov	r0, r3
 801835c:	f005 fa04 	bl	801d768 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	33e0      	adds	r3, #224	; 0xe0
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	f107 0210 	add.w	r2, r7, #16
 801836c:	4611      	mov	r1, r2
 801836e:	68f8      	ldr	r0, [r7, #12]
 8018370:	4798      	blx	r3
    return *this;
 8018372:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018374:	f107 0310 	add.w	r3, r7, #16
 8018378:	4618      	mov	r0, r3
 801837a:	f005 f987 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 801837e:	4623      	mov	r3, r4
}
 8018380:	4618      	mov	r0, r3
 8018382:	374c      	adds	r7, #76	; 0x4c
 8018384:	46bd      	mov	sp, r7
 8018386:	bd90      	pop	{r4, r7, pc}

08018388 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018388:	b590      	push	{r4, r7, lr}
 801838a:	b093      	sub	sp, #76	; 0x4c
 801838c:	af00      	add	r7, sp, #0
 801838e:	60f8      	str	r0, [r7, #12]
 8018390:	60b9      	str	r1, [r7, #8]
 8018392:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018394:	f107 0310 	add.w	r3, r7, #16
 8018398:	68b9      	ldr	r1, [r7, #8]
 801839a:	4618      	mov	r0, r3
 801839c:	f005 f94c 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80183a0:	f107 0310 	add.w	r3, r7, #16
 80183a4:	6879      	ldr	r1, [r7, #4]
 80183a6:	4618      	mov	r0, r3
 80183a8:	f005 fa22 	bl	801d7f0 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	33e0      	adds	r3, #224	; 0xe0
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	f107 0210 	add.w	r2, r7, #16
 80183b8:	4611      	mov	r1, r2
 80183ba:	68f8      	ldr	r0, [r7, #12]
 80183bc:	4798      	blx	r3
    return *this;
 80183be:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80183c0:	f107 0310 	add.w	r3, r7, #16
 80183c4:	4618      	mov	r0, r3
 80183c6:	f005 f961 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 80183ca:	4623      	mov	r3, r4
}
 80183cc:	4618      	mov	r0, r3
 80183ce:	374c      	adds	r7, #76	; 0x4c
 80183d0:	46bd      	mov	sp, r7
 80183d2:	bd90      	pop	{r4, r7, pc}

080183d4 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 80183d4:	b590      	push	{r4, r7, lr}
 80183d6:	b093      	sub	sp, #76	; 0x4c
 80183d8:	af00      	add	r7, sp, #0
 80183da:	60f8      	str	r0, [r7, #12]
 80183dc:	60b9      	str	r1, [r7, #8]
 80183de:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80183e0:	f107 0310 	add.w	r3, r7, #16
 80183e4:	68b9      	ldr	r1, [r7, #8]
 80183e6:	4618      	mov	r0, r3
 80183e8:	f005 f926 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80183ec:	f107 0310 	add.w	r3, r7, #16
 80183f0:	6879      	ldr	r1, [r7, #4]
 80183f2:	4618      	mov	r0, r3
 80183f4:	f005 f9da 	bl	801d7ac <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	33e0      	adds	r3, #224	; 0xe0
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	f107 0210 	add.w	r2, r7, #16
 8018404:	4611      	mov	r1, r2
 8018406:	68f8      	ldr	r0, [r7, #12]
 8018408:	4798      	blx	r3
    return *this;
 801840a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801840c:	f107 0310 	add.w	r3, r7, #16
 8018410:	4618      	mov	r0, r3
 8018412:	f005 f93b 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018416:	4623      	mov	r3, r4
}
 8018418:	4618      	mov	r0, r3
 801841a:	374c      	adds	r7, #76	; 0x4c
 801841c:	46bd      	mov	sp, r7
 801841e:	bd90      	pop	{r4, r7, pc}

08018420 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018420:	b5b0      	push	{r4, r5, r7, lr}
 8018422:	b086      	sub	sp, #24
 8018424:	af02      	add	r7, sp, #8
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	60b9      	str	r1, [r7, #8]
 801842a:	4639      	mov	r1, r7
 801842c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018430:	f7fb ffc0 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8018434:	4604      	mov	r4, r0
 8018436:	6823      	ldr	r3, [r4, #0]
 8018438:	3368      	adds	r3, #104	; 0x68
 801843a:	681d      	ldr	r5, [r3, #0]
 801843c:	f7fb ffca 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018440:	4603      	mov	r3, r0
 8018442:	9300      	str	r3, [sp, #0]
 8018444:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8018448:	4a04      	ldr	r2, [pc, #16]	; (801845c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801844a:	4905      	ldr	r1, [pc, #20]	; (8018460 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801844c:	4620      	mov	r0, r4
 801844e:	47a8      	blx	r5
    return *this;
 8018450:	68fb      	ldr	r3, [r7, #12]
}
 8018452:	4618      	mov	r0, r3
 8018454:	3710      	adds	r7, #16
 8018456:	46bd      	mov	sp, r7
 8018458:	bdb0      	pop	{r4, r5, r7, pc}
 801845a:	bf00      	nop
 801845c:	08025fcc 	.word	0x08025fcc
 8018460:	08025fe8 	.word	0x08025fe8

08018464 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8018464:	b5b0      	push	{r4, r5, r7, lr}
 8018466:	b086      	sub	sp, #24
 8018468:	af02      	add	r7, sp, #8
 801846a:	60f8      	str	r0, [r7, #12]
 801846c:	60b9      	str	r1, [r7, #8]
 801846e:	4639      	mov	r1, r7
 8018470:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018474:	f7fb ff9e 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8018478:	4604      	mov	r4, r0
 801847a:	6823      	ldr	r3, [r4, #0]
 801847c:	3368      	adds	r3, #104	; 0x68
 801847e:	681d      	ldr	r5, [r3, #0]
 8018480:	f7fb ffa8 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018484:	4603      	mov	r3, r0
 8018486:	9300      	str	r3, [sp, #0]
 8018488:	f44f 7388 	mov.w	r3, #272	; 0x110
 801848c:	4a04      	ldr	r2, [pc, #16]	; (80184a0 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801848e:	4905      	ldr	r1, [pc, #20]	; (80184a4 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8018490:	4620      	mov	r0, r4
 8018492:	47a8      	blx	r5
    return *this;
 8018494:	68fb      	ldr	r3, [r7, #12]
}
 8018496:	4618      	mov	r0, r3
 8018498:	3710      	adds	r7, #16
 801849a:	46bd      	mov	sp, r7
 801849c:	bdb0      	pop	{r4, r5, r7, pc}
 801849e:	bf00      	nop
 80184a0:	08025fcc 	.word	0x08025fcc
 80184a4:	08026014 	.word	0x08026014

080184a8 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 80184a8:	b590      	push	{r4, r7, lr}
 80184aa:	b093      	sub	sp, #76	; 0x4c
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	60f8      	str	r0, [r7, #12]
 80184b0:	60b9      	str	r1, [r7, #8]
 80184b2:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 80184b6:	f107 0310 	add.w	r3, r7, #16
 80184ba:	68b9      	ldr	r1, [r7, #8]
 80184bc:	4618      	mov	r0, r3
 80184be:	f005 f8bb 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80184c2:	f107 0310 	add.w	r3, r7, #16
 80184c6:	ed97 0b00 	vldr	d0, [r7]
 80184ca:	4618      	mov	r0, r3
 80184cc:	f005 f9f0 	bl	801d8b0 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	33e0      	adds	r3, #224	; 0xe0
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	f107 0210 	add.w	r2, r7, #16
 80184dc:	4611      	mov	r1, r2
 80184de:	68f8      	ldr	r0, [r7, #12]
 80184e0:	4798      	blx	r3
    return *this;
 80184e2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80184e4:	f107 0310 	add.w	r3, r7, #16
 80184e8:	4618      	mov	r0, r3
 80184ea:	f005 f8cf 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 80184ee:	4623      	mov	r3, r4
}
 80184f0:	4618      	mov	r0, r3
 80184f2:	374c      	adds	r7, #76	; 0x4c
 80184f4:	46bd      	mov	sp, r7
 80184f6:	bd90      	pop	{r4, r7, pc}

080184f8 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 80184f8:	b590      	push	{r4, r7, lr}
 80184fa:	b093      	sub	sp, #76	; 0x4c
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	60f8      	str	r0, [r7, #12]
 8018500:	60b9      	str	r1, [r7, #8]
 8018502:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018504:	f107 0310 	add.w	r3, r7, #16
 8018508:	68b9      	ldr	r1, [r7, #8]
 801850a:	4618      	mov	r0, r3
 801850c:	f005 f894 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018510:	f107 0310 	add.w	r3, r7, #16
 8018514:	6879      	ldr	r1, [r7, #4]
 8018516:	4618      	mov	r0, r3
 8018518:	f005 fa74 	bl	801da04 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	33e0      	adds	r3, #224	; 0xe0
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	f107 0210 	add.w	r2, r7, #16
 8018528:	4611      	mov	r1, r2
 801852a:	68f8      	ldr	r0, [r7, #12]
 801852c:	4798      	blx	r3
    return *this;
 801852e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018530:	f107 0310 	add.w	r3, r7, #16
 8018534:	4618      	mov	r0, r3
 8018536:	f005 f8a9 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 801853a:	4623      	mov	r3, r4
}
 801853c:	4618      	mov	r0, r3
 801853e:	374c      	adds	r7, #76	; 0x4c
 8018540:	46bd      	mov	sp, r7
 8018542:	bd90      	pop	{r4, r7, pc}

08018544 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8018544:	b590      	push	{r4, r7, lr}
 8018546:	b093      	sub	sp, #76	; 0x4c
 8018548:	af00      	add	r7, sp, #0
 801854a:	60f8      	str	r0, [r7, #12]
 801854c:	60b9      	str	r1, [r7, #8]
 801854e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018550:	f107 0310 	add.w	r3, r7, #16
 8018554:	68b9      	ldr	r1, [r7, #8]
 8018556:	4618      	mov	r0, r3
 8018558:	f005 f86e 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801855c:	f107 0310 	add.w	r3, r7, #16
 8018560:	6879      	ldr	r1, [r7, #4]
 8018562:	4618      	mov	r0, r3
 8018564:	f005 f9e8 	bl	801d938 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	33e0      	adds	r3, #224	; 0xe0
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	f107 0210 	add.w	r2, r7, #16
 8018574:	4611      	mov	r1, r2
 8018576:	68f8      	ldr	r0, [r7, #12]
 8018578:	4798      	blx	r3
    return *this;
 801857a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801857c:	f107 0310 	add.w	r3, r7, #16
 8018580:	4618      	mov	r0, r3
 8018582:	f005 f883 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018586:	4623      	mov	r3, r4
}
 8018588:	4618      	mov	r0, r3
 801858a:	374c      	adds	r7, #76	; 0x4c
 801858c:	46bd      	mov	sp, r7
 801858e:	bd90      	pop	{r4, r7, pc}

08018590 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8018590:	b590      	push	{r4, r7, lr}
 8018592:	b093      	sub	sp, #76	; 0x4c
 8018594:	af00      	add	r7, sp, #0
 8018596:	60f8      	str	r0, [r7, #12]
 8018598:	60b9      	str	r1, [r7, #8]
 801859a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801859c:	f107 0310 	add.w	r3, r7, #16
 80185a0:	68b9      	ldr	r1, [r7, #8]
 80185a2:	4618      	mov	r0, r3
 80185a4:	f005 f848 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80185a8:	f107 0310 	add.w	r3, r7, #16
 80185ac:	6879      	ldr	r1, [r7, #4]
 80185ae:	4618      	mov	r0, r3
 80185b0:	f005 f9e4 	bl	801d97c <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	33e0      	adds	r3, #224	; 0xe0
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	f107 0210 	add.w	r2, r7, #16
 80185c0:	4611      	mov	r1, r2
 80185c2:	68f8      	ldr	r0, [r7, #12]
 80185c4:	4798      	blx	r3
    return *this;
 80185c6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80185c8:	f107 0310 	add.w	r3, r7, #16
 80185cc:	4618      	mov	r0, r3
 80185ce:	f005 f85d 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 80185d2:	4623      	mov	r3, r4
}
 80185d4:	4618      	mov	r0, r3
 80185d6:	374c      	adds	r7, #76	; 0x4c
 80185d8:	46bd      	mov	sp, r7
 80185da:	bd90      	pop	{r4, r7, pc}

080185dc <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80185dc:	b590      	push	{r4, r7, lr}
 80185de:	b093      	sub	sp, #76	; 0x4c
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	60f8      	str	r0, [r7, #12]
 80185e4:	60b9      	str	r1, [r7, #8]
 80185e6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80185e8:	f107 0310 	add.w	r3, r7, #16
 80185ec:	68b9      	ldr	r1, [r7, #8]
 80185ee:	4618      	mov	r0, r3
 80185f0:	f005 f822 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80185f4:	f107 0310 	add.w	r3, r7, #16
 80185f8:	6879      	ldr	r1, [r7, #4]
 80185fa:	4618      	mov	r0, r3
 80185fc:	f005 f9e0 	bl	801d9c0 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	33e0      	adds	r3, #224	; 0xe0
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	f107 0210 	add.w	r2, r7, #16
 801860c:	4611      	mov	r1, r2
 801860e:	68f8      	ldr	r0, [r7, #12]
 8018610:	4798      	blx	r3
    return *this;
 8018612:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018614:	f107 0310 	add.w	r3, r7, #16
 8018618:	4618      	mov	r0, r3
 801861a:	f005 f837 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 801861e:	4623      	mov	r3, r4
}
 8018620:	4618      	mov	r0, r3
 8018622:	374c      	adds	r7, #76	; 0x4c
 8018624:	46bd      	mov	sp, r7
 8018626:	bd90      	pop	{r4, r7, pc}

08018628 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8018628:	b590      	push	{r4, r7, lr}
 801862a:	b093      	sub	sp, #76	; 0x4c
 801862c:	af00      	add	r7, sp, #0
 801862e:	60f8      	str	r0, [r7, #12]
 8018630:	60b9      	str	r1, [r7, #8]
 8018632:	607a      	str	r2, [r7, #4]
 8018634:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8018636:	f107 0310 	add.w	r3, r7, #16
 801863a:	68b9      	ldr	r1, [r7, #8]
 801863c:	4618      	mov	r0, r3
 801863e:	f004 fffb 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8018642:	f107 0310 	add.w	r3, r7, #16
 8018646:	683a      	ldr	r2, [r7, #0]
 8018648:	6879      	ldr	r1, [r7, #4]
 801864a:	4618      	mov	r0, r3
 801864c:	f005 f9fc 	bl	801da48 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	33e0      	adds	r3, #224	; 0xe0
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	f107 0210 	add.w	r2, r7, #16
 801865c:	4611      	mov	r1, r2
 801865e:	68f8      	ldr	r0, [r7, #12]
 8018660:	4798      	blx	r3
    return *this;
 8018662:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018664:	f107 0310 	add.w	r3, r7, #16
 8018668:	4618      	mov	r0, r3
 801866a:	f005 f80f 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 801866e:	4623      	mov	r3, r4
}
 8018670:	4618      	mov	r0, r3
 8018672:	374c      	adds	r7, #76	; 0x4c
 8018674:	46bd      	mov	sp, r7
 8018676:	bd90      	pop	{r4, r7, pc}

08018678 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018678:	b590      	push	{r4, r7, lr}
 801867a:	b0a1      	sub	sp, #132	; 0x84
 801867c:	af00      	add	r7, sp, #0
 801867e:	60f8      	str	r0, [r7, #12]
 8018680:	60b9      	str	r1, [r7, #8]
 8018682:	607a      	str	r2, [r7, #4]
 8018684:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8018686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801868a:	6879      	ldr	r1, [r7, #4]
 801868c:	4618      	mov	r0, r3
 801868e:	f004 ffd3 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8018692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018696:	683a      	ldr	r2, [r7, #0]
 8018698:	68b9      	ldr	r1, [r7, #8]
 801869a:	4618      	mov	r0, r3
 801869c:	f005 f9fa 	bl	801da94 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 80186a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80186a4:	4618      	mov	r0, r3
 80186a6:	f005 fdc7 	bl	801e238 <_ZNK14MockNamedValue13getComparatorEv>
 80186aa:	4603      	mov	r3, r0
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	bf0c      	ite	eq
 80186b0:	2301      	moveq	r3, #1
 80186b2:	2300      	movne	r3, #0
 80186b4:	b2db      	uxtb	r3, r3
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d01c      	beq.n	80186f4 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	33cc      	adds	r3, #204	; 0xcc
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	68f8      	ldr	r0, [r7, #12]
 80186c4:	4798      	blx	r3
 80186c6:	4601      	mov	r1, r0
 80186c8:	f107 0314 	add.w	r3, r7, #20
 80186cc:	68ba      	ldr	r2, [r7, #8]
 80186ce:	4618      	mov	r0, r3
 80186d0:	f004 fed6 	bl	801d480 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	33dc      	adds	r3, #220	; 0xdc
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	f107 0214 	add.w	r2, r7, #20
 80186e0:	4611      	mov	r1, r2
 80186e2:	68f8      	ldr	r0, [r7, #12]
 80186e4:	4798      	blx	r3
        return *this;
 80186e6:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80186e8:	f107 0314 	add.w	r3, r7, #20
 80186ec:	4618      	mov	r0, r3
 80186ee:	f001 fc81 	bl	8019ff4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80186f2:	e009      	b.n	8018708 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	33e0      	adds	r3, #224	; 0xe0
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018700:	4611      	mov	r1, r2
 8018702:	68f8      	ldr	r0, [r7, #12]
 8018704:	4798      	blx	r3
    return *this;
 8018706:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018708:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801870c:	4618      	mov	r0, r3
 801870e:	f004 ffbd 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8018712:	4623      	mov	r3, r4
}
 8018714:	4618      	mov	r0, r3
 8018716:	3784      	adds	r7, #132	; 0x84
 8018718:	46bd      	mov	sp, r7
 801871a:	bd90      	pop	{r4, r7, pc}

0801871c <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 801871c:	b590      	push	{r4, r7, lr}
 801871e:	b095      	sub	sp, #84	; 0x54
 8018720:	af00      	add	r7, sp, #0
 8018722:	60f8      	str	r0, [r7, #12]
 8018724:	60b9      	str	r1, [r7, #8]
 8018726:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	33f0      	adds	r3, #240	; 0xf0
 801872e:	681c      	ldr	r4, [r3, #0]
 8018730:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018734:	4917      	ldr	r1, [pc, #92]	; (8018794 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8018736:	4618      	mov	r0, r3
 8018738:	f7f4 fa59 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801873c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	68b9      	ldr	r1, [r7, #8]
 8018744:	68f8      	ldr	r0, [r7, #12]
 8018746:	47a0      	blx	r4
 8018748:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801874c:	4618      	mov	r0, r3
 801874e:	f7f4 fe06 	bl	800d35e <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8018752:	f107 0310 	add.w	r3, r7, #16
 8018756:	68b9      	ldr	r1, [r7, #8]
 8018758:	4618      	mov	r0, r3
 801875a:	f004 ff6d 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 801875e:	f107 0310 	add.w	r3, r7, #16
 8018762:	6879      	ldr	r1, [r7, #4]
 8018764:	4618      	mov	r0, r3
 8018766:	f005 f8e7 	bl	801d938 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	33e4      	adds	r3, #228	; 0xe4
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	f107 0210 	add.w	r2, r7, #16
 8018776:	4611      	mov	r1, r2
 8018778:	68f8      	ldr	r0, [r7, #12]
 801877a:	4798      	blx	r3

    return *this;
 801877c:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801877e:	f107 0310 	add.w	r3, r7, #16
 8018782:	4618      	mov	r0, r3
 8018784:	f004 ff82 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018788:	4623      	mov	r3, r4
}
 801878a:	4618      	mov	r0, r3
 801878c:	3754      	adds	r7, #84	; 0x54
 801878e:	46bd      	mov	sp, r7
 8018790:	bd90      	pop	{r4, r7, pc}
 8018792:	bf00      	nop
 8018794:	08025fc4 	.word	0x08025fc4

08018798 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8018798:	b590      	push	{r4, r7, lr}
 801879a:	b093      	sub	sp, #76	; 0x4c
 801879c:	af00      	add	r7, sp, #0
 801879e:	60f8      	str	r0, [r7, #12]
 80187a0:	60b9      	str	r1, [r7, #8]
 80187a2:	607a      	str	r2, [r7, #4]
 80187a4:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	33f0      	adds	r3, #240	; 0xf0
 80187ac:	681c      	ldr	r4, [r3, #0]
 80187ae:	683b      	ldr	r3, [r7, #0]
 80187b0:	68ba      	ldr	r2, [r7, #8]
 80187b2:	6879      	ldr	r1, [r7, #4]
 80187b4:	68f8      	ldr	r0, [r7, #12]
 80187b6:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 80187b8:	f107 0310 	add.w	r3, r7, #16
 80187bc:	6879      	ldr	r1, [r7, #4]
 80187be:	4618      	mov	r0, r3
 80187c0:	f004 ff3a 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 80187c4:	f107 0310 	add.w	r3, r7, #16
 80187c8:	683a      	ldr	r2, [r7, #0]
 80187ca:	68b9      	ldr	r1, [r7, #8]
 80187cc:	4618      	mov	r0, r3
 80187ce:	f005 f961 	bl	801da94 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	33e4      	adds	r3, #228	; 0xe4
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	f107 0210 	add.w	r2, r7, #16
 80187de:	4611      	mov	r1, r2
 80187e0:	68f8      	ldr	r0, [r7, #12]
 80187e2:	4798      	blx	r3

    return *this;
 80187e4:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80187e6:	f107 0310 	add.w	r3, r7, #16
 80187ea:	4618      	mov	r0, r3
 80187ec:	f004 ff4e 	bl	801d68c <_ZN14MockNamedValueD1Ev>
    return *this;
 80187f0:	4623      	mov	r3, r4
}
 80187f2:	4618      	mov	r0, r3
 80187f4:	374c      	adds	r7, #76	; 0x4c
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd90      	pop	{r4, r7, pc}

080187fa <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 80187fa:	b480      	push	{r7}
 80187fc:	b083      	sub	sp, #12
 80187fe:	af00      	add	r7, sp, #0
 8018800:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	7d1b      	ldrb	r3, [r3, #20]
 8018806:	2b02      	cmp	r3, #2
 8018808:	bf0c      	ite	eq
 801880a:	2301      	moveq	r3, #1
 801880c:	2300      	movne	r3, #0
 801880e:	b2db      	uxtb	r3, r3
}
 8018810:	4618      	mov	r0, r3
 8018812:	370c      	adds	r7, #12
 8018814:	46bd      	mov	sp, r7
 8018816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881a:	4770      	bx	lr

0801881c <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 801881c:	b480      	push	{r7}
 801881e:	b083      	sub	sp, #12
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	7d1b      	ldrb	r3, [r3, #20]
 8018828:	2b01      	cmp	r3, #1
 801882a:	bf0c      	ite	eq
 801882c:	2301      	moveq	r3, #1
 801882e:	2300      	movne	r3, #0
 8018830:	b2db      	uxtb	r3, r3
}
 8018832:	4618      	mov	r0, r3
 8018834:	370c      	adds	r7, #12
 8018836:	46bd      	mov	sp, r7
 8018838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883c:	4770      	bx	lr
	...

08018840 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8018840:	b5b0      	push	{r4, r5, r7, lr}
 8018842:	b096      	sub	sp, #88	; 0x58
 8018844:	af02      	add	r7, sp, #8
 8018846:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	7d5b      	ldrb	r3, [r3, #21]
 801884c:	2b00      	cmp	r3, #0
 801884e:	f040 80bc 	bne.w	80189ca <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	2201      	movs	r2, #1
 8018856:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	7d1b      	ldrb	r3, [r3, #20]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d014      	beq.n	801888a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	7d1b      	ldrb	r3, [r3, #20]
 8018864:	2b02      	cmp	r3, #2
 8018866:	d10a      	bne.n	801887e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	6998      	ldr	r0, [r3, #24]
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	699b      	ldr	r3, [r3, #24]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	33d8      	adds	r3, #216	; 0xd8
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	687a      	ldr	r2, [r7, #4]
 8018878:	68d2      	ldr	r2, [r2, #12]
 801887a:	4611      	mov	r1, r2
 801887c:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	331c      	adds	r3, #28
 8018882:	4618      	mov	r0, r3
 8018884:	f003 fe07 	bl	801c496 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018888:	e0a0      	b.n	80189cc <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	331c      	adds	r3, #28
 801888e:	4618      	mov	r0, r3
 8018890:	f003 fac3 	bl	801be1a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8018894:	4603      	mov	r3, r0
 8018896:	2b00      	cmp	r3, #0
 8018898:	d00f      	beq.n	80188ba <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 801889a:	f7fb fd8b 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801889e:	4604      	mov	r4, r0
 80188a0:	6823      	ldr	r3, [r4, #0]
 80188a2:	3368      	adds	r3, #104	; 0x68
 80188a4:	681d      	ldr	r5, [r3, #0]
 80188a6:	f7fb fd95 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80188aa:	4603      	mov	r3, r0
 80188ac:	9300      	str	r3, [sp, #0]
 80188ae:	f240 1385 	movw	r3, #389	; 0x185
 80188b2:	4a48      	ldr	r2, [pc, #288]	; (80189d4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 80188b4:	4948      	ldr	r1, [pc, #288]	; (80189d8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 80188b6:	4620      	mov	r0, r4
 80188b8:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	331c      	adds	r3, #28
 80188be:	4618      	mov	r0, r3
 80188c0:	f003 fd5f 	bl	801c382 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 80188c4:	4602      	mov	r2, r0
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	699b      	ldr	r3, [r3, #24]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d01f      	beq.n	8018912 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	699a      	ldr	r2, [r3, #24]
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	699b      	ldr	r3, [r3, #24]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	33e4      	adds	r3, #228	; 0xe4
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	4610      	mov	r0, r2
 80188e2:	4798      	blx	r3
        callHasSucceeded();
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	33d0      	adds	r3, #208	; 0xd0
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	6878      	ldr	r0, [r7, #4]
 80188ee:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	6998      	ldr	r0, [r3, #24]
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	699b      	ldr	r3, [r3, #24]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	33d8      	adds	r3, #216	; 0xd8
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	687a      	ldr	r2, [r7, #4]
 8018900:	68d2      	ldr	r2, [r2, #12]
 8018902:	4611      	mov	r1, r2
 8018904:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	331c      	adds	r3, #28
 801890a:	4618      	mov	r0, r3
 801890c:	f003 fdc3 	bl	801c496 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018910:	e05c      	b.n	80189cc <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	331c      	adds	r3, #28
 8018916:	4618      	mov	r0, r3
 8018918:	f003 ffc4 	bl	801c8a4 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 801891c:	4603      	mov	r3, r0
 801891e:	2b00      	cmp	r3, #0
 8018920:	d029      	beq.n	8018976 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	33cc      	adds	r3, #204	; 0xcc
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	6878      	ldr	r0, [r7, #4]
 801892c:	4798      	blx	r3
 801892e:	4604      	mov	r4, r0
 8018930:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018934:	6879      	ldr	r1, [r7, #4]
 8018936:	4618      	mov	r0, r3
 8018938:	f7ff f93b 	bl	8017bb2 <_ZNK21MockCheckedActualCall7getNameEv>
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018940:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018944:	f107 000c 	add.w	r0, r7, #12
 8018948:	4621      	mov	r1, r4
 801894a:	f004 fd21 	bl	801d390 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801894e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018952:	4618      	mov	r0, r3
 8018954:	f7f4 fd03 	bl	800d35e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	33dc      	adds	r3, #220	; 0xdc
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	f107 020c 	add.w	r2, r7, #12
 8018964:	4611      	mov	r1, r2
 8018966:	6878      	ldr	r0, [r7, #4]
 8018968:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801896a:	f107 030c 	add.w	r3, r7, #12
 801896e:	4618      	mov	r0, r3
 8018970:	f001 fb62 	bl	801a038 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8018974:	e02a      	b.n	80189cc <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	33cc      	adds	r3, #204	; 0xcc
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	6878      	ldr	r0, [r7, #4]
 8018980:	4798      	blx	r3
 8018982:	4604      	mov	r4, r0
 8018984:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018988:	6879      	ldr	r1, [r7, #4]
 801898a:	4618      	mov	r0, r3
 801898c:	f7ff f911 	bl	8017bb2 <_ZNK21MockCheckedActualCall7getNameEv>
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018994:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018998:	f107 000c 	add.w	r0, r7, #12
 801899c:	4621      	mov	r1, r4
 801899e:	f004 fe05 	bl	801d5ac <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 80189a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80189a6:	4618      	mov	r0, r3
 80189a8:	f7f4 fcd9 	bl	800d35e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	33dc      	adds	r3, #220	; 0xdc
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	f107 020c 	add.w	r2, r7, #12
 80189b8:	4611      	mov	r1, r2
 80189ba:	6878      	ldr	r0, [r7, #4]
 80189bc:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80189be:	f107 030c 	add.w	r3, r7, #12
 80189c2:	4618      	mov	r0, r3
 80189c4:	f001 fb5a 	bl	801a07c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 80189c8:	e000      	b.n	80189cc <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 80189ca:	bf00      	nop
    }
}
 80189cc:	3750      	adds	r7, #80	; 0x50
 80189ce:	46bd      	mov	sp, r7
 80189d0:	bdb0      	pop	{r4, r5, r7, pc}
 80189d2:	bf00      	nop
 80189d4:	08025fcc 	.word	0x08025fcc
 80189d8:	08026034 	.word	0x08026034

080189dc <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 80189dc:	b480      	push	{r7}
 80189de:	b083      	sub	sp, #12
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
 80189e4:	460b      	mov	r3, r1
 80189e6:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	78fa      	ldrb	r2, [r7, #3]
 80189ec:	751a      	strb	r2, [r3, #20]
}
 80189ee:	bf00      	nop
 80189f0:	370c      	adds	r7, #12
 80189f2:	46bd      	mov	sp, r7
 80189f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f8:	4770      	bx	lr
	...

080189fc <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b084      	sub	sp, #16
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
 8018a04:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8018a06:	683b      	ldr	r3, [r7, #0]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	33c4      	adds	r3, #196	; 0xc4
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	6838      	ldr	r0, [r7, #0]
 8018a10:	4798      	blx	r3
    if (matchingExpectation_)
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	699b      	ldr	r3, [r3, #24]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d00a      	beq.n	8018a30 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8018a1a:	683b      	ldr	r3, [r7, #0]
 8018a1c:	6999      	ldr	r1, [r3, #24]
 8018a1e:	683b      	ldr	r3, [r7, #0]
 8018a20:	699b      	ldr	r3, [r3, #24]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	3394      	adds	r3, #148	; 0x94
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	687a      	ldr	r2, [r7, #4]
 8018a2a:	4610      	mov	r0, r2
 8018a2c:	4798      	blx	r3
 8018a2e:	e010      	b.n	8018a52 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8018a30:	f107 0308 	add.w	r3, r7, #8
 8018a34:	4909      	ldr	r1, [pc, #36]	; (8018a5c <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8018a36:	4618      	mov	r0, r3
 8018a38:	f7f4 f8d9 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8018a3c:	f107 0308 	add.w	r3, r7, #8
 8018a40:	4619      	mov	r1, r3
 8018a42:	6878      	ldr	r0, [r7, #4]
 8018a44:	f004 fdf8 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018a48:	f107 0308 	add.w	r3, r7, #8
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	f7f4 fc86 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	3710      	adds	r7, #16
 8018a56:	46bd      	mov	sp, r7
 8018a58:	bd80      	pop	{r7, pc}
 8018a5a:	bf00      	nop
 8018a5c:	080260b0 	.word	0x080260b0

08018a60 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b082      	sub	sp, #8
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
 8018a68:	460b      	mov	r3, r1
 8018a6a:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	3350      	adds	r3, #80	; 0x50
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	6878      	ldr	r0, [r7, #4]
 8018a76:	4798      	blx	r3
 8018a78:	4603      	mov	r3, r0
 8018a7a:	f083 0301 	eor.w	r3, r3, #1
 8018a7e:	b2db      	uxtb	r3, r3
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d001      	beq.n	8018a88 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8018a84:	78fb      	ldrb	r3, [r7, #3]
 8018a86:	e007      	b.n	8018a98 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	335c      	adds	r3, #92	; 0x5c
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	4798      	blx	r3
 8018a94:	4603      	mov	r3, r0
 8018a96:	bf00      	nop
}
 8018a98:	4618      	mov	r0, r3
 8018a9a:	3708      	adds	r7, #8
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd80      	pop	{r7, pc}

08018aa0 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8018aa0:	b590      	push	{r4, r7, lr}
 8018aa2:	b091      	sub	sp, #68	; 0x44
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	3354      	adds	r3, #84	; 0x54
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	f107 0208 	add.w	r2, r7, #8
 8018ab4:	6879      	ldr	r1, [r7, #4]
 8018ab6:	4610      	mov	r0, r2
 8018ab8:	4798      	blx	r3
 8018aba:	f107 0308 	add.w	r3, r7, #8
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f005 f898 	bl	801dbf4 <_ZNK14MockNamedValue12getBoolValueEv>
 8018ac4:	4603      	mov	r3, r0
 8018ac6:	461c      	mov	r4, r3
 8018ac8:	bf00      	nop
 8018aca:	f107 0308 	add.w	r3, r7, #8
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f004 fddc 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8018ad4:	4623      	mov	r3, r4
}
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	3744      	adds	r7, #68	; 0x44
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd90      	pop	{r4, r7, pc}

08018ade <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8018ade:	b580      	push	{r7, lr}
 8018ae0:	b082      	sub	sp, #8
 8018ae2:	af00      	add	r7, sp, #0
 8018ae4:	6078      	str	r0, [r7, #4]
 8018ae6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	3350      	adds	r3, #80	; 0x50
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	6878      	ldr	r0, [r7, #4]
 8018af2:	4798      	blx	r3
 8018af4:	4603      	mov	r3, r0
 8018af6:	f083 0301 	eor.w	r3, r3, #1
 8018afa:	b2db      	uxtb	r3, r3
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d001      	beq.n	8018b04 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8018b00:	683b      	ldr	r3, [r7, #0]
 8018b02:	e007      	b.n	8018b14 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	3364      	adds	r3, #100	; 0x64
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	6878      	ldr	r0, [r7, #4]
 8018b0e:	4798      	blx	r3
 8018b10:	4603      	mov	r3, r0
 8018b12:	bf00      	nop
}
 8018b14:	4618      	mov	r0, r3
 8018b16:	3708      	adds	r7, #8
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	bd80      	pop	{r7, pc}

08018b1c <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8018b1c:	b590      	push	{r4, r7, lr}
 8018b1e:	b091      	sub	sp, #68	; 0x44
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	3354      	adds	r3, #84	; 0x54
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	f107 0208 	add.w	r2, r7, #8
 8018b30:	6879      	ldr	r1, [r7, #4]
 8018b32:	4610      	mov	r0, r2
 8018b34:	4798      	blx	r3
 8018b36:	f107 0308 	add.w	r3, r7, #8
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	f005 f8d2 	bl	801dce4 <_ZNK14MockNamedValue11getIntValueEv>
 8018b40:	4604      	mov	r4, r0
 8018b42:	bf00      	nop
 8018b44:	f107 0308 	add.w	r3, r7, #8
 8018b48:	4618      	mov	r0, r3
 8018b4a:	f004 fd9f 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8018b4e:	4623      	mov	r3, r4
}
 8018b50:	4618      	mov	r0, r3
 8018b52:	3744      	adds	r7, #68	; 0x44
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd90      	pop	{r4, r7, pc}

08018b58 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8018b58:	b590      	push	{r4, r7, lr}
 8018b5a:	b091      	sub	sp, #68	; 0x44
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	3354      	adds	r3, #84	; 0x54
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	f107 0208 	add.w	r2, r7, #8
 8018b6c:	6879      	ldr	r1, [r7, #4]
 8018b6e:	4610      	mov	r0, r2
 8018b70:	4798      	blx	r3
 8018b72:	f107 0308 	add.w	r3, r7, #8
 8018b76:	4618      	mov	r0, r3
 8018b78:	f005 f93e 	bl	801ddf8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8018b7c:	4604      	mov	r4, r0
 8018b7e:	bf00      	nop
 8018b80:	f107 0308 	add.w	r3, r7, #8
 8018b84:	4618      	mov	r0, r3
 8018b86:	f004 fd81 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8018b8a:	4623      	mov	r3, r4
}
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	3744      	adds	r7, #68	; 0x44
 8018b90:	46bd      	mov	sp, r7
 8018b92:	bd90      	pop	{r4, r7, pc}

08018b94 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b082      	sub	sp, #8
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	6078      	str	r0, [r7, #4]
 8018b9c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	3350      	adds	r3, #80	; 0x50
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	6878      	ldr	r0, [r7, #4]
 8018ba8:	4798      	blx	r3
 8018baa:	4603      	mov	r3, r0
 8018bac:	f083 0301 	eor.w	r3, r3, #1
 8018bb0:	b2db      	uxtb	r3, r3
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d001      	beq.n	8018bba <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8018bb6:	683b      	ldr	r3, [r7, #0]
 8018bb8:	e007      	b.n	8018bca <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	3368      	adds	r3, #104	; 0x68
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	6878      	ldr	r0, [r7, #4]
 8018bc4:	4798      	blx	r3
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	bf00      	nop
}
 8018bca:	4618      	mov	r0, r3
 8018bcc:	3708      	adds	r7, #8
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}

08018bd2 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8018bd2:	b590      	push	{r4, r7, lr}
 8018bd4:	b091      	sub	sp, #68	; 0x44
 8018bd6:	af00      	add	r7, sp, #0
 8018bd8:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	3354      	adds	r3, #84	; 0x54
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	f107 0208 	add.w	r2, r7, #8
 8018be6:	6879      	ldr	r1, [r7, #4]
 8018be8:	4610      	mov	r0, r2
 8018bea:	4798      	blx	r3
 8018bec:	f107 0308 	add.w	r3, r7, #8
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	f005 f89f 	bl	801dd34 <_ZNK14MockNamedValue15getLongIntValueEv>
 8018bf6:	4604      	mov	r4, r0
 8018bf8:	bf00      	nop
 8018bfa:	f107 0308 	add.w	r3, r7, #8
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f004 fd44 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8018c04:	4623      	mov	r3, r4
}
 8018c06:	4618      	mov	r0, r3
 8018c08:	3744      	adds	r7, #68	; 0x44
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd90      	pop	{r4, r7, pc}

08018c0e <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8018c0e:	b580      	push	{r7, lr}
 8018c10:	b082      	sub	sp, #8
 8018c12:	af00      	add	r7, sp, #0
 8018c14:	6078      	str	r0, [r7, #4]
 8018c16:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	3350      	adds	r3, #80	; 0x50
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	6878      	ldr	r0, [r7, #4]
 8018c22:	4798      	blx	r3
 8018c24:	4603      	mov	r3, r0
 8018c26:	f083 0301 	eor.w	r3, r3, #1
 8018c2a:	b2db      	uxtb	r3, r3
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d001      	beq.n	8018c34 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8018c30:	683b      	ldr	r3, [r7, #0]
 8018c32:	e007      	b.n	8018c44 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	3370      	adds	r3, #112	; 0x70
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	4798      	blx	r3
 8018c40:	4603      	mov	r3, r0
 8018c42:	bf00      	nop
}
 8018c44:	4618      	mov	r0, r3
 8018c46:	3708      	adds	r7, #8
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd80      	pop	{r7, pc}

08018c4c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8018c4c:	b5b0      	push	{r4, r5, r7, lr}
 8018c4e:	b084      	sub	sp, #16
 8018c50:	af02      	add	r7, sp, #8
 8018c52:	6078      	str	r0, [r7, #4]
 8018c54:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8018c56:	f7fb fbad 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8018c5a:	4604      	mov	r4, r0
 8018c5c:	6823      	ldr	r3, [r4, #0]
 8018c5e:	3368      	adds	r3, #104	; 0x68
 8018c60:	681d      	ldr	r5, [r3, #0]
 8018c62:	f7fb fbb7 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018c66:	4603      	mov	r3, r0
 8018c68:	9300      	str	r3, [sp, #0]
 8018c6a:	f240 13fb 	movw	r3, #507	; 0x1fb
 8018c6e:	4a06      	ldr	r2, [pc, #24]	; (8018c88 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8018c70:	4906      	ldr	r1, [pc, #24]	; (8018c8c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8018c72:	4620      	mov	r0, r4
 8018c74:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8018c76:	2100      	movs	r1, #0
 8018c78:	6878      	ldr	r0, [r7, #4]
 8018c7a:	f7f1 fffb 	bl	800ac74 <_ZN18cpputest_ulonglongC1Ei>
}
 8018c7e:	6878      	ldr	r0, [r7, #4]
 8018c80:	3708      	adds	r7, #8
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bdb0      	pop	{r4, r5, r7, pc}
 8018c86:	bf00      	nop
 8018c88:	08025fcc 	.word	0x08025fcc
 8018c8c:	08025fe8 	.word	0x08025fe8

08018c90 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8018c90:	b5b0      	push	{r4, r5, r7, lr}
 8018c92:	b086      	sub	sp, #24
 8018c94:	af02      	add	r7, sp, #8
 8018c96:	60f8      	str	r0, [r7, #12]
 8018c98:	60b9      	str	r1, [r7, #8]
 8018c9a:	4639      	mov	r1, r7
 8018c9c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018ca0:	f7fb fb88 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8018ca4:	4604      	mov	r4, r0
 8018ca6:	6823      	ldr	r3, [r4, #0]
 8018ca8:	3368      	adds	r3, #104	; 0x68
 8018caa:	681d      	ldr	r5, [r3, #0]
 8018cac:	f7fb fb92 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018cb0:	4603      	mov	r3, r0
 8018cb2:	9300      	str	r3, [sp, #0]
 8018cb4:	f240 2301 	movw	r3, #513	; 0x201
 8018cb8:	4a06      	ldr	r2, [pc, #24]	; (8018cd4 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8018cba:	4907      	ldr	r1, [pc, #28]	; (8018cd8 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	47a8      	blx	r5
    return default_value;
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	461a      	mov	r2, r3
 8018cc4:	463b      	mov	r3, r7
 8018cc6:	cb03      	ldmia	r3!, {r0, r1}
 8018cc8:	6010      	str	r0, [r2, #0]
 8018cca:	6051      	str	r1, [r2, #4]
}
 8018ccc:	68f8      	ldr	r0, [r7, #12]
 8018cce:	3710      	adds	r7, #16
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8018cd4:	08025fcc 	.word	0x08025fcc
 8018cd8:	08025fe8 	.word	0x08025fe8

08018cdc <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8018cdc:	b5b0      	push	{r4, r5, r7, lr}
 8018cde:	b084      	sub	sp, #16
 8018ce0:	af02      	add	r7, sp, #8
 8018ce2:	6078      	str	r0, [r7, #4]
 8018ce4:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8018ce6:	f7fb fb65 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8018cea:	4604      	mov	r4, r0
 8018cec:	6823      	ldr	r3, [r4, #0]
 8018cee:	3368      	adds	r3, #104	; 0x68
 8018cf0:	681d      	ldr	r5, [r3, #0]
 8018cf2:	f7fb fb6f 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	9300      	str	r3, [sp, #0]
 8018cfa:	f240 2307 	movw	r3, #519	; 0x207
 8018cfe:	4a06      	ldr	r2, [pc, #24]	; (8018d18 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8018d00:	4906      	ldr	r1, [pc, #24]	; (8018d1c <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8018d02:	4620      	mov	r0, r4
 8018d04:	47a8      	blx	r5
    return cpputest_longlong(0);
 8018d06:	2100      	movs	r1, #0
 8018d08:	6878      	ldr	r0, [r7, #4]
 8018d0a:	f7f1 ffa7 	bl	800ac5c <_ZN17cpputest_longlongC1Ei>
}
 8018d0e:	6878      	ldr	r0, [r7, #4]
 8018d10:	3708      	adds	r7, #8
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bdb0      	pop	{r4, r5, r7, pc}
 8018d16:	bf00      	nop
 8018d18:	08025fcc 	.word	0x08025fcc
 8018d1c:	08026014 	.word	0x08026014

08018d20 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8018d20:	b5b0      	push	{r4, r5, r7, lr}
 8018d22:	b086      	sub	sp, #24
 8018d24:	af02      	add	r7, sp, #8
 8018d26:	60f8      	str	r0, [r7, #12]
 8018d28:	60b9      	str	r1, [r7, #8]
 8018d2a:	4639      	mov	r1, r7
 8018d2c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018d30:	f7fb fb40 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8018d34:	4604      	mov	r4, r0
 8018d36:	6823      	ldr	r3, [r4, #0]
 8018d38:	3368      	adds	r3, #104	; 0x68
 8018d3a:	681d      	ldr	r5, [r3, #0]
 8018d3c:	f7fb fb4a 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018d40:	4603      	mov	r3, r0
 8018d42:	9300      	str	r3, [sp, #0]
 8018d44:	f240 230d 	movw	r3, #525	; 0x20d
 8018d48:	4a06      	ldr	r2, [pc, #24]	; (8018d64 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8018d4a:	4907      	ldr	r1, [pc, #28]	; (8018d68 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8018d4c:	4620      	mov	r0, r4
 8018d4e:	47a8      	blx	r5
    return default_value;
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	461a      	mov	r2, r3
 8018d54:	463b      	mov	r3, r7
 8018d56:	cb03      	ldmia	r3!, {r0, r1}
 8018d58:	6010      	str	r0, [r2, #0]
 8018d5a:	6051      	str	r1, [r2, #4]
}
 8018d5c:	68f8      	ldr	r0, [r7, #12]
 8018d5e:	3710      	adds	r7, #16
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bdb0      	pop	{r4, r5, r7, pc}
 8018d64:	08025fcc 	.word	0x08025fcc
 8018d68:	08026014 	.word	0x08026014

08018d6c <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	ed2d 8b02 	vpush	{d8}
 8018d72:	b090      	sub	sp, #64	; 0x40
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	3354      	adds	r3, #84	; 0x54
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	f107 0208 	add.w	r2, r7, #8
 8018d84:	6879      	ldr	r1, [r7, #4]
 8018d86:	4610      	mov	r0, r2
 8018d88:	4798      	blx	r3
 8018d8a:	f107 0308 	add.w	r3, r7, #8
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f005 f90a 	bl	801dfa8 <_ZNK14MockNamedValue14getDoubleValueEv>
 8018d94:	eeb0 8a40 	vmov.f32	s16, s0
 8018d98:	eef0 8a60 	vmov.f32	s17, s1
 8018d9c:	bf00      	nop
 8018d9e:	f107 0308 	add.w	r3, r7, #8
 8018da2:	4618      	mov	r0, r3
 8018da4:	f004 fc72 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8018da8:	eeb0 7a48 	vmov.f32	s14, s16
 8018dac:	eef0 7a68 	vmov.f32	s15, s17
}
 8018db0:	eeb0 0a47 	vmov.f32	s0, s14
 8018db4:	eef0 0a67 	vmov.f32	s1, s15
 8018db8:	3740      	adds	r7, #64	; 0x40
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	ecbd 8b02 	vpop	{d8}
 8018dc0:	bd80      	pop	{r7, pc}

08018dc2 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8018dc2:	b580      	push	{r7, lr}
 8018dc4:	b084      	sub	sp, #16
 8018dc6:	af00      	add	r7, sp, #0
 8018dc8:	60f8      	str	r0, [r7, #12]
 8018dca:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	3350      	adds	r3, #80	; 0x50
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	68f8      	ldr	r0, [r7, #12]
 8018dd8:	4798      	blx	r3
 8018dda:	4603      	mov	r3, r0
 8018ddc:	f083 0301 	eor.w	r3, r3, #1
 8018de0:	b2db      	uxtb	r3, r3
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d002      	beq.n	8018dec <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8018de6:	ed97 7b00 	vldr	d7, [r7]
 8018dea:	e00a      	b.n	8018e02 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	3398      	adds	r3, #152	; 0x98
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	68f8      	ldr	r0, [r7, #12]
 8018df6:	4798      	blx	r3
 8018df8:	eeb0 7a40 	vmov.f32	s14, s0
 8018dfc:	eef0 7a60 	vmov.f32	s15, s1
 8018e00:	bf00      	nop
}
 8018e02:	eeb0 0a47 	vmov.f32	s0, s14
 8018e06:	eef0 0a67 	vmov.f32	s1, s15
 8018e0a:	3710      	adds	r7, #16
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}

08018e10 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 8018e10:	b590      	push	{r4, r7, lr}
 8018e12:	b091      	sub	sp, #68	; 0x44
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	3354      	adds	r3, #84	; 0x54
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	f107 0208 	add.w	r2, r7, #8
 8018e24:	6879      	ldr	r1, [r7, #4]
 8018e26:	4610      	mov	r0, r2
 8018e28:	4798      	blx	r3
 8018e2a:	f107 0308 	add.w	r3, r7, #8
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f004 ff08 	bl	801dc44 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8018e34:	4604      	mov	r4, r0
 8018e36:	bf00      	nop
 8018e38:	f107 0308 	add.w	r3, r7, #8
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	f004 fc25 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8018e42:	4623      	mov	r3, r4
}
 8018e44:	4618      	mov	r0, r3
 8018e46:	3744      	adds	r7, #68	; 0x44
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd90      	pop	{r4, r7, pc}

08018e4c <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b082      	sub	sp, #8
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
 8018e54:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	3350      	adds	r3, #80	; 0x50
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	6878      	ldr	r0, [r7, #4]
 8018e60:	4798      	blx	r3
 8018e62:	4603      	mov	r3, r0
 8018e64:	f083 0301 	eor.w	r3, r3, #1
 8018e68:	b2db      	uxtb	r3, r3
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d001      	beq.n	8018e72 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8018e6e:	683b      	ldr	r3, [r7, #0]
 8018e70:	e007      	b.n	8018e82 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	3388      	adds	r3, #136	; 0x88
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	6878      	ldr	r0, [r7, #4]
 8018e7c:	4798      	blx	r3
 8018e7e:	4603      	mov	r3, r0
 8018e80:	bf00      	nop
}
 8018e82:	4618      	mov	r0, r3
 8018e84:	3708      	adds	r7, #8
 8018e86:	46bd      	mov	sp, r7
 8018e88:	bd80      	pop	{r7, pc}

08018e8a <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8018e8a:	b580      	push	{r7, lr}
 8018e8c:	b082      	sub	sp, #8
 8018e8e:	af00      	add	r7, sp, #0
 8018e90:	6078      	str	r0, [r7, #4]
 8018e92:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	3350      	adds	r3, #80	; 0x50
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	4798      	blx	r3
 8018ea0:	4603      	mov	r3, r0
 8018ea2:	f083 0301 	eor.w	r3, r3, #1
 8018ea6:	b2db      	uxtb	r3, r3
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d001      	beq.n	8018eb0 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8018eac:	683b      	ldr	r3, [r7, #0]
 8018eae:	e007      	b.n	8018ec0 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	33a0      	adds	r3, #160	; 0xa0
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	6878      	ldr	r0, [r7, #4]
 8018eba:	4798      	blx	r3
 8018ebc:	4603      	mov	r3, r0
 8018ebe:	bf00      	nop
}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3708      	adds	r7, #8
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}

08018ec8 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8018ec8:	b590      	push	{r4, r7, lr}
 8018eca:	b091      	sub	sp, #68	; 0x44
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	3354      	adds	r3, #84	; 0x54
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	f107 0208 	add.w	r2, r7, #8
 8018edc:	6879      	ldr	r1, [r7, #4]
 8018ede:	4610      	mov	r0, r2
 8018ee0:	4798      	blx	r3
 8018ee2:	f107 0308 	add.w	r3, r7, #8
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f005 f8e2 	bl	801e0b0 <_ZNK14MockNamedValue15getPointerValueEv>
 8018eec:	4604      	mov	r4, r0
 8018eee:	bf00      	nop
 8018ef0:	f107 0308 	add.w	r3, r7, #8
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f004 fbc9 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8018efa:	4623      	mov	r3, r4
}
 8018efc:	4618      	mov	r0, r3
 8018efe:	3744      	adds	r7, #68	; 0x44
 8018f00:	46bd      	mov	sp, r7
 8018f02:	bd90      	pop	{r4, r7, pc}

08018f04 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8018f04:	b590      	push	{r4, r7, lr}
 8018f06:	b091      	sub	sp, #68	; 0x44
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	3354      	adds	r3, #84	; 0x54
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	f107 0208 	add.w	r2, r7, #8
 8018f18:	6879      	ldr	r1, [r7, #4]
 8018f1a:	4610      	mov	r0, r2
 8018f1c:	4798      	blx	r3
 8018f1e:	f107 0308 	add.w	r3, r7, #8
 8018f22:	4618      	mov	r0, r3
 8018f24:	f005 f8ec 	bl	801e100 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8018f28:	4604      	mov	r4, r0
 8018f2a:	bf00      	nop
 8018f2c:	f107 0308 	add.w	r3, r7, #8
 8018f30:	4618      	mov	r0, r3
 8018f32:	f004 fbab 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8018f36:	4623      	mov	r3, r4
}
 8018f38:	4618      	mov	r0, r3
 8018f3a:	3744      	adds	r7, #68	; 0x44
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd90      	pop	{r4, r7, pc}

08018f40 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b082      	sub	sp, #8
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
 8018f48:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	3350      	adds	r3, #80	; 0x50
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	6878      	ldr	r0, [r7, #4]
 8018f54:	4798      	blx	r3
 8018f56:	4603      	mov	r3, r0
 8018f58:	f083 0301 	eor.w	r3, r3, #1
 8018f5c:	b2db      	uxtb	r3, r3
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d001      	beq.n	8018f66 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	e007      	b.n	8018f76 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	33a8      	adds	r3, #168	; 0xa8
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	6878      	ldr	r0, [r7, #4]
 8018f70:	4798      	blx	r3
 8018f72:	4603      	mov	r3, r0
 8018f74:	bf00      	nop
}
 8018f76:	4618      	mov	r0, r3
 8018f78:	3708      	adds	r7, #8
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bd80      	pop	{r7, pc}

08018f7e <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8018f7e:	b590      	push	{r4, r7, lr}
 8018f80:	b091      	sub	sp, #68	; 0x44
 8018f82:	af00      	add	r7, sp, #0
 8018f84:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	3354      	adds	r3, #84	; 0x54
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	f107 0208 	add.w	r2, r7, #8
 8018f92:	6879      	ldr	r1, [r7, #4]
 8018f94:	4610      	mov	r0, r2
 8018f96:	4798      	blx	r3
 8018f98:	f107 0308 	add.w	r3, r7, #8
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	f005 f8d7 	bl	801e150 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8018fa2:	4604      	mov	r4, r0
 8018fa4:	bf00      	nop
 8018fa6:	f107 0308 	add.w	r3, r7, #8
 8018faa:	4618      	mov	r0, r3
 8018fac:	f004 fb6e 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8018fb0:	4623      	mov	r3, r4
}
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	3744      	adds	r7, #68	; 0x44
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	bd90      	pop	{r4, r7, pc}

08018fba <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8018fba:	b580      	push	{r7, lr}
 8018fbc:	b082      	sub	sp, #8
 8018fbe:	af00      	add	r7, sp, #0
 8018fc0:	6078      	str	r0, [r7, #4]
 8018fc2:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	3350      	adds	r3, #80	; 0x50
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	6878      	ldr	r0, [r7, #4]
 8018fce:	4798      	blx	r3
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	f083 0301 	eor.w	r3, r3, #1
 8018fd6:	b2db      	uxtb	r3, r3
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d001      	beq.n	8018fe0 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8018fdc:	683b      	ldr	r3, [r7, #0]
 8018fde:	e007      	b.n	8018ff0 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	33b0      	adds	r3, #176	; 0xb0
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	6878      	ldr	r0, [r7, #4]
 8018fea:	4798      	blx	r3
 8018fec:	4603      	mov	r3, r0
 8018fee:	bf00      	nop
}
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	3708      	adds	r7, #8
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	bd80      	pop	{r7, pc}

08018ff8 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8018ff8:	b580      	push	{r7, lr}
 8018ffa:	b082      	sub	sp, #8
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	6078      	str	r0, [r7, #4]
 8019000:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	3350      	adds	r3, #80	; 0x50
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	6878      	ldr	r0, [r7, #4]
 801900c:	4798      	blx	r3
 801900e:	4603      	mov	r3, r0
 8019010:	f083 0301 	eor.w	r3, r3, #1
 8019014:	b2db      	uxtb	r3, r3
 8019016:	2b00      	cmp	r3, #0
 8019018:	d001      	beq.n	801901e <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 801901a:	683b      	ldr	r3, [r7, #0]
 801901c:	e007      	b.n	801902e <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	3394      	adds	r3, #148	; 0x94
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	6878      	ldr	r0, [r7, #4]
 8019028:	4798      	blx	r3
 801902a:	4603      	mov	r3, r0
 801902c:	bf00      	nop
}
 801902e:	4618      	mov	r0, r3
 8019030:	3708      	adds	r7, #8
 8019032:	46bd      	mov	sp, r7
 8019034:	bd80      	pop	{r7, pc}

08019036 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8019036:	b590      	push	{r4, r7, lr}
 8019038:	b091      	sub	sp, #68	; 0x44
 801903a:	af00      	add	r7, sp, #0
 801903c:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	3354      	adds	r3, #84	; 0x54
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	f107 0208 	add.w	r2, r7, #8
 801904a:	6879      	ldr	r1, [r7, #4]
 801904c:	4610      	mov	r0, r2
 801904e:	4798      	blx	r3
 8019050:	f107 0308 	add.w	r3, r7, #8
 8019054:	4618      	mov	r0, r3
 8019056:	f005 f803 	bl	801e060 <_ZNK14MockNamedValue14getStringValueEv>
 801905a:	4604      	mov	r4, r0
 801905c:	bf00      	nop
 801905e:	f107 0308 	add.w	r3, r7, #8
 8019062:	4618      	mov	r0, r3
 8019064:	f004 fb12 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 8019068:	4623      	mov	r3, r4
}
 801906a:	4618      	mov	r0, r3
 801906c:	3744      	adds	r7, #68	; 0x44
 801906e:	46bd      	mov	sp, r7
 8019070:	bd90      	pop	{r4, r7, pc}

08019072 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8019072:	b590      	push	{r4, r7, lr}
 8019074:	b093      	sub	sp, #76	; 0x4c
 8019076:	af00      	add	r7, sp, #0
 8019078:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	3354      	adds	r3, #84	; 0x54
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	f107 0210 	add.w	r2, r7, #16
 8019086:	6879      	ldr	r1, [r7, #4]
 8019088:	4610      	mov	r0, r2
 801908a:	4798      	blx	r3
 801908c:	f107 0308 	add.w	r3, r7, #8
 8019090:	f107 0210 	add.w	r2, r7, #16
 8019094:	4611      	mov	r1, r2
 8019096:	4618      	mov	r0, r3
 8019098:	f004 fd8e 	bl	801dbb8 <_ZNK14MockNamedValue7getNameEv>
 801909c:	f107 0308 	add.w	r3, r7, #8
 80190a0:	4618      	mov	r0, r3
 80190a2:	f7f4 f94b 	bl	800d33c <_ZNK12SimpleString7isEmptyEv>
 80190a6:	4603      	mov	r3, r0
 80190a8:	f083 0301 	eor.w	r3, r3, #1
 80190ac:	b2dc      	uxtb	r4, r3
 80190ae:	f107 0308 	add.w	r3, r7, #8
 80190b2:	4618      	mov	r0, r3
 80190b4:	f7f4 f953 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80190b8:	f107 0310 	add.w	r3, r7, #16
 80190bc:	4618      	mov	r0, r3
 80190be:	f004 fae5 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 80190c2:	4623      	mov	r3, r4
}
 80190c4:	4618      	mov	r0, r3
 80190c6:	374c      	adds	r7, #76	; 0x4c
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd90      	pop	{r4, r7, pc}

080190cc <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 80190cc:	b590      	push	{r4, r7, lr}
 80190ce:	b095      	sub	sp, #84	; 0x54
 80190d0:	af02      	add	r7, sp, #8
 80190d2:	6078      	str	r0, [r7, #4]
 80190d4:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	33c0      	adds	r3, #192	; 0xc0
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	6878      	ldr	r0, [r7, #4]
 80190e0:	4798      	blx	r3
 80190e2:	4603      	mov	r3, r0
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d001      	beq.n	80190ec <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 80190e8:	687c      	ldr	r4, [r7, #4]
 80190ea:	e053      	b.n	8019194 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	331c      	adds	r3, #28
 80190f0:	6839      	ldr	r1, [r7, #0]
 80190f2:	4618      	mov	r0, r3
 80190f4:	f003 f8ca 	bl	801c28c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	699b      	ldr	r3, [r3, #24]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d109      	bne.n	8019114 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	331c      	adds	r3, #28
 8019104:	4618      	mov	r0, r3
 8019106:	f002 fe20 	bl	801bd4a <_ZNK21MockExpectedCallsList7isEmptyEv>
 801910a:	4603      	mov	r3, r0
 801910c:	2b00      	cmp	r3, #0
 801910e:	d001      	beq.n	8019114 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8019110:	2301      	movs	r3, #1
 8019112:	e000      	b.n	8019116 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8019114:	2300      	movs	r3, #0
 8019116:	2b00      	cmp	r3, #0
 8019118:	d02c      	beq.n	8019174 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	33cc      	adds	r3, #204	; 0xcc
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	6878      	ldr	r0, [r7, #4]
 8019124:	4798      	blx	r3
 8019126:	4604      	mov	r4, r0
 8019128:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801912c:	6879      	ldr	r1, [r7, #4]
 801912e:	4618      	mov	r0, r3
 8019130:	f7fe fd3f 	bl	8017bb2 <_ZNK21MockCheckedActualCall7getNameEv>
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019138:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801913c:	f107 000c 	add.w	r0, r7, #12
 8019140:	9300      	str	r3, [sp, #0]
 8019142:	683b      	ldr	r3, [r7, #0]
 8019144:	4621      	mov	r1, r4
 8019146:	f004 f9fb 	bl	801d540 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 801914a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801914e:	4618      	mov	r0, r3
 8019150:	f7f4 f905 	bl	800d35e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	33dc      	adds	r3, #220	; 0xdc
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	f107 020c 	add.w	r2, r7, #12
 8019160:	4611      	mov	r1, r2
 8019162:	6878      	ldr	r0, [r7, #4]
 8019164:	4798      	blx	r3
        return *this;
 8019166:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8019168:	f107 030c 	add.w	r3, r7, #12
 801916c:	4618      	mov	r0, r3
 801916e:	f000 ffa7 	bl	801a0c0 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8019172:	e00f      	b.n	8019194 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	331c      	adds	r3, #28
 8019178:	4618      	mov	r0, r3
 801917a:	f003 f9a7 	bl	801c4cc <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	699b      	ldr	r3, [r3, #24]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d105      	bne.n	8019192 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	33d8      	adds	r3, #216	; 0xd8
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	6878      	ldr	r0, [r7, #4]
 8019190:	4798      	blx	r3
    }

    return *this;
 8019192:	687c      	ldr	r4, [r7, #4]
 8019194:	4623      	mov	r3, r4
}
 8019196:	4618      	mov	r0, r3
 8019198:	374c      	adds	r7, #76	; 0x4c
 801919a:	46bd      	mov	sp, r7
 801919c:	bd90      	pop	{r4, r7, pc}
	...

080191a0 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 80191a0:	b590      	push	{r4, r7, lr}
 80191a2:	b087      	sub	sp, #28
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	60f8      	str	r0, [r7, #12]
 80191a8:	60b9      	str	r1, [r7, #8]
 80191aa:	607a      	str	r2, [r7, #4]
 80191ac:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 80191ae:	f240 2282 	movw	r2, #642	; 0x282
 80191b2:	4913      	ldr	r1, [pc, #76]	; (8019200 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 80191b4:	2018      	movs	r0, #24
 80191b6:	f7f1 f957 	bl	800a468 <_ZnwjPKci>
 80191ba:	4604      	mov	r4, r0
 80191bc:	683b      	ldr	r3, [r7, #0]
 80191be:	687a      	ldr	r2, [r7, #4]
 80191c0:	68b9      	ldr	r1, [r7, #8]
 80191c2:	4620      	mov	r0, r4
 80191c4:	f7fe fa48 	bl	8017658 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 80191c8:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d103      	bne.n	80191da <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	693a      	ldr	r2, [r7, #16]
 80191d6:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 80191d8:	e00d      	b.n	80191f6 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191de:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 80191e0:	697b      	ldr	r3, [r7, #20]
 80191e2:	695b      	ldr	r3, [r3, #20]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d003      	beq.n	80191f0 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 80191e8:	697b      	ldr	r3, [r7, #20]
 80191ea:	695b      	ldr	r3, [r3, #20]
 80191ec:	617b      	str	r3, [r7, #20]
 80191ee:	e7f7      	b.n	80191e0 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 80191f0:	697b      	ldr	r3, [r7, #20]
 80191f2:	693a      	ldr	r2, [r7, #16]
 80191f4:	615a      	str	r2, [r3, #20]
}
 80191f6:	bf00      	nop
 80191f8:	371c      	adds	r7, #28
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd90      	pop	{r4, r7, pc}
 80191fe:	bf00      	nop
 8019200:	08025fcc 	.word	0x08025fcc

08019204 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8019204:	b580      	push	{r7, lr}
 8019206:	b082      	sub	sp, #8
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	3308      	adds	r3, #8
 8019210:	4618      	mov	r0, r3
 8019212:	f7f4 f8a4 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	4618      	mov	r0, r3
 801921a:	f7f4 f8a0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	4618      	mov	r0, r3
 8019222:	3708      	adds	r7, #8
 8019224:	46bd      	mov	sp, r7
 8019226:	bd80      	pop	{r7, pc}

08019228 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8019228:	b590      	push	{r4, r7, lr}
 801922a:	b085      	sub	sp, #20
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019234:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8019236:	2300      	movs	r3, #0
 8019238:	60bb      	str	r3, [r7, #8]

    while (current) {
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d012      	beq.n	8019266 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	695b      	ldr	r3, [r3, #20]
 8019248:	60fb      	str	r3, [r7, #12]
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	68fa      	ldr	r2, [r7, #12]
 801924e:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8019250:	68bc      	ldr	r4, [r7, #8]
 8019252:	2c00      	cmp	r4, #0
 8019254:	d0f1      	beq.n	801923a <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8019256:	4620      	mov	r0, r4
 8019258:	f7ff ffd4 	bl	8019204 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 801925c:	2118      	movs	r1, #24
 801925e:	4620      	mov	r0, r4
 8019260:	f7f1 f916 	bl	800a490 <_ZdlPvj>
    while (current) {
 8019264:	e7e9      	b.n	801923a <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8019266:	bf00      	nop
 8019268:	3714      	adds	r7, #20
 801926a:	46bd      	mov	sp, r7
 801926c:	bd90      	pop	{r4, r7, pc}
	...

08019270 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8019270:	b580      	push	{r7, lr}
 8019272:	b082      	sub	sp, #8
 8019274:	af00      	add	r7, sp, #0
 8019276:	6078      	str	r0, [r7, #4]
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	4618      	mov	r0, r3
 801927c:	f7fe fc6a 	bl	8017b54 <_ZN14MockActualCallC1Ev>
 8019280:	4a06      	ldr	r2, [pc, #24]	; (801929c <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	601a      	str	r2, [r3, #0]
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	3304      	adds	r3, #4
 801928a:	4905      	ldr	r1, [pc, #20]	; (80192a0 <_ZN19MockActualCallTraceC1Ev+0x30>)
 801928c:	4618      	mov	r0, r3
 801928e:	f7f3 fcae 	bl	800cbee <_ZN12SimpleStringC1EPKc>
{
}
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	4618      	mov	r0, r3
 8019296:	3708      	adds	r7, #8
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}
 801929c:	08028df8 	.word	0x08028df8
 80192a0:	08025fb4 	.word	0x08025fb4

080192a4 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 80192a4:	b580      	push	{r7, lr}
 80192a6:	b082      	sub	sp, #8
 80192a8:	af00      	add	r7, sp, #0
 80192aa:	6078      	str	r0, [r7, #4]
 80192ac:	4a08      	ldr	r2, [pc, #32]	; (80192d0 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	601a      	str	r2, [r3, #0]
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	3304      	adds	r3, #4
 80192b6:	4618      	mov	r0, r3
 80192b8:	f7f4 f851 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	4618      	mov	r0, r3
 80192c0:	f7fe fc58 	bl	8017b74 <_ZN14MockActualCallD1Ev>
{
}
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	4618      	mov	r0, r3
 80192c8:	3708      	adds	r7, #8
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}
 80192ce:	bf00      	nop
 80192d0:	08028df8 	.word	0x08028df8

080192d4 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b082      	sub	sp, #8
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
}
 80192dc:	6878      	ldr	r0, [r7, #4]
 80192de:	f7ff ffe1 	bl	80192a4 <_ZN19MockActualCallTraceD1Ev>
 80192e2:	210c      	movs	r1, #12
 80192e4:	6878      	ldr	r0, [r7, #4]
 80192e6:	f7f1 f8d3 	bl	800a490 <_ZdlPvj>
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	4618      	mov	r0, r3
 80192ee:	3708      	adds	r7, #8
 80192f0:	46bd      	mov	sp, r7
 80192f2:	bd80      	pop	{r7, pc}

080192f4 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b082      	sub	sp, #8
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
 80192fc:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	3304      	adds	r3, #4
 8019302:	4907      	ldr	r1, [pc, #28]	; (8019320 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8019304:	4618      	mov	r0, r3
 8019306:	f7f4 f8b9 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	3304      	adds	r3, #4
 801930e:	6839      	ldr	r1, [r7, #0]
 8019310:	4618      	mov	r0, r3
 8019312:	f7f4 f8a1 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    return *this;
 8019316:	687b      	ldr	r3, [r7, #4]
}
 8019318:	4618      	mov	r0, r3
 801931a:	3708      	adds	r7, #8
 801931c:	46bd      	mov	sp, r7
 801931e:	bd80      	pop	{r7, pc}
 8019320:	080260c0 	.word	0x080260c0

08019324 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8019324:	b590      	push	{r4, r7, lr}
 8019326:	b085      	sub	sp, #20
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]
 801932c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	3304      	adds	r3, #4
 8019332:	490e      	ldr	r1, [pc, #56]	; (801936c <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8019334:	4618      	mov	r0, r3
 8019336:	f7f4 f8a1 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	1d1c      	adds	r4, r3, #4
 801933e:	f107 0308 	add.w	r3, r7, #8
 8019342:	6839      	ldr	r1, [r7, #0]
 8019344:	4618      	mov	r0, r3
 8019346:	f7f4 fd39 	bl	800ddbc <_Z10StringFromj>
 801934a:	f107 0308 	add.w	r3, r7, #8
 801934e:	4619      	mov	r1, r3
 8019350:	4620      	mov	r0, r4
 8019352:	f7f4 f881 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8019356:	f107 0308 	add.w	r3, r7, #8
 801935a:	4618      	mov	r0, r3
 801935c:	f7f3 ffff 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 8019360:	687b      	ldr	r3, [r7, #4]
}
 8019362:	4618      	mov	r0, r3
 8019364:	3714      	adds	r7, #20
 8019366:	46bd      	mov	sp, r7
 8019368:	bd90      	pop	{r4, r7, pc}
 801936a:	bf00      	nop
 801936c:	080260d0 	.word	0x080260d0

08019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b082      	sub	sp, #8
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
 8019378:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	3304      	adds	r3, #4
 801937e:	490a      	ldr	r1, [pc, #40]	; (80193a8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8019380:	4618      	mov	r0, r3
 8019382:	f7f4 f87b 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	3304      	adds	r3, #4
 801938a:	6839      	ldr	r1, [r7, #0]
 801938c:	4618      	mov	r0, r3
 801938e:	f7f4 f863 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	3304      	adds	r3, #4
 8019396:	4905      	ldr	r1, [pc, #20]	; (80193ac <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8019398:	4618      	mov	r0, r3
 801939a:	f7f4 f86f 	bl	800d47c <_ZN12SimpleStringpLEPKc>
}
 801939e:	bf00      	nop
 80193a0:	3708      	adds	r7, #8
 80193a2:	46bd      	mov	sp, r7
 80193a4:	bd80      	pop	{r7, pc}
 80193a6:	bf00      	nop
 80193a8:	080260e0 	.word	0x080260e0
 80193ac:	080260e4 	.word	0x080260e4

080193b0 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 80193b0:	b590      	push	{r4, r7, lr}
 80193b2:	b087      	sub	sp, #28
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	60f8      	str	r0, [r7, #12]
 80193b8:	60b9      	str	r1, [r7, #8]
 80193ba:	4613      	mov	r3, r2
 80193bc:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 80193be:	68b9      	ldr	r1, [r7, #8]
 80193c0:	68f8      	ldr	r0, [r7, #12]
 80193c2:	f7ff ffd5 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	1d1c      	adds	r4, r3, #4
 80193ca:	f107 0310 	add.w	r3, r7, #16
 80193ce:	79fa      	ldrb	r2, [r7, #7]
 80193d0:	4611      	mov	r1, r2
 80193d2:	4618      	mov	r0, r3
 80193d4:	f7f4 fa34 	bl	800d840 <_Z10StringFromb>
 80193d8:	f107 0310 	add.w	r3, r7, #16
 80193dc:	4619      	mov	r1, r3
 80193de:	4620      	mov	r0, r4
 80193e0:	f7f4 f83a 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 80193e4:	f107 0310 	add.w	r3, r7, #16
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7f3 ffb8 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 80193ee:	68fb      	ldr	r3, [r7, #12]
}
 80193f0:	4618      	mov	r0, r3
 80193f2:	371c      	adds	r7, #28
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd90      	pop	{r4, r7, pc}

080193f8 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80193f8:	b590      	push	{r4, r7, lr}
 80193fa:	b08f      	sub	sp, #60	; 0x3c
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	60f8      	str	r0, [r7, #12]
 8019400:	60b9      	str	r1, [r7, #8]
 8019402:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019404:	68b9      	ldr	r1, [r7, #8]
 8019406:	68f8      	ldr	r0, [r7, #12]
 8019408:	f7ff ffb2 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	1d1c      	adds	r4, r3, #4
 8019410:	f107 0320 	add.w	r3, r7, #32
 8019414:	6879      	ldr	r1, [r7, #4]
 8019416:	4618      	mov	r0, r3
 8019418:	f7f4 fcd0 	bl	800ddbc <_Z10StringFromj>
 801941c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019420:	491f      	ldr	r1, [pc, #124]	; (80194a0 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8019422:	4618      	mov	r0, r3
 8019424:	f7f3 fbe3 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8019428:	f107 0318 	add.w	r3, r7, #24
 801942c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019430:	f107 0120 	add.w	r1, r7, #32
 8019434:	4618      	mov	r0, r3
 8019436:	f7f3 fff4 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801943a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801943e:	6879      	ldr	r1, [r7, #4]
 8019440:	4618      	mov	r0, r3
 8019442:	f7f4 fb5f 	bl	800db04 <_Z30BracketsFormattedHexStringFromj>
 8019446:	f107 0310 	add.w	r3, r7, #16
 801944a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801944e:	f107 0118 	add.w	r1, r7, #24
 8019452:	4618      	mov	r0, r3
 8019454:	f7f3 ffe5 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 8019458:	f107 0310 	add.w	r3, r7, #16
 801945c:	4619      	mov	r1, r3
 801945e:	4620      	mov	r0, r4
 8019460:	f7f3 fffa 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8019464:	f107 0310 	add.w	r3, r7, #16
 8019468:	4618      	mov	r0, r3
 801946a:	f7f3 ff78 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801946e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019472:	4618      	mov	r0, r3
 8019474:	f7f3 ff73 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8019478:	f107 0318 	add.w	r3, r7, #24
 801947c:	4618      	mov	r0, r3
 801947e:	f7f3 ff6e 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8019482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019486:	4618      	mov	r0, r3
 8019488:	f7f3 ff69 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801948c:	f107 0320 	add.w	r3, r7, #32
 8019490:	4618      	mov	r0, r3
 8019492:	f7f3 ff64 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 8019496:	68fb      	ldr	r3, [r7, #12]
}
 8019498:	4618      	mov	r0, r3
 801949a:	373c      	adds	r7, #60	; 0x3c
 801949c:	46bd      	mov	sp, r7
 801949e:	bd90      	pop	{r4, r7, pc}
 80194a0:	080260e0 	.word	0x080260e0

080194a4 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 80194a4:	b590      	push	{r4, r7, lr}
 80194a6:	b08f      	sub	sp, #60	; 0x3c
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	60f8      	str	r0, [r7, #12]
 80194ac:	60b9      	str	r1, [r7, #8]
 80194ae:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80194b0:	68b9      	ldr	r1, [r7, #8]
 80194b2:	68f8      	ldr	r0, [r7, #12]
 80194b4:	f7ff ff5c 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	1d1c      	adds	r4, r3, #4
 80194bc:	f107 0320 	add.w	r3, r7, #32
 80194c0:	6879      	ldr	r1, [r7, #4]
 80194c2:	4618      	mov	r0, r3
 80194c4:	f7f4 fa12 	bl	800d8ec <_Z10StringFromi>
 80194c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80194cc:	491f      	ldr	r1, [pc, #124]	; (801954c <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 80194ce:	4618      	mov	r0, r3
 80194d0:	f7f3 fb8d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 80194d4:	f107 0318 	add.w	r3, r7, #24
 80194d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80194dc:	f107 0120 	add.w	r1, r7, #32
 80194e0:	4618      	mov	r0, r3
 80194e2:	f7f3 ff9e 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 80194e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80194ea:	6879      	ldr	r1, [r7, #4]
 80194ec:	4618      	mov	r0, r3
 80194ee:	f7f4 faed 	bl	800dacc <_Z30BracketsFormattedHexStringFromi>
 80194f2:	f107 0310 	add.w	r3, r7, #16
 80194f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80194fa:	f107 0118 	add.w	r1, r7, #24
 80194fe:	4618      	mov	r0, r3
 8019500:	f7f3 ff8f 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 8019504:	f107 0310 	add.w	r3, r7, #16
 8019508:	4619      	mov	r1, r3
 801950a:	4620      	mov	r0, r4
 801950c:	f7f3 ffa4 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8019510:	f107 0310 	add.w	r3, r7, #16
 8019514:	4618      	mov	r0, r3
 8019516:	f7f3 ff22 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801951a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801951e:	4618      	mov	r0, r3
 8019520:	f7f3 ff1d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8019524:	f107 0318 	add.w	r3, r7, #24
 8019528:	4618      	mov	r0, r3
 801952a:	f7f3 ff18 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801952e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019532:	4618      	mov	r0, r3
 8019534:	f7f3 ff13 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8019538:	f107 0320 	add.w	r3, r7, #32
 801953c:	4618      	mov	r0, r3
 801953e:	f7f3 ff0e 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 8019542:	68fb      	ldr	r3, [r7, #12]
}
 8019544:	4618      	mov	r0, r3
 8019546:	373c      	adds	r7, #60	; 0x3c
 8019548:	46bd      	mov	sp, r7
 801954a:	bd90      	pop	{r4, r7, pc}
 801954c:	080260e0 	.word	0x080260e0

08019550 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8019550:	b590      	push	{r4, r7, lr}
 8019552:	b08f      	sub	sp, #60	; 0x3c
 8019554:	af00      	add	r7, sp, #0
 8019556:	60f8      	str	r0, [r7, #12]
 8019558:	60b9      	str	r1, [r7, #8]
 801955a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801955c:	68b9      	ldr	r1, [r7, #8]
 801955e:	68f8      	ldr	r0, [r7, #12]
 8019560:	f7ff ff06 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	1d1c      	adds	r4, r3, #4
 8019568:	f107 0320 	add.w	r3, r7, #32
 801956c:	6879      	ldr	r1, [r7, #4]
 801956e:	4618      	mov	r0, r3
 8019570:	f7f4 fc36 	bl	800dde0 <_Z10StringFromm>
 8019574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019578:	491f      	ldr	r1, [pc, #124]	; (80195f8 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 801957a:	4618      	mov	r0, r3
 801957c:	f7f3 fb37 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8019580:	f107 0318 	add.w	r3, r7, #24
 8019584:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019588:	f107 0120 	add.w	r1, r7, #32
 801958c:	4618      	mov	r0, r3
 801958e:	f7f3 ff48 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 8019592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019596:	6879      	ldr	r1, [r7, #4]
 8019598:	4618      	mov	r0, r3
 801959a:	f7f4 faeb 	bl	800db74 <_Z30BracketsFormattedHexStringFromm>
 801959e:	f107 0310 	add.w	r3, r7, #16
 80195a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80195a6:	f107 0118 	add.w	r1, r7, #24
 80195aa:	4618      	mov	r0, r3
 80195ac:	f7f3 ff39 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 80195b0:	f107 0310 	add.w	r3, r7, #16
 80195b4:	4619      	mov	r1, r3
 80195b6:	4620      	mov	r0, r4
 80195b8:	f7f3 ff4e 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 80195bc:	f107 0310 	add.w	r3, r7, #16
 80195c0:	4618      	mov	r0, r3
 80195c2:	f7f3 fecc 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80195c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7f3 fec7 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80195d0:	f107 0318 	add.w	r3, r7, #24
 80195d4:	4618      	mov	r0, r3
 80195d6:	f7f3 fec2 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80195da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80195de:	4618      	mov	r0, r3
 80195e0:	f7f3 febd 	bl	800d35e <_ZN12SimpleStringD1Ev>
 80195e4:	f107 0320 	add.w	r3, r7, #32
 80195e8:	4618      	mov	r0, r3
 80195ea:	f7f3 feb8 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 80195ee:	68fb      	ldr	r3, [r7, #12]
}
 80195f0:	4618      	mov	r0, r3
 80195f2:	373c      	adds	r7, #60	; 0x3c
 80195f4:	46bd      	mov	sp, r7
 80195f6:	bd90      	pop	{r4, r7, pc}
 80195f8:	080260e0 	.word	0x080260e0

080195fc <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 80195fc:	b590      	push	{r4, r7, lr}
 80195fe:	b08f      	sub	sp, #60	; 0x3c
 8019600:	af00      	add	r7, sp, #0
 8019602:	60f8      	str	r0, [r7, #12]
 8019604:	60b9      	str	r1, [r7, #8]
 8019606:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019608:	68b9      	ldr	r1, [r7, #8]
 801960a:	68f8      	ldr	r0, [r7, #12]
 801960c:	f7ff feb0 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	1d1c      	adds	r4, r3, #4
 8019614:	f107 0320 	add.w	r3, r7, #32
 8019618:	6879      	ldr	r1, [r7, #4]
 801961a:	4618      	mov	r0, r3
 801961c:	f7f4 f978 	bl	800d910 <_Z10StringFroml>
 8019620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019624:	491f      	ldr	r1, [pc, #124]	; (80196a4 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8019626:	4618      	mov	r0, r3
 8019628:	f7f3 fae1 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801962c:	f107 0318 	add.w	r3, r7, #24
 8019630:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019634:	f107 0120 	add.w	r1, r7, #32
 8019638:	4618      	mov	r0, r3
 801963a:	f7f3 fef2 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801963e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019642:	6879      	ldr	r1, [r7, #4]
 8019644:	4618      	mov	r0, r3
 8019646:	f7f4 fa79 	bl	800db3c <_Z30BracketsFormattedHexStringFroml>
 801964a:	f107 0310 	add.w	r3, r7, #16
 801964e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019652:	f107 0118 	add.w	r1, r7, #24
 8019656:	4618      	mov	r0, r3
 8019658:	f7f3 fee3 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801965c:	f107 0310 	add.w	r3, r7, #16
 8019660:	4619      	mov	r1, r3
 8019662:	4620      	mov	r0, r4
 8019664:	f7f3 fef8 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8019668:	f107 0310 	add.w	r3, r7, #16
 801966c:	4618      	mov	r0, r3
 801966e:	f7f3 fe76 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8019672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019676:	4618      	mov	r0, r3
 8019678:	f7f3 fe71 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801967c:	f107 0318 	add.w	r3, r7, #24
 8019680:	4618      	mov	r0, r3
 8019682:	f7f3 fe6c 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8019686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801968a:	4618      	mov	r0, r3
 801968c:	f7f3 fe67 	bl	800d35e <_ZN12SimpleStringD1Ev>
 8019690:	f107 0320 	add.w	r3, r7, #32
 8019694:	4618      	mov	r0, r3
 8019696:	f7f3 fe62 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 801969a:	68fb      	ldr	r3, [r7, #12]
}
 801969c:	4618      	mov	r0, r3
 801969e:	373c      	adds	r7, #60	; 0x3c
 80196a0:	46bd      	mov	sp, r7
 80196a2:	bd90      	pop	{r4, r7, pc}
 80196a4:	080260e0 	.word	0x080260e0

080196a8 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80196a8:	b5b0      	push	{r4, r5, r7, lr}
 80196aa:	b086      	sub	sp, #24
 80196ac:	af02      	add	r7, sp, #8
 80196ae:	60f8      	str	r0, [r7, #12]
 80196b0:	60b9      	str	r1, [r7, #8]
 80196b2:	4639      	mov	r1, r7
 80196b4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80196b8:	f7fa fe7c 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 80196bc:	4604      	mov	r4, r0
 80196be:	6823      	ldr	r3, [r4, #0]
 80196c0:	3368      	adds	r3, #104	; 0x68
 80196c2:	681d      	ldr	r5, [r3, #0]
 80196c4:	f7fa fe86 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80196c8:	4603      	mov	r3, r0
 80196ca:	9300      	str	r3, [sp, #0]
 80196cc:	f240 23ee 	movw	r3, #750	; 0x2ee
 80196d0:	4a04      	ldr	r2, [pc, #16]	; (80196e4 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80196d2:	4905      	ldr	r1, [pc, #20]	; (80196e8 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80196d4:	4620      	mov	r0, r4
 80196d6:	47a8      	blx	r5
    return *this;
 80196d8:	68fb      	ldr	r3, [r7, #12]
}
 80196da:	4618      	mov	r0, r3
 80196dc:	3710      	adds	r7, #16
 80196de:	46bd      	mov	sp, r7
 80196e0:	bdb0      	pop	{r4, r5, r7, pc}
 80196e2:	bf00      	nop
 80196e4:	08025fcc 	.word	0x08025fcc
 80196e8:	08025fe8 	.word	0x08025fe8

080196ec <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80196ec:	b5b0      	push	{r4, r5, r7, lr}
 80196ee:	b086      	sub	sp, #24
 80196f0:	af02      	add	r7, sp, #8
 80196f2:	60f8      	str	r0, [r7, #12]
 80196f4:	60b9      	str	r1, [r7, #8]
 80196f6:	4639      	mov	r1, r7
 80196f8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80196fc:	f7fa fe5a 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8019700:	4604      	mov	r4, r0
 8019702:	6823      	ldr	r3, [r4, #0]
 8019704:	3368      	adds	r3, #104	; 0x68
 8019706:	681d      	ldr	r5, [r3, #0]
 8019708:	f7fa fe64 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801970c:	4603      	mov	r3, r0
 801970e:	9300      	str	r3, [sp, #0]
 8019710:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8019714:	4a04      	ldr	r2, [pc, #16]	; (8019728 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8019716:	4905      	ldr	r1, [pc, #20]	; (801972c <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8019718:	4620      	mov	r0, r4
 801971a:	47a8      	blx	r5
    return *this;
 801971c:	68fb      	ldr	r3, [r7, #12]
}
 801971e:	4618      	mov	r0, r3
 8019720:	3710      	adds	r7, #16
 8019722:	46bd      	mov	sp, r7
 8019724:	bdb0      	pop	{r4, r5, r7, pc}
 8019726:	bf00      	nop
 8019728:	08025fcc 	.word	0x08025fcc
 801972c:	08026014 	.word	0x08026014

08019730 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8019730:	b590      	push	{r4, r7, lr}
 8019732:	b087      	sub	sp, #28
 8019734:	af00      	add	r7, sp, #0
 8019736:	60f8      	str	r0, [r7, #12]
 8019738:	60b9      	str	r1, [r7, #8]
 801973a:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801973e:	68b9      	ldr	r1, [r7, #8]
 8019740:	68f8      	ldr	r0, [r7, #12]
 8019742:	f7ff fe15 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	1d1c      	adds	r4, r3, #4
 801974a:	f107 0310 	add.w	r3, r7, #16
 801974e:	2106      	movs	r1, #6
 8019750:	ed97 0b00 	vldr	d0, [r7]
 8019754:	4618      	mov	r0, r3
 8019756:	f7f4 fac7 	bl	800dce8 <_Z10StringFromdi>
 801975a:	f107 0310 	add.w	r3, r7, #16
 801975e:	4619      	mov	r1, r3
 8019760:	4620      	mov	r0, r4
 8019762:	f7f3 fe79 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8019766:	f107 0310 	add.w	r3, r7, #16
 801976a:	4618      	mov	r0, r3
 801976c:	f7f3 fdf7 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 8019770:	68fb      	ldr	r3, [r7, #12]
}
 8019772:	4618      	mov	r0, r3
 8019774:	371c      	adds	r7, #28
 8019776:	46bd      	mov	sp, r7
 8019778:	bd90      	pop	{r4, r7, pc}

0801977a <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801977a:	b590      	push	{r4, r7, lr}
 801977c:	b087      	sub	sp, #28
 801977e:	af00      	add	r7, sp, #0
 8019780:	60f8      	str	r0, [r7, #12]
 8019782:	60b9      	str	r1, [r7, #8]
 8019784:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019786:	68b9      	ldr	r1, [r7, #8]
 8019788:	68f8      	ldr	r0, [r7, #12]
 801978a:	f7ff fdf1 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	1d1c      	adds	r4, r3, #4
 8019792:	f107 0310 	add.w	r3, r7, #16
 8019796:	6879      	ldr	r1, [r7, #4]
 8019798:	4618      	mov	r0, r3
 801979a:	f7f4 f86d 	bl	800d878 <_Z10StringFromPKc>
 801979e:	f107 0310 	add.w	r3, r7, #16
 80197a2:	4619      	mov	r1, r3
 80197a4:	4620      	mov	r0, r4
 80197a6:	f7f3 fe57 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 80197aa:	f107 0310 	add.w	r3, r7, #16
 80197ae:	4618      	mov	r0, r3
 80197b0:	f7f3 fdd5 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 80197b4:	68fb      	ldr	r3, [r7, #12]
}
 80197b6:	4618      	mov	r0, r3
 80197b8:	371c      	adds	r7, #28
 80197ba:	46bd      	mov	sp, r7
 80197bc:	bd90      	pop	{r4, r7, pc}

080197be <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 80197be:	b590      	push	{r4, r7, lr}
 80197c0:	b087      	sub	sp, #28
 80197c2:	af00      	add	r7, sp, #0
 80197c4:	60f8      	str	r0, [r7, #12]
 80197c6:	60b9      	str	r1, [r7, #8]
 80197c8:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80197ca:	68b9      	ldr	r1, [r7, #8]
 80197cc:	68f8      	ldr	r0, [r7, #12]
 80197ce:	f7ff fdcf 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	1d1c      	adds	r4, r3, #4
 80197d6:	f107 0310 	add.w	r3, r7, #16
 80197da:	6879      	ldr	r1, [r7, #4]
 80197dc:	4618      	mov	r0, r3
 80197de:	f7f4 f8a9 	bl	800d934 <_Z10StringFromPKv>
 80197e2:	f107 0310 	add.w	r3, r7, #16
 80197e6:	4619      	mov	r1, r3
 80197e8:	4620      	mov	r0, r4
 80197ea:	f7f3 fe35 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 80197ee:	f107 0310 	add.w	r3, r7, #16
 80197f2:	4618      	mov	r0, r3
 80197f4:	f7f3 fdb3 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 80197f8:	68fb      	ldr	r3, [r7, #12]
}
 80197fa:	4618      	mov	r0, r3
 80197fc:	371c      	adds	r7, #28
 80197fe:	46bd      	mov	sp, r7
 8019800:	bd90      	pop	{r4, r7, pc}

08019802 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8019802:	b590      	push	{r4, r7, lr}
 8019804:	b087      	sub	sp, #28
 8019806:	af00      	add	r7, sp, #0
 8019808:	60f8      	str	r0, [r7, #12]
 801980a:	60b9      	str	r1, [r7, #8]
 801980c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801980e:	68b9      	ldr	r1, [r7, #8]
 8019810:	68f8      	ldr	r0, [r7, #12]
 8019812:	f7ff fdad 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	1d1c      	adds	r4, r3, #4
 801981a:	f107 0310 	add.w	r3, r7, #16
 801981e:	6879      	ldr	r1, [r7, #4]
 8019820:	4618      	mov	r0, r3
 8019822:	f7f4 f887 	bl	800d934 <_Z10StringFromPKv>
 8019826:	f107 0310 	add.w	r3, r7, #16
 801982a:	4619      	mov	r1, r3
 801982c:	4620      	mov	r0, r4
 801982e:	f7f3 fe13 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8019832:	f107 0310 	add.w	r3, r7, #16
 8019836:	4618      	mov	r0, r3
 8019838:	f7f3 fd91 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 801983c:	68fb      	ldr	r3, [r7, #12]
}
 801983e:	4618      	mov	r0, r3
 8019840:	371c      	adds	r7, #28
 8019842:	46bd      	mov	sp, r7
 8019844:	bd90      	pop	{r4, r7, pc}

08019846 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8019846:	b590      	push	{r4, r7, lr}
 8019848:	b087      	sub	sp, #28
 801984a:	af00      	add	r7, sp, #0
 801984c:	60f8      	str	r0, [r7, #12]
 801984e:	60b9      	str	r1, [r7, #8]
 8019850:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019852:	68b9      	ldr	r1, [r7, #8]
 8019854:	68f8      	ldr	r0, [r7, #12]
 8019856:	f7ff fd8b 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	1d1c      	adds	r4, r3, #4
 801985e:	f107 0310 	add.w	r3, r7, #16
 8019862:	6879      	ldr	r1, [r7, #4]
 8019864:	4618      	mov	r0, r3
 8019866:	f7f4 f88f 	bl	800d988 <_Z10StringFromPFvvE>
 801986a:	f107 0310 	add.w	r3, r7, #16
 801986e:	4619      	mov	r1, r3
 8019870:	4620      	mov	r0, r4
 8019872:	f7f3 fdf1 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8019876:	f107 0310 	add.w	r3, r7, #16
 801987a:	4618      	mov	r0, r3
 801987c:	f7f3 fd6f 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 8019880:	68fb      	ldr	r3, [r7, #12]
}
 8019882:	4618      	mov	r0, r3
 8019884:	371c      	adds	r7, #28
 8019886:	46bd      	mov	sp, r7
 8019888:	bd90      	pop	{r4, r7, pc}

0801988a <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801988a:	b590      	push	{r4, r7, lr}
 801988c:	b087      	sub	sp, #28
 801988e:	af00      	add	r7, sp, #0
 8019890:	60f8      	str	r0, [r7, #12]
 8019892:	60b9      	str	r1, [r7, #8]
 8019894:	607a      	str	r2, [r7, #4]
 8019896:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8019898:	68b9      	ldr	r1, [r7, #8]
 801989a:	68f8      	ldr	r0, [r7, #12]
 801989c:	f7ff fd68 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	1d1c      	adds	r4, r3, #4
 80198a4:	f107 0310 	add.w	r3, r7, #16
 80198a8:	683a      	ldr	r2, [r7, #0]
 80198aa:	6879      	ldr	r1, [r7, #4]
 80198ac:	4618      	mov	r0, r3
 80198ae:	f7f4 fbaf 	bl	800e010 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 80198b2:	f107 0310 	add.w	r3, r7, #16
 80198b6:	4619      	mov	r1, r3
 80198b8:	4620      	mov	r0, r4
 80198ba:	f7f3 fdcd 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 80198be:	f107 0310 	add.w	r3, r7, #16
 80198c2:	4618      	mov	r0, r3
 80198c4:	f7f3 fd4b 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 80198c8:	68fb      	ldr	r3, [r7, #12]
}
 80198ca:	4618      	mov	r0, r3
 80198cc:	371c      	adds	r7, #28
 80198ce:	46bd      	mov	sp, r7
 80198d0:	bd90      	pop	{r4, r7, pc}
	...

080198d4 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 80198d4:	b590      	push	{r4, r7, lr}
 80198d6:	b087      	sub	sp, #28
 80198d8:	af00      	add	r7, sp, #0
 80198da:	60f8      	str	r0, [r7, #12]
 80198dc:	60b9      	str	r1, [r7, #8]
 80198de:	607a      	str	r2, [r7, #4]
 80198e0:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	3304      	adds	r3, #4
 80198e6:	4913      	ldr	r1, [pc, #76]	; (8019934 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 80198e8:	4618      	mov	r0, r3
 80198ea:	f7f3 fdc7 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	3304      	adds	r3, #4
 80198f2:	68b9      	ldr	r1, [r7, #8]
 80198f4:	4618      	mov	r0, r3
 80198f6:	f7f3 fdaf 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 80198fa:	6879      	ldr	r1, [r7, #4]
 80198fc:	68f8      	ldr	r0, [r7, #12]
 80198fe:	f7ff fd37 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	1d1c      	adds	r4, r3, #4
 8019906:	f107 0310 	add.w	r3, r7, #16
 801990a:	6839      	ldr	r1, [r7, #0]
 801990c:	4618      	mov	r0, r3
 801990e:	f7f4 f811 	bl	800d934 <_Z10StringFromPKv>
 8019912:	f107 0310 	add.w	r3, r7, #16
 8019916:	4619      	mov	r1, r3
 8019918:	4620      	mov	r0, r4
 801991a:	f7f3 fd9d 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801991e:	f107 0310 	add.w	r3, r7, #16
 8019922:	4618      	mov	r0, r3
 8019924:	f7f3 fd1b 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 8019928:	68fb      	ldr	r3, [r7, #12]
}
 801992a:	4618      	mov	r0, r3
 801992c:	371c      	adds	r7, #28
 801992e:	46bd      	mov	sp, r7
 8019930:	bd90      	pop	{r4, r7, pc}
 8019932:	bf00      	nop
 8019934:	080260e0 	.word	0x080260e0

08019938 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8019938:	b590      	push	{r4, r7, lr}
 801993a:	b087      	sub	sp, #28
 801993c:	af00      	add	r7, sp, #0
 801993e:	60f8      	str	r0, [r7, #12]
 8019940:	60b9      	str	r1, [r7, #8]
 8019942:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019944:	68b9      	ldr	r1, [r7, #8]
 8019946:	68f8      	ldr	r0, [r7, #12]
 8019948:	f7ff fd12 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	1d1c      	adds	r4, r3, #4
 8019950:	f107 0310 	add.w	r3, r7, #16
 8019954:	6879      	ldr	r1, [r7, #4]
 8019956:	4618      	mov	r0, r3
 8019958:	f7f3 ffec 	bl	800d934 <_Z10StringFromPKv>
 801995c:	f107 0310 	add.w	r3, r7, #16
 8019960:	4619      	mov	r1, r3
 8019962:	4620      	mov	r0, r4
 8019964:	f7f3 fd78 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8019968:	f107 0310 	add.w	r3, r7, #16
 801996c:	4618      	mov	r0, r3
 801996e:	f7f3 fcf6 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 8019972:	68fb      	ldr	r3, [r7, #12]
}
 8019974:	4618      	mov	r0, r3
 8019976:	371c      	adds	r7, #28
 8019978:	46bd      	mov	sp, r7
 801997a:	bd90      	pop	{r4, r7, pc}

0801997c <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 801997c:	b590      	push	{r4, r7, lr}
 801997e:	b087      	sub	sp, #28
 8019980:	af00      	add	r7, sp, #0
 8019982:	60f8      	str	r0, [r7, #12]
 8019984:	60b9      	str	r1, [r7, #8]
 8019986:	607a      	str	r2, [r7, #4]
 8019988:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	3304      	adds	r3, #4
 801998e:	4913      	ldr	r1, [pc, #76]	; (80199dc <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8019990:	4618      	mov	r0, r3
 8019992:	f7f3 fd73 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	3304      	adds	r3, #4
 801999a:	68b9      	ldr	r1, [r7, #8]
 801999c:	4618      	mov	r0, r3
 801999e:	f7f3 fd5b 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 80199a2:	6879      	ldr	r1, [r7, #4]
 80199a4:	68f8      	ldr	r0, [r7, #12]
 80199a6:	f7ff fce3 	bl	8019370 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	1d1c      	adds	r4, r3, #4
 80199ae:	f107 0310 	add.w	r3, r7, #16
 80199b2:	6839      	ldr	r1, [r7, #0]
 80199b4:	4618      	mov	r0, r3
 80199b6:	f7f3 ffbd 	bl	800d934 <_Z10StringFromPKv>
 80199ba:	f107 0310 	add.w	r3, r7, #16
 80199be:	4619      	mov	r1, r3
 80199c0:	4620      	mov	r0, r4
 80199c2:	f7f3 fd49 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 80199c6:	f107 0310 	add.w	r3, r7, #16
 80199ca:	4618      	mov	r0, r3
 80199cc:	f7f3 fcc7 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 80199d0:	68fb      	ldr	r3, [r7, #12]
}
 80199d2:	4618      	mov	r0, r3
 80199d4:	371c      	adds	r7, #28
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bd90      	pop	{r4, r7, pc}
 80199da:	bf00      	nop
 80199dc:	080260e0 	.word	0x080260e0

080199e0 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 80199e0:	b480      	push	{r7}
 80199e2:	b083      	sub	sp, #12
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
    return false;
 80199e8:	2300      	movs	r3, #0
}
 80199ea:	4618      	mov	r0, r3
 80199ec:	370c      	adds	r7, #12
 80199ee:	46bd      	mov	sp, r7
 80199f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199f4:	4770      	bx	lr
	...

080199f8 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b084      	sub	sp, #16
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
 8019a00:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 8019a02:	f107 0308 	add.w	r3, r7, #8
 8019a06:	4909      	ldr	r1, [pc, #36]	; (8019a2c <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8019a08:	4618      	mov	r0, r3
 8019a0a:	f7f3 f8f0 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 8019a0e:	f107 0308 	add.w	r3, r7, #8
 8019a12:	4619      	mov	r1, r3
 8019a14:	6878      	ldr	r0, [r7, #4]
 8019a16:	f003 fe0f 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019a1a:	f107 0308 	add.w	r3, r7, #8
 8019a1e:	4618      	mov	r0, r3
 8019a20:	f7f3 fc9d 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 8019a24:	6878      	ldr	r0, [r7, #4]
 8019a26:	3710      	adds	r7, #16
 8019a28:	46bd      	mov	sp, r7
 8019a2a:	bd80      	pop	{r7, pc}
 8019a2c:	08025fb4 	.word	0x08025fb4

08019a30 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8019a30:	b480      	push	{r7}
 8019a32:	b083      	sub	sp, #12
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	6078      	str	r0, [r7, #4]
    return 0;
 8019a38:	2300      	movs	r3, #0
}
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	370c      	adds	r7, #12
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a44:	4770      	bx	lr

08019a46 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8019a46:	b480      	push	{r7}
 8019a48:	b083      	sub	sp, #12
 8019a4a:	af00      	add	r7, sp, #0
 8019a4c:	6078      	str	r0, [r7, #4]
    return 0;
 8019a4e:	2300      	movs	r3, #0
}
 8019a50:	4618      	mov	r0, r3
 8019a52:	370c      	adds	r7, #12
 8019a54:	46bd      	mov	sp, r7
 8019a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a5a:	4770      	bx	lr

08019a5c <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8019a5c:	b480      	push	{r7}
 8019a5e:	b083      	sub	sp, #12
 8019a60:	af00      	add	r7, sp, #0
 8019a62:	6078      	str	r0, [r7, #4]
 8019a64:	6039      	str	r1, [r7, #0]
    return 0;
 8019a66:	2300      	movs	r3, #0
}
 8019a68:	4618      	mov	r0, r3
 8019a6a:	370c      	adds	r7, #12
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a72:	4770      	bx	lr

08019a74 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8019a74:	b480      	push	{r7}
 8019a76:	b083      	sub	sp, #12
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
 8019a7c:	6039      	str	r1, [r7, #0]
    return 0;
 8019a7e:	2300      	movs	r3, #0
}
 8019a80:	4618      	mov	r0, r3
 8019a82:	370c      	adds	r7, #12
 8019a84:	46bd      	mov	sp, r7
 8019a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8a:	4770      	bx	lr

08019a8c <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8019a8c:	b5b0      	push	{r4, r5, r7, lr}
 8019a8e:	b084      	sub	sp, #16
 8019a90:	af02      	add	r7, sp, #8
 8019a92:	6078      	str	r0, [r7, #4]
 8019a94:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8019a96:	f7fa fc8d 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8019a9a:	4604      	mov	r4, r0
 8019a9c:	6823      	ldr	r3, [r4, #0]
 8019a9e:	3368      	adds	r3, #104	; 0x68
 8019aa0:	681d      	ldr	r5, [r3, #0]
 8019aa2:	f7fa fc97 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	9300      	str	r3, [sp, #0]
 8019aaa:	f240 3375 	movw	r3, #885	; 0x375
 8019aae:	4a06      	ldr	r2, [pc, #24]	; (8019ac8 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8019ab0:	4906      	ldr	r1, [pc, #24]	; (8019acc <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8019ab2:	4620      	mov	r0, r4
 8019ab4:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019ab6:	2100      	movs	r1, #0
 8019ab8:	6878      	ldr	r0, [r7, #4]
 8019aba:	f7f1 f8cf 	bl	800ac5c <_ZN17cpputest_longlongC1Ei>
}
 8019abe:	6878      	ldr	r0, [r7, #4]
 8019ac0:	3708      	adds	r7, #8
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8019ac6:	bf00      	nop
 8019ac8:	08025fcc 	.word	0x08025fcc
 8019acc:	08026014 	.word	0x08026014

08019ad0 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8019ad0:	b5b0      	push	{r4, r5, r7, lr}
 8019ad2:	b084      	sub	sp, #16
 8019ad4:	af02      	add	r7, sp, #8
 8019ad6:	6078      	str	r0, [r7, #4]
 8019ad8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8019ada:	f7fa fc6b 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8019ade:	4604      	mov	r4, r0
 8019ae0:	6823      	ldr	r3, [r4, #0]
 8019ae2:	3368      	adds	r3, #104	; 0x68
 8019ae4:	681d      	ldr	r5, [r3, #0]
 8019ae6:	f7fa fc75 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019aea:	4603      	mov	r3, r0
 8019aec:	9300      	str	r3, [sp, #0]
 8019aee:	f240 337b 	movw	r3, #891	; 0x37b
 8019af2:	4a06      	ldr	r2, [pc, #24]	; (8019b0c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8019af4:	4906      	ldr	r1, [pc, #24]	; (8019b10 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 8019af6:	4620      	mov	r0, r4
 8019af8:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019afa:	2100      	movs	r1, #0
 8019afc:	6878      	ldr	r0, [r7, #4]
 8019afe:	f7f1 f8b9 	bl	800ac74 <_ZN18cpputest_ulonglongC1Ei>
}
 8019b02:	6878      	ldr	r0, [r7, #4]
 8019b04:	3708      	adds	r7, #8
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bdb0      	pop	{r4, r5, r7, pc}
 8019b0a:	bf00      	nop
 8019b0c:	08025fcc 	.word	0x08025fcc
 8019b10:	08025fe8 	.word	0x08025fe8

08019b14 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8019b14:	b5b0      	push	{r4, r5, r7, lr}
 8019b16:	b086      	sub	sp, #24
 8019b18:	af02      	add	r7, sp, #8
 8019b1a:	60f8      	str	r0, [r7, #12]
 8019b1c:	60b9      	str	r1, [r7, #8]
 8019b1e:	4639      	mov	r1, r7
 8019b20:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019b24:	f7fa fc46 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8019b28:	4604      	mov	r4, r0
 8019b2a:	6823      	ldr	r3, [r4, #0]
 8019b2c:	3368      	adds	r3, #104	; 0x68
 8019b2e:	681d      	ldr	r5, [r3, #0]
 8019b30:	f7fa fc50 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019b34:	4603      	mov	r3, r0
 8019b36:	9300      	str	r3, [sp, #0]
 8019b38:	f240 3381 	movw	r3, #897	; 0x381
 8019b3c:	4a05      	ldr	r2, [pc, #20]	; (8019b54 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8019b3e:	4906      	ldr	r1, [pc, #24]	; (8019b58 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8019b40:	4620      	mov	r0, r4
 8019b42:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019b44:	2100      	movs	r1, #0
 8019b46:	68f8      	ldr	r0, [r7, #12]
 8019b48:	f7f1 f894 	bl	800ac74 <_ZN18cpputest_ulonglongC1Ei>
}
 8019b4c:	68f8      	ldr	r0, [r7, #12]
 8019b4e:	3710      	adds	r7, #16
 8019b50:	46bd      	mov	sp, r7
 8019b52:	bdb0      	pop	{r4, r5, r7, pc}
 8019b54:	08025fcc 	.word	0x08025fcc
 8019b58:	08025fe8 	.word	0x08025fe8

08019b5c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8019b5c:	b5b0      	push	{r4, r5, r7, lr}
 8019b5e:	b086      	sub	sp, #24
 8019b60:	af02      	add	r7, sp, #8
 8019b62:	60f8      	str	r0, [r7, #12]
 8019b64:	60b9      	str	r1, [r7, #8]
 8019b66:	4639      	mov	r1, r7
 8019b68:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019b6c:	f7fa fc22 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 8019b70:	4604      	mov	r4, r0
 8019b72:	6823      	ldr	r3, [r4, #0]
 8019b74:	3368      	adds	r3, #104	; 0x68
 8019b76:	681d      	ldr	r5, [r3, #0]
 8019b78:	f7fa fc2c 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	9300      	str	r3, [sp, #0]
 8019b80:	f240 3387 	movw	r3, #903	; 0x387
 8019b84:	4a05      	ldr	r2, [pc, #20]	; (8019b9c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8019b86:	4906      	ldr	r1, [pc, #24]	; (8019ba0 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8019b88:	4620      	mov	r0, r4
 8019b8a:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019b8c:	2100      	movs	r1, #0
 8019b8e:	68f8      	ldr	r0, [r7, #12]
 8019b90:	f7f1 f864 	bl	800ac5c <_ZN17cpputest_longlongC1Ei>
}
 8019b94:	68f8      	ldr	r0, [r7, #12]
 8019b96:	3710      	adds	r7, #16
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8019b9c:	08025fcc 	.word	0x08025fcc
 8019ba0:	08026014 	.word	0x08026014

08019ba4 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8019ba4:	b480      	push	{r7}
 8019ba6:	b083      	sub	sp, #12
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]
    return false;
 8019bac:	2300      	movs	r3, #0
}
 8019bae:	4618      	mov	r0, r3
 8019bb0:	370c      	adds	r7, #12
 8019bb2:	46bd      	mov	sp, r7
 8019bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb8:	4770      	bx	lr

08019bba <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8019bba:	b480      	push	{r7}
 8019bbc:	b083      	sub	sp, #12
 8019bbe:	af00      	add	r7, sp, #0
 8019bc0:	6078      	str	r0, [r7, #4]
 8019bc2:	460b      	mov	r3, r1
 8019bc4:	70fb      	strb	r3, [r7, #3]
    return false;
 8019bc6:	2300      	movs	r3, #0
}
 8019bc8:	4618      	mov	r0, r3
 8019bca:	370c      	adds	r7, #12
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd2:	4770      	bx	lr

08019bd4 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8019bd4:	b480      	push	{r7}
 8019bd6:	b083      	sub	sp, #12
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	6078      	str	r0, [r7, #4]
    return 0;
 8019bdc:	2300      	movs	r3, #0
}
 8019bde:	4618      	mov	r0, r3
 8019be0:	370c      	adds	r7, #12
 8019be2:	46bd      	mov	sp, r7
 8019be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be8:	4770      	bx	lr

08019bea <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8019bea:	b480      	push	{r7}
 8019bec:	b083      	sub	sp, #12
 8019bee:	af00      	add	r7, sp, #0
 8019bf0:	6078      	str	r0, [r7, #4]
    return 0.0;
 8019bf2:	f04f 0200 	mov.w	r2, #0
 8019bf6:	f04f 0300 	mov.w	r3, #0
 8019bfa:	ec43 2b17 	vmov	d7, r2, r3
}
 8019bfe:	eeb0 0a47 	vmov.f32	s0, s14
 8019c02:	eef0 0a67 	vmov.f32	s1, s15
 8019c06:	370c      	adds	r7, #12
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0e:	4770      	bx	lr

08019c10 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b084      	sub	sp, #16
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	60f8      	str	r0, [r7, #12]
 8019c18:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	3398      	adds	r3, #152	; 0x98
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	68f8      	ldr	r0, [r7, #12]
 8019c26:	4798      	blx	r3
 8019c28:	eeb0 7a40 	vmov.f32	s14, s0
 8019c2c:	eef0 7a60 	vmov.f32	s15, s1
}
 8019c30:	eeb0 0a47 	vmov.f32	s0, s14
 8019c34:	eef0 0a67 	vmov.f32	s1, s15
 8019c38:	3710      	adds	r7, #16
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}

08019c3e <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8019c3e:	b480      	push	{r7}
 8019c40:	b083      	sub	sp, #12
 8019c42:	af00      	add	r7, sp, #0
 8019c44:	6078      	str	r0, [r7, #4]
    return 0;
 8019c46:	2300      	movs	r3, #0
}
 8019c48:	4618      	mov	r0, r3
 8019c4a:	370c      	adds	r7, #12
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c52:	4770      	bx	lr

08019c54 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8019c54:	b480      	push	{r7}
 8019c56:	b083      	sub	sp, #12
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019c5c:	2300      	movs	r3, #0
}
 8019c5e:	4618      	mov	r0, r3
 8019c60:	370c      	adds	r7, #12
 8019c62:	46bd      	mov	sp, r7
 8019c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c68:	4770      	bx	lr

08019c6a <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8019c6a:	b480      	push	{r7}
 8019c6c:	b083      	sub	sp, #12
 8019c6e:	af00      	add	r7, sp, #0
 8019c70:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019c72:	2300      	movs	r3, #0
}
 8019c74:	4618      	mov	r0, r3
 8019c76:	370c      	adds	r7, #12
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7e:	4770      	bx	lr

08019c80 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8019c80:	b480      	push	{r7}
 8019c82:	b083      	sub	sp, #12
 8019c84:	af00      	add	r7, sp, #0
 8019c86:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019c88:	2300      	movs	r3, #0
}
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	370c      	adds	r7, #12
 8019c8e:	46bd      	mov	sp, r7
 8019c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c94:	4770      	bx	lr

08019c96 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8019c96:	b580      	push	{r7, lr}
 8019c98:	b082      	sub	sp, #8
 8019c9a:	af00      	add	r7, sp, #0
 8019c9c:	6078      	str	r0, [r7, #4]
 8019c9e:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	33a8      	adds	r3, #168	; 0xa8
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	6878      	ldr	r0, [r7, #4]
 8019caa:	4798      	blx	r3
 8019cac:	4603      	mov	r3, r0
}
 8019cae:	4618      	mov	r0, r3
 8019cb0:	3708      	adds	r7, #8
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	bd80      	pop	{r7, pc}

08019cb6 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8019cb6:	b580      	push	{r7, lr}
 8019cb8:	b082      	sub	sp, #8
 8019cba:	af00      	add	r7, sp, #0
 8019cbc:	6078      	str	r0, [r7, #4]
 8019cbe:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	33a0      	adds	r3, #160	; 0xa0
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	6878      	ldr	r0, [r7, #4]
 8019cca:	4798      	blx	r3
 8019ccc:	4603      	mov	r3, r0
}
 8019cce:	4618      	mov	r0, r3
 8019cd0:	3708      	adds	r7, #8
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	bd80      	pop	{r7, pc}

08019cd6 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8019cd6:	b580      	push	{r7, lr}
 8019cd8:	b082      	sub	sp, #8
 8019cda:	af00      	add	r7, sp, #0
 8019cdc:	6078      	str	r0, [r7, #4]
 8019cde:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	33b0      	adds	r3, #176	; 0xb0
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	6878      	ldr	r0, [r7, #4]
 8019cea:	4798      	blx	r3
 8019cec:	4603      	mov	r3, r0
}
 8019cee:	4618      	mov	r0, r3
 8019cf0:	3708      	adds	r7, #8
 8019cf2:	46bd      	mov	sp, r7
 8019cf4:	bd80      	pop	{r7, pc}
	...

08019cf8 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8019cf8:	b480      	push	{r7}
 8019cfa:	b083      	sub	sp, #12
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
    return "";
 8019d00:	4b03      	ldr	r3, [pc, #12]	; (8019d10 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 8019d02:	4618      	mov	r0, r3
 8019d04:	370c      	adds	r7, #12
 8019d06:	46bd      	mov	sp, r7
 8019d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0c:	4770      	bx	lr
 8019d0e:	bf00      	nop
 8019d10:	08025fb4 	.word	0x08025fb4

08019d14 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b082      	sub	sp, #8
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
 8019d1c:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	3394      	adds	r3, #148	; 0x94
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	6878      	ldr	r0, [r7, #4]
 8019d28:	4798      	blx	r3
 8019d2a:	4603      	mov	r3, r0
}
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	3708      	adds	r7, #8
 8019d30:	46bd      	mov	sp, r7
 8019d32:	bd80      	pop	{r7, pc}

08019d34 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8019d34:	b480      	push	{r7}
 8019d36:	b083      	sub	sp, #12
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	6078      	str	r0, [r7, #4]
 8019d3c:	6039      	str	r1, [r7, #0]
    return 0;
 8019d3e:	2300      	movs	r3, #0
}
 8019d40:	4618      	mov	r0, r3
 8019d42:	370c      	adds	r7, #12
 8019d44:	46bd      	mov	sp, r7
 8019d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4a:	4770      	bx	lr

08019d4c <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b082      	sub	sp, #8
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	6078      	str	r0, [r7, #4]
 8019d54:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	3388      	adds	r3, #136	; 0x88
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	6878      	ldr	r0, [r7, #4]
 8019d60:	4798      	blx	r3
 8019d62:	4603      	mov	r3, r0
}
 8019d64:	4618      	mov	r0, r3
 8019d66:	3708      	adds	r7, #8
 8019d68:	46bd      	mov	sp, r7
 8019d6a:	bd80      	pop	{r7, pc}

08019d6c <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8019d6c:	b590      	push	{r4, r7, lr}
 8019d6e:	b085      	sub	sp, #20
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]
 8019d74:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	3304      	adds	r3, #4
 8019d7a:	490e      	ldr	r1, [pc, #56]	; (8019db4 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	f7f3 fb7d 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	1d1c      	adds	r4, r3, #4
 8019d86:	f107 0308 	add.w	r3, r7, #8
 8019d8a:	6839      	ldr	r1, [r7, #0]
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	f7f3 fdd1 	bl	800d934 <_Z10StringFromPKv>
 8019d92:	f107 0308 	add.w	r3, r7, #8
 8019d96:	4619      	mov	r1, r3
 8019d98:	4620      	mov	r0, r4
 8019d9a:	f7f3 fb5d 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 8019d9e:	f107 0308 	add.w	r3, r7, #8
 8019da2:	4618      	mov	r0, r3
 8019da4:	f7f3 fadb 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return *this;
 8019da8:	687b      	ldr	r3, [r7, #4]
}
 8019daa:	4618      	mov	r0, r3
 8019dac:	3714      	adds	r7, #20
 8019dae:	46bd      	mov	sp, r7
 8019db0:	bd90      	pop	{r4, r7, pc}
 8019db2:	bf00      	nop
 8019db4:	080260e8 	.word	0x080260e8

08019db8 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8019db8:	b598      	push	{r3, r4, r7, lr}
 8019dba:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8019dbc:	4b09      	ldr	r3, [pc, #36]	; (8019de4 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d10b      	bne.n	8019ddc <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8019dc4:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8019dc8:	4907      	ldr	r1, [pc, #28]	; (8019de8 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8019dca:	200c      	movs	r0, #12
 8019dcc:	f7f0 fb4c 	bl	800a468 <_ZnwjPKci>
 8019dd0:	4604      	mov	r4, r0
 8019dd2:	4620      	mov	r0, r4
 8019dd4:	f7ff fa4c 	bl	8019270 <_ZN19MockActualCallTraceC1Ev>
 8019dd8:	4b02      	ldr	r3, [pc, #8]	; (8019de4 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019dda:	601c      	str	r4, [r3, #0]
    return *instance_;
 8019ddc:	4b01      	ldr	r3, [pc, #4]	; (8019de4 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019dde:	681b      	ldr	r3, [r3, #0]
}
 8019de0:	4618      	mov	r0, r3
 8019de2:	bd98      	pop	{r3, r4, r7, pc}
 8019de4:	20000eb0 	.word	0x20000eb0
 8019de8:	08025fcc 	.word	0x08025fcc

08019dec <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	af00      	add	r7, sp, #0
    delete instance_;
 8019df0:	4b06      	ldr	r3, [pc, #24]	; (8019e0c <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d004      	beq.n	8019e02 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8019df8:	681a      	ldr	r2, [r3, #0]
 8019dfa:	3204      	adds	r2, #4
 8019dfc:	6812      	ldr	r2, [r2, #0]
 8019dfe:	4618      	mov	r0, r3
 8019e00:	4790      	blx	r2
    instance_ = NULLPTR;
 8019e02:	4b02      	ldr	r3, [pc, #8]	; (8019e0c <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8019e04:	2200      	movs	r2, #0
 8019e06:	601a      	str	r2, [r3, #0]
}
 8019e08:	bf00      	nop
 8019e0a:	bd80      	pop	{r7, pc}
 8019e0c:	20000eb0 	.word	0x20000eb0

08019e10 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b082      	sub	sp, #8
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	6078      	str	r0, [r7, #4]
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	f7fd fe9a 	bl	8017b54 <_ZN14MockActualCallC1Ev>
 8019e20:	4a03      	ldr	r2, [pc, #12]	; (8019e30 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	601a      	str	r2, [r3, #0]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	4618      	mov	r0, r3
 8019e2a:	3708      	adds	r7, #8
 8019e2c:	46bd      	mov	sp, r7
 8019e2e:	bd80      	pop	{r7, pc}
 8019e30:	08028d34 	.word	0x08028d34

08019e34 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8019e34:	b580      	push	{r7, lr}
 8019e36:	af00      	add	r7, sp, #0
 8019e38:	4801      	ldr	r0, [pc, #4]	; (8019e40 <__tcf_0+0xc>)
 8019e3a:	f000 f831 	bl	8019ea0 <_ZN21MockIgnoredActualCallD1Ev>
 8019e3e:	bd80      	pop	{r7, pc}
 8019e40:	20000eb4 	.word	0x20000eb4

08019e44 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8019e44:	b580      	push	{r7, lr}
 8019e46:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8019e48:	4b12      	ldr	r3, [pc, #72]	; (8019e94 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019e4a:	781b      	ldrb	r3, [r3, #0]
 8019e4c:	f3bf 8f5b 	dmb	ish
 8019e50:	b2db      	uxtb	r3, r3
 8019e52:	f003 0301 	and.w	r3, r3, #1
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	bf0c      	ite	eq
 8019e5a:	2301      	moveq	r3, #1
 8019e5c:	2300      	movne	r3, #0
 8019e5e:	b2db      	uxtb	r3, r3
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d013      	beq.n	8019e8c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8019e64:	480b      	ldr	r0, [pc, #44]	; (8019e94 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019e66:	f005 fd83 	bl	801f970 <__cxa_guard_acquire>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	bf14      	ite	ne
 8019e70:	2301      	movne	r3, #1
 8019e72:	2300      	moveq	r3, #0
 8019e74:	b2db      	uxtb	r3, r3
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d008      	beq.n	8019e8c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8019e7a:	4807      	ldr	r0, [pc, #28]	; (8019e98 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8019e7c:	f7ff ffc8 	bl	8019e10 <_ZN21MockIgnoredActualCallC1Ev>
 8019e80:	4804      	ldr	r0, [pc, #16]	; (8019e94 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019e82:	f005 fd81 	bl	801f988 <__cxa_guard_release>
 8019e86:	4805      	ldr	r0, [pc, #20]	; (8019e9c <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8019e88:	f005 fda5 	bl	801f9d6 <atexit>
    return call;
 8019e8c:	4b02      	ldr	r3, [pc, #8]	; (8019e98 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 8019e8e:	4618      	mov	r0, r3
 8019e90:	bd80      	pop	{r7, pc}
 8019e92:	bf00      	nop
 8019e94:	20000eb8 	.word	0x20000eb8
 8019e98:	20000eb4 	.word	0x20000eb4
 8019e9c:	08019e35 	.word	0x08019e35

08019ea0 <_ZN21MockIgnoredActualCallD1Ev>:
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b082      	sub	sp, #8
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
 8019ea8:	4a05      	ldr	r2, [pc, #20]	; (8019ec0 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	601a      	str	r2, [r3, #0]
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	f7fd fe5f 	bl	8017b74 <_ZN14MockActualCallD1Ev>
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	4618      	mov	r0, r3
 8019eba:	3708      	adds	r7, #8
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	bd80      	pop	{r7, pc}
 8019ec0:	08028d34 	.word	0x08028d34

08019ec4 <_ZN21MockIgnoredActualCallD0Ev>:
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b082      	sub	sp, #8
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
 8019ecc:	6878      	ldr	r0, [r7, #4]
 8019ece:	f7ff ffe7 	bl	8019ea0 <_ZN21MockIgnoredActualCallD1Ev>
 8019ed2:	2104      	movs	r1, #4
 8019ed4:	6878      	ldr	r0, [r7, #4]
 8019ed6:	f7f0 fadb 	bl	800a490 <_ZdlPvj>
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	4618      	mov	r0, r3
 8019ede:	3708      	adds	r7, #8
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bd80      	pop	{r7, pc}

08019ee4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b082      	sub	sp, #8
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
 8019eec:	4a05      	ldr	r2, [pc, #20]	; (8019f04 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	601a      	str	r2, [r3, #0]
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f7f0 fefd 	bl	800acf4 <_ZN11MockFailureD1Ev>
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	4618      	mov	r0, r3
 8019efe:	3708      	adds	r7, #8
 8019f00:	46bd      	mov	sp, r7
 8019f02:	bd80      	pop	{r7, pc}
 8019f04:	08028c2c 	.word	0x08028c2c

08019f08 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b082      	sub	sp, #8
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
 8019f10:	6878      	ldr	r0, [r7, #4]
 8019f12:	f7ff ffe7 	bl	8019ee4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 8019f16:	2134      	movs	r1, #52	; 0x34
 8019f18:	6878      	ldr	r0, [r7, #4]
 8019f1a:	f7f0 fab9 	bl	800a490 <_ZdlPvj>
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	4618      	mov	r0, r3
 8019f22:	3708      	adds	r7, #8
 8019f24:	46bd      	mov	sp, r7
 8019f26:	bd80      	pop	{r7, pc}

08019f28 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b082      	sub	sp, #8
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
 8019f30:	4a05      	ldr	r2, [pc, #20]	; (8019f48 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	601a      	str	r2, [r3, #0]
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	4618      	mov	r0, r3
 8019f3a:	f7f0 fedb 	bl	800acf4 <_ZN11MockFailureD1Ev>
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	4618      	mov	r0, r3
 8019f42:	3708      	adds	r7, #8
 8019f44:	46bd      	mov	sp, r7
 8019f46:	bd80      	pop	{r7, pc}
 8019f48:	08028d08 	.word	0x08028d08

08019f4c <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8019f4c:	b580      	push	{r7, lr}
 8019f4e:	b082      	sub	sp, #8
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	6078      	str	r0, [r7, #4]
 8019f54:	6878      	ldr	r0, [r7, #4]
 8019f56:	f7ff ffe7 	bl	8019f28 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8019f5a:	2134      	movs	r1, #52	; 0x34
 8019f5c:	6878      	ldr	r0, [r7, #4]
 8019f5e:	f7f0 fa97 	bl	800a490 <_ZdlPvj>
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	4618      	mov	r0, r3
 8019f66:	3708      	adds	r7, #8
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	bd80      	pop	{r7, pc}

08019f6c <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b082      	sub	sp, #8
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	6078      	str	r0, [r7, #4]
 8019f74:	4a05      	ldr	r2, [pc, #20]	; (8019f8c <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	601a      	str	r2, [r3, #0]
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	f7f0 feb9 	bl	800acf4 <_ZN11MockFailureD1Ev>
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	4618      	mov	r0, r3
 8019f86:	3708      	adds	r7, #8
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	bd80      	pop	{r7, pc}
 8019f8c:	08028cdc 	.word	0x08028cdc

08019f90 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 8019f90:	b580      	push	{r7, lr}
 8019f92:	b082      	sub	sp, #8
 8019f94:	af00      	add	r7, sp, #0
 8019f96:	6078      	str	r0, [r7, #4]
 8019f98:	6878      	ldr	r0, [r7, #4]
 8019f9a:	f7ff ffe7 	bl	8019f6c <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8019f9e:	2134      	movs	r1, #52	; 0x34
 8019fa0:	6878      	ldr	r0, [r7, #4]
 8019fa2:	f7f0 fa75 	bl	800a490 <_ZdlPvj>
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	4618      	mov	r0, r3
 8019faa:	3708      	adds	r7, #8
 8019fac:	46bd      	mov	sp, r7
 8019fae:	bd80      	pop	{r7, pc}

08019fb0 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b082      	sub	sp, #8
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
 8019fb8:	4a05      	ldr	r2, [pc, #20]	; (8019fd0 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	601a      	str	r2, [r3, #0]
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f7f0 fe97 	bl	800acf4 <_ZN11MockFailureD1Ev>
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	4618      	mov	r0, r3
 8019fca:	3708      	adds	r7, #8
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	bd80      	pop	{r7, pc}
 8019fd0:	08028cb0 	.word	0x08028cb0

08019fd4 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b082      	sub	sp, #8
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	6078      	str	r0, [r7, #4]
 8019fdc:	6878      	ldr	r0, [r7, #4]
 8019fde:	f7ff ffe7 	bl	8019fb0 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8019fe2:	2134      	movs	r1, #52	; 0x34
 8019fe4:	6878      	ldr	r0, [r7, #4]
 8019fe6:	f7f0 fa53 	bl	800a490 <_ZdlPvj>
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	4618      	mov	r0, r3
 8019fee:	3708      	adds	r7, #8
 8019ff0:	46bd      	mov	sp, r7
 8019ff2:	bd80      	pop	{r7, pc}

08019ff4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b082      	sub	sp, #8
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	6078      	str	r0, [r7, #4]
 8019ffc:	4a05      	ldr	r2, [pc, #20]	; (801a014 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	601a      	str	r2, [r3, #0]
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	4618      	mov	r0, r3
 801a006:	f7f0 fe75 	bl	800acf4 <_ZN11MockFailureD1Ev>
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	4618      	mov	r0, r3
 801a00e:	3708      	adds	r7, #8
 801a010:	46bd      	mov	sp, r7
 801a012:	bd80      	pop	{r7, pc}
 801a014:	08028c58 	.word	0x08028c58

0801a018 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801a018:	b580      	push	{r7, lr}
 801a01a:	b082      	sub	sp, #8
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	6078      	str	r0, [r7, #4]
 801a020:	6878      	ldr	r0, [r7, #4]
 801a022:	f7ff ffe7 	bl	8019ff4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801a026:	2134      	movs	r1, #52	; 0x34
 801a028:	6878      	ldr	r0, [r7, #4]
 801a02a:	f7f0 fa31 	bl	800a490 <_ZdlPvj>
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	4618      	mov	r0, r3
 801a032:	3708      	adds	r7, #8
 801a034:	46bd      	mov	sp, r7
 801a036:	bd80      	pop	{r7, pc}

0801a038 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801a038:	b580      	push	{r7, lr}
 801a03a:	b082      	sub	sp, #8
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	6078      	str	r0, [r7, #4]
 801a040:	4a05      	ldr	r2, [pc, #20]	; (801a058 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	601a      	str	r2, [r3, #0]
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	4618      	mov	r0, r3
 801a04a:	f7f0 fe53 	bl	800acf4 <_ZN11MockFailureD1Ev>
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	4618      	mov	r0, r3
 801a052:	3708      	adds	r7, #8
 801a054:	46bd      	mov	sp, r7
 801a056:	bd80      	pop	{r7, pc}
 801a058:	08028c84 	.word	0x08028c84

0801a05c <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b082      	sub	sp, #8
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
 801a064:	6878      	ldr	r0, [r7, #4]
 801a066:	f7ff ffe7 	bl	801a038 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801a06a:	2134      	movs	r1, #52	; 0x34
 801a06c:	6878      	ldr	r0, [r7, #4]
 801a06e:	f7f0 fa0f 	bl	800a490 <_ZdlPvj>
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	4618      	mov	r0, r3
 801a076:	3708      	adds	r7, #8
 801a078:	46bd      	mov	sp, r7
 801a07a:	bd80      	pop	{r7, pc}

0801a07c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b082      	sub	sp, #8
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
 801a084:	4a05      	ldr	r2, [pc, #20]	; (801a09c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	601a      	str	r2, [r3, #0]
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	4618      	mov	r0, r3
 801a08e:	f7f0 fe31 	bl	800acf4 <_ZN11MockFailureD1Ev>
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	4618      	mov	r0, r3
 801a096:	3708      	adds	r7, #8
 801a098:	46bd      	mov	sp, r7
 801a09a:	bd80      	pop	{r7, pc}
 801a09c:	08028bd4 	.word	0x08028bd4

0801a0a0 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b082      	sub	sp, #8
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
 801a0a8:	6878      	ldr	r0, [r7, #4]
 801a0aa:	f7ff ffe7 	bl	801a07c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801a0ae:	2134      	movs	r1, #52	; 0x34
 801a0b0:	6878      	ldr	r0, [r7, #4]
 801a0b2:	f7f0 f9ed 	bl	800a490 <_ZdlPvj>
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	3708      	adds	r7, #8
 801a0bc:	46bd      	mov	sp, r7
 801a0be:	bd80      	pop	{r7, pc}

0801a0c0 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b082      	sub	sp, #8
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
 801a0c8:	4a05      	ldr	r2, [pc, #20]	; (801a0e0 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	601a      	str	r2, [r3, #0]
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	f7f0 fe0f 	bl	800acf4 <_ZN11MockFailureD1Ev>
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	4618      	mov	r0, r3
 801a0da:	3708      	adds	r7, #8
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	bd80      	pop	{r7, pc}
 801a0e0:	08028c00 	.word	0x08028c00

0801a0e4 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801a0e4:	b580      	push	{r7, lr}
 801a0e6:	b082      	sub	sp, #8
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	6078      	str	r0, [r7, #4]
 801a0ec:	6878      	ldr	r0, [r7, #4]
 801a0ee:	f7ff ffe7 	bl	801a0c0 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801a0f2:	2134      	movs	r1, #52	; 0x34
 801a0f4:	6878      	ldr	r0, [r7, #4]
 801a0f6:	f7f0 f9cb 	bl	800a490 <_ZdlPvj>
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	3708      	adds	r7, #8
 801a100:	46bd      	mov	sp, r7
 801a102:	bd80      	pop	{r7, pc}

0801a104 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801a104:	b580      	push	{r7, lr}
 801a106:	b082      	sub	sp, #8
 801a108:	af00      	add	r7, sp, #0
 801a10a:	6078      	str	r0, [r7, #4]
 801a10c:	6039      	str	r1, [r7, #0]
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	3310      	adds	r3, #16
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	683a      	ldr	r2, [r7, #0]
 801a118:	6839      	ldr	r1, [r7, #0]
 801a11a:	6878      	ldr	r0, [r7, #4]
 801a11c:	4798      	blx	r3
 801a11e:	4603      	mov	r3, r0
 801a120:	4618      	mov	r0, r3
 801a122:	3708      	adds	r7, #8
 801a124:	46bd      	mov	sp, r7
 801a126:	bd80      	pop	{r7, pc}

0801a128 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801a128:	b480      	push	{r7}
 801a12a:	b083      	sub	sp, #12
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	6078      	str	r0, [r7, #4]
 801a130:	6039      	str	r1, [r7, #0]
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	4618      	mov	r0, r3
 801a136:	370c      	adds	r7, #12
 801a138:	46bd      	mov	sp, r7
 801a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a13e:	4770      	bx	lr

0801a140 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801a140:	b480      	push	{r7}
 801a142:	b083      	sub	sp, #12
 801a144:	af00      	add	r7, sp, #0
 801a146:	6078      	str	r0, [r7, #4]
 801a148:	6039      	str	r1, [r7, #0]
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	4618      	mov	r0, r3
 801a14e:	370c      	adds	r7, #12
 801a150:	46bd      	mov	sp, r7
 801a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a156:	4770      	bx	lr

0801a158 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801a158:	b480      	push	{r7}
 801a15a:	b085      	sub	sp, #20
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	60f8      	str	r0, [r7, #12]
 801a160:	60b9      	str	r1, [r7, #8]
 801a162:	607a      	str	r2, [r7, #4]
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	4618      	mov	r0, r3
 801a168:	3714      	adds	r7, #20
 801a16a:	46bd      	mov	sp, r7
 801a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a170:	4770      	bx	lr

0801a172 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801a172:	b480      	push	{r7}
 801a174:	b085      	sub	sp, #20
 801a176:	af00      	add	r7, sp, #0
 801a178:	60f8      	str	r0, [r7, #12]
 801a17a:	60b9      	str	r1, [r7, #8]
 801a17c:	4613      	mov	r3, r2
 801a17e:	71fb      	strb	r3, [r7, #7]
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	4618      	mov	r0, r3
 801a184:	3714      	adds	r7, #20
 801a186:	46bd      	mov	sp, r7
 801a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a18c:	4770      	bx	lr

0801a18e <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801a18e:	b480      	push	{r7}
 801a190:	b085      	sub	sp, #20
 801a192:	af00      	add	r7, sp, #0
 801a194:	60f8      	str	r0, [r7, #12]
 801a196:	60b9      	str	r1, [r7, #8]
 801a198:	607a      	str	r2, [r7, #4]
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	4618      	mov	r0, r3
 801a19e:	3714      	adds	r7, #20
 801a1a0:	46bd      	mov	sp, r7
 801a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a6:	4770      	bx	lr

0801a1a8 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801a1a8:	b480      	push	{r7}
 801a1aa:	b085      	sub	sp, #20
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	60f8      	str	r0, [r7, #12]
 801a1b0:	60b9      	str	r1, [r7, #8]
 801a1b2:	607a      	str	r2, [r7, #4]
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	3714      	adds	r7, #20
 801a1ba:	46bd      	mov	sp, r7
 801a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c0:	4770      	bx	lr

0801a1c2 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801a1c2:	b480      	push	{r7}
 801a1c4:	b085      	sub	sp, #20
 801a1c6:	af00      	add	r7, sp, #0
 801a1c8:	60f8      	str	r0, [r7, #12]
 801a1ca:	60b9      	str	r1, [r7, #8]
 801a1cc:	607a      	str	r2, [r7, #4]
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	3714      	adds	r7, #20
 801a1d4:	46bd      	mov	sp, r7
 801a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1da:	4770      	bx	lr

0801a1dc <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801a1dc:	b480      	push	{r7}
 801a1de:	b085      	sub	sp, #20
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	60f8      	str	r0, [r7, #12]
 801a1e4:	60b9      	str	r1, [r7, #8]
 801a1e6:	607a      	str	r2, [r7, #4]
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	3714      	adds	r7, #20
 801a1ee:	46bd      	mov	sp, r7
 801a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f4:	4770      	bx	lr

0801a1f6 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801a1f6:	b480      	push	{r7}
 801a1f8:	b085      	sub	sp, #20
 801a1fa:	af00      	add	r7, sp, #0
 801a1fc:	60f8      	str	r0, [r7, #12]
 801a1fe:	60b9      	str	r1, [r7, #8]
 801a200:	4639      	mov	r1, r7
 801a202:	e881 000c 	stmia.w	r1, {r2, r3}
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	4618      	mov	r0, r3
 801a20a:	3714      	adds	r7, #20
 801a20c:	46bd      	mov	sp, r7
 801a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a212:	4770      	bx	lr

0801a214 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801a214:	b480      	push	{r7}
 801a216:	b085      	sub	sp, #20
 801a218:	af00      	add	r7, sp, #0
 801a21a:	60f8      	str	r0, [r7, #12]
 801a21c:	60b9      	str	r1, [r7, #8]
 801a21e:	4639      	mov	r1, r7
 801a220:	e881 000c 	stmia.w	r1, {r2, r3}
 801a224:	68fb      	ldr	r3, [r7, #12]
 801a226:	4618      	mov	r0, r3
 801a228:	3714      	adds	r7, #20
 801a22a:	46bd      	mov	sp, r7
 801a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a230:	4770      	bx	lr

0801a232 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801a232:	b480      	push	{r7}
 801a234:	b085      	sub	sp, #20
 801a236:	af00      	add	r7, sp, #0
 801a238:	60f8      	str	r0, [r7, #12]
 801a23a:	60b9      	str	r1, [r7, #8]
 801a23c:	ed87 0b00 	vstr	d0, [r7]
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	4618      	mov	r0, r3
 801a244:	3714      	adds	r7, #20
 801a246:	46bd      	mov	sp, r7
 801a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a24c:	4770      	bx	lr

0801a24e <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801a24e:	b480      	push	{r7}
 801a250:	b087      	sub	sp, #28
 801a252:	af00      	add	r7, sp, #0
 801a254:	6178      	str	r0, [r7, #20]
 801a256:	6139      	str	r1, [r7, #16]
 801a258:	ed87 0b02 	vstr	d0, [r7, #8]
 801a25c:	ed87 1b00 	vstr	d1, [r7]
 801a260:	697b      	ldr	r3, [r7, #20]
 801a262:	4618      	mov	r0, r3
 801a264:	371c      	adds	r7, #28
 801a266:	46bd      	mov	sp, r7
 801a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26c:	4770      	bx	lr

0801a26e <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801a26e:	b480      	push	{r7}
 801a270:	b085      	sub	sp, #20
 801a272:	af00      	add	r7, sp, #0
 801a274:	60f8      	str	r0, [r7, #12]
 801a276:	60b9      	str	r1, [r7, #8]
 801a278:	607a      	str	r2, [r7, #4]
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	4618      	mov	r0, r3
 801a27e:	3714      	adds	r7, #20
 801a280:	46bd      	mov	sp, r7
 801a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a286:	4770      	bx	lr

0801a288 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801a288:	b480      	push	{r7}
 801a28a:	b085      	sub	sp, #20
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	60f8      	str	r0, [r7, #12]
 801a290:	60b9      	str	r1, [r7, #8]
 801a292:	607a      	str	r2, [r7, #4]
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	4618      	mov	r0, r3
 801a298:	3714      	adds	r7, #20
 801a29a:	46bd      	mov	sp, r7
 801a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a0:	4770      	bx	lr

0801a2a2 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801a2a2:	b480      	push	{r7}
 801a2a4:	b085      	sub	sp, #20
 801a2a6:	af00      	add	r7, sp, #0
 801a2a8:	60f8      	str	r0, [r7, #12]
 801a2aa:	60b9      	str	r1, [r7, #8]
 801a2ac:	607a      	str	r2, [r7, #4]
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	3714      	adds	r7, #20
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ba:	4770      	bx	lr

0801a2bc <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801a2bc:	b480      	push	{r7}
 801a2be:	b085      	sub	sp, #20
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	60f8      	str	r0, [r7, #12]
 801a2c4:	60b9      	str	r1, [r7, #8]
 801a2c6:	607a      	str	r2, [r7, #4]
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	3714      	adds	r7, #20
 801a2ce:	46bd      	mov	sp, r7
 801a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d4:	4770      	bx	lr

0801a2d6 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801a2d6:	b480      	push	{r7}
 801a2d8:	b085      	sub	sp, #20
 801a2da:	af00      	add	r7, sp, #0
 801a2dc:	60f8      	str	r0, [r7, #12]
 801a2de:	60b9      	str	r1, [r7, #8]
 801a2e0:	607a      	str	r2, [r7, #4]
 801a2e2:	603b      	str	r3, [r7, #0]
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	4618      	mov	r0, r3
 801a2e8:	3714      	adds	r7, #20
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f0:	4770      	bx	lr

0801a2f2 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801a2f2:	b480      	push	{r7}
 801a2f4:	b085      	sub	sp, #20
 801a2f6:	af00      	add	r7, sp, #0
 801a2f8:	60f8      	str	r0, [r7, #12]
 801a2fa:	60b9      	str	r1, [r7, #8]
 801a2fc:	607a      	str	r2, [r7, #4]
 801a2fe:	603b      	str	r3, [r7, #0]
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	4618      	mov	r0, r3
 801a304:	3714      	adds	r7, #20
 801a306:	46bd      	mov	sp, r7
 801a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a30c:	4770      	bx	lr

0801a30e <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801a30e:	b480      	push	{r7}
 801a310:	b085      	sub	sp, #20
 801a312:	af00      	add	r7, sp, #0
 801a314:	60f8      	str	r0, [r7, #12]
 801a316:	60b9      	str	r1, [r7, #8]
 801a318:	607a      	str	r2, [r7, #4]
 801a31a:	603b      	str	r3, [r7, #0]
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	4618      	mov	r0, r3
 801a320:	3714      	adds	r7, #20
 801a322:	46bd      	mov	sp, r7
 801a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a328:	4770      	bx	lr

0801a32a <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801a32a:	b480      	push	{r7}
 801a32c:	b085      	sub	sp, #20
 801a32e:	af00      	add	r7, sp, #0
 801a330:	60f8      	str	r0, [r7, #12]
 801a332:	60b9      	str	r1, [r7, #8]
 801a334:	607a      	str	r2, [r7, #4]
 801a336:	603b      	str	r3, [r7, #0]
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	4618      	mov	r0, r3
 801a33c:	3714      	adds	r7, #20
 801a33e:	46bd      	mov	sp, r7
 801a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a344:	4770      	bx	lr

0801a346 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801a346:	b480      	push	{r7}
 801a348:	b083      	sub	sp, #12
 801a34a:	af00      	add	r7, sp, #0
 801a34c:	6078      	str	r0, [r7, #4]
 801a34e:	6039      	str	r1, [r7, #0]
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	4618      	mov	r0, r3
 801a354:	370c      	adds	r7, #12
 801a356:	46bd      	mov	sp, r7
 801a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a35c:	4770      	bx	lr

0801a35e <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801a35e:	b480      	push	{r7}
 801a360:	b083      	sub	sp, #12
 801a362:	af00      	add	r7, sp, #0
 801a364:	6078      	str	r0, [r7, #4]
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	4618      	mov	r0, r3
 801a36a:	370c      	adds	r7, #12
 801a36c:	46bd      	mov	sp, r7
 801a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a372:	4770      	bx	lr

0801a374 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801a374:	b480      	push	{r7}
 801a376:	b083      	sub	sp, #12
 801a378:	af00      	add	r7, sp, #0
 801a37a:	6078      	str	r0, [r7, #4]
 801a37c:	460b      	mov	r3, r1
 801a37e:	70fb      	strb	r3, [r7, #3]
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	4618      	mov	r0, r3
 801a384:	370c      	adds	r7, #12
 801a386:	46bd      	mov	sp, r7
 801a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a38c:	4770      	bx	lr

0801a38e <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801a38e:	b480      	push	{r7}
 801a390:	b083      	sub	sp, #12
 801a392:	af00      	add	r7, sp, #0
 801a394:	6078      	str	r0, [r7, #4]
 801a396:	6039      	str	r1, [r7, #0]
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	4618      	mov	r0, r3
 801a39c:	370c      	adds	r7, #12
 801a39e:	46bd      	mov	sp, r7
 801a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a4:	4770      	bx	lr

0801a3a6 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801a3a6:	b480      	push	{r7}
 801a3a8:	b083      	sub	sp, #12
 801a3aa:	af00      	add	r7, sp, #0
 801a3ac:	6078      	str	r0, [r7, #4]
 801a3ae:	6039      	str	r1, [r7, #0]
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	370c      	adds	r7, #12
 801a3b6:	46bd      	mov	sp, r7
 801a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3bc:	4770      	bx	lr

0801a3be <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801a3be:	b480      	push	{r7}
 801a3c0:	b083      	sub	sp, #12
 801a3c2:	af00      	add	r7, sp, #0
 801a3c4:	6078      	str	r0, [r7, #4]
 801a3c6:	6039      	str	r1, [r7, #0]
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	4618      	mov	r0, r3
 801a3cc:	370c      	adds	r7, #12
 801a3ce:	46bd      	mov	sp, r7
 801a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d4:	4770      	bx	lr

0801a3d6 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801a3d6:	b480      	push	{r7}
 801a3d8:	b083      	sub	sp, #12
 801a3da:	af00      	add	r7, sp, #0
 801a3dc:	6078      	str	r0, [r7, #4]
 801a3de:	6039      	str	r1, [r7, #0]
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	370c      	adds	r7, #12
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ec:	4770      	bx	lr

0801a3ee <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801a3ee:	b480      	push	{r7}
 801a3f0:	b085      	sub	sp, #20
 801a3f2:	af00      	add	r7, sp, #0
 801a3f4:	60f8      	str	r0, [r7, #12]
 801a3f6:	1d3b      	adds	r3, r7, #4
 801a3f8:	e883 0006 	stmia.w	r3, {r1, r2}
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	4618      	mov	r0, r3
 801a400:	3714      	adds	r7, #20
 801a402:	46bd      	mov	sp, r7
 801a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a408:	4770      	bx	lr

0801a40a <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801a40a:	b480      	push	{r7}
 801a40c:	b085      	sub	sp, #20
 801a40e:	af00      	add	r7, sp, #0
 801a410:	60f8      	str	r0, [r7, #12]
 801a412:	1d3b      	adds	r3, r7, #4
 801a414:	e883 0006 	stmia.w	r3, {r1, r2}
 801a418:	68fb      	ldr	r3, [r7, #12]
 801a41a:	4618      	mov	r0, r3
 801a41c:	3714      	adds	r7, #20
 801a41e:	46bd      	mov	sp, r7
 801a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a424:	4770      	bx	lr

0801a426 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801a426:	b480      	push	{r7}
 801a428:	b085      	sub	sp, #20
 801a42a:	af00      	add	r7, sp, #0
 801a42c:	60f8      	str	r0, [r7, #12]
 801a42e:	ed87 0b00 	vstr	d0, [r7]
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	4618      	mov	r0, r3
 801a436:	3714      	adds	r7, #20
 801a438:	46bd      	mov	sp, r7
 801a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a43e:	4770      	bx	lr

0801a440 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801a440:	b480      	push	{r7}
 801a442:	b083      	sub	sp, #12
 801a444:	af00      	add	r7, sp, #0
 801a446:	6078      	str	r0, [r7, #4]
 801a448:	6039      	str	r1, [r7, #0]
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	4618      	mov	r0, r3
 801a44e:	370c      	adds	r7, #12
 801a450:	46bd      	mov	sp, r7
 801a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a456:	4770      	bx	lr

0801a458 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801a458:	b480      	push	{r7}
 801a45a:	b083      	sub	sp, #12
 801a45c:	af00      	add	r7, sp, #0
 801a45e:	6078      	str	r0, [r7, #4]
 801a460:	6039      	str	r1, [r7, #0]
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	4618      	mov	r0, r3
 801a466:	370c      	adds	r7, #12
 801a468:	46bd      	mov	sp, r7
 801a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a46e:	4770      	bx	lr

0801a470 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801a470:	b480      	push	{r7}
 801a472:	b083      	sub	sp, #12
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
 801a478:	6039      	str	r1, [r7, #0]
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	4618      	mov	r0, r3
 801a47e:	370c      	adds	r7, #12
 801a480:	46bd      	mov	sp, r7
 801a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a486:	4770      	bx	lr

0801a488 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801a488:	b480      	push	{r7}
 801a48a:	b083      	sub	sp, #12
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
 801a490:	6039      	str	r1, [r7, #0]
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	4618      	mov	r0, r3
 801a496:	370c      	adds	r7, #12
 801a498:	46bd      	mov	sp, r7
 801a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a49e:	4770      	bx	lr

0801a4a0 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801a4a0:	b480      	push	{r7}
 801a4a2:	b083      	sub	sp, #12
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	6078      	str	r0, [r7, #4]
 801a4a8:	6039      	str	r1, [r7, #0]
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	370c      	adds	r7, #12
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b6:	4770      	bx	lr

0801a4b8 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801a4b8:	b480      	push	{r7}
 801a4ba:	b083      	sub	sp, #12
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	4a04      	ldr	r2, [pc, #16]	; (801a4d4 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	601a      	str	r2, [r3, #0]
{
}
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	370c      	adds	r7, #12
 801a4cc:	46bd      	mov	sp, r7
 801a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d2:	4770      	bx	lr
 801a4d4:	080292d8 	.word	0x080292d8

0801a4d8 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801a4d8:	b480      	push	{r7}
 801a4da:	b083      	sub	sp, #12
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	6078      	str	r0, [r7, #4]
 801a4e0:	4a04      	ldr	r2, [pc, #16]	; (801a4f4 <_ZN16MockExpectedCallD1Ev+0x1c>)
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	601a      	str	r2, [r3, #0]
{
}
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	4618      	mov	r0, r3
 801a4ea:	370c      	adds	r7, #12
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f2:	4770      	bx	lr
 801a4f4:	080292d8 	.word	0x080292d8

0801a4f8 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b082      	sub	sp, #8
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
 801a500:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801a502:	683b      	ldr	r3, [r7, #0]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	3358      	adds	r3, #88	; 0x58
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	687a      	ldr	r2, [r7, #4]
 801a50c:	6839      	ldr	r1, [r7, #0]
 801a50e:	4610      	mov	r0, r2
 801a510:	4798      	blx	r3
}
 801a512:	6878      	ldr	r0, [r7, #4]
 801a514:	3708      	adds	r7, #8
 801a516:	46bd      	mov	sp, r7
 801a518:	bd80      	pop	{r7, pc}

0801a51a <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801a51a:	b580      	push	{r7, lr}
 801a51c:	b082      	sub	sp, #8
 801a51e:	af00      	add	r7, sp, #0
 801a520:	6078      	str	r0, [r7, #4]
 801a522:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	3304      	adds	r3, #4
 801a528:	6839      	ldr	r1, [r7, #0]
 801a52a:	4618      	mov	r0, r3
 801a52c:	f7f2 fbcb 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
}
 801a530:	bf00      	nop
 801a532:	3708      	adds	r7, #8
 801a534:	46bd      	mov	sp, r7
 801a536:	bd80      	pop	{r7, pc}

0801a538 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801a538:	b580      	push	{r7, lr}
 801a53a:	b082      	sub	sp, #8
 801a53c:	af00      	add	r7, sp, #0
 801a53e:	6078      	str	r0, [r7, #4]
 801a540:	6039      	str	r1, [r7, #0]
    return functionName_;
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	3304      	adds	r3, #4
 801a546:	4619      	mov	r1, r3
 801a548:	6878      	ldr	r0, [r7, #4]
 801a54a:	f7f2 fba4 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
}
 801a54e:	6878      	ldr	r0, [r7, #4]
 801a550:	3708      	adds	r7, #8
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}
	...

0801a558 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801a558:	b590      	push	{r4, r7, lr}
 801a55a:	b085      	sub	sp, #20
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	6078      	str	r0, [r7, #4]
 801a560:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	4618      	mov	r0, r3
 801a566:	f7ff ffa7 	bl	801a4b8 <_ZN16MockExpectedCallC1Ev>
 801a56a:	4a2c      	ldr	r2, [pc, #176]	; (801a61c <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	601a      	str	r2, [r3, #0]
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	3304      	adds	r3, #4
 801a574:	492a      	ldr	r1, [pc, #168]	; (801a620 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801a576:	4618      	mov	r0, r3
 801a578:	f7f2 fb39 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	2200      	movs	r2, #0
 801a580:	731a      	strb	r2, [r3, #12]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	2200      	movs	r2, #0
 801a586:	735a      	strb	r2, [r3, #13]
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	2200      	movs	r2, #0
 801a58c:	611a      	str	r2, [r3, #16]
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	2200      	movs	r2, #0
 801a592:	615a      	str	r2, [r3, #20]
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	2200      	movs	r2, #0
 801a598:	761a      	strb	r2, [r3, #24]
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801a5a0:	f107 0308 	add.w	r3, r7, #8
 801a5a4:	491e      	ldr	r1, [pc, #120]	; (801a620 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	f7f2 fb21 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801a5ac:	f107 0308 	add.w	r3, r7, #8
 801a5b0:	4619      	mov	r1, r3
 801a5b2:	4620      	mov	r0, r4
 801a5b4:	f003 f840 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a5b8:	f107 0308 	add.w	r3, r7, #8
 801a5bc:	4618      	mov	r0, r3
 801a5be:	f7f2 fece 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	661a      	str	r2, [r3, #96]	; 0x60
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	2201      	movs	r2, #1
 801a5d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	2200      	movs	r2, #0
 801a5dc:	669a      	str	r2, [r3, #104]	; 0x68
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	683a      	ldr	r2, [r7, #0]
 801a5e2:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801a5e4:	2246      	movs	r2, #70	; 0x46
 801a5e6:	490f      	ldr	r1, [pc, #60]	; (801a624 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801a5e8:	2004      	movs	r0, #4
 801a5ea:	f7ef ff3d 	bl	800a468 <_ZnwjPKci>
 801a5ee:	4604      	mov	r4, r0
 801a5f0:	4620      	mov	r0, r4
 801a5f2:	f004 ff36 	bl	801f462 <_ZN18MockNamedValueListC1Ev>
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801a5fa:	2247      	movs	r2, #71	; 0x47
 801a5fc:	4909      	ldr	r1, [pc, #36]	; (801a624 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801a5fe:	2004      	movs	r0, #4
 801a600:	f7ef ff32 	bl	800a468 <_ZnwjPKci>
 801a604:	4604      	mov	r4, r0
 801a606:	4620      	mov	r0, r4
 801a608:	f004 ff2b 	bl	801f462 <_ZN18MockNamedValueListC1Ev>
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	621c      	str	r4, [r3, #32]
}
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	4618      	mov	r0, r3
 801a614:	3714      	adds	r7, #20
 801a616:	46bd      	mov	sp, r7
 801a618:	bd90      	pop	{r4, r7, pc}
 801a61a:	bf00      	nop
 801a61c:	0802911c 	.word	0x0802911c
 801a620:	080260f4 	.word	0x080260f4
 801a624:	080260f8 	.word	0x080260f8

0801a628 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a628:	b580      	push	{r7, lr}
 801a62a:	b082      	sub	sp, #8
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	6078      	str	r0, [r7, #4]
 801a630:	4a17      	ldr	r2, [pc, #92]	; (801a690 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	69db      	ldr	r3, [r3, #28]
 801a63a:	4618      	mov	r0, r3
 801a63c:	f004 ff1f 	bl	801f47e <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	69db      	ldr	r3, [r3, #28]
 801a644:	2b00      	cmp	r3, #0
 801a646:	d003      	beq.n	801a650 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801a648:	2104      	movs	r1, #4
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7ef ff20 	bl	800a490 <_ZdlPvj>
    outputParameters_->clear();
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	6a1b      	ldr	r3, [r3, #32]
 801a654:	4618      	mov	r0, r3
 801a656:	f004 ff12 	bl	801f47e <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	6a1b      	ldr	r3, [r3, #32]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d003      	beq.n	801a66a <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801a662:	2104      	movs	r1, #4
 801a664:	4618      	mov	r0, r3
 801a666:	f7ef ff13 	bl	800a490 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	3328      	adds	r3, #40	; 0x28
 801a66e:	4618      	mov	r0, r3
 801a670:	f003 f80c 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	3304      	adds	r3, #4
 801a678:	4618      	mov	r0, r3
 801a67a:	f7f2 fe70 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	4618      	mov	r0, r3
 801a682:	f7ff ff29 	bl	801a4d8 <_ZN16MockExpectedCallD1Ev>
}
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	4618      	mov	r0, r3
 801a68a:	3708      	adds	r7, #8
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bd80      	pop	{r7, pc}
 801a690:	0802911c 	.word	0x0802911c

0801a694 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a694:	b580      	push	{r7, lr}
 801a696:	b082      	sub	sp, #8
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
}
 801a69c:	6878      	ldr	r0, [r7, #4]
 801a69e:	f7ff ffc3 	bl	801a628 <_ZN23MockCheckedExpectedCallD1Ev>
 801a6a2:	2170      	movs	r1, #112	; 0x70
 801a6a4:	6878      	ldr	r0, [r7, #4]
 801a6a6:	f7ef fef3 	bl	800a490 <_ZdlPvj>
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	3708      	adds	r7, #8
 801a6b0:	46bd      	mov	sp, r7
 801a6b2:	bd80      	pop	{r7, pc}

0801a6b4 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	b082      	sub	sp, #8
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	6078      	str	r0, [r7, #4]
 801a6bc:	6039      	str	r1, [r7, #0]
    setName(name);
 801a6be:	6839      	ldr	r1, [r7, #0]
 801a6c0:	6878      	ldr	r0, [r7, #4]
 801a6c2:	f7ff ff2a 	bl	801a51a <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801a6c6:	687b      	ldr	r3, [r7, #4]
}
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	3708      	adds	r7, #8
 801a6cc:	46bd      	mov	sp, r7
 801a6ce:	bd80      	pop	{r7, pc}

0801a6d0 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801a6d0:	b590      	push	{r4, r7, lr}
 801a6d2:	b087      	sub	sp, #28
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	60f8      	str	r0, [r7, #12]
 801a6d8:	60b9      	str	r1, [r7, #8]
 801a6da:	4613      	mov	r3, r2
 801a6dc:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a6de:	225a      	movs	r2, #90	; 0x5a
 801a6e0:	490e      	ldr	r1, [pc, #56]	; (801a71c <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801a6e2:	2038      	movs	r0, #56	; 0x38
 801a6e4:	f7ef fec0 	bl	800a468 <_ZnwjPKci>
 801a6e8:	4604      	mov	r4, r0
 801a6ea:	68b9      	ldr	r1, [r7, #8]
 801a6ec:	4620      	mov	r0, r4
 801a6ee:	f001 f851 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a6f2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a6f4:	68fb      	ldr	r3, [r7, #12]
 801a6f6:	69db      	ldr	r3, [r3, #28]
 801a6f8:	6979      	ldr	r1, [r7, #20]
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	f004 fee2 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a700:	697b      	ldr	r3, [r7, #20]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	3308      	adds	r3, #8
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	79fa      	ldrb	r2, [r7, #7]
 801a70a:	4611      	mov	r1, r2
 801a70c:	6978      	ldr	r0, [r7, #20]
 801a70e:	4798      	blx	r3
    return *this;
 801a710:	68fb      	ldr	r3, [r7, #12]
}
 801a712:	4618      	mov	r0, r3
 801a714:	371c      	adds	r7, #28
 801a716:	46bd      	mov	sp, r7
 801a718:	bd90      	pop	{r4, r7, pc}
 801a71a:	bf00      	nop
 801a71c:	080260f8 	.word	0x080260f8

0801a720 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801a720:	b590      	push	{r4, r7, lr}
 801a722:	b087      	sub	sp, #28
 801a724:	af00      	add	r7, sp, #0
 801a726:	60f8      	str	r0, [r7, #12]
 801a728:	60b9      	str	r1, [r7, #8]
 801a72a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a72c:	2262      	movs	r2, #98	; 0x62
 801a72e:	490e      	ldr	r1, [pc, #56]	; (801a768 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801a730:	2038      	movs	r0, #56	; 0x38
 801a732:	f7ef fe99 	bl	800a468 <_ZnwjPKci>
 801a736:	4604      	mov	r4, r0
 801a738:	68b9      	ldr	r1, [r7, #8]
 801a73a:	4620      	mov	r0, r4
 801a73c:	f001 f82a 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a740:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	69db      	ldr	r3, [r3, #28]
 801a746:	6979      	ldr	r1, [r7, #20]
 801a748:	4618      	mov	r0, r3
 801a74a:	f004 febb 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a74e:	697b      	ldr	r3, [r7, #20]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	3310      	adds	r3, #16
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	6879      	ldr	r1, [r7, #4]
 801a758:	6978      	ldr	r0, [r7, #20]
 801a75a:	4798      	blx	r3
    return *this;
 801a75c:	68fb      	ldr	r3, [r7, #12]
}
 801a75e:	4618      	mov	r0, r3
 801a760:	371c      	adds	r7, #28
 801a762:	46bd      	mov	sp, r7
 801a764:	bd90      	pop	{r4, r7, pc}
 801a766:	bf00      	nop
 801a768:	080260f8 	.word	0x080260f8

0801a76c <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801a76c:	b590      	push	{r4, r7, lr}
 801a76e:	b087      	sub	sp, #28
 801a770:	af00      	add	r7, sp, #0
 801a772:	60f8      	str	r0, [r7, #12]
 801a774:	60b9      	str	r1, [r7, #8]
 801a776:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a778:	226a      	movs	r2, #106	; 0x6a
 801a77a:	490e      	ldr	r1, [pc, #56]	; (801a7b4 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801a77c:	2038      	movs	r0, #56	; 0x38
 801a77e:	f7ef fe73 	bl	800a468 <_ZnwjPKci>
 801a782:	4604      	mov	r4, r0
 801a784:	68b9      	ldr	r1, [r7, #8]
 801a786:	4620      	mov	r0, r4
 801a788:	f001 f804 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a78c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	69db      	ldr	r3, [r3, #28]
 801a792:	6979      	ldr	r1, [r7, #20]
 801a794:	4618      	mov	r0, r3
 801a796:	f004 fe95 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a79a:	697b      	ldr	r3, [r7, #20]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	330c      	adds	r3, #12
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	6879      	ldr	r1, [r7, #4]
 801a7a4:	6978      	ldr	r0, [r7, #20]
 801a7a6:	4798      	blx	r3
    return *this;
 801a7a8:	68fb      	ldr	r3, [r7, #12]
}
 801a7aa:	4618      	mov	r0, r3
 801a7ac:	371c      	adds	r7, #28
 801a7ae:	46bd      	mov	sp, r7
 801a7b0:	bd90      	pop	{r4, r7, pc}
 801a7b2:	bf00      	nop
 801a7b4:	080260f8 	.word	0x080260f8

0801a7b8 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801a7b8:	b590      	push	{r4, r7, lr}
 801a7ba:	b087      	sub	sp, #28
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	60f8      	str	r0, [r7, #12]
 801a7c0:	60b9      	str	r1, [r7, #8]
 801a7c2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a7c4:	2272      	movs	r2, #114	; 0x72
 801a7c6:	490e      	ldr	r1, [pc, #56]	; (801a800 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801a7c8:	2038      	movs	r0, #56	; 0x38
 801a7ca:	f7ef fe4d 	bl	800a468 <_ZnwjPKci>
 801a7ce:	4604      	mov	r4, r0
 801a7d0:	68b9      	ldr	r1, [r7, #8]
 801a7d2:	4620      	mov	r0, r4
 801a7d4:	f000 ffde 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a7d8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	69db      	ldr	r3, [r3, #28]
 801a7de:	6979      	ldr	r1, [r7, #20]
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f004 fe6f 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a7e6:	697b      	ldr	r3, [r7, #20]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	3314      	adds	r3, #20
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	6879      	ldr	r1, [r7, #4]
 801a7f0:	6978      	ldr	r0, [r7, #20]
 801a7f2:	4798      	blx	r3
    return *this;
 801a7f4:	68fb      	ldr	r3, [r7, #12]
}
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	371c      	adds	r7, #28
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bd90      	pop	{r4, r7, pc}
 801a7fe:	bf00      	nop
 801a800:	080260f8 	.word	0x080260f8

0801a804 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801a804:	b590      	push	{r4, r7, lr}
 801a806:	b087      	sub	sp, #28
 801a808:	af00      	add	r7, sp, #0
 801a80a:	60f8      	str	r0, [r7, #12]
 801a80c:	60b9      	str	r1, [r7, #8]
 801a80e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a810:	227a      	movs	r2, #122	; 0x7a
 801a812:	490e      	ldr	r1, [pc, #56]	; (801a84c <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801a814:	2038      	movs	r0, #56	; 0x38
 801a816:	f7ef fe27 	bl	800a468 <_ZnwjPKci>
 801a81a:	4604      	mov	r4, r0
 801a81c:	68b9      	ldr	r1, [r7, #8]
 801a81e:	4620      	mov	r0, r4
 801a820:	f000 ffb8 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a824:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	69db      	ldr	r3, [r3, #28]
 801a82a:	6979      	ldr	r1, [r7, #20]
 801a82c:	4618      	mov	r0, r3
 801a82e:	f004 fe49 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a832:	697b      	ldr	r3, [r7, #20]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	3318      	adds	r3, #24
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	6879      	ldr	r1, [r7, #4]
 801a83c:	6978      	ldr	r0, [r7, #20]
 801a83e:	4798      	blx	r3
    return *this;
 801a840:	68fb      	ldr	r3, [r7, #12]
}
 801a842:	4618      	mov	r0, r3
 801a844:	371c      	adds	r7, #28
 801a846:	46bd      	mov	sp, r7
 801a848:	bd90      	pop	{r4, r7, pc}
 801a84a:	bf00      	nop
 801a84c:	080260f8 	.word	0x080260f8

0801a850 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a850:	b5b0      	push	{r4, r5, r7, lr}
 801a852:	b086      	sub	sp, #24
 801a854:	af02      	add	r7, sp, #8
 801a856:	60f8      	str	r0, [r7, #12]
 801a858:	60b9      	str	r1, [r7, #8]
 801a85a:	4639      	mov	r1, r7
 801a85c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a860:	f7f9 fda8 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801a864:	4604      	mov	r4, r0
 801a866:	6823      	ldr	r3, [r4, #0]
 801a868:	3368      	adds	r3, #104	; 0x68
 801a86a:	681d      	ldr	r5, [r3, #0]
 801a86c:	f7f9 fdb2 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a870:	4603      	mov	r3, r0
 801a872:	9300      	str	r3, [sp, #0]
 801a874:	2396      	movs	r3, #150	; 0x96
 801a876:	4a04      	ldr	r2, [pc, #16]	; (801a888 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801a878:	4904      	ldr	r1, [pc, #16]	; (801a88c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a87a:	4620      	mov	r0, r4
 801a87c:	47a8      	blx	r5
    return *this;
 801a87e:	68fb      	ldr	r3, [r7, #12]
}
 801a880:	4618      	mov	r0, r3
 801a882:	3710      	adds	r7, #16
 801a884:	46bd      	mov	sp, r7
 801a886:	bdb0      	pop	{r4, r5, r7, pc}
 801a888:	080260f8 	.word	0x080260f8
 801a88c:	08026114 	.word	0x08026114

0801a890 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a890:	b5b0      	push	{r4, r5, r7, lr}
 801a892:	b086      	sub	sp, #24
 801a894:	af02      	add	r7, sp, #8
 801a896:	60f8      	str	r0, [r7, #12]
 801a898:	60b9      	str	r1, [r7, #8]
 801a89a:	4639      	mov	r1, r7
 801a89c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a8a0:	f7f9 fd88 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801a8a4:	4604      	mov	r4, r0
 801a8a6:	6823      	ldr	r3, [r4, #0]
 801a8a8:	3368      	adds	r3, #104	; 0x68
 801a8aa:	681d      	ldr	r5, [r3, #0]
 801a8ac:	f7f9 fd92 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a8b0:	4603      	mov	r3, r0
 801a8b2:	9300      	str	r3, [sp, #0]
 801a8b4:	239c      	movs	r3, #156	; 0x9c
 801a8b6:	4a04      	ldr	r2, [pc, #16]	; (801a8c8 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801a8b8:	4904      	ldr	r1, [pc, #16]	; (801a8cc <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a8ba:	4620      	mov	r0, r4
 801a8bc:	47a8      	blx	r5
    return *this;
 801a8be:	68fb      	ldr	r3, [r7, #12]
}
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	3710      	adds	r7, #16
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	bdb0      	pop	{r4, r5, r7, pc}
 801a8c8:	080260f8 	.word	0x080260f8
 801a8cc:	08026134 	.word	0x08026134

0801a8d0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801a8d0:	b590      	push	{r4, r7, lr}
 801a8d2:	b087      	sub	sp, #28
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	60f8      	str	r0, [r7, #12]
 801a8d8:	60b9      	str	r1, [r7, #8]
 801a8da:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a8de:	22a4      	movs	r2, #164	; 0xa4
 801a8e0:	490e      	ldr	r1, [pc, #56]	; (801a91c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801a8e2:	2038      	movs	r0, #56	; 0x38
 801a8e4:	f7ef fdc0 	bl	800a468 <_ZnwjPKci>
 801a8e8:	4604      	mov	r4, r0
 801a8ea:	68b9      	ldr	r1, [r7, #8]
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	f000 ff51 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a8f2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	69db      	ldr	r3, [r3, #28]
 801a8f8:	6979      	ldr	r1, [r7, #20]
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	f004 fde2 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a900:	697b      	ldr	r3, [r7, #20]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	3324      	adds	r3, #36	; 0x24
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	ed97 0b00 	vldr	d0, [r7]
 801a90c:	6978      	ldr	r0, [r7, #20]
 801a90e:	4798      	blx	r3
    return *this;
 801a910:	68fb      	ldr	r3, [r7, #12]
}
 801a912:	4618      	mov	r0, r3
 801a914:	371c      	adds	r7, #28
 801a916:	46bd      	mov	sp, r7
 801a918:	bd90      	pop	{r4, r7, pc}
 801a91a:	bf00      	nop
 801a91c:	080260f8 	.word	0x080260f8

0801a920 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801a920:	b590      	push	{r4, r7, lr}
 801a922:	b089      	sub	sp, #36	; 0x24
 801a924:	af00      	add	r7, sp, #0
 801a926:	6178      	str	r0, [r7, #20]
 801a928:	6139      	str	r1, [r7, #16]
 801a92a:	ed87 0b02 	vstr	d0, [r7, #8]
 801a92e:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a932:	22ac      	movs	r2, #172	; 0xac
 801a934:	490f      	ldr	r1, [pc, #60]	; (801a974 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801a936:	2038      	movs	r0, #56	; 0x38
 801a938:	f7ef fd96 	bl	800a468 <_ZnwjPKci>
 801a93c:	4604      	mov	r4, r0
 801a93e:	6939      	ldr	r1, [r7, #16]
 801a940:	4620      	mov	r0, r4
 801a942:	f000 ff27 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a946:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801a948:	697b      	ldr	r3, [r7, #20]
 801a94a:	69db      	ldr	r3, [r3, #28]
 801a94c:	69f9      	ldr	r1, [r7, #28]
 801a94e:	4618      	mov	r0, r3
 801a950:	f004 fdb8 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801a954:	69fb      	ldr	r3, [r7, #28]
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	3328      	adds	r3, #40	; 0x28
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	ed97 1b00 	vldr	d1, [r7]
 801a960:	ed97 0b02 	vldr	d0, [r7, #8]
 801a964:	69f8      	ldr	r0, [r7, #28]
 801a966:	4798      	blx	r3
    return *this;
 801a968:	697b      	ldr	r3, [r7, #20]
}
 801a96a:	4618      	mov	r0, r3
 801a96c:	3724      	adds	r7, #36	; 0x24
 801a96e:	46bd      	mov	sp, r7
 801a970:	bd90      	pop	{r4, r7, pc}
 801a972:	bf00      	nop
 801a974:	080260f8 	.word	0x080260f8

0801a978 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801a978:	b590      	push	{r4, r7, lr}
 801a97a:	b087      	sub	sp, #28
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	60f8      	str	r0, [r7, #12]
 801a980:	60b9      	str	r1, [r7, #8]
 801a982:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a984:	22b4      	movs	r2, #180	; 0xb4
 801a986:	490e      	ldr	r1, [pc, #56]	; (801a9c0 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801a988:	2038      	movs	r0, #56	; 0x38
 801a98a:	f7ef fd6d 	bl	800a468 <_ZnwjPKci>
 801a98e:	4604      	mov	r4, r0
 801a990:	68b9      	ldr	r1, [r7, #8]
 801a992:	4620      	mov	r0, r4
 801a994:	f000 fefe 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a998:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	69db      	ldr	r3, [r3, #28]
 801a99e:	6979      	ldr	r1, [r7, #20]
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	f004 fd8f 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a9a6:	697b      	ldr	r3, [r7, #20]
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	3338      	adds	r3, #56	; 0x38
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	6879      	ldr	r1, [r7, #4]
 801a9b0:	6978      	ldr	r0, [r7, #20]
 801a9b2:	4798      	blx	r3
    return *this;
 801a9b4:	68fb      	ldr	r3, [r7, #12]
}
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	371c      	adds	r7, #28
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd90      	pop	{r4, r7, pc}
 801a9be:	bf00      	nop
 801a9c0:	080260f8 	.word	0x080260f8

0801a9c4 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801a9c4:	b590      	push	{r4, r7, lr}
 801a9c6:	b087      	sub	sp, #28
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	60f8      	str	r0, [r7, #12]
 801a9cc:	60b9      	str	r1, [r7, #8]
 801a9ce:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a9d0:	22bc      	movs	r2, #188	; 0xbc
 801a9d2:	490e      	ldr	r1, [pc, #56]	; (801aa0c <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801a9d4:	2038      	movs	r0, #56	; 0x38
 801a9d6:	f7ef fd47 	bl	800a468 <_ZnwjPKci>
 801a9da:	4604      	mov	r4, r0
 801a9dc:	68b9      	ldr	r1, [r7, #8]
 801a9de:	4620      	mov	r0, r4
 801a9e0:	f000 fed8 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a9e4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	69db      	ldr	r3, [r3, #28]
 801a9ea:	6979      	ldr	r1, [r7, #20]
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	f004 fd69 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a9f2:	697b      	ldr	r3, [r7, #20]
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	332c      	adds	r3, #44	; 0x2c
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	6879      	ldr	r1, [r7, #4]
 801a9fc:	6978      	ldr	r0, [r7, #20]
 801a9fe:	4798      	blx	r3
    return *this;
 801aa00:	68fb      	ldr	r3, [r7, #12]
}
 801aa02:	4618      	mov	r0, r3
 801aa04:	371c      	adds	r7, #28
 801aa06:	46bd      	mov	sp, r7
 801aa08:	bd90      	pop	{r4, r7, pc}
 801aa0a:	bf00      	nop
 801aa0c:	080260f8 	.word	0x080260f8

0801aa10 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801aa10:	b590      	push	{r4, r7, lr}
 801aa12:	b087      	sub	sp, #28
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	60f8      	str	r0, [r7, #12]
 801aa18:	60b9      	str	r1, [r7, #8]
 801aa1a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aa1c:	22c4      	movs	r2, #196	; 0xc4
 801aa1e:	490e      	ldr	r1, [pc, #56]	; (801aa58 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801aa20:	2038      	movs	r0, #56	; 0x38
 801aa22:	f7ef fd21 	bl	800a468 <_ZnwjPKci>
 801aa26:	4604      	mov	r4, r0
 801aa28:	68b9      	ldr	r1, [r7, #8]
 801aa2a:	4620      	mov	r0, r4
 801aa2c:	f000 feb2 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aa30:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	69db      	ldr	r3, [r3, #28]
 801aa36:	6979      	ldr	r1, [r7, #20]
 801aa38:	4618      	mov	r0, r3
 801aa3a:	f004 fd43 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801aa3e:	697b      	ldr	r3, [r7, #20]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	3330      	adds	r3, #48	; 0x30
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	6879      	ldr	r1, [r7, #4]
 801aa48:	6978      	ldr	r0, [r7, #20]
 801aa4a:	4798      	blx	r3
    return *this;
 801aa4c:	68fb      	ldr	r3, [r7, #12]
}
 801aa4e:	4618      	mov	r0, r3
 801aa50:	371c      	adds	r7, #28
 801aa52:	46bd      	mov	sp, r7
 801aa54:	bd90      	pop	{r4, r7, pc}
 801aa56:	bf00      	nop
 801aa58:	080260f8 	.word	0x080260f8

0801aa5c <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801aa5c:	b590      	push	{r4, r7, lr}
 801aa5e:	b087      	sub	sp, #28
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	60f8      	str	r0, [r7, #12]
 801aa64:	60b9      	str	r1, [r7, #8]
 801aa66:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aa68:	22cc      	movs	r2, #204	; 0xcc
 801aa6a:	490e      	ldr	r1, [pc, #56]	; (801aaa4 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801aa6c:	2038      	movs	r0, #56	; 0x38
 801aa6e:	f7ef fcfb 	bl	800a468 <_ZnwjPKci>
 801aa72:	4604      	mov	r4, r0
 801aa74:	68b9      	ldr	r1, [r7, #8]
 801aa76:	4620      	mov	r0, r4
 801aa78:	f000 fe8c 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aa7c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	69db      	ldr	r3, [r3, #28]
 801aa82:	6979      	ldr	r1, [r7, #20]
 801aa84:	4618      	mov	r0, r3
 801aa86:	f004 fd1d 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801aa8a:	697b      	ldr	r3, [r7, #20]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	3334      	adds	r3, #52	; 0x34
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	6879      	ldr	r1, [r7, #4]
 801aa94:	6978      	ldr	r0, [r7, #20]
 801aa96:	4798      	blx	r3
    return *this;
 801aa98:	68fb      	ldr	r3, [r7, #12]
}
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	371c      	adds	r7, #28
 801aa9e:	46bd      	mov	sp, r7
 801aaa0:	bd90      	pop	{r4, r7, pc}
 801aaa2:	bf00      	nop
 801aaa4:	080260f8 	.word	0x080260f8

0801aaa8 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801aaa8:	b590      	push	{r4, r7, lr}
 801aaaa:	b087      	sub	sp, #28
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	60f8      	str	r0, [r7, #12]
 801aab0:	60b9      	str	r1, [r7, #8]
 801aab2:	607a      	str	r2, [r7, #4]
 801aab4:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aab6:	22d4      	movs	r2, #212	; 0xd4
 801aab8:	490e      	ldr	r1, [pc, #56]	; (801aaf4 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801aaba:	2038      	movs	r0, #56	; 0x38
 801aabc:	f7ef fcd4 	bl	800a468 <_ZnwjPKci>
 801aac0:	4604      	mov	r4, r0
 801aac2:	68b9      	ldr	r1, [r7, #8]
 801aac4:	4620      	mov	r0, r4
 801aac6:	f000 fe65 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aaca:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	69db      	ldr	r3, [r3, #28]
 801aad0:	6979      	ldr	r1, [r7, #20]
 801aad2:	4618      	mov	r0, r3
 801aad4:	f004 fcf6 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801aad8:	697b      	ldr	r3, [r7, #20]
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	333c      	adds	r3, #60	; 0x3c
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	683a      	ldr	r2, [r7, #0]
 801aae2:	6879      	ldr	r1, [r7, #4]
 801aae4:	6978      	ldr	r0, [r7, #20]
 801aae6:	4798      	blx	r3
    return *this;
 801aae8:	68fb      	ldr	r3, [r7, #12]
}
 801aaea:	4618      	mov	r0, r3
 801aaec:	371c      	adds	r7, #28
 801aaee:	46bd      	mov	sp, r7
 801aaf0:	bd90      	pop	{r4, r7, pc}
 801aaf2:	bf00      	nop
 801aaf4:	080260f8 	.word	0x080260f8

0801aaf8 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801aaf8:	b590      	push	{r4, r7, lr}
 801aafa:	b087      	sub	sp, #28
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	60f8      	str	r0, [r7, #12]
 801ab00:	60b9      	str	r1, [r7, #8]
 801ab02:	607a      	str	r2, [r7, #4]
 801ab04:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ab06:	22dc      	movs	r2, #220	; 0xdc
 801ab08:	490e      	ldr	r1, [pc, #56]	; (801ab44 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801ab0a:	2038      	movs	r0, #56	; 0x38
 801ab0c:	f7ef fcac 	bl	800a468 <_ZnwjPKci>
 801ab10:	4604      	mov	r4, r0
 801ab12:	6879      	ldr	r1, [r7, #4]
 801ab14:	4620      	mov	r0, r4
 801ab16:	f000 fe3d 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ab1a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	69db      	ldr	r3, [r3, #28]
 801ab20:	6979      	ldr	r1, [r7, #20]
 801ab22:	4618      	mov	r0, r3
 801ab24:	f004 fcce 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801ab28:	697b      	ldr	r3, [r7, #20]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	3340      	adds	r3, #64	; 0x40
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	683a      	ldr	r2, [r7, #0]
 801ab32:	68b9      	ldr	r1, [r7, #8]
 801ab34:	6978      	ldr	r0, [r7, #20]
 801ab36:	4798      	blx	r3
    return *this;
 801ab38:	68fb      	ldr	r3, [r7, #12]
}
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	371c      	adds	r7, #28
 801ab3e:	46bd      	mov	sp, r7
 801ab40:	bd90      	pop	{r4, r7, pc}
 801ab42:	bf00      	nop
 801ab44:	080260f8 	.word	0x080260f8

0801ab48 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801ab48:	b590      	push	{r4, r7, lr}
 801ab4a:	b087      	sub	sp, #28
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	60f8      	str	r0, [r7, #12]
 801ab50:	60b9      	str	r1, [r7, #8]
 801ab52:	607a      	str	r2, [r7, #4]
 801ab54:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ab56:	22e4      	movs	r2, #228	; 0xe4
 801ab58:	4911      	ldr	r1, [pc, #68]	; (801aba0 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801ab5a:	2038      	movs	r0, #56	; 0x38
 801ab5c:	f7ef fc84 	bl	800a468 <_ZnwjPKci>
 801ab60:	4604      	mov	r4, r0
 801ab62:	68b9      	ldr	r1, [r7, #8]
 801ab64:	4620      	mov	r0, r4
 801ab66:	f000 fe15 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ab6a:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	6a1b      	ldr	r3, [r3, #32]
 801ab70:	6979      	ldr	r1, [r7, #20]
 801ab72:	4618      	mov	r0, r3
 801ab74:	f004 fca6 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ab78:	697b      	ldr	r3, [r7, #20]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	3330      	adds	r3, #48	; 0x30
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	6879      	ldr	r1, [r7, #4]
 801ab82:	6978      	ldr	r0, [r7, #20]
 801ab84:	4798      	blx	r3
    newParameter->setSize(size);
 801ab86:	697b      	ldr	r3, [r7, #20]
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	3348      	adds	r3, #72	; 0x48
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	6839      	ldr	r1, [r7, #0]
 801ab90:	6978      	ldr	r0, [r7, #20]
 801ab92:	4798      	blx	r3
    return *this;
 801ab94:	68fb      	ldr	r3, [r7, #12]
}
 801ab96:	4618      	mov	r0, r3
 801ab98:	371c      	adds	r7, #28
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bd90      	pop	{r4, r7, pc}
 801ab9e:	bf00      	nop
 801aba0:	080260f8 	.word	0x080260f8

0801aba4 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801aba4:	b590      	push	{r4, r7, lr}
 801aba6:	b087      	sub	sp, #28
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	60f8      	str	r0, [r7, #12]
 801abac:	60b9      	str	r1, [r7, #8]
 801abae:	607a      	str	r2, [r7, #4]
 801abb0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801abb2:	22ed      	movs	r2, #237	; 0xed
 801abb4:	490e      	ldr	r1, [pc, #56]	; (801abf0 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801abb6:	2038      	movs	r0, #56	; 0x38
 801abb8:	f7ef fc56 	bl	800a468 <_ZnwjPKci>
 801abbc:	4604      	mov	r4, r0
 801abbe:	6879      	ldr	r1, [r7, #4]
 801abc0:	4620      	mov	r0, r4
 801abc2:	f000 fde7 	bl	801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801abc6:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	6a1b      	ldr	r3, [r3, #32]
 801abcc:	6979      	ldr	r1, [r7, #20]
 801abce:	4618      	mov	r0, r3
 801abd0:	f004 fc78 	bl	801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801abd4:	697b      	ldr	r3, [r7, #20]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	3340      	adds	r3, #64	; 0x40
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	683a      	ldr	r2, [r7, #0]
 801abde:	68b9      	ldr	r1, [r7, #8]
 801abe0:	6978      	ldr	r0, [r7, #20]
 801abe2:	4798      	blx	r3
    return *this;
 801abe4:	68fb      	ldr	r3, [r7, #12]
}
 801abe6:	4618      	mov	r0, r3
 801abe8:	371c      	adds	r7, #28
 801abea:	46bd      	mov	sp, r7
 801abec:	bd90      	pop	{r4, r7, pc}
 801abee:	bf00      	nop
 801abf0:	080260f8 	.word	0x080260f8

0801abf4 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801abf4:	b590      	push	{r4, r7, lr}
 801abf6:	b083      	sub	sp, #12
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	6078      	str	r0, [r7, #4]
 801abfc:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	3318      	adds	r3, #24
 801ac04:	681c      	ldr	r4, [r3, #0]
 801ac06:	2300      	movs	r3, #0
 801ac08:	2200      	movs	r2, #0
 801ac0a:	6839      	ldr	r1, [r7, #0]
 801ac0c:	6878      	ldr	r0, [r7, #4]
 801ac0e:	47a0      	blx	r4
 801ac10:	4603      	mov	r3, r0
}
 801ac12:	4618      	mov	r0, r3
 801ac14:	370c      	adds	r7, #12
 801ac16:	46bd      	mov	sp, r7
 801ac18:	bd90      	pop	{r4, r7, pc}
	...

0801ac1c <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	b086      	sub	sp, #24
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	60f8      	str	r0, [r7, #12]
 801ac24:	60b9      	str	r1, [r7, #8]
 801ac26:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801ac28:	68bb      	ldr	r3, [r7, #8]
 801ac2a:	69db      	ldr	r3, [r3, #28]
 801ac2c:	6879      	ldr	r1, [r7, #4]
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f004 fc7e 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ac34:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801ac36:	697b      	ldr	r3, [r7, #20]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d008      	beq.n	801ac4e <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801ac3c:	697b      	ldr	r3, [r7, #20]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	3360      	adds	r3, #96	; 0x60
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	68fa      	ldr	r2, [r7, #12]
 801ac46:	6979      	ldr	r1, [r7, #20]
 801ac48:	4610      	mov	r0, r2
 801ac4a:	4798      	blx	r3
 801ac4c:	e004      	b.n	801ac58 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	4903      	ldr	r1, [pc, #12]	; (801ac60 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801ac52:	4618      	mov	r0, r3
 801ac54:	f7f2 fe10 	bl	800d878 <_Z10StringFromPKc>
}
 801ac58:	68f8      	ldr	r0, [r7, #12]
 801ac5a:	3718      	adds	r7, #24
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	bd80      	pop	{r7, pc}
 801ac60:	080260f4 	.word	0x080260f4

0801ac64 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801ac64:	b580      	push	{r7, lr}
 801ac66:	b084      	sub	sp, #16
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	6078      	str	r0, [r7, #4]
 801ac6c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	69db      	ldr	r3, [r3, #28]
 801ac72:	6839      	ldr	r1, [r7, #0]
 801ac74:	4618      	mov	r0, r3
 801ac76:	f004 fc5b 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ac7a:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	bf14      	ite	ne
 801ac82:	2301      	movne	r3, #1
 801ac84:	2300      	moveq	r3, #0
 801ac86:	b2db      	uxtb	r3, r3
}
 801ac88:	4618      	mov	r0, r3
 801ac8a:	3710      	adds	r7, #16
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	bd80      	pop	{r7, pc}

0801ac90 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b084      	sub	sp, #16
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
 801ac98:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	6a1b      	ldr	r3, [r3, #32]
 801ac9e:	6839      	ldr	r1, [r7, #0]
 801aca0:	4618      	mov	r0, r3
 801aca2:	f004 fc45 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801aca6:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	bf14      	ite	ne
 801acae:	2301      	movne	r3, #1
 801acb0:	2300      	moveq	r3, #0
 801acb2:	b2db      	uxtb	r3, r3
}
 801acb4:	4618      	mov	r0, r3
 801acb6:	3710      	adds	r7, #16
 801acb8:	46bd      	mov	sp, r7
 801acba:	bd80      	pop	{r7, pc}

0801acbc <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801acbc:	b590      	push	{r4, r7, lr}
 801acbe:	b089      	sub	sp, #36	; 0x24
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	60f8      	str	r0, [r7, #12]
 801acc4:	60b9      	str	r1, [r7, #8]
 801acc6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801acc8:	68bb      	ldr	r3, [r7, #8]
 801acca:	69db      	ldr	r3, [r3, #28]
 801accc:	6879      	ldr	r1, [r7, #4]
 801acce:	4618      	mov	r0, r3
 801acd0:	f004 fc2e 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801acd4:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801acd6:	2400      	movs	r4, #0
 801acd8:	69fb      	ldr	r3, [r7, #28]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d004      	beq.n	801ace8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801acde:	69f9      	ldr	r1, [r7, #28]
 801ace0:	68f8      	ldr	r0, [r7, #12]
 801ace2:	f7f0 f829 	bl	800ad38 <_ZN14MockNamedValueC1ERKS_>
 801ace6:	e00c      	b.n	801ad02 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801ace8:	f107 0314 	add.w	r3, r7, #20
 801acec:	490a      	ldr	r1, [pc, #40]	; (801ad18 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801acee:	4618      	mov	r0, r3
 801acf0:	f7f1 ff7d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801acf4:	2401      	movs	r4, #1
 801acf6:	f107 0314 	add.w	r3, r7, #20
 801acfa:	4619      	mov	r1, r3
 801acfc:	68f8      	ldr	r0, [r7, #12]
 801acfe:	f002 fc9b 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
 801ad02:	2c00      	cmp	r4, #0
 801ad04:	d004      	beq.n	801ad10 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801ad06:	f107 0314 	add.w	r3, r7, #20
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	f7f2 fb27 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 801ad10:	68f8      	ldr	r0, [r7, #12]
 801ad12:	3724      	adds	r7, #36	; 0x24
 801ad14:	46bd      	mov	sp, r7
 801ad16:	bd90      	pop	{r4, r7, pc}
 801ad18:	080260f4 	.word	0x080260f4

0801ad1c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801ad1c:	b590      	push	{r4, r7, lr}
 801ad1e:	b089      	sub	sp, #36	; 0x24
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	60f8      	str	r0, [r7, #12]
 801ad24:	60b9      	str	r1, [r7, #8]
 801ad26:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801ad28:	68bb      	ldr	r3, [r7, #8]
 801ad2a:	6a1b      	ldr	r3, [r3, #32]
 801ad2c:	6879      	ldr	r1, [r7, #4]
 801ad2e:	4618      	mov	r0, r3
 801ad30:	f004 fbfe 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801ad34:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801ad36:	2400      	movs	r4, #0
 801ad38:	69fb      	ldr	r3, [r7, #28]
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d004      	beq.n	801ad48 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801ad3e:	69f9      	ldr	r1, [r7, #28]
 801ad40:	68f8      	ldr	r0, [r7, #12]
 801ad42:	f7ef fff9 	bl	800ad38 <_ZN14MockNamedValueC1ERKS_>
 801ad46:	e00c      	b.n	801ad62 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801ad48:	f107 0314 	add.w	r3, r7, #20
 801ad4c:	490a      	ldr	r1, [pc, #40]	; (801ad78 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801ad4e:	4618      	mov	r0, r3
 801ad50:	f7f1 ff4d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ad54:	2401      	movs	r4, #1
 801ad56:	f107 0314 	add.w	r3, r7, #20
 801ad5a:	4619      	mov	r1, r3
 801ad5c:	68f8      	ldr	r0, [r7, #12]
 801ad5e:	f002 fc6b 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
 801ad62:	2c00      	cmp	r4, #0
 801ad64:	d004      	beq.n	801ad70 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801ad66:	f107 0314 	add.w	r3, r7, #20
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	f7f2 faf7 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 801ad70:	68f8      	ldr	r0, [r7, #12]
 801ad72:	3724      	adds	r7, #36	; 0x24
 801ad74:	46bd      	mov	sp, r7
 801ad76:	bd90      	pop	{r4, r7, pc}
 801ad78:	080260f4 	.word	0x080260f4

0801ad7c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b084      	sub	sp, #16
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	69db      	ldr	r3, [r3, #28]
 801ad88:	4618      	mov	r0, r3
 801ad8a:	f004 fc00 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801ad8e:	60f8      	str	r0, [r7, #12]
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d014      	beq.n	801adc0 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801ad96:	68f9      	ldr	r1, [r7, #12]
 801ad98:	6878      	ldr	r0, [r7, #4]
 801ad9a:	f000 fced 	bl	801b778 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801ad9e:	4603      	mov	r3, r0
 801ada0:	4618      	mov	r0, r3
 801ada2:	f000 fd1f 	bl	801b7e4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801ada6:	4603      	mov	r3, r0
 801ada8:	f083 0301 	eor.w	r3, r3, #1
 801adac:	b2db      	uxtb	r3, r3
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d001      	beq.n	801adb6 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801adb2:	2300      	movs	r3, #0
 801adb4:	e023      	b.n	801adfe <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801adb6:	68f8      	ldr	r0, [r7, #12]
 801adb8:	f004 faf2 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801adbc:	60f8      	str	r0, [r7, #12]
 801adbe:	e7e7      	b.n	801ad90 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	6a1b      	ldr	r3, [r3, #32]
 801adc4:	4618      	mov	r0, r3
 801adc6:	f004 fbe2 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801adca:	60f8      	str	r0, [r7, #12]
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	2b00      	cmp	r3, #0
 801add0:	d014      	beq.n	801adfc <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801add2:	68f9      	ldr	r1, [r7, #12]
 801add4:	6878      	ldr	r0, [r7, #4]
 801add6:	f000 fccf 	bl	801b778 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801adda:	4603      	mov	r3, r0
 801addc:	4618      	mov	r0, r3
 801adde:	f000 fd01 	bl	801b7e4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801ade2:	4603      	mov	r3, r0
 801ade4:	f083 0301 	eor.w	r3, r3, #1
 801ade8:	b2db      	uxtb	r3, r3
 801adea:	2b00      	cmp	r3, #0
 801adec:	d001      	beq.n	801adf2 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801adee:	2300      	movs	r3, #0
 801adf0:	e005      	b.n	801adfe <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801adf2:	68f8      	ldr	r0, [r7, #12]
 801adf4:	f004 fad4 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801adf8:	60f8      	str	r0, [r7, #12]
 801adfa:	e7e7      	b.n	801adcc <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801adfc:	2301      	movs	r3, #1
}
 801adfe:	4618      	mov	r0, r3
 801ae00:	3710      	adds	r7, #16
 801ae02:	46bd      	mov	sp, r7
 801ae04:	bd80      	pop	{r7, pc}

0801ae06 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801ae06:	b480      	push	{r7}
 801ae08:	b083      	sub	sp, #12
 801ae0a:	af00      	add	r7, sp, #0
 801ae0c:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	2201      	movs	r2, #1
 801ae12:	731a      	strb	r2, [r3, #12]
    return *this;
 801ae14:	687b      	ldr	r3, [r7, #4]
}
 801ae16:	4618      	mov	r0, r3
 801ae18:	370c      	adds	r7, #12
 801ae1a:	46bd      	mov	sp, r7
 801ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae20:	4770      	bx	lr

0801ae22 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801ae22:	b480      	push	{r7}
 801ae24:	b083      	sub	sp, #12
 801ae26:	af00      	add	r7, sp, #0
 801ae28:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae32:	429a      	cmp	r2, r3
 801ae34:	bf0c      	ite	eq
 801ae36:	2301      	moveq	r3, #1
 801ae38:	2300      	movne	r3, #0
 801ae3a:	b2db      	uxtb	r3, r3
}
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	370c      	adds	r7, #12
 801ae40:	46bd      	mov	sp, r7
 801ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae46:	4770      	bx	lr

0801ae48 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801ae48:	b480      	push	{r7}
 801ae4a:	b083      	sub	sp, #12
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae58:	429a      	cmp	r2, r3
 801ae5a:	bf34      	ite	cc
 801ae5c:	2301      	movcc	r3, #1
 801ae5e:	2300      	movcs	r3, #0
 801ae60:	b2db      	uxtb	r3, r3
}
 801ae62:	4618      	mov	r0, r3
 801ae64:	370c      	adds	r7, #12
 801ae66:	46bd      	mov	sp, r7
 801ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae6c:	4770      	bx	lr

0801ae6e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801ae6e:	b580      	push	{r7, lr}
 801ae70:	b082      	sub	sp, #8
 801ae72:	af00      	add	r7, sp, #0
 801ae74:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	33cc      	adds	r3, #204	; 0xcc
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	6878      	ldr	r0, [r7, #4]
 801ae80:	4798      	blx	r3
 801ae82:	4603      	mov	r3, r0
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d00c      	beq.n	801aea2 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	7b1b      	ldrb	r3, [r3, #12]
 801ae8c:	f083 0301 	eor.w	r3, r3, #1
 801ae90:	b2db      	uxtb	r3, r3
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	d103      	bne.n	801ae9e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	7b5b      	ldrb	r3, [r3, #13]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d001      	beq.n	801aea2 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801ae9e:	2301      	movs	r3, #1
 801aea0:	e000      	b.n	801aea4 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801aea2:	2300      	movs	r3, #0
}
 801aea4:	4618      	mov	r0, r3
 801aea6:	3708      	adds	r7, #8
 801aea8:	46bd      	mov	sp, r7
 801aeaa:	bd80      	pop	{r7, pc}

0801aeac <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801aeac:	b580      	push	{r7, lr}
 801aeae:	b082      	sub	sp, #8
 801aeb0:	af00      	add	r7, sp, #0
 801aeb2:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	33d0      	adds	r3, #208	; 0xd0
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	6878      	ldr	r0, [r7, #4]
 801aebe:	4798      	blx	r3
 801aec0:	4603      	mov	r3, r0
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d006      	beq.n	801aed4 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d001      	beq.n	801aed4 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801aed0:	2301      	movs	r3, #1
 801aed2:	e000      	b.n	801aed6 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801aed4:	2300      	movs	r3, #0
}
 801aed6:	4618      	mov	r0, r3
 801aed8:	3708      	adds	r7, #8
 801aeda:	46bd      	mov	sp, r7
 801aedc:	bd80      	pop	{r7, pc}

0801aede <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801aede:	b580      	push	{r7, lr}
 801aee0:	b082      	sub	sp, #8
 801aee2:	af00      	add	r7, sp, #0
 801aee4:	6078      	str	r0, [r7, #4]
 801aee6:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801aeec:	1c5a      	adds	r2, r3, #1
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	691b      	ldr	r3, [r3, #16]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d00c      	beq.n	801af14 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801aefe:	683a      	ldr	r2, [r7, #0]
 801af00:	429a      	cmp	r2, r3
 801af02:	d304      	bcc.n	801af0e <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	695b      	ldr	r3, [r3, #20]
 801af08:	683a      	ldr	r2, [r7, #0]
 801af0a:	429a      	cmp	r2, r3
 801af0c:	d902      	bls.n	801af14 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	2201      	movs	r2, #1
 801af12:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	33ec      	adds	r3, #236	; 0xec
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	6878      	ldr	r0, [r7, #4]
 801af1e:	4798      	blx	r3
}
 801af20:	bf00      	nop
 801af22:	3708      	adds	r7, #8
 801af24:	46bd      	mov	sp, r7
 801af26:	bd80      	pop	{r7, pc}

0801af28 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801af28:	b480      	push	{r7}
 801af2a:	b083      	sub	sp, #12
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	2201      	movs	r2, #1
 801af34:	735a      	strb	r2, [r3, #13]
}
 801af36:	bf00      	nop
 801af38:	370c      	adds	r7, #12
 801af3a:	46bd      	mov	sp, r7
 801af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af40:	4770      	bx	lr

0801af42 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801af42:	b480      	push	{r7}
 801af44:	b083      	sub	sp, #12
 801af46:	af00      	add	r7, sp, #0
 801af48:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	2201      	movs	r2, #1
 801af4e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801af52:	bf00      	nop
 801af54:	370c      	adds	r7, #12
 801af56:	46bd      	mov	sp, r7
 801af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af5c:	4770      	bx	lr

0801af5e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801af5e:	b580      	push	{r7, lr}
 801af60:	b084      	sub	sp, #16
 801af62:	af00      	add	r7, sp, #0
 801af64:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801af6c:	f083 0301 	eor.w	r3, r3, #1
 801af70:	b2da      	uxtb	r2, r3
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	2200      	movs	r2, #0
 801af7c:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	69db      	ldr	r3, [r3, #28]
 801af82:	4618      	mov	r0, r3
 801af84:	f004 fb03 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801af88:	60f8      	str	r0, [r7, #12]
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d00d      	beq.n	801afac <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801af90:	68f9      	ldr	r1, [r7, #12]
 801af92:	6878      	ldr	r0, [r7, #4]
 801af94:	f000 fbf0 	bl	801b778 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801af98:	4603      	mov	r3, r0
 801af9a:	2100      	movs	r1, #0
 801af9c:	4618      	mov	r0, r3
 801af9e:	f000 fc11 	bl	801b7c4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801afa2:	68f8      	ldr	r0, [r7, #12]
 801afa4:	f004 f9fc 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801afa8:	60f8      	str	r0, [r7, #12]
 801afaa:	e7ee      	b.n	801af8a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	6a1b      	ldr	r3, [r3, #32]
 801afb0:	4618      	mov	r0, r3
 801afb2:	f004 faec 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801afb6:	60f8      	str	r0, [r7, #12]
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	d00d      	beq.n	801afda <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801afbe:	68f9      	ldr	r1, [r7, #12]
 801afc0:	6878      	ldr	r0, [r7, #4]
 801afc2:	f000 fbd9 	bl	801b778 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801afc6:	4603      	mov	r3, r0
 801afc8:	2100      	movs	r1, #0
 801afca:	4618      	mov	r0, r3
 801afcc:	f000 fbfa 	bl	801b7c4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801afd0:	68f8      	ldr	r0, [r7, #12]
 801afd2:	f004 f9e5 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801afd6:	60f8      	str	r0, [r7, #12]
 801afd8:	e7ee      	b.n	801afb8 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801afda:	bf00      	nop
 801afdc:	3710      	adds	r7, #16
 801afde:	46bd      	mov	sp, r7
 801afe0:	bd80      	pop	{r7, pc}

0801afe2 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801afe2:	b590      	push	{r4, r7, lr}
 801afe4:	b087      	sub	sp, #28
 801afe6:	af00      	add	r7, sp, #0
 801afe8:	6078      	str	r0, [r7, #4]
 801afea:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	69db      	ldr	r3, [r3, #28]
 801aff0:	4618      	mov	r0, r3
 801aff2:	f004 facc 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801aff6:	6178      	str	r0, [r7, #20]
 801aff8:	697b      	ldr	r3, [r7, #20]
 801affa:	2b00      	cmp	r3, #0
 801affc:	d022      	beq.n	801b044 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801affe:	f107 030c 	add.w	r3, r7, #12
 801b002:	6979      	ldr	r1, [r7, #20]
 801b004:	4618      	mov	r0, r3
 801b006:	f004 fa06 	bl	801f416 <_ZNK22MockNamedValueListNode7getNameEv>
 801b00a:	f107 030c 	add.w	r3, r7, #12
 801b00e:	6839      	ldr	r1, [r7, #0]
 801b010:	4618      	mov	r0, r3
 801b012:	f7f2 f9b0 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801b016:	4603      	mov	r3, r0
 801b018:	461c      	mov	r4, r3
 801b01a:	f107 030c 	add.w	r3, r7, #12
 801b01e:	4618      	mov	r0, r3
 801b020:	f7f2 f99d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b024:	2c00      	cmp	r4, #0
 801b026:	d008      	beq.n	801b03a <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801b028:	6979      	ldr	r1, [r7, #20]
 801b02a:	6878      	ldr	r0, [r7, #4]
 801b02c:	f000 fba4 	bl	801b778 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b030:	4603      	mov	r3, r0
 801b032:	2101      	movs	r1, #1
 801b034:	4618      	mov	r0, r3
 801b036:	f000 fbc5 	bl	801b7c4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801b03a:	6978      	ldr	r0, [r7, #20]
 801b03c:	f004 f9b0 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801b040:	6178      	str	r0, [r7, #20]
 801b042:	e7d9      	b.n	801aff8 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801b044:	bf00      	nop
 801b046:	371c      	adds	r7, #28
 801b048:	46bd      	mov	sp, r7
 801b04a:	bd90      	pop	{r4, r7, pc}

0801b04c <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801b04c:	b590      	push	{r4, r7, lr}
 801b04e:	b087      	sub	sp, #28
 801b050:	af00      	add	r7, sp, #0
 801b052:	6078      	str	r0, [r7, #4]
 801b054:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	6a1b      	ldr	r3, [r3, #32]
 801b05a:	4618      	mov	r0, r3
 801b05c:	f004 fa97 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801b060:	6178      	str	r0, [r7, #20]
 801b062:	697b      	ldr	r3, [r7, #20]
 801b064:	2b00      	cmp	r3, #0
 801b066:	d022      	beq.n	801b0ae <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801b068:	f107 030c 	add.w	r3, r7, #12
 801b06c:	6979      	ldr	r1, [r7, #20]
 801b06e:	4618      	mov	r0, r3
 801b070:	f004 f9d1 	bl	801f416 <_ZNK22MockNamedValueListNode7getNameEv>
 801b074:	f107 030c 	add.w	r3, r7, #12
 801b078:	6839      	ldr	r1, [r7, #0]
 801b07a:	4618      	mov	r0, r3
 801b07c:	f7f2 f97b 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801b080:	4603      	mov	r3, r0
 801b082:	461c      	mov	r4, r3
 801b084:	f107 030c 	add.w	r3, r7, #12
 801b088:	4618      	mov	r0, r3
 801b08a:	f7f2 f968 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b08e:	2c00      	cmp	r4, #0
 801b090:	d008      	beq.n	801b0a4 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801b092:	6979      	ldr	r1, [r7, #20]
 801b094:	6878      	ldr	r0, [r7, #4]
 801b096:	f000 fb6f 	bl	801b778 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b09a:	4603      	mov	r3, r0
 801b09c:	2101      	movs	r1, #1
 801b09e:	4618      	mov	r0, r3
 801b0a0:	f000 fb90 	bl	801b7c4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801b0a4:	6978      	ldr	r0, [r7, #20]
 801b0a6:	f004 f97b 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801b0aa:	6178      	str	r0, [r7, #20]
 801b0ac:	e7d9      	b.n	801b062 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801b0ae:	bf00      	nop
 801b0b0:	371c      	adds	r7, #28
 801b0b2:	46bd      	mov	sp, r7
 801b0b4:	bd90      	pop	{r4, r7, pc}
	...

0801b0b8 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b086      	sub	sp, #24
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	60f8      	str	r0, [r7, #12]
 801b0c0:	60b9      	str	r1, [r7, #8]
 801b0c2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b0c4:	68bb      	ldr	r3, [r7, #8]
 801b0c6:	69db      	ldr	r3, [r3, #28]
 801b0c8:	6879      	ldr	r1, [r7, #4]
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	f004 fa30 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b0d0:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801b0d2:	697b      	ldr	r3, [r7, #20]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d005      	beq.n	801b0e4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	6979      	ldr	r1, [r7, #20]
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f7ff fa0b 	bl	801a4f8 <_Z10StringFromRK14MockNamedValue>
 801b0e2:	e003      	b.n	801b0ec <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801b0e4:	4903      	ldr	r1, [pc, #12]	; (801b0f4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801b0e6:	68f8      	ldr	r0, [r7, #12]
 801b0e8:	f7f1 fd81 	bl	800cbee <_ZN12SimpleStringC1EPKc>
}
 801b0ec:	68f8      	ldr	r0, [r7, #12]
 801b0ee:	3718      	adds	r7, #24
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	bd80      	pop	{r7, pc}
 801b0f4:	08026160 	.word	0x08026160

0801b0f8 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801b0f8:	b590      	push	{r4, r7, lr}
 801b0fa:	b087      	sub	sp, #28
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
 801b100:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	69dc      	ldr	r4, [r3, #28]
 801b106:	683b      	ldr	r3, [r7, #0]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	335c      	adds	r3, #92	; 0x5c
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	f107 020c 	add.w	r2, r7, #12
 801b112:	6839      	ldr	r1, [r7, #0]
 801b114:	4610      	mov	r0, r2
 801b116:	4798      	blx	r3
 801b118:	f107 030c 	add.w	r3, r7, #12
 801b11c:	4619      	mov	r1, r3
 801b11e:	4620      	mov	r0, r4
 801b120:	f004 fa06 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b124:	6178      	str	r0, [r7, #20]
 801b126:	f107 030c 	add.w	r3, r7, #12
 801b12a:	4618      	mov	r0, r3
 801b12c:	f7f2 f917 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801b130:	697b      	ldr	r3, [r7, #20]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d00d      	beq.n	801b152 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801b136:	697b      	ldr	r3, [r7, #20]
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	3350      	adds	r3, #80	; 0x50
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	6839      	ldr	r1, [r7, #0]
 801b140:	6978      	ldr	r0, [r7, #20]
 801b142:	4798      	blx	r3
 801b144:	4603      	mov	r3, r0
 801b146:	2b00      	cmp	r3, #0
 801b148:	bf14      	ite	ne
 801b14a:	2301      	movne	r3, #1
 801b14c:	2300      	moveq	r3, #0
 801b14e:	b2db      	uxtb	r3, r3
 801b150:	e006      	b.n	801b160 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	7b1b      	ldrb	r3, [r3, #12]
 801b156:	2b00      	cmp	r3, #0
 801b158:	bf14      	ite	ne
 801b15a:	2301      	movne	r3, #1
 801b15c:	2300      	moveq	r3, #0
 801b15e:	b2db      	uxtb	r3, r3
}
 801b160:	4618      	mov	r0, r3
 801b162:	371c      	adds	r7, #28
 801b164:	46bd      	mov	sp, r7
 801b166:	bd90      	pop	{r4, r7, pc}

0801b168 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801b168:	b590      	push	{r4, r7, lr}
 801b16a:	b087      	sub	sp, #28
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	6078      	str	r0, [r7, #4]
 801b170:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	6a1c      	ldr	r4, [r3, #32]
 801b176:	683b      	ldr	r3, [r7, #0]
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	335c      	adds	r3, #92	; 0x5c
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	f107 020c 	add.w	r2, r7, #12
 801b182:	6839      	ldr	r1, [r7, #0]
 801b184:	4610      	mov	r0, r2
 801b186:	4798      	blx	r3
 801b188:	f107 030c 	add.w	r3, r7, #12
 801b18c:	4619      	mov	r1, r3
 801b18e:	4620      	mov	r0, r4
 801b190:	f004 f9ce 	bl	801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b194:	6178      	str	r0, [r7, #20]
 801b196:	f107 030c 	add.w	r3, r7, #12
 801b19a:	4618      	mov	r0, r3
 801b19c:	f7f2 f8df 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801b1a0:	697b      	ldr	r3, [r7, #20]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d00d      	beq.n	801b1c2 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801b1a6:	697b      	ldr	r3, [r7, #20]
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	3354      	adds	r3, #84	; 0x54
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	6839      	ldr	r1, [r7, #0]
 801b1b0:	6978      	ldr	r0, [r7, #20]
 801b1b2:	4798      	blx	r3
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	bf14      	ite	ne
 801b1ba:	2301      	movne	r3, #1
 801b1bc:	2300      	moveq	r3, #0
 801b1be:	b2db      	uxtb	r3, r3
 801b1c0:	e006      	b.n	801b1d0 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	7b1b      	ldrb	r3, [r3, #12]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	bf14      	ite	ne
 801b1ca:	2301      	movne	r3, #1
 801b1cc:	2300      	moveq	r3, #0
 801b1ce:	b2db      	uxtb	r3, r3
}
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	371c      	adds	r7, #28
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	bd90      	pop	{r4, r7, pc}

0801b1d8 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1da:	b0a1      	sub	sp, #132	; 0x84
 801b1dc:	af02      	add	r7, sp, #8
 801b1de:	6078      	str	r0, [r7, #4]
 801b1e0:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b1e2:	49bc      	ldr	r1, [pc, #752]	; (801b4d4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b1e4:	6878      	ldr	r0, [r7, #4]
 801b1e6:	f7f1 fd02 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801b1ea:	683b      	ldr	r3, [r7, #0]
 801b1ec:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d012      	beq.n	801b21a <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801b1f4:	683b      	ldr	r3, [r7, #0]
 801b1f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801b1f8:	f107 030c 	add.w	r3, r7, #12
 801b1fc:	49b6      	ldr	r1, [pc, #728]	; (801b4d8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801b1fe:	4618      	mov	r0, r3
 801b200:	f7f2 fdb4 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801b204:	f107 030c 	add.w	r3, r7, #12
 801b208:	4619      	mov	r1, r3
 801b20a:	6878      	ldr	r0, [r7, #4]
 801b20c:	f7f1 fd5b 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801b210:	f107 030c 	add.w	r3, r7, #12
 801b214:	4618      	mov	r0, r3
 801b216:	f7f2 f8a2 	bl	800d35e <_ZN12SimpleStringD1Ev>

    str += getName();
 801b21a:	f107 0314 	add.w	r3, r7, #20
 801b21e:	6839      	ldr	r1, [r7, #0]
 801b220:	4618      	mov	r0, r3
 801b222:	f7ff f989 	bl	801a538 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801b226:	f107 0314 	add.w	r3, r7, #20
 801b22a:	4619      	mov	r1, r3
 801b22c:	6878      	ldr	r0, [r7, #4]
 801b22e:	f7f2 f913 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801b232:	f107 0314 	add.w	r3, r7, #20
 801b236:	4618      	mov	r0, r3
 801b238:	f7f2 f891 	bl	800d35e <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801b23c:	49a7      	ldr	r1, [pc, #668]	; (801b4dc <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801b23e:	6878      	ldr	r0, [r7, #4]
 801b240:	f7f2 f91c 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801b244:	683b      	ldr	r3, [r7, #0]
 801b246:	691b      	ldr	r3, [r3, #16]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d02d      	beq.n	801b2a8 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801b24c:	683b      	ldr	r3, [r7, #0]
 801b24e:	691a      	ldr	r2, [r3, #16]
 801b250:	683b      	ldr	r3, [r7, #0]
 801b252:	695b      	ldr	r3, [r3, #20]
 801b254:	429a      	cmp	r2, r3
 801b256:	d113      	bne.n	801b280 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801b258:	683b      	ldr	r3, [r7, #0]
 801b25a:	691a      	ldr	r2, [r3, #16]
 801b25c:	f107 031c 	add.w	r3, r7, #28
 801b260:	499f      	ldr	r1, [pc, #636]	; (801b4e0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801b262:	4618      	mov	r0, r3
 801b264:	f7f2 fd82 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801b268:	f107 031c 	add.w	r3, r7, #28
 801b26c:	4619      	mov	r1, r3
 801b26e:	6878      	ldr	r0, [r7, #4]
 801b270:	f7f2 f8f2 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801b274:	f107 031c 	add.w	r3, r7, #28
 801b278:	4618      	mov	r0, r3
 801b27a:	f7f2 f870 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b27e:	e013      	b.n	801b2a8 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801b280:	683b      	ldr	r3, [r7, #0]
 801b282:	691a      	ldr	r2, [r3, #16]
 801b284:	683b      	ldr	r3, [r7, #0]
 801b286:	695b      	ldr	r3, [r3, #20]
 801b288:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b28c:	4995      	ldr	r1, [pc, #596]	; (801b4e4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801b28e:	f7f2 fd6d 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801b292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b296:	4619      	mov	r1, r3
 801b298:	6878      	ldr	r0, [r7, #4]
 801b29a:	f7f2 f8dd 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801b29e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	f7f2 f85b 	bl	800d35e <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801b2a8:	683b      	ldr	r3, [r7, #0]
 801b2aa:	69db      	ldr	r3, [r3, #28]
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	f004 f96e 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801b2b2:	4603      	mov	r3, r0
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d109      	bne.n	801b2cc <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801b2b8:	683b      	ldr	r3, [r7, #0]
 801b2ba:	6a1b      	ldr	r3, [r3, #32]
 801b2bc:	4618      	mov	r0, r3
 801b2be:	f004 f966 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801b2c2:	4603      	mov	r3, r0
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d101      	bne.n	801b2cc <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801b2c8:	2301      	movs	r3, #1
 801b2ca:	e000      	b.n	801b2ce <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d00b      	beq.n	801b2ea <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801b2d2:	683b      	ldr	r3, [r7, #0]
 801b2d4:	7b1b      	ldrb	r3, [r3, #12]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d001      	beq.n	801b2de <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801b2da:	4b83      	ldr	r3, [pc, #524]	; (801b4e8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801b2dc:	e000      	b.n	801b2e0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801b2de:	4b83      	ldr	r3, [pc, #524]	; (801b4ec <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801b2e0:	4619      	mov	r1, r3
 801b2e2:	6878      	ldr	r0, [r7, #4]
 801b2e4:	f7f2 f8ca 	bl	800d47c <_ZN12SimpleStringpLEPKc>
 801b2e8:	e0e3      	b.n	801b4b2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801b2ea:	683b      	ldr	r3, [r7, #0]
 801b2ec:	69db      	ldr	r3, [r3, #28]
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	f004 f94d 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801b2f4:	6778      	str	r0, [r7, #116]	; 0x74
 801b2f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d069      	beq.n	801b3d0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801b2fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b300:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b302:	4618      	mov	r0, r3
 801b304:	f004 f89a 	bl	801f43c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b308:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b30c:	4618      	mov	r0, r3
 801b30e:	f7f1 fff9 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801b312:	4605      	mov	r5, r0
 801b314:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b318:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b31a:	4618      	mov	r0, r3
 801b31c:	f004 f87b 	bl	801f416 <_ZNK22MockNamedValueListNode7getNameEv>
 801b320:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b324:	4618      	mov	r0, r3
 801b326:	f7f1 ffed 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801b32a:	4606      	mov	r6, r0
 801b32c:	683b      	ldr	r3, [r7, #0]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	33a4      	adds	r3, #164	; 0xa4
 801b332:	681c      	ldr	r4, [r3, #0]
 801b334:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b338:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b33a:	4618      	mov	r0, r3
 801b33c:	f004 f86b 	bl	801f416 <_ZNK22MockNamedValueListNode7getNameEv>
 801b340:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b344:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b348:	6839      	ldr	r1, [r7, #0]
 801b34a:	4618      	mov	r0, r3
 801b34c:	47a0      	blx	r4
 801b34e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b352:	4618      	mov	r0, r3
 801b354:	f7f1 ffd6 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801b358:	4603      	mov	r3, r0
 801b35a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b35e:	9300      	str	r3, [sp, #0]
 801b360:	4633      	mov	r3, r6
 801b362:	462a      	mov	r2, r5
 801b364:	4962      	ldr	r1, [pc, #392]	; (801b4f0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801b366:	f7f2 fd01 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801b36a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b36e:	4619      	mov	r1, r3
 801b370:	6878      	ldr	r0, [r7, #4]
 801b372:	f7f2 f871 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801b376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b37a:	4618      	mov	r0, r3
 801b37c:	f7f1 ffef 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b380:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b384:	4618      	mov	r0, r3
 801b386:	f7f1 ffea 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b38a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b38e:	4618      	mov	r0, r3
 801b390:	f7f1 ffe5 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b394:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b398:	4618      	mov	r0, r3
 801b39a:	f7f1 ffe0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b39e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	f7f1 ffdb 	bl	800d35e <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801b3a8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b3aa:	f003 fff9 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801b3ae:	4603      	mov	r3, r0
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	bf14      	ite	ne
 801b3b4:	2301      	movne	r3, #1
 801b3b6:	2300      	moveq	r3, #0
 801b3b8:	b2db      	uxtb	r3, r3
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d003      	beq.n	801b3c6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801b3be:	494d      	ldr	r1, [pc, #308]	; (801b4f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b3c0:	6878      	ldr	r0, [r7, #4]
 801b3c2:	f7f2 f85b 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801b3c6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b3c8:	f003 ffea 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801b3cc:	6778      	str	r0, [r7, #116]	; 0x74
 801b3ce:	e792      	b.n	801b2f6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801b3d0:	683b      	ldr	r3, [r7, #0]
 801b3d2:	69db      	ldr	r3, [r3, #28]
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	f004 f8da 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801b3da:	4603      	mov	r3, r0
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d009      	beq.n	801b3f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801b3e0:	683b      	ldr	r3, [r7, #0]
 801b3e2:	6a1b      	ldr	r3, [r3, #32]
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	f004 f8d2 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801b3ea:	4603      	mov	r3, r0
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d001      	beq.n	801b3f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801b3f0:	2301      	movs	r3, #1
 801b3f2:	e000      	b.n	801b3f6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d003      	beq.n	801b402 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801b3fa:	493e      	ldr	r1, [pc, #248]	; (801b4f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b3fc:	6878      	ldr	r0, [r7, #4]
 801b3fe:	f7f2 f83d 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801b402:	683b      	ldr	r3, [r7, #0]
 801b404:	6a1b      	ldr	r3, [r3, #32]
 801b406:	4618      	mov	r0, r3
 801b408:	f004 f8c1 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801b40c:	6778      	str	r0, [r7, #116]	; 0x74
 801b40e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b410:	2b00      	cmp	r3, #0
 801b412:	d046      	beq.n	801b4a2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801b414:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b418:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b41a:	4618      	mov	r0, r3
 801b41c:	f004 f80e 	bl	801f43c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b420:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b424:	4618      	mov	r0, r3
 801b426:	f7f1 ff6d 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801b42a:	4604      	mov	r4, r0
 801b42c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b430:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b432:	4618      	mov	r0, r3
 801b434:	f003 ffef 	bl	801f416 <_ZNK22MockNamedValueListNode7getNameEv>
 801b438:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b43c:	4618      	mov	r0, r3
 801b43e:	f7f1 ff61 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801b442:	4603      	mov	r3, r0
 801b444:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801b448:	4622      	mov	r2, r4
 801b44a:	492b      	ldr	r1, [pc, #172]	; (801b4f8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801b44c:	f7f2 fc8e 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801b450:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b454:	4619      	mov	r1, r3
 801b456:	6878      	ldr	r0, [r7, #4]
 801b458:	f7f1 fffe 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801b45c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b460:	4618      	mov	r0, r3
 801b462:	f7f1 ff7c 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b466:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b46a:	4618      	mov	r0, r3
 801b46c:	f7f1 ff77 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b470:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b474:	4618      	mov	r0, r3
 801b476:	f7f1 ff72 	bl	800d35e <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801b47a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b47c:	f003 ff90 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801b480:	4603      	mov	r3, r0
 801b482:	2b00      	cmp	r3, #0
 801b484:	bf14      	ite	ne
 801b486:	2301      	movne	r3, #1
 801b488:	2300      	moveq	r3, #0
 801b48a:	b2db      	uxtb	r3, r3
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d003      	beq.n	801b498 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801b490:	4918      	ldr	r1, [pc, #96]	; (801b4f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b492:	6878      	ldr	r0, [r7, #4]
 801b494:	f7f1 fff2 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801b498:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b49a:	f003 ff81 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801b49e:	6778      	str	r0, [r7, #116]	; 0x74
 801b4a0:	e7b5      	b.n	801b40e <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801b4a2:	683b      	ldr	r3, [r7, #0]
 801b4a4:	7b1b      	ldrb	r3, [r3, #12]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d003      	beq.n	801b4b2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801b4aa:	4914      	ldr	r1, [pc, #80]	; (801b4fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801b4ac:	6878      	ldr	r0, [r7, #4]
 801b4ae:	f7f1 ffe5 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b4b2:	683b      	ldr	r3, [r7, #0]
 801b4b4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b4b6:	683b      	ldr	r3, [r7, #0]
 801b4b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b4ba:	2b01      	cmp	r3, #1
 801b4bc:	d101      	bne.n	801b4c2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801b4be:	4c05      	ldr	r4, [pc, #20]	; (801b4d4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b4c0:	e000      	b.n	801b4c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801b4c2:	4c0f      	ldr	r4, [pc, #60]	; (801b500 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801b4c4:	683b      	ldr	r3, [r7, #0]
 801b4c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b4c8:	683a      	ldr	r2, [r7, #0]
 801b4ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b4cc:	2a01      	cmp	r2, #1
 801b4ce:	d119      	bne.n	801b504 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801b4d0:	4a00      	ldr	r2, [pc, #0]	; (801b4d4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b4d2:	e018      	b.n	801b506 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801b4d4:	080260f4 	.word	0x080260f4
 801b4d8:	08026168 	.word	0x08026168
 801b4dc:	08026180 	.word	0x08026180
 801b4e0:	08026188 	.word	0x08026188
 801b4e4:	080261a8 	.word	0x080261a8
 801b4e8:	080261cc 	.word	0x080261cc
 801b4ec:	080261e4 	.word	0x080261e4
 801b4f0:	080261f4 	.word	0x080261f4
 801b4f4:	08026200 	.word	0x08026200
 801b4f8:	08026204 	.word	0x08026204
 801b4fc:	08026214 	.word	0x08026214
 801b500:	08026234 	.word	0x08026234
 801b504:	4a0c      	ldr	r2, [pc, #48]	; (801b538 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801b506:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801b50a:	9201      	str	r2, [sp, #4]
 801b50c:	9300      	str	r3, [sp, #0]
 801b50e:	4623      	mov	r3, r4
 801b510:	460a      	mov	r2, r1
 801b512:	490a      	ldr	r1, [pc, #40]	; (801b53c <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801b514:	f7f2 fc2a 	bl	800dd6c <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b518:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b51c:	4619      	mov	r1, r3
 801b51e:	6878      	ldr	r0, [r7, #4]
 801b520:	f7f1 ff9a 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801b524:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b528:	4618      	mov	r0, r3
 801b52a:	f7f1 ff18 	bl	800d35e <_ZN12SimpleStringD1Ev>

    return str;
 801b52e:	bf00      	nop
}
 801b530:	6878      	ldr	r0, [r7, #4]
 801b532:	377c      	adds	r7, #124	; 0x7c
 801b534:	46bd      	mov	sp, r7
 801b536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b538:	08026234 	.word	0x08026234
 801b53c:	08026238 	.word	0x08026238

0801b540 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801b540:	b590      	push	{r4, r7, lr}
 801b542:	b095      	sub	sp, #84	; 0x54
 801b544:	af00      	add	r7, sp, #0
 801b546:	6078      	str	r0, [r7, #4]
 801b548:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b54a:	496c      	ldr	r1, [pc, #432]	; (801b6fc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b54c:	6878      	ldr	r0, [r7, #4]
 801b54e:	f7f1 fb4e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801b552:	683b      	ldr	r3, [r7, #0]
 801b554:	69db      	ldr	r3, [r3, #28]
 801b556:	4618      	mov	r0, r3
 801b558:	f004 f819 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801b55c:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b55e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b560:	2b00      	cmp	r3, #0
 801b562:	d05e      	beq.n	801b622 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801b564:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b566:	6838      	ldr	r0, [r7, #0]
 801b568:	f000 f906 	bl	801b778 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b56c:	4603      	mov	r3, r0
 801b56e:	4618      	mov	r0, r3
 801b570:	f000 f938 	bl	801b7e4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b574:	4603      	mov	r3, r0
 801b576:	f083 0301 	eor.w	r3, r3, #1
 801b57a:	b2db      	uxtb	r3, r3
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d04b      	beq.n	801b618 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801b580:	f107 030c 	add.w	r3, r7, #12
 801b584:	495d      	ldr	r1, [pc, #372]	; (801b6fc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b586:	4618      	mov	r0, r3
 801b588:	f7f1 fb31 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801b58c:	f107 030c 	add.w	r3, r7, #12
 801b590:	4619      	mov	r1, r3
 801b592:	6878      	ldr	r0, [r7, #4]
 801b594:	f7f1 ff34 	bl	800d400 <_ZneRK12SimpleStringS1_>
 801b598:	4603      	mov	r3, r0
 801b59a:	461c      	mov	r4, r3
 801b59c:	f107 030c 	add.w	r3, r7, #12
 801b5a0:	4618      	mov	r0, r3
 801b5a2:	f7f1 fedc 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b5a6:	2c00      	cmp	r4, #0
 801b5a8:	d003      	beq.n	801b5b2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801b5aa:	4955      	ldr	r1, [pc, #340]	; (801b700 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801b5ac:	6878      	ldr	r0, [r7, #4]
 801b5ae:	f7f1 ff65 	bl	800d47c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801b5b2:	f107 031c 	add.w	r3, r7, #28
 801b5b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	f003 ff3f 	bl	801f43c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b5be:	f107 031c 	add.w	r3, r7, #28
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	f7f1 fe9e 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801b5c8:	4604      	mov	r4, r0
 801b5ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b5ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f003 ff20 	bl	801f416 <_ZNK22MockNamedValueListNode7getNameEv>
 801b5d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7f1 fe92 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801b5e0:	4603      	mov	r3, r0
 801b5e2:	f107 0014 	add.w	r0, r7, #20
 801b5e6:	4622      	mov	r2, r4
 801b5e8:	4946      	ldr	r1, [pc, #280]	; (801b704 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801b5ea:	f7f2 fbbf 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801b5ee:	f107 0314 	add.w	r3, r7, #20
 801b5f2:	4619      	mov	r1, r3
 801b5f4:	6878      	ldr	r0, [r7, #4]
 801b5f6:	f7f1 ff2f 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801b5fa:	f107 0314 	add.w	r3, r7, #20
 801b5fe:	4618      	mov	r0, r3
 801b600:	f7f1 fead 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b608:	4618      	mov	r0, r3
 801b60a:	f7f1 fea8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b60e:	f107 031c 	add.w	r3, r7, #28
 801b612:	4618      	mov	r0, r3
 801b614:	f7f1 fea3 	bl	800d35e <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801b618:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b61a:	f003 fec1 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801b61e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b620:	e79d      	b.n	801b55e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801b622:	683b      	ldr	r3, [r7, #0]
 801b624:	6a1b      	ldr	r3, [r3, #32]
 801b626:	4618      	mov	r0, r3
 801b628:	f003 ffb1 	bl	801f58e <_ZN18MockNamedValueList5beginEv>
 801b62c:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b630:	2b00      	cmp	r3, #0
 801b632:	d05e      	beq.n	801b6f2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801b634:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b636:	6838      	ldr	r0, [r7, #0]
 801b638:	f000 f89e 	bl	801b778 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b63c:	4603      	mov	r3, r0
 801b63e:	4618      	mov	r0, r3
 801b640:	f000 f8d0 	bl	801b7e4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b644:	4603      	mov	r3, r0
 801b646:	f083 0301 	eor.w	r3, r3, #1
 801b64a:	b2db      	uxtb	r3, r3
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d04b      	beq.n	801b6e8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801b650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b654:	4929      	ldr	r1, [pc, #164]	; (801b6fc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b656:	4618      	mov	r0, r3
 801b658:	f7f1 fac9 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801b65c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b660:	4619      	mov	r1, r3
 801b662:	6878      	ldr	r0, [r7, #4]
 801b664:	f7f1 fecc 	bl	800d400 <_ZneRK12SimpleStringS1_>
 801b668:	4603      	mov	r3, r0
 801b66a:	461c      	mov	r4, r3
 801b66c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b670:	4618      	mov	r0, r3
 801b672:	f7f1 fe74 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b676:	2c00      	cmp	r4, #0
 801b678:	d003      	beq.n	801b682 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801b67a:	4921      	ldr	r1, [pc, #132]	; (801b700 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801b67c:	6878      	ldr	r0, [r7, #4]
 801b67e:	f7f1 fefd 	bl	800d47c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801b682:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b686:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b688:	4618      	mov	r0, r3
 801b68a:	f003 fed7 	bl	801f43c <_ZNK22MockNamedValueListNode7getTypeEv>
 801b68e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b692:	4618      	mov	r0, r3
 801b694:	f7f1 fe36 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801b698:	4604      	mov	r4, r0
 801b69a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b69e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	f003 feb8 	bl	801f416 <_ZNK22MockNamedValueListNode7getNameEv>
 801b6a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	f7f1 fe2a 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801b6b0:	4603      	mov	r3, r0
 801b6b2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801b6b6:	4622      	mov	r2, r4
 801b6b8:	4912      	ldr	r1, [pc, #72]	; (801b704 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801b6ba:	f7f2 fb57 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801b6be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b6c2:	4619      	mov	r1, r3
 801b6c4:	6878      	ldr	r0, [r7, #4]
 801b6c6:	f7f1 fec7 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801b6ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b6ce:	4618      	mov	r0, r3
 801b6d0:	f7f1 fe45 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b6d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b6d8:	4618      	mov	r0, r3
 801b6da:	f7f1 fe40 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b6de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f7f1 fe3b 	bl	800d35e <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801b6e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b6ea:	f003 fe59 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801b6ee:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b6f0:	e79d      	b.n	801b62e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801b6f2:	bf00      	nop
}
 801b6f4:	6878      	ldr	r0, [r7, #4]
 801b6f6:	3754      	adds	r7, #84	; 0x54
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	bd90      	pop	{r4, r7, pc}
 801b6fc:	080260f4 	.word	0x080260f4
 801b700:	08026200 	.word	0x08026200
 801b704:	08026260 	.word	0x08026260

0801b708 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801b708:	b590      	push	{r4, r7, lr}
 801b70a:	b085      	sub	sp, #20
 801b70c:	af00      	add	r7, sp, #0
 801b70e:	6078      	str	r0, [r7, #4]
 801b710:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801b712:	f107 0308 	add.w	r3, r7, #8
 801b716:	6879      	ldr	r1, [r7, #4]
 801b718:	4618      	mov	r0, r3
 801b71a:	f7fe ff0d 	bl	801a538 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801b71e:	f107 0308 	add.w	r3, r7, #8
 801b722:	4619      	mov	r1, r3
 801b724:	6838      	ldr	r0, [r7, #0]
 801b726:	f7f1 fe26 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801b72a:	4603      	mov	r3, r0
 801b72c:	461c      	mov	r4, r3
 801b72e:	f107 0308 	add.w	r3, r7, #8
 801b732:	4618      	mov	r0, r3
 801b734:	f7f1 fe13 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801b738:	4623      	mov	r3, r4
}
 801b73a:	4618      	mov	r0, r3
 801b73c:	3714      	adds	r7, #20
 801b73e:	46bd      	mov	sp, r7
 801b740:	bd90      	pop	{r4, r7, pc}

0801b742 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801b742:	b480      	push	{r7}
 801b744:	b083      	sub	sp, #12
 801b746:	af00      	add	r7, sp, #0
 801b748:	6078      	str	r0, [r7, #4]
 801b74a:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b752:	f083 0301 	eor.w	r3, r3, #1
 801b756:	b2db      	uxtb	r3, r3
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d104      	bne.n	801b766 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b760:	683a      	ldr	r2, [r7, #0]
 801b762:	429a      	cmp	r2, r3
 801b764:	d101      	bne.n	801b76a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801b766:	2301      	movs	r3, #1
 801b768:	e000      	b.n	801b76c <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801b76a:	2300      	movs	r3, #0
}
 801b76c:	4618      	mov	r0, r3
 801b76e:	370c      	adds	r7, #12
 801b770:	46bd      	mov	sp, r7
 801b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b776:	4770      	bx	lr

0801b778 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	b082      	sub	sp, #8
 801b77c:	af00      	add	r7, sp, #0
 801b77e:	6078      	str	r0, [r7, #4]
 801b780:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801b782:	6838      	ldr	r0, [r7, #0]
 801b784:	f003 fe18 	bl	801f3b8 <_ZN22MockNamedValueListNode4itemEv>
 801b788:	4603      	mov	r3, r0
}
 801b78a:	4618      	mov	r0, r3
 801b78c:	3708      	adds	r7, #8
 801b78e:	46bd      	mov	sp, r7
 801b790:	bd80      	pop	{r7, pc}
	...

0801b794 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801b794:	b580      	push	{r7, lr}
 801b796:	b082      	sub	sp, #8
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
 801b79c:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	6839      	ldr	r1, [r7, #0]
 801b7a2:	4618      	mov	r0, r3
 801b7a4:	f001 ff48 	bl	801d638 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b7a8:	4a05      	ldr	r2, [pc, #20]	; (801b7c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	601a      	str	r2, [r3, #0]
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	2200      	movs	r2, #0
 801b7b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	3708      	adds	r7, #8
 801b7bc:	46bd      	mov	sp, r7
 801b7be:	bd80      	pop	{r7, pc}
 801b7c0:	08029220 	.word	0x08029220

0801b7c4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801b7c4:	b480      	push	{r7}
 801b7c6:	b083      	sub	sp, #12
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]
 801b7cc:	460b      	mov	r3, r1
 801b7ce:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	78fa      	ldrb	r2, [r7, #3]
 801b7d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801b7d8:	bf00      	nop
 801b7da:	370c      	adds	r7, #12
 801b7dc:	46bd      	mov	sp, r7
 801b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e2:	4770      	bx	lr

0801b7e4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801b7e4:	b480      	push	{r7}
 801b7e6:	b083      	sub	sp, #12
 801b7e8:	af00      	add	r7, sp, #0
 801b7ea:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	370c      	adds	r7, #12
 801b7f6:	46bd      	mov	sp, r7
 801b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7fc:	4770      	bx	lr
	...

0801b800 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801b800:	b580      	push	{r7, lr}
 801b802:	b082      	sub	sp, #8
 801b804:	af00      	add	r7, sp, #0
 801b806:	6078      	str	r0, [r7, #4]
 801b808:	460b      	mov	r3, r1
 801b80a:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	3328      	adds	r3, #40	; 0x28
 801b810:	4907      	ldr	r1, [pc, #28]	; (801b830 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801b812:	4618      	mov	r0, r3
 801b814:	f002 f9b4 	bl	801db80 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	3328      	adds	r3, #40	; 0x28
 801b81c:	78fa      	ldrb	r2, [r7, #3]
 801b81e:	4611      	mov	r1, r2
 801b820:	4618      	mov	r0, r3
 801b822:	f001 ff5b 	bl	801d6dc <_ZN14MockNamedValue8setValueEb>
    return *this;
 801b826:	687b      	ldr	r3, [r7, #4]
}
 801b828:	4618      	mov	r0, r3
 801b82a:	3708      	adds	r7, #8
 801b82c:	46bd      	mov	sp, r7
 801b82e:	bd80      	pop	{r7, pc}
 801b830:	08026268 	.word	0x08026268

0801b834 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801b834:	b580      	push	{r7, lr}
 801b836:	b082      	sub	sp, #8
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
 801b83c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	3328      	adds	r3, #40	; 0x28
 801b842:	4907      	ldr	r1, [pc, #28]	; (801b860 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801b844:	4618      	mov	r0, r3
 801b846:	f002 f99b 	bl	801db80 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	3328      	adds	r3, #40	; 0x28
 801b84e:	6839      	ldr	r1, [r7, #0]
 801b850:	4618      	mov	r0, r3
 801b852:	f001 ff67 	bl	801d724 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801b856:	687b      	ldr	r3, [r7, #4]
}
 801b858:	4618      	mov	r0, r3
 801b85a:	3708      	adds	r7, #8
 801b85c:	46bd      	mov	sp, r7
 801b85e:	bd80      	pop	{r7, pc}
 801b860:	08026268 	.word	0x08026268

0801b864 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b082      	sub	sp, #8
 801b868:	af00      	add	r7, sp, #0
 801b86a:	6078      	str	r0, [r7, #4]
 801b86c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	3328      	adds	r3, #40	; 0x28
 801b872:	4907      	ldr	r1, [pc, #28]	; (801b890 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801b874:	4618      	mov	r0, r3
 801b876:	f002 f983 	bl	801db80 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	3328      	adds	r3, #40	; 0x28
 801b87e:	6839      	ldr	r1, [r7, #0]
 801b880:	4618      	mov	r0, r3
 801b882:	f001 ff71 	bl	801d768 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801b886:	687b      	ldr	r3, [r7, #4]
}
 801b888:	4618      	mov	r0, r3
 801b88a:	3708      	adds	r7, #8
 801b88c:	46bd      	mov	sp, r7
 801b88e:	bd80      	pop	{r7, pc}
 801b890:	08026268 	.word	0x08026268

0801b894 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801b894:	b580      	push	{r7, lr}
 801b896:	b082      	sub	sp, #8
 801b898:	af00      	add	r7, sp, #0
 801b89a:	6078      	str	r0, [r7, #4]
 801b89c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	3328      	adds	r3, #40	; 0x28
 801b8a2:	4907      	ldr	r1, [pc, #28]	; (801b8c0 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	f002 f96b 	bl	801db80 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	3328      	adds	r3, #40	; 0x28
 801b8ae:	6839      	ldr	r1, [r7, #0]
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	f001 ff7b 	bl	801d7ac <_ZN14MockNamedValue8setValueEl>
    return *this;
 801b8b6:	687b      	ldr	r3, [r7, #4]
}
 801b8b8:	4618      	mov	r0, r3
 801b8ba:	3708      	adds	r7, #8
 801b8bc:	46bd      	mov	sp, r7
 801b8be:	bd80      	pop	{r7, pc}
 801b8c0:	08026268 	.word	0x08026268

0801b8c4 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801b8c4:	b580      	push	{r7, lr}
 801b8c6:	b082      	sub	sp, #8
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]
 801b8cc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	3328      	adds	r3, #40	; 0x28
 801b8d2:	4907      	ldr	r1, [pc, #28]	; (801b8f0 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801b8d4:	4618      	mov	r0, r3
 801b8d6:	f002 f953 	bl	801db80 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	3328      	adds	r3, #40	; 0x28
 801b8de:	6839      	ldr	r1, [r7, #0]
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	f001 ff85 	bl	801d7f0 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801b8e6:	687b      	ldr	r3, [r7, #4]
}
 801b8e8:	4618      	mov	r0, r3
 801b8ea:	3708      	adds	r7, #8
 801b8ec:	46bd      	mov	sp, r7
 801b8ee:	bd80      	pop	{r7, pc}
 801b8f0:	08026268 	.word	0x08026268

0801b8f4 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801b8f4:	b5b0      	push	{r4, r5, r7, lr}
 801b8f6:	b086      	sub	sp, #24
 801b8f8:	af02      	add	r7, sp, #8
 801b8fa:	60f8      	str	r0, [r7, #12]
 801b8fc:	1d3b      	adds	r3, r7, #4
 801b8fe:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801b902:	f7f8 fd57 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801b906:	4604      	mov	r4, r0
 801b908:	6823      	ldr	r3, [r4, #0]
 801b90a:	3368      	adds	r3, #104	; 0x68
 801b90c:	681d      	ldr	r5, [r3, #0]
 801b90e:	f7f8 fd61 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b912:	4603      	mov	r3, r0
 801b914:	9300      	str	r3, [sp, #0]
 801b916:	f240 2319 	movw	r3, #537	; 0x219
 801b91a:	4a04      	ldr	r2, [pc, #16]	; (801b92c <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801b91c:	4904      	ldr	r1, [pc, #16]	; (801b930 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801b91e:	4620      	mov	r0, r4
 801b920:	47a8      	blx	r5
    return *this;
 801b922:	68fb      	ldr	r3, [r7, #12]
}
 801b924:	4618      	mov	r0, r3
 801b926:	3710      	adds	r7, #16
 801b928:	46bd      	mov	sp, r7
 801b92a:	bdb0      	pop	{r4, r5, r7, pc}
 801b92c:	080260f8 	.word	0x080260f8
 801b930:	08026114 	.word	0x08026114

0801b934 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801b934:	b5b0      	push	{r4, r5, r7, lr}
 801b936:	b086      	sub	sp, #24
 801b938:	af02      	add	r7, sp, #8
 801b93a:	60f8      	str	r0, [r7, #12]
 801b93c:	1d3b      	adds	r3, r7, #4
 801b93e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801b942:	f7f8 fd37 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801b946:	4604      	mov	r4, r0
 801b948:	6823      	ldr	r3, [r4, #0]
 801b94a:	3368      	adds	r3, #104	; 0x68
 801b94c:	681d      	ldr	r5, [r3, #0]
 801b94e:	f7f8 fd41 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b952:	4603      	mov	r3, r0
 801b954:	9300      	str	r3, [sp, #0]
 801b956:	f240 231f 	movw	r3, #543	; 0x21f
 801b95a:	4a04      	ldr	r2, [pc, #16]	; (801b96c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801b95c:	4904      	ldr	r1, [pc, #16]	; (801b970 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801b95e:	4620      	mov	r0, r4
 801b960:	47a8      	blx	r5
    return *this;
 801b962:	68fb      	ldr	r3, [r7, #12]
}
 801b964:	4618      	mov	r0, r3
 801b966:	3710      	adds	r7, #16
 801b968:	46bd      	mov	sp, r7
 801b96a:	bdb0      	pop	{r4, r5, r7, pc}
 801b96c:	080260f8 	.word	0x080260f8
 801b970:	08026134 	.word	0x08026134

0801b974 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801b974:	b580      	push	{r7, lr}
 801b976:	b082      	sub	sp, #8
 801b978:	af00      	add	r7, sp, #0
 801b97a:	6078      	str	r0, [r7, #4]
 801b97c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	3328      	adds	r3, #40	; 0x28
 801b982:	4907      	ldr	r1, [pc, #28]	; (801b9a0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801b984:	4618      	mov	r0, r3
 801b986:	f002 f8fb 	bl	801db80 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	3328      	adds	r3, #40	; 0x28
 801b98e:	6839      	ldr	r1, [r7, #0]
 801b990:	4618      	mov	r0, r3
 801b992:	f002 f837 	bl	801da04 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801b996:	687b      	ldr	r3, [r7, #4]
}
 801b998:	4618      	mov	r0, r3
 801b99a:	3708      	adds	r7, #8
 801b99c:	46bd      	mov	sp, r7
 801b99e:	bd80      	pop	{r7, pc}
 801b9a0:	08026268 	.word	0x08026268

0801b9a4 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801b9a4:	b580      	push	{r7, lr}
 801b9a6:	b084      	sub	sp, #16
 801b9a8:	af00      	add	r7, sp, #0
 801b9aa:	60f8      	str	r0, [r7, #12]
 801b9ac:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	3328      	adds	r3, #40	; 0x28
 801b9b4:	4907      	ldr	r1, [pc, #28]	; (801b9d4 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	f002 f8e2 	bl	801db80 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	3328      	adds	r3, #40	; 0x28
 801b9c0:	ed97 0b00 	vldr	d0, [r7]
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	f001 ff73 	bl	801d8b0 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801b9ca:	68fb      	ldr	r3, [r7, #12]
}
 801b9cc:	4618      	mov	r0, r3
 801b9ce:	3710      	adds	r7, #16
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	bd80      	pop	{r7, pc}
 801b9d4:	08026268 	.word	0x08026268

0801b9d8 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801b9d8:	b580      	push	{r7, lr}
 801b9da:	b082      	sub	sp, #8
 801b9dc:	af00      	add	r7, sp, #0
 801b9de:	6078      	str	r0, [r7, #4]
 801b9e0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	3328      	adds	r3, #40	; 0x28
 801b9e6:	4907      	ldr	r1, [pc, #28]	; (801ba04 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	f002 f8c9 	bl	801db80 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	3328      	adds	r3, #40	; 0x28
 801b9f2:	6839      	ldr	r1, [r7, #0]
 801b9f4:	4618      	mov	r0, r3
 801b9f6:	f001 ff9f 	bl	801d938 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801b9fa:	687b      	ldr	r3, [r7, #4]
}
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	3708      	adds	r7, #8
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd80      	pop	{r7, pc}
 801ba04:	08026268 	.word	0x08026268

0801ba08 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	b082      	sub	sp, #8
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
 801ba10:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	3328      	adds	r3, #40	; 0x28
 801ba16:	4907      	ldr	r1, [pc, #28]	; (801ba34 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801ba18:	4618      	mov	r0, r3
 801ba1a:	f002 f8b1 	bl	801db80 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	3328      	adds	r3, #40	; 0x28
 801ba22:	6839      	ldr	r1, [r7, #0]
 801ba24:	4618      	mov	r0, r3
 801ba26:	f001 ffa9 	bl	801d97c <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801ba2a:	687b      	ldr	r3, [r7, #4]
}
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	3708      	adds	r7, #8
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bd80      	pop	{r7, pc}
 801ba34:	08026268 	.word	0x08026268

0801ba38 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b082      	sub	sp, #8
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]
 801ba40:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	3328      	adds	r3, #40	; 0x28
 801ba46:	4907      	ldr	r1, [pc, #28]	; (801ba64 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801ba48:	4618      	mov	r0, r3
 801ba4a:	f002 f899 	bl	801db80 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	3328      	adds	r3, #40	; 0x28
 801ba52:	6839      	ldr	r1, [r7, #0]
 801ba54:	4618      	mov	r0, r3
 801ba56:	f001 ffb3 	bl	801d9c0 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801ba5a:	687b      	ldr	r3, [r7, #4]
}
 801ba5c:	4618      	mov	r0, r3
 801ba5e:	3708      	adds	r7, #8
 801ba60:	46bd      	mov	sp, r7
 801ba62:	bd80      	pop	{r7, pc}
 801ba64:	08026268 	.word	0x08026268

0801ba68 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801ba68:	b480      	push	{r7}
 801ba6a:	b083      	sub	sp, #12
 801ba6c:	af00      	add	r7, sp, #0
 801ba6e:	6078      	str	r0, [r7, #4]
 801ba70:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	2201      	movs	r2, #1
 801ba76:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	2200      	movs	r2, #0
 801ba7e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	683a      	ldr	r2, [r7, #0]
 801ba86:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801ba88:	687b      	ldr	r3, [r7, #4]
}
 801ba8a:	4618      	mov	r0, r3
 801ba8c:	370c      	adds	r7, #12
 801ba8e:	46bd      	mov	sp, r7
 801ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba94:	4770      	bx	lr

0801ba96 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801ba96:	b580      	push	{r7, lr}
 801ba98:	b082      	sub	sp, #8
 801ba9a:	af00      	add	r7, sp, #0
 801ba9c:	6078      	str	r0, [r7, #4]
 801ba9e:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801baa0:	683b      	ldr	r3, [r7, #0]
 801baa2:	3328      	adds	r3, #40	; 0x28
 801baa4:	4619      	mov	r1, r3
 801baa6:	6878      	ldr	r0, [r7, #4]
 801baa8:	f7ef f946 	bl	800ad38 <_ZN14MockNamedValueC1ERKS_>
}
 801baac:	6878      	ldr	r0, [r7, #4]
 801baae:	3708      	adds	r7, #8
 801bab0:	46bd      	mov	sp, r7
 801bab2:	bd80      	pop	{r7, pc}

0801bab4 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801bab4:	b480      	push	{r7}
 801bab6:	b085      	sub	sp, #20
 801bab8:	af00      	add	r7, sp, #0
 801baba:	60f8      	str	r0, [r7, #12]
 801babc:	60b9      	str	r1, [r7, #8]
 801babe:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	68ba      	ldr	r2, [r7, #8]
 801bac4:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801bac6:	68fb      	ldr	r3, [r7, #12]
 801bac8:	687a      	ldr	r2, [r7, #4]
 801baca:	615a      	str	r2, [r3, #20]
    return *this;
 801bacc:	68fb      	ldr	r3, [r7, #12]
}
 801bace:	4618      	mov	r0, r3
 801bad0:	3714      	adds	r7, #20
 801bad2:	46bd      	mov	sp, r7
 801bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bad8:	4770      	bx	lr

0801bada <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801bada:	b480      	push	{r7}
 801badc:	b083      	sub	sp, #12
 801bade:	af00      	add	r7, sp, #0
 801bae0:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	7e1b      	ldrb	r3, [r3, #24]
}
 801bae6:	4618      	mov	r0, r3
 801bae8:	370c      	adds	r7, #12
 801baea:	46bd      	mov	sp, r7
 801baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baf0:	4770      	bx	lr

0801baf2 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801baf2:	b480      	push	{r7}
 801baf4:	b083      	sub	sp, #12
 801baf6:	af00      	add	r7, sp, #0
 801baf8:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801bafe:	4618      	mov	r0, r3
 801bb00:	370c      	adds	r7, #12
 801bb02:	46bd      	mov	sp, r7
 801bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb08:	4770      	bx	lr
	...

0801bb0c <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	b082      	sub	sp, #8
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	6078      	str	r0, [r7, #4]
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	4618      	mov	r0, r3
 801bb18:	f7fe fcce 	bl	801a4b8 <_ZN16MockExpectedCallC1Ev>
 801bb1c:	4a03      	ldr	r2, [pc, #12]	; (801bb2c <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	601a      	str	r2, [r3, #0]
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	4618      	mov	r0, r3
 801bb26:	3708      	adds	r7, #8
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	bd80      	pop	{r7, pc}
 801bb2c:	08029080 	.word	0x08029080

0801bb30 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801bb30:	b580      	push	{r7, lr}
 801bb32:	af00      	add	r7, sp, #0
 801bb34:	4801      	ldr	r0, [pc, #4]	; (801bb3c <__tcf_0+0xc>)
 801bb36:	f000 f831 	bl	801bb9c <_ZN23MockIgnoredExpectedCallD1Ev>
 801bb3a:	bd80      	pop	{r7, pc}
 801bb3c:	20000ebc 	.word	0x20000ebc

0801bb40 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801bb40:	b580      	push	{r7, lr}
 801bb42:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801bb44:	4b12      	ldr	r3, [pc, #72]	; (801bb90 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bb46:	781b      	ldrb	r3, [r3, #0]
 801bb48:	f3bf 8f5b 	dmb	ish
 801bb4c:	b2db      	uxtb	r3, r3
 801bb4e:	f003 0301 	and.w	r3, r3, #1
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	bf0c      	ite	eq
 801bb56:	2301      	moveq	r3, #1
 801bb58:	2300      	movne	r3, #0
 801bb5a:	b2db      	uxtb	r3, r3
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d013      	beq.n	801bb88 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801bb60:	480b      	ldr	r0, [pc, #44]	; (801bb90 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bb62:	f003 ff05 	bl	801f970 <__cxa_guard_acquire>
 801bb66:	4603      	mov	r3, r0
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	bf14      	ite	ne
 801bb6c:	2301      	movne	r3, #1
 801bb6e:	2300      	moveq	r3, #0
 801bb70:	b2db      	uxtb	r3, r3
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d008      	beq.n	801bb88 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801bb76:	4807      	ldr	r0, [pc, #28]	; (801bb94 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801bb78:	f7ff ffc8 	bl	801bb0c <_ZN23MockIgnoredExpectedCallC1Ev>
 801bb7c:	4804      	ldr	r0, [pc, #16]	; (801bb90 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bb7e:	f003 ff03 	bl	801f988 <__cxa_guard_release>
 801bb82:	4805      	ldr	r0, [pc, #20]	; (801bb98 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801bb84:	f003 ff27 	bl	801f9d6 <atexit>
    return call;
 801bb88:	4b02      	ldr	r3, [pc, #8]	; (801bb94 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801bb8a:	4618      	mov	r0, r3
 801bb8c:	bd80      	pop	{r7, pc}
 801bb8e:	bf00      	nop
 801bb90:	20000ec0 	.word	0x20000ec0
 801bb94:	20000ebc 	.word	0x20000ebc
 801bb98:	0801bb31 	.word	0x0801bb31

0801bb9c <_ZN23MockIgnoredExpectedCallD1Ev>:
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b082      	sub	sp, #8
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	6078      	str	r0, [r7, #4]
 801bba4:	4a05      	ldr	r2, [pc, #20]	; (801bbbc <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	601a      	str	r2, [r3, #0]
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	4618      	mov	r0, r3
 801bbae:	f7fe fc93 	bl	801a4d8 <_ZN16MockExpectedCallD1Ev>
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	4618      	mov	r0, r3
 801bbb6:	3708      	adds	r7, #8
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	bd80      	pop	{r7, pc}
 801bbbc:	08029080 	.word	0x08029080

0801bbc0 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801bbc0:	b580      	push	{r7, lr}
 801bbc2:	b082      	sub	sp, #8
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	6078      	str	r0, [r7, #4]
 801bbc8:	6878      	ldr	r0, [r7, #4]
 801bbca:	f7ff ffe7 	bl	801bb9c <_ZN23MockIgnoredExpectedCallD1Ev>
 801bbce:	2104      	movs	r1, #4
 801bbd0:	6878      	ldr	r0, [r7, #4]
 801bbd2:	f7ee fc5d 	bl	800a490 <_ZdlPvj>
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	4618      	mov	r0, r3
 801bbda:	3708      	adds	r7, #8
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	bd80      	pop	{r7, pc}

0801bbe0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801bbe0:	b580      	push	{r7, lr}
 801bbe2:	b082      	sub	sp, #8
 801bbe4:	af00      	add	r7, sp, #0
 801bbe6:	6078      	str	r0, [r7, #4]
 801bbe8:	4a05      	ldr	r2, [pc, #20]	; (801bc00 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	601a      	str	r2, [r3, #0]
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	4618      	mov	r0, r3
 801bbf2:	f001 fd4b 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	4618      	mov	r0, r3
 801bbfa:	3708      	adds	r7, #8
 801bbfc:	46bd      	mov	sp, r7
 801bbfe:	bd80      	pop	{r7, pc}
 801bc00:	08029220 	.word	0x08029220

0801bc04 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801bc04:	b580      	push	{r7, lr}
 801bc06:	b082      	sub	sp, #8
 801bc08:	af00      	add	r7, sp, #0
 801bc0a:	6078      	str	r0, [r7, #4]
 801bc0c:	6878      	ldr	r0, [r7, #4]
 801bc0e:	f7ff ffe7 	bl	801bbe0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801bc12:	2138      	movs	r1, #56	; 0x38
 801bc14:	6878      	ldr	r0, [r7, #4]
 801bc16:	f7ee fc3b 	bl	800a490 <_ZdlPvj>
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	3708      	adds	r7, #8
 801bc20:	46bd      	mov	sp, r7
 801bc22:	bd80      	pop	{r7, pc}

0801bc24 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801bc24:	b480      	push	{r7}
 801bc26:	b083      	sub	sp, #12
 801bc28:	af00      	add	r7, sp, #0
 801bc2a:	6078      	str	r0, [r7, #4]
 801bc2c:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	683a      	ldr	r2, [r7, #0]
 801bc32:	601a      	str	r2, [r3, #0]
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	2200      	movs	r2, #0
 801bc38:	605a      	str	r2, [r3, #4]
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	4618      	mov	r0, r3
 801bc3e:	370c      	adds	r7, #12
 801bc40:	46bd      	mov	sp, r7
 801bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc46:	4770      	bx	lr

0801bc48 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801bc48:	b480      	push	{r7}
 801bc4a:	b083      	sub	sp, #12
 801bc4c:	af00      	add	r7, sp, #0
 801bc4e:	6078      	str	r0, [r7, #4]
 801bc50:	4a06      	ldr	r2, [pc, #24]	; (801bc6c <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	601a      	str	r2, [r3, #0]
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	2200      	movs	r2, #0
 801bc5a:	605a      	str	r2, [r3, #4]
{
}
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	4618      	mov	r0, r3
 801bc60:	370c      	adds	r7, #12
 801bc62:	46bd      	mov	sp, r7
 801bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc68:	4770      	bx	lr
 801bc6a:	bf00      	nop
 801bc6c:	08029374 	.word	0x08029374

0801bc70 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801bc70:	b580      	push	{r7, lr}
 801bc72:	b084      	sub	sp, #16
 801bc74:	af00      	add	r7, sp, #0
 801bc76:	6078      	str	r0, [r7, #4]
 801bc78:	4a0d      	ldr	r2, [pc, #52]	; (801bcb0 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	685b      	ldr	r3, [r3, #4]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d00f      	beq.n	801bca6 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	685b      	ldr	r3, [r3, #4]
 801bc8a:	685b      	ldr	r3, [r3, #4]
 801bc8c:	60fb      	str	r3, [r7, #12]
        delete head_;
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	685b      	ldr	r3, [r3, #4]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d003      	beq.n	801bc9e <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801bc96:	2108      	movs	r1, #8
 801bc98:	4618      	mov	r0, r3
 801bc9a:	f7ee fbf9 	bl	800a490 <_ZdlPvj>
        head_ = next;
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	68fa      	ldr	r2, [r7, #12]
 801bca2:	605a      	str	r2, [r3, #4]
    while (head_) {
 801bca4:	e7eb      	b.n	801bc7e <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	4618      	mov	r0, r3
 801bcaa:	3710      	adds	r7, #16
 801bcac:	46bd      	mov	sp, r7
 801bcae:	bd80      	pop	{r7, pc}
 801bcb0:	08029374 	.word	0x08029374

0801bcb4 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b082      	sub	sp, #8
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
}
 801bcbc:	6878      	ldr	r0, [r7, #4]
 801bcbe:	f7ff ffd7 	bl	801bc70 <_ZN21MockExpectedCallsListD1Ev>
 801bcc2:	2108      	movs	r1, #8
 801bcc4:	6878      	ldr	r0, [r7, #4]
 801bcc6:	f7ee fbe3 	bl	800a490 <_ZdlPvj>
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	4618      	mov	r0, r3
 801bcce:	3708      	adds	r7, #8
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	bd80      	pop	{r7, pc}

0801bcd4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b084      	sub	sp, #16
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	685b      	ldr	r3, [r3, #4]
 801bce0:	60fb      	str	r3, [r7, #12]
 801bce2:	68fb      	ldr	r3, [r7, #12]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d011      	beq.n	801bd0c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	681a      	ldr	r2, [r3, #0]
 801bcec:	68fb      	ldr	r3, [r7, #12]
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	33d4      	adds	r3, #212	; 0xd4
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	4610      	mov	r0, r2
 801bcf8:	4798      	blx	r3
 801bcfa:	4603      	mov	r3, r0
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d001      	beq.n	801bd04 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801bd00:	2301      	movs	r3, #1
 801bd02:	e004      	b.n	801bd0e <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd04:	68fb      	ldr	r3, [r7, #12]
 801bd06:	685b      	ldr	r3, [r3, #4]
 801bd08:	60fb      	str	r3, [r7, #12]
 801bd0a:	e7ea      	b.n	801bce2 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801bd0c:	2300      	movs	r3, #0
}
 801bd0e:	4618      	mov	r0, r3
 801bd10:	3710      	adds	r7, #16
 801bd12:	46bd      	mov	sp, r7
 801bd14:	bd80      	pop	{r7, pc}

0801bd16 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801bd16:	b480      	push	{r7}
 801bd18:	b085      	sub	sp, #20
 801bd1a:	af00      	add	r7, sp, #0
 801bd1c:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801bd1e:	2300      	movs	r3, #0
 801bd20:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	685b      	ldr	r3, [r3, #4]
 801bd26:	60bb      	str	r3, [r7, #8]
 801bd28:	68bb      	ldr	r3, [r7, #8]
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d006      	beq.n	801bd3c <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801bd2e:	68fb      	ldr	r3, [r7, #12]
 801bd30:	3301      	adds	r3, #1
 801bd32:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bd34:	68bb      	ldr	r3, [r7, #8]
 801bd36:	685b      	ldr	r3, [r3, #4]
 801bd38:	60bb      	str	r3, [r7, #8]
 801bd3a:	e7f5      	b.n	801bd28 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801bd3c:	68fb      	ldr	r3, [r7, #12]
}
 801bd3e:	4618      	mov	r0, r3
 801bd40:	3714      	adds	r7, #20
 801bd42:	46bd      	mov	sp, r7
 801bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd48:	4770      	bx	lr

0801bd4a <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801bd4a:	b480      	push	{r7}
 801bd4c:	b083      	sub	sp, #12
 801bd4e:	af00      	add	r7, sp, #0
 801bd50:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	685b      	ldr	r3, [r3, #4]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	bf0c      	ite	eq
 801bd5a:	2301      	moveq	r3, #1
 801bd5c:	2300      	movne	r3, #0
 801bd5e:	b2db      	uxtb	r3, r3
}
 801bd60:	4618      	mov	r0, r3
 801bd62:	370c      	adds	r7, #12
 801bd64:	46bd      	mov	sp, r7
 801bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd6a:	4770      	bx	lr

0801bd6c <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801bd6c:	b580      	push	{r7, lr}
 801bd6e:	b084      	sub	sp, #16
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	6078      	str	r0, [r7, #4]
 801bd74:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801bd76:	2300      	movs	r3, #0
 801bd78:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	685b      	ldr	r3, [r3, #4]
 801bd7e:	60bb      	str	r3, [r7, #8]
 801bd80:	68bb      	ldr	r3, [r7, #8]
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d01d      	beq.n	801bdc2 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801bd86:	68bb      	ldr	r3, [r7, #8]
 801bd88:	681a      	ldr	r2, [r3, #0]
 801bd8a:	68bb      	ldr	r3, [r7, #8]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	33b8      	adds	r3, #184	; 0xb8
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	6839      	ldr	r1, [r7, #0]
 801bd96:	4610      	mov	r0, r2
 801bd98:	4798      	blx	r3
 801bd9a:	4603      	mov	r3, r0
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d00c      	beq.n	801bdba <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	681a      	ldr	r2, [r3, #0]
 801bda4:	68bb      	ldr	r3, [r7, #8]
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	33f8      	adds	r3, #248	; 0xf8
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	4610      	mov	r0, r2
 801bdb0:	4798      	blx	r3
 801bdb2:	4602      	mov	r2, r0
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	4413      	add	r3, r2
 801bdb8:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bdba:	68bb      	ldr	r3, [r7, #8]
 801bdbc:	685b      	ldr	r3, [r3, #4]
 801bdbe:	60bb      	str	r3, [r7, #8]
 801bdc0:	e7de      	b.n	801bd80 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801bdc2:	68fb      	ldr	r3, [r7, #12]
}
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	3710      	adds	r7, #16
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	bd80      	pop	{r7, pc}

0801bdcc <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b084      	sub	sp, #16
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801bdd4:	2300      	movs	r3, #0
 801bdd6:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	685b      	ldr	r3, [r3, #4]
 801bddc:	60bb      	str	r3, [r7, #8]
 801bdde:	68bb      	ldr	r3, [r7, #8]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d015      	beq.n	801be10 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801bde4:	68bb      	ldr	r3, [r7, #8]
 801bde6:	681a      	ldr	r2, [r3, #0]
 801bde8:	68bb      	ldr	r3, [r7, #8]
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	33c0      	adds	r3, #192	; 0xc0
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	4610      	mov	r0, r2
 801bdf4:	4798      	blx	r3
 801bdf6:	4603      	mov	r3, r0
 801bdf8:	f083 0301 	eor.w	r3, r3, #1
 801bdfc:	b2db      	uxtb	r3, r3
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d002      	beq.n	801be08 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	3301      	adds	r3, #1
 801be06:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be08:	68bb      	ldr	r3, [r7, #8]
 801be0a:	685b      	ldr	r3, [r3, #4]
 801be0c:	60bb      	str	r3, [r7, #8]
 801be0e:	e7e6      	b.n	801bdde <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801be10:	68fb      	ldr	r3, [r7, #12]
}
 801be12:	4618      	mov	r0, r3
 801be14:	3710      	adds	r7, #16
 801be16:	46bd      	mov	sp, r7
 801be18:	bd80      	pop	{r7, pc}

0801be1a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801be1a:	b580      	push	{r7, lr}
 801be1c:	b084      	sub	sp, #16
 801be1e:	af00      	add	r7, sp, #0
 801be20:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	685b      	ldr	r3, [r3, #4]
 801be26:	60fb      	str	r3, [r7, #12]
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d011      	beq.n	801be52 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	681a      	ldr	r2, [r3, #0]
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	33c8      	adds	r3, #200	; 0xc8
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	4610      	mov	r0, r2
 801be3e:	4798      	blx	r3
 801be40:	4603      	mov	r3, r0
 801be42:	2b00      	cmp	r3, #0
 801be44:	d001      	beq.n	801be4a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801be46:	2301      	movs	r3, #1
 801be48:	e004      	b.n	801be54 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	685b      	ldr	r3, [r3, #4]
 801be4e:	60fb      	str	r3, [r7, #12]
 801be50:	e7ea      	b.n	801be28 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801be52:	2300      	movs	r3, #0
}
 801be54:	4618      	mov	r0, r3
 801be56:	3710      	adds	r7, #16
 801be58:	46bd      	mov	sp, r7
 801be5a:	bd80      	pop	{r7, pc}

0801be5c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801be5c:	b580      	push	{r7, lr}
 801be5e:	b084      	sub	sp, #16
 801be60:	af00      	add	r7, sp, #0
 801be62:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	685b      	ldr	r3, [r3, #4]
 801be68:	60fb      	str	r3, [r7, #12]
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d014      	beq.n	801be9a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	681a      	ldr	r2, [r3, #0]
 801be74:	68fb      	ldr	r3, [r7, #12]
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	33c0      	adds	r3, #192	; 0xc0
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	4610      	mov	r0, r2
 801be80:	4798      	blx	r3
 801be82:	4603      	mov	r3, r0
 801be84:	f083 0301 	eor.w	r3, r3, #1
 801be88:	b2db      	uxtb	r3, r3
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d001      	beq.n	801be92 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801be8e:	2301      	movs	r3, #1
 801be90:	e004      	b.n	801be9c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801be92:	68fb      	ldr	r3, [r7, #12]
 801be94:	685b      	ldr	r3, [r3, #4]
 801be96:	60fb      	str	r3, [r7, #12]
 801be98:	e7e7      	b.n	801be6a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801be9a:	2300      	movs	r3, #0
}
 801be9c:	4618      	mov	r0, r3
 801be9e:	3710      	adds	r7, #16
 801bea0:	46bd      	mov	sp, r7
 801bea2:	bd80      	pop	{r7, pc}

0801bea4 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801bea4:	b580      	push	{r7, lr}
 801bea6:	b084      	sub	sp, #16
 801bea8:	af00      	add	r7, sp, #0
 801beaa:	6078      	str	r0, [r7, #4]
 801beac:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	685b      	ldr	r3, [r3, #4]
 801beb2:	60fb      	str	r3, [r7, #12]
 801beb4:	68fb      	ldr	r3, [r7, #12]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d012      	beq.n	801bee0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801beba:	68fb      	ldr	r3, [r7, #12]
 801bebc:	681a      	ldr	r2, [r3, #0]
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	33b8      	adds	r3, #184	; 0xb8
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	6839      	ldr	r1, [r7, #0]
 801beca:	4610      	mov	r0, r2
 801becc:	4798      	blx	r3
 801bece:	4603      	mov	r3, r0
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d001      	beq.n	801bed8 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801bed4:	2301      	movs	r3, #1
 801bed6:	e004      	b.n	801bee2 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	685b      	ldr	r3, [r3, #4]
 801bedc:	60fb      	str	r3, [r7, #12]
 801bede:	e7e9      	b.n	801beb4 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801bee0:	2300      	movs	r3, #0
}
 801bee2:	4618      	mov	r0, r3
 801bee4:	3710      	adds	r7, #16
 801bee6:	46bd      	mov	sp, r7
 801bee8:	bd80      	pop	{r7, pc}
	...

0801beec <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801beec:	b590      	push	{r4, r7, lr}
 801beee:	b085      	sub	sp, #20
 801bef0:	af00      	add	r7, sp, #0
 801bef2:	6078      	str	r0, [r7, #4]
 801bef4:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801bef6:	2273      	movs	r2, #115	; 0x73
 801bef8:	4911      	ldr	r1, [pc, #68]	; (801bf40 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801befa:	2008      	movs	r0, #8
 801befc:	f7ee fab4 	bl	800a468 <_ZnwjPKci>
 801bf00:	4604      	mov	r4, r0
 801bf02:	6839      	ldr	r1, [r7, #0]
 801bf04:	4620      	mov	r0, r4
 801bf06:	f7ff fe8d 	bl	801bc24 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801bf0a:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	685b      	ldr	r3, [r3, #4]
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d103      	bne.n	801bf1c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	68ba      	ldr	r2, [r7, #8]
 801bf18:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801bf1a:	e00d      	b.n	801bf38 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	685b      	ldr	r3, [r3, #4]
 801bf20:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	685b      	ldr	r3, [r3, #4]
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d003      	beq.n	801bf32 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801bf2a:	68fb      	ldr	r3, [r7, #12]
 801bf2c:	685b      	ldr	r3, [r3, #4]
 801bf2e:	60fb      	str	r3, [r7, #12]
 801bf30:	e7f7      	b.n	801bf22 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	68ba      	ldr	r2, [r7, #8]
 801bf36:	605a      	str	r2, [r3, #4]
}
 801bf38:	bf00      	nop
 801bf3a:	3714      	adds	r7, #20
 801bf3c:	46bd      	mov	sp, r7
 801bf3e:	bd90      	pop	{r4, r7, pc}
 801bf40:	08026274 	.word	0x08026274

0801bf44 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801bf44:	b580      	push	{r7, lr}
 801bf46:	b084      	sub	sp, #16
 801bf48:	af00      	add	r7, sp, #0
 801bf4a:	6078      	str	r0, [r7, #4]
 801bf4c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bf4e:	683b      	ldr	r3, [r7, #0]
 801bf50:	685b      	ldr	r3, [r3, #4]
 801bf52:	60fb      	str	r3, [r7, #12]
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d018      	beq.n	801bf8c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	681a      	ldr	r2, [r3, #0]
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	33c4      	adds	r3, #196	; 0xc4
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	4610      	mov	r0, r2
 801bf6a:	4798      	blx	r3
 801bf6c:	4603      	mov	r3, r0
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d008      	beq.n	801bf84 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	681b      	ldr	r3, [r3, #0]
 801bf76:	3330      	adds	r3, #48	; 0x30
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	68fa      	ldr	r2, [r7, #12]
 801bf7c:	6812      	ldr	r2, [r2, #0]
 801bf7e:	4611      	mov	r1, r2
 801bf80:	6878      	ldr	r0, [r7, #4]
 801bf82:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	685b      	ldr	r3, [r3, #4]
 801bf88:	60fb      	str	r3, [r7, #12]
 801bf8a:	e7e3      	b.n	801bf54 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801bf8c:	bf00      	nop
 801bf8e:	3710      	adds	r7, #16
 801bf90:	46bd      	mov	sp, r7
 801bf92:	bd80      	pop	{r7, pc}

0801bf94 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b086      	sub	sp, #24
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	60f8      	str	r0, [r7, #12]
 801bf9c:	60b9      	str	r1, [r7, #8]
 801bf9e:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	685b      	ldr	r3, [r3, #4]
 801bfa4:	617b      	str	r3, [r7, #20]
 801bfa6:	697b      	ldr	r3, [r7, #20]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d019      	beq.n	801bfe0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801bfac:	697b      	ldr	r3, [r7, #20]
 801bfae:	681a      	ldr	r2, [r3, #0]
 801bfb0:	697b      	ldr	r3, [r7, #20]
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	33b8      	adds	r3, #184	; 0xb8
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	68b9      	ldr	r1, [r7, #8]
 801bfbc:	4610      	mov	r0, r2
 801bfbe:	4798      	blx	r3
 801bfc0:	4603      	mov	r3, r0
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d008      	beq.n	801bfd8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	3330      	adds	r3, #48	; 0x30
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	697a      	ldr	r2, [r7, #20]
 801bfd0:	6812      	ldr	r2, [r2, #0]
 801bfd2:	4611      	mov	r1, r2
 801bfd4:	68f8      	ldr	r0, [r7, #12]
 801bfd6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bfd8:	697b      	ldr	r3, [r7, #20]
 801bfda:	685b      	ldr	r3, [r3, #4]
 801bfdc:	617b      	str	r3, [r7, #20]
 801bfde:	e7e2      	b.n	801bfa6 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801bfe0:	bf00      	nop
 801bfe2:	3718      	adds	r7, #24
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	bd80      	pop	{r7, pc}

0801bfe8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801bfe8:	b580      	push	{r7, lr}
 801bfea:	b084      	sub	sp, #16
 801bfec:	af00      	add	r7, sp, #0
 801bfee:	6078      	str	r0, [r7, #4]
 801bff0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801bff2:	683b      	ldr	r3, [r7, #0]
 801bff4:	685b      	ldr	r3, [r3, #4]
 801bff6:	60fb      	str	r3, [r7, #12]
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d00c      	beq.n	801c018 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	3330      	adds	r3, #48	; 0x30
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	68fa      	ldr	r2, [r7, #12]
 801c008:	6812      	ldr	r2, [r2, #0]
 801c00a:	4611      	mov	r1, r2
 801c00c:	6878      	ldr	r0, [r7, #4]
 801c00e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	685b      	ldr	r3, [r3, #4]
 801c014:	60fb      	str	r3, [r7, #12]
 801c016:	e7ef      	b.n	801bff8 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801c018:	bf00      	nop
 801c01a:	3710      	adds	r7, #16
 801c01c:	46bd      	mov	sp, r7
 801c01e:	bd80      	pop	{r7, pc}

0801c020 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801c020:	b580      	push	{r7, lr}
 801c022:	b084      	sub	sp, #16
 801c024:	af00      	add	r7, sp, #0
 801c026:	6078      	str	r0, [r7, #4]
 801c028:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	685b      	ldr	r3, [r3, #4]
 801c02e:	60fb      	str	r3, [r7, #12]
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d016      	beq.n	801c064 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	681a      	ldr	r2, [r3, #0]
 801c03a:	68fb      	ldr	r3, [r7, #12]
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	33b8      	adds	r3, #184	; 0xb8
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	6839      	ldr	r1, [r7, #0]
 801c046:	4610      	mov	r0, r2
 801c048:	4798      	blx	r3
 801c04a:	4603      	mov	r3, r0
 801c04c:	f083 0301 	eor.w	r3, r3, #1
 801c050:	b2db      	uxtb	r3, r3
 801c052:	2b00      	cmp	r3, #0
 801c054:	d002      	beq.n	801c05c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	2200      	movs	r2, #0
 801c05a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	685b      	ldr	r3, [r3, #4]
 801c060:	60fb      	str	r3, [r7, #12]
 801c062:	e7e5      	b.n	801c030 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	681b      	ldr	r3, [r3, #0]
 801c068:	3388      	adds	r3, #136	; 0x88
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	6878      	ldr	r0, [r7, #4]
 801c06e:	4798      	blx	r3
}
 801c070:	bf00      	nop
 801c072:	3710      	adds	r7, #16
 801c074:	46bd      	mov	sp, r7
 801c076:	bd80      	pop	{r7, pc}

0801c078 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801c078:	b580      	push	{r7, lr}
 801c07a:	b084      	sub	sp, #16
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	685b      	ldr	r3, [r3, #4]
 801c084:	60fb      	str	r3, [r7, #12]
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d015      	beq.n	801c0b8 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801c08c:	68fb      	ldr	r3, [r7, #12]
 801c08e:	681a      	ldr	r2, [r3, #0]
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	33d4      	adds	r3, #212	; 0xd4
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	4610      	mov	r0, r2
 801c09c:	4798      	blx	r3
 801c09e:	4603      	mov	r3, r0
 801c0a0:	f083 0301 	eor.w	r3, r3, #1
 801c0a4:	b2db      	uxtb	r3, r3
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d002      	beq.n	801c0b0 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801c0aa:	68fb      	ldr	r3, [r7, #12]
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c0b0:	68fb      	ldr	r3, [r7, #12]
 801c0b2:	685b      	ldr	r3, [r3, #4]
 801c0b4:	60fb      	str	r3, [r7, #12]
 801c0b6:	e7e6      	b.n	801c086 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	3388      	adds	r3, #136	; 0x88
 801c0be:	681b      	ldr	r3, [r3, #0]
 801c0c0:	6878      	ldr	r0, [r7, #4]
 801c0c2:	4798      	blx	r3
}
 801c0c4:	bf00      	nop
 801c0c6:	3710      	adds	r7, #16
 801c0c8:	46bd      	mov	sp, r7
 801c0ca:	bd80      	pop	{r7, pc}

0801c0cc <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	b084      	sub	sp, #16
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	685b      	ldr	r3, [r3, #4]
 801c0d8:	60fb      	str	r3, [r7, #12]
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d01b      	beq.n	801c118 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	681a      	ldr	r2, [r3, #0]
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	33c8      	adds	r3, #200	; 0xc8
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	4610      	mov	r0, r2
 801c0f0:	4798      	blx	r3
 801c0f2:	4603      	mov	r3, r0
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d00b      	beq.n	801c110 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	681a      	ldr	r2, [r3, #0]
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	681b      	ldr	r3, [r3, #0]
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	33ec      	adds	r3, #236	; 0xec
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	4610      	mov	r0, r2
 801c108:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	2200      	movs	r2, #0
 801c10e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c110:	68fb      	ldr	r3, [r7, #12]
 801c112:	685b      	ldr	r3, [r3, #4]
 801c114:	60fb      	str	r3, [r7, #12]
 801c116:	e7e0      	b.n	801c0da <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	3388      	adds	r3, #136	; 0x88
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	6878      	ldr	r0, [r7, #4]
 801c122:	4798      	blx	r3
}
 801c124:	bf00      	nop
 801c126:	3710      	adds	r7, #16
 801c128:	46bd      	mov	sp, r7
 801c12a:	bd80      	pop	{r7, pc}

0801c12c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801c12c:	b580      	push	{r7, lr}
 801c12e:	b084      	sub	sp, #16
 801c130:	af00      	add	r7, sp, #0
 801c132:	6078      	str	r0, [r7, #4]
 801c134:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	685b      	ldr	r3, [r3, #4]
 801c13a:	60fb      	str	r3, [r7, #12]
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d016      	beq.n	801c170 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	681a      	ldr	r2, [r3, #0]
 801c146:	68fb      	ldr	r3, [r7, #12]
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	33a8      	adds	r3, #168	; 0xa8
 801c14e:	681b      	ldr	r3, [r3, #0]
 801c150:	6839      	ldr	r1, [r7, #0]
 801c152:	4610      	mov	r0, r2
 801c154:	4798      	blx	r3
 801c156:	4603      	mov	r3, r0
 801c158:	f083 0301 	eor.w	r3, r3, #1
 801c15c:	b2db      	uxtb	r3, r3
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d002      	beq.n	801c168 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	2200      	movs	r2, #0
 801c166:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	685b      	ldr	r3, [r3, #4]
 801c16c:	60fb      	str	r3, [r7, #12]
 801c16e:	e7e5      	b.n	801c13c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	3388      	adds	r3, #136	; 0x88
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	6878      	ldr	r0, [r7, #4]
 801c17a:	4798      	blx	r3
}
 801c17c:	bf00      	nop
 801c17e:	3710      	adds	r7, #16
 801c180:	46bd      	mov	sp, r7
 801c182:	bd80      	pop	{r7, pc}

0801c184 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801c184:	b580      	push	{r7, lr}
 801c186:	b084      	sub	sp, #16
 801c188:	af00      	add	r7, sp, #0
 801c18a:	6078      	str	r0, [r7, #4]
 801c18c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	685b      	ldr	r3, [r3, #4]
 801c192:	60fb      	str	r3, [r7, #12]
 801c194:	68fb      	ldr	r3, [r7, #12]
 801c196:	2b00      	cmp	r3, #0
 801c198:	d016      	beq.n	801c1c8 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	681a      	ldr	r2, [r3, #0]
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	681b      	ldr	r3, [r3, #0]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	33b0      	adds	r3, #176	; 0xb0
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	6839      	ldr	r1, [r7, #0]
 801c1aa:	4610      	mov	r0, r2
 801c1ac:	4798      	blx	r3
 801c1ae:	4603      	mov	r3, r0
 801c1b0:	f083 0301 	eor.w	r3, r3, #1
 801c1b4:	b2db      	uxtb	r3, r3
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d002      	beq.n	801c1c0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	2200      	movs	r2, #0
 801c1be:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	685b      	ldr	r3, [r3, #4]
 801c1c4:	60fb      	str	r3, [r7, #12]
 801c1c6:	e7e5      	b.n	801c194 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	3388      	adds	r3, #136	; 0x88
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	6878      	ldr	r0, [r7, #4]
 801c1d2:	4798      	blx	r3
}
 801c1d4:	bf00      	nop
 801c1d6:	3710      	adds	r7, #16
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	bd80      	pop	{r7, pc}

0801c1dc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801c1dc:	b580      	push	{r7, lr}
 801c1de:	b084      	sub	sp, #16
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	6078      	str	r0, [r7, #4]
 801c1e4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	685b      	ldr	r3, [r3, #4]
 801c1ea:	60fb      	str	r3, [r7, #12]
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d016      	beq.n	801c220 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	681a      	ldr	r2, [r3, #0]
 801c1f6:	68fb      	ldr	r3, [r7, #12]
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	33ac      	adds	r3, #172	; 0xac
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	6839      	ldr	r1, [r7, #0]
 801c202:	4610      	mov	r0, r2
 801c204:	4798      	blx	r3
 801c206:	4603      	mov	r3, r0
 801c208:	f083 0301 	eor.w	r3, r3, #1
 801c20c:	b2db      	uxtb	r3, r3
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d002      	beq.n	801c218 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	2200      	movs	r2, #0
 801c216:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	685b      	ldr	r3, [r3, #4]
 801c21c:	60fb      	str	r3, [r7, #12]
 801c21e:	e7e5      	b.n	801c1ec <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	3388      	adds	r3, #136	; 0x88
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	4798      	blx	r3
}
 801c22c:	bf00      	nop
 801c22e:	3710      	adds	r7, #16
 801c230:	46bd      	mov	sp, r7
 801c232:	bd80      	pop	{r7, pc}

0801c234 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801c234:	b580      	push	{r7, lr}
 801c236:	b084      	sub	sp, #16
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]
 801c23c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	685b      	ldr	r3, [r3, #4]
 801c242:	60fb      	str	r3, [r7, #12]
 801c244:	68fb      	ldr	r3, [r7, #12]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d016      	beq.n	801c278 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	681a      	ldr	r2, [r3, #0]
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	33b4      	adds	r3, #180	; 0xb4
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	6839      	ldr	r1, [r7, #0]
 801c25a:	4610      	mov	r0, r2
 801c25c:	4798      	blx	r3
 801c25e:	4603      	mov	r3, r0
 801c260:	f083 0301 	eor.w	r3, r3, #1
 801c264:	b2db      	uxtb	r3, r3
 801c266:	2b00      	cmp	r3, #0
 801c268:	d002      	beq.n	801c270 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	2200      	movs	r2, #0
 801c26e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c270:	68fb      	ldr	r3, [r7, #12]
 801c272:	685b      	ldr	r3, [r3, #4]
 801c274:	60fb      	str	r3, [r7, #12]
 801c276:	e7e5      	b.n	801c244 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	3388      	adds	r3, #136	; 0x88
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	6878      	ldr	r0, [r7, #4]
 801c282:	4798      	blx	r3
}
 801c284:	bf00      	nop
 801c286:	3710      	adds	r7, #16
 801c288:	46bd      	mov	sp, r7
 801c28a:	bd80      	pop	{r7, pc}

0801c28c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801c28c:	b580      	push	{r7, lr}
 801c28e:	b084      	sub	sp, #16
 801c290:	af00      	add	r7, sp, #0
 801c292:	6078      	str	r0, [r7, #4]
 801c294:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	685b      	ldr	r3, [r3, #4]
 801c29a:	60fb      	str	r3, [r7, #12]
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d016      	beq.n	801c2d0 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	681a      	ldr	r2, [r3, #0]
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	33bc      	adds	r3, #188	; 0xbc
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	6839      	ldr	r1, [r7, #0]
 801c2b2:	4610      	mov	r0, r2
 801c2b4:	4798      	blx	r3
 801c2b6:	4603      	mov	r3, r0
 801c2b8:	f083 0301 	eor.w	r3, r3, #1
 801c2bc:	b2db      	uxtb	r3, r3
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d002      	beq.n	801c2c8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	2200      	movs	r2, #0
 801c2c6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	685b      	ldr	r3, [r3, #4]
 801c2cc:	60fb      	str	r3, [r7, #12]
 801c2ce:	e7e5      	b.n	801c29c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	3388      	adds	r3, #136	; 0x88
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	6878      	ldr	r0, [r7, #4]
 801c2da:	4798      	blx	r3
}
 801c2dc:	bf00      	nop
 801c2de:	3710      	adds	r7, #16
 801c2e0:	46bd      	mov	sp, r7
 801c2e2:	bd80      	pop	{r7, pc}

0801c2e4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	b084      	sub	sp, #16
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	685b      	ldr	r3, [r3, #4]
 801c2f0:	60fb      	str	r3, [r7, #12]
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d01d      	beq.n	801c334 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801c2f8:	68fb      	ldr	r3, [r7, #12]
 801c2fa:	681a      	ldr	r2, [r3, #0]
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	681b      	ldr	r3, [r3, #0]
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	33c8      	adds	r3, #200	; 0xc8
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	4610      	mov	r0, r2
 801c308:	4798      	blx	r3
 801c30a:	4603      	mov	r3, r0
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d00d      	beq.n	801c32c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801c310:	68fb      	ldr	r3, [r7, #12]
 801c312:	681b      	ldr	r3, [r3, #0]
 801c314:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801c316:	68fb      	ldr	r3, [r7, #12]
 801c318:	2200      	movs	r2, #0
 801c31a:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	3388      	adds	r3, #136	; 0x88
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	6878      	ldr	r0, [r7, #4]
 801c326:	4798      	blx	r3
            return matchingCall;
 801c328:	68bb      	ldr	r3, [r7, #8]
 801c32a:	e004      	b.n	801c336 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c32c:	68fb      	ldr	r3, [r7, #12]
 801c32e:	685b      	ldr	r3, [r3, #4]
 801c330:	60fb      	str	r3, [r7, #12]
 801c332:	e7de      	b.n	801c2f2 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c334:	2300      	movs	r3, #0
}
 801c336:	4618      	mov	r0, r3
 801c338:	3710      	adds	r7, #16
 801c33a:	46bd      	mov	sp, r7
 801c33c:	bd80      	pop	{r7, pc}

0801c33e <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801c33e:	b580      	push	{r7, lr}
 801c340:	b084      	sub	sp, #16
 801c342:	af00      	add	r7, sp, #0
 801c344:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	685b      	ldr	r3, [r3, #4]
 801c34a:	60fb      	str	r3, [r7, #12]
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d012      	beq.n	801c378 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	681a      	ldr	r2, [r3, #0]
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	33cc      	adds	r3, #204	; 0xcc
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	4610      	mov	r0, r2
 801c362:	4798      	blx	r3
 801c364:	4603      	mov	r3, r0
 801c366:	2b00      	cmp	r3, #0
 801c368:	d002      	beq.n	801c370 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	e004      	b.n	801c37a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	685b      	ldr	r3, [r3, #4]
 801c374:	60fb      	str	r3, [r7, #12]
 801c376:	e7e9      	b.n	801c34c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c378:	2300      	movs	r3, #0
}
 801c37a:	4618      	mov	r0, r3
 801c37c:	3710      	adds	r7, #16
 801c37e:	46bd      	mov	sp, r7
 801c380:	bd80      	pop	{r7, pc}

0801c382 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801c382:	b580      	push	{r7, lr}
 801c384:	b084      	sub	sp, #16
 801c386:	af00      	add	r7, sp, #0
 801c388:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	685b      	ldr	r3, [r3, #4]
 801c38e:	60fb      	str	r3, [r7, #12]
 801c390:	68fb      	ldr	r3, [r7, #12]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d01d      	beq.n	801c3d2 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	681a      	ldr	r2, [r3, #0]
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	33cc      	adds	r3, #204	; 0xcc
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	4610      	mov	r0, r2
 801c3a6:	4798      	blx	r3
 801c3a8:	4603      	mov	r3, r0
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d00d      	beq.n	801c3ca <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	2200      	movs	r2, #0
 801c3b8:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	3388      	adds	r3, #136	; 0x88
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	6878      	ldr	r0, [r7, #4]
 801c3c4:	4798      	blx	r3
            return matchingCall;
 801c3c6:	68bb      	ldr	r3, [r7, #8]
 801c3c8:	e004      	b.n	801c3d4 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	685b      	ldr	r3, [r3, #4]
 801c3ce:	60fb      	str	r3, [r7, #12]
 801c3d0:	e7de      	b.n	801c390 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c3d2:	2300      	movs	r3, #0
}
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	3710      	adds	r7, #16
 801c3d8:	46bd      	mov	sp, r7
 801c3da:	bd80      	pop	{r7, pc}

0801c3dc <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801c3dc:	b580      	push	{r7, lr}
 801c3de:	b086      	sub	sp, #24
 801c3e0:	af00      	add	r7, sp, #0
 801c3e2:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	685b      	ldr	r3, [r3, #4]
 801c3e8:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801c3ea:	2300      	movs	r3, #0
 801c3ec:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801c3ee:	2300      	movs	r3, #0
 801c3f0:	60fb      	str	r3, [r7, #12]

    while (current) {
 801c3f2:	697b      	ldr	r3, [r7, #20]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d024      	beq.n	801c442 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801c3f8:	697b      	ldr	r3, [r7, #20]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d11a      	bne.n	801c436 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801c400:	697b      	ldr	r3, [r7, #20]
 801c402:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801c404:	693b      	ldr	r3, [r7, #16]
 801c406:	2b00      	cmp	r3, #0
 801c408:	d106      	bne.n	801c418 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801c40a:	697b      	ldr	r3, [r7, #20]
 801c40c:	685b      	ldr	r3, [r3, #4]
 801c40e:	617b      	str	r3, [r7, #20]
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	697a      	ldr	r2, [r7, #20]
 801c414:	605a      	str	r2, [r3, #4]
 801c416:	e006      	b.n	801c426 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801c418:	697b      	ldr	r3, [r7, #20]
 801c41a:	685a      	ldr	r2, [r3, #4]
 801c41c:	693b      	ldr	r3, [r7, #16]
 801c41e:	605a      	str	r2, [r3, #4]
 801c420:	693b      	ldr	r3, [r7, #16]
 801c422:	685b      	ldr	r3, [r3, #4]
 801c424:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d0e2      	beq.n	801c3f2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801c42c:	2108      	movs	r1, #8
 801c42e:	4618      	mov	r0, r3
 801c430:	f7ee f82e 	bl	800a490 <_ZdlPvj>
 801c434:	e7dd      	b.n	801c3f2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801c436:	697b      	ldr	r3, [r7, #20]
 801c438:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801c43a:	697b      	ldr	r3, [r7, #20]
 801c43c:	685b      	ldr	r3, [r3, #4]
 801c43e:	617b      	str	r3, [r7, #20]
    while (current) {
 801c440:	e7d7      	b.n	801c3f2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801c442:	bf00      	nop
 801c444:	3718      	adds	r7, #24
 801c446:	46bd      	mov	sp, r7
 801c448:	bd80      	pop	{r7, pc}

0801c44a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801c44a:	b580      	push	{r7, lr}
 801c44c:	b084      	sub	sp, #16
 801c44e:	af00      	add	r7, sp, #0
 801c450:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	685b      	ldr	r3, [r3, #4]
 801c456:	2b00      	cmp	r3, #0
 801c458:	d019      	beq.n	801c48e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	685b      	ldr	r3, [r3, #4]
 801c45e:	685b      	ldr	r3, [r3, #4]
 801c460:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	685b      	ldr	r3, [r3, #4]
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d004      	beq.n	801c476 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801c46c:	681a      	ldr	r2, [r3, #0]
 801c46e:	3204      	adds	r2, #4
 801c470:	6812      	ldr	r2, [r2, #0]
 801c472:	4618      	mov	r0, r3
 801c474:	4790      	blx	r2
        delete head_;
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	685b      	ldr	r3, [r3, #4]
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d003      	beq.n	801c486 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801c47e:	2108      	movs	r1, #8
 801c480:	4618      	mov	r0, r3
 801c482:	f7ee f805 	bl	800a490 <_ZdlPvj>
        head_ = next;
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	68fa      	ldr	r2, [r7, #12]
 801c48a:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c48c:	e7e1      	b.n	801c452 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801c48e:	bf00      	nop
 801c490:	3710      	adds	r7, #16
 801c492:	46bd      	mov	sp, r7
 801c494:	bd80      	pop	{r7, pc}

0801c496 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801c496:	b580      	push	{r7, lr}
 801c498:	b084      	sub	sp, #16
 801c49a:	af00      	add	r7, sp, #0
 801c49c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	685b      	ldr	r3, [r3, #4]
 801c4a2:	60fb      	str	r3, [r7, #12]
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d00c      	beq.n	801c4c4 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	681a      	ldr	r2, [r3, #0]
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	33ec      	adds	r3, #236	; 0xec
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	4610      	mov	r0, r2
 801c4ba:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	685b      	ldr	r3, [r3, #4]
 801c4c0:	60fb      	str	r3, [r7, #12]
 801c4c2:	e7ef      	b.n	801c4a4 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801c4c4:	bf00      	nop
 801c4c6:	3710      	adds	r7, #16
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	bd80      	pop	{r7, pc}

0801c4cc <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801c4cc:	b580      	push	{r7, lr}
 801c4ce:	b084      	sub	sp, #16
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	685b      	ldr	r3, [r3, #4]
 801c4d8:	60fb      	str	r3, [r7, #12]
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d00c      	beq.n	801c4fa <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	681a      	ldr	r2, [r3, #0]
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	33e8      	adds	r3, #232	; 0xe8
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	4610      	mov	r0, r2
 801c4f0:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	685b      	ldr	r3, [r3, #4]
 801c4f6:	60fb      	str	r3, [r7, #12]
 801c4f8:	e7ef      	b.n	801c4da <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801c4fa:	bf00      	nop
 801c4fc:	3710      	adds	r7, #16
 801c4fe:	46bd      	mov	sp, r7
 801c500:	bd80      	pop	{r7, pc}

0801c502 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801c502:	b580      	push	{r7, lr}
 801c504:	b084      	sub	sp, #16
 801c506:	af00      	add	r7, sp, #0
 801c508:	6078      	str	r0, [r7, #4]
 801c50a:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	685b      	ldr	r3, [r3, #4]
 801c510:	60fb      	str	r3, [r7, #12]
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d00d      	beq.n	801c534 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	681a      	ldr	r2, [r3, #0]
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	33dc      	adds	r3, #220	; 0xdc
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	6839      	ldr	r1, [r7, #0]
 801c528:	4610      	mov	r0, r2
 801c52a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	685b      	ldr	r3, [r3, #4]
 801c530:	60fb      	str	r3, [r7, #12]
 801c532:	e7ee      	b.n	801c512 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801c534:	bf00      	nop
 801c536:	3710      	adds	r7, #16
 801c538:	46bd      	mov	sp, r7
 801c53a:	bd80      	pop	{r7, pc}

0801c53c <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801c53c:	b580      	push	{r7, lr}
 801c53e:	b084      	sub	sp, #16
 801c540:	af00      	add	r7, sp, #0
 801c542:	6078      	str	r0, [r7, #4]
 801c544:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	685b      	ldr	r3, [r3, #4]
 801c54a:	60fb      	str	r3, [r7, #12]
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d00d      	beq.n	801c56e <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	681a      	ldr	r2, [r3, #0]
 801c556:	68fb      	ldr	r3, [r7, #12]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	33e0      	adds	r3, #224	; 0xe0
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	6839      	ldr	r1, [r7, #0]
 801c562:	4610      	mov	r0, r2
 801c564:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c566:	68fb      	ldr	r3, [r7, #12]
 801c568:	685b      	ldr	r3, [r3, #4]
 801c56a:	60fb      	str	r3, [r7, #12]
 801c56c:	e7ee      	b.n	801c54c <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801c56e:	bf00      	nop
 801c570:	3710      	adds	r7, #16
 801c572:	46bd      	mov	sp, r7
 801c574:	bd80      	pop	{r7, pc}
	...

0801c578 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801c578:	b590      	push	{r4, r7, lr}
 801c57a:	b087      	sub	sp, #28
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	60f8      	str	r0, [r7, #12]
 801c580:	60b9      	str	r1, [r7, #8]
 801c582:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801c584:	68b9      	ldr	r1, [r7, #8]
 801c586:	68f8      	ldr	r0, [r7, #12]
 801c588:	f7f0 fb85 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801c58c:	f107 0310 	add.w	r3, r7, #16
 801c590:	490f      	ldr	r1, [pc, #60]	; (801c5d0 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801c592:	4618      	mov	r0, r3
 801c594:	f7f0 fb2b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801c598:	f107 0310 	add.w	r3, r7, #16
 801c59c:	4619      	mov	r1, r3
 801c59e:	68f8      	ldr	r0, [r7, #12]
 801c5a0:	f7f0 fee9 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801c5a4:	4603      	mov	r3, r0
 801c5a6:	461c      	mov	r4, r3
 801c5a8:	f107 0310 	add.w	r3, r7, #16
 801c5ac:	4618      	mov	r0, r3
 801c5ae:	f7f0 fed6 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801c5b2:	2c00      	cmp	r4, #0
 801c5b4:	d007      	beq.n	801c5c6 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801c5b6:	6879      	ldr	r1, [r7, #4]
 801c5b8:	68f8      	ldr	r0, [r7, #12]
 801c5ba:	f7f0 ff4d 	bl	800d458 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801c5be:	4905      	ldr	r1, [pc, #20]	; (801c5d4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801c5c0:	68f8      	ldr	r0, [r7, #12]
 801c5c2:	f7f0 ff5b 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801c5c6:	bf00      	nop
}
 801c5c8:	68f8      	ldr	r0, [r7, #12]
 801c5ca:	371c      	adds	r7, #28
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd90      	pop	{r4, r7, pc}
 801c5d0:	08026298 	.word	0x08026298
 801c5d4:	0802629c 	.word	0x0802629c

0801c5d8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801c5d8:	b590      	push	{r4, r7, lr}
 801c5da:	b087      	sub	sp, #28
 801c5dc:	af00      	add	r7, sp, #0
 801c5de:	60f8      	str	r0, [r7, #12]
 801c5e0:	60b9      	str	r1, [r7, #8]
 801c5e2:	607a      	str	r2, [r7, #4]
 801c5e4:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801c5e6:	68b9      	ldr	r1, [r7, #8]
 801c5e8:	68f8      	ldr	r0, [r7, #12]
 801c5ea:	f7f0 fb54 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801c5ee:	f107 0310 	add.w	r3, r7, #16
 801c5f2:	4912      	ldr	r1, [pc, #72]	; (801c63c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801c5f4:	4618      	mov	r0, r3
 801c5f6:	f7f0 fafa 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801c5fa:	f107 0310 	add.w	r3, r7, #16
 801c5fe:	4619      	mov	r1, r3
 801c600:	68f8      	ldr	r0, [r7, #12]
 801c602:	f7f0 fefd 	bl	800d400 <_ZneRK12SimpleStringS1_>
 801c606:	4603      	mov	r3, r0
 801c608:	461c      	mov	r4, r3
 801c60a:	f107 0310 	add.w	r3, r7, #16
 801c60e:	4618      	mov	r0, r3
 801c610:	f7f0 fea5 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801c614:	2c00      	cmp	r4, #0
 801c616:	d003      	beq.n	801c620 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801c618:	4909      	ldr	r1, [pc, #36]	; (801c640 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801c61a:	68f8      	ldr	r0, [r7, #12]
 801c61c:	f7f0 ff2e 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801c620:	6879      	ldr	r1, [r7, #4]
 801c622:	68f8      	ldr	r0, [r7, #12]
 801c624:	f7f0 ff18 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801c628:	6839      	ldr	r1, [r7, #0]
 801c62a:	68f8      	ldr	r0, [r7, #12]
 801c62c:	f7f0 ff14 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    return str;
 801c630:	bf00      	nop
}
 801c632:	68f8      	ldr	r0, [r7, #12]
 801c634:	371c      	adds	r7, #28
 801c636:	46bd      	mov	sp, r7
 801c638:	bd90      	pop	{r4, r7, pc}
 801c63a:	bf00      	nop
 801c63c:	08026298 	.word	0x08026298
 801c640:	080262a4 	.word	0x080262a4

0801c644 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801c644:	b580      	push	{r7, lr}
 801c646:	b08c      	sub	sp, #48	; 0x30
 801c648:	af00      	add	r7, sp, #0
 801c64a:	60f8      	str	r0, [r7, #12]
 801c64c:	60b9      	str	r1, [r7, #8]
 801c64e:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801c650:	f107 0314 	add.w	r3, r7, #20
 801c654:	4929      	ldr	r1, [pc, #164]	; (801c6fc <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801c656:	4618      	mov	r0, r3
 801c658:	f7f0 fac9 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c65c:	68bb      	ldr	r3, [r7, #8]
 801c65e:	685b      	ldr	r3, [r3, #4]
 801c660:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c664:	2b00      	cmp	r3, #0
 801c666:	d038      	beq.n	801c6da <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801c668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c66a:	681a      	ldr	r2, [r3, #0]
 801c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	33c0      	adds	r3, #192	; 0xc0
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	4610      	mov	r0, r2
 801c678:	4798      	blx	r3
 801c67a:	4603      	mov	r3, r0
 801c67c:	f083 0301 	eor.w	r3, r3, #1
 801c680:	b2db      	uxtb	r3, r3
 801c682:	2b00      	cmp	r3, #0
 801c684:	d025      	beq.n	801c6d2 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c688:	6819      	ldr	r1, [r3, #0]
 801c68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	33f0      	adds	r3, #240	; 0xf0
 801c692:	681b      	ldr	r3, [r3, #0]
 801c694:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c698:	4610      	mov	r0, r2
 801c69a:	4798      	blx	r3
 801c69c:	f107 001c 	add.w	r0, r7, #28
 801c6a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c6a4:	f107 0114 	add.w	r1, r7, #20
 801c6a8:	687a      	ldr	r2, [r7, #4]
 801c6aa:	f7ff ff95 	bl	801c5d8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c6ae:	f107 021c 	add.w	r2, r7, #28
 801c6b2:	f107 0314 	add.w	r3, r7, #20
 801c6b6:	4611      	mov	r1, r2
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	f7f0 fb04 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801c6be:	f107 031c 	add.w	r3, r7, #28
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	f7f0 fe4b 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801c6c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c6cc:	4618      	mov	r0, r3
 801c6ce:	f7f0 fe46 	bl	800d35e <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6d4:	685b      	ldr	r3, [r3, #4]
 801c6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c6d8:	e7c3      	b.n	801c662 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	f107 0114 	add.w	r1, r7, #20
 801c6e0:	687a      	ldr	r2, [r7, #4]
 801c6e2:	4618      	mov	r0, r3
 801c6e4:	f7ff ff48 	bl	801c578 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c6e8:	f107 0314 	add.w	r3, r7, #20
 801c6ec:	4618      	mov	r0, r3
 801c6ee:	f7f0 fe36 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c6f2:	bf00      	nop
}
 801c6f4:	68f8      	ldr	r0, [r7, #12]
 801c6f6:	3730      	adds	r7, #48	; 0x30
 801c6f8:	46bd      	mov	sp, r7
 801c6fa:	bd80      	pop	{r7, pc}
 801c6fc:	08026298 	.word	0x08026298

0801c700 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801c700:	b580      	push	{r7, lr}
 801c702:	b08c      	sub	sp, #48	; 0x30
 801c704:	af00      	add	r7, sp, #0
 801c706:	60f8      	str	r0, [r7, #12]
 801c708:	60b9      	str	r1, [r7, #8]
 801c70a:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801c70c:	f107 0314 	add.w	r3, r7, #20
 801c710:	4928      	ldr	r1, [pc, #160]	; (801c7b4 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801c712:	4618      	mov	r0, r3
 801c714:	f7f0 fa6b 	bl	800cbee <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c718:	68bb      	ldr	r3, [r7, #8]
 801c71a:	685b      	ldr	r3, [r3, #4]
 801c71c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c720:	2b00      	cmp	r3, #0
 801c722:	d035      	beq.n	801c790 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c726:	681a      	ldr	r2, [r3, #0]
 801c728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	33c0      	adds	r3, #192	; 0xc0
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	4610      	mov	r0, r2
 801c734:	4798      	blx	r3
 801c736:	4603      	mov	r3, r0
 801c738:	2b00      	cmp	r3, #0
 801c73a:	d025      	beq.n	801c788 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801c73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c73e:	6819      	ldr	r1, [r3, #0]
 801c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	33f0      	adds	r3, #240	; 0xf0
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c74e:	4610      	mov	r0, r2
 801c750:	4798      	blx	r3
 801c752:	f107 001c 	add.w	r0, r7, #28
 801c756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c75a:	f107 0114 	add.w	r1, r7, #20
 801c75e:	687a      	ldr	r2, [r7, #4]
 801c760:	f7ff ff3a 	bl	801c5d8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c764:	f107 021c 	add.w	r2, r7, #28
 801c768:	f107 0314 	add.w	r3, r7, #20
 801c76c:	4611      	mov	r1, r2
 801c76e:	4618      	mov	r0, r3
 801c770:	f7f0 faa9 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801c774:	f107 031c 	add.w	r3, r7, #28
 801c778:	4618      	mov	r0, r3
 801c77a:	f7f0 fdf0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801c77e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c782:	4618      	mov	r0, r3
 801c784:	f7f0 fdeb 	bl	800d35e <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c78a:	685b      	ldr	r3, [r3, #4]
 801c78c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c78e:	e7c6      	b.n	801c71e <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	f107 0114 	add.w	r1, r7, #20
 801c796:	687a      	ldr	r2, [r7, #4]
 801c798:	4618      	mov	r0, r3
 801c79a:	f7ff feed 	bl	801c578 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c79e:	f107 0314 	add.w	r3, r7, #20
 801c7a2:	4618      	mov	r0, r3
 801c7a4:	f7f0 fddb 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c7a8:	bf00      	nop
}
 801c7aa:	68f8      	ldr	r0, [r7, #12]
 801c7ac:	3730      	adds	r7, #48	; 0x30
 801c7ae:	46bd      	mov	sp, r7
 801c7b0:	bd80      	pop	{r7, pc}
 801c7b2:	bf00      	nop
 801c7b4:	08026298 	.word	0x08026298

0801c7b8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801c7b8:	b580      	push	{r7, lr}
 801c7ba:	b08e      	sub	sp, #56	; 0x38
 801c7bc:	af00      	add	r7, sp, #0
 801c7be:	6078      	str	r0, [r7, #4]
 801c7c0:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c7c2:	f107 030c 	add.w	r3, r7, #12
 801c7c6:	4936      	ldr	r1, [pc, #216]	; (801c8a0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	f7f0 fa10 	bl	800cbee <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c7ce:	683b      	ldr	r3, [r7, #0]
 801c7d0:	685b      	ldr	r3, [r3, #4]
 801c7d2:	637b      	str	r3, [r7, #52]	; 0x34
 801c7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d044      	beq.n	801c864 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801c7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c7dc:	681a      	ldr	r2, [r3, #0]
 801c7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c7e0:	681b      	ldr	r3, [r3, #0]
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	33cc      	adds	r3, #204	; 0xcc
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	4610      	mov	r0, r2
 801c7ea:	4798      	blx	r3
 801c7ec:	4603      	mov	r3, r0
 801c7ee:	f083 0301 	eor.w	r3, r3, #1
 801c7f2:	b2db      	uxtb	r3, r3
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d031      	beq.n	801c85c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801c7f8:	f107 031c 	add.w	r3, r7, #28
 801c7fc:	4928      	ldr	r1, [pc, #160]	; (801c8a0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c7fe:	4618      	mov	r0, r3
 801c800:	f7f0 f9f5 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801c804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c806:	6819      	ldr	r1, [r3, #0]
 801c808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	681b      	ldr	r3, [r3, #0]
 801c80e:	33f4      	adds	r3, #244	; 0xf4
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c816:	4610      	mov	r0, r2
 801c818:	4798      	blx	r3
 801c81a:	f107 0014 	add.w	r0, r7, #20
 801c81e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c822:	f107 021c 	add.w	r2, r7, #28
 801c826:	f107 010c 	add.w	r1, r7, #12
 801c82a:	f7ff fed5 	bl	801c5d8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c82e:	f107 0214 	add.w	r2, r7, #20
 801c832:	f107 030c 	add.w	r3, r7, #12
 801c836:	4611      	mov	r1, r2
 801c838:	4618      	mov	r0, r3
 801c83a:	f7f0 fa44 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801c83e:	f107 0314 	add.w	r3, r7, #20
 801c842:	4618      	mov	r0, r3
 801c844:	f7f0 fd8b 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801c848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c84c:	4618      	mov	r0, r3
 801c84e:	f7f0 fd86 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801c852:	f107 031c 	add.w	r3, r7, #28
 801c856:	4618      	mov	r0, r3
 801c858:	f7f0 fd81 	bl	800d35e <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c85e:	685b      	ldr	r3, [r3, #4]
 801c860:	637b      	str	r3, [r7, #52]	; 0x34
 801c862:	e7b7      	b.n	801c7d4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801c864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c868:	490d      	ldr	r1, [pc, #52]	; (801c8a0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c86a:	4618      	mov	r0, r3
 801c86c:	f7f0 f9bf 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c876:	f107 010c 	add.w	r1, r7, #12
 801c87a:	4618      	mov	r0, r3
 801c87c:	f7ff fe7c 	bl	801c578 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801c880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c884:	4618      	mov	r0, r3
 801c886:	f7f0 fd6a 	bl	800d35e <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801c88a:	f107 030c 	add.w	r3, r7, #12
 801c88e:	4618      	mov	r0, r3
 801c890:	f7f0 fd65 	bl	800d35e <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801c894:	bf00      	nop
}
 801c896:	6878      	ldr	r0, [r7, #4]
 801c898:	3738      	adds	r7, #56	; 0x38
 801c89a:	46bd      	mov	sp, r7
 801c89c:	bd80      	pop	{r7, pc}
 801c89e:	bf00      	nop
 801c8a0:	08026298 	.word	0x08026298

0801c8a4 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801c8a4:	b580      	push	{r7, lr}
 801c8a6:	b084      	sub	sp, #16
 801c8a8:	af00      	add	r7, sp, #0
 801c8aa:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	685b      	ldr	r3, [r3, #4]
 801c8b0:	60fb      	str	r3, [r7, #12]
 801c8b2:	68fb      	ldr	r3, [r7, #12]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d014      	beq.n	801c8e2 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	681a      	ldr	r2, [r3, #0]
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	33d0      	adds	r3, #208	; 0xd0
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	4610      	mov	r0, r2
 801c8c8:	4798      	blx	r3
 801c8ca:	4603      	mov	r3, r0
 801c8cc:	f083 0301 	eor.w	r3, r3, #1
 801c8d0:	b2db      	uxtb	r3, r3
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d001      	beq.n	801c8da <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801c8d6:	2301      	movs	r3, #1
 801c8d8:	e004      	b.n	801c8e4 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	685b      	ldr	r3, [r3, #4]
 801c8de:	60fb      	str	r3, [r7, #12]
 801c8e0:	e7e7      	b.n	801c8b2 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801c8e2:	2300      	movs	r3, #0
}
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	3710      	adds	r7, #16
 801c8e8:	46bd      	mov	sp, r7
 801c8ea:	bd80      	pop	{r7, pc}

0801c8ec <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801c8ec:	b480      	push	{r7}
 801c8ee:	b083      	sub	sp, #12
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	6078      	str	r0, [r7, #4]
 801c8f4:	460b      	mov	r3, r1
 801c8f6:	70fb      	strb	r3, [r7, #3]
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	78fa      	ldrb	r2, [r7, #3]
 801c8fc:	711a      	strb	r2, [r3, #4]
 801c8fe:	bf00      	nop
 801c900:	370c      	adds	r7, #12
 801c902:	46bd      	mov	sp, r7
 801c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c908:	4770      	bx	lr
	...

0801c90c <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b082      	sub	sp, #8
 801c910:	af00      	add	r7, sp, #0
 801c912:	6078      	str	r0, [r7, #4]
 801c914:	460b      	mov	r3, r1
 801c916:	70fb      	strb	r3, [r7, #3]
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	4618      	mov	r0, r3
 801c91c:	f7ed ff6a 	bl	800a7f4 <_ZN14TestTerminatorC1Ev>
 801c920:	4a05      	ldr	r2, [pc, #20]	; (801c938 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	601a      	str	r2, [r3, #0]
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	78fa      	ldrb	r2, [r7, #3]
 801c92a:	711a      	strb	r2, [r3, #4]
    {
    }
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	4618      	mov	r0, r3
 801c930:	3708      	adds	r7, #8
 801c932:	46bd      	mov	sp, r7
 801c934:	bd80      	pop	{r7, pc}
 801c936:	bf00      	nop
 801c938:	08029408 	.word	0x08029408

0801c93c <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801c93c:	b580      	push	{r7, lr}
 801c93e:	b082      	sub	sp, #8
 801c940:	af00      	add	r7, sp, #0
 801c942:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	791b      	ldrb	r3, [r3, #4]
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d001      	beq.n	801c950 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801c94c:	f7f6 f9fe 	bl	8012d4c <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801c950:	f7f7 fd40 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c954:	4603      	mov	r3, r0
 801c956:	681a      	ldr	r2, [r3, #0]
 801c958:	6812      	ldr	r2, [r2, #0]
 801c95a:	4618      	mov	r0, r3
 801c95c:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801c95e:	bf00      	nop
 801c960:	3708      	adds	r7, #8
 801c962:	46bd      	mov	sp, r7
 801c964:	bd80      	pop	{r7, pc}
	...

0801c968 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801c968:	b580      	push	{r7, lr}
 801c96a:	b082      	sub	sp, #8
 801c96c:	af00      	add	r7, sp, #0
 801c96e:	6078      	str	r0, [r7, #4]
    {
 801c970:	4a05      	ldr	r2, [pc, #20]	; (801c988 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	601a      	str	r2, [r3, #0]
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	4618      	mov	r0, r3
 801c97a:	f7f7 fdbb 	bl	80144f4 <_ZN14TestTerminatorD1Ev>
    }
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	4618      	mov	r0, r3
 801c982:	3708      	adds	r7, #8
 801c984:	46bd      	mov	sp, r7
 801c986:	bd80      	pop	{r7, pc}
 801c988:	08029408 	.word	0x08029408

0801c98c <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801c98c:	b580      	push	{r7, lr}
 801c98e:	b082      	sub	sp, #8
 801c990:	af00      	add	r7, sp, #0
 801c992:	6078      	str	r0, [r7, #4]
    }
 801c994:	6878      	ldr	r0, [r7, #4]
 801c996:	f7ff ffe7 	bl	801c968 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801c99a:	2108      	movs	r1, #8
 801c99c:	6878      	ldr	r0, [r7, #4]
 801c99e:	f7ed fd77 	bl	800a490 <_ZdlPvj>
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	3708      	adds	r7, #8
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	bd80      	pop	{r7, pc}

0801c9ac <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801c9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9ae:	b085      	sub	sp, #20
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
 801c9b4:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	330c      	adds	r3, #12
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	6878      	ldr	r0, [r7, #4]
 801c9c0:	4798      	blx	r3
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	681a      	ldr	r2, [r3, #0]
 801c9c6:	321c      	adds	r2, #28
 801c9c8:	6812      	ldr	r2, [r2, #0]
 801c9ca:	4618      	mov	r0, r3
 801c9cc:	4790      	blx	r2
 801c9ce:	4603      	mov	r3, r0
 801c9d0:	f083 0301 	eor.w	r3, r3, #1
 801c9d4:	b2db      	uxtb	r3, r3
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d01d      	beq.n	801ca16 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	330c      	adds	r3, #12
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	6878      	ldr	r0, [r7, #4]
 801c9e4:	4798      	blx	r3
 801c9e6:	4604      	mov	r4, r0
 801c9e8:	6823      	ldr	r3, [r4, #0]
 801c9ea:	339c      	adds	r3, #156	; 0x9c
 801c9ec:	681d      	ldr	r5, [r3, #0]
 801c9ee:	683e      	ldr	r6, [r7, #0]
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	791a      	ldrb	r2, [r3, #4]
 801c9f4:	f107 0308 	add.w	r3, r7, #8
 801c9f8:	4611      	mov	r1, r2
 801c9fa:	4618      	mov	r0, r3
 801c9fc:	f7ff ff86 	bl	801c90c <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801ca00:	f107 0308 	add.w	r3, r7, #8
 801ca04:	461a      	mov	r2, r3
 801ca06:	4631      	mov	r1, r6
 801ca08:	4620      	mov	r0, r4
 801ca0a:	47a8      	blx	r5
 801ca0c:	f107 0308 	add.w	r3, r7, #8
 801ca10:	4618      	mov	r0, r3
 801ca12:	f7ff ffa9 	bl	801c968 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801ca16:	bf00      	nop
 801ca18:	3714      	adds	r7, #20
 801ca1a:	46bd      	mov	sp, r7
 801ca1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca1e <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801ca1e:	b580      	push	{r7, lr}
 801ca20:	b082      	sub	sp, #8
 801ca22:	af00      	add	r7, sp, #0
 801ca24:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801ca26:	f7f7 fcc5 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801ca2a:	4603      	mov	r3, r0
}
 801ca2c:	4618      	mov	r0, r3
 801ca2e:	3708      	adds	r7, #8
 801ca30:	46bd      	mov	sp, r7
 801ca32:	bd80      	pop	{r7, pc}

0801ca34 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801ca34:	b590      	push	{r4, r7, lr}
 801ca36:	b085      	sub	sp, #20
 801ca38:	af00      	add	r7, sp, #0
 801ca3a:	6078      	str	r0, [r7, #4]
 801ca3c:	6039      	str	r1, [r7, #0]
 801ca3e:	687c      	ldr	r4, [r7, #4]
 801ca40:	f107 0308 	add.w	r3, r7, #8
 801ca44:	490b      	ldr	r1, [pc, #44]	; (801ca74 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801ca46:	4618      	mov	r0, r3
 801ca48:	f7f0 f8d1 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ca4c:	f107 0308 	add.w	r3, r7, #8
 801ca50:	461a      	mov	r2, r3
 801ca52:	6839      	ldr	r1, [r7, #0]
 801ca54:	4620      	mov	r0, r4
 801ca56:	f7f1 ff29 	bl	800e8ac <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801ca5a:	f107 0308 	add.w	r3, r7, #8
 801ca5e:	4618      	mov	r0, r3
 801ca60:	f7f0 fc7d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ca64:	4a04      	ldr	r2, [pc, #16]	; (801ca78 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	601a      	str	r2, [r3, #0]
{
}
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	4618      	mov	r0, r3
 801ca6e:	3714      	adds	r7, #20
 801ca70:	46bd      	mov	sp, r7
 801ca72:	bd90      	pop	{r4, r7, pc}
 801ca74:	080262a8 	.word	0x080262a8
 801ca78:	08028394 	.word	0x08028394

0801ca7c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801ca7c:	b5b0      	push	{r4, r5, r7, lr}
 801ca7e:	b08a      	sub	sp, #40	; 0x28
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]
 801ca84:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	332c      	adds	r3, #44	; 0x2c
 801ca8a:	492b      	ldr	r1, [pc, #172]	; (801cb38 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801ca8c:	4618      	mov	r0, r3
 801ca8e:	f7f0 fcf5 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801ca98:	683b      	ldr	r3, [r7, #0]
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	337c      	adds	r3, #124	; 0x7c
 801ca9e:	681c      	ldr	r4, [r3, #0]
 801caa0:	f107 0310 	add.w	r3, r7, #16
 801caa4:	4925      	ldr	r1, [pc, #148]	; (801cb3c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801caa6:	4618      	mov	r0, r3
 801caa8:	f7f0 f8a1 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801caac:	f107 0308 	add.w	r3, r7, #8
 801cab0:	f107 0210 	add.w	r2, r7, #16
 801cab4:	6839      	ldr	r1, [r7, #0]
 801cab6:	4618      	mov	r0, r3
 801cab8:	47a0      	blx	r4
 801caba:	f107 0308 	add.w	r3, r7, #8
 801cabe:	4619      	mov	r1, r3
 801cac0:	4628      	mov	r0, r5
 801cac2:	f7f0 fcc9 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801cac6:	f107 0308 	add.w	r3, r7, #8
 801caca:	4618      	mov	r0, r3
 801cacc:	f7f0 fc47 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801cad0:	f107 0310 	add.w	r3, r7, #16
 801cad4:	4618      	mov	r0, r3
 801cad6:	f7f0 fc42 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	332c      	adds	r3, #44	; 0x2c
 801cade:	4918      	ldr	r1, [pc, #96]	; (801cb40 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801cae0:	4618      	mov	r0, r3
 801cae2:	f7f0 fccb 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801caec:	683b      	ldr	r3, [r7, #0]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	3380      	adds	r3, #128	; 0x80
 801caf2:	681c      	ldr	r4, [r3, #0]
 801caf4:	f107 0320 	add.w	r3, r7, #32
 801caf8:	4910      	ldr	r1, [pc, #64]	; (801cb3c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801cafa:	4618      	mov	r0, r3
 801cafc:	f7f0 f877 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801cb00:	f107 0318 	add.w	r3, r7, #24
 801cb04:	f107 0220 	add.w	r2, r7, #32
 801cb08:	6839      	ldr	r1, [r7, #0]
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	47a0      	blx	r4
 801cb0e:	f107 0318 	add.w	r3, r7, #24
 801cb12:	4619      	mov	r1, r3
 801cb14:	4628      	mov	r0, r5
 801cb16:	f7f0 fc9f 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801cb1a:	f107 0318 	add.w	r3, r7, #24
 801cb1e:	4618      	mov	r0, r3
 801cb20:	f7f0 fc1d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801cb24:	f107 0320 	add.w	r3, r7, #32
 801cb28:	4618      	mov	r0, r3
 801cb2a:	f7f0 fc18 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 801cb2e:	bf00      	nop
 801cb30:	3728      	adds	r7, #40	; 0x28
 801cb32:	46bd      	mov	sp, r7
 801cb34:	bdb0      	pop	{r4, r5, r7, pc}
 801cb36:	bf00      	nop
 801cb38:	080262f8 	.word	0x080262f8
 801cb3c:	08026324 	.word	0x08026324
 801cb40:	08026328 	.word	0x08026328

0801cb44 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801cb44:	b590      	push	{r4, r7, lr}
 801cb46:	b08f      	sub	sp, #60	; 0x3c
 801cb48:	af00      	add	r7, sp, #0
 801cb4a:	60f8      	str	r0, [r7, #12]
 801cb4c:	60b9      	str	r1, [r7, #8]
 801cb4e:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801cb50:	f107 0310 	add.w	r3, r7, #16
 801cb54:	4618      	mov	r0, r3
 801cb56:	f7ff f877 	bl	801bc48 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801cb5a:	f107 0310 	add.w	r3, r7, #16
 801cb5e:	687a      	ldr	r2, [r7, #4]
 801cb60:	68b9      	ldr	r1, [r7, #8]
 801cb62:	4618      	mov	r0, r3
 801cb64:	f7ff fa16 	bl	801bf94 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801cb68:	68fb      	ldr	r3, [r7, #12]
 801cb6a:	332c      	adds	r3, #44	; 0x2c
 801cb6c:	4937      	ldr	r1, [pc, #220]	; (801cc4c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801cb6e:	4618      	mov	r0, r3
 801cb70:	f7f0 fc84 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	332c      	adds	r3, #44	; 0x2c
 801cb78:	68b9      	ldr	r1, [r7, #8]
 801cb7a:	4618      	mov	r0, r3
 801cb7c:	f7f0 fc6c 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	332c      	adds	r3, #44	; 0x2c
 801cb84:	4932      	ldr	r1, [pc, #200]	; (801cc50 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801cb86:	4618      	mov	r0, r3
 801cb88:	f7f0 fc78 	bl	800d47c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cb92:	f107 0320 	add.w	r3, r7, #32
 801cb96:	492f      	ldr	r1, [pc, #188]	; (801cc54 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801cb98:	4618      	mov	r0, r3
 801cb9a:	f7f0 f828 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801cb9e:	f107 0318 	add.w	r3, r7, #24
 801cba2:	f107 0220 	add.w	r2, r7, #32
 801cba6:	f107 0110 	add.w	r1, r7, #16
 801cbaa:	4618      	mov	r0, r3
 801cbac:	f7ff fd4a 	bl	801c644 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801cbb0:	f107 0318 	add.w	r3, r7, #24
 801cbb4:	4619      	mov	r1, r3
 801cbb6:	4620      	mov	r0, r4
 801cbb8:	f7f0 fc4e 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801cbbc:	f107 0318 	add.w	r3, r7, #24
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	f7f0 fbcc 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801cbc6:	f107 0320 	add.w	r3, r7, #32
 801cbca:	4618      	mov	r0, r3
 801cbcc:	f7f0 fbc7 	bl	800d35e <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801cbd0:	68fb      	ldr	r3, [r7, #12]
 801cbd2:	332c      	adds	r3, #44	; 0x2c
 801cbd4:	4920      	ldr	r1, [pc, #128]	; (801cc58 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801cbd6:	4618      	mov	r0, r3
 801cbd8:	f7f0 fc50 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	332c      	adds	r3, #44	; 0x2c
 801cbe0:	68b9      	ldr	r1, [r7, #8]
 801cbe2:	4618      	mov	r0, r3
 801cbe4:	f7f0 fc38 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	332c      	adds	r3, #44	; 0x2c
 801cbec:	4918      	ldr	r1, [pc, #96]	; (801cc50 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801cbee:	4618      	mov	r0, r3
 801cbf0:	f7f0 fc44 	bl	800d47c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801cbf4:	68fb      	ldr	r3, [r7, #12]
 801cbf6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cbfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cbfe:	4915      	ldr	r1, [pc, #84]	; (801cc54 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801cc00:	4618      	mov	r0, r3
 801cc02:	f7ef fff4 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801cc06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cc0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801cc0e:	f107 0110 	add.w	r1, r7, #16
 801cc12:	4618      	mov	r0, r3
 801cc14:	f7ff fd74 	bl	801c700 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801cc18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cc1c:	4619      	mov	r1, r3
 801cc1e:	4620      	mov	r0, r4
 801cc20:	f7f0 fc1a 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801cc24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cc28:	4618      	mov	r0, r3
 801cc2a:	f7f0 fb98 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801cc2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cc32:	4618      	mov	r0, r3
 801cc34:	f7f0 fb93 	bl	800d35e <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801cc38:	f107 0310 	add.w	r3, r7, #16
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	f7ff f817 	bl	801bc70 <_ZN21MockExpectedCallsListD1Ev>
}
 801cc42:	bf00      	nop
 801cc44:	373c      	adds	r7, #60	; 0x3c
 801cc46:	46bd      	mov	sp, r7
 801cc48:	bd90      	pop	{r4, r7, pc}
 801cc4a:	bf00      	nop
 801cc4c:	08026350 	.word	0x08026350
 801cc50:	08026390 	.word	0x08026390
 801cc54:	08026324 	.word	0x08026324
 801cc58:	08026394 	.word	0x08026394

0801cc5c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cc5c:	b590      	push	{r4, r7, lr}
 801cc5e:	b087      	sub	sp, #28
 801cc60:	af00      	add	r7, sp, #0
 801cc62:	60f8      	str	r0, [r7, #12]
 801cc64:	60b9      	str	r1, [r7, #8]
 801cc66:	607a      	str	r2, [r7, #4]
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	68b9      	ldr	r1, [r7, #8]
 801cc6c:	4618      	mov	r0, r3
 801cc6e:	f7ff fee1 	bl	801ca34 <_ZN11MockFailureC1EP10UtestShell>
 801cc72:	4a10      	ldr	r2, [pc, #64]	; (801ccb4 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cc7e:	f107 0310 	add.w	r3, r7, #16
 801cc82:	490d      	ldr	r1, [pc, #52]	; (801ccb8 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801cc84:	4618      	mov	r0, r3
 801cc86:	f7ef ffb2 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801cc8a:	f107 0310 	add.w	r3, r7, #16
 801cc8e:	4619      	mov	r1, r3
 801cc90:	4620      	mov	r0, r4
 801cc92:	f7f0 f818 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801cc96:	f107 0310 	add.w	r3, r7, #16
 801cc9a:	4618      	mov	r0, r3
 801cc9c:	f7f0 fb5f 	bl	800d35e <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	6879      	ldr	r1, [r7, #4]
 801cca4:	4618      	mov	r0, r3
 801cca6:	f7ff fee9 	bl	801ca7c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801ccaa:	68fb      	ldr	r3, [r7, #12]
 801ccac:	4618      	mov	r0, r3
 801ccae:	371c      	adds	r7, #28
 801ccb0:	46bd      	mov	sp, r7
 801ccb2:	bd90      	pop	{r4, r7, pc}
 801ccb4:	08028368 	.word	0x08028368
 801ccb8:	080263d0 	.word	0x080263d0

0801ccbc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ccbc:	b590      	push	{r4, r7, lr}
 801ccbe:	b08d      	sub	sp, #52	; 0x34
 801ccc0:	af00      	add	r7, sp, #0
 801ccc2:	60f8      	str	r0, [r7, #12]
 801ccc4:	60b9      	str	r1, [r7, #8]
 801ccc6:	607a      	str	r2, [r7, #4]
 801ccc8:	603b      	str	r3, [r7, #0]
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	68b9      	ldr	r1, [r7, #8]
 801ccce:	4618      	mov	r0, r3
 801ccd0:	f7ff feb0 	bl	801ca34 <_ZN11MockFailureC1EP10UtestShell>
 801ccd4:	4a2f      	ldr	r2, [pc, #188]	; (801cd94 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801ccd6:	68fb      	ldr	r3, [r7, #12]
 801ccd8:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801ccda:	683b      	ldr	r3, [r7, #0]
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	3310      	adds	r3, #16
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	6879      	ldr	r1, [r7, #4]
 801cce4:	6838      	ldr	r0, [r7, #0]
 801cce6:	4798      	blx	r3
 801cce8:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801ccea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d027      	beq.n	801cd40 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccf2:	1c5a      	adds	r2, r3, #1
 801ccf4:	f107 0314 	add.w	r3, r7, #20
 801ccf8:	4611      	mov	r1, r2
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	f7f1 fa00 	bl	800e100 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cd06:	f107 0314 	add.w	r3, r7, #20
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	f7f0 fafa 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801cd10:	4602      	mov	r2, r0
 801cd12:	f107 031c 	add.w	r3, r7, #28
 801cd16:	4920      	ldr	r1, [pc, #128]	; (801cd98 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801cd18:	4618      	mov	r0, r3
 801cd1a:	f7f1 f827 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801cd1e:	f107 031c 	add.w	r3, r7, #28
 801cd22:	4619      	mov	r1, r3
 801cd24:	4620      	mov	r0, r4
 801cd26:	f7ef ffce 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801cd2a:	f107 031c 	add.w	r3, r7, #28
 801cd2e:	4618      	mov	r0, r3
 801cd30:	f7f0 fb15 	bl	800d35e <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801cd34:	f107 0314 	add.w	r3, r7, #20
 801cd38:	4618      	mov	r0, r3
 801cd3a:	f7f0 fb10 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801cd3e:	e013      	b.n	801cd68 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cd46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd4a:	4914      	ldr	r1, [pc, #80]	; (801cd9c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801cd4c:	4618      	mov	r0, r3
 801cd4e:	f7ef ff4e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801cd52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd56:	4619      	mov	r1, r3
 801cd58:	4620      	mov	r0, r4
 801cd5a:	f7ef ffb4 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801cd5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd62:	4618      	mov	r0, r3
 801cd64:	f7f0 fafb 	bl	800d35e <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	332c      	adds	r3, #44	; 0x2c
 801cd6c:	6879      	ldr	r1, [r7, #4]
 801cd6e:	4618      	mov	r0, r3
 801cd70:	f7f0 fb72 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cd74:	68fb      	ldr	r3, [r7, #12]
 801cd76:	332c      	adds	r3, #44	; 0x2c
 801cd78:	4909      	ldr	r1, [pc, #36]	; (801cda0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801cd7a:	4618      	mov	r0, r3
 801cd7c:	f7f0 fb7e 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	6839      	ldr	r1, [r7, #0]
 801cd84:	4618      	mov	r0, r3
 801cd86:	f7ff fe79 	bl	801ca7c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801cd8a:	68fb      	ldr	r3, [r7, #12]
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	3734      	adds	r7, #52	; 0x34
 801cd90:	46bd      	mov	sp, r7
 801cd92:	bd90      	pop	{r4, r7, pc}
 801cd94:	08028d08 	.word	0x08028d08
 801cd98:	08026400 	.word	0x08026400
 801cd9c:	0802643c 	.word	0x0802643c
 801cda0:	08026390 	.word	0x08026390

0801cda4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cda4:	b590      	push	{r4, r7, lr}
 801cda6:	b089      	sub	sp, #36	; 0x24
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	60f8      	str	r0, [r7, #12]
 801cdac:	60b9      	str	r1, [r7, #8]
 801cdae:	607a      	str	r2, [r7, #4]
 801cdb0:	68fb      	ldr	r3, [r7, #12]
 801cdb2:	68b9      	ldr	r1, [r7, #8]
 801cdb4:	4618      	mov	r0, r3
 801cdb6:	f7ff fe3d 	bl	801ca34 <_ZN11MockFailureC1EP10UtestShell>
 801cdba:	4a1f      	ldr	r2, [pc, #124]	; (801ce38 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801cdc0:	f107 0310 	add.w	r3, r7, #16
 801cdc4:	4618      	mov	r0, r3
 801cdc6:	f7fe ff3f 	bl	801bc48 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801cdca:	f107 0310 	add.w	r3, r7, #16
 801cdce:	6879      	ldr	r1, [r7, #4]
 801cdd0:	4618      	mov	r0, r3
 801cdd2:	f7ff f909 	bl	801bfe8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801cdd6:	f107 0310 	add.w	r3, r7, #16
 801cdda:	4618      	mov	r0, r3
 801cddc:	f7ff f94c 	bl	801c078 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cde6:	f107 0318 	add.w	r3, r7, #24
 801cdea:	4914      	ldr	r1, [pc, #80]	; (801ce3c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801cdec:	4618      	mov	r0, r3
 801cdee:	f7ef fefe 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801cdf2:	f107 0318 	add.w	r3, r7, #24
 801cdf6:	4619      	mov	r1, r3
 801cdf8:	4620      	mov	r0, r4
 801cdfa:	f7ef ff64 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801cdfe:	f107 0318 	add.w	r3, r7, #24
 801ce02:	4618      	mov	r0, r3
 801ce04:	f7f0 faab 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	332c      	adds	r3, #44	; 0x2c
 801ce0c:	490c      	ldr	r1, [pc, #48]	; (801ce40 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801ce0e:	4618      	mov	r0, r3
 801ce10:	f7f0 fb34 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	f107 0210 	add.w	r2, r7, #16
 801ce1a:	4611      	mov	r1, r2
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	f7ff fe2d 	bl	801ca7c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801ce22:	f107 0310 	add.w	r3, r7, #16
 801ce26:	4618      	mov	r0, r3
 801ce28:	f7fe ff22 	bl	801bc70 <_ZN21MockExpectedCallsListD1Ev>
}
 801ce2c:	68fb      	ldr	r3, [r7, #12]
 801ce2e:	4618      	mov	r0, r3
 801ce30:	3724      	adds	r7, #36	; 0x24
 801ce32:	46bd      	mov	sp, r7
 801ce34:	bd90      	pop	{r4, r7, pc}
 801ce36:	bf00      	nop
 801ce38:	0802833c 	.word	0x0802833c
 801ce3c:	08026468 	.word	0x08026468
 801ce40:	08026390 	.word	0x08026390

0801ce44 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801ce44:	b590      	push	{r4, r7, lr}
 801ce46:	b099      	sub	sp, #100	; 0x64
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	60f8      	str	r0, [r7, #12]
 801ce4c:	60b9      	str	r1, [r7, #8]
 801ce4e:	607a      	str	r2, [r7, #4]
 801ce50:	603b      	str	r3, [r7, #0]
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	68b9      	ldr	r1, [r7, #8]
 801ce56:	4618      	mov	r0, r3
 801ce58:	f7ff fdec 	bl	801ca34 <_ZN11MockFailureC1EP10UtestShell>
 801ce5c:	4a9e      	ldr	r2, [pc, #632]	; (801d0d8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ce62:	f107 0310 	add.w	r3, r7, #16
 801ce66:	4618      	mov	r0, r3
 801ce68:	f7fe feee 	bl	801bc48 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801ce6c:	f107 0310 	add.w	r3, r7, #16
 801ce70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ce72:	6879      	ldr	r1, [r7, #4]
 801ce74:	4618      	mov	r0, r3
 801ce76:	f7ff f88d 	bl	801bf94 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801ce7a:	683b      	ldr	r3, [r7, #0]
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	335c      	adds	r3, #92	; 0x5c
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	f107 0218 	add.w	r2, r7, #24
 801ce86:	6839      	ldr	r1, [r7, #0]
 801ce88:	4610      	mov	r0, r2
 801ce8a:	4798      	blx	r3
 801ce8c:	f107 0218 	add.w	r2, r7, #24
 801ce90:	f107 0310 	add.w	r3, r7, #16
 801ce94:	4611      	mov	r1, r2
 801ce96:	4618      	mov	r0, r3
 801ce98:	f7ff f948 	bl	801c12c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801ce9c:	f107 0318 	add.w	r3, r7, #24
 801cea0:	4618      	mov	r0, r3
 801cea2:	f7f0 fa5c 	bl	800d35e <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801cea6:	f107 0310 	add.w	r3, r7, #16
 801ceaa:	4618      	mov	r0, r3
 801ceac:	f7fe ff4d 	bl	801bd4a <_ZNK21MockExpectedCallsList7isEmptyEv>
 801ceb0:	4603      	mov	r3, r0
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d037      	beq.n	801cf26 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801ceb6:	68fb      	ldr	r3, [r7, #12]
 801ceb8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cebc:	f107 0320 	add.w	r3, r7, #32
 801cec0:	4986      	ldr	r1, [pc, #536]	; (801d0dc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801cec2:	4618      	mov	r0, r3
 801cec4:	f7ef fe93 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801cec8:	f107 0320 	add.w	r3, r7, #32
 801cecc:	4619      	mov	r1, r3
 801cece:	4620      	mov	r0, r4
 801ced0:	f7ef fef9 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801ced4:	f107 0320 	add.w	r3, r7, #32
 801ced8:	4618      	mov	r0, r3
 801ceda:	f7f0 fa40 	bl	800d35e <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	332c      	adds	r3, #44	; 0x2c
 801cee2:	6879      	ldr	r1, [r7, #4]
 801cee4:	4618      	mov	r0, r3
 801cee6:	f7f0 fab7 	bl	800d458 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801ceea:	68fb      	ldr	r3, [r7, #12]
 801ceec:	332c      	adds	r3, #44	; 0x2c
 801ceee:	497c      	ldr	r1, [pc, #496]	; (801d0e0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801cef0:	4618      	mov	r0, r3
 801cef2:	f7f0 fac3 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801cef6:	68fb      	ldr	r3, [r7, #12]
 801cef8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cefc:	683b      	ldr	r3, [r7, #0]
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	335c      	adds	r3, #92	; 0x5c
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801cf08:	6839      	ldr	r1, [r7, #0]
 801cf0a:	4610      	mov	r0, r2
 801cf0c:	4798      	blx	r3
 801cf0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cf12:	4619      	mov	r1, r3
 801cf14:	4620      	mov	r0, r4
 801cf16:	f7f0 fa9f 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801cf1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cf1e:	4618      	mov	r0, r3
 801cf20:	f7f0 fa1d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801cf24:	e056      	b.n	801cfd4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cf2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cf30:	496c      	ldr	r1, [pc, #432]	; (801d0e4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801cf32:	4618      	mov	r0, r3
 801cf34:	f7ef fe5b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801cf38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cf3c:	4619      	mov	r1, r3
 801cf3e:	4620      	mov	r0, r4
 801cf40:	f7ef fec1 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801cf44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cf48:	4618      	mov	r0, r3
 801cf4a:	f7f0 fa08 	bl	800d35e <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cf54:	683b      	ldr	r3, [r7, #0]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	335c      	adds	r3, #92	; 0x5c
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801cf60:	6839      	ldr	r1, [r7, #0]
 801cf62:	4610      	mov	r0, r2
 801cf64:	4798      	blx	r3
 801cf66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cf6a:	4619      	mov	r1, r3
 801cf6c:	4620      	mov	r0, r4
 801cf6e:	f7f0 fa73 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801cf72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cf76:	4618      	mov	r0, r3
 801cf78:	f7f0 f9f1 	bl	800d35e <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	332c      	adds	r3, #44	; 0x2c
 801cf80:	4959      	ldr	r1, [pc, #356]	; (801d0e8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801cf82:	4618      	mov	r0, r3
 801cf84:	f7f0 fa7a 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	332c      	adds	r3, #44	; 0x2c
 801cf8c:	6879      	ldr	r1, [r7, #4]
 801cf8e:	4618      	mov	r0, r3
 801cf90:	f7f0 fa62 	bl	800d458 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	332c      	adds	r3, #44	; 0x2c
 801cf98:	4954      	ldr	r1, [pc, #336]	; (801d0ec <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801cf9a:	4618      	mov	r0, r3
 801cf9c:	f7f0 fa6e 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cfa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cfaa:	6839      	ldr	r1, [r7, #0]
 801cfac:	4618      	mov	r0, r3
 801cfae:	f7fd faa3 	bl	801a4f8 <_Z10StringFromRK14MockNamedValue>
 801cfb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cfb6:	4619      	mov	r1, r3
 801cfb8:	4620      	mov	r0, r4
 801cfba:	f7f0 fa4d 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801cfbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	f7f0 f9cb 	bl	800d35e <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801cfc8:	68fb      	ldr	r3, [r7, #12]
 801cfca:	332c      	adds	r3, #44	; 0x2c
 801cfcc:	4948      	ldr	r1, [pc, #288]	; (801d0f0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801cfce:	4618      	mov	r0, r3
 801cfd0:	f7f0 fa54 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	332c      	adds	r3, #44	; 0x2c
 801cfd8:	4946      	ldr	r1, [pc, #280]	; (801d0f4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801cfda:	4618      	mov	r0, r3
 801cfdc:	f7f0 fa4e 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801cfe4:	6879      	ldr	r1, [r7, #4]
 801cfe6:	4618      	mov	r0, r3
 801cfe8:	f7ff fdac 	bl	801cb44 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801cfec:	68fb      	ldr	r3, [r7, #12]
 801cfee:	332c      	adds	r3, #44	; 0x2c
 801cff0:	4941      	ldr	r1, [pc, #260]	; (801d0f8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801cff2:	4618      	mov	r0, r3
 801cff4:	f7f0 fa42 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	332c      	adds	r3, #44	; 0x2c
 801cffc:	6879      	ldr	r1, [r7, #4]
 801cffe:	4618      	mov	r0, r3
 801d000:	f7f0 fa2a 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	332c      	adds	r3, #44	; 0x2c
 801d008:	493a      	ldr	r1, [pc, #232]	; (801d0f4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801d00a:	4618      	mov	r0, r3
 801d00c:	f7f0 fa36 	bl	800d47c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	332c      	adds	r3, #44	; 0x2c
 801d014:	4939      	ldr	r1, [pc, #228]	; (801d0fc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801d016:	4618      	mov	r0, r3
 801d018:	f7f0 fa30 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801d01c:	68fb      	ldr	r3, [r7, #12]
 801d01e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d022:	683b      	ldr	r3, [r7, #0]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	3360      	adds	r3, #96	; 0x60
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d02e:	6839      	ldr	r1, [r7, #0]
 801d030:	4610      	mov	r0, r2
 801d032:	4798      	blx	r3
 801d034:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d038:	4619      	mov	r1, r3
 801d03a:	4620      	mov	r0, r4
 801d03c:	f7f0 fa0c 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801d040:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d044:	4618      	mov	r0, r3
 801d046:	f7f0 f98a 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	332c      	adds	r3, #44	; 0x2c
 801d04e:	492c      	ldr	r1, [pc, #176]	; (801d100 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801d050:	4618      	mov	r0, r3
 801d052:	f7f0 fa13 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d05c:	683b      	ldr	r3, [r7, #0]
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	335c      	adds	r3, #92	; 0x5c
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d068:	6839      	ldr	r1, [r7, #0]
 801d06a:	4610      	mov	r0, r2
 801d06c:	4798      	blx	r3
 801d06e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d072:	4619      	mov	r1, r3
 801d074:	4620      	mov	r0, r4
 801d076:	f7f0 f9ef 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801d07a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d07e:	4618      	mov	r0, r3
 801d080:	f7f0 f96d 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	332c      	adds	r3, #44	; 0x2c
 801d088:	491e      	ldr	r1, [pc, #120]	; (801d104 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7f0 f9f6 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d096:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d09a:	6839      	ldr	r1, [r7, #0]
 801d09c:	4618      	mov	r0, r3
 801d09e:	f7fd fa2b 	bl	801a4f8 <_Z10StringFromRK14MockNamedValue>
 801d0a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d0a6:	4619      	mov	r1, r3
 801d0a8:	4620      	mov	r0, r4
 801d0aa:	f7f0 f9d5 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801d0ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	f7f0 f953 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	332c      	adds	r3, #44	; 0x2c
 801d0bc:	490c      	ldr	r1, [pc, #48]	; (801d0f0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f7f0 f9dc 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d0c4:	f107 0310 	add.w	r3, r7, #16
 801d0c8:	4618      	mov	r0, r3
 801d0ca:	f7fe fdd1 	bl	801bc70 <_ZN21MockExpectedCallsListD1Ev>
}
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	3764      	adds	r7, #100	; 0x64
 801d0d4:	46bd      	mov	sp, r7
 801d0d6:	bd90      	pop	{r4, r7, pc}
 801d0d8:	08028cdc 	.word	0x08028cdc
 801d0dc:	0802648c 	.word	0x0802648c
 801d0e0:	080264c4 	.word	0x080264c4
 801d0e4:	080264c8 	.word	0x080264c8
 801d0e8:	08026500 	.word	0x08026500
 801d0ec:	08026510 	.word	0x08026510
 801d0f0:	08026518 	.word	0x08026518
 801d0f4:	08026390 	.word	0x08026390
 801d0f8:	0802651c 	.word	0x0802651c
 801d0fc:	08026324 	.word	0x08026324
 801d100:	08026550 	.word	0x08026550
 801d104:	08026554 	.word	0x08026554

0801d108 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801d108:	b590      	push	{r4, r7, lr}
 801d10a:	b097      	sub	sp, #92	; 0x5c
 801d10c:	af00      	add	r7, sp, #0
 801d10e:	60f8      	str	r0, [r7, #12]
 801d110:	60b9      	str	r1, [r7, #8]
 801d112:	607a      	str	r2, [r7, #4]
 801d114:	603b      	str	r3, [r7, #0]
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	68b9      	ldr	r1, [r7, #8]
 801d11a:	4618      	mov	r0, r3
 801d11c:	f7ff fc8a 	bl	801ca34 <_ZN11MockFailureC1EP10UtestShell>
 801d120:	4a90      	ldr	r2, [pc, #576]	; (801d364 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801d122:	68fb      	ldr	r3, [r7, #12]
 801d124:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d126:	f107 0310 	add.w	r3, r7, #16
 801d12a:	4618      	mov	r0, r3
 801d12c:	f7fe fd8c 	bl	801bc48 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801d130:	f107 0310 	add.w	r3, r7, #16
 801d134:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d136:	6879      	ldr	r1, [r7, #4]
 801d138:	4618      	mov	r0, r3
 801d13a:	f7fe ff2b 	bl	801bf94 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801d13e:	683b      	ldr	r3, [r7, #0]
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	335c      	adds	r3, #92	; 0x5c
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	f107 0218 	add.w	r2, r7, #24
 801d14a:	6839      	ldr	r1, [r7, #0]
 801d14c:	4610      	mov	r0, r2
 801d14e:	4798      	blx	r3
 801d150:	f107 0218 	add.w	r2, r7, #24
 801d154:	f107 0310 	add.w	r3, r7, #16
 801d158:	4611      	mov	r1, r2
 801d15a:	4618      	mov	r0, r3
 801d15c:	f7ff f812 	bl	801c184 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801d160:	f107 0318 	add.w	r3, r7, #24
 801d164:	4618      	mov	r0, r3
 801d166:	f7f0 f8fa 	bl	800d35e <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801d16a:	f107 0310 	add.w	r3, r7, #16
 801d16e:	4618      	mov	r0, r3
 801d170:	f7fe fdeb 	bl	801bd4a <_ZNK21MockExpectedCallsList7isEmptyEv>
 801d174:	4603      	mov	r3, r0
 801d176:	2b00      	cmp	r3, #0
 801d178:	d037      	beq.n	801d1ea <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d180:	f107 0320 	add.w	r3, r7, #32
 801d184:	4978      	ldr	r1, [pc, #480]	; (801d368 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801d186:	4618      	mov	r0, r3
 801d188:	f7ef fd31 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d18c:	f107 0320 	add.w	r3, r7, #32
 801d190:	4619      	mov	r1, r3
 801d192:	4620      	mov	r0, r4
 801d194:	f7ef fd97 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d198:	f107 0320 	add.w	r3, r7, #32
 801d19c:	4618      	mov	r0, r3
 801d19e:	f7f0 f8de 	bl	800d35e <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	332c      	adds	r3, #44	; 0x2c
 801d1a6:	6879      	ldr	r1, [r7, #4]
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	f7f0 f955 	bl	800d458 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801d1ae:	68fb      	ldr	r3, [r7, #12]
 801d1b0:	332c      	adds	r3, #44	; 0x2c
 801d1b2:	496e      	ldr	r1, [pc, #440]	; (801d36c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801d1b4:	4618      	mov	r0, r3
 801d1b6:	f7f0 f961 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d1ba:	68fb      	ldr	r3, [r7, #12]
 801d1bc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d1c0:	683b      	ldr	r3, [r7, #0]
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	335c      	adds	r3, #92	; 0x5c
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d1cc:	6839      	ldr	r1, [r7, #0]
 801d1ce:	4610      	mov	r0, r2
 801d1d0:	4798      	blx	r3
 801d1d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d1d6:	4619      	mov	r1, r3
 801d1d8:	4620      	mov	r0, r4
 801d1da:	f7f0 f93d 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801d1de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	f7f0 f8bb 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801d1e8:	e059      	b.n	801d29e <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801d1ea:	68fb      	ldr	r3, [r7, #12]
 801d1ec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d1f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d1f4:	495e      	ldr	r1, [pc, #376]	; (801d370 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	f7ef fcf9 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d1fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d200:	4619      	mov	r1, r3
 801d202:	4620      	mov	r0, r4
 801d204:	f7ef fd5f 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d208:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d20c:	4618      	mov	r0, r3
 801d20e:	f7f0 f8a6 	bl	800d35e <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801d212:	68fb      	ldr	r3, [r7, #12]
 801d214:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d218:	683b      	ldr	r3, [r7, #0]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	3360      	adds	r3, #96	; 0x60
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d224:	6839      	ldr	r1, [r7, #0]
 801d226:	4610      	mov	r0, r2
 801d228:	4798      	blx	r3
 801d22a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d22e:	4619      	mov	r1, r3
 801d230:	4620      	mov	r0, r4
 801d232:	f7f0 f911 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801d236:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d23a:	4618      	mov	r0, r3
 801d23c:	f7f0 f88f 	bl	800d35e <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	332c      	adds	r3, #44	; 0x2c
 801d244:	494b      	ldr	r1, [pc, #300]	; (801d374 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801d246:	4618      	mov	r0, r3
 801d248:	f7f0 f918 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d252:	683b      	ldr	r3, [r7, #0]
 801d254:	681b      	ldr	r3, [r3, #0]
 801d256:	335c      	adds	r3, #92	; 0x5c
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801d25e:	6839      	ldr	r1, [r7, #0]
 801d260:	4610      	mov	r0, r2
 801d262:	4798      	blx	r3
 801d264:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d268:	4619      	mov	r1, r3
 801d26a:	4620      	mov	r0, r4
 801d26c:	f7f0 f8f4 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801d270:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d274:	4618      	mov	r0, r3
 801d276:	f7f0 f872 	bl	800d35e <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	332c      	adds	r3, #44	; 0x2c
 801d27e:	493e      	ldr	r1, [pc, #248]	; (801d378 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801d280:	4618      	mov	r0, r3
 801d282:	f7f0 f8fb 	bl	800d47c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	332c      	adds	r3, #44	; 0x2c
 801d28a:	6879      	ldr	r1, [r7, #4]
 801d28c:	4618      	mov	r0, r3
 801d28e:	f7f0 f8e3 	bl	800d458 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	332c      	adds	r3, #44	; 0x2c
 801d296:	4939      	ldr	r1, [pc, #228]	; (801d37c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801d298:	4618      	mov	r0, r3
 801d29a:	f7f0 f8ef 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	332c      	adds	r3, #44	; 0x2c
 801d2a2:	4937      	ldr	r1, [pc, #220]	; (801d380 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	f7f0 f8e9 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d2ae:	6879      	ldr	r1, [r7, #4]
 801d2b0:	4618      	mov	r0, r3
 801d2b2:	f7ff fc47 	bl	801cb44 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	332c      	adds	r3, #44	; 0x2c
 801d2ba:	4932      	ldr	r1, [pc, #200]	; (801d384 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801d2bc:	4618      	mov	r0, r3
 801d2be:	f7f0 f8dd 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	332c      	adds	r3, #44	; 0x2c
 801d2c6:	6879      	ldr	r1, [r7, #4]
 801d2c8:	4618      	mov	r0, r3
 801d2ca:	f7f0 f8c5 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	332c      	adds	r3, #44	; 0x2c
 801d2d2:	492b      	ldr	r1, [pc, #172]	; (801d380 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	f7f0 f8d1 	bl	800d47c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	332c      	adds	r3, #44	; 0x2c
 801d2de:	492a      	ldr	r1, [pc, #168]	; (801d388 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801d2e0:	4618      	mov	r0, r3
 801d2e2:	f7f0 f8cb 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801d2e6:	68fb      	ldr	r3, [r7, #12]
 801d2e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d2ec:	683b      	ldr	r3, [r7, #0]
 801d2ee:	681b      	ldr	r3, [r3, #0]
 801d2f0:	3360      	adds	r3, #96	; 0x60
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d2f8:	6839      	ldr	r1, [r7, #0]
 801d2fa:	4610      	mov	r0, r2
 801d2fc:	4798      	blx	r3
 801d2fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d302:	4619      	mov	r1, r3
 801d304:	4620      	mov	r0, r4
 801d306:	f7f0 f8a7 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801d30a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d30e:	4618      	mov	r0, r3
 801d310:	f7f0 f825 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	332c      	adds	r3, #44	; 0x2c
 801d318:	491c      	ldr	r1, [pc, #112]	; (801d38c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801d31a:	4618      	mov	r0, r3
 801d31c:	f7f0 f8ae 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801d320:	68fb      	ldr	r3, [r7, #12]
 801d322:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d326:	683b      	ldr	r3, [r7, #0]
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	335c      	adds	r3, #92	; 0x5c
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d332:	6839      	ldr	r1, [r7, #0]
 801d334:	4610      	mov	r0, r2
 801d336:	4798      	blx	r3
 801d338:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d33c:	4619      	mov	r1, r3
 801d33e:	4620      	mov	r0, r4
 801d340:	f7f0 f88a 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801d344:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d348:	4618      	mov	r0, r3
 801d34a:	f7f0 f808 	bl	800d35e <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d34e:	f107 0310 	add.w	r3, r7, #16
 801d352:	4618      	mov	r0, r3
 801d354:	f7fe fc8c 	bl	801bc70 <_ZN21MockExpectedCallsListD1Ev>
}
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	4618      	mov	r0, r3
 801d35c:	375c      	adds	r7, #92	; 0x5c
 801d35e:	46bd      	mov	sp, r7
 801d360:	bd90      	pop	{r4, r7, pc}
 801d362:	bf00      	nop
 801d364:	08028cb0 	.word	0x08028cb0
 801d368:	08026558 	.word	0x08026558
 801d36c:	080264c4 	.word	0x080264c4
 801d370:	08026598 	.word	0x08026598
 801d374:	080265c4 	.word	0x080265c4
 801d378:	08026500 	.word	0x08026500
 801d37c:	080265dc 	.word	0x080265dc
 801d380:	08026390 	.word	0x08026390
 801d384:	080265e0 	.word	0x080265e0
 801d388:	08026324 	.word	0x08026324
 801d38c:	08026550 	.word	0x08026550

0801d390 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d390:	b590      	push	{r4, r7, lr}
 801d392:	b08b      	sub	sp, #44	; 0x2c
 801d394:	af00      	add	r7, sp, #0
 801d396:	60f8      	str	r0, [r7, #12]
 801d398:	60b9      	str	r1, [r7, #8]
 801d39a:	607a      	str	r2, [r7, #4]
 801d39c:	603b      	str	r3, [r7, #0]
 801d39e:	68fb      	ldr	r3, [r7, #12]
 801d3a0:	68b9      	ldr	r1, [r7, #8]
 801d3a2:	4618      	mov	r0, r3
 801d3a4:	f7ff fb46 	bl	801ca34 <_ZN11MockFailureC1EP10UtestShell>
 801d3a8:	4a30      	ldr	r2, [pc, #192]	; (801d46c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801d3ae:	f107 0310 	add.w	r3, r7, #16
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	f7fe fc48 	bl	801bc48 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801d3b8:	f107 0310 	add.w	r3, r7, #16
 801d3bc:	683a      	ldr	r2, [r7, #0]
 801d3be:	6879      	ldr	r1, [r7, #4]
 801d3c0:	4618      	mov	r0, r3
 801d3c2:	f7fe fde7 	bl	801bf94 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d3cc:	f107 0318 	add.w	r3, r7, #24
 801d3d0:	4927      	ldr	r1, [pc, #156]	; (801d470 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f7ef fc0b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d3d8:	f107 0318 	add.w	r3, r7, #24
 801d3dc:	4619      	mov	r1, r3
 801d3de:	4620      	mov	r0, r4
 801d3e0:	f7ef fc71 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d3e4:	f107 0318 	add.w	r3, r7, #24
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	f7ef ffb8 	bl	800d35e <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	332c      	adds	r3, #44	; 0x2c
 801d3f2:	6879      	ldr	r1, [r7, #4]
 801d3f4:	4618      	mov	r0, r3
 801d3f6:	f7f0 f82f 	bl	800d458 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801d3fa:	68fb      	ldr	r3, [r7, #12]
 801d3fc:	332c      	adds	r3, #44	; 0x2c
 801d3fe:	491d      	ldr	r1, [pc, #116]	; (801d474 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801d400:	4618      	mov	r0, r3
 801d402:	f7f0 f83b 	bl	800d47c <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	683a      	ldr	r2, [r7, #0]
 801d40a:	6879      	ldr	r1, [r7, #4]
 801d40c:	4618      	mov	r0, r3
 801d40e:	f7ff fb99 	bl	801cb44 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801d412:	68fb      	ldr	r3, [r7, #12]
 801d414:	332c      	adds	r3, #44	; 0x2c
 801d416:	4918      	ldr	r1, [pc, #96]	; (801d478 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801d418:	4618      	mov	r0, r3
 801d41a:	f7f0 f82f 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	332c      	adds	r3, #44	; 0x2c
 801d422:	4916      	ldr	r1, [pc, #88]	; (801d47c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801d424:	4618      	mov	r0, r3
 801d426:	f7f0 f829 	bl	800d47c <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d430:	f107 0320 	add.w	r3, r7, #32
 801d434:	f107 0210 	add.w	r2, r7, #16
 801d438:	4611      	mov	r1, r2
 801d43a:	4618      	mov	r0, r3
 801d43c:	f7ff f9bc 	bl	801c7b8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801d440:	f107 0320 	add.w	r3, r7, #32
 801d444:	4619      	mov	r1, r3
 801d446:	4620      	mov	r0, r4
 801d448:	f7f0 f806 	bl	800d458 <_ZN12SimpleStringpLERKS_>
 801d44c:	f107 0320 	add.w	r3, r7, #32
 801d450:	4618      	mov	r0, r3
 801d452:	f7ef ff84 	bl	800d35e <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801d456:	f107 0310 	add.w	r3, r7, #16
 801d45a:	4618      	mov	r0, r3
 801d45c:	f7fe fc08 	bl	801bc70 <_ZN21MockExpectedCallsListD1Ev>
}
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	4618      	mov	r0, r3
 801d464:	372c      	adds	r7, #44	; 0x2c
 801d466:	46bd      	mov	sp, r7
 801d468:	bd90      	pop	{r4, r7, pc}
 801d46a:	bf00      	nop
 801d46c:	08028c84 	.word	0x08028c84
 801d470:	0802661c 	.word	0x0802661c
 801d474:	0802664c 	.word	0x0802664c
 801d478:	08026660 	.word	0x08026660
 801d47c:	08026324 	.word	0x08026324

0801d480 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801d480:	b590      	push	{r4, r7, lr}
 801d482:	b087      	sub	sp, #28
 801d484:	af00      	add	r7, sp, #0
 801d486:	60f8      	str	r0, [r7, #12]
 801d488:	60b9      	str	r1, [r7, #8]
 801d48a:	607a      	str	r2, [r7, #4]
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	68b9      	ldr	r1, [r7, #8]
 801d490:	4618      	mov	r0, r3
 801d492:	f7ff facf 	bl	801ca34 <_ZN11MockFailureC1EP10UtestShell>
 801d496:	4a10      	ldr	r2, [pc, #64]	; (801d4d8 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d4a2:	6878      	ldr	r0, [r7, #4]
 801d4a4:	f7ef ff2e 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801d4a8:	4602      	mov	r2, r0
 801d4aa:	f107 0310 	add.w	r3, r7, #16
 801d4ae:	490b      	ldr	r1, [pc, #44]	; (801d4dc <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	f7f0 fc5b 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801d4b6:	f107 0310 	add.w	r3, r7, #16
 801d4ba:	4619      	mov	r1, r3
 801d4bc:	4620      	mov	r0, r4
 801d4be:	f7ef fc02 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d4c2:	f107 0310 	add.w	r3, r7, #16
 801d4c6:	4618      	mov	r0, r3
 801d4c8:	f7ef ff49 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	4618      	mov	r0, r3
 801d4d0:	371c      	adds	r7, #28
 801d4d2:	46bd      	mov	sp, r7
 801d4d4:	bd90      	pop	{r4, r7, pc}
 801d4d6:	bf00      	nop
 801d4d8:	08028c58 	.word	0x08028c58
 801d4dc:	0802668c 	.word	0x0802668c

0801d4e0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801d4e0:	b590      	push	{r4, r7, lr}
 801d4e2:	b087      	sub	sp, #28
 801d4e4:	af00      	add	r7, sp, #0
 801d4e6:	60f8      	str	r0, [r7, #12]
 801d4e8:	60b9      	str	r1, [r7, #8]
 801d4ea:	607a      	str	r2, [r7, #4]
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	68b9      	ldr	r1, [r7, #8]
 801d4f0:	4618      	mov	r0, r3
 801d4f2:	f7ff fa9f 	bl	801ca34 <_ZN11MockFailureC1EP10UtestShell>
 801d4f6:	4a10      	ldr	r2, [pc, #64]	; (801d538 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801d4fc:	68fb      	ldr	r3, [r7, #12]
 801d4fe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d502:	6878      	ldr	r0, [r7, #4]
 801d504:	f7ef fefe 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801d508:	4602      	mov	r2, r0
 801d50a:	f107 0310 	add.w	r3, r7, #16
 801d50e:	490b      	ldr	r1, [pc, #44]	; (801d53c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801d510:	4618      	mov	r0, r3
 801d512:	f7f0 fc2b 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801d516:	f107 0310 	add.w	r3, r7, #16
 801d51a:	4619      	mov	r1, r3
 801d51c:	4620      	mov	r0, r4
 801d51e:	f7ef fbd2 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d522:	f107 0310 	add.w	r3, r7, #16
 801d526:	4618      	mov	r0, r3
 801d528:	f7ef ff19 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	4618      	mov	r0, r3
 801d530:	371c      	adds	r7, #28
 801d532:	46bd      	mov	sp, r7
 801d534:	bd90      	pop	{r4, r7, pc}
 801d536:	bf00      	nop
 801d538:	08028c2c 	.word	0x08028c2c
 801d53c:	080266e4 	.word	0x080266e4

0801d540 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d540:	b590      	push	{r4, r7, lr}
 801d542:	b087      	sub	sp, #28
 801d544:	af00      	add	r7, sp, #0
 801d546:	60f8      	str	r0, [r7, #12]
 801d548:	60b9      	str	r1, [r7, #8]
 801d54a:	607a      	str	r2, [r7, #4]
 801d54c:	603b      	str	r3, [r7, #0]
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	68b9      	ldr	r1, [r7, #8]
 801d552:	4618      	mov	r0, r3
 801d554:	f7ff fa6e 	bl	801ca34 <_ZN11MockFailureC1EP10UtestShell>
 801d558:	4a12      	ldr	r2, [pc, #72]	; (801d5a4 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801d55a:	68fb      	ldr	r3, [r7, #12]
 801d55c:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801d564:	6878      	ldr	r0, [r7, #4]
 801d566:	f7ef fecd 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801d56a:	4602      	mov	r2, r0
 801d56c:	f107 0010 	add.w	r0, r7, #16
 801d570:	683b      	ldr	r3, [r7, #0]
 801d572:	490d      	ldr	r1, [pc, #52]	; (801d5a8 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801d574:	f7f0 fbfa 	bl	800dd6c <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801d578:	f107 0310 	add.w	r3, r7, #16
 801d57c:	4619      	mov	r1, r3
 801d57e:	4620      	mov	r0, r4
 801d580:	f7ef fba1 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d584:	f107 0310 	add.w	r3, r7, #16
 801d588:	4618      	mov	r0, r3
 801d58a:	f7ef fee8 	bl	800d35e <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d592:	6879      	ldr	r1, [r7, #4]
 801d594:	4618      	mov	r0, r3
 801d596:	f7ff fad5 	bl	801cb44 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801d59a:	68fb      	ldr	r3, [r7, #12]
 801d59c:	4618      	mov	r0, r3
 801d59e:	371c      	adds	r7, #28
 801d5a0:	46bd      	mov	sp, r7
 801d5a2:	bd90      	pop	{r4, r7, pc}
 801d5a4:	08028c00 	.word	0x08028c00
 801d5a8:	08026734 	.word	0x08026734

0801d5ac <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d5ac:	b590      	push	{r4, r7, lr}
 801d5ae:	b087      	sub	sp, #28
 801d5b0:	af00      	add	r7, sp, #0
 801d5b2:	60f8      	str	r0, [r7, #12]
 801d5b4:	60b9      	str	r1, [r7, #8]
 801d5b6:	607a      	str	r2, [r7, #4]
 801d5b8:	603b      	str	r3, [r7, #0]
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	68b9      	ldr	r1, [r7, #8]
 801d5be:	4618      	mov	r0, r3
 801d5c0:	f7ff fa38 	bl	801ca34 <_ZN11MockFailureC1EP10UtestShell>
 801d5c4:	4a12      	ldr	r2, [pc, #72]	; (801d610 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d5d0:	6878      	ldr	r0, [r7, #4]
 801d5d2:	f7ef fe97 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801d5d6:	4602      	mov	r2, r0
 801d5d8:	f107 0310 	add.w	r3, r7, #16
 801d5dc:	490d      	ldr	r1, [pc, #52]	; (801d614 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801d5de:	4618      	mov	r0, r3
 801d5e0:	f7f0 fbc4 	bl	800dd6c <_Z16StringFromFormatPKcz>
 801d5e4:	f107 0310 	add.w	r3, r7, #16
 801d5e8:	4619      	mov	r1, r3
 801d5ea:	4620      	mov	r0, r4
 801d5ec:	f7ef fb6b 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d5f0:	f107 0310 	add.w	r3, r7, #16
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	f7ef feb2 	bl	800d35e <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d5fa:	68fb      	ldr	r3, [r7, #12]
 801d5fc:	683a      	ldr	r2, [r7, #0]
 801d5fe:	6879      	ldr	r1, [r7, #4]
 801d600:	4618      	mov	r0, r3
 801d602:	f7ff fa9f 	bl	801cb44 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	4618      	mov	r0, r3
 801d60a:	371c      	adds	r7, #28
 801d60c:	46bd      	mov	sp, r7
 801d60e:	bd90      	pop	{r4, r7, pc}
 801d610:	08028bd4 	.word	0x08028bd4
 801d614:	08026798 	.word	0x08026798

0801d618 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801d618:	b480      	push	{r7}
 801d61a:	b083      	sub	sp, #12
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801d620:	4a04      	ldr	r2, [pc, #16]	; (801d634 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	6013      	str	r3, [r2, #0]
}
 801d626:	bf00      	nop
 801d628:	370c      	adds	r7, #12
 801d62a:	46bd      	mov	sp, r7
 801d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d630:	4770      	bx	lr
 801d632:	bf00      	nop
 801d634:	20000ec4 	.word	0x20000ec4

0801d638 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801d638:	b580      	push	{r7, lr}
 801d63a:	b082      	sub	sp, #8
 801d63c:	af00      	add	r7, sp, #0
 801d63e:	6078      	str	r0, [r7, #4]
 801d640:	6039      	str	r1, [r7, #0]
 801d642:	4a10      	ldr	r2, [pc, #64]	; (801d684 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	601a      	str	r2, [r3, #0]
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	3304      	adds	r3, #4
 801d64c:	6839      	ldr	r1, [r7, #0]
 801d64e:	4618      	mov	r0, r3
 801d650:	f7ef fb21 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	330c      	adds	r3, #12
 801d658:	490b      	ldr	r1, [pc, #44]	; (801d688 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801d65a:	4618      	mov	r0, r3
 801d65c:	f7ef fac7 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	2200      	movs	r2, #0
 801d664:	629a      	str	r2, [r3, #40]	; 0x28
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	2200      	movs	r2, #0
 801d66a:	62da      	str	r2, [r3, #44]	; 0x2c
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	2200      	movs	r2, #0
 801d670:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	2200      	movs	r2, #0
 801d676:	619a      	str	r2, [r3, #24]
}
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	4618      	mov	r0, r3
 801d67c:	3708      	adds	r7, #8
 801d67e:	46bd      	mov	sp, r7
 801d680:	bd80      	pop	{r7, pc}
 801d682:	bf00      	nop
 801d684:	0802945c 	.word	0x0802945c
 801d688:	080267e8 	.word	0x080267e8

0801d68c <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801d68c:	b580      	push	{r7, lr}
 801d68e:	b082      	sub	sp, #8
 801d690:	af00      	add	r7, sp, #0
 801d692:	6078      	str	r0, [r7, #4]
 801d694:	4a08      	ldr	r2, [pc, #32]	; (801d6b8 <_ZN14MockNamedValueD1Ev+0x2c>)
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	601a      	str	r2, [r3, #0]
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	330c      	adds	r3, #12
 801d69e:	4618      	mov	r0, r3
 801d6a0:	f7ef fe5d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	3304      	adds	r3, #4
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	f7ef fe58 	bl	800d35e <_ZN12SimpleStringD1Ev>
{
}
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	4618      	mov	r0, r3
 801d6b2:	3708      	adds	r7, #8
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	bd80      	pop	{r7, pc}
 801d6b8:	0802945c 	.word	0x0802945c

0801d6bc <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	b082      	sub	sp, #8
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	6078      	str	r0, [r7, #4]
}
 801d6c4:	6878      	ldr	r0, [r7, #4]
 801d6c6:	f7ff ffe1 	bl	801d68c <_ZN14MockNamedValueD1Ev>
 801d6ca:	2138      	movs	r1, #56	; 0x38
 801d6cc:	6878      	ldr	r0, [r7, #4]
 801d6ce:	f7ec fedf 	bl	800a490 <_ZdlPvj>
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	4618      	mov	r0, r3
 801d6d6:	3708      	adds	r7, #8
 801d6d8:	46bd      	mov	sp, r7
 801d6da:	bd80      	pop	{r7, pc}

0801d6dc <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801d6dc:	b590      	push	{r4, r7, lr}
 801d6de:	b085      	sub	sp, #20
 801d6e0:	af00      	add	r7, sp, #0
 801d6e2:	6078      	str	r0, [r7, #4]
 801d6e4:	460b      	mov	r3, r1
 801d6e6:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	f103 040c 	add.w	r4, r3, #12
 801d6ee:	f107 0308 	add.w	r3, r7, #8
 801d6f2:	490b      	ldr	r1, [pc, #44]	; (801d720 <_ZN14MockNamedValue8setValueEb+0x44>)
 801d6f4:	4618      	mov	r0, r3
 801d6f6:	f7ef fa7a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d6fa:	f107 0308 	add.w	r3, r7, #8
 801d6fe:	4619      	mov	r1, r3
 801d700:	4620      	mov	r0, r4
 801d702:	f7ef fae0 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d706:	f107 0308 	add.w	r3, r7, #8
 801d70a:	4618      	mov	r0, r3
 801d70c:	f7ef fe27 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	78fa      	ldrb	r2, [r7, #3]
 801d714:	761a      	strb	r2, [r3, #24]
}
 801d716:	bf00      	nop
 801d718:	3714      	adds	r7, #20
 801d71a:	46bd      	mov	sp, r7
 801d71c:	bd90      	pop	{r4, r7, pc}
 801d71e:	bf00      	nop
 801d720:	080267ec 	.word	0x080267ec

0801d724 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801d724:	b590      	push	{r4, r7, lr}
 801d726:	b085      	sub	sp, #20
 801d728:	af00      	add	r7, sp, #0
 801d72a:	6078      	str	r0, [r7, #4]
 801d72c:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	f103 040c 	add.w	r4, r3, #12
 801d734:	f107 0308 	add.w	r3, r7, #8
 801d738:	490a      	ldr	r1, [pc, #40]	; (801d764 <_ZN14MockNamedValue8setValueEj+0x40>)
 801d73a:	4618      	mov	r0, r3
 801d73c:	f7ef fa57 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d740:	f107 0308 	add.w	r3, r7, #8
 801d744:	4619      	mov	r1, r3
 801d746:	4620      	mov	r0, r4
 801d748:	f7ef fabd 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d74c:	f107 0308 	add.w	r3, r7, #8
 801d750:	4618      	mov	r0, r3
 801d752:	f7ef fe04 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	683a      	ldr	r2, [r7, #0]
 801d75a:	619a      	str	r2, [r3, #24]
}
 801d75c:	bf00      	nop
 801d75e:	3714      	adds	r7, #20
 801d760:	46bd      	mov	sp, r7
 801d762:	bd90      	pop	{r4, r7, pc}
 801d764:	080267f4 	.word	0x080267f4

0801d768 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801d768:	b590      	push	{r4, r7, lr}
 801d76a:	b085      	sub	sp, #20
 801d76c:	af00      	add	r7, sp, #0
 801d76e:	6078      	str	r0, [r7, #4]
 801d770:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	f103 040c 	add.w	r4, r3, #12
 801d778:	f107 0308 	add.w	r3, r7, #8
 801d77c:	490a      	ldr	r1, [pc, #40]	; (801d7a8 <_ZN14MockNamedValue8setValueEi+0x40>)
 801d77e:	4618      	mov	r0, r3
 801d780:	f7ef fa35 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d784:	f107 0308 	add.w	r3, r7, #8
 801d788:	4619      	mov	r1, r3
 801d78a:	4620      	mov	r0, r4
 801d78c:	f7ef fa9b 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d790:	f107 0308 	add.w	r3, r7, #8
 801d794:	4618      	mov	r0, r3
 801d796:	f7ef fde2 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	683a      	ldr	r2, [r7, #0]
 801d79e:	619a      	str	r2, [r3, #24]
}
 801d7a0:	bf00      	nop
 801d7a2:	3714      	adds	r7, #20
 801d7a4:	46bd      	mov	sp, r7
 801d7a6:	bd90      	pop	{r4, r7, pc}
 801d7a8:	080267e8 	.word	0x080267e8

0801d7ac <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801d7ac:	b590      	push	{r4, r7, lr}
 801d7ae:	b085      	sub	sp, #20
 801d7b0:	af00      	add	r7, sp, #0
 801d7b2:	6078      	str	r0, [r7, #4]
 801d7b4:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	f103 040c 	add.w	r4, r3, #12
 801d7bc:	f107 0308 	add.w	r3, r7, #8
 801d7c0:	490a      	ldr	r1, [pc, #40]	; (801d7ec <_ZN14MockNamedValue8setValueEl+0x40>)
 801d7c2:	4618      	mov	r0, r3
 801d7c4:	f7ef fa13 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d7c8:	f107 0308 	add.w	r3, r7, #8
 801d7cc:	4619      	mov	r1, r3
 801d7ce:	4620      	mov	r0, r4
 801d7d0:	f7ef fa79 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d7d4:	f107 0308 	add.w	r3, r7, #8
 801d7d8:	4618      	mov	r0, r3
 801d7da:	f7ef fdc0 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	683a      	ldr	r2, [r7, #0]
 801d7e2:	619a      	str	r2, [r3, #24]
}
 801d7e4:	bf00      	nop
 801d7e6:	3714      	adds	r7, #20
 801d7e8:	46bd      	mov	sp, r7
 801d7ea:	bd90      	pop	{r4, r7, pc}
 801d7ec:	08026804 	.word	0x08026804

0801d7f0 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801d7f0:	b590      	push	{r4, r7, lr}
 801d7f2:	b085      	sub	sp, #20
 801d7f4:	af00      	add	r7, sp, #0
 801d7f6:	6078      	str	r0, [r7, #4]
 801d7f8:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	f103 040c 	add.w	r4, r3, #12
 801d800:	f107 0308 	add.w	r3, r7, #8
 801d804:	490a      	ldr	r1, [pc, #40]	; (801d830 <_ZN14MockNamedValue8setValueEm+0x40>)
 801d806:	4618      	mov	r0, r3
 801d808:	f7ef f9f1 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d80c:	f107 0308 	add.w	r3, r7, #8
 801d810:	4619      	mov	r1, r3
 801d812:	4620      	mov	r0, r4
 801d814:	f7ef fa57 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d818:	f107 0308 	add.w	r3, r7, #8
 801d81c:	4618      	mov	r0, r3
 801d81e:	f7ef fd9e 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	683a      	ldr	r2, [r7, #0]
 801d826:	619a      	str	r2, [r3, #24]
}
 801d828:	bf00      	nop
 801d82a:	3714      	adds	r7, #20
 801d82c:	46bd      	mov	sp, r7
 801d82e:	bd90      	pop	{r4, r7, pc}
 801d830:	08026810 	.word	0x08026810

0801d834 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801d834:	b5b0      	push	{r4, r5, r7, lr}
 801d836:	b086      	sub	sp, #24
 801d838:	af02      	add	r7, sp, #8
 801d83a:	60f8      	str	r0, [r7, #12]
 801d83c:	1d3b      	adds	r3, r7, #4
 801d83e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801d842:	f7f6 fdb7 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801d846:	4604      	mov	r4, r0
 801d848:	6823      	ldr	r3, [r4, #0]
 801d84a:	3368      	adds	r3, #104	; 0x68
 801d84c:	681d      	ldr	r5, [r3, #0]
 801d84e:	f7f6 fdc1 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d852:	4603      	mov	r3, r0
 801d854:	9300      	str	r3, [sp, #0]
 801d856:	2367      	movs	r3, #103	; 0x67
 801d858:	4a03      	ldr	r2, [pc, #12]	; (801d868 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801d85a:	4904      	ldr	r1, [pc, #16]	; (801d86c <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801d85c:	4620      	mov	r0, r4
 801d85e:	47a8      	blx	r5
}
 801d860:	bf00      	nop
 801d862:	3710      	adds	r7, #16
 801d864:	46bd      	mov	sp, r7
 801d866:	bdb0      	pop	{r4, r5, r7, pc}
 801d868:	08026824 	.word	0x08026824
 801d86c:	08026840 	.word	0x08026840

0801d870 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801d870:	b5b0      	push	{r4, r5, r7, lr}
 801d872:	b086      	sub	sp, #24
 801d874:	af02      	add	r7, sp, #8
 801d876:	60f8      	str	r0, [r7, #12]
 801d878:	1d3b      	adds	r3, r7, #4
 801d87a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801d87e:	f7f6 fd99 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801d882:	4604      	mov	r4, r0
 801d884:	6823      	ldr	r3, [r4, #0]
 801d886:	3368      	adds	r3, #104	; 0x68
 801d888:	681d      	ldr	r5, [r3, #0]
 801d88a:	f7f6 fda3 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d88e:	4603      	mov	r3, r0
 801d890:	9300      	str	r3, [sp, #0]
 801d892:	236c      	movs	r3, #108	; 0x6c
 801d894:	4a03      	ldr	r2, [pc, #12]	; (801d8a4 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801d896:	4904      	ldr	r1, [pc, #16]	; (801d8a8 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801d898:	4620      	mov	r0, r4
 801d89a:	47a8      	blx	r5
}
 801d89c:	bf00      	nop
 801d89e:	3710      	adds	r7, #16
 801d8a0:	46bd      	mov	sp, r7
 801d8a2:	bdb0      	pop	{r4, r5, r7, pc}
 801d8a4:	08026824 	.word	0x08026824
 801d8a8:	08026860 	.word	0x08026860
 801d8ac:	00000000 	.word	0x00000000

0801d8b0 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801d8b0:	b580      	push	{r7, lr}
 801d8b2:	b084      	sub	sp, #16
 801d8b4:	af00      	add	r7, sp, #0
 801d8b6:	60f8      	str	r0, [r7, #12]
 801d8b8:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	681b      	ldr	r3, [r3, #0]
 801d8c0:	3328      	adds	r3, #40	; 0x28
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801d8d8 <_ZN14MockNamedValue8setValueEd+0x28>
 801d8c8:	ed97 0b00 	vldr	d0, [r7]
 801d8cc:	68f8      	ldr	r0, [r7, #12]
 801d8ce:	4798      	blx	r3
}
 801d8d0:	bf00      	nop
 801d8d2:	3710      	adds	r7, #16
 801d8d4:	46bd      	mov	sp, r7
 801d8d6:	bd80      	pop	{r7, pc}
 801d8d8:	47ae147b 	.word	0x47ae147b
 801d8dc:	3f747ae1 	.word	0x3f747ae1

0801d8e0 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801d8e0:	b590      	push	{r4, r7, lr}
 801d8e2:	b089      	sub	sp, #36	; 0x24
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	6178      	str	r0, [r7, #20]
 801d8e8:	ed87 0b02 	vstr	d0, [r7, #8]
 801d8ec:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801d8f0:	697b      	ldr	r3, [r7, #20]
 801d8f2:	f103 040c 	add.w	r4, r3, #12
 801d8f6:	f107 0318 	add.w	r3, r7, #24
 801d8fa:	490e      	ldr	r1, [pc, #56]	; (801d934 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801d8fc:	4618      	mov	r0, r3
 801d8fe:	f7ef f976 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d902:	f107 0318 	add.w	r3, r7, #24
 801d906:	4619      	mov	r1, r3
 801d908:	4620      	mov	r0, r4
 801d90a:	f7ef f9dc 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d90e:	f107 0318 	add.w	r3, r7, #24
 801d912:	4618      	mov	r0, r3
 801d914:	f7ef fd23 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801d918:	6979      	ldr	r1, [r7, #20]
 801d91a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d91e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801d922:	6979      	ldr	r1, [r7, #20]
 801d924:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d928:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801d92c:	bf00      	nop
 801d92e:	3724      	adds	r7, #36	; 0x24
 801d930:	46bd      	mov	sp, r7
 801d932:	bd90      	pop	{r4, r7, pc}
 801d934:	0802688c 	.word	0x0802688c

0801d938 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801d938:	b590      	push	{r4, r7, lr}
 801d93a:	b085      	sub	sp, #20
 801d93c:	af00      	add	r7, sp, #0
 801d93e:	6078      	str	r0, [r7, #4]
 801d940:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	f103 040c 	add.w	r4, r3, #12
 801d948:	f107 0308 	add.w	r3, r7, #8
 801d94c:	490a      	ldr	r1, [pc, #40]	; (801d978 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801d94e:	4618      	mov	r0, r3
 801d950:	f7ef f94d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d954:	f107 0308 	add.w	r3, r7, #8
 801d958:	4619      	mov	r1, r3
 801d95a:	4620      	mov	r0, r4
 801d95c:	f7ef f9b3 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d960:	f107 0308 	add.w	r3, r7, #8
 801d964:	4618      	mov	r0, r3
 801d966:	f7ef fcfa 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801d96a:	687b      	ldr	r3, [r7, #4]
 801d96c:	683a      	ldr	r2, [r7, #0]
 801d96e:	619a      	str	r2, [r3, #24]
}
 801d970:	bf00      	nop
 801d972:	3714      	adds	r7, #20
 801d974:	46bd      	mov	sp, r7
 801d976:	bd90      	pop	{r4, r7, pc}
 801d978:	08026894 	.word	0x08026894

0801d97c <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801d97c:	b590      	push	{r4, r7, lr}
 801d97e:	b085      	sub	sp, #20
 801d980:	af00      	add	r7, sp, #0
 801d982:	6078      	str	r0, [r7, #4]
 801d984:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	f103 040c 	add.w	r4, r3, #12
 801d98c:	f107 0308 	add.w	r3, r7, #8
 801d990:	490a      	ldr	r1, [pc, #40]	; (801d9bc <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801d992:	4618      	mov	r0, r3
 801d994:	f7ef f92b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d998:	f107 0308 	add.w	r3, r7, #8
 801d99c:	4619      	mov	r1, r3
 801d99e:	4620      	mov	r0, r4
 801d9a0:	f7ef f991 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d9a4:	f107 0308 	add.w	r3, r7, #8
 801d9a8:	4618      	mov	r0, r3
 801d9aa:	f7ef fcd8 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	683a      	ldr	r2, [r7, #0]
 801d9b2:	619a      	str	r2, [r3, #24]
}
 801d9b4:	bf00      	nop
 801d9b6:	3714      	adds	r7, #20
 801d9b8:	46bd      	mov	sp, r7
 801d9ba:	bd90      	pop	{r4, r7, pc}
 801d9bc:	0802689c 	.word	0x0802689c

0801d9c0 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801d9c0:	b590      	push	{r4, r7, lr}
 801d9c2:	b085      	sub	sp, #20
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	6078      	str	r0, [r7, #4]
 801d9c8:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	f103 040c 	add.w	r4, r3, #12
 801d9d0:	f107 0308 	add.w	r3, r7, #8
 801d9d4:	490a      	ldr	r1, [pc, #40]	; (801da00 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	f7ef f909 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801d9dc:	f107 0308 	add.w	r3, r7, #8
 801d9e0:	4619      	mov	r1, r3
 801d9e2:	4620      	mov	r0, r4
 801d9e4:	f7ef f96f 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801d9e8:	f107 0308 	add.w	r3, r7, #8
 801d9ec:	4618      	mov	r0, r3
 801d9ee:	f7ef fcb6 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	683a      	ldr	r2, [r7, #0]
 801d9f6:	619a      	str	r2, [r3, #24]
}
 801d9f8:	bf00      	nop
 801d9fa:	3714      	adds	r7, #20
 801d9fc:	46bd      	mov	sp, r7
 801d9fe:	bd90      	pop	{r4, r7, pc}
 801da00:	080268a8 	.word	0x080268a8

0801da04 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801da04:	b590      	push	{r4, r7, lr}
 801da06:	b085      	sub	sp, #20
 801da08:	af00      	add	r7, sp, #0
 801da0a:	6078      	str	r0, [r7, #4]
 801da0c:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801da0e:	687b      	ldr	r3, [r7, #4]
 801da10:	f103 040c 	add.w	r4, r3, #12
 801da14:	f107 0308 	add.w	r3, r7, #8
 801da18:	490a      	ldr	r1, [pc, #40]	; (801da44 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801da1a:	4618      	mov	r0, r3
 801da1c:	f7ef f8e7 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801da20:	f107 0308 	add.w	r3, r7, #8
 801da24:	4619      	mov	r1, r3
 801da26:	4620      	mov	r0, r4
 801da28:	f7ef f94d 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801da2c:	f107 0308 	add.w	r3, r7, #8
 801da30:	4618      	mov	r0, r3
 801da32:	f7ef fc94 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	683a      	ldr	r2, [r7, #0]
 801da3a:	619a      	str	r2, [r3, #24]
}
 801da3c:	bf00      	nop
 801da3e:	3714      	adds	r7, #20
 801da40:	46bd      	mov	sp, r7
 801da42:	bd90      	pop	{r4, r7, pc}
 801da44:	080268b4 	.word	0x080268b4

0801da48 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801da48:	b590      	push	{r4, r7, lr}
 801da4a:	b087      	sub	sp, #28
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	60f8      	str	r0, [r7, #12]
 801da50:	60b9      	str	r1, [r7, #8]
 801da52:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	f103 040c 	add.w	r4, r3, #12
 801da5a:	f107 0310 	add.w	r3, r7, #16
 801da5e:	490c      	ldr	r1, [pc, #48]	; (801da90 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801da60:	4618      	mov	r0, r3
 801da62:	f7ef f8c4 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801da66:	f107 0310 	add.w	r3, r7, #16
 801da6a:	4619      	mov	r1, r3
 801da6c:	4620      	mov	r0, r4
 801da6e:	f7ef f92a 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801da72:	f107 0310 	add.w	r3, r7, #16
 801da76:	4618      	mov	r0, r3
 801da78:	f7ef fc71 	bl	800d35e <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	68ba      	ldr	r2, [r7, #8]
 801da80:	619a      	str	r2, [r3, #24]
    size_ = size;
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	687a      	ldr	r2, [r7, #4]
 801da86:	629a      	str	r2, [r3, #40]	; 0x28
}
 801da88:	bf00      	nop
 801da8a:	371c      	adds	r7, #28
 801da8c:	46bd      	mov	sp, r7
 801da8e:	bd90      	pop	{r4, r7, pc}
 801da90:	080268c0 	.word	0x080268c0

0801da94 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801da94:	b580      	push	{r7, lr}
 801da96:	b084      	sub	sp, #16
 801da98:	af00      	add	r7, sp, #0
 801da9a:	60f8      	str	r0, [r7, #12]
 801da9c:	60b9      	str	r1, [r7, #8]
 801da9e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	330c      	adds	r3, #12
 801daa4:	68b9      	ldr	r1, [r7, #8]
 801daa6:	4618      	mov	r0, r3
 801daa8:	f7ef f90d 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801daac:	68fb      	ldr	r3, [r7, #12]
 801daae:	687a      	ldr	r2, [r7, #4]
 801dab0:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801dab2:	4b11      	ldr	r3, [pc, #68]	; (801daf8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d019      	beq.n	801daee <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801daba:	4b0f      	ldr	r3, [pc, #60]	; (801daf8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dabc:	681a      	ldr	r2, [r3, #0]
 801dabe:	4b0e      	ldr	r3, [pc, #56]	; (801daf8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dac0:	681b      	ldr	r3, [r3, #0]
 801dac2:	681b      	ldr	r3, [r3, #0]
 801dac4:	3314      	adds	r3, #20
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	68b9      	ldr	r1, [r7, #8]
 801daca:	4610      	mov	r0, r2
 801dacc:	4798      	blx	r3
 801dace:	4602      	mov	r2, r0
 801dad0:	68fb      	ldr	r3, [r7, #12]
 801dad2:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801dad4:	4b08      	ldr	r3, [pc, #32]	; (801daf8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dad6:	681a      	ldr	r2, [r3, #0]
 801dad8:	4b07      	ldr	r3, [pc, #28]	; (801daf8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	681b      	ldr	r3, [r3, #0]
 801dade:	3318      	adds	r3, #24
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	68b9      	ldr	r1, [r7, #8]
 801dae4:	4610      	mov	r0, r2
 801dae6:	4798      	blx	r3
 801dae8:	4602      	mov	r2, r0
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801daee:	bf00      	nop
 801daf0:	3710      	adds	r7, #16
 801daf2:	46bd      	mov	sp, r7
 801daf4:	bd80      	pop	{r7, pc}
 801daf6:	bf00      	nop
 801daf8:	20000ec4 	.word	0x20000ec4

0801dafc <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801dafc:	b580      	push	{r7, lr}
 801dafe:	b084      	sub	sp, #16
 801db00:	af00      	add	r7, sp, #0
 801db02:	60f8      	str	r0, [r7, #12]
 801db04:	60b9      	str	r1, [r7, #8]
 801db06:	607a      	str	r2, [r7, #4]
    type_ = type;
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	330c      	adds	r3, #12
 801db0c:	68b9      	ldr	r1, [r7, #8]
 801db0e:	4618      	mov	r0, r3
 801db10:	f7ef f8d9 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	687a      	ldr	r2, [r7, #4]
 801db18:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801db1a:	4b11      	ldr	r3, [pc, #68]	; (801db60 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801db1c:	681b      	ldr	r3, [r3, #0]
 801db1e:	2b00      	cmp	r3, #0
 801db20:	d019      	beq.n	801db56 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801db22:	4b0f      	ldr	r3, [pc, #60]	; (801db60 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801db24:	681a      	ldr	r2, [r3, #0]
 801db26:	4b0e      	ldr	r3, [pc, #56]	; (801db60 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801db28:	681b      	ldr	r3, [r3, #0]
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	3314      	adds	r3, #20
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	68b9      	ldr	r1, [r7, #8]
 801db32:	4610      	mov	r0, r2
 801db34:	4798      	blx	r3
 801db36:	4602      	mov	r2, r0
 801db38:	68fb      	ldr	r3, [r7, #12]
 801db3a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801db3c:	4b08      	ldr	r3, [pc, #32]	; (801db60 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801db3e:	681a      	ldr	r2, [r3, #0]
 801db40:	4b07      	ldr	r3, [pc, #28]	; (801db60 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	3318      	adds	r3, #24
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	68b9      	ldr	r1, [r7, #8]
 801db4c:	4610      	mov	r0, r2
 801db4e:	4798      	blx	r3
 801db50:	4602      	mov	r2, r0
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801db56:	bf00      	nop
 801db58:	3710      	adds	r7, #16
 801db5a:	46bd      	mov	sp, r7
 801db5c:	bd80      	pop	{r7, pc}
 801db5e:	bf00      	nop
 801db60:	20000ec4 	.word	0x20000ec4

0801db64 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801db64:	b480      	push	{r7}
 801db66:	b083      	sub	sp, #12
 801db68:	af00      	add	r7, sp, #0
 801db6a:	6078      	str	r0, [r7, #4]
 801db6c:	6039      	str	r1, [r7, #0]
    size_ = size;
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	683a      	ldr	r2, [r7, #0]
 801db72:	629a      	str	r2, [r3, #40]	; 0x28
}
 801db74:	bf00      	nop
 801db76:	370c      	adds	r7, #12
 801db78:	46bd      	mov	sp, r7
 801db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db7e:	4770      	bx	lr

0801db80 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801db80:	b590      	push	{r4, r7, lr}
 801db82:	b085      	sub	sp, #20
 801db84:	af00      	add	r7, sp, #0
 801db86:	6078      	str	r0, [r7, #4]
 801db88:	6039      	str	r1, [r7, #0]
    name_ = name;
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	1d1c      	adds	r4, r3, #4
 801db8e:	f107 0308 	add.w	r3, r7, #8
 801db92:	6839      	ldr	r1, [r7, #0]
 801db94:	4618      	mov	r0, r3
 801db96:	f7ef f82a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801db9a:	f107 0308 	add.w	r3, r7, #8
 801db9e:	4619      	mov	r1, r3
 801dba0:	4620      	mov	r0, r4
 801dba2:	f7ef f890 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
 801dba6:	f107 0308 	add.w	r3, r7, #8
 801dbaa:	4618      	mov	r0, r3
 801dbac:	f7ef fbd7 	bl	800d35e <_ZN12SimpleStringD1Ev>
}
 801dbb0:	bf00      	nop
 801dbb2:	3714      	adds	r7, #20
 801dbb4:	46bd      	mov	sp, r7
 801dbb6:	bd90      	pop	{r4, r7, pc}

0801dbb8 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801dbb8:	b580      	push	{r7, lr}
 801dbba:	b082      	sub	sp, #8
 801dbbc:	af00      	add	r7, sp, #0
 801dbbe:	6078      	str	r0, [r7, #4]
 801dbc0:	6039      	str	r1, [r7, #0]
    return name_;
 801dbc2:	683b      	ldr	r3, [r7, #0]
 801dbc4:	3304      	adds	r3, #4
 801dbc6:	4619      	mov	r1, r3
 801dbc8:	6878      	ldr	r0, [r7, #4]
 801dbca:	f7ef f864 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
}
 801dbce:	6878      	ldr	r0, [r7, #4]
 801dbd0:	3708      	adds	r7, #8
 801dbd2:	46bd      	mov	sp, r7
 801dbd4:	bd80      	pop	{r7, pc}

0801dbd6 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801dbd6:	b580      	push	{r7, lr}
 801dbd8:	b082      	sub	sp, #8
 801dbda:	af00      	add	r7, sp, #0
 801dbdc:	6078      	str	r0, [r7, #4]
 801dbde:	6039      	str	r1, [r7, #0]
    return type_;
 801dbe0:	683b      	ldr	r3, [r7, #0]
 801dbe2:	330c      	adds	r3, #12
 801dbe4:	4619      	mov	r1, r3
 801dbe6:	6878      	ldr	r0, [r7, #4]
 801dbe8:	f7ef f855 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
}
 801dbec:	6878      	ldr	r0, [r7, #4]
 801dbee:	3708      	adds	r7, #8
 801dbf0:	46bd      	mov	sp, r7
 801dbf2:	bd80      	pop	{r7, pc}

0801dbf4 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801dbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbf6:	b087      	sub	sp, #28
 801dbf8:	af04      	add	r7, sp, #16
 801dbfa:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801dbfc:	f7f6 fbda 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801dc00:	4604      	mov	r4, r0
 801dc02:	6823      	ldr	r3, [r4, #0]
 801dc04:	3324      	adds	r3, #36	; 0x24
 801dc06:	681d      	ldr	r5, [r3, #0]
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	330c      	adds	r3, #12
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	f7ef fb79 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801dc12:	4606      	mov	r6, r0
 801dc14:	f7f6 fbde 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dc18:	4603      	mov	r3, r0
 801dc1a:	9302      	str	r3, [sp, #8]
 801dc1c:	23c8      	movs	r3, #200	; 0xc8
 801dc1e:	9301      	str	r3, [sp, #4]
 801dc20:	4b06      	ldr	r3, [pc, #24]	; (801dc3c <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801dc22:	9300      	str	r3, [sp, #0]
 801dc24:	2300      	movs	r3, #0
 801dc26:	4632      	mov	r2, r6
 801dc28:	4905      	ldr	r1, [pc, #20]	; (801dc40 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801dc2a:	4620      	mov	r0, r4
 801dc2c:	47a8      	blx	r5
    return value_.boolValue_;
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	7e1b      	ldrb	r3, [r3, #24]
}
 801dc32:	4618      	mov	r0, r3
 801dc34:	370c      	adds	r7, #12
 801dc36:	46bd      	mov	sp, r7
 801dc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc3a:	bf00      	nop
 801dc3c:	08026824 	.word	0x08026824
 801dc40:	080267ec 	.word	0x080267ec

0801dc44 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801dc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc46:	b089      	sub	sp, #36	; 0x24
 801dc48:	af04      	add	r7, sp, #16
 801dc4a:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	f103 040c 	add.w	r4, r3, #12
 801dc52:	f107 0308 	add.w	r3, r7, #8
 801dc56:	4920      	ldr	r1, [pc, #128]	; (801dcd8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801dc58:	4618      	mov	r0, r3
 801dc5a:	f7ee ffc8 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801dc5e:	2501      	movs	r5, #1
 801dc60:	f107 0308 	add.w	r3, r7, #8
 801dc64:	4619      	mov	r1, r3
 801dc66:	4620      	mov	r0, r4
 801dc68:	f7ef fb85 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801dc6c:	4603      	mov	r3, r0
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	d005      	beq.n	801dc7e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	699b      	ldr	r3, [r3, #24]
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	db01      	blt.n	801dc7e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801dc7a:	2401      	movs	r4, #1
 801dc7c:	e000      	b.n	801dc80 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801dc7e:	2400      	movs	r4, #0
 801dc80:	2d00      	cmp	r5, #0
 801dc82:	d004      	beq.n	801dc8e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801dc84:	f107 0308 	add.w	r3, r7, #8
 801dc88:	4618      	mov	r0, r3
 801dc8a:	f7ef fb68 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801dc8e:	2c00      	cmp	r4, #0
 801dc90:	d002      	beq.n	801dc98 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	699b      	ldr	r3, [r3, #24]
 801dc96:	e01a      	b.n	801dcce <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801dc98:	f7f6 fb8c 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801dc9c:	4604      	mov	r4, r0
 801dc9e:	6823      	ldr	r3, [r4, #0]
 801dca0:	3324      	adds	r3, #36	; 0x24
 801dca2:	681d      	ldr	r5, [r3, #0]
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	330c      	adds	r3, #12
 801dca8:	4618      	mov	r0, r3
 801dcaa:	f7ef fb2b 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801dcae:	4606      	mov	r6, r0
 801dcb0:	f7f6 fb90 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dcb4:	4603      	mov	r3, r0
 801dcb6:	9302      	str	r3, [sp, #8]
 801dcb8:	23d2      	movs	r3, #210	; 0xd2
 801dcba:	9301      	str	r3, [sp, #4]
 801dcbc:	4b07      	ldr	r3, [pc, #28]	; (801dcdc <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801dcbe:	9300      	str	r3, [sp, #0]
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	4632      	mov	r2, r6
 801dcc4:	4906      	ldr	r1, [pc, #24]	; (801dce0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801dcc6:	4620      	mov	r0, r4
 801dcc8:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	699b      	ldr	r3, [r3, #24]
    }
}
 801dcce:	4618      	mov	r0, r3
 801dcd0:	3714      	adds	r7, #20
 801dcd2:	46bd      	mov	sp, r7
 801dcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dcd6:	bf00      	nop
 801dcd8:	080267e8 	.word	0x080267e8
 801dcdc:	08026824 	.word	0x08026824
 801dce0:	080267f4 	.word	0x080267f4

0801dce4 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801dce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dce6:	b087      	sub	sp, #28
 801dce8:	af04      	add	r7, sp, #16
 801dcea:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801dcec:	f7f6 fb62 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801dcf0:	4604      	mov	r4, r0
 801dcf2:	6823      	ldr	r3, [r4, #0]
 801dcf4:	3324      	adds	r3, #36	; 0x24
 801dcf6:	681d      	ldr	r5, [r3, #0]
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	330c      	adds	r3, #12
 801dcfc:	4618      	mov	r0, r3
 801dcfe:	f7ef fb01 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801dd02:	4606      	mov	r6, r0
 801dd04:	f7f6 fb66 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dd08:	4603      	mov	r3, r0
 801dd0a:	9302      	str	r3, [sp, #8]
 801dd0c:	23d9      	movs	r3, #217	; 0xd9
 801dd0e:	9301      	str	r3, [sp, #4]
 801dd10:	4b06      	ldr	r3, [pc, #24]	; (801dd2c <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801dd12:	9300      	str	r3, [sp, #0]
 801dd14:	2300      	movs	r3, #0
 801dd16:	4632      	mov	r2, r6
 801dd18:	4905      	ldr	r1, [pc, #20]	; (801dd30 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801dd1a:	4620      	mov	r0, r4
 801dd1c:	47a8      	blx	r5
    return value_.intValue_;
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	699b      	ldr	r3, [r3, #24]
}
 801dd22:	4618      	mov	r0, r3
 801dd24:	370c      	adds	r7, #12
 801dd26:	46bd      	mov	sp, r7
 801dd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd2a:	bf00      	nop
 801dd2c:	08026824 	.word	0x08026824
 801dd30:	080267e8 	.word	0x080267e8

0801dd34 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801dd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd36:	b08b      	sub	sp, #44	; 0x2c
 801dd38:	af04      	add	r7, sp, #16
 801dd3a:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	f103 040c 	add.w	r4, r3, #12
 801dd42:	f107 0308 	add.w	r3, r7, #8
 801dd46:	4928      	ldr	r1, [pc, #160]	; (801dde8 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801dd48:	4618      	mov	r0, r3
 801dd4a:	f7ee ff50 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801dd4e:	f107 0308 	add.w	r3, r7, #8
 801dd52:	4619      	mov	r1, r3
 801dd54:	4620      	mov	r0, r4
 801dd56:	f7ef fb0e 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801dd5a:	4603      	mov	r3, r0
 801dd5c:	461c      	mov	r4, r3
 801dd5e:	f107 0308 	add.w	r3, r7, #8
 801dd62:	4618      	mov	r0, r3
 801dd64:	f7ef fafb 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801dd68:	2c00      	cmp	r4, #0
 801dd6a:	d002      	beq.n	801dd72 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	699b      	ldr	r3, [r3, #24]
 801dd70:	e035      	b.n	801ddde <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	f103 040c 	add.w	r4, r3, #12
 801dd78:	f107 0310 	add.w	r3, r7, #16
 801dd7c:	491b      	ldr	r1, [pc, #108]	; (801ddec <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801dd7e:	4618      	mov	r0, r3
 801dd80:	f7ee ff35 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801dd84:	f107 0310 	add.w	r3, r7, #16
 801dd88:	4619      	mov	r1, r3
 801dd8a:	4620      	mov	r0, r4
 801dd8c:	f7ef faf3 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801dd90:	4603      	mov	r3, r0
 801dd92:	461c      	mov	r4, r3
 801dd94:	f107 0310 	add.w	r3, r7, #16
 801dd98:	4618      	mov	r0, r3
 801dd9a:	f7ef fae0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801dd9e:	2c00      	cmp	r4, #0
 801dda0:	d002      	beq.n	801dda8 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	699b      	ldr	r3, [r3, #24]
 801dda6:	e01a      	b.n	801ddde <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801dda8:	f7f6 fb04 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801ddac:	4604      	mov	r4, r0
 801ddae:	6823      	ldr	r3, [r4, #0]
 801ddb0:	3324      	adds	r3, #36	; 0x24
 801ddb2:	681d      	ldr	r5, [r3, #0]
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	330c      	adds	r3, #12
 801ddb8:	4618      	mov	r0, r3
 801ddba:	f7ef faa3 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801ddbe:	4606      	mov	r6, r0
 801ddc0:	f7f6 fb08 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ddc4:	4603      	mov	r3, r0
 801ddc6:	9302      	str	r3, [sp, #8]
 801ddc8:	23e5      	movs	r3, #229	; 0xe5
 801ddca:	9301      	str	r3, [sp, #4]
 801ddcc:	4b08      	ldr	r3, [pc, #32]	; (801ddf0 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801ddce:	9300      	str	r3, [sp, #0]
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	4632      	mov	r2, r6
 801ddd4:	4907      	ldr	r1, [pc, #28]	; (801ddf4 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801ddd6:	4620      	mov	r0, r4
 801ddd8:	47a8      	blx	r5
        return value_.longIntValue_;
 801ddda:	687b      	ldr	r3, [r7, #4]
 801dddc:	699b      	ldr	r3, [r3, #24]
    }
}
 801ddde:	4618      	mov	r0, r3
 801dde0:	371c      	adds	r7, #28
 801dde2:	46bd      	mov	sp, r7
 801dde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dde6:	bf00      	nop
 801dde8:	080267e8 	.word	0x080267e8
 801ddec:	080267f4 	.word	0x080267f4
 801ddf0:	08026824 	.word	0x08026824
 801ddf4:	08026804 	.word	0x08026804

0801ddf8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801ddf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddfa:	b08d      	sub	sp, #52	; 0x34
 801ddfc:	af04      	add	r7, sp, #16
 801ddfe:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	f103 040c 	add.w	r4, r3, #12
 801de06:	f107 0308 	add.w	r3, r7, #8
 801de0a:	4940      	ldr	r1, [pc, #256]	; (801df0c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801de0c:	4618      	mov	r0, r3
 801de0e:	f7ee feee 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801de12:	f107 0308 	add.w	r3, r7, #8
 801de16:	4619      	mov	r1, r3
 801de18:	4620      	mov	r0, r4
 801de1a:	f7ef faac 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801de1e:	4603      	mov	r3, r0
 801de20:	461c      	mov	r4, r3
 801de22:	f107 0308 	add.w	r3, r7, #8
 801de26:	4618      	mov	r0, r3
 801de28:	f7ef fa99 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801de2c:	2c00      	cmp	r4, #0
 801de2e:	d002      	beq.n	801de36 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	699b      	ldr	r3, [r3, #24]
 801de34:	e066      	b.n	801df04 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	f103 040c 	add.w	r4, r3, #12
 801de3c:	f107 0310 	add.w	r3, r7, #16
 801de40:	4933      	ldr	r1, [pc, #204]	; (801df10 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801de42:	4618      	mov	r0, r3
 801de44:	f7ee fed3 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801de48:	2501      	movs	r5, #1
 801de4a:	f107 0310 	add.w	r3, r7, #16
 801de4e:	4619      	mov	r1, r3
 801de50:	4620      	mov	r0, r4
 801de52:	f7ef fa90 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801de56:	4603      	mov	r3, r0
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d005      	beq.n	801de68 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	699b      	ldr	r3, [r3, #24]
 801de60:	2b00      	cmp	r3, #0
 801de62:	db01      	blt.n	801de68 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801de64:	2401      	movs	r4, #1
 801de66:	e000      	b.n	801de6a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801de68:	2400      	movs	r4, #0
 801de6a:	2d00      	cmp	r5, #0
 801de6c:	d004      	beq.n	801de78 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801de6e:	f107 0310 	add.w	r3, r7, #16
 801de72:	4618      	mov	r0, r3
 801de74:	f7ef fa73 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801de78:	2c00      	cmp	r4, #0
 801de7a:	d002      	beq.n	801de82 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	699b      	ldr	r3, [r3, #24]
 801de80:	e040      	b.n	801df04 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	f103 040c 	add.w	r4, r3, #12
 801de88:	f107 0318 	add.w	r3, r7, #24
 801de8c:	4921      	ldr	r1, [pc, #132]	; (801df14 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801de8e:	4618      	mov	r0, r3
 801de90:	f7ee fead 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801de94:	2501      	movs	r5, #1
 801de96:	f107 0318 	add.w	r3, r7, #24
 801de9a:	4619      	mov	r1, r3
 801de9c:	4620      	mov	r0, r4
 801de9e:	f7ef fa6a 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801dea2:	4603      	mov	r3, r0
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d005      	beq.n	801deb4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	699b      	ldr	r3, [r3, #24]
 801deac:	2b00      	cmp	r3, #0
 801deae:	db01      	blt.n	801deb4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801deb0:	2401      	movs	r4, #1
 801deb2:	e000      	b.n	801deb6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801deb4:	2400      	movs	r4, #0
 801deb6:	2d00      	cmp	r5, #0
 801deb8:	d004      	beq.n	801dec4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801deba:	f107 0318 	add.w	r3, r7, #24
 801debe:	4618      	mov	r0, r3
 801dec0:	f7ef fa4d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801dec4:	2c00      	cmp	r4, #0
 801dec6:	d002      	beq.n	801dece <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	699b      	ldr	r3, [r3, #24]
 801decc:	e01a      	b.n	801df04 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801dece:	f7f6 fa71 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801ded2:	4604      	mov	r4, r0
 801ded4:	6823      	ldr	r3, [r4, #0]
 801ded6:	3324      	adds	r3, #36	; 0x24
 801ded8:	681d      	ldr	r5, [r3, #0]
 801deda:	687b      	ldr	r3, [r7, #4]
 801dedc:	330c      	adds	r3, #12
 801dede:	4618      	mov	r0, r3
 801dee0:	f7ef fa10 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801dee4:	4606      	mov	r6, r0
 801dee6:	f7f6 fa75 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801deea:	4603      	mov	r3, r0
 801deec:	9302      	str	r3, [sp, #8]
 801deee:	23f4      	movs	r3, #244	; 0xf4
 801def0:	9301      	str	r3, [sp, #4]
 801def2:	4b09      	ldr	r3, [pc, #36]	; (801df18 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801def4:	9300      	str	r3, [sp, #0]
 801def6:	2300      	movs	r3, #0
 801def8:	4632      	mov	r2, r6
 801defa:	4908      	ldr	r1, [pc, #32]	; (801df1c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801defc:	4620      	mov	r0, r4
 801defe:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	699b      	ldr	r3, [r3, #24]
    }
}
 801df04:	4618      	mov	r0, r3
 801df06:	3724      	adds	r7, #36	; 0x24
 801df08:	46bd      	mov	sp, r7
 801df0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df0c:	080267f4 	.word	0x080267f4
 801df10:	080267e8 	.word	0x080267e8
 801df14:	08026804 	.word	0x08026804
 801df18:	08026824 	.word	0x08026824
 801df1c:	08026810 	.word	0x08026810

0801df20 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801df20:	b5b0      	push	{r4, r5, r7, lr}
 801df22:	b084      	sub	sp, #16
 801df24:	af02      	add	r7, sp, #8
 801df26:	6078      	str	r0, [r7, #4]
 801df28:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801df2a:	f7f6 fa43 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801df2e:	4604      	mov	r4, r0
 801df30:	6823      	ldr	r3, [r4, #0]
 801df32:	3368      	adds	r3, #104	; 0x68
 801df34:	681d      	ldr	r5, [r3, #0]
 801df36:	f7f6 fa4d 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801df3a:	4603      	mov	r3, r0
 801df3c:	9300      	str	r3, [sp, #0]
 801df3e:	f240 1323 	movw	r3, #291	; 0x123
 801df42:	4a06      	ldr	r2, [pc, #24]	; (801df5c <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801df44:	4906      	ldr	r1, [pc, #24]	; (801df60 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801df46:	4620      	mov	r0, r4
 801df48:	47a8      	blx	r5
    return cpputest_longlong(0);
 801df4a:	2100      	movs	r1, #0
 801df4c:	6878      	ldr	r0, [r7, #4]
 801df4e:	f7ec fe85 	bl	800ac5c <_ZN17cpputest_longlongC1Ei>
}
 801df52:	6878      	ldr	r0, [r7, #4]
 801df54:	3708      	adds	r7, #8
 801df56:	46bd      	mov	sp, r7
 801df58:	bdb0      	pop	{r4, r5, r7, pc}
 801df5a:	bf00      	nop
 801df5c:	08026824 	.word	0x08026824
 801df60:	08026840 	.word	0x08026840

0801df64 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801df64:	b5b0      	push	{r4, r5, r7, lr}
 801df66:	b084      	sub	sp, #16
 801df68:	af02      	add	r7, sp, #8
 801df6a:	6078      	str	r0, [r7, #4]
 801df6c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801df6e:	f7f6 fa21 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801df72:	4604      	mov	r4, r0
 801df74:	6823      	ldr	r3, [r4, #0]
 801df76:	3368      	adds	r3, #104	; 0x68
 801df78:	681d      	ldr	r5, [r3, #0]
 801df7a:	f7f6 fa2b 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801df7e:	4603      	mov	r3, r0
 801df80:	9300      	str	r3, [sp, #0]
 801df82:	f240 1329 	movw	r3, #297	; 0x129
 801df86:	4a06      	ldr	r2, [pc, #24]	; (801dfa0 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801df88:	4906      	ldr	r1, [pc, #24]	; (801dfa4 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801df8a:	4620      	mov	r0, r4
 801df8c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801df8e:	2100      	movs	r1, #0
 801df90:	6878      	ldr	r0, [r7, #4]
 801df92:	f7ec fe6f 	bl	800ac74 <_ZN18cpputest_ulonglongC1Ei>
}
 801df96:	6878      	ldr	r0, [r7, #4]
 801df98:	3708      	adds	r7, #8
 801df9a:	46bd      	mov	sp, r7
 801df9c:	bdb0      	pop	{r4, r5, r7, pc}
 801df9e:	bf00      	nop
 801dfa0:	08026824 	.word	0x08026824
 801dfa4:	08026860 	.word	0x08026860

0801dfa8 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801dfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfaa:	b087      	sub	sp, #28
 801dfac:	af04      	add	r7, sp, #16
 801dfae:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801dfb0:	f7f6 fa00 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801dfb4:	4604      	mov	r4, r0
 801dfb6:	6823      	ldr	r3, [r4, #0]
 801dfb8:	3324      	adds	r3, #36	; 0x24
 801dfba:	681d      	ldr	r5, [r3, #0]
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	330c      	adds	r3, #12
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	f7ef f99f 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801dfc6:	4606      	mov	r6, r0
 801dfc8:	f7f6 fa04 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dfcc:	4603      	mov	r3, r0
 801dfce:	9302      	str	r3, [sp, #8]
 801dfd0:	f240 1331 	movw	r3, #305	; 0x131
 801dfd4:	9301      	str	r3, [sp, #4]
 801dfd6:	4b09      	ldr	r3, [pc, #36]	; (801dffc <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801dfd8:	9300      	str	r3, [sp, #0]
 801dfda:	2300      	movs	r3, #0
 801dfdc:	4632      	mov	r2, r6
 801dfde:	4908      	ldr	r1, [pc, #32]	; (801e000 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801dfe0:	4620      	mov	r0, r4
 801dfe2:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801dfea:	ec43 2b17 	vmov	d7, r2, r3
}
 801dfee:	eeb0 0a47 	vmov.f32	s0, s14
 801dff2:	eef0 0a67 	vmov.f32	s1, s15
 801dff6:	370c      	adds	r7, #12
 801dff8:	46bd      	mov	sp, r7
 801dffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dffc:	08026824 	.word	0x08026824
 801e000:	0802688c 	.word	0x0802688c

0801e004 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801e004:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e006:	b087      	sub	sp, #28
 801e008:	af04      	add	r7, sp, #16
 801e00a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801e00c:	f7f6 f9d2 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801e010:	4604      	mov	r4, r0
 801e012:	6823      	ldr	r3, [r4, #0]
 801e014:	3324      	adds	r3, #36	; 0x24
 801e016:	681d      	ldr	r5, [r3, #0]
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	330c      	adds	r3, #12
 801e01c:	4618      	mov	r0, r3
 801e01e:	f7ef f971 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801e022:	4606      	mov	r6, r0
 801e024:	f7f6 f9d6 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e028:	4603      	mov	r3, r0
 801e02a:	9302      	str	r3, [sp, #8]
 801e02c:	f240 1337 	movw	r3, #311	; 0x137
 801e030:	9301      	str	r3, [sp, #4]
 801e032:	4b09      	ldr	r3, [pc, #36]	; (801e058 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801e034:	9300      	str	r3, [sp, #0]
 801e036:	2300      	movs	r3, #0
 801e038:	4632      	mov	r2, r6
 801e03a:	4908      	ldr	r1, [pc, #32]	; (801e05c <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801e03c:	4620      	mov	r0, r4
 801e03e:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e046:	ec43 2b17 	vmov	d7, r2, r3
}
 801e04a:	eeb0 0a47 	vmov.f32	s0, s14
 801e04e:	eef0 0a67 	vmov.f32	s1, s15
 801e052:	370c      	adds	r7, #12
 801e054:	46bd      	mov	sp, r7
 801e056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e058:	08026824 	.word	0x08026824
 801e05c:	0802688c 	.word	0x0802688c

0801e060 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801e060:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e062:	b087      	sub	sp, #28
 801e064:	af04      	add	r7, sp, #16
 801e066:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801e068:	f7f6 f9a4 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801e06c:	4604      	mov	r4, r0
 801e06e:	6823      	ldr	r3, [r4, #0]
 801e070:	3324      	adds	r3, #36	; 0x24
 801e072:	681d      	ldr	r5, [r3, #0]
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	330c      	adds	r3, #12
 801e078:	4618      	mov	r0, r3
 801e07a:	f7ef f943 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801e07e:	4606      	mov	r6, r0
 801e080:	f7f6 f9a8 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e084:	4603      	mov	r3, r0
 801e086:	9302      	str	r3, [sp, #8]
 801e088:	f240 133d 	movw	r3, #317	; 0x13d
 801e08c:	9301      	str	r3, [sp, #4]
 801e08e:	4b06      	ldr	r3, [pc, #24]	; (801e0a8 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801e090:	9300      	str	r3, [sp, #0]
 801e092:	2300      	movs	r3, #0
 801e094:	4632      	mov	r2, r6
 801e096:	4905      	ldr	r1, [pc, #20]	; (801e0ac <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801e098:	4620      	mov	r0, r4
 801e09a:	47a8      	blx	r5
    return value_.stringValue_;
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	699b      	ldr	r3, [r3, #24]
}
 801e0a0:	4618      	mov	r0, r3
 801e0a2:	370c      	adds	r7, #12
 801e0a4:	46bd      	mov	sp, r7
 801e0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e0a8:	08026824 	.word	0x08026824
 801e0ac:	080268b4 	.word	0x080268b4

0801e0b0 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801e0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0b2:	b087      	sub	sp, #28
 801e0b4:	af04      	add	r7, sp, #16
 801e0b6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801e0b8:	f7f6 f97c 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801e0bc:	4604      	mov	r4, r0
 801e0be:	6823      	ldr	r3, [r4, #0]
 801e0c0:	3324      	adds	r3, #36	; 0x24
 801e0c2:	681d      	ldr	r5, [r3, #0]
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	330c      	adds	r3, #12
 801e0c8:	4618      	mov	r0, r3
 801e0ca:	f7ef f91b 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801e0ce:	4606      	mov	r6, r0
 801e0d0:	f7f6 f980 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e0d4:	4603      	mov	r3, r0
 801e0d6:	9302      	str	r3, [sp, #8]
 801e0d8:	f240 1343 	movw	r3, #323	; 0x143
 801e0dc:	9301      	str	r3, [sp, #4]
 801e0de:	4b06      	ldr	r3, [pc, #24]	; (801e0f8 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801e0e0:	9300      	str	r3, [sp, #0]
 801e0e2:	2300      	movs	r3, #0
 801e0e4:	4632      	mov	r2, r6
 801e0e6:	4905      	ldr	r1, [pc, #20]	; (801e0fc <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801e0e8:	4620      	mov	r0, r4
 801e0ea:	47a8      	blx	r5
    return value_.pointerValue_;
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	699b      	ldr	r3, [r3, #24]
}
 801e0f0:	4618      	mov	r0, r3
 801e0f2:	370c      	adds	r7, #12
 801e0f4:	46bd      	mov	sp, r7
 801e0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e0f8:	08026824 	.word	0x08026824
 801e0fc:	08026894 	.word	0x08026894

0801e100 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801e100:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e102:	b087      	sub	sp, #28
 801e104:	af04      	add	r7, sp, #16
 801e106:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801e108:	f7f6 f954 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801e10c:	4604      	mov	r4, r0
 801e10e:	6823      	ldr	r3, [r4, #0]
 801e110:	3324      	adds	r3, #36	; 0x24
 801e112:	681d      	ldr	r5, [r3, #0]
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	330c      	adds	r3, #12
 801e118:	4618      	mov	r0, r3
 801e11a:	f7ef f8f3 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801e11e:	4606      	mov	r6, r0
 801e120:	f7f6 f958 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e124:	4603      	mov	r3, r0
 801e126:	9302      	str	r3, [sp, #8]
 801e128:	f240 1349 	movw	r3, #329	; 0x149
 801e12c:	9301      	str	r3, [sp, #4]
 801e12e:	4b06      	ldr	r3, [pc, #24]	; (801e148 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801e130:	9300      	str	r3, [sp, #0]
 801e132:	2300      	movs	r3, #0
 801e134:	4632      	mov	r2, r6
 801e136:	4905      	ldr	r1, [pc, #20]	; (801e14c <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801e138:	4620      	mov	r0, r4
 801e13a:	47a8      	blx	r5
    return value_.pointerValue_;
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	699b      	ldr	r3, [r3, #24]
}
 801e140:	4618      	mov	r0, r3
 801e142:	370c      	adds	r7, #12
 801e144:	46bd      	mov	sp, r7
 801e146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e148:	08026824 	.word	0x08026824
 801e14c:	0802689c 	.word	0x0802689c

0801e150 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801e150:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e152:	b087      	sub	sp, #28
 801e154:	af04      	add	r7, sp, #16
 801e156:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801e158:	f7f6 f92c 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801e15c:	4604      	mov	r4, r0
 801e15e:	6823      	ldr	r3, [r4, #0]
 801e160:	3324      	adds	r3, #36	; 0x24
 801e162:	681d      	ldr	r5, [r3, #0]
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	330c      	adds	r3, #12
 801e168:	4618      	mov	r0, r3
 801e16a:	f7ef f8cb 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801e16e:	4606      	mov	r6, r0
 801e170:	f7f6 f930 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e174:	4603      	mov	r3, r0
 801e176:	9302      	str	r3, [sp, #8]
 801e178:	f240 134f 	movw	r3, #335	; 0x14f
 801e17c:	9301      	str	r3, [sp, #4]
 801e17e:	4b06      	ldr	r3, [pc, #24]	; (801e198 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801e180:	9300      	str	r3, [sp, #0]
 801e182:	2300      	movs	r3, #0
 801e184:	4632      	mov	r2, r6
 801e186:	4905      	ldr	r1, [pc, #20]	; (801e19c <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801e188:	4620      	mov	r0, r4
 801e18a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	699b      	ldr	r3, [r3, #24]
}
 801e190:	4618      	mov	r0, r3
 801e192:	370c      	adds	r7, #12
 801e194:	46bd      	mov	sp, r7
 801e196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e198:	08026824 	.word	0x08026824
 801e19c:	080268a8 	.word	0x080268a8

0801e1a0 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801e1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1a2:	b087      	sub	sp, #28
 801e1a4:	af04      	add	r7, sp, #16
 801e1a6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801e1a8:	f7f6 f904 	bl	80143b4 <_ZN10UtestShell10getCurrentEv>
 801e1ac:	4604      	mov	r4, r0
 801e1ae:	6823      	ldr	r3, [r4, #0]
 801e1b0:	3324      	adds	r3, #36	; 0x24
 801e1b2:	681d      	ldr	r5, [r3, #0]
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	330c      	adds	r3, #12
 801e1b8:	4618      	mov	r0, r3
 801e1ba:	f7ef f8a3 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801e1be:	4606      	mov	r6, r0
 801e1c0:	f7f6 f908 	bl	80143d4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e1c4:	4603      	mov	r3, r0
 801e1c6:	9302      	str	r3, [sp, #8]
 801e1c8:	f240 1355 	movw	r3, #341	; 0x155
 801e1cc:	9301      	str	r3, [sp, #4]
 801e1ce:	4b06      	ldr	r3, [pc, #24]	; (801e1e8 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801e1d0:	9300      	str	r3, [sp, #0]
 801e1d2:	2300      	movs	r3, #0
 801e1d4:	4632      	mov	r2, r6
 801e1d6:	4905      	ldr	r1, [pc, #20]	; (801e1ec <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801e1d8:	4620      	mov	r0, r4
 801e1da:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	699b      	ldr	r3, [r3, #24]
}
 801e1e0:	4618      	mov	r0, r3
 801e1e2:	370c      	adds	r7, #12
 801e1e4:	46bd      	mov	sp, r7
 801e1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1e8:	08026824 	.word	0x08026824
 801e1ec:	080268c0 	.word	0x080268c0

0801e1f0 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801e1f0:	b480      	push	{r7}
 801e1f2:	b083      	sub	sp, #12
 801e1f4:	af00      	add	r7, sp, #0
 801e1f6:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	699b      	ldr	r3, [r3, #24]
}
 801e1fc:	4618      	mov	r0, r3
 801e1fe:	370c      	adds	r7, #12
 801e200:	46bd      	mov	sp, r7
 801e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e206:	4770      	bx	lr

0801e208 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801e208:	b480      	push	{r7}
 801e20a:	b083      	sub	sp, #12
 801e20c:	af00      	add	r7, sp, #0
 801e20e:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	699b      	ldr	r3, [r3, #24]
}
 801e214:	4618      	mov	r0, r3
 801e216:	370c      	adds	r7, #12
 801e218:	46bd      	mov	sp, r7
 801e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e21e:	4770      	bx	lr

0801e220 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801e220:	b480      	push	{r7}
 801e222:	b083      	sub	sp, #12
 801e224:	af00      	add	r7, sp, #0
 801e226:	6078      	str	r0, [r7, #4]
    return size_;
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801e22c:	4618      	mov	r0, r3
 801e22e:	370c      	adds	r7, #12
 801e230:	46bd      	mov	sp, r7
 801e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e236:	4770      	bx	lr

0801e238 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801e238:	b480      	push	{r7}
 801e23a:	b083      	sub	sp, #12
 801e23c:	af00      	add	r7, sp, #0
 801e23e:	6078      	str	r0, [r7, #4]
    return comparator_;
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801e244:	4618      	mov	r0, r3
 801e246:	370c      	adds	r7, #12
 801e248:	46bd      	mov	sp, r7
 801e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e24e:	4770      	bx	lr

0801e250 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801e250:	b480      	push	{r7}
 801e252:	b083      	sub	sp, #12
 801e254:	af00      	add	r7, sp, #0
 801e256:	6078      	str	r0, [r7, #4]
    return copier_;
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801e25c:	4618      	mov	r0, r3
 801e25e:	370c      	adds	r7, #12
 801e260:	46bd      	mov	sp, r7
 801e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e266:	4770      	bx	lr

0801e268 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801e268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e26a:	b0cd      	sub	sp, #308	; 0x134
 801e26c:	af00      	add	r7, sp, #0
 801e26e:	1d3b      	adds	r3, r7, #4
 801e270:	6018      	str	r0, [r3, #0]
 801e272:	463b      	mov	r3, r7
 801e274:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801e276:	2500      	movs	r5, #0
 801e278:	1d3b      	adds	r3, r7, #4
 801e27a:	681b      	ldr	r3, [r3, #0]
 801e27c:	f103 040c 	add.w	r4, r3, #12
 801e280:	f107 0308 	add.w	r3, r7, #8
 801e284:	49bb      	ldr	r1, [pc, #748]	; (801e574 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801e286:	4618      	mov	r0, r3
 801e288:	f7ee fcb1 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e28c:	2601      	movs	r6, #1
 801e28e:	f107 0308 	add.w	r3, r7, #8
 801e292:	4619      	mov	r1, r3
 801e294:	4620      	mov	r0, r4
 801e296:	f7ef f86e 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e29a:	4603      	mov	r3, r0
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	d015      	beq.n	801e2cc <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801e2a0:	463b      	mov	r3, r7
 801e2a2:	681b      	ldr	r3, [r3, #0]
 801e2a4:	f103 040c 	add.w	r4, r3, #12
 801e2a8:	f107 0310 	add.w	r3, r7, #16
 801e2ac:	49b2      	ldr	r1, [pc, #712]	; (801e578 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e2ae:	4618      	mov	r0, r3
 801e2b0:	f7ee fc9d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e2b4:	2501      	movs	r5, #1
 801e2b6:	f107 0310 	add.w	r3, r7, #16
 801e2ba:	4619      	mov	r1, r3
 801e2bc:	4620      	mov	r0, r4
 801e2be:	f7ef f85a 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e2c2:	4603      	mov	r3, r0
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	d001      	beq.n	801e2cc <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801e2c8:	2401      	movs	r4, #1
 801e2ca:	e000      	b.n	801e2ce <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801e2cc:	2400      	movs	r4, #0
 801e2ce:	2d00      	cmp	r5, #0
 801e2d0:	d004      	beq.n	801e2dc <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801e2d2:	f107 0310 	add.w	r3, r7, #16
 801e2d6:	4618      	mov	r0, r3
 801e2d8:	f7ef f841 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e2dc:	2e00      	cmp	r6, #0
 801e2de:	d004      	beq.n	801e2ea <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801e2e0:	f107 0308 	add.w	r3, r7, #8
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	f7ef f83a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e2ea:	2c00      	cmp	r4, #0
 801e2ec:	d00c      	beq.n	801e308 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801e2ee:	1d3b      	adds	r3, r7, #4
 801e2f0:	681b      	ldr	r3, [r3, #0]
 801e2f2:	699a      	ldr	r2, [r3, #24]
 801e2f4:	463b      	mov	r3, r7
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	699b      	ldr	r3, [r3, #24]
 801e2fa:	429a      	cmp	r2, r3
 801e2fc:	bf0c      	ite	eq
 801e2fe:	2301      	moveq	r3, #1
 801e300:	2300      	movne	r3, #0
 801e302:	b2dc      	uxtb	r4, r3
 801e304:	f000 bd60 	b.w	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801e308:	2500      	movs	r5, #0
 801e30a:	1d3b      	adds	r3, r7, #4
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	f103 040c 	add.w	r4, r3, #12
 801e312:	f107 0318 	add.w	r3, r7, #24
 801e316:	4998      	ldr	r1, [pc, #608]	; (801e578 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e318:	4618      	mov	r0, r3
 801e31a:	f7ee fc68 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e31e:	2601      	movs	r6, #1
 801e320:	f107 0318 	add.w	r3, r7, #24
 801e324:	4619      	mov	r1, r3
 801e326:	4620      	mov	r0, r4
 801e328:	f7ef f825 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e32c:	4603      	mov	r3, r0
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d015      	beq.n	801e35e <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801e332:	463b      	mov	r3, r7
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	f103 040c 	add.w	r4, r3, #12
 801e33a:	f107 0320 	add.w	r3, r7, #32
 801e33e:	498d      	ldr	r1, [pc, #564]	; (801e574 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801e340:	4618      	mov	r0, r3
 801e342:	f7ee fc54 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e346:	2501      	movs	r5, #1
 801e348:	f107 0320 	add.w	r3, r7, #32
 801e34c:	4619      	mov	r1, r3
 801e34e:	4620      	mov	r0, r4
 801e350:	f7ef f811 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e354:	4603      	mov	r3, r0
 801e356:	2b00      	cmp	r3, #0
 801e358:	d001      	beq.n	801e35e <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801e35a:	2401      	movs	r4, #1
 801e35c:	e000      	b.n	801e360 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801e35e:	2400      	movs	r4, #0
 801e360:	2d00      	cmp	r5, #0
 801e362:	d004      	beq.n	801e36e <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801e364:	f107 0320 	add.w	r3, r7, #32
 801e368:	4618      	mov	r0, r3
 801e36a:	f7ee fff8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e36e:	2e00      	cmp	r6, #0
 801e370:	d004      	beq.n	801e37c <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801e372:	f107 0318 	add.w	r3, r7, #24
 801e376:	4618      	mov	r0, r3
 801e378:	f7ee fff1 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e37c:	2c00      	cmp	r4, #0
 801e37e:	d00c      	beq.n	801e39a <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801e380:	1d3b      	adds	r3, r7, #4
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	699a      	ldr	r2, [r3, #24]
 801e386:	463b      	mov	r3, r7
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	699b      	ldr	r3, [r3, #24]
 801e38c:	429a      	cmp	r2, r3
 801e38e:	bf0c      	ite	eq
 801e390:	2301      	moveq	r3, #1
 801e392:	2300      	movne	r3, #0
 801e394:	b2dc      	uxtb	r4, r3
 801e396:	f000 bd17 	b.w	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801e39a:	2500      	movs	r5, #0
 801e39c:	1d3b      	adds	r3, r7, #4
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	f103 040c 	add.w	r4, r3, #12
 801e3a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e3a8:	4974      	ldr	r1, [pc, #464]	; (801e57c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801e3aa:	4618      	mov	r0, r3
 801e3ac:	f7ee fc1f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e3b0:	2601      	movs	r6, #1
 801e3b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e3b6:	4619      	mov	r1, r3
 801e3b8:	4620      	mov	r0, r4
 801e3ba:	f7ee ffdc 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e3be:	4603      	mov	r3, r0
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	d015      	beq.n	801e3f0 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801e3c4:	463b      	mov	r3, r7
 801e3c6:	681b      	ldr	r3, [r3, #0]
 801e3c8:	f103 040c 	add.w	r4, r3, #12
 801e3cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e3d0:	4969      	ldr	r1, [pc, #420]	; (801e578 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e3d2:	4618      	mov	r0, r3
 801e3d4:	f7ee fc0b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e3d8:	2501      	movs	r5, #1
 801e3da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e3de:	4619      	mov	r1, r3
 801e3e0:	4620      	mov	r0, r4
 801e3e2:	f7ee ffc8 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e3e6:	4603      	mov	r3, r0
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d001      	beq.n	801e3f0 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801e3ec:	2401      	movs	r4, #1
 801e3ee:	e000      	b.n	801e3f2 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801e3f0:	2400      	movs	r4, #0
 801e3f2:	2d00      	cmp	r5, #0
 801e3f4:	d004      	beq.n	801e400 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801e3f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e3fa:	4618      	mov	r0, r3
 801e3fc:	f7ee ffaf 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e400:	2e00      	cmp	r6, #0
 801e402:	d004      	beq.n	801e40e <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801e404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e408:	4618      	mov	r0, r3
 801e40a:	f7ee ffa8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e40e:	2c00      	cmp	r4, #0
 801e410:	d012      	beq.n	801e438 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801e412:	463b      	mov	r3, r7
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	699b      	ldr	r3, [r3, #24]
 801e418:	2b00      	cmp	r3, #0
 801e41a:	db0a      	blt.n	801e432 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801e41c:	1d3b      	adds	r3, r7, #4
 801e41e:	681b      	ldr	r3, [r3, #0]
 801e420:	699b      	ldr	r3, [r3, #24]
 801e422:	463a      	mov	r2, r7
 801e424:	6812      	ldr	r2, [r2, #0]
 801e426:	6992      	ldr	r2, [r2, #24]
 801e428:	4293      	cmp	r3, r2
 801e42a:	d102      	bne.n	801e432 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801e42c:	2401      	movs	r4, #1
 801e42e:	f000 bccb 	b.w	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e432:	2400      	movs	r4, #0
 801e434:	f000 bcc8 	b.w	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801e438:	2500      	movs	r5, #0
 801e43a:	1d3b      	adds	r3, r7, #4
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	f103 040c 	add.w	r4, r3, #12
 801e442:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e446:	494c      	ldr	r1, [pc, #304]	; (801e578 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e448:	4618      	mov	r0, r3
 801e44a:	f7ee fbd0 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e44e:	2601      	movs	r6, #1
 801e450:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e454:	4619      	mov	r1, r3
 801e456:	4620      	mov	r0, r4
 801e458:	f7ee ff8d 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e45c:	4603      	mov	r3, r0
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d015      	beq.n	801e48e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801e462:	463b      	mov	r3, r7
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	f103 040c 	add.w	r4, r3, #12
 801e46a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e46e:	4943      	ldr	r1, [pc, #268]	; (801e57c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801e470:	4618      	mov	r0, r3
 801e472:	f7ee fbbc 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e476:	2501      	movs	r5, #1
 801e478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e47c:	4619      	mov	r1, r3
 801e47e:	4620      	mov	r0, r4
 801e480:	f7ee ff79 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e484:	4603      	mov	r3, r0
 801e486:	2b00      	cmp	r3, #0
 801e488:	d001      	beq.n	801e48e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801e48a:	2401      	movs	r4, #1
 801e48c:	e000      	b.n	801e490 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801e48e:	2400      	movs	r4, #0
 801e490:	2d00      	cmp	r5, #0
 801e492:	d004      	beq.n	801e49e <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801e494:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e498:	4618      	mov	r0, r3
 801e49a:	f7ee ff60 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e49e:	2e00      	cmp	r6, #0
 801e4a0:	d004      	beq.n	801e4ac <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801e4a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	f7ee ff59 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e4ac:	2c00      	cmp	r4, #0
 801e4ae:	d012      	beq.n	801e4d6 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801e4b0:	1d3b      	adds	r3, r7, #4
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	699b      	ldr	r3, [r3, #24]
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	db0a      	blt.n	801e4d0 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801e4ba:	1d3b      	adds	r3, r7, #4
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	699b      	ldr	r3, [r3, #24]
 801e4c0:	463a      	mov	r2, r7
 801e4c2:	6812      	ldr	r2, [r2, #0]
 801e4c4:	6992      	ldr	r2, [r2, #24]
 801e4c6:	4293      	cmp	r3, r2
 801e4c8:	d102      	bne.n	801e4d0 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801e4ca:	2401      	movs	r4, #1
 801e4cc:	f000 bc7c 	b.w	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e4d0:	2400      	movs	r4, #0
 801e4d2:	f000 bc79 	b.w	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801e4d6:	2500      	movs	r5, #0
 801e4d8:	1d3b      	adds	r3, r7, #4
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	f103 040c 	add.w	r4, r3, #12
 801e4e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e4e4:	4926      	ldr	r1, [pc, #152]	; (801e580 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801e4e6:	4618      	mov	r0, r3
 801e4e8:	f7ee fb81 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e4ec:	2601      	movs	r6, #1
 801e4ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e4f2:	4619      	mov	r1, r3
 801e4f4:	4620      	mov	r0, r4
 801e4f6:	f7ee ff3e 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e4fa:	4603      	mov	r3, r0
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	d015      	beq.n	801e52c <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801e500:	463b      	mov	r3, r7
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	f103 040c 	add.w	r4, r3, #12
 801e508:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e50c:	491a      	ldr	r1, [pc, #104]	; (801e578 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e50e:	4618      	mov	r0, r3
 801e510:	f7ee fb6d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e514:	2501      	movs	r5, #1
 801e516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e51a:	4619      	mov	r1, r3
 801e51c:	4620      	mov	r0, r4
 801e51e:	f7ee ff2a 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e522:	4603      	mov	r3, r0
 801e524:	2b00      	cmp	r3, #0
 801e526:	d001      	beq.n	801e52c <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801e528:	2401      	movs	r4, #1
 801e52a:	e000      	b.n	801e52e <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801e52c:	2400      	movs	r4, #0
 801e52e:	2d00      	cmp	r5, #0
 801e530:	d004      	beq.n	801e53c <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801e532:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e536:	4618      	mov	r0, r3
 801e538:	f7ee ff11 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e53c:	2e00      	cmp	r6, #0
 801e53e:	d004      	beq.n	801e54a <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801e540:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e544:	4618      	mov	r0, r3
 801e546:	f7ee ff0a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e54a:	2c00      	cmp	r4, #0
 801e54c:	d01a      	beq.n	801e584 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801e54e:	463b      	mov	r3, r7
 801e550:	681b      	ldr	r3, [r3, #0]
 801e552:	699b      	ldr	r3, [r3, #24]
 801e554:	2b00      	cmp	r3, #0
 801e556:	db0a      	blt.n	801e56e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801e558:	1d3b      	adds	r3, r7, #4
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	699b      	ldr	r3, [r3, #24]
 801e55e:	463a      	mov	r2, r7
 801e560:	6812      	ldr	r2, [r2, #0]
 801e562:	6992      	ldr	r2, [r2, #24]
 801e564:	4293      	cmp	r3, r2
 801e566:	d102      	bne.n	801e56e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801e568:	2401      	movs	r4, #1
 801e56a:	f000 bc2d 	b.w	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e56e:	2400      	movs	r4, #0
 801e570:	f000 bc2a 	b.w	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e574:	08026804 	.word	0x08026804
 801e578:	080267e8 	.word	0x080267e8
 801e57c:	080267f4 	.word	0x080267f4
 801e580:	08026810 	.word	0x08026810
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801e584:	2500      	movs	r5, #0
 801e586:	1d3b      	adds	r3, r7, #4
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	f103 040c 	add.w	r4, r3, #12
 801e58e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e592:	49b8      	ldr	r1, [pc, #736]	; (801e874 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801e594:	4618      	mov	r0, r3
 801e596:	f7ee fb2a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e59a:	2601      	movs	r6, #1
 801e59c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e5a0:	4619      	mov	r1, r3
 801e5a2:	4620      	mov	r0, r4
 801e5a4:	f7ee fee7 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e5a8:	4603      	mov	r3, r0
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d015      	beq.n	801e5da <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801e5ae:	463b      	mov	r3, r7
 801e5b0:	681b      	ldr	r3, [r3, #0]
 801e5b2:	f103 040c 	add.w	r4, r3, #12
 801e5b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e5ba:	49af      	ldr	r1, [pc, #700]	; (801e878 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e5bc:	4618      	mov	r0, r3
 801e5be:	f7ee fb16 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e5c2:	2501      	movs	r5, #1
 801e5c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e5c8:	4619      	mov	r1, r3
 801e5ca:	4620      	mov	r0, r4
 801e5cc:	f7ee fed3 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e5d0:	4603      	mov	r3, r0
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	d001      	beq.n	801e5da <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801e5d6:	2401      	movs	r4, #1
 801e5d8:	e000      	b.n	801e5dc <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801e5da:	2400      	movs	r4, #0
 801e5dc:	2d00      	cmp	r5, #0
 801e5de:	d004      	beq.n	801e5ea <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801e5e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e5e4:	4618      	mov	r0, r3
 801e5e6:	f7ee feba 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e5ea:	2e00      	cmp	r6, #0
 801e5ec:	d004      	beq.n	801e5f8 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801e5ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e5f2:	4618      	mov	r0, r3
 801e5f4:	f7ee feb3 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e5f8:	2c00      	cmp	r4, #0
 801e5fa:	d010      	beq.n	801e61e <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801e5fc:	1d3b      	adds	r3, r7, #4
 801e5fe:	681b      	ldr	r3, [r3, #0]
 801e600:	699b      	ldr	r3, [r3, #24]
 801e602:	2b00      	cmp	r3, #0
 801e604:	db09      	blt.n	801e61a <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801e606:	1d3b      	adds	r3, r7, #4
 801e608:	681b      	ldr	r3, [r3, #0]
 801e60a:	699b      	ldr	r3, [r3, #24]
 801e60c:	463a      	mov	r2, r7
 801e60e:	6812      	ldr	r2, [r2, #0]
 801e610:	6992      	ldr	r2, [r2, #24]
 801e612:	4293      	cmp	r3, r2
 801e614:	d101      	bne.n	801e61a <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801e616:	2401      	movs	r4, #1
 801e618:	e3d6      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e61a:	2400      	movs	r4, #0
 801e61c:	e3d4      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801e61e:	2500      	movs	r5, #0
 801e620:	1d3b      	adds	r3, r7, #4
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	f103 040c 	add.w	r4, r3, #12
 801e628:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e62c:	4993      	ldr	r1, [pc, #588]	; (801e87c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e62e:	4618      	mov	r0, r3
 801e630:	f7ee fadd 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e634:	2601      	movs	r6, #1
 801e636:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e63a:	4619      	mov	r1, r3
 801e63c:	4620      	mov	r0, r4
 801e63e:	f7ee fe9a 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e642:	4603      	mov	r3, r0
 801e644:	2b00      	cmp	r3, #0
 801e646:	d015      	beq.n	801e674 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801e648:	463b      	mov	r3, r7
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	f103 040c 	add.w	r4, r3, #12
 801e650:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e654:	498a      	ldr	r1, [pc, #552]	; (801e880 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801e656:	4618      	mov	r0, r3
 801e658:	f7ee fac9 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e65c:	2501      	movs	r5, #1
 801e65e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e662:	4619      	mov	r1, r3
 801e664:	4620      	mov	r0, r4
 801e666:	f7ee fe86 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e66a:	4603      	mov	r3, r0
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d001      	beq.n	801e674 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801e670:	2401      	movs	r4, #1
 801e672:	e000      	b.n	801e676 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801e674:	2400      	movs	r4, #0
 801e676:	2d00      	cmp	r5, #0
 801e678:	d004      	beq.n	801e684 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801e67a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e67e:	4618      	mov	r0, r3
 801e680:	f7ee fe6d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e684:	2e00      	cmp	r6, #0
 801e686:	d004      	beq.n	801e692 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801e688:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e68c:	4618      	mov	r0, r3
 801e68e:	f7ee fe66 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e692:	2c00      	cmp	r4, #0
 801e694:	d010      	beq.n	801e6b8 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801e696:	463b      	mov	r3, r7
 801e698:	681b      	ldr	r3, [r3, #0]
 801e69a:	699b      	ldr	r3, [r3, #24]
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	db09      	blt.n	801e6b4 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801e6a0:	1d3b      	adds	r3, r7, #4
 801e6a2:	681b      	ldr	r3, [r3, #0]
 801e6a4:	699b      	ldr	r3, [r3, #24]
 801e6a6:	463a      	mov	r2, r7
 801e6a8:	6812      	ldr	r2, [r2, #0]
 801e6aa:	6992      	ldr	r2, [r2, #24]
 801e6ac:	4293      	cmp	r3, r2
 801e6ae:	d101      	bne.n	801e6b4 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801e6b0:	2401      	movs	r4, #1
 801e6b2:	e389      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e6b4:	2400      	movs	r4, #0
 801e6b6:	e387      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801e6b8:	2500      	movs	r5, #0
 801e6ba:	1d3b      	adds	r3, r7, #4
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	f103 040c 	add.w	r4, r3, #12
 801e6c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e6c6:	496e      	ldr	r1, [pc, #440]	; (801e880 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801e6c8:	4618      	mov	r0, r3
 801e6ca:	f7ee fa90 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e6ce:	2601      	movs	r6, #1
 801e6d0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e6d4:	4619      	mov	r1, r3
 801e6d6:	4620      	mov	r0, r4
 801e6d8:	f7ee fe4d 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e6dc:	4603      	mov	r3, r0
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d015      	beq.n	801e70e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801e6e2:	463b      	mov	r3, r7
 801e6e4:	681b      	ldr	r3, [r3, #0]
 801e6e6:	f103 040c 	add.w	r4, r3, #12
 801e6ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e6ee:	4963      	ldr	r1, [pc, #396]	; (801e87c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e6f0:	4618      	mov	r0, r3
 801e6f2:	f7ee fa7c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e6f6:	2501      	movs	r5, #1
 801e6f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e6fc:	4619      	mov	r1, r3
 801e6fe:	4620      	mov	r0, r4
 801e700:	f7ee fe39 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e704:	4603      	mov	r3, r0
 801e706:	2b00      	cmp	r3, #0
 801e708:	d001      	beq.n	801e70e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801e70a:	2401      	movs	r4, #1
 801e70c:	e000      	b.n	801e710 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801e70e:	2400      	movs	r4, #0
 801e710:	2d00      	cmp	r5, #0
 801e712:	d004      	beq.n	801e71e <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801e714:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e718:	4618      	mov	r0, r3
 801e71a:	f7ee fe20 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e71e:	2e00      	cmp	r6, #0
 801e720:	d004      	beq.n	801e72c <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801e722:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e726:	4618      	mov	r0, r3
 801e728:	f7ee fe19 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e72c:	2c00      	cmp	r4, #0
 801e72e:	d010      	beq.n	801e752 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801e730:	1d3b      	adds	r3, r7, #4
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	699b      	ldr	r3, [r3, #24]
 801e736:	2b00      	cmp	r3, #0
 801e738:	db09      	blt.n	801e74e <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801e73a:	1d3b      	adds	r3, r7, #4
 801e73c:	681b      	ldr	r3, [r3, #0]
 801e73e:	699b      	ldr	r3, [r3, #24]
 801e740:	463a      	mov	r2, r7
 801e742:	6812      	ldr	r2, [r2, #0]
 801e744:	6992      	ldr	r2, [r2, #24]
 801e746:	4293      	cmp	r3, r2
 801e748:	d101      	bne.n	801e74e <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801e74a:	2401      	movs	r4, #1
 801e74c:	e33c      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e74e:	2400      	movs	r4, #0
 801e750:	e33a      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801e752:	2500      	movs	r5, #0
 801e754:	1d3b      	adds	r3, r7, #4
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	f103 040c 	add.w	r4, r3, #12
 801e75c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e760:	4946      	ldr	r1, [pc, #280]	; (801e87c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e762:	4618      	mov	r0, r3
 801e764:	f7ee fa43 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e768:	2601      	movs	r6, #1
 801e76a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e76e:	4619      	mov	r1, r3
 801e770:	4620      	mov	r0, r4
 801e772:	f7ee fe00 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e776:	4603      	mov	r3, r0
 801e778:	2b00      	cmp	r3, #0
 801e77a:	d015      	beq.n	801e7a8 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e77c:	463b      	mov	r3, r7
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	f103 040c 	add.w	r4, r3, #12
 801e784:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e788:	493b      	ldr	r1, [pc, #236]	; (801e878 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e78a:	4618      	mov	r0, r3
 801e78c:	f7ee fa2f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e790:	2501      	movs	r5, #1
 801e792:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e796:	4619      	mov	r1, r3
 801e798:	4620      	mov	r0, r4
 801e79a:	f7ee fdec 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e79e:	4603      	mov	r3, r0
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	d001      	beq.n	801e7a8 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e7a4:	2401      	movs	r4, #1
 801e7a6:	e000      	b.n	801e7aa <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801e7a8:	2400      	movs	r4, #0
 801e7aa:	2d00      	cmp	r5, #0
 801e7ac:	d004      	beq.n	801e7b8 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801e7ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e7b2:	4618      	mov	r0, r3
 801e7b4:	f7ee fdd3 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e7b8:	2e00      	cmp	r6, #0
 801e7ba:	d004      	beq.n	801e7c6 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801e7bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e7c0:	4618      	mov	r0, r3
 801e7c2:	f7ee fdcc 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e7c6:	2c00      	cmp	r4, #0
 801e7c8:	d00b      	beq.n	801e7e2 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801e7ca:	1d3b      	adds	r3, r7, #4
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	699a      	ldr	r2, [r3, #24]
 801e7d0:	463b      	mov	r3, r7
 801e7d2:	681b      	ldr	r3, [r3, #0]
 801e7d4:	699b      	ldr	r3, [r3, #24]
 801e7d6:	429a      	cmp	r2, r3
 801e7d8:	bf0c      	ite	eq
 801e7da:	2301      	moveq	r3, #1
 801e7dc:	2300      	movne	r3, #0
 801e7de:	b2dc      	uxtb	r4, r3
 801e7e0:	e2f2      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801e7e2:	2500      	movs	r5, #0
 801e7e4:	1d3b      	adds	r3, r7, #4
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	f103 040c 	add.w	r4, r3, #12
 801e7ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e7f0:	4921      	ldr	r1, [pc, #132]	; (801e878 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e7f2:	4618      	mov	r0, r3
 801e7f4:	f7ee f9fb 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e7f8:	2601      	movs	r6, #1
 801e7fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e7fe:	4619      	mov	r1, r3
 801e800:	4620      	mov	r0, r4
 801e802:	f7ee fdb8 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e806:	4603      	mov	r3, r0
 801e808:	2b00      	cmp	r3, #0
 801e80a:	d015      	beq.n	801e838 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e80c:	463b      	mov	r3, r7
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	f103 040c 	add.w	r4, r3, #12
 801e814:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e818:	4918      	ldr	r1, [pc, #96]	; (801e87c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e81a:	4618      	mov	r0, r3
 801e81c:	f7ee f9e7 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e820:	2501      	movs	r5, #1
 801e822:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e826:	4619      	mov	r1, r3
 801e828:	4620      	mov	r0, r4
 801e82a:	f7ee fda4 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e82e:	4603      	mov	r3, r0
 801e830:	2b00      	cmp	r3, #0
 801e832:	d001      	beq.n	801e838 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e834:	2401      	movs	r4, #1
 801e836:	e000      	b.n	801e83a <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801e838:	2400      	movs	r4, #0
 801e83a:	2d00      	cmp	r5, #0
 801e83c:	d004      	beq.n	801e848 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801e83e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e842:	4618      	mov	r0, r3
 801e844:	f7ee fd8b 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e848:	2e00      	cmp	r6, #0
 801e84a:	d004      	beq.n	801e856 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801e84c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e850:	4618      	mov	r0, r3
 801e852:	f7ee fd84 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e856:	2c00      	cmp	r4, #0
 801e858:	d014      	beq.n	801e884 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801e85a:	1d3b      	adds	r3, r7, #4
 801e85c:	681b      	ldr	r3, [r3, #0]
 801e85e:	699a      	ldr	r2, [r3, #24]
 801e860:	463b      	mov	r3, r7
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	699b      	ldr	r3, [r3, #24]
 801e866:	429a      	cmp	r2, r3
 801e868:	bf0c      	ite	eq
 801e86a:	2301      	moveq	r3, #1
 801e86c:	2300      	movne	r3, #0
 801e86e:	b2dc      	uxtb	r4, r3
 801e870:	e2aa      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e872:	bf00      	nop
 801e874:	080267e8 	.word	0x080267e8
 801e878:	08026810 	.word	0x08026810
 801e87c:	080267f4 	.word	0x080267f4
 801e880:	08026804 	.word	0x08026804
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801e884:	2500      	movs	r5, #0
 801e886:	1d3b      	adds	r3, r7, #4
 801e888:	681b      	ldr	r3, [r3, #0]
 801e88a:	f103 040c 	add.w	r4, r3, #12
 801e88e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e892:	49ae      	ldr	r1, [pc, #696]	; (801eb4c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e894:	4618      	mov	r0, r3
 801e896:	f7ee f9aa 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e89a:	2601      	movs	r6, #1
 801e89c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e8a0:	4619      	mov	r1, r3
 801e8a2:	4620      	mov	r0, r4
 801e8a4:	f7ee fd67 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e8a8:	4603      	mov	r3, r0
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	d015      	beq.n	801e8da <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e8ae:	463b      	mov	r3, r7
 801e8b0:	681b      	ldr	r3, [r3, #0]
 801e8b2:	f103 040c 	add.w	r4, r3, #12
 801e8b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e8ba:	49a5      	ldr	r1, [pc, #660]	; (801eb50 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e8bc:	4618      	mov	r0, r3
 801e8be:	f7ee f996 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e8c2:	2501      	movs	r5, #1
 801e8c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e8c8:	4619      	mov	r1, r3
 801e8ca:	4620      	mov	r0, r4
 801e8cc:	f7ee fd53 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e8d0:	4603      	mov	r3, r0
 801e8d2:	2b00      	cmp	r3, #0
 801e8d4:	d001      	beq.n	801e8da <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e8d6:	2401      	movs	r4, #1
 801e8d8:	e000      	b.n	801e8dc <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801e8da:	2400      	movs	r4, #0
 801e8dc:	2d00      	cmp	r5, #0
 801e8de:	d004      	beq.n	801e8ea <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801e8e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e8e4:	4618      	mov	r0, r3
 801e8e6:	f7ee fd3a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e8ea:	2e00      	cmp	r6, #0
 801e8ec:	d004      	beq.n	801e8f8 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801e8ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e8f2:	4618      	mov	r0, r3
 801e8f4:	f7ee fd33 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e8f8:	2c00      	cmp	r4, #0
 801e8fa:	d010      	beq.n	801e91e <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801e8fc:	1d3b      	adds	r3, r7, #4
 801e8fe:	681b      	ldr	r3, [r3, #0]
 801e900:	699b      	ldr	r3, [r3, #24]
 801e902:	2b00      	cmp	r3, #0
 801e904:	db09      	blt.n	801e91a <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801e906:	1d3b      	adds	r3, r7, #4
 801e908:	681b      	ldr	r3, [r3, #0]
 801e90a:	699b      	ldr	r3, [r3, #24]
 801e90c:	463a      	mov	r2, r7
 801e90e:	6812      	ldr	r2, [r2, #0]
 801e910:	6992      	ldr	r2, [r2, #24]
 801e912:	4293      	cmp	r3, r2
 801e914:	d101      	bne.n	801e91a <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801e916:	2401      	movs	r4, #1
 801e918:	e256      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e91a:	2400      	movs	r4, #0
 801e91c:	e254      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801e91e:	2500      	movs	r5, #0
 801e920:	1d3b      	adds	r3, r7, #4
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	f103 040c 	add.w	r4, r3, #12
 801e928:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e92c:	4988      	ldr	r1, [pc, #544]	; (801eb50 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e92e:	4618      	mov	r0, r3
 801e930:	f7ee f95d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e934:	2601      	movs	r6, #1
 801e936:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e93a:	4619      	mov	r1, r3
 801e93c:	4620      	mov	r0, r4
 801e93e:	f7ee fd1a 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e942:	4603      	mov	r3, r0
 801e944:	2b00      	cmp	r3, #0
 801e946:	d015      	beq.n	801e974 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801e948:	463b      	mov	r3, r7
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	f103 040c 	add.w	r4, r3, #12
 801e950:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e954:	497d      	ldr	r1, [pc, #500]	; (801eb4c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e956:	4618      	mov	r0, r3
 801e958:	f7ee f949 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e95c:	2501      	movs	r5, #1
 801e95e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e962:	4619      	mov	r1, r3
 801e964:	4620      	mov	r0, r4
 801e966:	f7ee fd06 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e96a:	4603      	mov	r3, r0
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	d001      	beq.n	801e974 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801e970:	2401      	movs	r4, #1
 801e972:	e000      	b.n	801e976 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801e974:	2400      	movs	r4, #0
 801e976:	2d00      	cmp	r5, #0
 801e978:	d004      	beq.n	801e984 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801e97a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e97e:	4618      	mov	r0, r3
 801e980:	f7ee fced 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e984:	2e00      	cmp	r6, #0
 801e986:	d004      	beq.n	801e992 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801e988:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e98c:	4618      	mov	r0, r3
 801e98e:	f7ee fce6 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801e992:	2c00      	cmp	r4, #0
 801e994:	d010      	beq.n	801e9b8 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801e996:	463b      	mov	r3, r7
 801e998:	681b      	ldr	r3, [r3, #0]
 801e99a:	699b      	ldr	r3, [r3, #24]
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	db09      	blt.n	801e9b4 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801e9a0:	1d3b      	adds	r3, r7, #4
 801e9a2:	681b      	ldr	r3, [r3, #0]
 801e9a4:	699b      	ldr	r3, [r3, #24]
 801e9a6:	463a      	mov	r2, r7
 801e9a8:	6812      	ldr	r2, [r2, #0]
 801e9aa:	6992      	ldr	r2, [r2, #24]
 801e9ac:	4293      	cmp	r3, r2
 801e9ae:	d101      	bne.n	801e9b4 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801e9b0:	2401      	movs	r4, #1
 801e9b2:	e209      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e9b4:	2400      	movs	r4, #0
 801e9b6:	e207      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801e9b8:	1d3b      	adds	r3, r7, #4
 801e9ba:	681b      	ldr	r3, [r3, #0]
 801e9bc:	f103 020c 	add.w	r2, r3, #12
 801e9c0:	463b      	mov	r3, r7
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	330c      	adds	r3, #12
 801e9c6:	4619      	mov	r1, r3
 801e9c8:	4610      	mov	r0, r2
 801e9ca:	f7ee fd19 	bl	800d400 <_ZneRK12SimpleStringS1_>
 801e9ce:	4603      	mov	r3, r0
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	d001      	beq.n	801e9d8 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801e9d4:	2400      	movs	r4, #0
 801e9d6:	e1f7      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801e9d8:	1d3b      	adds	r3, r7, #4
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	f103 040c 	add.w	r4, r3, #12
 801e9e0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e9e4:	495b      	ldr	r1, [pc, #364]	; (801eb54 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801e9e6:	4618      	mov	r0, r3
 801e9e8:	f7ee f901 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801e9ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e9f0:	4619      	mov	r1, r3
 801e9f2:	4620      	mov	r0, r4
 801e9f4:	f7ee fcbf 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801e9f8:	4603      	mov	r3, r0
 801e9fa:	461c      	mov	r4, r3
 801e9fc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ea00:	4618      	mov	r0, r3
 801ea02:	f7ee fcac 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ea06:	2c00      	cmp	r4, #0
 801ea08:	d00b      	beq.n	801ea22 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801ea0a:	1d3b      	adds	r3, r7, #4
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	7e1a      	ldrb	r2, [r3, #24]
 801ea10:	463b      	mov	r3, r7
 801ea12:	681b      	ldr	r3, [r3, #0]
 801ea14:	7e1b      	ldrb	r3, [r3, #24]
 801ea16:	429a      	cmp	r2, r3
 801ea18:	bf0c      	ite	eq
 801ea1a:	2301      	moveq	r3, #1
 801ea1c:	2300      	movne	r3, #0
 801ea1e:	b2dc      	uxtb	r4, r3
 801ea20:	e1d2      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801ea22:	1d3b      	adds	r3, r7, #4
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	f103 040c 	add.w	r4, r3, #12
 801ea2a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ea2e:	494a      	ldr	r1, [pc, #296]	; (801eb58 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801ea30:	4618      	mov	r0, r3
 801ea32:	f7ee f8dc 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ea36:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ea3a:	4619      	mov	r1, r3
 801ea3c:	4620      	mov	r0, r4
 801ea3e:	f7ee fc9a 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ea42:	4603      	mov	r3, r0
 801ea44:	461c      	mov	r4, r3
 801ea46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ea4a:	4618      	mov	r0, r3
 801ea4c:	f7ee fc87 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ea50:	2c00      	cmp	r4, #0
 801ea52:	d00b      	beq.n	801ea6c <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801ea54:	1d3b      	adds	r3, r7, #4
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	699a      	ldr	r2, [r3, #24]
 801ea5a:	463b      	mov	r3, r7
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	699b      	ldr	r3, [r3, #24]
 801ea60:	429a      	cmp	r2, r3
 801ea62:	bf0c      	ite	eq
 801ea64:	2301      	moveq	r3, #1
 801ea66:	2300      	movne	r3, #0
 801ea68:	b2dc      	uxtb	r4, r3
 801ea6a:	e1ad      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801ea6c:	1d3b      	adds	r3, r7, #4
 801ea6e:	681b      	ldr	r3, [r3, #0]
 801ea70:	f103 040c 	add.w	r4, r3, #12
 801ea74:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ea78:	4938      	ldr	r1, [pc, #224]	; (801eb5c <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801ea7a:	4618      	mov	r0, r3
 801ea7c:	f7ee f8b7 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ea80:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ea84:	4619      	mov	r1, r3
 801ea86:	4620      	mov	r0, r4
 801ea88:	f7ee fc75 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ea8c:	4603      	mov	r3, r0
 801ea8e:	461c      	mov	r4, r3
 801ea90:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ea94:	4618      	mov	r0, r3
 801ea96:	f7ee fc62 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ea9a:	2c00      	cmp	r4, #0
 801ea9c:	d00b      	beq.n	801eab6 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801ea9e:	1d3b      	adds	r3, r7, #4
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	699a      	ldr	r2, [r3, #24]
 801eaa4:	463b      	mov	r3, r7
 801eaa6:	681b      	ldr	r3, [r3, #0]
 801eaa8:	699b      	ldr	r3, [r3, #24]
 801eaaa:	429a      	cmp	r2, r3
 801eaac:	bf0c      	ite	eq
 801eaae:	2301      	moveq	r3, #1
 801eab0:	2300      	movne	r3, #0
 801eab2:	b2dc      	uxtb	r4, r3
 801eab4:	e188      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801eab6:	1d3b      	adds	r3, r7, #4
 801eab8:	681b      	ldr	r3, [r3, #0]
 801eaba:	f103 040c 	add.w	r4, r3, #12
 801eabe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801eac2:	4922      	ldr	r1, [pc, #136]	; (801eb4c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801eac4:	4618      	mov	r0, r3
 801eac6:	f7ee f892 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801eaca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801eace:	4619      	mov	r1, r3
 801ead0:	4620      	mov	r0, r4
 801ead2:	f7ee fc50 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ead6:	4603      	mov	r3, r0
 801ead8:	461c      	mov	r4, r3
 801eada:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801eade:	4618      	mov	r0, r3
 801eae0:	f7ee fc3d 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801eae4:	2c00      	cmp	r4, #0
 801eae6:	d00b      	beq.n	801eb00 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801eae8:	1d3b      	adds	r3, r7, #4
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	699a      	ldr	r2, [r3, #24]
 801eaee:	463b      	mov	r3, r7
 801eaf0:	681b      	ldr	r3, [r3, #0]
 801eaf2:	699b      	ldr	r3, [r3, #24]
 801eaf4:	429a      	cmp	r2, r3
 801eaf6:	bf0c      	ite	eq
 801eaf8:	2301      	moveq	r3, #1
 801eafa:	2300      	movne	r3, #0
 801eafc:	b2dc      	uxtb	r4, r3
 801eafe:	e163      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801eb00:	1d3b      	adds	r3, r7, #4
 801eb02:	681b      	ldr	r3, [r3, #0]
 801eb04:	f103 040c 	add.w	r4, r3, #12
 801eb08:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801eb0c:	4910      	ldr	r1, [pc, #64]	; (801eb50 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801eb0e:	4618      	mov	r0, r3
 801eb10:	f7ee f86d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801eb14:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801eb18:	4619      	mov	r1, r3
 801eb1a:	4620      	mov	r0, r4
 801eb1c:	f7ee fc2b 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801eb20:	4603      	mov	r3, r0
 801eb22:	461c      	mov	r4, r3
 801eb24:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801eb28:	4618      	mov	r0, r3
 801eb2a:	f7ee fc18 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801eb2e:	2c00      	cmp	r4, #0
 801eb30:	d016      	beq.n	801eb60 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801eb32:	1d3b      	adds	r3, r7, #4
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	699a      	ldr	r2, [r3, #24]
 801eb38:	463b      	mov	r3, r7
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	699b      	ldr	r3, [r3, #24]
 801eb3e:	429a      	cmp	r2, r3
 801eb40:	bf0c      	ite	eq
 801eb42:	2301      	moveq	r3, #1
 801eb44:	2300      	movne	r3, #0
 801eb46:	b2dc      	uxtb	r4, r3
 801eb48:	e13e      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801eb4a:	bf00      	nop
 801eb4c:	08026804 	.word	0x08026804
 801eb50:	08026810 	.word	0x08026810
 801eb54:	080267ec 	.word	0x080267ec
 801eb58:	080267e8 	.word	0x080267e8
 801eb5c:	080267f4 	.word	0x080267f4
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801eb60:	1d3b      	adds	r3, r7, #4
 801eb62:	681b      	ldr	r3, [r3, #0]
 801eb64:	f103 040c 	add.w	r4, r3, #12
 801eb68:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801eb6c:	4999      	ldr	r1, [pc, #612]	; (801edd4 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801eb6e:	4618      	mov	r0, r3
 801eb70:	f7ee f83d 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801eb74:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801eb78:	4619      	mov	r1, r3
 801eb7a:	4620      	mov	r0, r4
 801eb7c:	f7ee fbfb 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801eb80:	4603      	mov	r3, r0
 801eb82:	461c      	mov	r4, r3
 801eb84:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801eb88:	4618      	mov	r0, r3
 801eb8a:	f7ee fbe8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801eb8e:	2c00      	cmp	r4, #0
 801eb90:	d026      	beq.n	801ebe0 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801eb92:	1d3b      	adds	r3, r7, #4
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	699a      	ldr	r2, [r3, #24]
 801eb98:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801eb9c:	4611      	mov	r1, r2
 801eb9e:	4618      	mov	r0, r3
 801eba0:	f7ee f825 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801eba4:	463b      	mov	r3, r7
 801eba6:	681b      	ldr	r3, [r3, #0]
 801eba8:	699a      	ldr	r2, [r3, #24]
 801ebaa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ebae:	4611      	mov	r1, r2
 801ebb0:	4618      	mov	r0, r3
 801ebb2:	f7ee f81c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ebb6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801ebba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ebbe:	4611      	mov	r1, r2
 801ebc0:	4618      	mov	r0, r3
 801ebc2:	f7ee fbd8 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ebc6:	4603      	mov	r3, r0
 801ebc8:	461c      	mov	r4, r3
 801ebca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ebce:	4618      	mov	r0, r3
 801ebd0:	f7ee fbc5 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ebd4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ebd8:	4618      	mov	r0, r3
 801ebda:	f7ee fbc0 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ebde:	e0f3      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801ebe0:	1d3b      	adds	r3, r7, #4
 801ebe2:	681b      	ldr	r3, [r3, #0]
 801ebe4:	f103 040c 	add.w	r4, r3, #12
 801ebe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ebec:	497a      	ldr	r1, [pc, #488]	; (801edd8 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801ebee:	4618      	mov	r0, r3
 801ebf0:	f7ed fffd 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ebf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ebf8:	4619      	mov	r1, r3
 801ebfa:	4620      	mov	r0, r4
 801ebfc:	f7ee fbbb 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ec00:	4603      	mov	r3, r0
 801ec02:	461c      	mov	r4, r3
 801ec04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ec08:	4618      	mov	r0, r3
 801ec0a:	f7ee fba8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ec0e:	2c00      	cmp	r4, #0
 801ec10:	d00b      	beq.n	801ec2a <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801ec12:	1d3b      	adds	r3, r7, #4
 801ec14:	681b      	ldr	r3, [r3, #0]
 801ec16:	699a      	ldr	r2, [r3, #24]
 801ec18:	463b      	mov	r3, r7
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	699b      	ldr	r3, [r3, #24]
 801ec1e:	429a      	cmp	r2, r3
 801ec20:	bf0c      	ite	eq
 801ec22:	2301      	moveq	r3, #1
 801ec24:	2300      	movne	r3, #0
 801ec26:	b2dc      	uxtb	r4, r3
 801ec28:	e0ce      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801ec2a:	1d3b      	adds	r3, r7, #4
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	f103 040c 	add.w	r4, r3, #12
 801ec32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ec36:	4969      	ldr	r1, [pc, #420]	; (801eddc <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801ec38:	4618      	mov	r0, r3
 801ec3a:	f7ed ffd8 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ec3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ec42:	4619      	mov	r1, r3
 801ec44:	4620      	mov	r0, r4
 801ec46:	f7ee fb96 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ec4a:	4603      	mov	r3, r0
 801ec4c:	461c      	mov	r4, r3
 801ec4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ec52:	4618      	mov	r0, r3
 801ec54:	f7ee fb83 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ec58:	2c00      	cmp	r4, #0
 801ec5a:	d00b      	beq.n	801ec74 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801ec5c:	1d3b      	adds	r3, r7, #4
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	699a      	ldr	r2, [r3, #24]
 801ec62:	463b      	mov	r3, r7
 801ec64:	681b      	ldr	r3, [r3, #0]
 801ec66:	699b      	ldr	r3, [r3, #24]
 801ec68:	429a      	cmp	r2, r3
 801ec6a:	bf0c      	ite	eq
 801ec6c:	2301      	moveq	r3, #1
 801ec6e:	2300      	movne	r3, #0
 801ec70:	b2dc      	uxtb	r4, r3
 801ec72:	e0a9      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801ec74:	1d3b      	adds	r3, r7, #4
 801ec76:	681b      	ldr	r3, [r3, #0]
 801ec78:	f103 040c 	add.w	r4, r3, #12
 801ec7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ec80:	4957      	ldr	r1, [pc, #348]	; (801ede0 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801ec82:	4618      	mov	r0, r3
 801ec84:	f7ed ffb3 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ec88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ec8c:	4619      	mov	r1, r3
 801ec8e:	4620      	mov	r0, r4
 801ec90:	f7ee fb71 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ec94:	4603      	mov	r3, r0
 801ec96:	461c      	mov	r4, r3
 801ec98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ec9c:	4618      	mov	r0, r3
 801ec9e:	f7ee fb5e 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801eca2:	2c00      	cmp	r4, #0
 801eca4:	d00b      	beq.n	801ecbe <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801eca6:	1d3b      	adds	r3, r7, #4
 801eca8:	681b      	ldr	r3, [r3, #0]
 801ecaa:	699a      	ldr	r2, [r3, #24]
 801ecac:	463b      	mov	r3, r7
 801ecae:	681b      	ldr	r3, [r3, #0]
 801ecb0:	699b      	ldr	r3, [r3, #24]
 801ecb2:	429a      	cmp	r2, r3
 801ecb4:	bf0c      	ite	eq
 801ecb6:	2301      	moveq	r3, #1
 801ecb8:	2300      	movne	r3, #0
 801ecba:	b2dc      	uxtb	r4, r3
 801ecbc:	e084      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801ecbe:	1d3b      	adds	r3, r7, #4
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	f103 040c 	add.w	r4, r3, #12
 801ecc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ecca:	4946      	ldr	r1, [pc, #280]	; (801ede4 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801eccc:	4618      	mov	r0, r3
 801ecce:	f7ed ff8e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ecd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ecd6:	4619      	mov	r1, r3
 801ecd8:	4620      	mov	r0, r4
 801ecda:	f7ee fb4c 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ecde:	4603      	mov	r3, r0
 801ece0:	461c      	mov	r4, r3
 801ece2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ece6:	4618      	mov	r0, r3
 801ece8:	f7ee fb39 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ecec:	2c00      	cmp	r4, #0
 801ecee:	d01c      	beq.n	801ed2a <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801ecf0:	1d3b      	adds	r3, r7, #4
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	ed93 7b06 	vldr	d7, [r3, #24]
 801ecf8:	463b      	mov	r3, r7
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	ed93 6b06 	vldr	d6, [r3, #24]
 801ed00:	1d3b      	adds	r3, r7, #4
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	ed93 5b08 	vldr	d5, [r3, #32]
 801ed08:	eeb0 2a45 	vmov.f32	s4, s10
 801ed0c:	eef0 2a65 	vmov.f32	s5, s11
 801ed10:	eeb0 1a46 	vmov.f32	s2, s12
 801ed14:	eef0 1a66 	vmov.f32	s3, s13
 801ed18:	eeb0 0a47 	vmov.f32	s0, s14
 801ed1c:	eef0 0a67 	vmov.f32	s1, s15
 801ed20:	f7f3 fe18 	bl	8012954 <_Z13doubles_equalddd>
 801ed24:	4603      	mov	r3, r0
 801ed26:	461c      	mov	r4, r3
 801ed28:	e04e      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801ed2a:	1d3b      	adds	r3, r7, #4
 801ed2c:	681b      	ldr	r3, [r3, #0]
 801ed2e:	f103 040c 	add.w	r4, r3, #12
 801ed32:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ed36:	492c      	ldr	r1, [pc, #176]	; (801ede8 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801ed38:	4618      	mov	r0, r3
 801ed3a:	f7ed ff58 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ed3e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ed42:	4619      	mov	r1, r3
 801ed44:	4620      	mov	r0, r4
 801ed46:	f7ee fb16 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ed4a:	4603      	mov	r3, r0
 801ed4c:	461c      	mov	r4, r3
 801ed4e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ed52:	4618      	mov	r0, r3
 801ed54:	f7ee fb03 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ed58:	2c00      	cmp	r4, #0
 801ed5a:	d01c      	beq.n	801ed96 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801ed5c:	1d3b      	adds	r3, r7, #4
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ed62:	463b      	mov	r3, r7
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ed68:	429a      	cmp	r2, r3
 801ed6a:	d001      	beq.n	801ed70 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801ed6c:	2400      	movs	r4, #0
 801ed6e:	e02b      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801ed70:	1d3b      	adds	r3, r7, #4
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	6998      	ldr	r0, [r3, #24]
 801ed76:	463b      	mov	r3, r7
 801ed78:	681b      	ldr	r3, [r3, #0]
 801ed7a:	6999      	ldr	r1, [r3, #24]
 801ed7c:	1d3b      	adds	r3, r7, #4
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ed82:	461a      	mov	r2, r3
 801ed84:	f7ed fe52 	bl	800ca2c <_ZN12SimpleString6MemCmpEPKvS1_j>
 801ed88:	4603      	mov	r3, r0
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	bf0c      	ite	eq
 801ed8e:	2301      	moveq	r3, #1
 801ed90:	2300      	movne	r3, #0
 801ed92:	b2dc      	uxtb	r4, r3
 801ed94:	e018      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801ed96:	1d3b      	adds	r3, r7, #4
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d012      	beq.n	801edc6 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801eda0:	1d3b      	adds	r3, r7, #4
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801eda6:	1d3b      	adds	r3, r7, #4
 801eda8:	681b      	ldr	r3, [r3, #0]
 801edaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	3308      	adds	r3, #8
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	1d3a      	adds	r2, r7, #4
 801edb4:	6812      	ldr	r2, [r2, #0]
 801edb6:	6991      	ldr	r1, [r2, #24]
 801edb8:	463a      	mov	r2, r7
 801edba:	6812      	ldr	r2, [r2, #0]
 801edbc:	6992      	ldr	r2, [r2, #24]
 801edbe:	4798      	blx	r3
 801edc0:	4603      	mov	r3, r0
 801edc2:	461c      	mov	r4, r3
 801edc4:	e000      	b.n	801edc8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801edc6:	2400      	movs	r4, #0
 801edc8:	4623      	mov	r3, r4
}
 801edca:	4618      	mov	r0, r3
 801edcc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801edd0:	46bd      	mov	sp, r7
 801edd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801edd4:	080268b4 	.word	0x080268b4
 801edd8:	08026894 	.word	0x08026894
 801eddc:	0802689c 	.word	0x0802689c
 801ede0:	080268a8 	.word	0x080268a8
 801ede4:	0802688c 	.word	0x0802688c
 801ede8:	080268c0 	.word	0x080268c0

0801edec <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801edec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801edee:	b087      	sub	sp, #28
 801edf0:	af00      	add	r7, sp, #0
 801edf2:	6078      	str	r0, [r7, #4]
 801edf4:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	f103 020c 	add.w	r2, r3, #12
 801edfc:	683b      	ldr	r3, [r7, #0]
 801edfe:	330c      	adds	r3, #12
 801ee00:	4619      	mov	r1, r3
 801ee02:	4610      	mov	r0, r2
 801ee04:	f7ee fab7 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ee08:	4603      	mov	r3, r0
 801ee0a:	2b00      	cmp	r3, #0
 801ee0c:	d001      	beq.n	801ee12 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801ee0e:	2301      	movs	r3, #1
 801ee10:	e03c      	b.n	801ee8c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801ee12:	2500      	movs	r5, #0
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	f103 040c 	add.w	r4, r3, #12
 801ee1a:	f107 0308 	add.w	r3, r7, #8
 801ee1e:	491d      	ldr	r1, [pc, #116]	; (801ee94 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801ee20:	4618      	mov	r0, r3
 801ee22:	f7ed fee4 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ee26:	2601      	movs	r6, #1
 801ee28:	f107 0308 	add.w	r3, r7, #8
 801ee2c:	4619      	mov	r1, r3
 801ee2e:	4620      	mov	r0, r4
 801ee30:	f7ee faa1 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ee34:	4603      	mov	r3, r0
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d014      	beq.n	801ee64 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801ee3a:	683b      	ldr	r3, [r7, #0]
 801ee3c:	f103 040c 	add.w	r4, r3, #12
 801ee40:	f107 0310 	add.w	r3, r7, #16
 801ee44:	4914      	ldr	r1, [pc, #80]	; (801ee98 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801ee46:	4618      	mov	r0, r3
 801ee48:	f7ed fed1 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ee4c:	2501      	movs	r5, #1
 801ee4e:	f107 0310 	add.w	r3, r7, #16
 801ee52:	4619      	mov	r1, r3
 801ee54:	4620      	mov	r0, r4
 801ee56:	f7ee fa8e 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ee5a:	4603      	mov	r3, r0
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	d001      	beq.n	801ee64 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801ee60:	2401      	movs	r4, #1
 801ee62:	e000      	b.n	801ee66 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801ee64:	2400      	movs	r4, #0
 801ee66:	2d00      	cmp	r5, #0
 801ee68:	d004      	beq.n	801ee74 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801ee6a:	f107 0310 	add.w	r3, r7, #16
 801ee6e:	4618      	mov	r0, r3
 801ee70:	f7ee fa75 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ee74:	2e00      	cmp	r6, #0
 801ee76:	d004      	beq.n	801ee82 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801ee78:	f107 0308 	add.w	r3, r7, #8
 801ee7c:	4618      	mov	r0, r3
 801ee7e:	f7ee fa6e 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ee82:	2c00      	cmp	r4, #0
 801ee84:	d001      	beq.n	801ee8a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801ee86:	2301      	movs	r3, #1
 801ee88:	e000      	b.n	801ee8c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801ee8a:	2300      	movs	r3, #0
}
 801ee8c:	4618      	mov	r0, r3
 801ee8e:	371c      	adds	r7, #28
 801ee90:	46bd      	mov	sp, r7
 801ee92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee94:	0802689c 	.word	0x0802689c
 801ee98:	08026894 	.word	0x08026894

0801ee9c <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801ee9c:	b590      	push	{r4, r7, lr}
 801ee9e:	b0b9      	sub	sp, #228	; 0xe4
 801eea0:	af00      	add	r7, sp, #0
 801eea2:	6078      	str	r0, [r7, #4]
 801eea4:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801eea6:	683b      	ldr	r3, [r7, #0]
 801eea8:	f103 040c 	add.w	r4, r3, #12
 801eeac:	f107 0308 	add.w	r3, r7, #8
 801eeb0:	49d4      	ldr	r1, [pc, #848]	; (801f204 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801eeb2:	4618      	mov	r0, r3
 801eeb4:	f7ed fe9b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801eeb8:	f107 0308 	add.w	r3, r7, #8
 801eebc:	4619      	mov	r1, r3
 801eebe:	4620      	mov	r0, r4
 801eec0:	f7ee fa59 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801eec4:	4603      	mov	r3, r0
 801eec6:	461c      	mov	r4, r3
 801eec8:	f107 0308 	add.w	r3, r7, #8
 801eecc:	4618      	mov	r0, r3
 801eece:	f7ee fa46 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801eed2:	2c00      	cmp	r4, #0
 801eed4:	d007      	beq.n	801eee6 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801eed6:	683b      	ldr	r3, [r7, #0]
 801eed8:	7e1a      	ldrb	r2, [r3, #24]
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	4611      	mov	r1, r2
 801eede:	4618      	mov	r0, r3
 801eee0:	f7ee fcae 	bl	800d840 <_Z10StringFromb>
 801eee4:	e23f      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801eee6:	683b      	ldr	r3, [r7, #0]
 801eee8:	f103 040c 	add.w	r4, r3, #12
 801eeec:	f107 0310 	add.w	r3, r7, #16
 801eef0:	49c5      	ldr	r1, [pc, #788]	; (801f208 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801eef2:	4618      	mov	r0, r3
 801eef4:	f7ed fe7b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801eef8:	f107 0310 	add.w	r3, r7, #16
 801eefc:	4619      	mov	r1, r3
 801eefe:	4620      	mov	r0, r4
 801ef00:	f7ee fa39 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801ef04:	4603      	mov	r3, r0
 801ef06:	461c      	mov	r4, r3
 801ef08:	f107 0310 	add.w	r3, r7, #16
 801ef0c:	4618      	mov	r0, r3
 801ef0e:	f7ee fa26 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ef12:	2c00      	cmp	r4, #0
 801ef14:	d03b      	beq.n	801ef8e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801ef16:	683b      	ldr	r3, [r7, #0]
 801ef18:	699a      	ldr	r2, [r3, #24]
 801ef1a:	f107 0320 	add.w	r3, r7, #32
 801ef1e:	4611      	mov	r1, r2
 801ef20:	4618      	mov	r0, r3
 801ef22:	f7ee fce3 	bl	800d8ec <_Z10StringFromi>
 801ef26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ef2a:	49b8      	ldr	r1, [pc, #736]	; (801f20c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801ef2c:	4618      	mov	r0, r3
 801ef2e:	f7ed fe5e 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801ef32:	f107 0318 	add.w	r3, r7, #24
 801ef36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ef3a:	f107 0120 	add.w	r1, r7, #32
 801ef3e:	4618      	mov	r0, r3
 801ef40:	f7ee fa6f 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801ef44:	683b      	ldr	r3, [r7, #0]
 801ef46:	699a      	ldr	r2, [r3, #24]
 801ef48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ef4c:	4611      	mov	r1, r2
 801ef4e:	4618      	mov	r0, r3
 801ef50:	f7ee fdbc 	bl	800dacc <_Z30BracketsFormattedHexStringFromi>
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801ef5a:	f107 0118 	add.w	r1, r7, #24
 801ef5e:	4618      	mov	r0, r3
 801ef60:	f7ee fa5f 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801ef64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ef68:	4618      	mov	r0, r3
 801ef6a:	f7ee f9f8 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ef6e:	f107 0318 	add.w	r3, r7, #24
 801ef72:	4618      	mov	r0, r3
 801ef74:	f7ee f9f3 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ef78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ef7c:	4618      	mov	r0, r3
 801ef7e:	f7ee f9ee 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ef82:	f107 0320 	add.w	r3, r7, #32
 801ef86:	4618      	mov	r0, r3
 801ef88:	f7ee f9e9 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801ef8c:	e1eb      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801ef8e:	683b      	ldr	r3, [r7, #0]
 801ef90:	f103 040c 	add.w	r4, r3, #12
 801ef94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ef98:	499d      	ldr	r1, [pc, #628]	; (801f210 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801ef9a:	4618      	mov	r0, r3
 801ef9c:	f7ed fe27 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801efa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801efa4:	4619      	mov	r1, r3
 801efa6:	4620      	mov	r0, r4
 801efa8:	f7ee f9e5 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801efac:	4603      	mov	r3, r0
 801efae:	461c      	mov	r4, r3
 801efb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801efb4:	4618      	mov	r0, r3
 801efb6:	f7ee f9d2 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801efba:	2c00      	cmp	r4, #0
 801efbc:	d03b      	beq.n	801f036 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801efbe:	683b      	ldr	r3, [r7, #0]
 801efc0:	699a      	ldr	r2, [r3, #24]
 801efc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801efc6:	4611      	mov	r1, r2
 801efc8:	4618      	mov	r0, r3
 801efca:	f7ee fef7 	bl	800ddbc <_Z10StringFromj>
 801efce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801efd2:	498e      	ldr	r1, [pc, #568]	; (801f20c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801efd4:	4618      	mov	r0, r3
 801efd6:	f7ed fe0a 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801efda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801efde:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801efe2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801efe6:	4618      	mov	r0, r3
 801efe8:	f7ee fa1b 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801efec:	683b      	ldr	r3, [r7, #0]
 801efee:	699a      	ldr	r2, [r3, #24]
 801eff0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801eff4:	4611      	mov	r1, r2
 801eff6:	4618      	mov	r0, r3
 801eff8:	f7ee fd84 	bl	800db04 <_Z30BracketsFormattedHexStringFromj>
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801f002:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801f006:	4618      	mov	r0, r3
 801f008:	f7ee fa0b 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801f00c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f010:	4618      	mov	r0, r3
 801f012:	f7ee f9a4 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f016:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f01a:	4618      	mov	r0, r3
 801f01c:	f7ee f99f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f020:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f024:	4618      	mov	r0, r3
 801f026:	f7ee f99a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f02a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f02e:	4618      	mov	r0, r3
 801f030:	f7ee f995 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f034:	e197      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801f036:	683b      	ldr	r3, [r7, #0]
 801f038:	f103 040c 	add.w	r4, r3, #12
 801f03c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f040:	4974      	ldr	r1, [pc, #464]	; (801f214 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801f042:	4618      	mov	r0, r3
 801f044:	f7ed fdd3 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f048:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f04c:	4619      	mov	r1, r3
 801f04e:	4620      	mov	r0, r4
 801f050:	f7ee f991 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f054:	4603      	mov	r3, r0
 801f056:	461c      	mov	r4, r3
 801f058:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f05c:	4618      	mov	r0, r3
 801f05e:	f7ee f97e 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f062:	2c00      	cmp	r4, #0
 801f064:	d03b      	beq.n	801f0de <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801f066:	683b      	ldr	r3, [r7, #0]
 801f068:	699a      	ldr	r2, [r3, #24]
 801f06a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f06e:	4611      	mov	r1, r2
 801f070:	4618      	mov	r0, r3
 801f072:	f7ee fc4d 	bl	800d910 <_Z10StringFroml>
 801f076:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f07a:	4964      	ldr	r1, [pc, #400]	; (801f20c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f07c:	4618      	mov	r0, r3
 801f07e:	f7ed fdb6 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f082:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f086:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801f08a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801f08e:	4618      	mov	r0, r3
 801f090:	f7ee f9c7 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801f094:	683b      	ldr	r3, [r7, #0]
 801f096:	699a      	ldr	r2, [r3, #24]
 801f098:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f09c:	4611      	mov	r1, r2
 801f09e:	4618      	mov	r0, r3
 801f0a0:	f7ee fd4c 	bl	800db3c <_Z30BracketsFormattedHexStringFroml>
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801f0aa:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801f0ae:	4618      	mov	r0, r3
 801f0b0:	f7ee f9b7 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801f0b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f0b8:	4618      	mov	r0, r3
 801f0ba:	f7ee f950 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f0be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f0c2:	4618      	mov	r0, r3
 801f0c4:	f7ee f94b 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f0c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f0cc:	4618      	mov	r0, r3
 801f0ce:	f7ee f946 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f0d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f0d6:	4618      	mov	r0, r3
 801f0d8:	f7ee f941 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f0dc:	e143      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801f0de:	683b      	ldr	r3, [r7, #0]
 801f0e0:	f103 040c 	add.w	r4, r3, #12
 801f0e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f0e8:	494b      	ldr	r1, [pc, #300]	; (801f218 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801f0ea:	4618      	mov	r0, r3
 801f0ec:	f7ed fd7f 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f0f0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f0f4:	4619      	mov	r1, r3
 801f0f6:	4620      	mov	r0, r4
 801f0f8:	f7ee f93d 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f0fc:	4603      	mov	r3, r0
 801f0fe:	461c      	mov	r4, r3
 801f100:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f104:	4618      	mov	r0, r3
 801f106:	f7ee f92a 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f10a:	2c00      	cmp	r4, #0
 801f10c:	d03b      	beq.n	801f186 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801f10e:	683b      	ldr	r3, [r7, #0]
 801f110:	699a      	ldr	r2, [r3, #24]
 801f112:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f116:	4611      	mov	r1, r2
 801f118:	4618      	mov	r0, r3
 801f11a:	f7ee fe61 	bl	800dde0 <_Z10StringFromm>
 801f11e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f122:	493a      	ldr	r1, [pc, #232]	; (801f20c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f124:	4618      	mov	r0, r3
 801f126:	f7ed fd62 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f12a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f12e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801f132:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801f136:	4618      	mov	r0, r3
 801f138:	f7ee f973 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801f13c:	683b      	ldr	r3, [r7, #0]
 801f13e:	699a      	ldr	r2, [r3, #24]
 801f140:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f144:	4611      	mov	r1, r2
 801f146:	4618      	mov	r0, r3
 801f148:	f7ee fd14 	bl	800db74 <_Z30BracketsFormattedHexStringFromm>
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801f152:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801f156:	4618      	mov	r0, r3
 801f158:	f7ee f963 	bl	800d422 <_ZNK12SimpleStringplERKS_>
 801f15c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f160:	4618      	mov	r0, r3
 801f162:	f7ee f8fc 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f166:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f16a:	4618      	mov	r0, r3
 801f16c:	f7ee f8f7 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f170:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f174:	4618      	mov	r0, r3
 801f176:	f7ee f8f2 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f17a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f17e:	4618      	mov	r0, r3
 801f180:	f7ee f8ed 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f184:	e0ef      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801f186:	683b      	ldr	r3, [r7, #0]
 801f188:	f103 040c 	add.w	r4, r3, #12
 801f18c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f190:	4922      	ldr	r1, [pc, #136]	; (801f21c <_ZNK14MockNamedValue8toStringEv+0x380>)
 801f192:	4618      	mov	r0, r3
 801f194:	f7ed fd2b 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f198:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f19c:	4619      	mov	r1, r3
 801f19e:	4620      	mov	r0, r4
 801f1a0:	f7ee f8e9 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f1a4:	4603      	mov	r3, r0
 801f1a6:	461c      	mov	r4, r3
 801f1a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f1ac:	4618      	mov	r0, r3
 801f1ae:	f7ee f8d6 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f1b2:	2c00      	cmp	r4, #0
 801f1b4:	d006      	beq.n	801f1c4 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801f1b6:	683b      	ldr	r3, [r7, #0]
 801f1b8:	699b      	ldr	r3, [r3, #24]
 801f1ba:	4619      	mov	r1, r3
 801f1bc:	6878      	ldr	r0, [r7, #4]
 801f1be:	f7ed fd16 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f1c2:	e0d0      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801f1c4:	683b      	ldr	r3, [r7, #0]
 801f1c6:	f103 040c 	add.w	r4, r3, #12
 801f1ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f1ce:	4914      	ldr	r1, [pc, #80]	; (801f220 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801f1d0:	4618      	mov	r0, r3
 801f1d2:	f7ed fd0c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f1d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f1da:	4619      	mov	r1, r3
 801f1dc:	4620      	mov	r0, r4
 801f1de:	f7ee f8ca 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f1e2:	4603      	mov	r3, r0
 801f1e4:	461c      	mov	r4, r3
 801f1e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f1ea:	4618      	mov	r0, r3
 801f1ec:	f7ee f8b7 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f1f0:	2c00      	cmp	r4, #0
 801f1f2:	d017      	beq.n	801f224 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801f1f4:	683b      	ldr	r3, [r7, #0]
 801f1f6:	699a      	ldr	r2, [r3, #24]
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	4611      	mov	r1, r2
 801f1fc:	4618      	mov	r0, r3
 801f1fe:	f7ee fb99 	bl	800d934 <_Z10StringFromPKv>
 801f202:	e0b0      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801f204:	080267ec 	.word	0x080267ec
 801f208:	080267e8 	.word	0x080267e8
 801f20c:	080268d8 	.word	0x080268d8
 801f210:	080267f4 	.word	0x080267f4
 801f214:	08026804 	.word	0x08026804
 801f218:	08026810 	.word	0x08026810
 801f21c:	080268b4 	.word	0x080268b4
 801f220:	08026894 	.word	0x08026894
    else if (type_ == "void (*)()")
 801f224:	683b      	ldr	r3, [r7, #0]
 801f226:	f103 040c 	add.w	r4, r3, #12
 801f22a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f22e:	4950      	ldr	r1, [pc, #320]	; (801f370 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801f230:	4618      	mov	r0, r3
 801f232:	f7ed fcdc 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f236:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f23a:	4619      	mov	r1, r3
 801f23c:	4620      	mov	r0, r4
 801f23e:	f7ee f89a 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f242:	4603      	mov	r3, r0
 801f244:	461c      	mov	r4, r3
 801f246:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f24a:	4618      	mov	r0, r3
 801f24c:	f7ee f887 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f250:	2c00      	cmp	r4, #0
 801f252:	d007      	beq.n	801f264 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801f254:	683b      	ldr	r3, [r7, #0]
 801f256:	699a      	ldr	r2, [r3, #24]
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	4611      	mov	r1, r2
 801f25c:	4618      	mov	r0, r3
 801f25e:	f7ee fb93 	bl	800d988 <_Z10StringFromPFvvE>
 801f262:	e080      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801f264:	683b      	ldr	r3, [r7, #0]
 801f266:	f103 040c 	add.w	r4, r3, #12
 801f26a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f26e:	4941      	ldr	r1, [pc, #260]	; (801f374 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801f270:	4618      	mov	r0, r3
 801f272:	f7ed fcbc 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f276:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f27a:	4619      	mov	r1, r3
 801f27c:	4620      	mov	r0, r4
 801f27e:	f7ee f87a 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f282:	4603      	mov	r3, r0
 801f284:	461c      	mov	r4, r3
 801f286:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f28a:	4618      	mov	r0, r3
 801f28c:	f7ee f867 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f290:	2c00      	cmp	r4, #0
 801f292:	d007      	beq.n	801f2a4 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801f294:	683b      	ldr	r3, [r7, #0]
 801f296:	699a      	ldr	r2, [r3, #24]
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	4611      	mov	r1, r2
 801f29c:	4618      	mov	r0, r3
 801f29e:	f7ee fb49 	bl	800d934 <_Z10StringFromPKv>
 801f2a2:	e060      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801f2a4:	683b      	ldr	r3, [r7, #0]
 801f2a6:	f103 040c 	add.w	r4, r3, #12
 801f2aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f2ae:	4932      	ldr	r1, [pc, #200]	; (801f378 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801f2b0:	4618      	mov	r0, r3
 801f2b2:	f7ed fc9c 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f2b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f2ba:	4619      	mov	r1, r3
 801f2bc:	4620      	mov	r0, r4
 801f2be:	f7ee f85a 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f2c2:	4603      	mov	r3, r0
 801f2c4:	461c      	mov	r4, r3
 801f2c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f2ca:	4618      	mov	r0, r3
 801f2cc:	f7ee f847 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f2d0:	2c00      	cmp	r4, #0
 801f2d2:	d00c      	beq.n	801f2ee <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801f2d4:	683b      	ldr	r3, [r7, #0]
 801f2d6:	ed93 7b06 	vldr	d7, [r3, #24]
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	2106      	movs	r1, #6
 801f2de:	eeb0 0a47 	vmov.f32	s0, s14
 801f2e2:	eef0 0a67 	vmov.f32	s1, s15
 801f2e6:	4618      	mov	r0, r3
 801f2e8:	f7ee fcfe 	bl	800dce8 <_Z10StringFromdi>
 801f2ec:	e03b      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801f2ee:	683b      	ldr	r3, [r7, #0]
 801f2f0:	f103 040c 	add.w	r4, r3, #12
 801f2f4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f2f8:	4920      	ldr	r1, [pc, #128]	; (801f37c <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801f2fa:	4618      	mov	r0, r3
 801f2fc:	f7ed fc77 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f300:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f304:	4619      	mov	r1, r3
 801f306:	4620      	mov	r0, r4
 801f308:	f7ee f835 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f30c:	4603      	mov	r3, r0
 801f30e:	461c      	mov	r4, r3
 801f310:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f314:	4618      	mov	r0, r3
 801f316:	f7ee f822 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f31a:	2c00      	cmp	r4, #0
 801f31c:	d008      	beq.n	801f330 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801f31e:	683b      	ldr	r3, [r7, #0]
 801f320:	6999      	ldr	r1, [r3, #24]
 801f322:	683b      	ldr	r3, [r7, #0]
 801f324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f326:	687b      	ldr	r3, [r7, #4]
 801f328:	4618      	mov	r0, r3
 801f32a:	f7ee fe71 	bl	800e010 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801f32e:	e01a      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801f330:	683b      	ldr	r3, [r7, #0]
 801f332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f334:	2b00      	cmp	r3, #0
 801f336:	d00b      	beq.n	801f350 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801f338:	683b      	ldr	r3, [r7, #0]
 801f33a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801f33c:	683b      	ldr	r3, [r7, #0]
 801f33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	330c      	adds	r3, #12
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	683a      	ldr	r2, [r7, #0]
 801f348:	6992      	ldr	r2, [r2, #24]
 801f34a:	6878      	ldr	r0, [r7, #4]
 801f34c:	4798      	blx	r3
 801f34e:	e00a      	b.n	801f366 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801f350:	683b      	ldr	r3, [r7, #0]
 801f352:	330c      	adds	r3, #12
 801f354:	4618      	mov	r0, r3
 801f356:	f7ed ffd5 	bl	800d304 <_ZNK12SimpleString12asCharStringEv>
 801f35a:	4602      	mov	r2, r0
 801f35c:	687b      	ldr	r3, [r7, #4]
 801f35e:	4908      	ldr	r1, [pc, #32]	; (801f380 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801f360:	4618      	mov	r0, r3
 801f362:	f7ee fd03 	bl	800dd6c <_Z16StringFromFormatPKcz>

}
 801f366:	6878      	ldr	r0, [r7, #4]
 801f368:	37e4      	adds	r7, #228	; 0xe4
 801f36a:	46bd      	mov	sp, r7
 801f36c:	bd90      	pop	{r4, r7, pc}
 801f36e:	bf00      	nop
 801f370:	080268a8 	.word	0x080268a8
 801f374:	0802689c 	.word	0x0802689c
 801f378:	0802688c 	.word	0x0802688c
 801f37c:	080268c0 	.word	0x080268c0
 801f380:	080268dc 	.word	0x080268dc

0801f384 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801f384:	b480      	push	{r7}
 801f386:	b083      	sub	sp, #12
 801f388:	af00      	add	r7, sp, #0
 801f38a:	6078      	str	r0, [r7, #4]
 801f38c:	6039      	str	r1, [r7, #0]
    next_ = node;
 801f38e:	687b      	ldr	r3, [r7, #4]
 801f390:	683a      	ldr	r2, [r7, #0]
 801f392:	605a      	str	r2, [r3, #4]
}
 801f394:	bf00      	nop
 801f396:	370c      	adds	r7, #12
 801f398:	46bd      	mov	sp, r7
 801f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f39e:	4770      	bx	lr

0801f3a0 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801f3a0:	b480      	push	{r7}
 801f3a2:	b083      	sub	sp, #12
 801f3a4:	af00      	add	r7, sp, #0
 801f3a6:	6078      	str	r0, [r7, #4]
    return next_;
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	685b      	ldr	r3, [r3, #4]
}
 801f3ac:	4618      	mov	r0, r3
 801f3ae:	370c      	adds	r7, #12
 801f3b0:	46bd      	mov	sp, r7
 801f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3b6:	4770      	bx	lr

0801f3b8 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801f3b8:	b480      	push	{r7}
 801f3ba:	b083      	sub	sp, #12
 801f3bc:	af00      	add	r7, sp, #0
 801f3be:	6078      	str	r0, [r7, #4]
    return data_;
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	681b      	ldr	r3, [r3, #0]
}
 801f3c4:	4618      	mov	r0, r3
 801f3c6:	370c      	adds	r7, #12
 801f3c8:	46bd      	mov	sp, r7
 801f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ce:	4770      	bx	lr

0801f3d0 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801f3d0:	b580      	push	{r7, lr}
 801f3d2:	b082      	sub	sp, #8
 801f3d4:	af00      	add	r7, sp, #0
 801f3d6:	6078      	str	r0, [r7, #4]
    delete data_;
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	681b      	ldr	r3, [r3, #0]
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d004      	beq.n	801f3ea <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801f3e0:	681a      	ldr	r2, [r3, #0]
 801f3e2:	3204      	adds	r2, #4
 801f3e4:	6812      	ldr	r2, [r2, #0]
 801f3e6:	4618      	mov	r0, r3
 801f3e8:	4790      	blx	r2
}
 801f3ea:	bf00      	nop
 801f3ec:	3708      	adds	r7, #8
 801f3ee:	46bd      	mov	sp, r7
 801f3f0:	bd80      	pop	{r7, pc}

0801f3f2 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801f3f2:	b480      	push	{r7}
 801f3f4:	b083      	sub	sp, #12
 801f3f6:	af00      	add	r7, sp, #0
 801f3f8:	6078      	str	r0, [r7, #4]
 801f3fa:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801f3fc:	687b      	ldr	r3, [r7, #4]
 801f3fe:	683a      	ldr	r2, [r7, #0]
 801f400:	601a      	str	r2, [r3, #0]
 801f402:	687b      	ldr	r3, [r7, #4]
 801f404:	2200      	movs	r2, #0
 801f406:	605a      	str	r2, [r3, #4]
{
}
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	4618      	mov	r0, r3
 801f40c:	370c      	adds	r7, #12
 801f40e:	46bd      	mov	sp, r7
 801f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f414:	4770      	bx	lr

0801f416 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801f416:	b580      	push	{r7, lr}
 801f418:	b082      	sub	sp, #8
 801f41a:	af00      	add	r7, sp, #0
 801f41c:	6078      	str	r0, [r7, #4]
 801f41e:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801f420:	683b      	ldr	r3, [r7, #0]
 801f422:	6819      	ldr	r1, [r3, #0]
 801f424:	683b      	ldr	r3, [r7, #0]
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	681b      	ldr	r3, [r3, #0]
 801f42a:	335c      	adds	r3, #92	; 0x5c
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	687a      	ldr	r2, [r7, #4]
 801f430:	4610      	mov	r0, r2
 801f432:	4798      	blx	r3
}
 801f434:	6878      	ldr	r0, [r7, #4]
 801f436:	3708      	adds	r7, #8
 801f438:	46bd      	mov	sp, r7
 801f43a:	bd80      	pop	{r7, pc}

0801f43c <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801f43c:	b580      	push	{r7, lr}
 801f43e:	b082      	sub	sp, #8
 801f440:	af00      	add	r7, sp, #0
 801f442:	6078      	str	r0, [r7, #4]
 801f444:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801f446:	683b      	ldr	r3, [r7, #0]
 801f448:	6819      	ldr	r1, [r3, #0]
 801f44a:	683b      	ldr	r3, [r7, #0]
 801f44c:	681b      	ldr	r3, [r3, #0]
 801f44e:	681b      	ldr	r3, [r3, #0]
 801f450:	3360      	adds	r3, #96	; 0x60
 801f452:	681b      	ldr	r3, [r3, #0]
 801f454:	687a      	ldr	r2, [r7, #4]
 801f456:	4610      	mov	r0, r2
 801f458:	4798      	blx	r3
}
 801f45a:	6878      	ldr	r0, [r7, #4]
 801f45c:	3708      	adds	r7, #8
 801f45e:	46bd      	mov	sp, r7
 801f460:	bd80      	pop	{r7, pc}

0801f462 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801f462:	b480      	push	{r7}
 801f464:	b083      	sub	sp, #12
 801f466:	af00      	add	r7, sp, #0
 801f468:	6078      	str	r0, [r7, #4]
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	2200      	movs	r2, #0
 801f46e:	601a      	str	r2, [r3, #0]
{
}
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	4618      	mov	r0, r3
 801f474:	370c      	adds	r7, #12
 801f476:	46bd      	mov	sp, r7
 801f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f47c:	4770      	bx	lr

0801f47e <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801f47e:	b580      	push	{r7, lr}
 801f480:	b084      	sub	sp, #16
 801f482:	af00      	add	r7, sp, #0
 801f484:	6078      	str	r0, [r7, #4]
    while (head_) {
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	d016      	beq.n	801f4bc <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801f48e:	687b      	ldr	r3, [r7, #4]
 801f490:	681b      	ldr	r3, [r3, #0]
 801f492:	4618      	mov	r0, r3
 801f494:	f7ff ff84 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801f498:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	681b      	ldr	r3, [r3, #0]
 801f49e:	4618      	mov	r0, r3
 801f4a0:	f7ff ff96 	bl	801f3d0 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	681b      	ldr	r3, [r3, #0]
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	d003      	beq.n	801f4b4 <_ZN18MockNamedValueList5clearEv+0x36>
 801f4ac:	2108      	movs	r1, #8
 801f4ae:	4618      	mov	r0, r3
 801f4b0:	f7ea ffee 	bl	800a490 <_ZdlPvj>
        head_ = n;
 801f4b4:	687b      	ldr	r3, [r7, #4]
 801f4b6:	68fa      	ldr	r2, [r7, #12]
 801f4b8:	601a      	str	r2, [r3, #0]
    while (head_) {
 801f4ba:	e7e4      	b.n	801f486 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801f4bc:	bf00      	nop
 801f4be:	3710      	adds	r7, #16
 801f4c0:	46bd      	mov	sp, r7
 801f4c2:	bd80      	pop	{r7, pc}

0801f4c4 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801f4c4:	b590      	push	{r4, r7, lr}
 801f4c6:	b085      	sub	sp, #20
 801f4c8:	af00      	add	r7, sp, #0
 801f4ca:	6078      	str	r0, [r7, #4]
 801f4cc:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801f4ce:	f44f 7210 	mov.w	r2, #576	; 0x240
 801f4d2:	4916      	ldr	r1, [pc, #88]	; (801f52c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801f4d4:	2008      	movs	r0, #8
 801f4d6:	f7ea ffc7 	bl	800a468 <_ZnwjPKci>
 801f4da:	4604      	mov	r4, r0
 801f4dc:	6839      	ldr	r1, [r7, #0]
 801f4de:	4620      	mov	r0, r4
 801f4e0:	f7ff ff87 	bl	801f3f2 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801f4e4:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d103      	bne.n	801f4f6 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801f4ee:	687b      	ldr	r3, [r7, #4]
 801f4f0:	68ba      	ldr	r2, [r7, #8]
 801f4f2:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801f4f4:	e016      	b.n	801f524 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801f4fc:	68f8      	ldr	r0, [r7, #12]
 801f4fe:	f7ff ff4f 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801f502:	4603      	mov	r3, r0
 801f504:	2b00      	cmp	r3, #0
 801f506:	bf14      	ite	ne
 801f508:	2301      	movne	r3, #1
 801f50a:	2300      	moveq	r3, #0
 801f50c:	b2db      	uxtb	r3, r3
 801f50e:	2b00      	cmp	r3, #0
 801f510:	d004      	beq.n	801f51c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801f512:	68f8      	ldr	r0, [r7, #12]
 801f514:	f7ff ff44 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801f518:	60f8      	str	r0, [r7, #12]
 801f51a:	e7ef      	b.n	801f4fc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801f51c:	68b9      	ldr	r1, [r7, #8]
 801f51e:	68f8      	ldr	r0, [r7, #12]
 801f520:	f7ff ff30 	bl	801f384 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801f524:	bf00      	nop
 801f526:	3714      	adds	r7, #20
 801f528:	46bd      	mov	sp, r7
 801f52a:	bd90      	pop	{r4, r7, pc}
 801f52c:	08026824 	.word	0x08026824

0801f530 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801f530:	b590      	push	{r4, r7, lr}
 801f532:	b087      	sub	sp, #28
 801f534:	af00      	add	r7, sp, #0
 801f536:	6078      	str	r0, [r7, #4]
 801f538:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	617b      	str	r3, [r7, #20]
 801f540:	697b      	ldr	r3, [r7, #20]
 801f542:	2b00      	cmp	r3, #0
 801f544:	d01e      	beq.n	801f584 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801f546:	f107 030c 	add.w	r3, r7, #12
 801f54a:	6979      	ldr	r1, [r7, #20]
 801f54c:	4618      	mov	r0, r3
 801f54e:	f7ff ff62 	bl	801f416 <_ZNK22MockNamedValueListNode7getNameEv>
 801f552:	f107 030c 	add.w	r3, r7, #12
 801f556:	6839      	ldr	r1, [r7, #0]
 801f558:	4618      	mov	r0, r3
 801f55a:	f7ed ff0c 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f55e:	4603      	mov	r3, r0
 801f560:	461c      	mov	r4, r3
 801f562:	f107 030c 	add.w	r3, r7, #12
 801f566:	4618      	mov	r0, r3
 801f568:	f7ed fef9 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f56c:	2c00      	cmp	r4, #0
 801f56e:	d004      	beq.n	801f57a <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801f570:	6978      	ldr	r0, [r7, #20]
 801f572:	f7ff ff21 	bl	801f3b8 <_ZN22MockNamedValueListNode4itemEv>
 801f576:	4603      	mov	r3, r0
 801f578:	e005      	b.n	801f586 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801f57a:	6978      	ldr	r0, [r7, #20]
 801f57c:	f7ff ff10 	bl	801f3a0 <_ZN22MockNamedValueListNode4nextEv>
 801f580:	6178      	str	r0, [r7, #20]
 801f582:	e7dd      	b.n	801f540 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801f584:	2300      	movs	r3, #0
}
 801f586:	4618      	mov	r0, r3
 801f588:	371c      	adds	r7, #28
 801f58a:	46bd      	mov	sp, r7
 801f58c:	bd90      	pop	{r4, r7, pc}

0801f58e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801f58e:	b480      	push	{r7}
 801f590:	b083      	sub	sp, #12
 801f592:	af00      	add	r7, sp, #0
 801f594:	6078      	str	r0, [r7, #4]
    return head_;
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	681b      	ldr	r3, [r3, #0]
}
 801f59a:	4618      	mov	r0, r3
 801f59c:	370c      	adds	r7, #12
 801f59e:	46bd      	mov	sp, r7
 801f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5a4:	4770      	bx	lr

0801f5a6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f5a6:	b580      	push	{r7, lr}
 801f5a8:	b084      	sub	sp, #16
 801f5aa:	af00      	add	r7, sp, #0
 801f5ac:	60f8      	str	r0, [r7, #12]
 801f5ae:	60b9      	str	r1, [r7, #8]
 801f5b0:	607a      	str	r2, [r7, #4]
 801f5b2:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801f5b4:	68fb      	ldr	r3, [r7, #12]
 801f5b6:	68b9      	ldr	r1, [r7, #8]
 801f5b8:	4618      	mov	r0, r3
 801f5ba:	f7ed fb6c 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 801f5be:	68fb      	ldr	r3, [r7, #12]
 801f5c0:	687a      	ldr	r2, [r7, #4]
 801f5c2:	609a      	str	r2, [r3, #8]
 801f5c4:	68fb      	ldr	r3, [r7, #12]
 801f5c6:	2200      	movs	r2, #0
 801f5c8:	60da      	str	r2, [r3, #12]
 801f5ca:	68fb      	ldr	r3, [r7, #12]
 801f5cc:	683a      	ldr	r2, [r7, #0]
 801f5ce:	611a      	str	r2, [r3, #16]
 801f5d0:	68fb      	ldr	r3, [r7, #12]
 801f5d2:	4618      	mov	r0, r3
 801f5d4:	3710      	adds	r7, #16
 801f5d6:	46bd      	mov	sp, r7
 801f5d8:	bd80      	pop	{r7, pc}

0801f5da <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f5da:	b580      	push	{r7, lr}
 801f5dc:	b084      	sub	sp, #16
 801f5de:	af00      	add	r7, sp, #0
 801f5e0:	60f8      	str	r0, [r7, #12]
 801f5e2:	60b9      	str	r1, [r7, #8]
 801f5e4:	607a      	str	r2, [r7, #4]
 801f5e6:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801f5e8:	68fb      	ldr	r3, [r7, #12]
 801f5ea:	68b9      	ldr	r1, [r7, #8]
 801f5ec:	4618      	mov	r0, r3
 801f5ee:	f7ed fb52 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 801f5f2:	68fb      	ldr	r3, [r7, #12]
 801f5f4:	2200      	movs	r2, #0
 801f5f6:	609a      	str	r2, [r3, #8]
 801f5f8:	68fb      	ldr	r3, [r7, #12]
 801f5fa:	687a      	ldr	r2, [r7, #4]
 801f5fc:	60da      	str	r2, [r3, #12]
 801f5fe:	68fb      	ldr	r3, [r7, #12]
 801f600:	683a      	ldr	r2, [r7, #0]
 801f602:	611a      	str	r2, [r3, #16]
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	4618      	mov	r0, r3
 801f608:	3710      	adds	r7, #16
 801f60a:	46bd      	mov	sp, r7
 801f60c:	bd80      	pop	{r7, pc}

0801f60e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f60e:	b580      	push	{r7, lr}
 801f610:	b084      	sub	sp, #16
 801f612:	af00      	add	r7, sp, #0
 801f614:	60f8      	str	r0, [r7, #12]
 801f616:	60b9      	str	r1, [r7, #8]
 801f618:	607a      	str	r2, [r7, #4]
 801f61a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801f61c:	68fb      	ldr	r3, [r7, #12]
 801f61e:	68b9      	ldr	r1, [r7, #8]
 801f620:	4618      	mov	r0, r3
 801f622:	f7ed fb38 	bl	800cc96 <_ZN12SimpleStringC1ERKS_>
 801f626:	68fb      	ldr	r3, [r7, #12]
 801f628:	687a      	ldr	r2, [r7, #4]
 801f62a:	609a      	str	r2, [r3, #8]
 801f62c:	68fb      	ldr	r3, [r7, #12]
 801f62e:	683a      	ldr	r2, [r7, #0]
 801f630:	60da      	str	r2, [r3, #12]
 801f632:	68fb      	ldr	r3, [r7, #12]
 801f634:	69ba      	ldr	r2, [r7, #24]
 801f636:	611a      	str	r2, [r3, #16]
 801f638:	68fb      	ldr	r3, [r7, #12]
 801f63a:	4618      	mov	r0, r3
 801f63c:	3710      	adds	r7, #16
 801f63e:	46bd      	mov	sp, r7
 801f640:	bd80      	pop	{r7, pc}
	...

0801f644 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801f644:	b480      	push	{r7}
 801f646:	b083      	sub	sp, #12
 801f648:	af00      	add	r7, sp, #0
 801f64a:	6078      	str	r0, [r7, #4]
 801f64c:	4a06      	ldr	r2, [pc, #24]	; (801f668 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801f64e:	687b      	ldr	r3, [r7, #4]
 801f650:	601a      	str	r2, [r3, #0]
 801f652:	687b      	ldr	r3, [r7, #4]
 801f654:	2200      	movs	r2, #0
 801f656:	605a      	str	r2, [r3, #4]
{

}
 801f658:	687b      	ldr	r3, [r7, #4]
 801f65a:	4618      	mov	r0, r3
 801f65c:	370c      	adds	r7, #12
 801f65e:	46bd      	mov	sp, r7
 801f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f664:	4770      	bx	lr
 801f666:	bf00      	nop
 801f668:	08029438 	.word	0x08029438

0801f66c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801f66c:	b580      	push	{r7, lr}
 801f66e:	b082      	sub	sp, #8
 801f670:	af00      	add	r7, sp, #0
 801f672:	6078      	str	r0, [r7, #4]
 801f674:	4a05      	ldr	r2, [pc, #20]	; (801f68c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801f676:	687b      	ldr	r3, [r7, #4]
 801f678:	601a      	str	r2, [r3, #0]
{
    clear();
 801f67a:	6878      	ldr	r0, [r7, #4]
 801f67c:	f000 f825 	bl	801f6ca <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801f680:	687b      	ldr	r3, [r7, #4]
 801f682:	4618      	mov	r0, r3
 801f684:	3708      	adds	r7, #8
 801f686:	46bd      	mov	sp, r7
 801f688:	bd80      	pop	{r7, pc}
 801f68a:	bf00      	nop
 801f68c:	08029438 	.word	0x08029438

0801f690 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801f690:	b580      	push	{r7, lr}
 801f692:	b082      	sub	sp, #8
 801f694:	af00      	add	r7, sp, #0
 801f696:	6078      	str	r0, [r7, #4]
}
 801f698:	6878      	ldr	r0, [r7, #4]
 801f69a:	f7ff ffe7 	bl	801f66c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801f69e:	2108      	movs	r1, #8
 801f6a0:	6878      	ldr	r0, [r7, #4]
 801f6a2:	f7ea fef5 	bl	800a490 <_ZdlPvj>
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	4618      	mov	r0, r3
 801f6aa:	3708      	adds	r7, #8
 801f6ac:	46bd      	mov	sp, r7
 801f6ae:	bd80      	pop	{r7, pc}

0801f6b0 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801f6b0:	b580      	push	{r7, lr}
 801f6b2:	b082      	sub	sp, #8
 801f6b4:	af00      	add	r7, sp, #0
 801f6b6:	6078      	str	r0, [r7, #4]
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	4618      	mov	r0, r3
 801f6bc:	f7ed fe4f 	bl	800d35e <_ZN12SimpleStringD1Ev>
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	4618      	mov	r0, r3
 801f6c4:	3708      	adds	r7, #8
 801f6c6:	46bd      	mov	sp, r7
 801f6c8:	bd80      	pop	{r7, pc}

0801f6ca <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801f6ca:	b590      	push	{r4, r7, lr}
 801f6cc:	b085      	sub	sp, #20
 801f6ce:	af00      	add	r7, sp, #0
 801f6d0:	6078      	str	r0, [r7, #4]
    while (head_) {
 801f6d2:	687b      	ldr	r3, [r7, #4]
 801f6d4:	685b      	ldr	r3, [r3, #4]
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	d012      	beq.n	801f700 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801f6da:	687b      	ldr	r3, [r7, #4]
 801f6dc:	685b      	ldr	r3, [r3, #4]
 801f6de:	691b      	ldr	r3, [r3, #16]
 801f6e0:	60fb      	str	r3, [r7, #12]
        delete head_;
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	685c      	ldr	r4, [r3, #4]
 801f6e6:	2c00      	cmp	r4, #0
 801f6e8:	d006      	beq.n	801f6f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801f6ea:	4620      	mov	r0, r4
 801f6ec:	f7ff ffe0 	bl	801f6b0 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801f6f0:	2114      	movs	r1, #20
 801f6f2:	4620      	mov	r0, r4
 801f6f4:	f7ea fecc 	bl	800a490 <_ZdlPvj>
        head_ = next;
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	68fa      	ldr	r2, [r7, #12]
 801f6fc:	605a      	str	r2, [r3, #4]
    while (head_) {
 801f6fe:	e7e8      	b.n	801f6d2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801f700:	bf00      	nop
 801f702:	3714      	adds	r7, #20
 801f704:	46bd      	mov	sp, r7
 801f706:	bd90      	pop	{r4, r7, pc}

0801f708 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801f708:	b590      	push	{r4, r7, lr}
 801f70a:	b085      	sub	sp, #20
 801f70c:	af00      	add	r7, sp, #0
 801f70e:	60f8      	str	r0, [r7, #12]
 801f710:	60b9      	str	r1, [r7, #8]
 801f712:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801f714:	f240 227a 	movw	r2, #634	; 0x27a
 801f718:	4908      	ldr	r1, [pc, #32]	; (801f73c <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801f71a:	2014      	movs	r0, #20
 801f71c:	f7ea fea4 	bl	800a468 <_ZnwjPKci>
 801f720:	4604      	mov	r4, r0
 801f722:	68fb      	ldr	r3, [r7, #12]
 801f724:	685b      	ldr	r3, [r3, #4]
 801f726:	687a      	ldr	r2, [r7, #4]
 801f728:	68b9      	ldr	r1, [r7, #8]
 801f72a:	4620      	mov	r0, r4
 801f72c:	f7ff ff3b 	bl	801f5a6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801f730:	68fb      	ldr	r3, [r7, #12]
 801f732:	605c      	str	r4, [r3, #4]
}
 801f734:	bf00      	nop
 801f736:	3714      	adds	r7, #20
 801f738:	46bd      	mov	sp, r7
 801f73a:	bd90      	pop	{r4, r7, pc}
 801f73c:	08026824 	.word	0x08026824

0801f740 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801f740:	b590      	push	{r4, r7, lr}
 801f742:	b085      	sub	sp, #20
 801f744:	af00      	add	r7, sp, #0
 801f746:	60f8      	str	r0, [r7, #12]
 801f748:	60b9      	str	r1, [r7, #8]
 801f74a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801f74c:	f240 227f 	movw	r2, #639	; 0x27f
 801f750:	4908      	ldr	r1, [pc, #32]	; (801f774 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801f752:	2014      	movs	r0, #20
 801f754:	f7ea fe88 	bl	800a468 <_ZnwjPKci>
 801f758:	4604      	mov	r4, r0
 801f75a:	68fb      	ldr	r3, [r7, #12]
 801f75c:	685b      	ldr	r3, [r3, #4]
 801f75e:	687a      	ldr	r2, [r7, #4]
 801f760:	68b9      	ldr	r1, [r7, #8]
 801f762:	4620      	mov	r0, r4
 801f764:	f7ff ff39 	bl	801f5da <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801f768:	68fb      	ldr	r3, [r7, #12]
 801f76a:	605c      	str	r4, [r3, #4]
}
 801f76c:	bf00      	nop
 801f76e:	3714      	adds	r7, #20
 801f770:	46bd      	mov	sp, r7
 801f772:	bd90      	pop	{r4, r7, pc}
 801f774:	08026824 	.word	0x08026824

0801f778 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801f778:	b580      	push	{r7, lr}
 801f77a:	b084      	sub	sp, #16
 801f77c:	af00      	add	r7, sp, #0
 801f77e:	6078      	str	r0, [r7, #4]
 801f780:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f782:	687b      	ldr	r3, [r7, #4]
 801f784:	685b      	ldr	r3, [r3, #4]
 801f786:	60fb      	str	r3, [r7, #12]
 801f788:	68fb      	ldr	r3, [r7, #12]
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	d017      	beq.n	801f7be <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801f78e:	68fb      	ldr	r3, [r7, #12]
 801f790:	6839      	ldr	r1, [r7, #0]
 801f792:	4618      	mov	r0, r3
 801f794:	f7ed fdef 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f798:	4603      	mov	r3, r0
 801f79a:	2b00      	cmp	r3, #0
 801f79c:	d005      	beq.n	801f7aa <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f79e:	68fb      	ldr	r3, [r7, #12]
 801f7a0:	689b      	ldr	r3, [r3, #8]
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	d001      	beq.n	801f7aa <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f7a6:	2301      	movs	r3, #1
 801f7a8:	e000      	b.n	801f7ac <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801f7aa:	2300      	movs	r3, #0
 801f7ac:	2b00      	cmp	r3, #0
 801f7ae:	d002      	beq.n	801f7b6 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801f7b0:	68fb      	ldr	r3, [r7, #12]
 801f7b2:	689b      	ldr	r3, [r3, #8]
 801f7b4:	e004      	b.n	801f7c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f7b6:	68fb      	ldr	r3, [r7, #12]
 801f7b8:	691b      	ldr	r3, [r3, #16]
 801f7ba:	60fb      	str	r3, [r7, #12]
 801f7bc:	e7e4      	b.n	801f788 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f7be:	2300      	movs	r3, #0
}
 801f7c0:	4618      	mov	r0, r3
 801f7c2:	3710      	adds	r7, #16
 801f7c4:	46bd      	mov	sp, r7
 801f7c6:	bd80      	pop	{r7, pc}

0801f7c8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801f7c8:	b580      	push	{r7, lr}
 801f7ca:	b084      	sub	sp, #16
 801f7cc:	af00      	add	r7, sp, #0
 801f7ce:	6078      	str	r0, [r7, #4]
 801f7d0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	685b      	ldr	r3, [r3, #4]
 801f7d6:	60fb      	str	r3, [r7, #12]
 801f7d8:	68fb      	ldr	r3, [r7, #12]
 801f7da:	2b00      	cmp	r3, #0
 801f7dc:	d017      	beq.n	801f80e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801f7de:	68fb      	ldr	r3, [r7, #12]
 801f7e0:	6839      	ldr	r1, [r7, #0]
 801f7e2:	4618      	mov	r0, r3
 801f7e4:	f7ed fdc7 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f7e8:	4603      	mov	r3, r0
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	d005      	beq.n	801f7fa <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f7ee:	68fb      	ldr	r3, [r7, #12]
 801f7f0:	68db      	ldr	r3, [r3, #12]
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d001      	beq.n	801f7fa <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f7f6:	2301      	movs	r3, #1
 801f7f8:	e000      	b.n	801f7fc <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801f7fa:	2300      	movs	r3, #0
 801f7fc:	2b00      	cmp	r3, #0
 801f7fe:	d002      	beq.n	801f806 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801f800:	68fb      	ldr	r3, [r7, #12]
 801f802:	68db      	ldr	r3, [r3, #12]
 801f804:	e004      	b.n	801f810 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f806:	68fb      	ldr	r3, [r7, #12]
 801f808:	691b      	ldr	r3, [r3, #16]
 801f80a:	60fb      	str	r3, [r7, #12]
 801f80c:	e7e4      	b.n	801f7d8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f80e:	2300      	movs	r3, #0
}
 801f810:	4618      	mov	r0, r3
 801f812:	3710      	adds	r7, #16
 801f814:	46bd      	mov	sp, r7
 801f816:	bd80      	pop	{r7, pc}

0801f818 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801f818:	b590      	push	{r4, r7, lr}
 801f81a:	b087      	sub	sp, #28
 801f81c:	af02      	add	r7, sp, #8
 801f81e:	6078      	str	r0, [r7, #4]
 801f820:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f822:	683b      	ldr	r3, [r7, #0]
 801f824:	685b      	ldr	r3, [r3, #4]
 801f826:	60fb      	str	r3, [r7, #12]
 801f828:	68fb      	ldr	r3, [r7, #12]
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d018      	beq.n	801f860 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801f82e:	f240 2293 	movw	r2, #659	; 0x293
 801f832:	490d      	ldr	r1, [pc, #52]	; (801f868 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801f834:	2014      	movs	r0, #20
 801f836:	f7ea fe17 	bl	800a468 <_ZnwjPKci>
 801f83a:	4604      	mov	r4, r0
 801f83c:	68f9      	ldr	r1, [r7, #12]
 801f83e:	68fb      	ldr	r3, [r7, #12]
 801f840:	689a      	ldr	r2, [r3, #8]
 801f842:	68fb      	ldr	r3, [r7, #12]
 801f844:	68d8      	ldr	r0, [r3, #12]
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	685b      	ldr	r3, [r3, #4]
 801f84a:	9300      	str	r3, [sp, #0]
 801f84c:	4603      	mov	r3, r0
 801f84e:	4620      	mov	r0, r4
 801f850:	f7ff fedd 	bl	801f60e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f858:	68fb      	ldr	r3, [r7, #12]
 801f85a:	691b      	ldr	r3, [r3, #16]
 801f85c:	60fb      	str	r3, [r7, #12]
 801f85e:	e7e3      	b.n	801f828 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801f860:	bf00      	nop
 801f862:	3714      	adds	r7, #20
 801f864:	46bd      	mov	sp, r7
 801f866:	bd90      	pop	{r4, r7, pc}
 801f868:	08026824 	.word	0x08026824

0801f86c <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801f86c:	b580      	push	{r7, lr}
 801f86e:	b082      	sub	sp, #8
 801f870:	af00      	add	r7, sp, #0
 801f872:	6078      	str	r0, [r7, #4]
 801f874:	6039      	str	r1, [r7, #0]
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	490b      	ldr	r1, [pc, #44]	; (801f8a8 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801f87a:	4618      	mov	r0, r3
 801f87c:	f7ed f9b7 	bl	800cbee <_ZN12SimpleStringC1EPKc>
 801f880:	687b      	ldr	r3, [r7, #4]
 801f882:	2200      	movs	r2, #0
 801f884:	721a      	strb	r2, [r3, #8]
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	2200      	movs	r2, #0
 801f88a:	725a      	strb	r2, [r3, #9]
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	2200      	movs	r2, #0
 801f890:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	6839      	ldr	r1, [r7, #0]
 801f896:	4618      	mov	r0, r3
 801f898:	f7ed fa15 	bl	800ccc6 <_ZN12SimpleStringaSERKS_>
}
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	4618      	mov	r0, r3
 801f8a0:	3708      	adds	r7, #8
 801f8a2:	46bd      	mov	sp, r7
 801f8a4:	bd80      	pop	{r7, pc}
 801f8a6:	bf00      	nop
 801f8a8:	08026900 	.word	0x08026900

0801f8ac <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801f8ac:	b480      	push	{r7}
 801f8ae:	b083      	sub	sp, #12
 801f8b0:	af00      	add	r7, sp, #0
 801f8b2:	6078      	str	r0, [r7, #4]
 801f8b4:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	683a      	ldr	r2, [r7, #0]
 801f8ba:	60da      	str	r2, [r3, #12]
    return this;
 801f8bc:	687b      	ldr	r3, [r7, #4]
}
 801f8be:	4618      	mov	r0, r3
 801f8c0:	370c      	adds	r7, #12
 801f8c2:	46bd      	mov	sp, r7
 801f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8c8:	4770      	bx	lr

0801f8ca <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801f8ca:	b480      	push	{r7}
 801f8cc:	b083      	sub	sp, #12
 801f8ce:	af00      	add	r7, sp, #0
 801f8d0:	6078      	str	r0, [r7, #4]
    return next_;
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	68db      	ldr	r3, [r3, #12]
}
 801f8d6:	4618      	mov	r0, r3
 801f8d8:	370c      	adds	r7, #12
 801f8da:	46bd      	mov	sp, r7
 801f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8e0:	4770      	bx	lr

0801f8e2 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801f8e2:	b480      	push	{r7}
 801f8e4:	b083      	sub	sp, #12
 801f8e6:	af00      	add	r7, sp, #0
 801f8e8:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801f8ea:	687b      	ldr	r3, [r7, #4]
 801f8ec:	2201      	movs	r2, #1
 801f8ee:	721a      	strb	r2, [r3, #8]
}
 801f8f0:	bf00      	nop
 801f8f2:	370c      	adds	r7, #12
 801f8f4:	46bd      	mov	sp, r7
 801f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8fa:	4770      	bx	lr

0801f8fc <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801f8fc:	b480      	push	{r7}
 801f8fe:	b083      	sub	sp, #12
 801f900:	af00      	add	r7, sp, #0
 801f902:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	2201      	movs	r2, #1
 801f908:	725a      	strb	r2, [r3, #9]
}
 801f90a:	bf00      	nop
 801f90c:	370c      	adds	r7, #12
 801f90e:	46bd      	mov	sp, r7
 801f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f914:	4770      	bx	lr

0801f916 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801f916:	b580      	push	{r7, lr}
 801f918:	b084      	sub	sp, #16
 801f91a:	af00      	add	r7, sp, #0
 801f91c:	6078      	str	r0, [r7, #4]
 801f91e:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801f920:	2300      	movs	r3, #0
 801f922:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	7a1b      	ldrb	r3, [r3, #8]
 801f928:	2b00      	cmp	r3, #0
 801f92a:	d007      	beq.n	801f93c <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	4619      	mov	r1, r3
 801f930:	6838      	ldr	r0, [r7, #0]
 801f932:	f7ed fd20 	bl	800d376 <_ZeqRK12SimpleStringS1_>
 801f936:	4603      	mov	r3, r0
 801f938:	73fb      	strb	r3, [r7, #15]
 801f93a:	e006      	b.n	801f94a <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	4619      	mov	r1, r3
 801f940:	6838      	ldr	r0, [r7, #0]
 801f942:	f7ed f9d2 	bl	800ccea <_ZNK12SimpleString8containsERKS_>
 801f946:	4603      	mov	r3, r0
 801f948:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801f94a:	687b      	ldr	r3, [r7, #4]
 801f94c:	7a5b      	ldrb	r3, [r3, #9]
 801f94e:	2b00      	cmp	r3, #0
 801f950:	d004      	beq.n	801f95c <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801f952:	7bfb      	ldrb	r3, [r7, #15]
 801f954:	f083 0301 	eor.w	r3, r3, #1
 801f958:	b2db      	uxtb	r3, r3
 801f95a:	e005      	b.n	801f968 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801f95c:	7bfb      	ldrb	r3, [r7, #15]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	bf14      	ite	ne
 801f962:	2301      	movne	r3, #1
 801f964:	2300      	moveq	r3, #0
 801f966:	b2db      	uxtb	r3, r3
}
 801f968:	4618      	mov	r0, r3
 801f96a:	3710      	adds	r7, #16
 801f96c:	46bd      	mov	sp, r7
 801f96e:	bd80      	pop	{r7, pc}

0801f970 <__cxa_guard_acquire>:
 801f970:	6803      	ldr	r3, [r0, #0]
 801f972:	07db      	lsls	r3, r3, #31
 801f974:	d406      	bmi.n	801f984 <__cxa_guard_acquire+0x14>
 801f976:	7843      	ldrb	r3, [r0, #1]
 801f978:	b103      	cbz	r3, 801f97c <__cxa_guard_acquire+0xc>
 801f97a:	deff      	udf	#255	; 0xff
 801f97c:	2301      	movs	r3, #1
 801f97e:	7043      	strb	r3, [r0, #1]
 801f980:	4618      	mov	r0, r3
 801f982:	4770      	bx	lr
 801f984:	2000      	movs	r0, #0
 801f986:	4770      	bx	lr

0801f988 <__cxa_guard_release>:
 801f988:	2301      	movs	r3, #1
 801f98a:	6003      	str	r3, [r0, #0]
 801f98c:	4770      	bx	lr

0801f98e <__cxa_pure_virtual>:
 801f98e:	b508      	push	{r3, lr}
 801f990:	f000 f80c 	bl	801f9ac <_ZSt9terminatev>

0801f994 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f994:	b508      	push	{r3, lr}
 801f996:	4780      	blx	r0
 801f998:	f000 f816 	bl	801f9c8 <abort>

0801f99c <_ZSt13get_terminatev>:
 801f99c:	4b02      	ldr	r3, [pc, #8]	; (801f9a8 <_ZSt13get_terminatev+0xc>)
 801f99e:	6818      	ldr	r0, [r3, #0]
 801f9a0:	f3bf 8f5b 	dmb	ish
 801f9a4:	4770      	bx	lr
 801f9a6:	bf00      	nop
 801f9a8:	20000104 	.word	0x20000104

0801f9ac <_ZSt9terminatev>:
 801f9ac:	b508      	push	{r3, lr}
 801f9ae:	f7ff fff5 	bl	801f99c <_ZSt13get_terminatev>
 801f9b2:	f7ff ffef 	bl	801f994 <_ZN10__cxxabiv111__terminateEPFvvE>

0801f9b6 <fabs>:
 801f9b6:	ec51 0b10 	vmov	r0, r1, d0
 801f9ba:	ee10 2a10 	vmov	r2, s0
 801f9be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f9c2:	ec43 2b10 	vmov	d0, r2, r3
 801f9c6:	4770      	bx	lr

0801f9c8 <abort>:
 801f9c8:	b508      	push	{r3, lr}
 801f9ca:	2006      	movs	r0, #6
 801f9cc:	f000 ff8c 	bl	80208e8 <raise>
 801f9d0:	2001      	movs	r0, #1
 801f9d2:	f7e1 f9d6 	bl	8000d82 <_exit>

0801f9d6 <atexit>:
 801f9d6:	2300      	movs	r3, #0
 801f9d8:	4601      	mov	r1, r0
 801f9da:	461a      	mov	r2, r3
 801f9dc:	4618      	mov	r0, r3
 801f9de:	f002 b9d3 	b.w	8021d88 <__register_exitproc>

0801f9e2 <atoi>:
 801f9e2:	220a      	movs	r2, #10
 801f9e4:	2100      	movs	r1, #0
 801f9e6:	f001 bdfb 	b.w	80215e0 <strtol>
	...

0801f9ec <calloc>:
 801f9ec:	4b02      	ldr	r3, [pc, #8]	; (801f9f8 <calloc+0xc>)
 801f9ee:	460a      	mov	r2, r1
 801f9f0:	4601      	mov	r1, r0
 801f9f2:	6818      	ldr	r0, [r3, #0]
 801f9f4:	f000 bde8 	b.w	80205c8 <_calloc_r>
 801f9f8:	20000108 	.word	0x20000108

0801f9fc <__errno>:
 801f9fc:	4b01      	ldr	r3, [pc, #4]	; (801fa04 <__errno+0x8>)
 801f9fe:	6818      	ldr	r0, [r3, #0]
 801fa00:	4770      	bx	lr
 801fa02:	bf00      	nop
 801fa04:	20000108 	.word	0x20000108

0801fa08 <_fclose_r>:
 801fa08:	b570      	push	{r4, r5, r6, lr}
 801fa0a:	4605      	mov	r5, r0
 801fa0c:	460c      	mov	r4, r1
 801fa0e:	b911      	cbnz	r1, 801fa16 <_fclose_r+0xe>
 801fa10:	2600      	movs	r6, #0
 801fa12:	4630      	mov	r0, r6
 801fa14:	bd70      	pop	{r4, r5, r6, pc}
 801fa16:	b118      	cbz	r0, 801fa20 <_fclose_r+0x18>
 801fa18:	6983      	ldr	r3, [r0, #24]
 801fa1a:	b90b      	cbnz	r3, 801fa20 <_fclose_r+0x18>
 801fa1c:	f000 f994 	bl	801fd48 <__sinit>
 801fa20:	4b2c      	ldr	r3, [pc, #176]	; (801fad4 <_fclose_r+0xcc>)
 801fa22:	429c      	cmp	r4, r3
 801fa24:	d114      	bne.n	801fa50 <_fclose_r+0x48>
 801fa26:	686c      	ldr	r4, [r5, #4]
 801fa28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa2a:	07d8      	lsls	r0, r3, #31
 801fa2c:	d405      	bmi.n	801fa3a <_fclose_r+0x32>
 801fa2e:	89a3      	ldrh	r3, [r4, #12]
 801fa30:	0599      	lsls	r1, r3, #22
 801fa32:	d402      	bmi.n	801fa3a <_fclose_r+0x32>
 801fa34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa36:	f000 fd3a 	bl	80204ae <__retarget_lock_acquire_recursive>
 801fa3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fa3e:	b98b      	cbnz	r3, 801fa64 <_fclose_r+0x5c>
 801fa40:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801fa42:	f016 0601 	ands.w	r6, r6, #1
 801fa46:	d1e3      	bne.n	801fa10 <_fclose_r+0x8>
 801fa48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa4a:	f000 fd32 	bl	80204b2 <__retarget_lock_release_recursive>
 801fa4e:	e7e0      	b.n	801fa12 <_fclose_r+0xa>
 801fa50:	4b21      	ldr	r3, [pc, #132]	; (801fad8 <_fclose_r+0xd0>)
 801fa52:	429c      	cmp	r4, r3
 801fa54:	d101      	bne.n	801fa5a <_fclose_r+0x52>
 801fa56:	68ac      	ldr	r4, [r5, #8]
 801fa58:	e7e6      	b.n	801fa28 <_fclose_r+0x20>
 801fa5a:	4b20      	ldr	r3, [pc, #128]	; (801fadc <_fclose_r+0xd4>)
 801fa5c:	429c      	cmp	r4, r3
 801fa5e:	bf08      	it	eq
 801fa60:	68ec      	ldreq	r4, [r5, #12]
 801fa62:	e7e1      	b.n	801fa28 <_fclose_r+0x20>
 801fa64:	4621      	mov	r1, r4
 801fa66:	4628      	mov	r0, r5
 801fa68:	f000 f842 	bl	801faf0 <__sflush_r>
 801fa6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fa6e:	4606      	mov	r6, r0
 801fa70:	b133      	cbz	r3, 801fa80 <_fclose_r+0x78>
 801fa72:	6a21      	ldr	r1, [r4, #32]
 801fa74:	4628      	mov	r0, r5
 801fa76:	4798      	blx	r3
 801fa78:	2800      	cmp	r0, #0
 801fa7a:	bfb8      	it	lt
 801fa7c:	f04f 36ff 	movlt.w	r6, #4294967295
 801fa80:	89a3      	ldrh	r3, [r4, #12]
 801fa82:	061a      	lsls	r2, r3, #24
 801fa84:	d503      	bpl.n	801fa8e <_fclose_r+0x86>
 801fa86:	6921      	ldr	r1, [r4, #16]
 801fa88:	4628      	mov	r0, r5
 801fa8a:	f000 fdad 	bl	80205e8 <_free_r>
 801fa8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fa90:	b141      	cbz	r1, 801faa4 <_fclose_r+0x9c>
 801fa92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fa96:	4299      	cmp	r1, r3
 801fa98:	d002      	beq.n	801faa0 <_fclose_r+0x98>
 801fa9a:	4628      	mov	r0, r5
 801fa9c:	f000 fda4 	bl	80205e8 <_free_r>
 801faa0:	2300      	movs	r3, #0
 801faa2:	6363      	str	r3, [r4, #52]	; 0x34
 801faa4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801faa6:	b121      	cbz	r1, 801fab2 <_fclose_r+0xaa>
 801faa8:	4628      	mov	r0, r5
 801faaa:	f000 fd9d 	bl	80205e8 <_free_r>
 801faae:	2300      	movs	r3, #0
 801fab0:	64a3      	str	r3, [r4, #72]	; 0x48
 801fab2:	f000 f931 	bl	801fd18 <__sfp_lock_acquire>
 801fab6:	2300      	movs	r3, #0
 801fab8:	81a3      	strh	r3, [r4, #12]
 801faba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fabc:	07db      	lsls	r3, r3, #31
 801fabe:	d402      	bmi.n	801fac6 <_fclose_r+0xbe>
 801fac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fac2:	f000 fcf6 	bl	80204b2 <__retarget_lock_release_recursive>
 801fac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fac8:	f000 fcef 	bl	80204aa <__retarget_lock_close_recursive>
 801facc:	f000 f92a 	bl	801fd24 <__sfp_lock_release>
 801fad0:	e79f      	b.n	801fa12 <_fclose_r+0xa>
 801fad2:	bf00      	nop
 801fad4:	0802952c 	.word	0x0802952c
 801fad8:	0802954c 	.word	0x0802954c
 801fadc:	0802950c 	.word	0x0802950c

0801fae0 <fclose>:
 801fae0:	4b02      	ldr	r3, [pc, #8]	; (801faec <fclose+0xc>)
 801fae2:	4601      	mov	r1, r0
 801fae4:	6818      	ldr	r0, [r3, #0]
 801fae6:	f7ff bf8f 	b.w	801fa08 <_fclose_r>
 801faea:	bf00      	nop
 801faec:	20000108 	.word	0x20000108

0801faf0 <__sflush_r>:
 801faf0:	898a      	ldrh	r2, [r1, #12]
 801faf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801faf6:	4605      	mov	r5, r0
 801faf8:	0710      	lsls	r0, r2, #28
 801fafa:	460c      	mov	r4, r1
 801fafc:	d458      	bmi.n	801fbb0 <__sflush_r+0xc0>
 801fafe:	684b      	ldr	r3, [r1, #4]
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	dc05      	bgt.n	801fb10 <__sflush_r+0x20>
 801fb04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fb06:	2b00      	cmp	r3, #0
 801fb08:	dc02      	bgt.n	801fb10 <__sflush_r+0x20>
 801fb0a:	2000      	movs	r0, #0
 801fb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fb12:	2e00      	cmp	r6, #0
 801fb14:	d0f9      	beq.n	801fb0a <__sflush_r+0x1a>
 801fb16:	2300      	movs	r3, #0
 801fb18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fb1c:	682f      	ldr	r7, [r5, #0]
 801fb1e:	602b      	str	r3, [r5, #0]
 801fb20:	d032      	beq.n	801fb88 <__sflush_r+0x98>
 801fb22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fb24:	89a3      	ldrh	r3, [r4, #12]
 801fb26:	075a      	lsls	r2, r3, #29
 801fb28:	d505      	bpl.n	801fb36 <__sflush_r+0x46>
 801fb2a:	6863      	ldr	r3, [r4, #4]
 801fb2c:	1ac0      	subs	r0, r0, r3
 801fb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fb30:	b10b      	cbz	r3, 801fb36 <__sflush_r+0x46>
 801fb32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fb34:	1ac0      	subs	r0, r0, r3
 801fb36:	2300      	movs	r3, #0
 801fb38:	4602      	mov	r2, r0
 801fb3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fb3c:	6a21      	ldr	r1, [r4, #32]
 801fb3e:	4628      	mov	r0, r5
 801fb40:	47b0      	blx	r6
 801fb42:	1c43      	adds	r3, r0, #1
 801fb44:	89a3      	ldrh	r3, [r4, #12]
 801fb46:	d106      	bne.n	801fb56 <__sflush_r+0x66>
 801fb48:	6829      	ldr	r1, [r5, #0]
 801fb4a:	291d      	cmp	r1, #29
 801fb4c:	d82c      	bhi.n	801fba8 <__sflush_r+0xb8>
 801fb4e:	4a2a      	ldr	r2, [pc, #168]	; (801fbf8 <__sflush_r+0x108>)
 801fb50:	40ca      	lsrs	r2, r1
 801fb52:	07d6      	lsls	r6, r2, #31
 801fb54:	d528      	bpl.n	801fba8 <__sflush_r+0xb8>
 801fb56:	2200      	movs	r2, #0
 801fb58:	6062      	str	r2, [r4, #4]
 801fb5a:	04d9      	lsls	r1, r3, #19
 801fb5c:	6922      	ldr	r2, [r4, #16]
 801fb5e:	6022      	str	r2, [r4, #0]
 801fb60:	d504      	bpl.n	801fb6c <__sflush_r+0x7c>
 801fb62:	1c42      	adds	r2, r0, #1
 801fb64:	d101      	bne.n	801fb6a <__sflush_r+0x7a>
 801fb66:	682b      	ldr	r3, [r5, #0]
 801fb68:	b903      	cbnz	r3, 801fb6c <__sflush_r+0x7c>
 801fb6a:	6560      	str	r0, [r4, #84]	; 0x54
 801fb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fb6e:	602f      	str	r7, [r5, #0]
 801fb70:	2900      	cmp	r1, #0
 801fb72:	d0ca      	beq.n	801fb0a <__sflush_r+0x1a>
 801fb74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fb78:	4299      	cmp	r1, r3
 801fb7a:	d002      	beq.n	801fb82 <__sflush_r+0x92>
 801fb7c:	4628      	mov	r0, r5
 801fb7e:	f000 fd33 	bl	80205e8 <_free_r>
 801fb82:	2000      	movs	r0, #0
 801fb84:	6360      	str	r0, [r4, #52]	; 0x34
 801fb86:	e7c1      	b.n	801fb0c <__sflush_r+0x1c>
 801fb88:	6a21      	ldr	r1, [r4, #32]
 801fb8a:	2301      	movs	r3, #1
 801fb8c:	4628      	mov	r0, r5
 801fb8e:	47b0      	blx	r6
 801fb90:	1c41      	adds	r1, r0, #1
 801fb92:	d1c7      	bne.n	801fb24 <__sflush_r+0x34>
 801fb94:	682b      	ldr	r3, [r5, #0]
 801fb96:	2b00      	cmp	r3, #0
 801fb98:	d0c4      	beq.n	801fb24 <__sflush_r+0x34>
 801fb9a:	2b1d      	cmp	r3, #29
 801fb9c:	d001      	beq.n	801fba2 <__sflush_r+0xb2>
 801fb9e:	2b16      	cmp	r3, #22
 801fba0:	d101      	bne.n	801fba6 <__sflush_r+0xb6>
 801fba2:	602f      	str	r7, [r5, #0]
 801fba4:	e7b1      	b.n	801fb0a <__sflush_r+0x1a>
 801fba6:	89a3      	ldrh	r3, [r4, #12]
 801fba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fbac:	81a3      	strh	r3, [r4, #12]
 801fbae:	e7ad      	b.n	801fb0c <__sflush_r+0x1c>
 801fbb0:	690f      	ldr	r7, [r1, #16]
 801fbb2:	2f00      	cmp	r7, #0
 801fbb4:	d0a9      	beq.n	801fb0a <__sflush_r+0x1a>
 801fbb6:	0793      	lsls	r3, r2, #30
 801fbb8:	680e      	ldr	r6, [r1, #0]
 801fbba:	bf08      	it	eq
 801fbbc:	694b      	ldreq	r3, [r1, #20]
 801fbbe:	600f      	str	r7, [r1, #0]
 801fbc0:	bf18      	it	ne
 801fbc2:	2300      	movne	r3, #0
 801fbc4:	eba6 0807 	sub.w	r8, r6, r7
 801fbc8:	608b      	str	r3, [r1, #8]
 801fbca:	f1b8 0f00 	cmp.w	r8, #0
 801fbce:	dd9c      	ble.n	801fb0a <__sflush_r+0x1a>
 801fbd0:	6a21      	ldr	r1, [r4, #32]
 801fbd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fbd4:	4643      	mov	r3, r8
 801fbd6:	463a      	mov	r2, r7
 801fbd8:	4628      	mov	r0, r5
 801fbda:	47b0      	blx	r6
 801fbdc:	2800      	cmp	r0, #0
 801fbde:	dc06      	bgt.n	801fbee <__sflush_r+0xfe>
 801fbe0:	89a3      	ldrh	r3, [r4, #12]
 801fbe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fbe6:	81a3      	strh	r3, [r4, #12]
 801fbe8:	f04f 30ff 	mov.w	r0, #4294967295
 801fbec:	e78e      	b.n	801fb0c <__sflush_r+0x1c>
 801fbee:	4407      	add	r7, r0
 801fbf0:	eba8 0800 	sub.w	r8, r8, r0
 801fbf4:	e7e9      	b.n	801fbca <__sflush_r+0xda>
 801fbf6:	bf00      	nop
 801fbf8:	20400001 	.word	0x20400001

0801fbfc <_fflush_r>:
 801fbfc:	b538      	push	{r3, r4, r5, lr}
 801fbfe:	690b      	ldr	r3, [r1, #16]
 801fc00:	4605      	mov	r5, r0
 801fc02:	460c      	mov	r4, r1
 801fc04:	b913      	cbnz	r3, 801fc0c <_fflush_r+0x10>
 801fc06:	2500      	movs	r5, #0
 801fc08:	4628      	mov	r0, r5
 801fc0a:	bd38      	pop	{r3, r4, r5, pc}
 801fc0c:	b118      	cbz	r0, 801fc16 <_fflush_r+0x1a>
 801fc0e:	6983      	ldr	r3, [r0, #24]
 801fc10:	b90b      	cbnz	r3, 801fc16 <_fflush_r+0x1a>
 801fc12:	f000 f899 	bl	801fd48 <__sinit>
 801fc16:	4b14      	ldr	r3, [pc, #80]	; (801fc68 <_fflush_r+0x6c>)
 801fc18:	429c      	cmp	r4, r3
 801fc1a:	d11b      	bne.n	801fc54 <_fflush_r+0x58>
 801fc1c:	686c      	ldr	r4, [r5, #4]
 801fc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc22:	2b00      	cmp	r3, #0
 801fc24:	d0ef      	beq.n	801fc06 <_fflush_r+0xa>
 801fc26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fc28:	07d0      	lsls	r0, r2, #31
 801fc2a:	d404      	bmi.n	801fc36 <_fflush_r+0x3a>
 801fc2c:	0599      	lsls	r1, r3, #22
 801fc2e:	d402      	bmi.n	801fc36 <_fflush_r+0x3a>
 801fc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fc32:	f000 fc3c 	bl	80204ae <__retarget_lock_acquire_recursive>
 801fc36:	4628      	mov	r0, r5
 801fc38:	4621      	mov	r1, r4
 801fc3a:	f7ff ff59 	bl	801faf0 <__sflush_r>
 801fc3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fc40:	07da      	lsls	r2, r3, #31
 801fc42:	4605      	mov	r5, r0
 801fc44:	d4e0      	bmi.n	801fc08 <_fflush_r+0xc>
 801fc46:	89a3      	ldrh	r3, [r4, #12]
 801fc48:	059b      	lsls	r3, r3, #22
 801fc4a:	d4dd      	bmi.n	801fc08 <_fflush_r+0xc>
 801fc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fc4e:	f000 fc30 	bl	80204b2 <__retarget_lock_release_recursive>
 801fc52:	e7d9      	b.n	801fc08 <_fflush_r+0xc>
 801fc54:	4b05      	ldr	r3, [pc, #20]	; (801fc6c <_fflush_r+0x70>)
 801fc56:	429c      	cmp	r4, r3
 801fc58:	d101      	bne.n	801fc5e <_fflush_r+0x62>
 801fc5a:	68ac      	ldr	r4, [r5, #8]
 801fc5c:	e7df      	b.n	801fc1e <_fflush_r+0x22>
 801fc5e:	4b04      	ldr	r3, [pc, #16]	; (801fc70 <_fflush_r+0x74>)
 801fc60:	429c      	cmp	r4, r3
 801fc62:	bf08      	it	eq
 801fc64:	68ec      	ldreq	r4, [r5, #12]
 801fc66:	e7da      	b.n	801fc1e <_fflush_r+0x22>
 801fc68:	0802952c 	.word	0x0802952c
 801fc6c:	0802954c 	.word	0x0802954c
 801fc70:	0802950c 	.word	0x0802950c

0801fc74 <fflush>:
 801fc74:	4601      	mov	r1, r0
 801fc76:	b920      	cbnz	r0, 801fc82 <fflush+0xe>
 801fc78:	4b04      	ldr	r3, [pc, #16]	; (801fc8c <fflush+0x18>)
 801fc7a:	4905      	ldr	r1, [pc, #20]	; (801fc90 <fflush+0x1c>)
 801fc7c:	6818      	ldr	r0, [r3, #0]
 801fc7e:	f000 babb 	b.w	80201f8 <_fwalk_reent>
 801fc82:	4b04      	ldr	r3, [pc, #16]	; (801fc94 <fflush+0x20>)
 801fc84:	6818      	ldr	r0, [r3, #0]
 801fc86:	f7ff bfb9 	b.w	801fbfc <_fflush_r>
 801fc8a:	bf00      	nop
 801fc8c:	0802956c 	.word	0x0802956c
 801fc90:	0801fbfd 	.word	0x0801fbfd
 801fc94:	20000108 	.word	0x20000108

0801fc98 <std>:
 801fc98:	2300      	movs	r3, #0
 801fc9a:	b510      	push	{r4, lr}
 801fc9c:	4604      	mov	r4, r0
 801fc9e:	e9c0 3300 	strd	r3, r3, [r0]
 801fca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fca6:	6083      	str	r3, [r0, #8]
 801fca8:	8181      	strh	r1, [r0, #12]
 801fcaa:	6643      	str	r3, [r0, #100]	; 0x64
 801fcac:	81c2      	strh	r2, [r0, #14]
 801fcae:	6183      	str	r3, [r0, #24]
 801fcb0:	4619      	mov	r1, r3
 801fcb2:	2208      	movs	r2, #8
 801fcb4:	305c      	adds	r0, #92	; 0x5c
 801fcb6:	f000 fc7f 	bl	80205b8 <memset>
 801fcba:	4b05      	ldr	r3, [pc, #20]	; (801fcd0 <std+0x38>)
 801fcbc:	6263      	str	r3, [r4, #36]	; 0x24
 801fcbe:	4b05      	ldr	r3, [pc, #20]	; (801fcd4 <std+0x3c>)
 801fcc0:	62a3      	str	r3, [r4, #40]	; 0x28
 801fcc2:	4b05      	ldr	r3, [pc, #20]	; (801fcd8 <std+0x40>)
 801fcc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fcc6:	4b05      	ldr	r3, [pc, #20]	; (801fcdc <std+0x44>)
 801fcc8:	6224      	str	r4, [r4, #32]
 801fcca:	6323      	str	r3, [r4, #48]	; 0x30
 801fccc:	bd10      	pop	{r4, pc}
 801fcce:	bf00      	nop
 801fcd0:	08020961 	.word	0x08020961
 801fcd4:	08020987 	.word	0x08020987
 801fcd8:	080209bf 	.word	0x080209bf
 801fcdc:	080209e3 	.word	0x080209e3

0801fce0 <_cleanup_r>:
 801fce0:	4901      	ldr	r1, [pc, #4]	; (801fce8 <_cleanup_r+0x8>)
 801fce2:	f000 ba89 	b.w	80201f8 <_fwalk_reent>
 801fce6:	bf00      	nop
 801fce8:	0801fbfd 	.word	0x0801fbfd

0801fcec <__sfmoreglue>:
 801fcec:	b570      	push	{r4, r5, r6, lr}
 801fcee:	1e4a      	subs	r2, r1, #1
 801fcf0:	2568      	movs	r5, #104	; 0x68
 801fcf2:	4355      	muls	r5, r2
 801fcf4:	460e      	mov	r6, r1
 801fcf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801fcfa:	f000 fcc5 	bl	8020688 <_malloc_r>
 801fcfe:	4604      	mov	r4, r0
 801fd00:	b140      	cbz	r0, 801fd14 <__sfmoreglue+0x28>
 801fd02:	2100      	movs	r1, #0
 801fd04:	e9c0 1600 	strd	r1, r6, [r0]
 801fd08:	300c      	adds	r0, #12
 801fd0a:	60a0      	str	r0, [r4, #8]
 801fd0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801fd10:	f000 fc52 	bl	80205b8 <memset>
 801fd14:	4620      	mov	r0, r4
 801fd16:	bd70      	pop	{r4, r5, r6, pc}

0801fd18 <__sfp_lock_acquire>:
 801fd18:	4801      	ldr	r0, [pc, #4]	; (801fd20 <__sfp_lock_acquire+0x8>)
 801fd1a:	f000 bbc8 	b.w	80204ae <__retarget_lock_acquire_recursive>
 801fd1e:	bf00      	nop
 801fd20:	20000f90 	.word	0x20000f90

0801fd24 <__sfp_lock_release>:
 801fd24:	4801      	ldr	r0, [pc, #4]	; (801fd2c <__sfp_lock_release+0x8>)
 801fd26:	f000 bbc4 	b.w	80204b2 <__retarget_lock_release_recursive>
 801fd2a:	bf00      	nop
 801fd2c:	20000f90 	.word	0x20000f90

0801fd30 <__sinit_lock_acquire>:
 801fd30:	4801      	ldr	r0, [pc, #4]	; (801fd38 <__sinit_lock_acquire+0x8>)
 801fd32:	f000 bbbc 	b.w	80204ae <__retarget_lock_acquire_recursive>
 801fd36:	bf00      	nop
 801fd38:	20000f8b 	.word	0x20000f8b

0801fd3c <__sinit_lock_release>:
 801fd3c:	4801      	ldr	r0, [pc, #4]	; (801fd44 <__sinit_lock_release+0x8>)
 801fd3e:	f000 bbb8 	b.w	80204b2 <__retarget_lock_release_recursive>
 801fd42:	bf00      	nop
 801fd44:	20000f8b 	.word	0x20000f8b

0801fd48 <__sinit>:
 801fd48:	b510      	push	{r4, lr}
 801fd4a:	4604      	mov	r4, r0
 801fd4c:	f7ff fff0 	bl	801fd30 <__sinit_lock_acquire>
 801fd50:	69a3      	ldr	r3, [r4, #24]
 801fd52:	b11b      	cbz	r3, 801fd5c <__sinit+0x14>
 801fd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd58:	f7ff bff0 	b.w	801fd3c <__sinit_lock_release>
 801fd5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801fd60:	6523      	str	r3, [r4, #80]	; 0x50
 801fd62:	4b13      	ldr	r3, [pc, #76]	; (801fdb0 <__sinit+0x68>)
 801fd64:	4a13      	ldr	r2, [pc, #76]	; (801fdb4 <__sinit+0x6c>)
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	62a2      	str	r2, [r4, #40]	; 0x28
 801fd6a:	42a3      	cmp	r3, r4
 801fd6c:	bf04      	itt	eq
 801fd6e:	2301      	moveq	r3, #1
 801fd70:	61a3      	streq	r3, [r4, #24]
 801fd72:	4620      	mov	r0, r4
 801fd74:	f000 f820 	bl	801fdb8 <__sfp>
 801fd78:	6060      	str	r0, [r4, #4]
 801fd7a:	4620      	mov	r0, r4
 801fd7c:	f000 f81c 	bl	801fdb8 <__sfp>
 801fd80:	60a0      	str	r0, [r4, #8]
 801fd82:	4620      	mov	r0, r4
 801fd84:	f000 f818 	bl	801fdb8 <__sfp>
 801fd88:	2200      	movs	r2, #0
 801fd8a:	60e0      	str	r0, [r4, #12]
 801fd8c:	2104      	movs	r1, #4
 801fd8e:	6860      	ldr	r0, [r4, #4]
 801fd90:	f7ff ff82 	bl	801fc98 <std>
 801fd94:	68a0      	ldr	r0, [r4, #8]
 801fd96:	2201      	movs	r2, #1
 801fd98:	2109      	movs	r1, #9
 801fd9a:	f7ff ff7d 	bl	801fc98 <std>
 801fd9e:	68e0      	ldr	r0, [r4, #12]
 801fda0:	2202      	movs	r2, #2
 801fda2:	2112      	movs	r1, #18
 801fda4:	f7ff ff78 	bl	801fc98 <std>
 801fda8:	2301      	movs	r3, #1
 801fdaa:	61a3      	str	r3, [r4, #24]
 801fdac:	e7d2      	b.n	801fd54 <__sinit+0xc>
 801fdae:	bf00      	nop
 801fdb0:	0802956c 	.word	0x0802956c
 801fdb4:	0801fce1 	.word	0x0801fce1

0801fdb8 <__sfp>:
 801fdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fdba:	4607      	mov	r7, r0
 801fdbc:	f7ff ffac 	bl	801fd18 <__sfp_lock_acquire>
 801fdc0:	4b1e      	ldr	r3, [pc, #120]	; (801fe3c <__sfp+0x84>)
 801fdc2:	681e      	ldr	r6, [r3, #0]
 801fdc4:	69b3      	ldr	r3, [r6, #24]
 801fdc6:	b913      	cbnz	r3, 801fdce <__sfp+0x16>
 801fdc8:	4630      	mov	r0, r6
 801fdca:	f7ff ffbd 	bl	801fd48 <__sinit>
 801fdce:	3648      	adds	r6, #72	; 0x48
 801fdd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fdd4:	3b01      	subs	r3, #1
 801fdd6:	d503      	bpl.n	801fde0 <__sfp+0x28>
 801fdd8:	6833      	ldr	r3, [r6, #0]
 801fdda:	b30b      	cbz	r3, 801fe20 <__sfp+0x68>
 801fddc:	6836      	ldr	r6, [r6, #0]
 801fdde:	e7f7      	b.n	801fdd0 <__sfp+0x18>
 801fde0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801fde4:	b9d5      	cbnz	r5, 801fe1c <__sfp+0x64>
 801fde6:	4b16      	ldr	r3, [pc, #88]	; (801fe40 <__sfp+0x88>)
 801fde8:	60e3      	str	r3, [r4, #12]
 801fdea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fdee:	6665      	str	r5, [r4, #100]	; 0x64
 801fdf0:	f000 fb5a 	bl	80204a8 <__retarget_lock_init_recursive>
 801fdf4:	f7ff ff96 	bl	801fd24 <__sfp_lock_release>
 801fdf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801fdfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801fe00:	6025      	str	r5, [r4, #0]
 801fe02:	61a5      	str	r5, [r4, #24]
 801fe04:	2208      	movs	r2, #8
 801fe06:	4629      	mov	r1, r5
 801fe08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801fe0c:	f000 fbd4 	bl	80205b8 <memset>
 801fe10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801fe14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801fe18:	4620      	mov	r0, r4
 801fe1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe1c:	3468      	adds	r4, #104	; 0x68
 801fe1e:	e7d9      	b.n	801fdd4 <__sfp+0x1c>
 801fe20:	2104      	movs	r1, #4
 801fe22:	4638      	mov	r0, r7
 801fe24:	f7ff ff62 	bl	801fcec <__sfmoreglue>
 801fe28:	4604      	mov	r4, r0
 801fe2a:	6030      	str	r0, [r6, #0]
 801fe2c:	2800      	cmp	r0, #0
 801fe2e:	d1d5      	bne.n	801fddc <__sfp+0x24>
 801fe30:	f7ff ff78 	bl	801fd24 <__sfp_lock_release>
 801fe34:	230c      	movs	r3, #12
 801fe36:	603b      	str	r3, [r7, #0]
 801fe38:	e7ee      	b.n	801fe18 <__sfp+0x60>
 801fe3a:	bf00      	nop
 801fe3c:	0802956c 	.word	0x0802956c
 801fe40:	ffff0001 	.word	0xffff0001

0801fe44 <_fopen_r>:
 801fe44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fe46:	460f      	mov	r7, r1
 801fe48:	4611      	mov	r1, r2
 801fe4a:	aa01      	add	r2, sp, #4
 801fe4c:	4605      	mov	r5, r0
 801fe4e:	f002 f82f 	bl	8021eb0 <__sflags>
 801fe52:	4606      	mov	r6, r0
 801fe54:	b918      	cbnz	r0, 801fe5e <_fopen_r+0x1a>
 801fe56:	2400      	movs	r4, #0
 801fe58:	4620      	mov	r0, r4
 801fe5a:	b003      	add	sp, #12
 801fe5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe5e:	4628      	mov	r0, r5
 801fe60:	f7ff ffaa 	bl	801fdb8 <__sfp>
 801fe64:	4604      	mov	r4, r0
 801fe66:	2800      	cmp	r0, #0
 801fe68:	d0f5      	beq.n	801fe56 <_fopen_r+0x12>
 801fe6a:	4639      	mov	r1, r7
 801fe6c:	9a01      	ldr	r2, [sp, #4]
 801fe6e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801fe72:	4628      	mov	r0, r5
 801fe74:	f000 fc62 	bl	802073c <_open_r>
 801fe78:	1e07      	subs	r7, r0, #0
 801fe7a:	da09      	bge.n	801fe90 <_fopen_r+0x4c>
 801fe7c:	2500      	movs	r5, #0
 801fe7e:	f7ff ff4b 	bl	801fd18 <__sfp_lock_acquire>
 801fe82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fe84:	81a5      	strh	r5, [r4, #12]
 801fe86:	f000 fb10 	bl	80204aa <__retarget_lock_close_recursive>
 801fe8a:	f7ff ff4b 	bl	801fd24 <__sfp_lock_release>
 801fe8e:	e7e2      	b.n	801fe56 <_fopen_r+0x12>
 801fe90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fe92:	07db      	lsls	r3, r3, #31
 801fe94:	d405      	bmi.n	801fea2 <_fopen_r+0x5e>
 801fe96:	89a3      	ldrh	r3, [r4, #12]
 801fe98:	0598      	lsls	r0, r3, #22
 801fe9a:	d402      	bmi.n	801fea2 <_fopen_r+0x5e>
 801fe9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fe9e:	f000 fb06 	bl	80204ae <__retarget_lock_acquire_recursive>
 801fea2:	4b0e      	ldr	r3, [pc, #56]	; (801fedc <_fopen_r+0x98>)
 801fea4:	6263      	str	r3, [r4, #36]	; 0x24
 801fea6:	4b0e      	ldr	r3, [pc, #56]	; (801fee0 <_fopen_r+0x9c>)
 801fea8:	62a3      	str	r3, [r4, #40]	; 0x28
 801feaa:	4b0e      	ldr	r3, [pc, #56]	; (801fee4 <_fopen_r+0xa0>)
 801feac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801feae:	05f1      	lsls	r1, r6, #23
 801feb0:	4b0d      	ldr	r3, [pc, #52]	; (801fee8 <_fopen_r+0xa4>)
 801feb2:	81e7      	strh	r7, [r4, #14]
 801feb4:	81a6      	strh	r6, [r4, #12]
 801feb6:	6224      	str	r4, [r4, #32]
 801feb8:	6323      	str	r3, [r4, #48]	; 0x30
 801feba:	d505      	bpl.n	801fec8 <_fopen_r+0x84>
 801febc:	2302      	movs	r3, #2
 801febe:	2200      	movs	r2, #0
 801fec0:	4621      	mov	r1, r4
 801fec2:	4628      	mov	r0, r5
 801fec4:	f000 f888 	bl	801ffd8 <_fseek_r>
 801fec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801feca:	07da      	lsls	r2, r3, #31
 801fecc:	d4c4      	bmi.n	801fe58 <_fopen_r+0x14>
 801fece:	89a3      	ldrh	r3, [r4, #12]
 801fed0:	059b      	lsls	r3, r3, #22
 801fed2:	d4c1      	bmi.n	801fe58 <_fopen_r+0x14>
 801fed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fed6:	f000 faec 	bl	80204b2 <__retarget_lock_release_recursive>
 801feda:	e7bd      	b.n	801fe58 <_fopen_r+0x14>
 801fedc:	08020961 	.word	0x08020961
 801fee0:	08020987 	.word	0x08020987
 801fee4:	080209bf 	.word	0x080209bf
 801fee8:	080209e3 	.word	0x080209e3

0801feec <fopen>:
 801feec:	4b02      	ldr	r3, [pc, #8]	; (801fef8 <fopen+0xc>)
 801feee:	460a      	mov	r2, r1
 801fef0:	4601      	mov	r1, r0
 801fef2:	6818      	ldr	r0, [r3, #0]
 801fef4:	f7ff bfa6 	b.w	801fe44 <_fopen_r>
 801fef8:	20000108 	.word	0x20000108

0801fefc <_fputs_r>:
 801fefc:	b570      	push	{r4, r5, r6, lr}
 801fefe:	460e      	mov	r6, r1
 801ff00:	4614      	mov	r4, r2
 801ff02:	4605      	mov	r5, r0
 801ff04:	b118      	cbz	r0, 801ff0e <_fputs_r+0x12>
 801ff06:	6983      	ldr	r3, [r0, #24]
 801ff08:	b90b      	cbnz	r3, 801ff0e <_fputs_r+0x12>
 801ff0a:	f7ff ff1d 	bl	801fd48 <__sinit>
 801ff0e:	4b2b      	ldr	r3, [pc, #172]	; (801ffbc <_fputs_r+0xc0>)
 801ff10:	429c      	cmp	r4, r3
 801ff12:	d11e      	bne.n	801ff52 <_fputs_r+0x56>
 801ff14:	686c      	ldr	r4, [r5, #4]
 801ff16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ff18:	07da      	lsls	r2, r3, #31
 801ff1a:	d405      	bmi.n	801ff28 <_fputs_r+0x2c>
 801ff1c:	89a3      	ldrh	r3, [r4, #12]
 801ff1e:	059b      	lsls	r3, r3, #22
 801ff20:	d402      	bmi.n	801ff28 <_fputs_r+0x2c>
 801ff22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ff24:	f000 fac3 	bl	80204ae <__retarget_lock_acquire_recursive>
 801ff28:	89a3      	ldrh	r3, [r4, #12]
 801ff2a:	0718      	lsls	r0, r3, #28
 801ff2c:	d51b      	bpl.n	801ff66 <_fputs_r+0x6a>
 801ff2e:	6923      	ldr	r3, [r4, #16]
 801ff30:	b1cb      	cbz	r3, 801ff66 <_fputs_r+0x6a>
 801ff32:	3e01      	subs	r6, #1
 801ff34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ff38:	bb39      	cbnz	r1, 801ff8a <_fputs_r+0x8e>
 801ff3a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801ff3c:	f015 0501 	ands.w	r5, r5, #1
 801ff40:	d139      	bne.n	801ffb6 <_fputs_r+0xba>
 801ff42:	89a3      	ldrh	r3, [r4, #12]
 801ff44:	0599      	lsls	r1, r3, #22
 801ff46:	d402      	bmi.n	801ff4e <_fputs_r+0x52>
 801ff48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ff4a:	f000 fab2 	bl	80204b2 <__retarget_lock_release_recursive>
 801ff4e:	4628      	mov	r0, r5
 801ff50:	bd70      	pop	{r4, r5, r6, pc}
 801ff52:	4b1b      	ldr	r3, [pc, #108]	; (801ffc0 <_fputs_r+0xc4>)
 801ff54:	429c      	cmp	r4, r3
 801ff56:	d101      	bne.n	801ff5c <_fputs_r+0x60>
 801ff58:	68ac      	ldr	r4, [r5, #8]
 801ff5a:	e7dc      	b.n	801ff16 <_fputs_r+0x1a>
 801ff5c:	4b19      	ldr	r3, [pc, #100]	; (801ffc4 <_fputs_r+0xc8>)
 801ff5e:	429c      	cmp	r4, r3
 801ff60:	bf08      	it	eq
 801ff62:	68ec      	ldreq	r4, [r5, #12]
 801ff64:	e7d7      	b.n	801ff16 <_fputs_r+0x1a>
 801ff66:	4621      	mov	r1, r4
 801ff68:	4628      	mov	r0, r5
 801ff6a:	f001 fe9f 	bl	8021cac <__swsetup_r>
 801ff6e:	2800      	cmp	r0, #0
 801ff70:	d0df      	beq.n	801ff32 <_fputs_r+0x36>
 801ff72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ff74:	07da      	lsls	r2, r3, #31
 801ff76:	d405      	bmi.n	801ff84 <_fputs_r+0x88>
 801ff78:	89a3      	ldrh	r3, [r4, #12]
 801ff7a:	059b      	lsls	r3, r3, #22
 801ff7c:	d402      	bmi.n	801ff84 <_fputs_r+0x88>
 801ff7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ff80:	f000 fa97 	bl	80204b2 <__retarget_lock_release_recursive>
 801ff84:	f04f 35ff 	mov.w	r5, #4294967295
 801ff88:	e7e1      	b.n	801ff4e <_fputs_r+0x52>
 801ff8a:	68a3      	ldr	r3, [r4, #8]
 801ff8c:	3b01      	subs	r3, #1
 801ff8e:	2b00      	cmp	r3, #0
 801ff90:	60a3      	str	r3, [r4, #8]
 801ff92:	da04      	bge.n	801ff9e <_fputs_r+0xa2>
 801ff94:	69a2      	ldr	r2, [r4, #24]
 801ff96:	4293      	cmp	r3, r2
 801ff98:	db06      	blt.n	801ffa8 <_fputs_r+0xac>
 801ff9a:	290a      	cmp	r1, #10
 801ff9c:	d004      	beq.n	801ffa8 <_fputs_r+0xac>
 801ff9e:	6823      	ldr	r3, [r4, #0]
 801ffa0:	1c5a      	adds	r2, r3, #1
 801ffa2:	6022      	str	r2, [r4, #0]
 801ffa4:	7019      	strb	r1, [r3, #0]
 801ffa6:	e7c5      	b.n	801ff34 <_fputs_r+0x38>
 801ffa8:	4622      	mov	r2, r4
 801ffaa:	4628      	mov	r0, r5
 801ffac:	f001 fe1a 	bl	8021be4 <__swbuf_r>
 801ffb0:	3001      	adds	r0, #1
 801ffb2:	d1bf      	bne.n	801ff34 <_fputs_r+0x38>
 801ffb4:	e7dd      	b.n	801ff72 <_fputs_r+0x76>
 801ffb6:	460d      	mov	r5, r1
 801ffb8:	e7c9      	b.n	801ff4e <_fputs_r+0x52>
 801ffba:	bf00      	nop
 801ffbc:	0802952c 	.word	0x0802952c
 801ffc0:	0802954c 	.word	0x0802954c
 801ffc4:	0802950c 	.word	0x0802950c

0801ffc8 <fputs>:
 801ffc8:	4b02      	ldr	r3, [pc, #8]	; (801ffd4 <fputs+0xc>)
 801ffca:	460a      	mov	r2, r1
 801ffcc:	4601      	mov	r1, r0
 801ffce:	6818      	ldr	r0, [r3, #0]
 801ffd0:	f7ff bf94 	b.w	801fefc <_fputs_r>
 801ffd4:	20000108 	.word	0x20000108

0801ffd8 <_fseek_r>:
 801ffd8:	f000 b800 	b.w	801ffdc <_fseeko_r>

0801ffdc <_fseeko_r>:
 801ffdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffe0:	460c      	mov	r4, r1
 801ffe2:	4617      	mov	r7, r2
 801ffe4:	461e      	mov	r6, r3
 801ffe6:	4605      	mov	r5, r0
 801ffe8:	b118      	cbz	r0, 801fff2 <_fseeko_r+0x16>
 801ffea:	6983      	ldr	r3, [r0, #24]
 801ffec:	b90b      	cbnz	r3, 801fff2 <_fseeko_r+0x16>
 801ffee:	f7ff feab 	bl	801fd48 <__sinit>
 801fff2:	4b44      	ldr	r3, [pc, #272]	; (8020104 <_fseeko_r+0x128>)
 801fff4:	429c      	cmp	r4, r3
 801fff6:	d122      	bne.n	802003e <_fseeko_r+0x62>
 801fff8:	686c      	ldr	r4, [r5, #4]
 801fffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fffc:	07d9      	lsls	r1, r3, #31
 801fffe:	d405      	bmi.n	802000c <_fseeko_r+0x30>
 8020000:	89a3      	ldrh	r3, [r4, #12]
 8020002:	059a      	lsls	r2, r3, #22
 8020004:	d402      	bmi.n	802000c <_fseeko_r+0x30>
 8020006:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020008:	f000 fa51 	bl	80204ae <__retarget_lock_acquire_recursive>
 802000c:	89a3      	ldrh	r3, [r4, #12]
 802000e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8020012:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8020016:	d103      	bne.n	8020020 <_fseeko_r+0x44>
 8020018:	4621      	mov	r1, r4
 802001a:	4628      	mov	r0, r5
 802001c:	f7ff fdee 	bl	801fbfc <_fflush_r>
 8020020:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8020024:	f1b8 0f00 	cmp.w	r8, #0
 8020028:	d113      	bne.n	8020052 <_fseeko_r+0x76>
 802002a:	231d      	movs	r3, #29
 802002c:	602b      	str	r3, [r5, #0]
 802002e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020030:	07d9      	lsls	r1, r3, #31
 8020032:	d55d      	bpl.n	80200f0 <_fseeko_r+0x114>
 8020034:	f04f 36ff 	mov.w	r6, #4294967295
 8020038:	4630      	mov	r0, r6
 802003a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802003e:	4b32      	ldr	r3, [pc, #200]	; (8020108 <_fseeko_r+0x12c>)
 8020040:	429c      	cmp	r4, r3
 8020042:	d101      	bne.n	8020048 <_fseeko_r+0x6c>
 8020044:	68ac      	ldr	r4, [r5, #8]
 8020046:	e7d8      	b.n	801fffa <_fseeko_r+0x1e>
 8020048:	4b30      	ldr	r3, [pc, #192]	; (802010c <_fseeko_r+0x130>)
 802004a:	429c      	cmp	r4, r3
 802004c:	bf08      	it	eq
 802004e:	68ec      	ldreq	r4, [r5, #12]
 8020050:	e7d3      	b.n	801fffa <_fseeko_r+0x1e>
 8020052:	2e01      	cmp	r6, #1
 8020054:	d036      	beq.n	80200c4 <_fseeko_r+0xe8>
 8020056:	f036 0302 	bics.w	r3, r6, #2
 802005a:	d147      	bne.n	80200ec <_fseeko_r+0x110>
 802005c:	6923      	ldr	r3, [r4, #16]
 802005e:	b91b      	cbnz	r3, 8020068 <_fseeko_r+0x8c>
 8020060:	4621      	mov	r1, r4
 8020062:	4628      	mov	r0, r5
 8020064:	f000 fa4a 	bl	80204fc <__smakebuf_r>
 8020068:	4621      	mov	r1, r4
 802006a:	4628      	mov	r0, r5
 802006c:	f7ff fdc6 	bl	801fbfc <_fflush_r>
 8020070:	2800      	cmp	r0, #0
 8020072:	d1dc      	bne.n	802002e <_fseeko_r+0x52>
 8020074:	6a21      	ldr	r1, [r4, #32]
 8020076:	4633      	mov	r3, r6
 8020078:	463a      	mov	r2, r7
 802007a:	4628      	mov	r0, r5
 802007c:	47c0      	blx	r8
 802007e:	3001      	adds	r0, #1
 8020080:	d0d5      	beq.n	802002e <_fseeko_r+0x52>
 8020082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020084:	b141      	cbz	r1, 8020098 <_fseeko_r+0xbc>
 8020086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802008a:	4299      	cmp	r1, r3
 802008c:	d002      	beq.n	8020094 <_fseeko_r+0xb8>
 802008e:	4628      	mov	r0, r5
 8020090:	f000 faaa 	bl	80205e8 <_free_r>
 8020094:	2300      	movs	r3, #0
 8020096:	6363      	str	r3, [r4, #52]	; 0x34
 8020098:	6923      	ldr	r3, [r4, #16]
 802009a:	6023      	str	r3, [r4, #0]
 802009c:	89a3      	ldrh	r3, [r4, #12]
 802009e:	2500      	movs	r5, #0
 80200a0:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80200a4:	6065      	str	r5, [r4, #4]
 80200a6:	81a3      	strh	r3, [r4, #12]
 80200a8:	2208      	movs	r2, #8
 80200aa:	4629      	mov	r1, r5
 80200ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80200b0:	f000 fa82 	bl	80205b8 <memset>
 80200b4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80200b6:	f016 0601 	ands.w	r6, r6, #1
 80200ba:	d120      	bne.n	80200fe <_fseeko_r+0x122>
 80200bc:	89a3      	ldrh	r3, [r4, #12]
 80200be:	059b      	lsls	r3, r3, #22
 80200c0:	d4ba      	bmi.n	8020038 <_fseeko_r+0x5c>
 80200c2:	e00c      	b.n	80200de <_fseeko_r+0x102>
 80200c4:	4621      	mov	r1, r4
 80200c6:	4628      	mov	r0, r5
 80200c8:	f000 f822 	bl	8020110 <_ftello_r>
 80200cc:	1c43      	adds	r3, r0, #1
 80200ce:	4606      	mov	r6, r0
 80200d0:	d109      	bne.n	80200e6 <_fseeko_r+0x10a>
 80200d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80200d4:	07dd      	lsls	r5, r3, #31
 80200d6:	d4ad      	bmi.n	8020034 <_fseeko_r+0x58>
 80200d8:	89a3      	ldrh	r3, [r4, #12]
 80200da:	0598      	lsls	r0, r3, #22
 80200dc:	d4aa      	bmi.n	8020034 <_fseeko_r+0x58>
 80200de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80200e0:	f000 f9e7 	bl	80204b2 <__retarget_lock_release_recursive>
 80200e4:	e7a8      	b.n	8020038 <_fseeko_r+0x5c>
 80200e6:	4407      	add	r7, r0
 80200e8:	2600      	movs	r6, #0
 80200ea:	e7b7      	b.n	802005c <_fseeko_r+0x80>
 80200ec:	2316      	movs	r3, #22
 80200ee:	e79d      	b.n	802002c <_fseeko_r+0x50>
 80200f0:	89a3      	ldrh	r3, [r4, #12]
 80200f2:	059a      	lsls	r2, r3, #22
 80200f4:	d49e      	bmi.n	8020034 <_fseeko_r+0x58>
 80200f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80200f8:	f000 f9db 	bl	80204b2 <__retarget_lock_release_recursive>
 80200fc:	e79a      	b.n	8020034 <_fseeko_r+0x58>
 80200fe:	462e      	mov	r6, r5
 8020100:	e79a      	b.n	8020038 <_fseeko_r+0x5c>
 8020102:	bf00      	nop
 8020104:	0802952c 	.word	0x0802952c
 8020108:	0802954c 	.word	0x0802954c
 802010c:	0802950c 	.word	0x0802950c

08020110 <_ftello_r>:
 8020110:	b570      	push	{r4, r5, r6, lr}
 8020112:	460c      	mov	r4, r1
 8020114:	4605      	mov	r5, r0
 8020116:	b118      	cbz	r0, 8020120 <_ftello_r+0x10>
 8020118:	6983      	ldr	r3, [r0, #24]
 802011a:	b90b      	cbnz	r3, 8020120 <_ftello_r+0x10>
 802011c:	f7ff fe14 	bl	801fd48 <__sinit>
 8020120:	4b32      	ldr	r3, [pc, #200]	; (80201ec <_ftello_r+0xdc>)
 8020122:	429c      	cmp	r4, r3
 8020124:	d114      	bne.n	8020150 <_ftello_r+0x40>
 8020126:	686c      	ldr	r4, [r5, #4]
 8020128:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802012a:	07da      	lsls	r2, r3, #31
 802012c:	d405      	bmi.n	802013a <_ftello_r+0x2a>
 802012e:	89a3      	ldrh	r3, [r4, #12]
 8020130:	059b      	lsls	r3, r3, #22
 8020132:	d402      	bmi.n	802013a <_ftello_r+0x2a>
 8020134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020136:	f000 f9ba 	bl	80204ae <__retarget_lock_acquire_recursive>
 802013a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802013c:	b9ce      	cbnz	r6, 8020172 <_ftello_r+0x62>
 802013e:	231d      	movs	r3, #29
 8020140:	602b      	str	r3, [r5, #0]
 8020142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020144:	07de      	lsls	r6, r3, #31
 8020146:	d50d      	bpl.n	8020164 <_ftello_r+0x54>
 8020148:	f04f 35ff 	mov.w	r5, #4294967295
 802014c:	4628      	mov	r0, r5
 802014e:	bd70      	pop	{r4, r5, r6, pc}
 8020150:	4b27      	ldr	r3, [pc, #156]	; (80201f0 <_ftello_r+0xe0>)
 8020152:	429c      	cmp	r4, r3
 8020154:	d101      	bne.n	802015a <_ftello_r+0x4a>
 8020156:	68ac      	ldr	r4, [r5, #8]
 8020158:	e7e6      	b.n	8020128 <_ftello_r+0x18>
 802015a:	4b26      	ldr	r3, [pc, #152]	; (80201f4 <_ftello_r+0xe4>)
 802015c:	429c      	cmp	r4, r3
 802015e:	bf08      	it	eq
 8020160:	68ec      	ldreq	r4, [r5, #12]
 8020162:	e7e1      	b.n	8020128 <_ftello_r+0x18>
 8020164:	89a3      	ldrh	r3, [r4, #12]
 8020166:	059d      	lsls	r5, r3, #22
 8020168:	d4ee      	bmi.n	8020148 <_ftello_r+0x38>
 802016a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802016c:	f000 f9a1 	bl	80204b2 <__retarget_lock_release_recursive>
 8020170:	e7ea      	b.n	8020148 <_ftello_r+0x38>
 8020172:	89a2      	ldrh	r2, [r4, #12]
 8020174:	f002 030c 	and.w	r3, r2, #12
 8020178:	2b08      	cmp	r3, #8
 802017a:	d119      	bne.n	80201b0 <_ftello_r+0xa0>
 802017c:	6823      	ldr	r3, [r4, #0]
 802017e:	b1bb      	cbz	r3, 80201b0 <_ftello_r+0xa0>
 8020180:	6921      	ldr	r1, [r4, #16]
 8020182:	1a5b      	subs	r3, r3, r1
 8020184:	2b00      	cmp	r3, #0
 8020186:	dd13      	ble.n	80201b0 <_ftello_r+0xa0>
 8020188:	05d0      	lsls	r0, r2, #23
 802018a:	d511      	bpl.n	80201b0 <_ftello_r+0xa0>
 802018c:	2302      	movs	r3, #2
 802018e:	2200      	movs	r2, #0
 8020190:	6a21      	ldr	r1, [r4, #32]
 8020192:	4628      	mov	r0, r5
 8020194:	47b0      	blx	r6
 8020196:	1c41      	adds	r1, r0, #1
 8020198:	4605      	mov	r5, r0
 802019a:	d10d      	bne.n	80201b8 <_ftello_r+0xa8>
 802019c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802019e:	07da      	lsls	r2, r3, #31
 80201a0:	d4d2      	bmi.n	8020148 <_ftello_r+0x38>
 80201a2:	89a3      	ldrh	r3, [r4, #12]
 80201a4:	059b      	lsls	r3, r3, #22
 80201a6:	d4cf      	bmi.n	8020148 <_ftello_r+0x38>
 80201a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201aa:	f000 f982 	bl	80204b2 <__retarget_lock_release_recursive>
 80201ae:	e7cd      	b.n	802014c <_ftello_r+0x3c>
 80201b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80201b4:	d00f      	beq.n	80201d6 <_ftello_r+0xc6>
 80201b6:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80201b8:	89a2      	ldrh	r2, [r4, #12]
 80201ba:	0756      	lsls	r6, r2, #29
 80201bc:	d50d      	bpl.n	80201da <_ftello_r+0xca>
 80201be:	6863      	ldr	r3, [r4, #4]
 80201c0:	1aed      	subs	r5, r5, r3
 80201c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80201c4:	b10b      	cbz	r3, 80201ca <_ftello_r+0xba>
 80201c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80201c8:	1aed      	subs	r5, r5, r3
 80201ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80201cc:	07d9      	lsls	r1, r3, #31
 80201ce:	d4bd      	bmi.n	802014c <_ftello_r+0x3c>
 80201d0:	0593      	lsls	r3, r2, #22
 80201d2:	d4bb      	bmi.n	802014c <_ftello_r+0x3c>
 80201d4:	e7e8      	b.n	80201a8 <_ftello_r+0x98>
 80201d6:	2301      	movs	r3, #1
 80201d8:	e7da      	b.n	8020190 <_ftello_r+0x80>
 80201da:	0710      	lsls	r0, r2, #28
 80201dc:	d5f5      	bpl.n	80201ca <_ftello_r+0xba>
 80201de:	6823      	ldr	r3, [r4, #0]
 80201e0:	2b00      	cmp	r3, #0
 80201e2:	d0f2      	beq.n	80201ca <_ftello_r+0xba>
 80201e4:	6921      	ldr	r1, [r4, #16]
 80201e6:	1a5b      	subs	r3, r3, r1
 80201e8:	441d      	add	r5, r3
 80201ea:	e7ee      	b.n	80201ca <_ftello_r+0xba>
 80201ec:	0802952c 	.word	0x0802952c
 80201f0:	0802954c 	.word	0x0802954c
 80201f4:	0802950c 	.word	0x0802950c

080201f8 <_fwalk_reent>:
 80201f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80201fc:	4606      	mov	r6, r0
 80201fe:	4688      	mov	r8, r1
 8020200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020204:	2700      	movs	r7, #0
 8020206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802020a:	f1b9 0901 	subs.w	r9, r9, #1
 802020e:	d505      	bpl.n	802021c <_fwalk_reent+0x24>
 8020210:	6824      	ldr	r4, [r4, #0]
 8020212:	2c00      	cmp	r4, #0
 8020214:	d1f7      	bne.n	8020206 <_fwalk_reent+0xe>
 8020216:	4638      	mov	r0, r7
 8020218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802021c:	89ab      	ldrh	r3, [r5, #12]
 802021e:	2b01      	cmp	r3, #1
 8020220:	d907      	bls.n	8020232 <_fwalk_reent+0x3a>
 8020222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020226:	3301      	adds	r3, #1
 8020228:	d003      	beq.n	8020232 <_fwalk_reent+0x3a>
 802022a:	4629      	mov	r1, r5
 802022c:	4630      	mov	r0, r6
 802022e:	47c0      	blx	r8
 8020230:	4307      	orrs	r7, r0
 8020232:	3568      	adds	r5, #104	; 0x68
 8020234:	e7e9      	b.n	802020a <_fwalk_reent+0x12>
	...

08020238 <__libc_init_array>:
 8020238:	b570      	push	{r4, r5, r6, lr}
 802023a:	4d0d      	ldr	r5, [pc, #52]	; (8020270 <__libc_init_array+0x38>)
 802023c:	4c0d      	ldr	r4, [pc, #52]	; (8020274 <__libc_init_array+0x3c>)
 802023e:	1b64      	subs	r4, r4, r5
 8020240:	10a4      	asrs	r4, r4, #2
 8020242:	2600      	movs	r6, #0
 8020244:	42a6      	cmp	r6, r4
 8020246:	d109      	bne.n	802025c <__libc_init_array+0x24>
 8020248:	4d0b      	ldr	r5, [pc, #44]	; (8020278 <__libc_init_array+0x40>)
 802024a:	4c0c      	ldr	r4, [pc, #48]	; (802027c <__libc_init_array+0x44>)
 802024c:	f003 f8d6 	bl	80233fc <_init>
 8020250:	1b64      	subs	r4, r4, r5
 8020252:	10a4      	asrs	r4, r4, #2
 8020254:	2600      	movs	r6, #0
 8020256:	42a6      	cmp	r6, r4
 8020258:	d105      	bne.n	8020266 <__libc_init_array+0x2e>
 802025a:	bd70      	pop	{r4, r5, r6, pc}
 802025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020260:	4798      	blx	r3
 8020262:	3601      	adds	r6, #1
 8020264:	e7ee      	b.n	8020244 <__libc_init_array+0xc>
 8020266:	f855 3b04 	ldr.w	r3, [r5], #4
 802026a:	4798      	blx	r3
 802026c:	3601      	adds	r6, #1
 802026e:	e7f2      	b.n	8020256 <__libc_init_array+0x1e>
 8020270:	08029b04 	.word	0x08029b04
 8020274:	08029b04 	.word	0x08029b04
 8020278:	08029b04 	.word	0x08029b04
 802027c:	08029b14 	.word	0x08029b14

08020280 <localtime>:
 8020280:	b538      	push	{r3, r4, r5, lr}
 8020282:	4b0b      	ldr	r3, [pc, #44]	; (80202b0 <localtime+0x30>)
 8020284:	681d      	ldr	r5, [r3, #0]
 8020286:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8020288:	4604      	mov	r4, r0
 802028a:	b953      	cbnz	r3, 80202a2 <localtime+0x22>
 802028c:	2024      	movs	r0, #36	; 0x24
 802028e:	f000 f975 	bl	802057c <malloc>
 8020292:	4602      	mov	r2, r0
 8020294:	63e8      	str	r0, [r5, #60]	; 0x3c
 8020296:	b920      	cbnz	r0, 80202a2 <localtime+0x22>
 8020298:	4b06      	ldr	r3, [pc, #24]	; (80202b4 <localtime+0x34>)
 802029a:	4807      	ldr	r0, [pc, #28]	; (80202b8 <localtime+0x38>)
 802029c:	2132      	movs	r1, #50	; 0x32
 802029e:	f001 fdd9 	bl	8021e54 <__assert_func>
 80202a2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80202a4:	4620      	mov	r0, r4
 80202a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80202aa:	f000 b807 	b.w	80202bc <localtime_r>
 80202ae:	bf00      	nop
 80202b0:	20000108 	.word	0x20000108
 80202b4:	08029570 	.word	0x08029570
 80202b8:	08029587 	.word	0x08029587

080202bc <localtime_r>:
 80202bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80202c0:	4607      	mov	r7, r0
 80202c2:	9101      	str	r1, [sp, #4]
 80202c4:	f001 fe90 	bl	8021fe8 <__gettzinfo>
 80202c8:	9901      	ldr	r1, [sp, #4]
 80202ca:	4680      	mov	r8, r0
 80202cc:	4638      	mov	r0, r7
 80202ce:	f001 fe8f 	bl	8021ff0 <gmtime_r>
 80202d2:	6943      	ldr	r3, [r0, #20]
 80202d4:	079a      	lsls	r2, r3, #30
 80202d6:	4604      	mov	r4, r0
 80202d8:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80202dc:	d105      	bne.n	80202ea <localtime_r+0x2e>
 80202de:	2264      	movs	r2, #100	; 0x64
 80202e0:	fb96 f3f2 	sdiv	r3, r6, r2
 80202e4:	fb02 6313 	mls	r3, r2, r3, r6
 80202e8:	bb7b      	cbnz	r3, 802034a <localtime_r+0x8e>
 80202ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80202ee:	fb96 f5f3 	sdiv	r5, r6, r3
 80202f2:	fb03 6515 	mls	r5, r3, r5, r6
 80202f6:	fab5 f585 	clz	r5, r5
 80202fa:	096d      	lsrs	r5, r5, #5
 80202fc:	4b68      	ldr	r3, [pc, #416]	; (80204a0 <localtime_r+0x1e4>)
 80202fe:	2230      	movs	r2, #48	; 0x30
 8020300:	fb02 3505 	mla	r5, r2, r5, r3
 8020304:	f001 faa6 	bl	8021854 <__tz_lock>
 8020308:	f001 fab0 	bl	802186c <_tzset_unlocked>
 802030c:	4b65      	ldr	r3, [pc, #404]	; (80204a4 <localtime_r+0x1e8>)
 802030e:	681b      	ldr	r3, [r3, #0]
 8020310:	b353      	cbz	r3, 8020368 <localtime_r+0xac>
 8020312:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8020316:	42b3      	cmp	r3, r6
 8020318:	d119      	bne.n	802034e <localtime_r+0x92>
 802031a:	f8d8 1000 	ldr.w	r1, [r8]
 802031e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020322:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8020326:	b9d1      	cbnz	r1, 802035e <localtime_r+0xa2>
 8020328:	4296      	cmp	r6, r2
 802032a:	eb77 0303 	sbcs.w	r3, r7, r3
 802032e:	da23      	bge.n	8020378 <localtime_r+0xbc>
 8020330:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8020334:	4296      	cmp	r6, r2
 8020336:	eb77 0303 	sbcs.w	r3, r7, r3
 802033a:	bfb4      	ite	lt
 802033c:	2301      	movlt	r3, #1
 802033e:	2300      	movge	r3, #0
 8020340:	6223      	str	r3, [r4, #32]
 8020342:	db1b      	blt.n	802037c <localtime_r+0xc0>
 8020344:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8020348:	e01a      	b.n	8020380 <localtime_r+0xc4>
 802034a:	2501      	movs	r5, #1
 802034c:	e7d6      	b.n	80202fc <localtime_r+0x40>
 802034e:	4630      	mov	r0, r6
 8020350:	f001 f9d8 	bl	8021704 <__tzcalc_limits>
 8020354:	2800      	cmp	r0, #0
 8020356:	d1e0      	bne.n	802031a <localtime_r+0x5e>
 8020358:	f04f 33ff 	mov.w	r3, #4294967295
 802035c:	e004      	b.n	8020368 <localtime_r+0xac>
 802035e:	4296      	cmp	r6, r2
 8020360:	eb77 0303 	sbcs.w	r3, r7, r3
 8020364:	da02      	bge.n	802036c <localtime_r+0xb0>
 8020366:	2300      	movs	r3, #0
 8020368:	6223      	str	r3, [r4, #32]
 802036a:	e7eb      	b.n	8020344 <localtime_r+0x88>
 802036c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8020370:	4296      	cmp	r6, r2
 8020372:	eb77 0303 	sbcs.w	r3, r7, r3
 8020376:	daf6      	bge.n	8020366 <localtime_r+0xaa>
 8020378:	2301      	movs	r3, #1
 802037a:	6223      	str	r3, [r4, #32]
 802037c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8020380:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8020384:	203c      	movs	r0, #60	; 0x3c
 8020386:	fb91 f6f3 	sdiv	r6, r1, r3
 802038a:	fb03 1316 	mls	r3, r3, r6, r1
 802038e:	6861      	ldr	r1, [r4, #4]
 8020390:	fb93 f2f0 	sdiv	r2, r3, r0
 8020394:	fb00 3012 	mls	r0, r0, r2, r3
 8020398:	6823      	ldr	r3, [r4, #0]
 802039a:	1a89      	subs	r1, r1, r2
 802039c:	68a2      	ldr	r2, [r4, #8]
 802039e:	6061      	str	r1, [r4, #4]
 80203a0:	1a1b      	subs	r3, r3, r0
 80203a2:	1b92      	subs	r2, r2, r6
 80203a4:	2b3b      	cmp	r3, #59	; 0x3b
 80203a6:	6023      	str	r3, [r4, #0]
 80203a8:	60a2      	str	r2, [r4, #8]
 80203aa:	dd35      	ble.n	8020418 <localtime_r+0x15c>
 80203ac:	3101      	adds	r1, #1
 80203ae:	6061      	str	r1, [r4, #4]
 80203b0:	3b3c      	subs	r3, #60	; 0x3c
 80203b2:	6023      	str	r3, [r4, #0]
 80203b4:	6863      	ldr	r3, [r4, #4]
 80203b6:	2b3b      	cmp	r3, #59	; 0x3b
 80203b8:	dd34      	ble.n	8020424 <localtime_r+0x168>
 80203ba:	3201      	adds	r2, #1
 80203bc:	60a2      	str	r2, [r4, #8]
 80203be:	3b3c      	subs	r3, #60	; 0x3c
 80203c0:	6063      	str	r3, [r4, #4]
 80203c2:	68a3      	ldr	r3, [r4, #8]
 80203c4:	2b17      	cmp	r3, #23
 80203c6:	dd33      	ble.n	8020430 <localtime_r+0x174>
 80203c8:	69e2      	ldr	r2, [r4, #28]
 80203ca:	3201      	adds	r2, #1
 80203cc:	61e2      	str	r2, [r4, #28]
 80203ce:	69a2      	ldr	r2, [r4, #24]
 80203d0:	3201      	adds	r2, #1
 80203d2:	2a06      	cmp	r2, #6
 80203d4:	bfc8      	it	gt
 80203d6:	2200      	movgt	r2, #0
 80203d8:	61a2      	str	r2, [r4, #24]
 80203da:	68e2      	ldr	r2, [r4, #12]
 80203dc:	3b18      	subs	r3, #24
 80203de:	3201      	adds	r2, #1
 80203e0:	60a3      	str	r3, [r4, #8]
 80203e2:	6923      	ldr	r3, [r4, #16]
 80203e4:	60e2      	str	r2, [r4, #12]
 80203e6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80203ea:	428a      	cmp	r2, r1
 80203ec:	dd0e      	ble.n	802040c <localtime_r+0x150>
 80203ee:	2b0b      	cmp	r3, #11
 80203f0:	eba2 0201 	sub.w	r2, r2, r1
 80203f4:	60e2      	str	r2, [r4, #12]
 80203f6:	f103 0201 	add.w	r2, r3, #1
 80203fa:	bf09      	itett	eq
 80203fc:	6963      	ldreq	r3, [r4, #20]
 80203fe:	6122      	strne	r2, [r4, #16]
 8020400:	2200      	moveq	r2, #0
 8020402:	3301      	addeq	r3, #1
 8020404:	bf02      	ittt	eq
 8020406:	6122      	streq	r2, [r4, #16]
 8020408:	6163      	streq	r3, [r4, #20]
 802040a:	61e2      	streq	r2, [r4, #28]
 802040c:	f001 fa28 	bl	8021860 <__tz_unlock>
 8020410:	4620      	mov	r0, r4
 8020412:	b002      	add	sp, #8
 8020414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020418:	2b00      	cmp	r3, #0
 802041a:	dacb      	bge.n	80203b4 <localtime_r+0xf8>
 802041c:	3901      	subs	r1, #1
 802041e:	6061      	str	r1, [r4, #4]
 8020420:	333c      	adds	r3, #60	; 0x3c
 8020422:	e7c6      	b.n	80203b2 <localtime_r+0xf6>
 8020424:	2b00      	cmp	r3, #0
 8020426:	dacc      	bge.n	80203c2 <localtime_r+0x106>
 8020428:	3a01      	subs	r2, #1
 802042a:	60a2      	str	r2, [r4, #8]
 802042c:	333c      	adds	r3, #60	; 0x3c
 802042e:	e7c7      	b.n	80203c0 <localtime_r+0x104>
 8020430:	2b00      	cmp	r3, #0
 8020432:	daeb      	bge.n	802040c <localtime_r+0x150>
 8020434:	69e2      	ldr	r2, [r4, #28]
 8020436:	3a01      	subs	r2, #1
 8020438:	61e2      	str	r2, [r4, #28]
 802043a:	69a2      	ldr	r2, [r4, #24]
 802043c:	3a01      	subs	r2, #1
 802043e:	bf48      	it	mi
 8020440:	2206      	movmi	r2, #6
 8020442:	61a2      	str	r2, [r4, #24]
 8020444:	68e2      	ldr	r2, [r4, #12]
 8020446:	3318      	adds	r3, #24
 8020448:	3a01      	subs	r2, #1
 802044a:	60e2      	str	r2, [r4, #12]
 802044c:	60a3      	str	r3, [r4, #8]
 802044e:	2a00      	cmp	r2, #0
 8020450:	d1dc      	bne.n	802040c <localtime_r+0x150>
 8020452:	6923      	ldr	r3, [r4, #16]
 8020454:	3b01      	subs	r3, #1
 8020456:	d405      	bmi.n	8020464 <localtime_r+0x1a8>
 8020458:	6123      	str	r3, [r4, #16]
 802045a:	6923      	ldr	r3, [r4, #16]
 802045c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020460:	60e3      	str	r3, [r4, #12]
 8020462:	e7d3      	b.n	802040c <localtime_r+0x150>
 8020464:	230b      	movs	r3, #11
 8020466:	6123      	str	r3, [r4, #16]
 8020468:	6963      	ldr	r3, [r4, #20]
 802046a:	1e5a      	subs	r2, r3, #1
 802046c:	6162      	str	r2, [r4, #20]
 802046e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8020472:	0793      	lsls	r3, r2, #30
 8020474:	d105      	bne.n	8020482 <localtime_r+0x1c6>
 8020476:	2164      	movs	r1, #100	; 0x64
 8020478:	fb92 f3f1 	sdiv	r3, r2, r1
 802047c:	fb01 2313 	mls	r3, r1, r3, r2
 8020480:	b963      	cbnz	r3, 802049c <localtime_r+0x1e0>
 8020482:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020486:	fb92 f3f1 	sdiv	r3, r2, r1
 802048a:	fb01 2313 	mls	r3, r1, r3, r2
 802048e:	fab3 f383 	clz	r3, r3
 8020492:	095b      	lsrs	r3, r3, #5
 8020494:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8020498:	61e3      	str	r3, [r4, #28]
 802049a:	e7de      	b.n	802045a <localtime_r+0x19e>
 802049c:	2301      	movs	r3, #1
 802049e:	e7f9      	b.n	8020494 <localtime_r+0x1d8>
 80204a0:	080295e8 	.word	0x080295e8
 80204a4:	20000eec 	.word	0x20000eec

080204a8 <__retarget_lock_init_recursive>:
 80204a8:	4770      	bx	lr

080204aa <__retarget_lock_close_recursive>:
 80204aa:	4770      	bx	lr

080204ac <__retarget_lock_acquire>:
 80204ac:	4770      	bx	lr

080204ae <__retarget_lock_acquire_recursive>:
 80204ae:	4770      	bx	lr

080204b0 <__retarget_lock_release>:
 80204b0:	4770      	bx	lr

080204b2 <__retarget_lock_release_recursive>:
 80204b2:	4770      	bx	lr

080204b4 <__swhatbuf_r>:
 80204b4:	b570      	push	{r4, r5, r6, lr}
 80204b6:	460e      	mov	r6, r1
 80204b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204bc:	2900      	cmp	r1, #0
 80204be:	b096      	sub	sp, #88	; 0x58
 80204c0:	4614      	mov	r4, r2
 80204c2:	461d      	mov	r5, r3
 80204c4:	da07      	bge.n	80204d6 <__swhatbuf_r+0x22>
 80204c6:	2300      	movs	r3, #0
 80204c8:	602b      	str	r3, [r5, #0]
 80204ca:	89b3      	ldrh	r3, [r6, #12]
 80204cc:	061a      	lsls	r2, r3, #24
 80204ce:	d410      	bmi.n	80204f2 <__swhatbuf_r+0x3e>
 80204d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80204d4:	e00e      	b.n	80204f4 <__swhatbuf_r+0x40>
 80204d6:	466a      	mov	r2, sp
 80204d8:	f001 fd32 	bl	8021f40 <_fstat_r>
 80204dc:	2800      	cmp	r0, #0
 80204de:	dbf2      	blt.n	80204c6 <__swhatbuf_r+0x12>
 80204e0:	9a01      	ldr	r2, [sp, #4]
 80204e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80204e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80204ea:	425a      	negs	r2, r3
 80204ec:	415a      	adcs	r2, r3
 80204ee:	602a      	str	r2, [r5, #0]
 80204f0:	e7ee      	b.n	80204d0 <__swhatbuf_r+0x1c>
 80204f2:	2340      	movs	r3, #64	; 0x40
 80204f4:	2000      	movs	r0, #0
 80204f6:	6023      	str	r3, [r4, #0]
 80204f8:	b016      	add	sp, #88	; 0x58
 80204fa:	bd70      	pop	{r4, r5, r6, pc}

080204fc <__smakebuf_r>:
 80204fc:	898b      	ldrh	r3, [r1, #12]
 80204fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020500:	079d      	lsls	r5, r3, #30
 8020502:	4606      	mov	r6, r0
 8020504:	460c      	mov	r4, r1
 8020506:	d507      	bpl.n	8020518 <__smakebuf_r+0x1c>
 8020508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802050c:	6023      	str	r3, [r4, #0]
 802050e:	6123      	str	r3, [r4, #16]
 8020510:	2301      	movs	r3, #1
 8020512:	6163      	str	r3, [r4, #20]
 8020514:	b002      	add	sp, #8
 8020516:	bd70      	pop	{r4, r5, r6, pc}
 8020518:	ab01      	add	r3, sp, #4
 802051a:	466a      	mov	r2, sp
 802051c:	f7ff ffca 	bl	80204b4 <__swhatbuf_r>
 8020520:	9900      	ldr	r1, [sp, #0]
 8020522:	4605      	mov	r5, r0
 8020524:	4630      	mov	r0, r6
 8020526:	f000 f8af 	bl	8020688 <_malloc_r>
 802052a:	b948      	cbnz	r0, 8020540 <__smakebuf_r+0x44>
 802052c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020530:	059a      	lsls	r2, r3, #22
 8020532:	d4ef      	bmi.n	8020514 <__smakebuf_r+0x18>
 8020534:	f023 0303 	bic.w	r3, r3, #3
 8020538:	f043 0302 	orr.w	r3, r3, #2
 802053c:	81a3      	strh	r3, [r4, #12]
 802053e:	e7e3      	b.n	8020508 <__smakebuf_r+0xc>
 8020540:	4b0d      	ldr	r3, [pc, #52]	; (8020578 <__smakebuf_r+0x7c>)
 8020542:	62b3      	str	r3, [r6, #40]	; 0x28
 8020544:	89a3      	ldrh	r3, [r4, #12]
 8020546:	6020      	str	r0, [r4, #0]
 8020548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802054c:	81a3      	strh	r3, [r4, #12]
 802054e:	9b00      	ldr	r3, [sp, #0]
 8020550:	6163      	str	r3, [r4, #20]
 8020552:	9b01      	ldr	r3, [sp, #4]
 8020554:	6120      	str	r0, [r4, #16]
 8020556:	b15b      	cbz	r3, 8020570 <__smakebuf_r+0x74>
 8020558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802055c:	4630      	mov	r0, r6
 802055e:	f001 fdf7 	bl	8022150 <_isatty_r>
 8020562:	b128      	cbz	r0, 8020570 <__smakebuf_r+0x74>
 8020564:	89a3      	ldrh	r3, [r4, #12]
 8020566:	f023 0303 	bic.w	r3, r3, #3
 802056a:	f043 0301 	orr.w	r3, r3, #1
 802056e:	81a3      	strh	r3, [r4, #12]
 8020570:	89a0      	ldrh	r0, [r4, #12]
 8020572:	4305      	orrs	r5, r0
 8020574:	81a5      	strh	r5, [r4, #12]
 8020576:	e7cd      	b.n	8020514 <__smakebuf_r+0x18>
 8020578:	0801fce1 	.word	0x0801fce1

0802057c <malloc>:
 802057c:	4b02      	ldr	r3, [pc, #8]	; (8020588 <malloc+0xc>)
 802057e:	4601      	mov	r1, r0
 8020580:	6818      	ldr	r0, [r3, #0]
 8020582:	f000 b881 	b.w	8020688 <_malloc_r>
 8020586:	bf00      	nop
 8020588:	20000108 	.word	0x20000108

0802058c <free>:
 802058c:	4b02      	ldr	r3, [pc, #8]	; (8020598 <free+0xc>)
 802058e:	4601      	mov	r1, r0
 8020590:	6818      	ldr	r0, [r3, #0]
 8020592:	f000 b829 	b.w	80205e8 <_free_r>
 8020596:	bf00      	nop
 8020598:	20000108 	.word	0x20000108

0802059c <memcpy>:
 802059c:	440a      	add	r2, r1
 802059e:	4291      	cmp	r1, r2
 80205a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80205a4:	d100      	bne.n	80205a8 <memcpy+0xc>
 80205a6:	4770      	bx	lr
 80205a8:	b510      	push	{r4, lr}
 80205aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80205ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80205b2:	4291      	cmp	r1, r2
 80205b4:	d1f9      	bne.n	80205aa <memcpy+0xe>
 80205b6:	bd10      	pop	{r4, pc}

080205b8 <memset>:
 80205b8:	4402      	add	r2, r0
 80205ba:	4603      	mov	r3, r0
 80205bc:	4293      	cmp	r3, r2
 80205be:	d100      	bne.n	80205c2 <memset+0xa>
 80205c0:	4770      	bx	lr
 80205c2:	f803 1b01 	strb.w	r1, [r3], #1
 80205c6:	e7f9      	b.n	80205bc <memset+0x4>

080205c8 <_calloc_r>:
 80205c8:	b513      	push	{r0, r1, r4, lr}
 80205ca:	434a      	muls	r2, r1
 80205cc:	4611      	mov	r1, r2
 80205ce:	9201      	str	r2, [sp, #4]
 80205d0:	f000 f85a 	bl	8020688 <_malloc_r>
 80205d4:	4604      	mov	r4, r0
 80205d6:	b118      	cbz	r0, 80205e0 <_calloc_r+0x18>
 80205d8:	9a01      	ldr	r2, [sp, #4]
 80205da:	2100      	movs	r1, #0
 80205dc:	f7ff ffec 	bl	80205b8 <memset>
 80205e0:	4620      	mov	r0, r4
 80205e2:	b002      	add	sp, #8
 80205e4:	bd10      	pop	{r4, pc}
	...

080205e8 <_free_r>:
 80205e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80205ea:	2900      	cmp	r1, #0
 80205ec:	d048      	beq.n	8020680 <_free_r+0x98>
 80205ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80205f2:	9001      	str	r0, [sp, #4]
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	f1a1 0404 	sub.w	r4, r1, #4
 80205fa:	bfb8      	it	lt
 80205fc:	18e4      	addlt	r4, r4, r3
 80205fe:	f001 fddf 	bl	80221c0 <__malloc_lock>
 8020602:	4a20      	ldr	r2, [pc, #128]	; (8020684 <_free_r+0x9c>)
 8020604:	9801      	ldr	r0, [sp, #4]
 8020606:	6813      	ldr	r3, [r2, #0]
 8020608:	4615      	mov	r5, r2
 802060a:	b933      	cbnz	r3, 802061a <_free_r+0x32>
 802060c:	6063      	str	r3, [r4, #4]
 802060e:	6014      	str	r4, [r2, #0]
 8020610:	b003      	add	sp, #12
 8020612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020616:	f001 bdd9 	b.w	80221cc <__malloc_unlock>
 802061a:	42a3      	cmp	r3, r4
 802061c:	d90b      	bls.n	8020636 <_free_r+0x4e>
 802061e:	6821      	ldr	r1, [r4, #0]
 8020620:	1862      	adds	r2, r4, r1
 8020622:	4293      	cmp	r3, r2
 8020624:	bf04      	itt	eq
 8020626:	681a      	ldreq	r2, [r3, #0]
 8020628:	685b      	ldreq	r3, [r3, #4]
 802062a:	6063      	str	r3, [r4, #4]
 802062c:	bf04      	itt	eq
 802062e:	1852      	addeq	r2, r2, r1
 8020630:	6022      	streq	r2, [r4, #0]
 8020632:	602c      	str	r4, [r5, #0]
 8020634:	e7ec      	b.n	8020610 <_free_r+0x28>
 8020636:	461a      	mov	r2, r3
 8020638:	685b      	ldr	r3, [r3, #4]
 802063a:	b10b      	cbz	r3, 8020640 <_free_r+0x58>
 802063c:	42a3      	cmp	r3, r4
 802063e:	d9fa      	bls.n	8020636 <_free_r+0x4e>
 8020640:	6811      	ldr	r1, [r2, #0]
 8020642:	1855      	adds	r5, r2, r1
 8020644:	42a5      	cmp	r5, r4
 8020646:	d10b      	bne.n	8020660 <_free_r+0x78>
 8020648:	6824      	ldr	r4, [r4, #0]
 802064a:	4421      	add	r1, r4
 802064c:	1854      	adds	r4, r2, r1
 802064e:	42a3      	cmp	r3, r4
 8020650:	6011      	str	r1, [r2, #0]
 8020652:	d1dd      	bne.n	8020610 <_free_r+0x28>
 8020654:	681c      	ldr	r4, [r3, #0]
 8020656:	685b      	ldr	r3, [r3, #4]
 8020658:	6053      	str	r3, [r2, #4]
 802065a:	4421      	add	r1, r4
 802065c:	6011      	str	r1, [r2, #0]
 802065e:	e7d7      	b.n	8020610 <_free_r+0x28>
 8020660:	d902      	bls.n	8020668 <_free_r+0x80>
 8020662:	230c      	movs	r3, #12
 8020664:	6003      	str	r3, [r0, #0]
 8020666:	e7d3      	b.n	8020610 <_free_r+0x28>
 8020668:	6825      	ldr	r5, [r4, #0]
 802066a:	1961      	adds	r1, r4, r5
 802066c:	428b      	cmp	r3, r1
 802066e:	bf04      	itt	eq
 8020670:	6819      	ldreq	r1, [r3, #0]
 8020672:	685b      	ldreq	r3, [r3, #4]
 8020674:	6063      	str	r3, [r4, #4]
 8020676:	bf04      	itt	eq
 8020678:	1949      	addeq	r1, r1, r5
 802067a:	6021      	streq	r1, [r4, #0]
 802067c:	6054      	str	r4, [r2, #4]
 802067e:	e7c7      	b.n	8020610 <_free_r+0x28>
 8020680:	b003      	add	sp, #12
 8020682:	bd30      	pop	{r4, r5, pc}
 8020684:	20000ec8 	.word	0x20000ec8

08020688 <_malloc_r>:
 8020688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802068a:	1ccd      	adds	r5, r1, #3
 802068c:	f025 0503 	bic.w	r5, r5, #3
 8020690:	3508      	adds	r5, #8
 8020692:	2d0c      	cmp	r5, #12
 8020694:	bf38      	it	cc
 8020696:	250c      	movcc	r5, #12
 8020698:	2d00      	cmp	r5, #0
 802069a:	4606      	mov	r6, r0
 802069c:	db01      	blt.n	80206a2 <_malloc_r+0x1a>
 802069e:	42a9      	cmp	r1, r5
 80206a0:	d903      	bls.n	80206aa <_malloc_r+0x22>
 80206a2:	230c      	movs	r3, #12
 80206a4:	6033      	str	r3, [r6, #0]
 80206a6:	2000      	movs	r0, #0
 80206a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80206aa:	f001 fd89 	bl	80221c0 <__malloc_lock>
 80206ae:	4921      	ldr	r1, [pc, #132]	; (8020734 <_malloc_r+0xac>)
 80206b0:	680a      	ldr	r2, [r1, #0]
 80206b2:	4614      	mov	r4, r2
 80206b4:	b99c      	cbnz	r4, 80206de <_malloc_r+0x56>
 80206b6:	4f20      	ldr	r7, [pc, #128]	; (8020738 <_malloc_r+0xb0>)
 80206b8:	683b      	ldr	r3, [r7, #0]
 80206ba:	b923      	cbnz	r3, 80206c6 <_malloc_r+0x3e>
 80206bc:	4621      	mov	r1, r4
 80206be:	4630      	mov	r0, r6
 80206c0:	f000 f8da 	bl	8020878 <_sbrk_r>
 80206c4:	6038      	str	r0, [r7, #0]
 80206c6:	4629      	mov	r1, r5
 80206c8:	4630      	mov	r0, r6
 80206ca:	f000 f8d5 	bl	8020878 <_sbrk_r>
 80206ce:	1c43      	adds	r3, r0, #1
 80206d0:	d123      	bne.n	802071a <_malloc_r+0x92>
 80206d2:	230c      	movs	r3, #12
 80206d4:	6033      	str	r3, [r6, #0]
 80206d6:	4630      	mov	r0, r6
 80206d8:	f001 fd78 	bl	80221cc <__malloc_unlock>
 80206dc:	e7e3      	b.n	80206a6 <_malloc_r+0x1e>
 80206de:	6823      	ldr	r3, [r4, #0]
 80206e0:	1b5b      	subs	r3, r3, r5
 80206e2:	d417      	bmi.n	8020714 <_malloc_r+0x8c>
 80206e4:	2b0b      	cmp	r3, #11
 80206e6:	d903      	bls.n	80206f0 <_malloc_r+0x68>
 80206e8:	6023      	str	r3, [r4, #0]
 80206ea:	441c      	add	r4, r3
 80206ec:	6025      	str	r5, [r4, #0]
 80206ee:	e004      	b.n	80206fa <_malloc_r+0x72>
 80206f0:	6863      	ldr	r3, [r4, #4]
 80206f2:	42a2      	cmp	r2, r4
 80206f4:	bf0c      	ite	eq
 80206f6:	600b      	streq	r3, [r1, #0]
 80206f8:	6053      	strne	r3, [r2, #4]
 80206fa:	4630      	mov	r0, r6
 80206fc:	f001 fd66 	bl	80221cc <__malloc_unlock>
 8020700:	f104 000b 	add.w	r0, r4, #11
 8020704:	1d23      	adds	r3, r4, #4
 8020706:	f020 0007 	bic.w	r0, r0, #7
 802070a:	1ac2      	subs	r2, r0, r3
 802070c:	d0cc      	beq.n	80206a8 <_malloc_r+0x20>
 802070e:	1a1b      	subs	r3, r3, r0
 8020710:	50a3      	str	r3, [r4, r2]
 8020712:	e7c9      	b.n	80206a8 <_malloc_r+0x20>
 8020714:	4622      	mov	r2, r4
 8020716:	6864      	ldr	r4, [r4, #4]
 8020718:	e7cc      	b.n	80206b4 <_malloc_r+0x2c>
 802071a:	1cc4      	adds	r4, r0, #3
 802071c:	f024 0403 	bic.w	r4, r4, #3
 8020720:	42a0      	cmp	r0, r4
 8020722:	d0e3      	beq.n	80206ec <_malloc_r+0x64>
 8020724:	1a21      	subs	r1, r4, r0
 8020726:	4630      	mov	r0, r6
 8020728:	f000 f8a6 	bl	8020878 <_sbrk_r>
 802072c:	3001      	adds	r0, #1
 802072e:	d1dd      	bne.n	80206ec <_malloc_r+0x64>
 8020730:	e7cf      	b.n	80206d2 <_malloc_r+0x4a>
 8020732:	bf00      	nop
 8020734:	20000ec8 	.word	0x20000ec8
 8020738:	20000ecc 	.word	0x20000ecc

0802073c <_open_r>:
 802073c:	b538      	push	{r3, r4, r5, lr}
 802073e:	4d07      	ldr	r5, [pc, #28]	; (802075c <_open_r+0x20>)
 8020740:	4604      	mov	r4, r0
 8020742:	4608      	mov	r0, r1
 8020744:	4611      	mov	r1, r2
 8020746:	2200      	movs	r2, #0
 8020748:	602a      	str	r2, [r5, #0]
 802074a:	461a      	mov	r2, r3
 802074c:	f7e0 fb90 	bl	8000e70 <_open>
 8020750:	1c43      	adds	r3, r0, #1
 8020752:	d102      	bne.n	802075a <_open_r+0x1e>
 8020754:	682b      	ldr	r3, [r5, #0]
 8020756:	b103      	cbz	r3, 802075a <_open_r+0x1e>
 8020758:	6023      	str	r3, [r4, #0]
 802075a:	bd38      	pop	{r3, r4, r5, pc}
 802075c:	20000f94 	.word	0x20000f94

08020760 <putchar>:
 8020760:	4b09      	ldr	r3, [pc, #36]	; (8020788 <putchar+0x28>)
 8020762:	b513      	push	{r0, r1, r4, lr}
 8020764:	681c      	ldr	r4, [r3, #0]
 8020766:	4601      	mov	r1, r0
 8020768:	b134      	cbz	r4, 8020778 <putchar+0x18>
 802076a:	69a3      	ldr	r3, [r4, #24]
 802076c:	b923      	cbnz	r3, 8020778 <putchar+0x18>
 802076e:	9001      	str	r0, [sp, #4]
 8020770:	4620      	mov	r0, r4
 8020772:	f7ff fae9 	bl	801fd48 <__sinit>
 8020776:	9901      	ldr	r1, [sp, #4]
 8020778:	68a2      	ldr	r2, [r4, #8]
 802077a:	4620      	mov	r0, r4
 802077c:	b002      	add	sp, #8
 802077e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020782:	f002 b999 	b.w	8022ab8 <_putc_r>
 8020786:	bf00      	nop
 8020788:	20000108 	.word	0x20000108

0802078c <srand>:
 802078c:	b538      	push	{r3, r4, r5, lr}
 802078e:	4b10      	ldr	r3, [pc, #64]	; (80207d0 <srand+0x44>)
 8020790:	681d      	ldr	r5, [r3, #0]
 8020792:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020794:	4604      	mov	r4, r0
 8020796:	b9b3      	cbnz	r3, 80207c6 <srand+0x3a>
 8020798:	2018      	movs	r0, #24
 802079a:	f7ff feef 	bl	802057c <malloc>
 802079e:	4602      	mov	r2, r0
 80207a0:	63a8      	str	r0, [r5, #56]	; 0x38
 80207a2:	b920      	cbnz	r0, 80207ae <srand+0x22>
 80207a4:	4b0b      	ldr	r3, [pc, #44]	; (80207d4 <srand+0x48>)
 80207a6:	480c      	ldr	r0, [pc, #48]	; (80207d8 <srand+0x4c>)
 80207a8:	2142      	movs	r1, #66	; 0x42
 80207aa:	f001 fb53 	bl	8021e54 <__assert_func>
 80207ae:	490b      	ldr	r1, [pc, #44]	; (80207dc <srand+0x50>)
 80207b0:	4b0b      	ldr	r3, [pc, #44]	; (80207e0 <srand+0x54>)
 80207b2:	e9c0 1300 	strd	r1, r3, [r0]
 80207b6:	4b0b      	ldr	r3, [pc, #44]	; (80207e4 <srand+0x58>)
 80207b8:	6083      	str	r3, [r0, #8]
 80207ba:	230b      	movs	r3, #11
 80207bc:	8183      	strh	r3, [r0, #12]
 80207be:	2100      	movs	r1, #0
 80207c0:	2001      	movs	r0, #1
 80207c2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80207c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80207c8:	2200      	movs	r2, #0
 80207ca:	611c      	str	r4, [r3, #16]
 80207cc:	615a      	str	r2, [r3, #20]
 80207ce:	bd38      	pop	{r3, r4, r5, pc}
 80207d0:	20000108 	.word	0x20000108
 80207d4:	08029570 	.word	0x08029570
 80207d8:	08029648 	.word	0x08029648
 80207dc:	abcd330e 	.word	0xabcd330e
 80207e0:	e66d1234 	.word	0xe66d1234
 80207e4:	0005deec 	.word	0x0005deec

080207e8 <rand>:
 80207e8:	4b17      	ldr	r3, [pc, #92]	; (8020848 <rand+0x60>)
 80207ea:	b510      	push	{r4, lr}
 80207ec:	681c      	ldr	r4, [r3, #0]
 80207ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80207f0:	b9b3      	cbnz	r3, 8020820 <rand+0x38>
 80207f2:	2018      	movs	r0, #24
 80207f4:	f7ff fec2 	bl	802057c <malloc>
 80207f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80207fa:	b928      	cbnz	r0, 8020808 <rand+0x20>
 80207fc:	4602      	mov	r2, r0
 80207fe:	4b13      	ldr	r3, [pc, #76]	; (802084c <rand+0x64>)
 8020800:	4813      	ldr	r0, [pc, #76]	; (8020850 <rand+0x68>)
 8020802:	214e      	movs	r1, #78	; 0x4e
 8020804:	f001 fb26 	bl	8021e54 <__assert_func>
 8020808:	4a12      	ldr	r2, [pc, #72]	; (8020854 <rand+0x6c>)
 802080a:	4b13      	ldr	r3, [pc, #76]	; (8020858 <rand+0x70>)
 802080c:	e9c0 2300 	strd	r2, r3, [r0]
 8020810:	4b12      	ldr	r3, [pc, #72]	; (802085c <rand+0x74>)
 8020812:	6083      	str	r3, [r0, #8]
 8020814:	230b      	movs	r3, #11
 8020816:	8183      	strh	r3, [r0, #12]
 8020818:	2201      	movs	r2, #1
 802081a:	2300      	movs	r3, #0
 802081c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020820:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020822:	480f      	ldr	r0, [pc, #60]	; (8020860 <rand+0x78>)
 8020824:	690a      	ldr	r2, [r1, #16]
 8020826:	694b      	ldr	r3, [r1, #20]
 8020828:	4c0e      	ldr	r4, [pc, #56]	; (8020864 <rand+0x7c>)
 802082a:	4350      	muls	r0, r2
 802082c:	fb04 0003 	mla	r0, r4, r3, r0
 8020830:	fba2 3404 	umull	r3, r4, r2, r4
 8020834:	1c5a      	adds	r2, r3, #1
 8020836:	4404      	add	r4, r0
 8020838:	f144 0000 	adc.w	r0, r4, #0
 802083c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020840:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020844:	bd10      	pop	{r4, pc}
 8020846:	bf00      	nop
 8020848:	20000108 	.word	0x20000108
 802084c:	08029570 	.word	0x08029570
 8020850:	08029648 	.word	0x08029648
 8020854:	abcd330e 	.word	0xabcd330e
 8020858:	e66d1234 	.word	0xe66d1234
 802085c:	0005deec 	.word	0x0005deec
 8020860:	5851f42d 	.word	0x5851f42d
 8020864:	4c957f2d 	.word	0x4c957f2d

08020868 <realloc>:
 8020868:	4b02      	ldr	r3, [pc, #8]	; (8020874 <realloc+0xc>)
 802086a:	460a      	mov	r2, r1
 802086c:	4601      	mov	r1, r0
 802086e:	6818      	ldr	r0, [r3, #0]
 8020870:	f001 bcb2 	b.w	80221d8 <_realloc_r>
 8020874:	20000108 	.word	0x20000108

08020878 <_sbrk_r>:
 8020878:	b538      	push	{r3, r4, r5, lr}
 802087a:	4d06      	ldr	r5, [pc, #24]	; (8020894 <_sbrk_r+0x1c>)
 802087c:	2300      	movs	r3, #0
 802087e:	4604      	mov	r4, r0
 8020880:	4608      	mov	r0, r1
 8020882:	602b      	str	r3, [r5, #0]
 8020884:	f7e0 fb02 	bl	8000e8c <_sbrk>
 8020888:	1c43      	adds	r3, r0, #1
 802088a:	d102      	bne.n	8020892 <_sbrk_r+0x1a>
 802088c:	682b      	ldr	r3, [r5, #0]
 802088e:	b103      	cbz	r3, 8020892 <_sbrk_r+0x1a>
 8020890:	6023      	str	r3, [r4, #0]
 8020892:	bd38      	pop	{r3, r4, r5, pc}
 8020894:	20000f94 	.word	0x20000f94

08020898 <_raise_r>:
 8020898:	291f      	cmp	r1, #31
 802089a:	b538      	push	{r3, r4, r5, lr}
 802089c:	4604      	mov	r4, r0
 802089e:	460d      	mov	r5, r1
 80208a0:	d904      	bls.n	80208ac <_raise_r+0x14>
 80208a2:	2316      	movs	r3, #22
 80208a4:	6003      	str	r3, [r0, #0]
 80208a6:	f04f 30ff 	mov.w	r0, #4294967295
 80208aa:	bd38      	pop	{r3, r4, r5, pc}
 80208ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80208ae:	b112      	cbz	r2, 80208b6 <_raise_r+0x1e>
 80208b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80208b4:	b94b      	cbnz	r3, 80208ca <_raise_r+0x32>
 80208b6:	4620      	mov	r0, r4
 80208b8:	f000 f830 	bl	802091c <_getpid_r>
 80208bc:	462a      	mov	r2, r5
 80208be:	4601      	mov	r1, r0
 80208c0:	4620      	mov	r0, r4
 80208c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80208c6:	f000 b817 	b.w	80208f8 <_kill_r>
 80208ca:	2b01      	cmp	r3, #1
 80208cc:	d00a      	beq.n	80208e4 <_raise_r+0x4c>
 80208ce:	1c59      	adds	r1, r3, #1
 80208d0:	d103      	bne.n	80208da <_raise_r+0x42>
 80208d2:	2316      	movs	r3, #22
 80208d4:	6003      	str	r3, [r0, #0]
 80208d6:	2001      	movs	r0, #1
 80208d8:	e7e7      	b.n	80208aa <_raise_r+0x12>
 80208da:	2400      	movs	r4, #0
 80208dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80208e0:	4628      	mov	r0, r5
 80208e2:	4798      	blx	r3
 80208e4:	2000      	movs	r0, #0
 80208e6:	e7e0      	b.n	80208aa <_raise_r+0x12>

080208e8 <raise>:
 80208e8:	4b02      	ldr	r3, [pc, #8]	; (80208f4 <raise+0xc>)
 80208ea:	4601      	mov	r1, r0
 80208ec:	6818      	ldr	r0, [r3, #0]
 80208ee:	f7ff bfd3 	b.w	8020898 <_raise_r>
 80208f2:	bf00      	nop
 80208f4:	20000108 	.word	0x20000108

080208f8 <_kill_r>:
 80208f8:	b538      	push	{r3, r4, r5, lr}
 80208fa:	4d07      	ldr	r5, [pc, #28]	; (8020918 <_kill_r+0x20>)
 80208fc:	2300      	movs	r3, #0
 80208fe:	4604      	mov	r4, r0
 8020900:	4608      	mov	r0, r1
 8020902:	4611      	mov	r1, r2
 8020904:	602b      	str	r3, [r5, #0]
 8020906:	f7e0 fa2c 	bl	8000d62 <_kill>
 802090a:	1c43      	adds	r3, r0, #1
 802090c:	d102      	bne.n	8020914 <_kill_r+0x1c>
 802090e:	682b      	ldr	r3, [r5, #0]
 8020910:	b103      	cbz	r3, 8020914 <_kill_r+0x1c>
 8020912:	6023      	str	r3, [r4, #0]
 8020914:	bd38      	pop	{r3, r4, r5, pc}
 8020916:	bf00      	nop
 8020918:	20000f94 	.word	0x20000f94

0802091c <_getpid_r>:
 802091c:	f7e0 ba19 	b.w	8000d52 <_getpid>

08020920 <siprintf>:
 8020920:	b40e      	push	{r1, r2, r3}
 8020922:	b500      	push	{lr}
 8020924:	b09c      	sub	sp, #112	; 0x70
 8020926:	ab1d      	add	r3, sp, #116	; 0x74
 8020928:	9002      	str	r0, [sp, #8]
 802092a:	9006      	str	r0, [sp, #24]
 802092c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020930:	4809      	ldr	r0, [pc, #36]	; (8020958 <siprintf+0x38>)
 8020932:	9107      	str	r1, [sp, #28]
 8020934:	9104      	str	r1, [sp, #16]
 8020936:	4909      	ldr	r1, [pc, #36]	; (802095c <siprintf+0x3c>)
 8020938:	f853 2b04 	ldr.w	r2, [r3], #4
 802093c:	9105      	str	r1, [sp, #20]
 802093e:	6800      	ldr	r0, [r0, #0]
 8020940:	9301      	str	r3, [sp, #4]
 8020942:	a902      	add	r1, sp, #8
 8020944:	f001 fcca 	bl	80222dc <_svfiprintf_r>
 8020948:	9b02      	ldr	r3, [sp, #8]
 802094a:	2200      	movs	r2, #0
 802094c:	701a      	strb	r2, [r3, #0]
 802094e:	b01c      	add	sp, #112	; 0x70
 8020950:	f85d eb04 	ldr.w	lr, [sp], #4
 8020954:	b003      	add	sp, #12
 8020956:	4770      	bx	lr
 8020958:	20000108 	.word	0x20000108
 802095c:	ffff0208 	.word	0xffff0208

08020960 <__sread>:
 8020960:	b510      	push	{r4, lr}
 8020962:	460c      	mov	r4, r1
 8020964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020968:	f002 f8ee 	bl	8022b48 <_read_r>
 802096c:	2800      	cmp	r0, #0
 802096e:	bfab      	itete	ge
 8020970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020972:	89a3      	ldrhlt	r3, [r4, #12]
 8020974:	181b      	addge	r3, r3, r0
 8020976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802097a:	bfac      	ite	ge
 802097c:	6563      	strge	r3, [r4, #84]	; 0x54
 802097e:	81a3      	strhlt	r3, [r4, #12]
 8020980:	bd10      	pop	{r4, pc}

08020982 <__seofread>:
 8020982:	2000      	movs	r0, #0
 8020984:	4770      	bx	lr

08020986 <__swrite>:
 8020986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802098a:	461f      	mov	r7, r3
 802098c:	898b      	ldrh	r3, [r1, #12]
 802098e:	05db      	lsls	r3, r3, #23
 8020990:	4605      	mov	r5, r0
 8020992:	460c      	mov	r4, r1
 8020994:	4616      	mov	r6, r2
 8020996:	d505      	bpl.n	80209a4 <__swrite+0x1e>
 8020998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802099c:	2302      	movs	r3, #2
 802099e:	2200      	movs	r2, #0
 80209a0:	f001 fbea 	bl	8022178 <_lseek_r>
 80209a4:	89a3      	ldrh	r3, [r4, #12]
 80209a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80209aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80209ae:	81a3      	strh	r3, [r4, #12]
 80209b0:	4632      	mov	r2, r6
 80209b2:	463b      	mov	r3, r7
 80209b4:	4628      	mov	r0, r5
 80209b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80209ba:	f001 b965 	b.w	8021c88 <_write_r>

080209be <__sseek>:
 80209be:	b510      	push	{r4, lr}
 80209c0:	460c      	mov	r4, r1
 80209c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80209c6:	f001 fbd7 	bl	8022178 <_lseek_r>
 80209ca:	1c43      	adds	r3, r0, #1
 80209cc:	89a3      	ldrh	r3, [r4, #12]
 80209ce:	bf15      	itete	ne
 80209d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80209d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80209d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80209da:	81a3      	strheq	r3, [r4, #12]
 80209dc:	bf18      	it	ne
 80209de:	81a3      	strhne	r3, [r4, #12]
 80209e0:	bd10      	pop	{r4, pc}

080209e2 <__sclose>:
 80209e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80209e6:	f001 ba53 	b.w	8021e90 <_close_r>
	...

080209ec <iso_year_adjust>:
 80209ec:	6941      	ldr	r1, [r0, #20]
 80209ee:	2900      	cmp	r1, #0
 80209f0:	f240 736c 	movw	r3, #1900	; 0x76c
 80209f4:	bfa8      	it	ge
 80209f6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80209fa:	18ca      	adds	r2, r1, r3
 80209fc:	078b      	lsls	r3, r1, #30
 80209fe:	d105      	bne.n	8020a0c <iso_year_adjust+0x20>
 8020a00:	2164      	movs	r1, #100	; 0x64
 8020a02:	fb92 f3f1 	sdiv	r3, r2, r1
 8020a06:	fb01 2313 	mls	r3, r1, r3, r2
 8020a0a:	b9db      	cbnz	r3, 8020a44 <iso_year_adjust+0x58>
 8020a0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020a10:	fb92 f3f1 	sdiv	r3, r2, r1
 8020a14:	fb01 2313 	mls	r3, r1, r3, r2
 8020a18:	fab3 f383 	clz	r3, r3
 8020a1c:	095b      	lsrs	r3, r3, #5
 8020a1e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8020a22:	0040      	lsls	r0, r0, #1
 8020a24:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8020a28:	4418      	add	r0, r3
 8020a2a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8020a2e:	4298      	cmp	r0, r3
 8020a30:	d03a      	beq.n	8020aa8 <iso_year_adjust+0xbc>
 8020a32:	dc21      	bgt.n	8020a78 <iso_year_adjust+0x8c>
 8020a34:	2801      	cmp	r0, #1
 8020a36:	dc1a      	bgt.n	8020a6e <iso_year_adjust+0x82>
 8020a38:	2800      	cmp	r0, #0
 8020a3a:	bfb4      	ite	lt
 8020a3c:	2000      	movlt	r0, #0
 8020a3e:	f04f 30ff 	movge.w	r0, #4294967295
 8020a42:	4770      	bx	lr
 8020a44:	2301      	movs	r3, #1
 8020a46:	e7ea      	b.n	8020a1e <iso_year_adjust+0x32>
 8020a48:	2817      	cmp	r0, #23
 8020a4a:	d813      	bhi.n	8020a74 <iso_year_adjust+0x88>
 8020a4c:	e8df f000 	tbb	[pc, r0]
 8020a50:	0c0c0c0c 	.word	0x0c0c0c0c
 8020a54:	0c0c1212 	.word	0x0c0c1212
 8020a58:	12121212 	.word	0x12121212
 8020a5c:	12121212 	.word	0x12121212
 8020a60:	0c0c1212 	.word	0x0c0c1212
 8020a64:	0c0c1212 	.word	0x0c0c1212
 8020a68:	f04f 30ff 	mov.w	r0, #4294967295
 8020a6c:	4770      	bx	lr
 8020a6e:	380a      	subs	r0, #10
 8020a70:	2817      	cmp	r0, #23
 8020a72:	d9e9      	bls.n	8020a48 <iso_year_adjust+0x5c>
 8020a74:	2000      	movs	r0, #0
 8020a76:	4770      	bx	lr
 8020a78:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8020a7c:	4298      	cmp	r0, r3
 8020a7e:	dc06      	bgt.n	8020a8e <iso_year_adjust+0xa2>
 8020a80:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8020a84:	4298      	cmp	r0, r3
 8020a86:	bfd4      	ite	le
 8020a88:	2000      	movle	r0, #0
 8020a8a:	2001      	movgt	r0, #1
 8020a8c:	4770      	bx	lr
 8020a8e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8020a92:	3802      	subs	r0, #2
 8020a94:	2815      	cmp	r0, #21
 8020a96:	d8ed      	bhi.n	8020a74 <iso_year_adjust+0x88>
 8020a98:	2301      	movs	r3, #1
 8020a9a:	4083      	lsls	r3, r0
 8020a9c:	4803      	ldr	r0, [pc, #12]	; (8020aac <iso_year_adjust+0xc0>)
 8020a9e:	4018      	ands	r0, r3
 8020aa0:	3800      	subs	r0, #0
 8020aa2:	bf18      	it	ne
 8020aa4:	2001      	movne	r0, #1
 8020aa6:	4770      	bx	lr
 8020aa8:	2001      	movs	r0, #1
 8020aaa:	4770      	bx	lr
 8020aac:	002a001f 	.word	0x002a001f

08020ab0 <__strftime>:
 8020ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ab4:	b091      	sub	sp, #68	; 0x44
 8020ab6:	461d      	mov	r5, r3
 8020ab8:	2300      	movs	r3, #0
 8020aba:	4681      	mov	r9, r0
 8020abc:	4688      	mov	r8, r1
 8020abe:	9304      	str	r3, [sp, #16]
 8020ac0:	461c      	mov	r4, r3
 8020ac2:	7813      	ldrb	r3, [r2, #0]
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	f000 84d1 	beq.w	802146c <__strftime+0x9bc>
 8020aca:	2b25      	cmp	r3, #37	; 0x25
 8020acc:	d11b      	bne.n	8020b06 <__strftime+0x56>
 8020ace:	7857      	ldrb	r7, [r2, #1]
 8020ad0:	2f30      	cmp	r7, #48	; 0x30
 8020ad2:	d024      	beq.n	8020b1e <__strftime+0x6e>
 8020ad4:	2f2b      	cmp	r7, #43	; 0x2b
 8020ad6:	d022      	beq.n	8020b1e <__strftime+0x6e>
 8020ad8:	f102 0b01 	add.w	fp, r2, #1
 8020adc:	2700      	movs	r7, #0
 8020ade:	f89b 3000 	ldrb.w	r3, [fp]
 8020ae2:	3b31      	subs	r3, #49	; 0x31
 8020ae4:	2b08      	cmp	r3, #8
 8020ae6:	d81d      	bhi.n	8020b24 <__strftime+0x74>
 8020ae8:	4658      	mov	r0, fp
 8020aea:	220a      	movs	r2, #10
 8020aec:	a908      	add	r1, sp, #32
 8020aee:	f000 fdff 	bl	80216f0 <strtoul>
 8020af2:	f8dd b020 	ldr.w	fp, [sp, #32]
 8020af6:	4606      	mov	r6, r0
 8020af8:	f89b 3000 	ldrb.w	r3, [fp]
 8020afc:	2b45      	cmp	r3, #69	; 0x45
 8020afe:	d113      	bne.n	8020b28 <__strftime+0x78>
 8020b00:	f10b 0b01 	add.w	fp, fp, #1
 8020b04:	e012      	b.n	8020b2c <__strftime+0x7c>
 8020b06:	f108 31ff 	add.w	r1, r8, #4294967295
 8020b0a:	42a1      	cmp	r1, r4
 8020b0c:	d802      	bhi.n	8020b14 <__strftime+0x64>
 8020b0e:	2400      	movs	r4, #0
 8020b10:	f000 bcb2 	b.w	8021478 <__strftime+0x9c8>
 8020b14:	f809 3004 	strb.w	r3, [r9, r4]
 8020b18:	3201      	adds	r2, #1
 8020b1a:	3401      	adds	r4, #1
 8020b1c:	e7d1      	b.n	8020ac2 <__strftime+0x12>
 8020b1e:	f102 0b02 	add.w	fp, r2, #2
 8020b22:	e7dc      	b.n	8020ade <__strftime+0x2e>
 8020b24:	2600      	movs	r6, #0
 8020b26:	e7e7      	b.n	8020af8 <__strftime+0x48>
 8020b28:	2b4f      	cmp	r3, #79	; 0x4f
 8020b2a:	d0e9      	beq.n	8020b00 <__strftime+0x50>
 8020b2c:	f89b 0000 	ldrb.w	r0, [fp]
 8020b30:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8020b34:	2b55      	cmp	r3, #85	; 0x55
 8020b36:	d8ea      	bhi.n	8020b0e <__strftime+0x5e>
 8020b38:	a201      	add	r2, pc, #4	; (adr r2, 8020b40 <__strftime+0x90>)
 8020b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020b3e:	bf00      	nop
 8020b40:	0802145f 	.word	0x0802145f
 8020b44:	08020b0f 	.word	0x08020b0f
 8020b48:	08020b0f 	.word	0x08020b0f
 8020b4c:	08020b0f 	.word	0x08020b0f
 8020b50:	08020b0f 	.word	0x08020b0f
 8020b54:	08020b0f 	.word	0x08020b0f
 8020b58:	08020b0f 	.word	0x08020b0f
 8020b5c:	08020b0f 	.word	0x08020b0f
 8020b60:	08020b0f 	.word	0x08020b0f
 8020b64:	08020b0f 	.word	0x08020b0f
 8020b68:	08020b0f 	.word	0x08020b0f
 8020b6c:	08020b0f 	.word	0x08020b0f
 8020b70:	08020b0f 	.word	0x08020b0f
 8020b74:	08020b0f 	.word	0x08020b0f
 8020b78:	08020b0f 	.word	0x08020b0f
 8020b7c:	08020b0f 	.word	0x08020b0f
 8020b80:	08020b0f 	.word	0x08020b0f
 8020b84:	08020b0f 	.word	0x08020b0f
 8020b88:	08020b0f 	.word	0x08020b0f
 8020b8c:	08020b0f 	.word	0x08020b0f
 8020b90:	08020b0f 	.word	0x08020b0f
 8020b94:	08020b0f 	.word	0x08020b0f
 8020b98:	08020b0f 	.word	0x08020b0f
 8020b9c:	08020b0f 	.word	0x08020b0f
 8020ba0:	08020b0f 	.word	0x08020b0f
 8020ba4:	08020b0f 	.word	0x08020b0f
 8020ba8:	08020b0f 	.word	0x08020b0f
 8020bac:	08020b0f 	.word	0x08020b0f
 8020bb0:	08020cd7 	.word	0x08020cd7
 8020bb4:	08020d31 	.word	0x08020d31
 8020bb8:	08020da7 	.word	0x08020da7
 8020bbc:	08020e41 	.word	0x08020e41
 8020bc0:	08020b0f 	.word	0x08020b0f
 8020bc4:	08020e8d 	.word	0x08020e8d
 8020bc8:	08020f6d 	.word	0x08020f6d
 8020bcc:	0802106f 	.word	0x0802106f
 8020bd0:	0802107d 	.word	0x0802107d
 8020bd4:	08020b0f 	.word	0x08020b0f
 8020bd8:	08020b0f 	.word	0x08020b0f
 8020bdc:	08020b0f 	.word	0x08020b0f
 8020be0:	080210ad 	.word	0x080210ad
 8020be4:	08020b0f 	.word	0x08020b0f
 8020be8:	08020b0f 	.word	0x08020b0f
 8020bec:	080210c5 	.word	0x080210c5
 8020bf0:	08020b0f 	.word	0x08020b0f
 8020bf4:	08021113 	.word	0x08021113
 8020bf8:	08021229 	.word	0x08021229
 8020bfc:	0802123b 	.word	0x0802123b
 8020c00:	08021293 	.word	0x08021293
 8020c04:	080212a3 	.word	0x080212a3
 8020c08:	08021319 	.word	0x08021319
 8020c0c:	08020d9f 	.word	0x08020d9f
 8020c10:	0802134d 	.word	0x0802134d
 8020c14:	0802140b 	.word	0x0802140b
 8020c18:	08020b0f 	.word	0x08020b0f
 8020c1c:	08020b0f 	.word	0x08020b0f
 8020c20:	08020b0f 	.word	0x08020b0f
 8020c24:	08020b0f 	.word	0x08020b0f
 8020c28:	08020b0f 	.word	0x08020b0f
 8020c2c:	08020b0f 	.word	0x08020b0f
 8020c30:	08020c99 	.word	0x08020c99
 8020c34:	08020d05 	.word	0x08020d05
 8020c38:	08020d5f 	.word	0x08020d5f
 8020c3c:	08020e19 	.word	0x08020e19
 8020c40:	08020e19 	.word	0x08020e19
 8020c44:	08020b0f 	.word	0x08020b0f
 8020c48:	08020ed5 	.word	0x08020ed5
 8020c4c:	08020d05 	.word	0x08020d05
 8020c50:	08020b0f 	.word	0x08020b0f
 8020c54:	0802109f 	.word	0x0802109f
 8020c58:	0802106f 	.word	0x0802106f
 8020c5c:	0802107d 	.word	0x0802107d
 8020c60:	080210a7 	.word	0x080210a7
 8020c64:	080210b1 	.word	0x080210b1
 8020c68:	08020b0f 	.word	0x08020b0f
 8020c6c:	080210c5 	.word	0x080210c5
 8020c70:	08020b0f 	.word	0x08020b0f
 8020c74:	08020d8f 	.word	0x08020d8f
 8020c78:	08021129 	.word	0x08021129
 8020c7c:	0802122d 	.word	0x0802122d
 8020c80:	08021275 	.word	0x08021275
 8020c84:	08020b0f 	.word	0x08020b0f
 8020c88:	08021309 	.word	0x08021309
 8020c8c:	08020d97 	.word	0x08020d97
 8020c90:	08021331 	.word	0x08021331
 8020c94:	0802139d 	.word	0x0802139d
 8020c98:	69ab      	ldr	r3, [r5, #24]
 8020c9a:	4aa7      	ldr	r2, [pc, #668]	; (8020f38 <__strftime+0x488>)
 8020c9c:	3318      	adds	r3, #24
 8020c9e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020ca2:	4630      	mov	r0, r6
 8020ca4:	f7df faca 	bl	800023c <strlen>
 8020ca8:	3e01      	subs	r6, #1
 8020caa:	4420      	add	r0, r4
 8020cac:	f108 33ff 	add.w	r3, r8, #4294967295
 8020cb0:	42a0      	cmp	r0, r4
 8020cb2:	d107      	bne.n	8020cc4 <__strftime+0x214>
 8020cb4:	f89b 3000 	ldrb.w	r3, [fp]
 8020cb8:	2b00      	cmp	r3, #0
 8020cba:	f000 83d7 	beq.w	802146c <__strftime+0x9bc>
 8020cbe:	f10b 0201 	add.w	r2, fp, #1
 8020cc2:	e6fe      	b.n	8020ac2 <__strftime+0x12>
 8020cc4:	42a3      	cmp	r3, r4
 8020cc6:	f67f af22 	bls.w	8020b0e <__strftime+0x5e>
 8020cca:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020cce:	f809 2004 	strb.w	r2, [r9, r4]
 8020cd2:	3401      	adds	r4, #1
 8020cd4:	e7ec      	b.n	8020cb0 <__strftime+0x200>
 8020cd6:	69aa      	ldr	r2, [r5, #24]
 8020cd8:	4b97      	ldr	r3, [pc, #604]	; (8020f38 <__strftime+0x488>)
 8020cda:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8020cde:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8020ce0:	4630      	mov	r0, r6
 8020ce2:	f7df faab 	bl	800023c <strlen>
 8020ce6:	3e01      	subs	r6, #1
 8020ce8:	4420      	add	r0, r4
 8020cea:	f108 33ff 	add.w	r3, r8, #4294967295
 8020cee:	42a0      	cmp	r0, r4
 8020cf0:	d0e0      	beq.n	8020cb4 <__strftime+0x204>
 8020cf2:	42a3      	cmp	r3, r4
 8020cf4:	f67f af0b 	bls.w	8020b0e <__strftime+0x5e>
 8020cf8:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020cfc:	f809 2004 	strb.w	r2, [r9, r4]
 8020d00:	3401      	adds	r4, #1
 8020d02:	e7f4      	b.n	8020cee <__strftime+0x23e>
 8020d04:	4b8c      	ldr	r3, [pc, #560]	; (8020f38 <__strftime+0x488>)
 8020d06:	692a      	ldr	r2, [r5, #16]
 8020d08:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020d0c:	4630      	mov	r0, r6
 8020d0e:	f7df fa95 	bl	800023c <strlen>
 8020d12:	3e01      	subs	r6, #1
 8020d14:	4420      	add	r0, r4
 8020d16:	f108 33ff 	add.w	r3, r8, #4294967295
 8020d1a:	42a0      	cmp	r0, r4
 8020d1c:	d0ca      	beq.n	8020cb4 <__strftime+0x204>
 8020d1e:	42a3      	cmp	r3, r4
 8020d20:	f67f aef5 	bls.w	8020b0e <__strftime+0x5e>
 8020d24:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020d28:	f809 2004 	strb.w	r2, [r9, r4]
 8020d2c:	3401      	adds	r4, #1
 8020d2e:	e7f4      	b.n	8020d1a <__strftime+0x26a>
 8020d30:	692b      	ldr	r3, [r5, #16]
 8020d32:	4a81      	ldr	r2, [pc, #516]	; (8020f38 <__strftime+0x488>)
 8020d34:	330c      	adds	r3, #12
 8020d36:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020d3a:	4630      	mov	r0, r6
 8020d3c:	f7df fa7e 	bl	800023c <strlen>
 8020d40:	3e01      	subs	r6, #1
 8020d42:	4420      	add	r0, r4
 8020d44:	f108 33ff 	add.w	r3, r8, #4294967295
 8020d48:	42a0      	cmp	r0, r4
 8020d4a:	d0b3      	beq.n	8020cb4 <__strftime+0x204>
 8020d4c:	42a3      	cmp	r3, r4
 8020d4e:	f67f aede 	bls.w	8020b0e <__strftime+0x5e>
 8020d52:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020d56:	f809 2004 	strb.w	r2, [r9, r4]
 8020d5a:	3401      	adds	r4, #1
 8020d5c:	e7f4      	b.n	8020d48 <__strftime+0x298>
 8020d5e:	4b76      	ldr	r3, [pc, #472]	; (8020f38 <__strftime+0x488>)
 8020d60:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8020d64:	4630      	mov	r0, r6
 8020d66:	f7df fa69 	bl	800023c <strlen>
 8020d6a:	7833      	ldrb	r3, [r6, #0]
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	d0a1      	beq.n	8020cb4 <__strftime+0x204>
 8020d70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020d72:	9300      	str	r3, [sp, #0]
 8020d74:	4632      	mov	r2, r6
 8020d76:	462b      	mov	r3, r5
 8020d78:	eba8 0104 	sub.w	r1, r8, r4
 8020d7c:	eb09 0004 	add.w	r0, r9, r4
 8020d80:	f7ff fe96 	bl	8020ab0 <__strftime>
 8020d84:	2800      	cmp	r0, #0
 8020d86:	f77f aec2 	ble.w	8020b0e <__strftime+0x5e>
 8020d8a:	4404      	add	r4, r0
 8020d8c:	e792      	b.n	8020cb4 <__strftime+0x204>
 8020d8e:	4b6a      	ldr	r3, [pc, #424]	; (8020f38 <__strftime+0x488>)
 8020d90:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8020d94:	e7e6      	b.n	8020d64 <__strftime+0x2b4>
 8020d96:	4b68      	ldr	r3, [pc, #416]	; (8020f38 <__strftime+0x488>)
 8020d98:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8020d9c:	e7e2      	b.n	8020d64 <__strftime+0x2b4>
 8020d9e:	4b66      	ldr	r3, [pc, #408]	; (8020f38 <__strftime+0x488>)
 8020da0:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8020da4:	e7de      	b.n	8020d64 <__strftime+0x2b4>
 8020da6:	4965      	ldr	r1, [pc, #404]	; (8020f3c <__strftime+0x48c>)
 8020da8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8020dac:	458a      	cmp	sl, r1
 8020dae:	bfac      	ite	ge
 8020db0:	2100      	movge	r1, #0
 8020db2:	2101      	movlt	r1, #1
 8020db4:	f1ba 0f00 	cmp.w	sl, #0
 8020db8:	db0e      	blt.n	8020dd8 <__strftime+0x328>
 8020dba:	2064      	movs	r0, #100	; 0x64
 8020dbc:	fb9a f0f0 	sdiv	r0, sl, r0
 8020dc0:	3013      	adds	r0, #19
 8020dc2:	b19f      	cbz	r7, 8020dec <__strftime+0x33c>
 8020dc4:	2863      	cmp	r0, #99	; 0x63
 8020dc6:	dd25      	ble.n	8020e14 <__strftime+0x364>
 8020dc8:	4a5d      	ldr	r2, [pc, #372]	; (8020f40 <__strftime+0x490>)
 8020dca:	4b5e      	ldr	r3, [pc, #376]	; (8020f44 <__strftime+0x494>)
 8020dcc:	2f2b      	cmp	r7, #43	; 0x2b
 8020dce:	bf14      	ite	ne
 8020dd0:	4617      	movne	r7, r2
 8020dd2:	461f      	moveq	r7, r3
 8020dd4:	4a5c      	ldr	r2, [pc, #368]	; (8020f48 <__strftime+0x498>)
 8020dd6:	e00b      	b.n	8020df0 <__strftime+0x340>
 8020dd8:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8020ddc:	9105      	str	r1, [sp, #20]
 8020dde:	f001 f835 	bl	8021e4c <abs>
 8020de2:	2364      	movs	r3, #100	; 0x64
 8020de4:	9905      	ldr	r1, [sp, #20]
 8020de6:	fb90 f0f3 	sdiv	r0, r0, r3
 8020dea:	e7ea      	b.n	8020dc2 <__strftime+0x312>
 8020dec:	4f54      	ldr	r7, [pc, #336]	; (8020f40 <__strftime+0x490>)
 8020dee:	4a57      	ldr	r2, [pc, #348]	; (8020f4c <__strftime+0x49c>)
 8020df0:	4b57      	ldr	r3, [pc, #348]	; (8020f50 <__strftime+0x4a0>)
 8020df2:	9001      	str	r0, [sp, #4]
 8020df4:	2e02      	cmp	r6, #2
 8020df6:	bf2c      	ite	cs
 8020df8:	ebc1 0606 	rsbcs	r6, r1, r6
 8020dfc:	f1c1 0602 	rsbcc	r6, r1, #2
 8020e00:	494e      	ldr	r1, [pc, #312]	; (8020f3c <__strftime+0x48c>)
 8020e02:	9600      	str	r6, [sp, #0]
 8020e04:	458a      	cmp	sl, r1
 8020e06:	bfa8      	it	ge
 8020e08:	463b      	movge	r3, r7
 8020e0a:	eba8 0104 	sub.w	r1, r8, r4
 8020e0e:	eb09 0004 	add.w	r0, r9, r4
 8020e12:	e02a      	b.n	8020e6a <__strftime+0x3ba>
 8020e14:	4f4a      	ldr	r7, [pc, #296]	; (8020f40 <__strftime+0x490>)
 8020e16:	e7dd      	b.n	8020dd4 <__strftime+0x324>
 8020e18:	494e      	ldr	r1, [pc, #312]	; (8020f54 <__strftime+0x4a4>)
 8020e1a:	4a4f      	ldr	r2, [pc, #316]	; (8020f58 <__strftime+0x4a8>)
 8020e1c:	68eb      	ldr	r3, [r5, #12]
 8020e1e:	2864      	cmp	r0, #100	; 0x64
 8020e20:	bf08      	it	eq
 8020e22:	460a      	moveq	r2, r1
 8020e24:	eba8 0104 	sub.w	r1, r8, r4
 8020e28:	eb09 0004 	add.w	r0, r9, r4
 8020e2c:	f001 fe9e 	bl	8022b6c <sniprintf>
 8020e30:	2800      	cmp	r0, #0
 8020e32:	f6ff ae6c 	blt.w	8020b0e <__strftime+0x5e>
 8020e36:	4404      	add	r4, r0
 8020e38:	45a0      	cmp	r8, r4
 8020e3a:	f63f af3b 	bhi.w	8020cb4 <__strftime+0x204>
 8020e3e:	e666      	b.n	8020b0e <__strftime+0x5e>
 8020e40:	6968      	ldr	r0, [r5, #20]
 8020e42:	692b      	ldr	r3, [r5, #16]
 8020e44:	68ef      	ldr	r7, [r5, #12]
 8020e46:	2800      	cmp	r0, #0
 8020e48:	eb09 0604 	add.w	r6, r9, r4
 8020e4c:	eba8 0104 	sub.w	r1, r8, r4
 8020e50:	f103 0301 	add.w	r3, r3, #1
 8020e54:	db0c      	blt.n	8020e70 <__strftime+0x3c0>
 8020e56:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020e5a:	fb90 f2fc 	sdiv	r2, r0, ip
 8020e5e:	fb0c 0212 	mls	r2, ip, r2, r0
 8020e62:	e9cd 7200 	strd	r7, r2, [sp]
 8020e66:	4a3d      	ldr	r2, [pc, #244]	; (8020f5c <__strftime+0x4ac>)
 8020e68:	4630      	mov	r0, r6
 8020e6a:	f001 fe7f 	bl	8022b6c <sniprintf>
 8020e6e:	e7df      	b.n	8020e30 <__strftime+0x380>
 8020e70:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020e74:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8020e78:	f000 ffe8 	bl	8021e4c <abs>
 8020e7c:	2264      	movs	r2, #100	; 0x64
 8020e7e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8020e82:	fb90 fcf2 	sdiv	ip, r0, r2
 8020e86:	fb0c 0212 	mls	r2, ip, r2, r0
 8020e8a:	e7ea      	b.n	8020e62 <__strftime+0x3b2>
 8020e8c:	2325      	movs	r3, #37	; 0x25
 8020e8e:	f88d 3020 	strb.w	r3, [sp, #32]
 8020e92:	b187      	cbz	r7, 8020eb6 <__strftime+0x406>
 8020e94:	2e06      	cmp	r6, #6
 8020e96:	bf38      	it	cc
 8020e98:	2606      	movcc	r6, #6
 8020e9a:	1fb3      	subs	r3, r6, #6
 8020e9c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8020ea0:	d10c      	bne.n	8020ebc <__strftime+0x40c>
 8020ea2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020ea6:	492e      	ldr	r1, [pc, #184]	; (8020f60 <__strftime+0x4b0>)
 8020ea8:	f001 fec0 	bl	8022c2c <strcpy>
 8020eac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020eae:	9300      	str	r3, [sp, #0]
 8020eb0:	aa08      	add	r2, sp, #32
 8020eb2:	462b      	mov	r3, r5
 8020eb4:	e760      	b.n	8020d78 <__strftime+0x2c8>
 8020eb6:	272b      	movs	r7, #43	; 0x2b
 8020eb8:	260a      	movs	r6, #10
 8020eba:	e7ee      	b.n	8020e9a <__strftime+0x3ea>
 8020ebc:	4a29      	ldr	r2, [pc, #164]	; (8020f64 <__strftime+0x4b4>)
 8020ebe:	211e      	movs	r1, #30
 8020ec0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8020ec4:	f001 fe52 	bl	8022b6c <sniprintf>
 8020ec8:	2800      	cmp	r0, #0
 8020eca:	ddea      	ble.n	8020ea2 <__strftime+0x3f2>
 8020ecc:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8020ed0:	4418      	add	r0, r3
 8020ed2:	e7e8      	b.n	8020ea6 <__strftime+0x3f6>
 8020ed4:	4628      	mov	r0, r5
 8020ed6:	f7ff fd89 	bl	80209ec <iso_year_adjust>
 8020eda:	4606      	mov	r6, r0
 8020edc:	6968      	ldr	r0, [r5, #20]
 8020ede:	2800      	cmp	r0, #0
 8020ee0:	db11      	blt.n	8020f06 <__strftime+0x456>
 8020ee2:	2264      	movs	r2, #100	; 0x64
 8020ee4:	fb90 f3f2 	sdiv	r3, r0, r2
 8020ee8:	fb02 0313 	mls	r3, r2, r3, r0
 8020eec:	441e      	add	r6, r3
 8020eee:	2364      	movs	r3, #100	; 0x64
 8020ef0:	fb96 f0f3 	sdiv	r0, r6, r3
 8020ef4:	fb03 6610 	mls	r6, r3, r0, r6
 8020ef8:	441e      	add	r6, r3
 8020efa:	fbb6 f2f3 	udiv	r2, r6, r3
 8020efe:	fb03 6312 	mls	r3, r3, r2, r6
 8020f02:	4a14      	ldr	r2, [pc, #80]	; (8020f54 <__strftime+0x4a4>)
 8020f04:	e78e      	b.n	8020e24 <__strftime+0x374>
 8020f06:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020f0a:	f000 ff9f 	bl	8021e4c <abs>
 8020f0e:	2364      	movs	r3, #100	; 0x64
 8020f10:	2e00      	cmp	r6, #0
 8020f12:	fb90 f2f3 	sdiv	r2, r0, r3
 8020f16:	fb02 0313 	mls	r3, r2, r3, r0
 8020f1a:	da05      	bge.n	8020f28 <__strftime+0x478>
 8020f1c:	6969      	ldr	r1, [r5, #20]
 8020f1e:	4a12      	ldr	r2, [pc, #72]	; (8020f68 <__strftime+0x4b8>)
 8020f20:	4291      	cmp	r1, r2
 8020f22:	bfb8      	it	lt
 8020f24:	2601      	movlt	r6, #1
 8020f26:	e7e1      	b.n	8020eec <__strftime+0x43c>
 8020f28:	d0e0      	beq.n	8020eec <__strftime+0x43c>
 8020f2a:	6969      	ldr	r1, [r5, #20]
 8020f2c:	4a03      	ldr	r2, [pc, #12]	; (8020f3c <__strftime+0x48c>)
 8020f2e:	4291      	cmp	r1, r2
 8020f30:	bfb8      	it	lt
 8020f32:	f04f 36ff 	movlt.w	r6, #4294967295
 8020f36:	e7d9      	b.n	8020eec <__strftime+0x43c>
 8020f38:	0802982c 	.word	0x0802982c
 8020f3c:	fffff894 	.word	0xfffff894
 8020f40:	0802999f 	.word	0x0802999f
 8020f44:	080296b6 	.word	0x080296b6
 8020f48:	080296ae 	.word	0x080296ae
 8020f4c:	080296a7 	.word	0x080296a7
 8020f50:	08029adf 	.word	0x08029adf
 8020f54:	080296c6 	.word	0x080296c6
 8020f58:	080296b8 	.word	0x080296b8
 8020f5c:	080296bc 	.word	0x080296bc
 8020f60:	080296cf 	.word	0x080296cf
 8020f64:	080296cb 	.word	0x080296cb
 8020f68:	fffff895 	.word	0xfffff895
 8020f6c:	4bb6      	ldr	r3, [pc, #728]	; (8021248 <__strftime+0x798>)
 8020f6e:	6969      	ldr	r1, [r5, #20]
 8020f70:	4299      	cmp	r1, r3
 8020f72:	bfac      	ite	ge
 8020f74:	2300      	movge	r3, #0
 8020f76:	2301      	movlt	r3, #1
 8020f78:	4628      	mov	r0, r5
 8020f7a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8020f7e:	f7ff fd35 	bl	80209ec <iso_year_adjust>
 8020f82:	9906      	ldr	r1, [sp, #24]
 8020f84:	2900      	cmp	r1, #0
 8020f86:	4682      	mov	sl, r0
 8020f88:	db27      	blt.n	8020fda <__strftime+0x52a>
 8020f8a:	2264      	movs	r2, #100	; 0x64
 8020f8c:	fb91 f2f2 	sdiv	r2, r1, r2
 8020f90:	3213      	adds	r2, #19
 8020f92:	6968      	ldr	r0, [r5, #20]
 8020f94:	2800      	cmp	r0, #0
 8020f96:	db2b      	blt.n	8020ff0 <__strftime+0x540>
 8020f98:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020f9c:	fb90 fefc 	sdiv	lr, r0, ip
 8020fa0:	fb0c 001e 	mls	r0, ip, lr, r0
 8020fa4:	f1ba 0f00 	cmp.w	sl, #0
 8020fa8:	da31      	bge.n	802100e <__strftime+0x55e>
 8020faa:	6969      	ldr	r1, [r5, #20]
 8020fac:	4ba7      	ldr	r3, [pc, #668]	; (802124c <__strftime+0x79c>)
 8020fae:	4299      	cmp	r1, r3
 8020fb0:	db38      	blt.n	8021024 <__strftime+0x574>
 8020fb2:	eb0a 0300 	add.w	r3, sl, r0
 8020fb6:	1c59      	adds	r1, r3, #1
 8020fb8:	d139      	bne.n	802102e <__strftime+0x57e>
 8020fba:	3a01      	subs	r2, #1
 8020fbc:	2363      	movs	r3, #99	; 0x63
 8020fbe:	2064      	movs	r0, #100	; 0x64
 8020fc0:	fb00 3202 	mla	r2, r0, r2, r3
 8020fc4:	9b05      	ldr	r3, [sp, #20]
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	d036      	beq.n	8021038 <__strftime+0x588>
 8020fca:	232d      	movs	r3, #45	; 0x2d
 8020fcc:	f88d 3020 	strb.w	r3, [sp, #32]
 8020fd0:	b106      	cbz	r6, 8020fd4 <__strftime+0x524>
 8020fd2:	3e01      	subs	r6, #1
 8020fd4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8020fd8:	e038      	b.n	802104c <__strftime+0x59c>
 8020fda:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8020fde:	9106      	str	r1, [sp, #24]
 8020fe0:	f000 ff34 	bl	8021e4c <abs>
 8020fe4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020fe8:	9906      	ldr	r1, [sp, #24]
 8020fea:	fb90 f2fc 	sdiv	r2, r0, ip
 8020fee:	e7d0      	b.n	8020f92 <__strftime+0x4e2>
 8020ff0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020ff4:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8020ff8:	f000 ff28 	bl	8021e4c <abs>
 8020ffc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021000:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021004:	fb90 fefc 	sdiv	lr, r0, ip
 8021008:	fb0e 001c 	mls	r0, lr, ip, r0
 802100c:	e7ca      	b.n	8020fa4 <__strftime+0x4f4>
 802100e:	d0d0      	beq.n	8020fb2 <__strftime+0x502>
 8021010:	4b8d      	ldr	r3, [pc, #564]	; (8021248 <__strftime+0x798>)
 8021012:	4299      	cmp	r1, r3
 8021014:	bfb4      	ite	lt
 8021016:	2301      	movlt	r3, #1
 8021018:	2300      	movge	r3, #0
 802101a:	9305      	str	r3, [sp, #20]
 802101c:	bfb8      	it	lt
 802101e:	f04f 3aff 	movlt.w	sl, #4294967295
 8021022:	e7c6      	b.n	8020fb2 <__strftime+0x502>
 8021024:	f04f 0a01 	mov.w	sl, #1
 8021028:	f8cd a014 	str.w	sl, [sp, #20]
 802102c:	e7c1      	b.n	8020fb2 <__strftime+0x502>
 802102e:	2b64      	cmp	r3, #100	; 0x64
 8021030:	bf04      	itt	eq
 8021032:	3201      	addeq	r2, #1
 8021034:	2300      	moveq	r3, #0
 8021036:	e7c2      	b.n	8020fbe <__strftime+0x50e>
 8021038:	2f2b      	cmp	r7, #43	; 0x2b
 802103a:	d106      	bne.n	802104a <__strftime+0x59a>
 802103c:	f242 730f 	movw	r3, #9999	; 0x270f
 8021040:	429a      	cmp	r2, r3
 8021042:	d902      	bls.n	802104a <__strftime+0x59a>
 8021044:	f88d 7020 	strb.w	r7, [sp, #32]
 8021048:	e7c2      	b.n	8020fd0 <__strftime+0x520>
 802104a:	ab08      	add	r3, sp, #32
 802104c:	2125      	movs	r1, #37	; 0x25
 802104e:	7019      	strb	r1, [r3, #0]
 8021050:	b94f      	cbnz	r7, 8021066 <__strftime+0x5b6>
 8021052:	1c58      	adds	r0, r3, #1
 8021054:	497e      	ldr	r1, [pc, #504]	; (8021250 <__strftime+0x7a0>)
 8021056:	9205      	str	r2, [sp, #20]
 8021058:	f001 fde8 	bl	8022c2c <strcpy>
 802105c:	9a05      	ldr	r2, [sp, #20]
 802105e:	9200      	str	r2, [sp, #0]
 8021060:	4633      	mov	r3, r6
 8021062:	aa08      	add	r2, sp, #32
 8021064:	e059      	b.n	802111a <__strftime+0x66a>
 8021066:	2130      	movs	r1, #48	; 0x30
 8021068:	1c98      	adds	r0, r3, #2
 802106a:	7059      	strb	r1, [r3, #1]
 802106c:	e7f2      	b.n	8021054 <__strftime+0x5a4>
 802106e:	4979      	ldr	r1, [pc, #484]	; (8021254 <__strftime+0x7a4>)
 8021070:	4a79      	ldr	r2, [pc, #484]	; (8021258 <__strftime+0x7a8>)
 8021072:	68ab      	ldr	r3, [r5, #8]
 8021074:	286b      	cmp	r0, #107	; 0x6b
 8021076:	bf08      	it	eq
 8021078:	460a      	moveq	r2, r1
 802107a:	e6d3      	b.n	8020e24 <__strftime+0x374>
 802107c:	68ab      	ldr	r3, [r5, #8]
 802107e:	b163      	cbz	r3, 802109a <__strftime+0x5ea>
 8021080:	2b0c      	cmp	r3, #12
 8021082:	d004      	beq.n	802108e <__strftime+0x5de>
 8021084:	210c      	movs	r1, #12
 8021086:	fb93 f2f1 	sdiv	r2, r3, r1
 802108a:	fb01 3312 	mls	r3, r1, r2, r3
 802108e:	4972      	ldr	r1, [pc, #456]	; (8021258 <__strftime+0x7a8>)
 8021090:	4a70      	ldr	r2, [pc, #448]	; (8021254 <__strftime+0x7a4>)
 8021092:	2849      	cmp	r0, #73	; 0x49
 8021094:	bf08      	it	eq
 8021096:	460a      	moveq	r2, r1
 8021098:	e6c4      	b.n	8020e24 <__strftime+0x374>
 802109a:	230c      	movs	r3, #12
 802109c:	e7f7      	b.n	802108e <__strftime+0x5de>
 802109e:	69eb      	ldr	r3, [r5, #28]
 80210a0:	4a6e      	ldr	r2, [pc, #440]	; (802125c <__strftime+0x7ac>)
 80210a2:	3301      	adds	r3, #1
 80210a4:	e6be      	b.n	8020e24 <__strftime+0x374>
 80210a6:	692b      	ldr	r3, [r5, #16]
 80210a8:	3301      	adds	r3, #1
 80210aa:	e72a      	b.n	8020f02 <__strftime+0x452>
 80210ac:	686b      	ldr	r3, [r5, #4]
 80210ae:	e728      	b.n	8020f02 <__strftime+0x452>
 80210b0:	f108 33ff 	add.w	r3, r8, #4294967295
 80210b4:	42a3      	cmp	r3, r4
 80210b6:	f67f ad2a 	bls.w	8020b0e <__strftime+0x5e>
 80210ba:	230a      	movs	r3, #10
 80210bc:	f809 3004 	strb.w	r3, [r9, r4]
 80210c0:	3401      	adds	r4, #1
 80210c2:	e5f7      	b.n	8020cb4 <__strftime+0x204>
 80210c4:	68ab      	ldr	r3, [r5, #8]
 80210c6:	2b0b      	cmp	r3, #11
 80210c8:	bfcc      	ite	gt
 80210ca:	22a4      	movgt	r2, #164	; 0xa4
 80210cc:	22a0      	movle	r2, #160	; 0xa0
 80210ce:	4b64      	ldr	r3, [pc, #400]	; (8021260 <__strftime+0x7b0>)
 80210d0:	4413      	add	r3, r2
 80210d2:	685e      	ldr	r6, [r3, #4]
 80210d4:	4630      	mov	r0, r6
 80210d6:	f7df f8b1 	bl	800023c <strlen>
 80210da:	1e72      	subs	r2, r6, #1
 80210dc:	4420      	add	r0, r4
 80210de:	f108 36ff 	add.w	r6, r8, #4294967295
 80210e2:	42a0      	cmp	r0, r4
 80210e4:	f43f ade6 	beq.w	8020cb4 <__strftime+0x204>
 80210e8:	42a6      	cmp	r6, r4
 80210ea:	f67f ad10 	bls.w	8020b0e <__strftime+0x5e>
 80210ee:	f89b 1000 	ldrb.w	r1, [fp]
 80210f2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80210f6:	2950      	cmp	r1, #80	; 0x50
 80210f8:	d107      	bne.n	802110a <__strftime+0x65a>
 80210fa:	495a      	ldr	r1, [pc, #360]	; (8021264 <__strftime+0x7b4>)
 80210fc:	5cc9      	ldrb	r1, [r1, r3]
 80210fe:	f001 0103 	and.w	r1, r1, #3
 8021102:	2901      	cmp	r1, #1
 8021104:	bf08      	it	eq
 8021106:	3320      	addeq	r3, #32
 8021108:	b2db      	uxtb	r3, r3
 802110a:	f809 3004 	strb.w	r3, [r9, r4]
 802110e:	3401      	adds	r4, #1
 8021110:	e7e7      	b.n	80210e2 <__strftime+0x632>
 8021112:	686b      	ldr	r3, [r5, #4]
 8021114:	9300      	str	r3, [sp, #0]
 8021116:	4a54      	ldr	r2, [pc, #336]	; (8021268 <__strftime+0x7b8>)
 8021118:	68ab      	ldr	r3, [r5, #8]
 802111a:	eba8 0104 	sub.w	r1, r8, r4
 802111e:	eb09 0004 	add.w	r0, r9, r4
 8021122:	f001 fd23 	bl	8022b6c <sniprintf>
 8021126:	e683      	b.n	8020e30 <__strftime+0x380>
 8021128:	6a2b      	ldr	r3, [r5, #32]
 802112a:	2b00      	cmp	r3, #0
 802112c:	db79      	blt.n	8021222 <__strftime+0x772>
 802112e:	f000 fb91 	bl	8021854 <__tz_lock>
 8021132:	9b04      	ldr	r3, [sp, #16]
 8021134:	b90b      	cbnz	r3, 802113a <__strftime+0x68a>
 8021136:	f000 fb99 	bl	802186c <_tzset_unlocked>
 802113a:	f000 ff55 	bl	8021fe8 <__gettzinfo>
 802113e:	6a2b      	ldr	r3, [r5, #32]
 8021140:	2b00      	cmp	r3, #0
 8021142:	bfcc      	ite	gt
 8021144:	2350      	movgt	r3, #80	; 0x50
 8021146:	2328      	movle	r3, #40	; 0x28
 8021148:	58c3      	ldr	r3, [r0, r3]
 802114a:	f1c3 0a00 	rsb	sl, r3, #0
 802114e:	f000 fb87 	bl	8021860 <__tz_unlock>
 8021152:	2301      	movs	r3, #1
 8021154:	9304      	str	r3, [sp, #16]
 8021156:	f8d5 c014 	ldr.w	ip, [r5, #20]
 802115a:	4662      	mov	r2, ip
 802115c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8021160:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021164:	9602      	str	r6, [sp, #8]
 8021166:	f143 36ff 	adc.w	r6, r3, #4294967295
 802116a:	9603      	str	r6, [sp, #12]
 802116c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021170:	2e00      	cmp	r6, #0
 8021172:	f177 0600 	sbcs.w	r6, r7, #0
 8021176:	eba8 0104 	sub.w	r1, r8, r4
 802117a:	eb09 0004 	add.w	r0, r9, r4
 802117e:	da05      	bge.n	802118c <__strftime+0x6dc>
 8021180:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8021184:	f143 33ff 	adc.w	r3, r3, #4294967295
 8021188:	9602      	str	r6, [sp, #8]
 802118a:	9303      	str	r3, [sp, #12]
 802118c:	9b02      	ldr	r3, [sp, #8]
 802118e:	089e      	lsrs	r6, r3, #2
 8021190:	9b03      	ldr	r3, [sp, #12]
 8021192:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8021196:	f10c 32ff 	add.w	r2, ip, #4294967295
 802119a:	109f      	asrs	r7, r3, #2
 802119c:	2364      	movs	r3, #100	; 0x64
 802119e:	fb92 f3f3 	sdiv	r3, r2, r3
 80211a2:	1af6      	subs	r6, r6, r3
 80211a4:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 80211a8:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80211ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80211b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80211b4:	18f6      	adds	r6, r6, r3
 80211b6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80211ba:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80211be:	f240 136d 	movw	r3, #365	; 0x16d
 80211c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80211c6:	69eb      	ldr	r3, [r5, #28]
 80211c8:	eb16 060c 	adds.w	r6, r6, ip
 80211cc:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 80211d0:	18f6      	adds	r6, r6, r3
 80211d2:	f04f 0c18 	mov.w	ip, #24
 80211d6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80211da:	fba6 230c 	umull	r2, r3, r6, ip
 80211de:	68ae      	ldr	r6, [r5, #8]
 80211e0:	fb0c 3307 	mla	r3, ip, r7, r3
 80211e4:	1992      	adds	r2, r2, r6
 80211e6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80211ea:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80211ee:	fba2 670c 	umull	r6, r7, r2, ip
 80211f2:	fb0c 7703 	mla	r7, ip, r3, r7
 80211f6:	686b      	ldr	r3, [r5, #4]
 80211f8:	18f6      	adds	r6, r6, r3
 80211fa:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80211fe:	fba6 230c 	umull	r2, r3, r6, ip
 8021202:	682e      	ldr	r6, [r5, #0]
 8021204:	fb0c 3307 	mla	r3, ip, r7, r3
 8021208:	1992      	adds	r2, r2, r6
 802120a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 802120e:	ebb2 020a 	subs.w	r2, r2, sl
 8021212:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8021216:	e9cd 2300 	strd	r2, r3, [sp]
 802121a:	4a14      	ldr	r2, [pc, #80]	; (802126c <__strftime+0x7bc>)
 802121c:	f001 fca6 	bl	8022b6c <sniprintf>
 8021220:	e606      	b.n	8020e30 <__strftime+0x380>
 8021222:	f04f 0a00 	mov.w	sl, #0
 8021226:	e796      	b.n	8021156 <__strftime+0x6a6>
 8021228:	682b      	ldr	r3, [r5, #0]
 802122a:	e66a      	b.n	8020f02 <__strftime+0x452>
 802122c:	f108 33ff 	add.w	r3, r8, #4294967295
 8021230:	42a3      	cmp	r3, r4
 8021232:	f67f ac6c 	bls.w	8020b0e <__strftime+0x5e>
 8021236:	2309      	movs	r3, #9
 8021238:	e740      	b.n	80210bc <__strftime+0x60c>
 802123a:	682b      	ldr	r3, [r5, #0]
 802123c:	9301      	str	r3, [sp, #4]
 802123e:	686b      	ldr	r3, [r5, #4]
 8021240:	9300      	str	r3, [sp, #0]
 8021242:	4a0b      	ldr	r2, [pc, #44]	; (8021270 <__strftime+0x7c0>)
 8021244:	68ab      	ldr	r3, [r5, #8]
 8021246:	e5e0      	b.n	8020e0a <__strftime+0x35a>
 8021248:	fffff894 	.word	0xfffff894
 802124c:	fffff895 	.word	0xfffff895
 8021250:	080296d7 	.word	0x080296d7
 8021254:	080296b8 	.word	0x080296b8
 8021258:	080296c6 	.word	0x080296c6
 802125c:	080296db 	.word	0x080296db
 8021260:	0802982c 	.word	0x0802982c
 8021264:	080299a1 	.word	0x080299a1
 8021268:	080296ea 	.word	0x080296ea
 802126c:	080296e0 	.word	0x080296e0
 8021270:	080296e5 	.word	0x080296e5
 8021274:	f108 33ff 	add.w	r3, r8, #4294967295
 8021278:	42a3      	cmp	r3, r4
 802127a:	f67f ac48 	bls.w	8020b0e <__strftime+0x5e>
 802127e:	69ab      	ldr	r3, [r5, #24]
 8021280:	eb09 0204 	add.w	r2, r9, r4
 8021284:	3401      	adds	r4, #1
 8021286:	b913      	cbnz	r3, 802128e <__strftime+0x7de>
 8021288:	2337      	movs	r3, #55	; 0x37
 802128a:	7013      	strb	r3, [r2, #0]
 802128c:	e512      	b.n	8020cb4 <__strftime+0x204>
 802128e:	3330      	adds	r3, #48	; 0x30
 8021290:	e7fb      	b.n	802128a <__strftime+0x7da>
 8021292:	69eb      	ldr	r3, [r5, #28]
 8021294:	69aa      	ldr	r2, [r5, #24]
 8021296:	3307      	adds	r3, #7
 8021298:	1a9b      	subs	r3, r3, r2
 802129a:	2207      	movs	r2, #7
 802129c:	fb93 f3f2 	sdiv	r3, r3, r2
 80212a0:	e62f      	b.n	8020f02 <__strftime+0x452>
 80212a2:	4628      	mov	r0, r5
 80212a4:	f7ff fba2 	bl	80209ec <iso_year_adjust>
 80212a8:	69aa      	ldr	r2, [r5, #24]
 80212aa:	b132      	cbz	r2, 80212ba <__strftime+0x80a>
 80212ac:	3a01      	subs	r2, #1
 80212ae:	2800      	cmp	r0, #0
 80212b0:	dc28      	bgt.n	8021304 <__strftime+0x854>
 80212b2:	69eb      	ldr	r3, [r5, #28]
 80212b4:	d103      	bne.n	80212be <__strftime+0x80e>
 80212b6:	330a      	adds	r3, #10
 80212b8:	e7ee      	b.n	8021298 <__strftime+0x7e8>
 80212ba:	2206      	movs	r2, #6
 80212bc:	e7f7      	b.n	80212ae <__strftime+0x7fe>
 80212be:	6968      	ldr	r0, [r5, #20]
 80212c0:	2800      	cmp	r0, #0
 80212c2:	eba2 0303 	sub.w	r3, r2, r3
 80212c6:	f240 726b 	movw	r2, #1899	; 0x76b
 80212ca:	bfa8      	it	ge
 80212cc:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80212d0:	4410      	add	r0, r2
 80212d2:	0782      	lsls	r2, r0, #30
 80212d4:	d105      	bne.n	80212e2 <__strftime+0x832>
 80212d6:	2264      	movs	r2, #100	; 0x64
 80212d8:	fb90 f1f2 	sdiv	r1, r0, r2
 80212dc:	fb02 0111 	mls	r1, r2, r1, r0
 80212e0:	b971      	cbnz	r1, 8021300 <__strftime+0x850>
 80212e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80212e6:	fb90 f2f1 	sdiv	r2, r0, r1
 80212ea:	fb01 0212 	mls	r2, r1, r2, r0
 80212ee:	fab2 f282 	clz	r2, r2
 80212f2:	0952      	lsrs	r2, r2, #5
 80212f4:	1a9a      	subs	r2, r3, r2
 80212f6:	2a05      	cmp	r2, #5
 80212f8:	bfb4      	ite	lt
 80212fa:	2335      	movlt	r3, #53	; 0x35
 80212fc:	2334      	movge	r3, #52	; 0x34
 80212fe:	e600      	b.n	8020f02 <__strftime+0x452>
 8021300:	2201      	movs	r2, #1
 8021302:	e7f7      	b.n	80212f4 <__strftime+0x844>
 8021304:	2301      	movs	r3, #1
 8021306:	e5fc      	b.n	8020f02 <__strftime+0x452>
 8021308:	f108 33ff 	add.w	r3, r8, #4294967295
 802130c:	42a3      	cmp	r3, r4
 802130e:	f67f abfe 	bls.w	8020b0e <__strftime+0x5e>
 8021312:	69ab      	ldr	r3, [r5, #24]
 8021314:	3330      	adds	r3, #48	; 0x30
 8021316:	e6d1      	b.n	80210bc <__strftime+0x60c>
 8021318:	69ab      	ldr	r3, [r5, #24]
 802131a:	b13b      	cbz	r3, 802132c <__strftime+0x87c>
 802131c:	3b01      	subs	r3, #1
 802131e:	69ea      	ldr	r2, [r5, #28]
 8021320:	3207      	adds	r2, #7
 8021322:	1ad2      	subs	r2, r2, r3
 8021324:	2307      	movs	r3, #7
 8021326:	fb92 f3f3 	sdiv	r3, r2, r3
 802132a:	e5ea      	b.n	8020f02 <__strftime+0x452>
 802132c:	2306      	movs	r3, #6
 802132e:	e7f6      	b.n	802131e <__strftime+0x86e>
 8021330:	6968      	ldr	r0, [r5, #20]
 8021332:	2800      	cmp	r0, #0
 8021334:	db05      	blt.n	8021342 <__strftime+0x892>
 8021336:	2264      	movs	r2, #100	; 0x64
 8021338:	fb90 f3f2 	sdiv	r3, r0, r2
 802133c:	fb03 0312 	mls	r3, r3, r2, r0
 8021340:	e5df      	b.n	8020f02 <__strftime+0x452>
 8021342:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021346:	f000 fd81 	bl	8021e4c <abs>
 802134a:	e7f4      	b.n	8021336 <__strftime+0x886>
 802134c:	696b      	ldr	r3, [r5, #20]
 802134e:	4a4c      	ldr	r2, [pc, #304]	; (8021480 <__strftime+0x9d0>)
 8021350:	4293      	cmp	r3, r2
 8021352:	da09      	bge.n	8021368 <__strftime+0x8b8>
 8021354:	212d      	movs	r1, #45	; 0x2d
 8021356:	f88d 1020 	strb.w	r1, [sp, #32]
 802135a:	eba2 0a03 	sub.w	sl, r2, r3
 802135e:	b106      	cbz	r6, 8021362 <__strftime+0x8b2>
 8021360:	3e01      	subs	r6, #1
 8021362:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8021366:	e00b      	b.n	8021380 <__strftime+0x8d0>
 8021368:	2f2b      	cmp	r7, #43	; 0x2b
 802136a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 802136e:	d106      	bne.n	802137e <__strftime+0x8ce>
 8021370:	f242 730f 	movw	r3, #9999	; 0x270f
 8021374:	459a      	cmp	sl, r3
 8021376:	d902      	bls.n	802137e <__strftime+0x8ce>
 8021378:	f88d 7020 	strb.w	r7, [sp, #32]
 802137c:	e7ef      	b.n	802135e <__strftime+0x8ae>
 802137e:	ab08      	add	r3, sp, #32
 8021380:	2225      	movs	r2, #37	; 0x25
 8021382:	701a      	strb	r2, [r3, #0]
 8021384:	b937      	cbnz	r7, 8021394 <__strftime+0x8e4>
 8021386:	1c58      	adds	r0, r3, #1
 8021388:	493e      	ldr	r1, [pc, #248]	; (8021484 <__strftime+0x9d4>)
 802138a:	f001 fc4f 	bl	8022c2c <strcpy>
 802138e:	f8cd a000 	str.w	sl, [sp]
 8021392:	e665      	b.n	8021060 <__strftime+0x5b0>
 8021394:	2230      	movs	r2, #48	; 0x30
 8021396:	1c98      	adds	r0, r3, #2
 8021398:	705a      	strb	r2, [r3, #1]
 802139a:	e7f5      	b.n	8021388 <__strftime+0x8d8>
 802139c:	6a2b      	ldr	r3, [r5, #32]
 802139e:	2b00      	cmp	r3, #0
 80213a0:	f6ff ac88 	blt.w	8020cb4 <__strftime+0x204>
 80213a4:	f000 fa56 	bl	8021854 <__tz_lock>
 80213a8:	9b04      	ldr	r3, [sp, #16]
 80213aa:	b90b      	cbnz	r3, 80213b0 <__strftime+0x900>
 80213ac:	f000 fa5e 	bl	802186c <_tzset_unlocked>
 80213b0:	f000 fe1a 	bl	8021fe8 <__gettzinfo>
 80213b4:	6a2b      	ldr	r3, [r5, #32]
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	bfcc      	ite	gt
 80213ba:	2350      	movgt	r3, #80	; 0x50
 80213bc:	2328      	movle	r3, #40	; 0x28
 80213be:	eb09 0704 	add.w	r7, r9, r4
 80213c2:	58c6      	ldr	r6, [r0, r3]
 80213c4:	f000 fa4c 	bl	8021860 <__tz_unlock>
 80213c8:	4276      	negs	r6, r6
 80213ca:	233c      	movs	r3, #60	; 0x3c
 80213cc:	fb96 f0f3 	sdiv	r0, r6, r3
 80213d0:	f000 fece 	bl	8022170 <labs>
 80213d4:	233c      	movs	r3, #60	; 0x3c
 80213d6:	eba8 0a04 	sub.w	sl, r8, r4
 80213da:	fb90 f2f3 	sdiv	r2, r0, r3
 80213de:	fb02 0013 	mls	r0, r2, r3, r0
 80213e2:	9000      	str	r0, [sp, #0]
 80213e4:	4a28      	ldr	r2, [pc, #160]	; (8021488 <__strftime+0x9d8>)
 80213e6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80213ea:	4651      	mov	r1, sl
 80213ec:	4638      	mov	r0, r7
 80213ee:	fb96 f3f3 	sdiv	r3, r6, r3
 80213f2:	f001 fbbb 	bl	8022b6c <sniprintf>
 80213f6:	2800      	cmp	r0, #0
 80213f8:	f6ff ab89 	blt.w	8020b0e <__strftime+0x5e>
 80213fc:	4404      	add	r4, r0
 80213fe:	45a0      	cmp	r8, r4
 8021400:	f67f ab85 	bls.w	8020b0e <__strftime+0x5e>
 8021404:	2301      	movs	r3, #1
 8021406:	9304      	str	r3, [sp, #16]
 8021408:	e454      	b.n	8020cb4 <__strftime+0x204>
 802140a:	6a2b      	ldr	r3, [r5, #32]
 802140c:	2b00      	cmp	r3, #0
 802140e:	f6ff ac51 	blt.w	8020cb4 <__strftime+0x204>
 8021412:	f000 fa1f 	bl	8021854 <__tz_lock>
 8021416:	9b04      	ldr	r3, [sp, #16]
 8021418:	b90b      	cbnz	r3, 802141e <__strftime+0x96e>
 802141a:	f000 fa27 	bl	802186c <_tzset_unlocked>
 802141e:	6a2b      	ldr	r3, [r5, #32]
 8021420:	4a1a      	ldr	r2, [pc, #104]	; (802148c <__strftime+0x9dc>)
 8021422:	2b00      	cmp	r3, #0
 8021424:	bfd4      	ite	le
 8021426:	2300      	movle	r3, #0
 8021428:	2301      	movgt	r3, #1
 802142a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 802142e:	4630      	mov	r0, r6
 8021430:	f7de ff04 	bl	800023c <strlen>
 8021434:	3e01      	subs	r6, #1
 8021436:	4420      	add	r0, r4
 8021438:	f108 33ff 	add.w	r3, r8, #4294967295
 802143c:	42a0      	cmp	r0, r4
 802143e:	d102      	bne.n	8021446 <__strftime+0x996>
 8021440:	f000 fa0e 	bl	8021860 <__tz_unlock>
 8021444:	e7de      	b.n	8021404 <__strftime+0x954>
 8021446:	42a3      	cmp	r3, r4
 8021448:	d905      	bls.n	8021456 <__strftime+0x9a6>
 802144a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802144e:	f809 2004 	strb.w	r2, [r9, r4]
 8021452:	3401      	adds	r4, #1
 8021454:	e7f2      	b.n	802143c <__strftime+0x98c>
 8021456:	f000 fa03 	bl	8021860 <__tz_unlock>
 802145a:	f7ff bb58 	b.w	8020b0e <__strftime+0x5e>
 802145e:	f108 33ff 	add.w	r3, r8, #4294967295
 8021462:	42a3      	cmp	r3, r4
 8021464:	f67f ab53 	bls.w	8020b0e <__strftime+0x5e>
 8021468:	2325      	movs	r3, #37	; 0x25
 802146a:	e627      	b.n	80210bc <__strftime+0x60c>
 802146c:	f1b8 0f00 	cmp.w	r8, #0
 8021470:	d002      	beq.n	8021478 <__strftime+0x9c8>
 8021472:	2300      	movs	r3, #0
 8021474:	f809 3004 	strb.w	r3, [r9, r4]
 8021478:	4620      	mov	r0, r4
 802147a:	b011      	add	sp, #68	; 0x44
 802147c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021480:	fffff894 	.word	0xfffff894
 8021484:	080296d7 	.word	0x080296d7
 8021488:	080296f4 	.word	0x080296f4
 802148c:	2000016c 	.word	0x2000016c

08021490 <strftime>:
 8021490:	b513      	push	{r0, r1, r4, lr}
 8021492:	4c03      	ldr	r4, [pc, #12]	; (80214a0 <strftime+0x10>)
 8021494:	9400      	str	r4, [sp, #0]
 8021496:	f7ff fb0b 	bl	8020ab0 <__strftime>
 802149a:	b002      	add	sp, #8
 802149c:	bd10      	pop	{r4, pc}
 802149e:	bf00      	nop
 80214a0:	200001d0 	.word	0x200001d0

080214a4 <strstr>:
 80214a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214a6:	780c      	ldrb	r4, [r1, #0]
 80214a8:	b164      	cbz	r4, 80214c4 <strstr+0x20>
 80214aa:	4603      	mov	r3, r0
 80214ac:	781a      	ldrb	r2, [r3, #0]
 80214ae:	4618      	mov	r0, r3
 80214b0:	1c5e      	adds	r6, r3, #1
 80214b2:	b90a      	cbnz	r2, 80214b8 <strstr+0x14>
 80214b4:	4610      	mov	r0, r2
 80214b6:	e005      	b.n	80214c4 <strstr+0x20>
 80214b8:	4294      	cmp	r4, r2
 80214ba:	d108      	bne.n	80214ce <strstr+0x2a>
 80214bc:	460d      	mov	r5, r1
 80214be:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80214c2:	b902      	cbnz	r2, 80214c6 <strstr+0x22>
 80214c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214c6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80214ca:	4297      	cmp	r7, r2
 80214cc:	d0f7      	beq.n	80214be <strstr+0x1a>
 80214ce:	4633      	mov	r3, r6
 80214d0:	e7ec      	b.n	80214ac <strstr+0x8>
	...

080214d4 <_strtol_l.isra.0>:
 80214d4:	2b01      	cmp	r3, #1
 80214d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80214da:	d001      	beq.n	80214e0 <_strtol_l.isra.0+0xc>
 80214dc:	2b24      	cmp	r3, #36	; 0x24
 80214de:	d906      	bls.n	80214ee <_strtol_l.isra.0+0x1a>
 80214e0:	f7fe fa8c 	bl	801f9fc <__errno>
 80214e4:	2316      	movs	r3, #22
 80214e6:	6003      	str	r3, [r0, #0]
 80214e8:	2000      	movs	r0, #0
 80214ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214ee:	4f3a      	ldr	r7, [pc, #232]	; (80215d8 <_strtol_l.isra.0+0x104>)
 80214f0:	468e      	mov	lr, r1
 80214f2:	4676      	mov	r6, lr
 80214f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80214f8:	5de5      	ldrb	r5, [r4, r7]
 80214fa:	f015 0508 	ands.w	r5, r5, #8
 80214fe:	d1f8      	bne.n	80214f2 <_strtol_l.isra.0+0x1e>
 8021500:	2c2d      	cmp	r4, #45	; 0x2d
 8021502:	d134      	bne.n	802156e <_strtol_l.isra.0+0x9a>
 8021504:	f89e 4000 	ldrb.w	r4, [lr]
 8021508:	f04f 0801 	mov.w	r8, #1
 802150c:	f106 0e02 	add.w	lr, r6, #2
 8021510:	2b00      	cmp	r3, #0
 8021512:	d05c      	beq.n	80215ce <_strtol_l.isra.0+0xfa>
 8021514:	2b10      	cmp	r3, #16
 8021516:	d10c      	bne.n	8021532 <_strtol_l.isra.0+0x5e>
 8021518:	2c30      	cmp	r4, #48	; 0x30
 802151a:	d10a      	bne.n	8021532 <_strtol_l.isra.0+0x5e>
 802151c:	f89e 4000 	ldrb.w	r4, [lr]
 8021520:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021524:	2c58      	cmp	r4, #88	; 0x58
 8021526:	d14d      	bne.n	80215c4 <_strtol_l.isra.0+0xf0>
 8021528:	f89e 4001 	ldrb.w	r4, [lr, #1]
 802152c:	2310      	movs	r3, #16
 802152e:	f10e 0e02 	add.w	lr, lr, #2
 8021532:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021536:	f10c 3cff 	add.w	ip, ip, #4294967295
 802153a:	2600      	movs	r6, #0
 802153c:	fbbc f9f3 	udiv	r9, ip, r3
 8021540:	4635      	mov	r5, r6
 8021542:	fb03 ca19 	mls	sl, r3, r9, ip
 8021546:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802154a:	2f09      	cmp	r7, #9
 802154c:	d818      	bhi.n	8021580 <_strtol_l.isra.0+0xac>
 802154e:	463c      	mov	r4, r7
 8021550:	42a3      	cmp	r3, r4
 8021552:	dd24      	ble.n	802159e <_strtol_l.isra.0+0xca>
 8021554:	2e00      	cmp	r6, #0
 8021556:	db1f      	blt.n	8021598 <_strtol_l.isra.0+0xc4>
 8021558:	45a9      	cmp	r9, r5
 802155a:	d31d      	bcc.n	8021598 <_strtol_l.isra.0+0xc4>
 802155c:	d101      	bne.n	8021562 <_strtol_l.isra.0+0x8e>
 802155e:	45a2      	cmp	sl, r4
 8021560:	db1a      	blt.n	8021598 <_strtol_l.isra.0+0xc4>
 8021562:	fb05 4503 	mla	r5, r5, r3, r4
 8021566:	2601      	movs	r6, #1
 8021568:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802156c:	e7eb      	b.n	8021546 <_strtol_l.isra.0+0x72>
 802156e:	2c2b      	cmp	r4, #43	; 0x2b
 8021570:	bf08      	it	eq
 8021572:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021576:	46a8      	mov	r8, r5
 8021578:	bf08      	it	eq
 802157a:	f106 0e02 	addeq.w	lr, r6, #2
 802157e:	e7c7      	b.n	8021510 <_strtol_l.isra.0+0x3c>
 8021580:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021584:	2f19      	cmp	r7, #25
 8021586:	d801      	bhi.n	802158c <_strtol_l.isra.0+0xb8>
 8021588:	3c37      	subs	r4, #55	; 0x37
 802158a:	e7e1      	b.n	8021550 <_strtol_l.isra.0+0x7c>
 802158c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021590:	2f19      	cmp	r7, #25
 8021592:	d804      	bhi.n	802159e <_strtol_l.isra.0+0xca>
 8021594:	3c57      	subs	r4, #87	; 0x57
 8021596:	e7db      	b.n	8021550 <_strtol_l.isra.0+0x7c>
 8021598:	f04f 36ff 	mov.w	r6, #4294967295
 802159c:	e7e4      	b.n	8021568 <_strtol_l.isra.0+0x94>
 802159e:	2e00      	cmp	r6, #0
 80215a0:	da05      	bge.n	80215ae <_strtol_l.isra.0+0xda>
 80215a2:	2322      	movs	r3, #34	; 0x22
 80215a4:	6003      	str	r3, [r0, #0]
 80215a6:	4665      	mov	r5, ip
 80215a8:	b942      	cbnz	r2, 80215bc <_strtol_l.isra.0+0xe8>
 80215aa:	4628      	mov	r0, r5
 80215ac:	e79d      	b.n	80214ea <_strtol_l.isra.0+0x16>
 80215ae:	f1b8 0f00 	cmp.w	r8, #0
 80215b2:	d000      	beq.n	80215b6 <_strtol_l.isra.0+0xe2>
 80215b4:	426d      	negs	r5, r5
 80215b6:	2a00      	cmp	r2, #0
 80215b8:	d0f7      	beq.n	80215aa <_strtol_l.isra.0+0xd6>
 80215ba:	b10e      	cbz	r6, 80215c0 <_strtol_l.isra.0+0xec>
 80215bc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80215c0:	6011      	str	r1, [r2, #0]
 80215c2:	e7f2      	b.n	80215aa <_strtol_l.isra.0+0xd6>
 80215c4:	2430      	movs	r4, #48	; 0x30
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d1b3      	bne.n	8021532 <_strtol_l.isra.0+0x5e>
 80215ca:	2308      	movs	r3, #8
 80215cc:	e7b1      	b.n	8021532 <_strtol_l.isra.0+0x5e>
 80215ce:	2c30      	cmp	r4, #48	; 0x30
 80215d0:	d0a4      	beq.n	802151c <_strtol_l.isra.0+0x48>
 80215d2:	230a      	movs	r3, #10
 80215d4:	e7ad      	b.n	8021532 <_strtol_l.isra.0+0x5e>
 80215d6:	bf00      	nop
 80215d8:	080299a1 	.word	0x080299a1

080215dc <_strtol_r>:
 80215dc:	f7ff bf7a 	b.w	80214d4 <_strtol_l.isra.0>

080215e0 <strtol>:
 80215e0:	4613      	mov	r3, r2
 80215e2:	460a      	mov	r2, r1
 80215e4:	4601      	mov	r1, r0
 80215e6:	4802      	ldr	r0, [pc, #8]	; (80215f0 <strtol+0x10>)
 80215e8:	6800      	ldr	r0, [r0, #0]
 80215ea:	f7ff bf73 	b.w	80214d4 <_strtol_l.isra.0>
 80215ee:	bf00      	nop
 80215f0:	20000108 	.word	0x20000108

080215f4 <_strtoul_l.isra.0>:
 80215f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80215f8:	4e3b      	ldr	r6, [pc, #236]	; (80216e8 <_strtoul_l.isra.0+0xf4>)
 80215fa:	4686      	mov	lr, r0
 80215fc:	468c      	mov	ip, r1
 80215fe:	4660      	mov	r0, ip
 8021600:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021604:	5da5      	ldrb	r5, [r4, r6]
 8021606:	f015 0508 	ands.w	r5, r5, #8
 802160a:	d1f8      	bne.n	80215fe <_strtoul_l.isra.0+0xa>
 802160c:	2c2d      	cmp	r4, #45	; 0x2d
 802160e:	d134      	bne.n	802167a <_strtoul_l.isra.0+0x86>
 8021610:	f89c 4000 	ldrb.w	r4, [ip]
 8021614:	f04f 0801 	mov.w	r8, #1
 8021618:	f100 0c02 	add.w	ip, r0, #2
 802161c:	2b00      	cmp	r3, #0
 802161e:	d05e      	beq.n	80216de <_strtoul_l.isra.0+0xea>
 8021620:	2b10      	cmp	r3, #16
 8021622:	d10c      	bne.n	802163e <_strtoul_l.isra.0+0x4a>
 8021624:	2c30      	cmp	r4, #48	; 0x30
 8021626:	d10a      	bne.n	802163e <_strtoul_l.isra.0+0x4a>
 8021628:	f89c 0000 	ldrb.w	r0, [ip]
 802162c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8021630:	2858      	cmp	r0, #88	; 0x58
 8021632:	d14f      	bne.n	80216d4 <_strtoul_l.isra.0+0xe0>
 8021634:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8021638:	2310      	movs	r3, #16
 802163a:	f10c 0c02 	add.w	ip, ip, #2
 802163e:	f04f 37ff 	mov.w	r7, #4294967295
 8021642:	2500      	movs	r5, #0
 8021644:	fbb7 f7f3 	udiv	r7, r7, r3
 8021648:	fb03 f907 	mul.w	r9, r3, r7
 802164c:	ea6f 0909 	mvn.w	r9, r9
 8021650:	4628      	mov	r0, r5
 8021652:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8021656:	2e09      	cmp	r6, #9
 8021658:	d818      	bhi.n	802168c <_strtoul_l.isra.0+0x98>
 802165a:	4634      	mov	r4, r6
 802165c:	42a3      	cmp	r3, r4
 802165e:	dd24      	ble.n	80216aa <_strtoul_l.isra.0+0xb6>
 8021660:	2d00      	cmp	r5, #0
 8021662:	db1f      	blt.n	80216a4 <_strtoul_l.isra.0+0xb0>
 8021664:	4287      	cmp	r7, r0
 8021666:	d31d      	bcc.n	80216a4 <_strtoul_l.isra.0+0xb0>
 8021668:	d101      	bne.n	802166e <_strtoul_l.isra.0+0x7a>
 802166a:	45a1      	cmp	r9, r4
 802166c:	db1a      	blt.n	80216a4 <_strtoul_l.isra.0+0xb0>
 802166e:	fb00 4003 	mla	r0, r0, r3, r4
 8021672:	2501      	movs	r5, #1
 8021674:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021678:	e7eb      	b.n	8021652 <_strtoul_l.isra.0+0x5e>
 802167a:	2c2b      	cmp	r4, #43	; 0x2b
 802167c:	bf08      	it	eq
 802167e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8021682:	46a8      	mov	r8, r5
 8021684:	bf08      	it	eq
 8021686:	f100 0c02 	addeq.w	ip, r0, #2
 802168a:	e7c7      	b.n	802161c <_strtoul_l.isra.0+0x28>
 802168c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8021690:	2e19      	cmp	r6, #25
 8021692:	d801      	bhi.n	8021698 <_strtoul_l.isra.0+0xa4>
 8021694:	3c37      	subs	r4, #55	; 0x37
 8021696:	e7e1      	b.n	802165c <_strtoul_l.isra.0+0x68>
 8021698:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 802169c:	2e19      	cmp	r6, #25
 802169e:	d804      	bhi.n	80216aa <_strtoul_l.isra.0+0xb6>
 80216a0:	3c57      	subs	r4, #87	; 0x57
 80216a2:	e7db      	b.n	802165c <_strtoul_l.isra.0+0x68>
 80216a4:	f04f 35ff 	mov.w	r5, #4294967295
 80216a8:	e7e4      	b.n	8021674 <_strtoul_l.isra.0+0x80>
 80216aa:	2d00      	cmp	r5, #0
 80216ac:	da07      	bge.n	80216be <_strtoul_l.isra.0+0xca>
 80216ae:	2322      	movs	r3, #34	; 0x22
 80216b0:	f8ce 3000 	str.w	r3, [lr]
 80216b4:	f04f 30ff 	mov.w	r0, #4294967295
 80216b8:	b942      	cbnz	r2, 80216cc <_strtoul_l.isra.0+0xd8>
 80216ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80216be:	f1b8 0f00 	cmp.w	r8, #0
 80216c2:	d000      	beq.n	80216c6 <_strtoul_l.isra.0+0xd2>
 80216c4:	4240      	negs	r0, r0
 80216c6:	2a00      	cmp	r2, #0
 80216c8:	d0f7      	beq.n	80216ba <_strtoul_l.isra.0+0xc6>
 80216ca:	b10d      	cbz	r5, 80216d0 <_strtoul_l.isra.0+0xdc>
 80216cc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80216d0:	6011      	str	r1, [r2, #0]
 80216d2:	e7f2      	b.n	80216ba <_strtoul_l.isra.0+0xc6>
 80216d4:	2430      	movs	r4, #48	; 0x30
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	d1b1      	bne.n	802163e <_strtoul_l.isra.0+0x4a>
 80216da:	2308      	movs	r3, #8
 80216dc:	e7af      	b.n	802163e <_strtoul_l.isra.0+0x4a>
 80216de:	2c30      	cmp	r4, #48	; 0x30
 80216e0:	d0a2      	beq.n	8021628 <_strtoul_l.isra.0+0x34>
 80216e2:	230a      	movs	r3, #10
 80216e4:	e7ab      	b.n	802163e <_strtoul_l.isra.0+0x4a>
 80216e6:	bf00      	nop
 80216e8:	080299a1 	.word	0x080299a1

080216ec <_strtoul_r>:
 80216ec:	f7ff bf82 	b.w	80215f4 <_strtoul_l.isra.0>

080216f0 <strtoul>:
 80216f0:	4613      	mov	r3, r2
 80216f2:	460a      	mov	r2, r1
 80216f4:	4601      	mov	r1, r0
 80216f6:	4802      	ldr	r0, [pc, #8]	; (8021700 <strtoul+0x10>)
 80216f8:	6800      	ldr	r0, [r0, #0]
 80216fa:	f7ff bf7b 	b.w	80215f4 <_strtoul_l.isra.0>
 80216fe:	bf00      	nop
 8021700:	20000108 	.word	0x20000108

08021704 <__tzcalc_limits>:
 8021704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021708:	4680      	mov	r8, r0
 802170a:	f000 fc6d 	bl	8021fe8 <__gettzinfo>
 802170e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8021712:	4598      	cmp	r8, r3
 8021714:	f340 8098 	ble.w	8021848 <__tzcalc_limits+0x144>
 8021718:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 802171c:	4443      	add	r3, r8
 802171e:	109b      	asrs	r3, r3, #2
 8021720:	f240 126d 	movw	r2, #365	; 0x16d
 8021724:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8021728:	fb02 3505 	mla	r5, r2, r5, r3
 802172c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8021730:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8021734:	fb93 f3f2 	sdiv	r3, r3, r2
 8021738:	441d      	add	r5, r3
 802173a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802173e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8021742:	fb98 f7f3 	sdiv	r7, r8, r3
 8021746:	fb03 8717 	mls	r7, r3, r7, r8
 802174a:	4442      	add	r2, r8
 802174c:	fab7 fc87 	clz	ip, r7
 8021750:	fbb2 f2f3 	udiv	r2, r2, r3
 8021754:	f008 0303 	and.w	r3, r8, #3
 8021758:	4415      	add	r5, r2
 802175a:	2264      	movs	r2, #100	; 0x64
 802175c:	f8c0 8004 	str.w	r8, [r0, #4]
 8021760:	fb98 f6f2 	sdiv	r6, r8, r2
 8021764:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021768:	fb02 8616 	mls	r6, r2, r6, r8
 802176c:	4604      	mov	r4, r0
 802176e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8021772:	9300      	str	r3, [sp, #0]
 8021774:	f04f 0e07 	mov.w	lr, #7
 8021778:	7a22      	ldrb	r2, [r4, #8]
 802177a:	6963      	ldr	r3, [r4, #20]
 802177c:	2a4a      	cmp	r2, #74	; 0x4a
 802177e:	d128      	bne.n	80217d2 <__tzcalc_limits+0xce>
 8021780:	9900      	ldr	r1, [sp, #0]
 8021782:	18ea      	adds	r2, r5, r3
 8021784:	b901      	cbnz	r1, 8021788 <__tzcalc_limits+0x84>
 8021786:	b906      	cbnz	r6, 802178a <__tzcalc_limits+0x86>
 8021788:	bb0f      	cbnz	r7, 80217ce <__tzcalc_limits+0xca>
 802178a:	2b3b      	cmp	r3, #59	; 0x3b
 802178c:	bfd4      	ite	le
 802178e:	2300      	movle	r3, #0
 8021790:	2301      	movgt	r3, #1
 8021792:	4413      	add	r3, r2
 8021794:	1e5a      	subs	r2, r3, #1
 8021796:	69a3      	ldr	r3, [r4, #24]
 8021798:	492c      	ldr	r1, [pc, #176]	; (802184c <__tzcalc_limits+0x148>)
 802179a:	fb01 3202 	mla	r2, r1, r2, r3
 802179e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80217a0:	4413      	add	r3, r2
 80217a2:	461a      	mov	r2, r3
 80217a4:	17db      	asrs	r3, r3, #31
 80217a6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80217aa:	3428      	adds	r4, #40	; 0x28
 80217ac:	45a3      	cmp	fp, r4
 80217ae:	d1e3      	bne.n	8021778 <__tzcalc_limits+0x74>
 80217b0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80217b4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80217b8:	4294      	cmp	r4, r2
 80217ba:	eb75 0303 	sbcs.w	r3, r5, r3
 80217be:	bfb4      	ite	lt
 80217c0:	2301      	movlt	r3, #1
 80217c2:	2300      	movge	r3, #0
 80217c4:	6003      	str	r3, [r0, #0]
 80217c6:	2001      	movs	r0, #1
 80217c8:	b003      	add	sp, #12
 80217ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217ce:	2300      	movs	r3, #0
 80217d0:	e7df      	b.n	8021792 <__tzcalc_limits+0x8e>
 80217d2:	2a44      	cmp	r2, #68	; 0x44
 80217d4:	d101      	bne.n	80217da <__tzcalc_limits+0xd6>
 80217d6:	18ea      	adds	r2, r5, r3
 80217d8:	e7dd      	b.n	8021796 <__tzcalc_limits+0x92>
 80217da:	9a00      	ldr	r2, [sp, #0]
 80217dc:	bb72      	cbnz	r2, 802183c <__tzcalc_limits+0x138>
 80217de:	2e00      	cmp	r6, #0
 80217e0:	bf0c      	ite	eq
 80217e2:	46e0      	moveq	r8, ip
 80217e4:	f04f 0801 	movne.w	r8, #1
 80217e8:	4919      	ldr	r1, [pc, #100]	; (8021850 <__tzcalc_limits+0x14c>)
 80217ea:	68e2      	ldr	r2, [r4, #12]
 80217ec:	9201      	str	r2, [sp, #4]
 80217ee:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80217f2:	fb0a 1808 	mla	r8, sl, r8, r1
 80217f6:	462a      	mov	r2, r5
 80217f8:	f04f 0900 	mov.w	r9, #0
 80217fc:	f1a8 0804 	sub.w	r8, r8, #4
 8021800:	9901      	ldr	r1, [sp, #4]
 8021802:	f109 0901 	add.w	r9, r9, #1
 8021806:	4549      	cmp	r1, r9
 8021808:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 802180c:	dc18      	bgt.n	8021840 <__tzcalc_limits+0x13c>
 802180e:	f102 0804 	add.w	r8, r2, #4
 8021812:	fb98 f9fe 	sdiv	r9, r8, lr
 8021816:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 802181a:	eba8 0909 	sub.w	r9, r8, r9
 802181e:	ebb3 0909 	subs.w	r9, r3, r9
 8021822:	6923      	ldr	r3, [r4, #16]
 8021824:	f103 33ff 	add.w	r3, r3, #4294967295
 8021828:	bf48      	it	mi
 802182a:	f109 0907 	addmi.w	r9, r9, #7
 802182e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021832:	444b      	add	r3, r9
 8021834:	4553      	cmp	r3, sl
 8021836:	da05      	bge.n	8021844 <__tzcalc_limits+0x140>
 8021838:	441a      	add	r2, r3
 802183a:	e7ac      	b.n	8021796 <__tzcalc_limits+0x92>
 802183c:	46e0      	mov	r8, ip
 802183e:	e7d3      	b.n	80217e8 <__tzcalc_limits+0xe4>
 8021840:	4452      	add	r2, sl
 8021842:	e7dd      	b.n	8021800 <__tzcalc_limits+0xfc>
 8021844:	3b07      	subs	r3, #7
 8021846:	e7f5      	b.n	8021834 <__tzcalc_limits+0x130>
 8021848:	2000      	movs	r0, #0
 802184a:	e7bd      	b.n	80217c8 <__tzcalc_limits+0xc4>
 802184c:	00015180 	.word	0x00015180
 8021850:	080295e8 	.word	0x080295e8

08021854 <__tz_lock>:
 8021854:	4801      	ldr	r0, [pc, #4]	; (802185c <__tz_lock+0x8>)
 8021856:	f7fe be29 	b.w	80204ac <__retarget_lock_acquire>
 802185a:	bf00      	nop
 802185c:	20000f8f 	.word	0x20000f8f

08021860 <__tz_unlock>:
 8021860:	4801      	ldr	r0, [pc, #4]	; (8021868 <__tz_unlock+0x8>)
 8021862:	f7fe be25 	b.w	80204b0 <__retarget_lock_release>
 8021866:	bf00      	nop
 8021868:	20000f8f 	.word	0x20000f8f

0802186c <_tzset_unlocked>:
 802186c:	4b01      	ldr	r3, [pc, #4]	; (8021874 <_tzset_unlocked+0x8>)
 802186e:	6818      	ldr	r0, [r3, #0]
 8021870:	f000 b802 	b.w	8021878 <_tzset_unlocked_r>
 8021874:	20000108 	.word	0x20000108

08021878 <_tzset_unlocked_r>:
 8021878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802187c:	b08d      	sub	sp, #52	; 0x34
 802187e:	4607      	mov	r7, r0
 8021880:	f000 fbb2 	bl	8021fe8 <__gettzinfo>
 8021884:	49ae      	ldr	r1, [pc, #696]	; (8021b40 <_tzset_unlocked_r+0x2c8>)
 8021886:	4eaf      	ldr	r6, [pc, #700]	; (8021b44 <_tzset_unlocked_r+0x2cc>)
 8021888:	4605      	mov	r5, r0
 802188a:	4638      	mov	r0, r7
 802188c:	f000 fba4 	bl	8021fd8 <_getenv_r>
 8021890:	4604      	mov	r4, r0
 8021892:	b970      	cbnz	r0, 80218b2 <_tzset_unlocked_r+0x3a>
 8021894:	4bac      	ldr	r3, [pc, #688]	; (8021b48 <_tzset_unlocked_r+0x2d0>)
 8021896:	4aad      	ldr	r2, [pc, #692]	; (8021b4c <_tzset_unlocked_r+0x2d4>)
 8021898:	6018      	str	r0, [r3, #0]
 802189a:	4bad      	ldr	r3, [pc, #692]	; (8021b50 <_tzset_unlocked_r+0x2d8>)
 802189c:	6018      	str	r0, [r3, #0]
 802189e:	4bad      	ldr	r3, [pc, #692]	; (8021b54 <_tzset_unlocked_r+0x2dc>)
 80218a0:	6830      	ldr	r0, [r6, #0]
 80218a2:	e9c3 2200 	strd	r2, r2, [r3]
 80218a6:	f7fe fe71 	bl	802058c <free>
 80218aa:	6034      	str	r4, [r6, #0]
 80218ac:	b00d      	add	sp, #52	; 0x34
 80218ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218b2:	6831      	ldr	r1, [r6, #0]
 80218b4:	2900      	cmp	r1, #0
 80218b6:	d15f      	bne.n	8021978 <_tzset_unlocked_r+0x100>
 80218b8:	6830      	ldr	r0, [r6, #0]
 80218ba:	f7fe fe67 	bl	802058c <free>
 80218be:	4620      	mov	r0, r4
 80218c0:	f7de fcbc 	bl	800023c <strlen>
 80218c4:	1c41      	adds	r1, r0, #1
 80218c6:	4638      	mov	r0, r7
 80218c8:	f7fe fede 	bl	8020688 <_malloc_r>
 80218cc:	6030      	str	r0, [r6, #0]
 80218ce:	2800      	cmp	r0, #0
 80218d0:	d157      	bne.n	8021982 <_tzset_unlocked_r+0x10a>
 80218d2:	7823      	ldrb	r3, [r4, #0]
 80218d4:	4aa0      	ldr	r2, [pc, #640]	; (8021b58 <_tzset_unlocked_r+0x2e0>)
 80218d6:	49a1      	ldr	r1, [pc, #644]	; (8021b5c <_tzset_unlocked_r+0x2e4>)
 80218d8:	2b3a      	cmp	r3, #58	; 0x3a
 80218da:	bf08      	it	eq
 80218dc:	3401      	addeq	r4, #1
 80218de:	ae0a      	add	r6, sp, #40	; 0x28
 80218e0:	4633      	mov	r3, r6
 80218e2:	4620      	mov	r0, r4
 80218e4:	f001 f976 	bl	8022bd4 <siscanf>
 80218e8:	2800      	cmp	r0, #0
 80218ea:	dddf      	ble.n	80218ac <_tzset_unlocked_r+0x34>
 80218ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80218ee:	18e7      	adds	r7, r4, r3
 80218f0:	5ce3      	ldrb	r3, [r4, r3]
 80218f2:	2b2d      	cmp	r3, #45	; 0x2d
 80218f4:	d149      	bne.n	802198a <_tzset_unlocked_r+0x112>
 80218f6:	3701      	adds	r7, #1
 80218f8:	f04f 34ff 	mov.w	r4, #4294967295
 80218fc:	f10d 0a20 	add.w	sl, sp, #32
 8021900:	f10d 0b1e 	add.w	fp, sp, #30
 8021904:	f04f 0800 	mov.w	r8, #0
 8021908:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 802190c:	4994      	ldr	r1, [pc, #592]	; (8021b60 <_tzset_unlocked_r+0x2e8>)
 802190e:	9603      	str	r6, [sp, #12]
 8021910:	f8cd b000 	str.w	fp, [sp]
 8021914:	4633      	mov	r3, r6
 8021916:	aa07      	add	r2, sp, #28
 8021918:	4638      	mov	r0, r7
 802191a:	f8ad 801e 	strh.w	r8, [sp, #30]
 802191e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8021922:	f001 f957 	bl	8022bd4 <siscanf>
 8021926:	4540      	cmp	r0, r8
 8021928:	ddc0      	ble.n	80218ac <_tzset_unlocked_r+0x34>
 802192a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802192e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021932:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8021b6c <_tzset_unlocked_r+0x2f4>
 8021936:	213c      	movs	r1, #60	; 0x3c
 8021938:	fb01 2203 	mla	r2, r1, r3, r2
 802193c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021940:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021944:	fb01 2303 	mla	r3, r1, r3, r2
 8021948:	435c      	muls	r4, r3
 802194a:	62ac      	str	r4, [r5, #40]	; 0x28
 802194c:	4c81      	ldr	r4, [pc, #516]	; (8021b54 <_tzset_unlocked_r+0x2dc>)
 802194e:	4b82      	ldr	r3, [pc, #520]	; (8021b58 <_tzset_unlocked_r+0x2e0>)
 8021950:	6023      	str	r3, [r4, #0]
 8021952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021954:	4981      	ldr	r1, [pc, #516]	; (8021b5c <_tzset_unlocked_r+0x2e4>)
 8021956:	441f      	add	r7, r3
 8021958:	464a      	mov	r2, r9
 802195a:	4633      	mov	r3, r6
 802195c:	4638      	mov	r0, r7
 802195e:	f001 f939 	bl	8022bd4 <siscanf>
 8021962:	4540      	cmp	r0, r8
 8021964:	dc16      	bgt.n	8021994 <_tzset_unlocked_r+0x11c>
 8021966:	6823      	ldr	r3, [r4, #0]
 8021968:	6063      	str	r3, [r4, #4]
 802196a:	4b77      	ldr	r3, [pc, #476]	; (8021b48 <_tzset_unlocked_r+0x2d0>)
 802196c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802196e:	601a      	str	r2, [r3, #0]
 8021970:	4b77      	ldr	r3, [pc, #476]	; (8021b50 <_tzset_unlocked_r+0x2d8>)
 8021972:	f8c3 8000 	str.w	r8, [r3]
 8021976:	e799      	b.n	80218ac <_tzset_unlocked_r+0x34>
 8021978:	f7de fc68 	bl	800024c <strcmp>
 802197c:	2800      	cmp	r0, #0
 802197e:	d19b      	bne.n	80218b8 <_tzset_unlocked_r+0x40>
 8021980:	e794      	b.n	80218ac <_tzset_unlocked_r+0x34>
 8021982:	4621      	mov	r1, r4
 8021984:	f001 f952 	bl	8022c2c <strcpy>
 8021988:	e7a3      	b.n	80218d2 <_tzset_unlocked_r+0x5a>
 802198a:	2b2b      	cmp	r3, #43	; 0x2b
 802198c:	bf08      	it	eq
 802198e:	3701      	addeq	r7, #1
 8021990:	2401      	movs	r4, #1
 8021992:	e7b3      	b.n	80218fc <_tzset_unlocked_r+0x84>
 8021994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021996:	f8c4 9004 	str.w	r9, [r4, #4]
 802199a:	18fc      	adds	r4, r7, r3
 802199c:	5cfb      	ldrb	r3, [r7, r3]
 802199e:	2b2d      	cmp	r3, #45	; 0x2d
 80219a0:	f040 808b 	bne.w	8021aba <_tzset_unlocked_r+0x242>
 80219a4:	3401      	adds	r4, #1
 80219a6:	f04f 37ff 	mov.w	r7, #4294967295
 80219aa:	2300      	movs	r3, #0
 80219ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 80219b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80219b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80219b8:	930a      	str	r3, [sp, #40]	; 0x28
 80219ba:	e9cd a602 	strd	sl, r6, [sp, #8]
 80219be:	e9cd b600 	strd	fp, r6, [sp]
 80219c2:	4967      	ldr	r1, [pc, #412]	; (8021b60 <_tzset_unlocked_r+0x2e8>)
 80219c4:	4633      	mov	r3, r6
 80219c6:	aa07      	add	r2, sp, #28
 80219c8:	4620      	mov	r0, r4
 80219ca:	f001 f903 	bl	8022bd4 <siscanf>
 80219ce:	2800      	cmp	r0, #0
 80219d0:	dc78      	bgt.n	8021ac4 <_tzset_unlocked_r+0x24c>
 80219d2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80219d4:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80219d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80219da:	652f      	str	r7, [r5, #80]	; 0x50
 80219dc:	441c      	add	r4, r3
 80219de:	462f      	mov	r7, r5
 80219e0:	f04f 0900 	mov.w	r9, #0
 80219e4:	7823      	ldrb	r3, [r4, #0]
 80219e6:	2b2c      	cmp	r3, #44	; 0x2c
 80219e8:	bf08      	it	eq
 80219ea:	3401      	addeq	r4, #1
 80219ec:	f894 8000 	ldrb.w	r8, [r4]
 80219f0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80219f4:	d178      	bne.n	8021ae8 <_tzset_unlocked_r+0x270>
 80219f6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80219fa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80219fe:	ab09      	add	r3, sp, #36	; 0x24
 8021a00:	9300      	str	r3, [sp, #0]
 8021a02:	4958      	ldr	r1, [pc, #352]	; (8021b64 <_tzset_unlocked_r+0x2ec>)
 8021a04:	9603      	str	r6, [sp, #12]
 8021a06:	4633      	mov	r3, r6
 8021a08:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8021a0c:	4620      	mov	r0, r4
 8021a0e:	f001 f8e1 	bl	8022bd4 <siscanf>
 8021a12:	2803      	cmp	r0, #3
 8021a14:	f47f af4a 	bne.w	80218ac <_tzset_unlocked_r+0x34>
 8021a18:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8021a1c:	1e4b      	subs	r3, r1, #1
 8021a1e:	2b0b      	cmp	r3, #11
 8021a20:	f63f af44 	bhi.w	80218ac <_tzset_unlocked_r+0x34>
 8021a24:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021a28:	1e53      	subs	r3, r2, #1
 8021a2a:	2b04      	cmp	r3, #4
 8021a2c:	f63f af3e 	bhi.w	80218ac <_tzset_unlocked_r+0x34>
 8021a30:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8021a34:	2b06      	cmp	r3, #6
 8021a36:	f63f af39 	bhi.w	80218ac <_tzset_unlocked_r+0x34>
 8021a3a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8021a3e:	f887 8008 	strb.w	r8, [r7, #8]
 8021a42:	617b      	str	r3, [r7, #20]
 8021a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a46:	eb04 0803 	add.w	r8, r4, r3
 8021a4a:	2302      	movs	r3, #2
 8021a4c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021a50:	2300      	movs	r3, #0
 8021a52:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021a56:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8021a5c:	f898 3000 	ldrb.w	r3, [r8]
 8021a60:	2b2f      	cmp	r3, #47	; 0x2f
 8021a62:	d109      	bne.n	8021a78 <_tzset_unlocked_r+0x200>
 8021a64:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021a68:	e9cd b600 	strd	fp, r6, [sp]
 8021a6c:	493e      	ldr	r1, [pc, #248]	; (8021b68 <_tzset_unlocked_r+0x2f0>)
 8021a6e:	4633      	mov	r3, r6
 8021a70:	aa07      	add	r2, sp, #28
 8021a72:	4640      	mov	r0, r8
 8021a74:	f001 f8ae 	bl	8022bd4 <siscanf>
 8021a78:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021a7c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021a80:	213c      	movs	r1, #60	; 0x3c
 8021a82:	fb01 2203 	mla	r2, r1, r3, r2
 8021a86:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021a8a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021a8e:	fb01 2303 	mla	r3, r1, r3, r2
 8021a92:	61bb      	str	r3, [r7, #24]
 8021a94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021a96:	3728      	adds	r7, #40	; 0x28
 8021a98:	4444      	add	r4, r8
 8021a9a:	f1b9 0f00 	cmp.w	r9, #0
 8021a9e:	d020      	beq.n	8021ae2 <_tzset_unlocked_r+0x26a>
 8021aa0:	6868      	ldr	r0, [r5, #4]
 8021aa2:	f7ff fe2f 	bl	8021704 <__tzcalc_limits>
 8021aa6:	4b28      	ldr	r3, [pc, #160]	; (8021b48 <_tzset_unlocked_r+0x2d0>)
 8021aa8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021aaa:	601a      	str	r2, [r3, #0]
 8021aac:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8021aae:	1a9b      	subs	r3, r3, r2
 8021ab0:	4a27      	ldr	r2, [pc, #156]	; (8021b50 <_tzset_unlocked_r+0x2d8>)
 8021ab2:	bf18      	it	ne
 8021ab4:	2301      	movne	r3, #1
 8021ab6:	6013      	str	r3, [r2, #0]
 8021ab8:	e6f8      	b.n	80218ac <_tzset_unlocked_r+0x34>
 8021aba:	2b2b      	cmp	r3, #43	; 0x2b
 8021abc:	bf08      	it	eq
 8021abe:	3401      	addeq	r4, #1
 8021ac0:	2701      	movs	r7, #1
 8021ac2:	e772      	b.n	80219aa <_tzset_unlocked_r+0x132>
 8021ac4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021ac8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021acc:	213c      	movs	r1, #60	; 0x3c
 8021ace:	fb01 2203 	mla	r2, r1, r3, r2
 8021ad2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021ad6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021ada:	fb01 2303 	mla	r3, r1, r3, r2
 8021ade:	435f      	muls	r7, r3
 8021ae0:	e77a      	b.n	80219d8 <_tzset_unlocked_r+0x160>
 8021ae2:	f04f 0901 	mov.w	r9, #1
 8021ae6:	e77d      	b.n	80219e4 <_tzset_unlocked_r+0x16c>
 8021ae8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8021aec:	bf06      	itte	eq
 8021aee:	3401      	addeq	r4, #1
 8021af0:	4643      	moveq	r3, r8
 8021af2:	2344      	movne	r3, #68	; 0x44
 8021af4:	220a      	movs	r2, #10
 8021af6:	a90b      	add	r1, sp, #44	; 0x2c
 8021af8:	4620      	mov	r0, r4
 8021afa:	9305      	str	r3, [sp, #20]
 8021afc:	f7ff fdf8 	bl	80216f0 <strtoul>
 8021b00:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8021b04:	9b05      	ldr	r3, [sp, #20]
 8021b06:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8021b0a:	45a0      	cmp	r8, r4
 8021b0c:	d114      	bne.n	8021b38 <_tzset_unlocked_r+0x2c0>
 8021b0e:	234d      	movs	r3, #77	; 0x4d
 8021b10:	f1b9 0f00 	cmp.w	r9, #0
 8021b14:	d107      	bne.n	8021b26 <_tzset_unlocked_r+0x2ae>
 8021b16:	722b      	strb	r3, [r5, #8]
 8021b18:	2103      	movs	r1, #3
 8021b1a:	2302      	movs	r3, #2
 8021b1c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8021b20:	f8c5 9014 	str.w	r9, [r5, #20]
 8021b24:	e791      	b.n	8021a4a <_tzset_unlocked_r+0x1d2>
 8021b26:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8021b2a:	220b      	movs	r2, #11
 8021b2c:	2301      	movs	r3, #1
 8021b2e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8021b32:	2300      	movs	r3, #0
 8021b34:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021b36:	e788      	b.n	8021a4a <_tzset_unlocked_r+0x1d2>
 8021b38:	b280      	uxth	r0, r0
 8021b3a:	723b      	strb	r3, [r7, #8]
 8021b3c:	6178      	str	r0, [r7, #20]
 8021b3e:	e784      	b.n	8021a4a <_tzset_unlocked_r+0x1d2>
 8021b40:	08029928 	.word	0x08029928
 8021b44:	20000ee8 	.word	0x20000ee8
 8021b48:	20000ef0 	.word	0x20000ef0
 8021b4c:	0802992b 	.word	0x0802992b
 8021b50:	20000eec 	.word	0x20000eec
 8021b54:	2000016c 	.word	0x2000016c
 8021b58:	20000edb 	.word	0x20000edb
 8021b5c:	0802992f 	.word	0x0802992f
 8021b60:	08029952 	.word	0x08029952
 8021b64:	0802993e 	.word	0x0802993e
 8021b68:	08029951 	.word	0x08029951
 8021b6c:	20000ed0 	.word	0x20000ed0

08021b70 <_vsniprintf_r>:
 8021b70:	b530      	push	{r4, r5, lr}
 8021b72:	1e14      	subs	r4, r2, #0
 8021b74:	4605      	mov	r5, r0
 8021b76:	b09b      	sub	sp, #108	; 0x6c
 8021b78:	4618      	mov	r0, r3
 8021b7a:	da05      	bge.n	8021b88 <_vsniprintf_r+0x18>
 8021b7c:	238b      	movs	r3, #139	; 0x8b
 8021b7e:	602b      	str	r3, [r5, #0]
 8021b80:	f04f 30ff 	mov.w	r0, #4294967295
 8021b84:	b01b      	add	sp, #108	; 0x6c
 8021b86:	bd30      	pop	{r4, r5, pc}
 8021b88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021b8c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021b90:	bf14      	ite	ne
 8021b92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021b96:	4623      	moveq	r3, r4
 8021b98:	9302      	str	r3, [sp, #8]
 8021b9a:	9305      	str	r3, [sp, #20]
 8021b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021ba0:	9100      	str	r1, [sp, #0]
 8021ba2:	9104      	str	r1, [sp, #16]
 8021ba4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021ba8:	4602      	mov	r2, r0
 8021baa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021bac:	4669      	mov	r1, sp
 8021bae:	4628      	mov	r0, r5
 8021bb0:	f000 fb94 	bl	80222dc <_svfiprintf_r>
 8021bb4:	1c43      	adds	r3, r0, #1
 8021bb6:	bfbc      	itt	lt
 8021bb8:	238b      	movlt	r3, #139	; 0x8b
 8021bba:	602b      	strlt	r3, [r5, #0]
 8021bbc:	2c00      	cmp	r4, #0
 8021bbe:	d0e1      	beq.n	8021b84 <_vsniprintf_r+0x14>
 8021bc0:	9b00      	ldr	r3, [sp, #0]
 8021bc2:	2200      	movs	r2, #0
 8021bc4:	701a      	strb	r2, [r3, #0]
 8021bc6:	e7dd      	b.n	8021b84 <_vsniprintf_r+0x14>

08021bc8 <vsniprintf>:
 8021bc8:	b507      	push	{r0, r1, r2, lr}
 8021bca:	9300      	str	r3, [sp, #0]
 8021bcc:	4613      	mov	r3, r2
 8021bce:	460a      	mov	r2, r1
 8021bd0:	4601      	mov	r1, r0
 8021bd2:	4803      	ldr	r0, [pc, #12]	; (8021be0 <vsniprintf+0x18>)
 8021bd4:	6800      	ldr	r0, [r0, #0]
 8021bd6:	f7ff ffcb 	bl	8021b70 <_vsniprintf_r>
 8021bda:	b003      	add	sp, #12
 8021bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8021be0:	20000108 	.word	0x20000108

08021be4 <__swbuf_r>:
 8021be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021be6:	460e      	mov	r6, r1
 8021be8:	4614      	mov	r4, r2
 8021bea:	4605      	mov	r5, r0
 8021bec:	b118      	cbz	r0, 8021bf6 <__swbuf_r+0x12>
 8021bee:	6983      	ldr	r3, [r0, #24]
 8021bf0:	b90b      	cbnz	r3, 8021bf6 <__swbuf_r+0x12>
 8021bf2:	f7fe f8a9 	bl	801fd48 <__sinit>
 8021bf6:	4b21      	ldr	r3, [pc, #132]	; (8021c7c <__swbuf_r+0x98>)
 8021bf8:	429c      	cmp	r4, r3
 8021bfa:	d12b      	bne.n	8021c54 <__swbuf_r+0x70>
 8021bfc:	686c      	ldr	r4, [r5, #4]
 8021bfe:	69a3      	ldr	r3, [r4, #24]
 8021c00:	60a3      	str	r3, [r4, #8]
 8021c02:	89a3      	ldrh	r3, [r4, #12]
 8021c04:	071a      	lsls	r2, r3, #28
 8021c06:	d52f      	bpl.n	8021c68 <__swbuf_r+0x84>
 8021c08:	6923      	ldr	r3, [r4, #16]
 8021c0a:	b36b      	cbz	r3, 8021c68 <__swbuf_r+0x84>
 8021c0c:	6923      	ldr	r3, [r4, #16]
 8021c0e:	6820      	ldr	r0, [r4, #0]
 8021c10:	1ac0      	subs	r0, r0, r3
 8021c12:	6963      	ldr	r3, [r4, #20]
 8021c14:	b2f6      	uxtb	r6, r6
 8021c16:	4283      	cmp	r3, r0
 8021c18:	4637      	mov	r7, r6
 8021c1a:	dc04      	bgt.n	8021c26 <__swbuf_r+0x42>
 8021c1c:	4621      	mov	r1, r4
 8021c1e:	4628      	mov	r0, r5
 8021c20:	f7fd ffec 	bl	801fbfc <_fflush_r>
 8021c24:	bb30      	cbnz	r0, 8021c74 <__swbuf_r+0x90>
 8021c26:	68a3      	ldr	r3, [r4, #8]
 8021c28:	3b01      	subs	r3, #1
 8021c2a:	60a3      	str	r3, [r4, #8]
 8021c2c:	6823      	ldr	r3, [r4, #0]
 8021c2e:	1c5a      	adds	r2, r3, #1
 8021c30:	6022      	str	r2, [r4, #0]
 8021c32:	701e      	strb	r6, [r3, #0]
 8021c34:	6963      	ldr	r3, [r4, #20]
 8021c36:	3001      	adds	r0, #1
 8021c38:	4283      	cmp	r3, r0
 8021c3a:	d004      	beq.n	8021c46 <__swbuf_r+0x62>
 8021c3c:	89a3      	ldrh	r3, [r4, #12]
 8021c3e:	07db      	lsls	r3, r3, #31
 8021c40:	d506      	bpl.n	8021c50 <__swbuf_r+0x6c>
 8021c42:	2e0a      	cmp	r6, #10
 8021c44:	d104      	bne.n	8021c50 <__swbuf_r+0x6c>
 8021c46:	4621      	mov	r1, r4
 8021c48:	4628      	mov	r0, r5
 8021c4a:	f7fd ffd7 	bl	801fbfc <_fflush_r>
 8021c4e:	b988      	cbnz	r0, 8021c74 <__swbuf_r+0x90>
 8021c50:	4638      	mov	r0, r7
 8021c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c54:	4b0a      	ldr	r3, [pc, #40]	; (8021c80 <__swbuf_r+0x9c>)
 8021c56:	429c      	cmp	r4, r3
 8021c58:	d101      	bne.n	8021c5e <__swbuf_r+0x7a>
 8021c5a:	68ac      	ldr	r4, [r5, #8]
 8021c5c:	e7cf      	b.n	8021bfe <__swbuf_r+0x1a>
 8021c5e:	4b09      	ldr	r3, [pc, #36]	; (8021c84 <__swbuf_r+0xa0>)
 8021c60:	429c      	cmp	r4, r3
 8021c62:	bf08      	it	eq
 8021c64:	68ec      	ldreq	r4, [r5, #12]
 8021c66:	e7ca      	b.n	8021bfe <__swbuf_r+0x1a>
 8021c68:	4621      	mov	r1, r4
 8021c6a:	4628      	mov	r0, r5
 8021c6c:	f000 f81e 	bl	8021cac <__swsetup_r>
 8021c70:	2800      	cmp	r0, #0
 8021c72:	d0cb      	beq.n	8021c0c <__swbuf_r+0x28>
 8021c74:	f04f 37ff 	mov.w	r7, #4294967295
 8021c78:	e7ea      	b.n	8021c50 <__swbuf_r+0x6c>
 8021c7a:	bf00      	nop
 8021c7c:	0802952c 	.word	0x0802952c
 8021c80:	0802954c 	.word	0x0802954c
 8021c84:	0802950c 	.word	0x0802950c

08021c88 <_write_r>:
 8021c88:	b538      	push	{r3, r4, r5, lr}
 8021c8a:	4d07      	ldr	r5, [pc, #28]	; (8021ca8 <_write_r+0x20>)
 8021c8c:	4604      	mov	r4, r0
 8021c8e:	4608      	mov	r0, r1
 8021c90:	4611      	mov	r1, r2
 8021c92:	2200      	movs	r2, #0
 8021c94:	602a      	str	r2, [r5, #0]
 8021c96:	461a      	mov	r2, r3
 8021c98:	f7df f89a 	bl	8000dd0 <_write>
 8021c9c:	1c43      	adds	r3, r0, #1
 8021c9e:	d102      	bne.n	8021ca6 <_write_r+0x1e>
 8021ca0:	682b      	ldr	r3, [r5, #0]
 8021ca2:	b103      	cbz	r3, 8021ca6 <_write_r+0x1e>
 8021ca4:	6023      	str	r3, [r4, #0]
 8021ca6:	bd38      	pop	{r3, r4, r5, pc}
 8021ca8:	20000f94 	.word	0x20000f94

08021cac <__swsetup_r>:
 8021cac:	4b32      	ldr	r3, [pc, #200]	; (8021d78 <__swsetup_r+0xcc>)
 8021cae:	b570      	push	{r4, r5, r6, lr}
 8021cb0:	681d      	ldr	r5, [r3, #0]
 8021cb2:	4606      	mov	r6, r0
 8021cb4:	460c      	mov	r4, r1
 8021cb6:	b125      	cbz	r5, 8021cc2 <__swsetup_r+0x16>
 8021cb8:	69ab      	ldr	r3, [r5, #24]
 8021cba:	b913      	cbnz	r3, 8021cc2 <__swsetup_r+0x16>
 8021cbc:	4628      	mov	r0, r5
 8021cbe:	f7fe f843 	bl	801fd48 <__sinit>
 8021cc2:	4b2e      	ldr	r3, [pc, #184]	; (8021d7c <__swsetup_r+0xd0>)
 8021cc4:	429c      	cmp	r4, r3
 8021cc6:	d10f      	bne.n	8021ce8 <__swsetup_r+0x3c>
 8021cc8:	686c      	ldr	r4, [r5, #4]
 8021cca:	89a3      	ldrh	r3, [r4, #12]
 8021ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021cd0:	0719      	lsls	r1, r3, #28
 8021cd2:	d42c      	bmi.n	8021d2e <__swsetup_r+0x82>
 8021cd4:	06dd      	lsls	r5, r3, #27
 8021cd6:	d411      	bmi.n	8021cfc <__swsetup_r+0x50>
 8021cd8:	2309      	movs	r3, #9
 8021cda:	6033      	str	r3, [r6, #0]
 8021cdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021ce0:	81a3      	strh	r3, [r4, #12]
 8021ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8021ce6:	e03e      	b.n	8021d66 <__swsetup_r+0xba>
 8021ce8:	4b25      	ldr	r3, [pc, #148]	; (8021d80 <__swsetup_r+0xd4>)
 8021cea:	429c      	cmp	r4, r3
 8021cec:	d101      	bne.n	8021cf2 <__swsetup_r+0x46>
 8021cee:	68ac      	ldr	r4, [r5, #8]
 8021cf0:	e7eb      	b.n	8021cca <__swsetup_r+0x1e>
 8021cf2:	4b24      	ldr	r3, [pc, #144]	; (8021d84 <__swsetup_r+0xd8>)
 8021cf4:	429c      	cmp	r4, r3
 8021cf6:	bf08      	it	eq
 8021cf8:	68ec      	ldreq	r4, [r5, #12]
 8021cfa:	e7e6      	b.n	8021cca <__swsetup_r+0x1e>
 8021cfc:	0758      	lsls	r0, r3, #29
 8021cfe:	d512      	bpl.n	8021d26 <__swsetup_r+0x7a>
 8021d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021d02:	b141      	cbz	r1, 8021d16 <__swsetup_r+0x6a>
 8021d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021d08:	4299      	cmp	r1, r3
 8021d0a:	d002      	beq.n	8021d12 <__swsetup_r+0x66>
 8021d0c:	4630      	mov	r0, r6
 8021d0e:	f7fe fc6b 	bl	80205e8 <_free_r>
 8021d12:	2300      	movs	r3, #0
 8021d14:	6363      	str	r3, [r4, #52]	; 0x34
 8021d16:	89a3      	ldrh	r3, [r4, #12]
 8021d18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021d1c:	81a3      	strh	r3, [r4, #12]
 8021d1e:	2300      	movs	r3, #0
 8021d20:	6063      	str	r3, [r4, #4]
 8021d22:	6923      	ldr	r3, [r4, #16]
 8021d24:	6023      	str	r3, [r4, #0]
 8021d26:	89a3      	ldrh	r3, [r4, #12]
 8021d28:	f043 0308 	orr.w	r3, r3, #8
 8021d2c:	81a3      	strh	r3, [r4, #12]
 8021d2e:	6923      	ldr	r3, [r4, #16]
 8021d30:	b94b      	cbnz	r3, 8021d46 <__swsetup_r+0x9a>
 8021d32:	89a3      	ldrh	r3, [r4, #12]
 8021d34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021d3c:	d003      	beq.n	8021d46 <__swsetup_r+0x9a>
 8021d3e:	4621      	mov	r1, r4
 8021d40:	4630      	mov	r0, r6
 8021d42:	f7fe fbdb 	bl	80204fc <__smakebuf_r>
 8021d46:	89a0      	ldrh	r0, [r4, #12]
 8021d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021d4c:	f010 0301 	ands.w	r3, r0, #1
 8021d50:	d00a      	beq.n	8021d68 <__swsetup_r+0xbc>
 8021d52:	2300      	movs	r3, #0
 8021d54:	60a3      	str	r3, [r4, #8]
 8021d56:	6963      	ldr	r3, [r4, #20]
 8021d58:	425b      	negs	r3, r3
 8021d5a:	61a3      	str	r3, [r4, #24]
 8021d5c:	6923      	ldr	r3, [r4, #16]
 8021d5e:	b943      	cbnz	r3, 8021d72 <__swsetup_r+0xc6>
 8021d60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021d64:	d1ba      	bne.n	8021cdc <__swsetup_r+0x30>
 8021d66:	bd70      	pop	{r4, r5, r6, pc}
 8021d68:	0781      	lsls	r1, r0, #30
 8021d6a:	bf58      	it	pl
 8021d6c:	6963      	ldrpl	r3, [r4, #20]
 8021d6e:	60a3      	str	r3, [r4, #8]
 8021d70:	e7f4      	b.n	8021d5c <__swsetup_r+0xb0>
 8021d72:	2000      	movs	r0, #0
 8021d74:	e7f7      	b.n	8021d66 <__swsetup_r+0xba>
 8021d76:	bf00      	nop
 8021d78:	20000108 	.word	0x20000108
 8021d7c:	0802952c 	.word	0x0802952c
 8021d80:	0802954c 	.word	0x0802954c
 8021d84:	0802950c 	.word	0x0802950c

08021d88 <__register_exitproc>:
 8021d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8021e48 <__register_exitproc+0xc0>
 8021d90:	4606      	mov	r6, r0
 8021d92:	f8d8 0000 	ldr.w	r0, [r8]
 8021d96:	461f      	mov	r7, r3
 8021d98:	460d      	mov	r5, r1
 8021d9a:	4691      	mov	r9, r2
 8021d9c:	f7fe fb87 	bl	80204ae <__retarget_lock_acquire_recursive>
 8021da0:	4b25      	ldr	r3, [pc, #148]	; (8021e38 <__register_exitproc+0xb0>)
 8021da2:	681c      	ldr	r4, [r3, #0]
 8021da4:	b934      	cbnz	r4, 8021db4 <__register_exitproc+0x2c>
 8021da6:	4c25      	ldr	r4, [pc, #148]	; (8021e3c <__register_exitproc+0xb4>)
 8021da8:	601c      	str	r4, [r3, #0]
 8021daa:	4b25      	ldr	r3, [pc, #148]	; (8021e40 <__register_exitproc+0xb8>)
 8021dac:	b113      	cbz	r3, 8021db4 <__register_exitproc+0x2c>
 8021dae:	681b      	ldr	r3, [r3, #0]
 8021db0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021db4:	6863      	ldr	r3, [r4, #4]
 8021db6:	2b1f      	cmp	r3, #31
 8021db8:	dd07      	ble.n	8021dca <__register_exitproc+0x42>
 8021dba:	f8d8 0000 	ldr.w	r0, [r8]
 8021dbe:	f7fe fb78 	bl	80204b2 <__retarget_lock_release_recursive>
 8021dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8021dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021dca:	b34e      	cbz	r6, 8021e20 <__register_exitproc+0x98>
 8021dcc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021dd0:	b988      	cbnz	r0, 8021df6 <__register_exitproc+0x6e>
 8021dd2:	4b1c      	ldr	r3, [pc, #112]	; (8021e44 <__register_exitproc+0xbc>)
 8021dd4:	b923      	cbnz	r3, 8021de0 <__register_exitproc+0x58>
 8021dd6:	f8d8 0000 	ldr.w	r0, [r8]
 8021dda:	f7fe fb69 	bl	80204b0 <__retarget_lock_release>
 8021dde:	e7f0      	b.n	8021dc2 <__register_exitproc+0x3a>
 8021de0:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021de4:	f7fe fbca 	bl	802057c <malloc>
 8021de8:	2800      	cmp	r0, #0
 8021dea:	d0f4      	beq.n	8021dd6 <__register_exitproc+0x4e>
 8021dec:	2300      	movs	r3, #0
 8021dee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8021df2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8021df6:	6863      	ldr	r3, [r4, #4]
 8021df8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021dfc:	2201      	movs	r2, #1
 8021dfe:	409a      	lsls	r2, r3
 8021e00:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021e04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8021e08:	4313      	orrs	r3, r2
 8021e0a:	2e02      	cmp	r6, #2
 8021e0c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021e10:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8021e14:	bf02      	ittt	eq
 8021e16:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8021e1a:	431a      	orreq	r2, r3
 8021e1c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8021e20:	6863      	ldr	r3, [r4, #4]
 8021e22:	f8d8 0000 	ldr.w	r0, [r8]
 8021e26:	1c5a      	adds	r2, r3, #1
 8021e28:	3302      	adds	r3, #2
 8021e2a:	6062      	str	r2, [r4, #4]
 8021e2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021e30:	f7fe fb3f 	bl	80204b2 <__retarget_lock_release_recursive>
 8021e34:	2000      	movs	r0, #0
 8021e36:	e7c6      	b.n	8021dc6 <__register_exitproc+0x3e>
 8021e38:	20000f80 	.word	0x20000f80
 8021e3c:	20000ef4 	.word	0x20000ef4
 8021e40:	00000000 	.word	0x00000000
 8021e44:	0802057d 	.word	0x0802057d
 8021e48:	20000174 	.word	0x20000174

08021e4c <abs>:
 8021e4c:	2800      	cmp	r0, #0
 8021e4e:	bfb8      	it	lt
 8021e50:	4240      	neglt	r0, r0
 8021e52:	4770      	bx	lr

08021e54 <__assert_func>:
 8021e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021e56:	4614      	mov	r4, r2
 8021e58:	461a      	mov	r2, r3
 8021e5a:	4b09      	ldr	r3, [pc, #36]	; (8021e80 <__assert_func+0x2c>)
 8021e5c:	681b      	ldr	r3, [r3, #0]
 8021e5e:	4605      	mov	r5, r0
 8021e60:	68d8      	ldr	r0, [r3, #12]
 8021e62:	b14c      	cbz	r4, 8021e78 <__assert_func+0x24>
 8021e64:	4b07      	ldr	r3, [pc, #28]	; (8021e84 <__assert_func+0x30>)
 8021e66:	9100      	str	r1, [sp, #0]
 8021e68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021e6c:	4906      	ldr	r1, [pc, #24]	; (8021e88 <__assert_func+0x34>)
 8021e6e:	462b      	mov	r3, r5
 8021e70:	f000 f854 	bl	8021f1c <fiprintf>
 8021e74:	f7fd fda8 	bl	801f9c8 <abort>
 8021e78:	4b04      	ldr	r3, [pc, #16]	; (8021e8c <__assert_func+0x38>)
 8021e7a:	461c      	mov	r4, r3
 8021e7c:	e7f3      	b.n	8021e66 <__assert_func+0x12>
 8021e7e:	bf00      	nop
 8021e80:	20000108 	.word	0x20000108
 8021e84:	08029964 	.word	0x08029964
 8021e88:	08029971 	.word	0x08029971
 8021e8c:	0802999f 	.word	0x0802999f

08021e90 <_close_r>:
 8021e90:	b538      	push	{r3, r4, r5, lr}
 8021e92:	4d06      	ldr	r5, [pc, #24]	; (8021eac <_close_r+0x1c>)
 8021e94:	2300      	movs	r3, #0
 8021e96:	4604      	mov	r4, r0
 8021e98:	4608      	mov	r0, r1
 8021e9a:	602b      	str	r3, [r5, #0]
 8021e9c:	f7de ffb4 	bl	8000e08 <_close>
 8021ea0:	1c43      	adds	r3, r0, #1
 8021ea2:	d102      	bne.n	8021eaa <_close_r+0x1a>
 8021ea4:	682b      	ldr	r3, [r5, #0]
 8021ea6:	b103      	cbz	r3, 8021eaa <_close_r+0x1a>
 8021ea8:	6023      	str	r3, [r4, #0]
 8021eaa:	bd38      	pop	{r3, r4, r5, pc}
 8021eac:	20000f94 	.word	0x20000f94

08021eb0 <__sflags>:
 8021eb0:	780b      	ldrb	r3, [r1, #0]
 8021eb2:	2b72      	cmp	r3, #114	; 0x72
 8021eb4:	b530      	push	{r4, r5, lr}
 8021eb6:	d022      	beq.n	8021efe <__sflags+0x4e>
 8021eb8:	2b77      	cmp	r3, #119	; 0x77
 8021eba:	d024      	beq.n	8021f06 <__sflags+0x56>
 8021ebc:	2b61      	cmp	r3, #97	; 0x61
 8021ebe:	d027      	beq.n	8021f10 <__sflags+0x60>
 8021ec0:	2316      	movs	r3, #22
 8021ec2:	6003      	str	r3, [r0, #0]
 8021ec4:	2000      	movs	r0, #0
 8021ec6:	bd30      	pop	{r4, r5, pc}
 8021ec8:	2d62      	cmp	r5, #98	; 0x62
 8021eca:	d012      	beq.n	8021ef2 <__sflags+0x42>
 8021ecc:	2d78      	cmp	r5, #120	; 0x78
 8021ece:	d013      	beq.n	8021ef8 <__sflags+0x48>
 8021ed0:	2d2b      	cmp	r5, #43	; 0x2b
 8021ed2:	d107      	bne.n	8021ee4 <__sflags+0x34>
 8021ed4:	f020 001c 	bic.w	r0, r0, #28
 8021ed8:	f023 0303 	bic.w	r3, r3, #3
 8021edc:	f040 0010 	orr.w	r0, r0, #16
 8021ee0:	f043 0302 	orr.w	r3, r3, #2
 8021ee4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8021ee8:	2d00      	cmp	r5, #0
 8021eea:	d1ed      	bne.n	8021ec8 <__sflags+0x18>
 8021eec:	4323      	orrs	r3, r4
 8021eee:	6013      	str	r3, [r2, #0]
 8021ef0:	e7e9      	b.n	8021ec6 <__sflags+0x16>
 8021ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021ef6:	e7f5      	b.n	8021ee4 <__sflags+0x34>
 8021ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8021efc:	e7f2      	b.n	8021ee4 <__sflags+0x34>
 8021efe:	2400      	movs	r4, #0
 8021f00:	4623      	mov	r3, r4
 8021f02:	2004      	movs	r0, #4
 8021f04:	e7ee      	b.n	8021ee4 <__sflags+0x34>
 8021f06:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8021f0a:	2301      	movs	r3, #1
 8021f0c:	2008      	movs	r0, #8
 8021f0e:	e7e9      	b.n	8021ee4 <__sflags+0x34>
 8021f10:	f44f 7402 	mov.w	r4, #520	; 0x208
 8021f14:	2301      	movs	r3, #1
 8021f16:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021f1a:	e7e3      	b.n	8021ee4 <__sflags+0x34>

08021f1c <fiprintf>:
 8021f1c:	b40e      	push	{r1, r2, r3}
 8021f1e:	b503      	push	{r0, r1, lr}
 8021f20:	4601      	mov	r1, r0
 8021f22:	ab03      	add	r3, sp, #12
 8021f24:	4805      	ldr	r0, [pc, #20]	; (8021f3c <fiprintf+0x20>)
 8021f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f2a:	6800      	ldr	r0, [r0, #0]
 8021f2c:	9301      	str	r3, [sp, #4]
 8021f2e:	f000 faff 	bl	8022530 <_vfiprintf_r>
 8021f32:	b002      	add	sp, #8
 8021f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8021f38:	b003      	add	sp, #12
 8021f3a:	4770      	bx	lr
 8021f3c:	20000108 	.word	0x20000108

08021f40 <_fstat_r>:
 8021f40:	b538      	push	{r3, r4, r5, lr}
 8021f42:	4d07      	ldr	r5, [pc, #28]	; (8021f60 <_fstat_r+0x20>)
 8021f44:	2300      	movs	r3, #0
 8021f46:	4604      	mov	r4, r0
 8021f48:	4608      	mov	r0, r1
 8021f4a:	4611      	mov	r1, r2
 8021f4c:	602b      	str	r3, [r5, #0]
 8021f4e:	f7de ff67 	bl	8000e20 <_fstat>
 8021f52:	1c43      	adds	r3, r0, #1
 8021f54:	d102      	bne.n	8021f5c <_fstat_r+0x1c>
 8021f56:	682b      	ldr	r3, [r5, #0]
 8021f58:	b103      	cbz	r3, 8021f5c <_fstat_r+0x1c>
 8021f5a:	6023      	str	r3, [r4, #0]
 8021f5c:	bd38      	pop	{r3, r4, r5, pc}
 8021f5e:	bf00      	nop
 8021f60:	20000f94 	.word	0x20000f94

08021f64 <_findenv_r>:
 8021f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f68:	4607      	mov	r7, r0
 8021f6a:	4689      	mov	r9, r1
 8021f6c:	4616      	mov	r6, r2
 8021f6e:	f000 fe85 	bl	8022c7c <__env_lock>
 8021f72:	4b18      	ldr	r3, [pc, #96]	; (8021fd4 <_findenv_r+0x70>)
 8021f74:	681c      	ldr	r4, [r3, #0]
 8021f76:	469a      	mov	sl, r3
 8021f78:	b134      	cbz	r4, 8021f88 <_findenv_r+0x24>
 8021f7a:	464b      	mov	r3, r9
 8021f7c:	4698      	mov	r8, r3
 8021f7e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8021f82:	b139      	cbz	r1, 8021f94 <_findenv_r+0x30>
 8021f84:	293d      	cmp	r1, #61	; 0x3d
 8021f86:	d1f9      	bne.n	8021f7c <_findenv_r+0x18>
 8021f88:	4638      	mov	r0, r7
 8021f8a:	f000 fe7d 	bl	8022c88 <__env_unlock>
 8021f8e:	2000      	movs	r0, #0
 8021f90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f94:	eba8 0809 	sub.w	r8, r8, r9
 8021f98:	46a3      	mov	fp, r4
 8021f9a:	f854 0b04 	ldr.w	r0, [r4], #4
 8021f9e:	2800      	cmp	r0, #0
 8021fa0:	d0f2      	beq.n	8021f88 <_findenv_r+0x24>
 8021fa2:	4642      	mov	r2, r8
 8021fa4:	4649      	mov	r1, r9
 8021fa6:	f000 fe49 	bl	8022c3c <strncmp>
 8021faa:	2800      	cmp	r0, #0
 8021fac:	d1f4      	bne.n	8021f98 <_findenv_r+0x34>
 8021fae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021fb2:	eb03 0508 	add.w	r5, r3, r8
 8021fb6:	f813 3008 	ldrb.w	r3, [r3, r8]
 8021fba:	2b3d      	cmp	r3, #61	; 0x3d
 8021fbc:	d1ec      	bne.n	8021f98 <_findenv_r+0x34>
 8021fbe:	f8da 3000 	ldr.w	r3, [sl]
 8021fc2:	ebab 0303 	sub.w	r3, fp, r3
 8021fc6:	109b      	asrs	r3, r3, #2
 8021fc8:	4638      	mov	r0, r7
 8021fca:	6033      	str	r3, [r6, #0]
 8021fcc:	f000 fe5c 	bl	8022c88 <__env_unlock>
 8021fd0:	1c68      	adds	r0, r5, #1
 8021fd2:	e7dd      	b.n	8021f90 <_findenv_r+0x2c>
 8021fd4:	20000000 	.word	0x20000000

08021fd8 <_getenv_r>:
 8021fd8:	b507      	push	{r0, r1, r2, lr}
 8021fda:	aa01      	add	r2, sp, #4
 8021fdc:	f7ff ffc2 	bl	8021f64 <_findenv_r>
 8021fe0:	b003      	add	sp, #12
 8021fe2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08021fe8 <__gettzinfo>:
 8021fe8:	4800      	ldr	r0, [pc, #0]	; (8021fec <__gettzinfo+0x4>)
 8021fea:	4770      	bx	lr
 8021fec:	20000178 	.word	0x20000178

08021ff0 <gmtime_r>:
 8021ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ff4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8021ff8:	460c      	mov	r4, r1
 8021ffa:	4a51      	ldr	r2, [pc, #324]	; (8022140 <gmtime_r+0x150>)
 8021ffc:	2300      	movs	r3, #0
 8021ffe:	4630      	mov	r0, r6
 8022000:	4639      	mov	r1, r7
 8022002:	f7de fbd7 	bl	80007b4 <__aeabi_ldivmod>
 8022006:	4639      	mov	r1, r7
 8022008:	4605      	mov	r5, r0
 802200a:	4a4d      	ldr	r2, [pc, #308]	; (8022140 <gmtime_r+0x150>)
 802200c:	4630      	mov	r0, r6
 802200e:	2300      	movs	r3, #0
 8022010:	f7de fbd0 	bl	80007b4 <__aeabi_ldivmod>
 8022014:	2a00      	cmp	r2, #0
 8022016:	bfbc      	itt	lt
 8022018:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802201c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8022020:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022024:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8022028:	fbb2 f3f1 	udiv	r3, r2, r1
 802202c:	fb01 2213 	mls	r2, r1, r3, r2
 8022030:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8022034:	bfac      	ite	ge
 8022036:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 802203a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 802203e:	60a3      	str	r3, [r4, #8]
 8022040:	fbb2 f3f1 	udiv	r3, r2, r1
 8022044:	fb01 2213 	mls	r2, r1, r3, r2
 8022048:	6063      	str	r3, [r4, #4]
 802204a:	6022      	str	r2, [r4, #0]
 802204c:	1cc3      	adds	r3, r0, #3
 802204e:	2207      	movs	r2, #7
 8022050:	fb93 f2f2 	sdiv	r2, r3, r2
 8022054:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8022058:	1a9b      	subs	r3, r3, r2
 802205a:	bf48      	it	mi
 802205c:	3307      	addmi	r3, #7
 802205e:	2800      	cmp	r0, #0
 8022060:	61a3      	str	r3, [r4, #24]
 8022062:	bfb8      	it	lt
 8022064:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8022068:	4936      	ldr	r1, [pc, #216]	; (8022144 <gmtime_r+0x154>)
 802206a:	bfae      	itee	ge
 802206c:	fb90 f1f1 	sdivge	r1, r0, r1
 8022070:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8022074:	fb93 f1f1 	sdivlt	r1, r3, r1
 8022078:	4b33      	ldr	r3, [pc, #204]	; (8022148 <gmtime_r+0x158>)
 802207a:	fb03 0001 	mla	r0, r3, r1, r0
 802207e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8022082:	fbb0 f2f2 	udiv	r2, r0, r2
 8022086:	4402      	add	r2, r0
 8022088:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 802208c:	fbb0 f3fc 	udiv	r3, r0, ip
 8022090:	1ad2      	subs	r2, r2, r3
 8022092:	f240 176d 	movw	r7, #365	; 0x16d
 8022096:	4b2d      	ldr	r3, [pc, #180]	; (802214c <gmtime_r+0x15c>)
 8022098:	fbb0 f3f3 	udiv	r3, r0, r3
 802209c:	2664      	movs	r6, #100	; 0x64
 802209e:	1ad3      	subs	r3, r2, r3
 80220a0:	fbb3 f5f7 	udiv	r5, r3, r7
 80220a4:	fbb3 f3fc 	udiv	r3, r3, ip
 80220a8:	fbb5 f2f6 	udiv	r2, r5, r6
 80220ac:	1ad3      	subs	r3, r2, r3
 80220ae:	4403      	add	r3, r0
 80220b0:	fb07 3315 	mls	r3, r7, r5, r3
 80220b4:	2099      	movs	r0, #153	; 0x99
 80220b6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80220ba:	f10c 0c02 	add.w	ip, ip, #2
 80220be:	f103 0e01 	add.w	lr, r3, #1
 80220c2:	fbbc f7f0 	udiv	r7, ip, r0
 80220c6:	4378      	muls	r0, r7
 80220c8:	3002      	adds	r0, #2
 80220ca:	f04f 0805 	mov.w	r8, #5
 80220ce:	fbb0 f0f8 	udiv	r0, r0, r8
 80220d2:	ebae 0000 	sub.w	r0, lr, r0
 80220d6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80220da:	45f4      	cmp	ip, lr
 80220dc:	bf94      	ite	ls
 80220de:	f04f 0c02 	movls.w	ip, #2
 80220e2:	f06f 0c09 	mvnhi.w	ip, #9
 80220e6:	4467      	add	r7, ip
 80220e8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80220ec:	fb0c 5101 	mla	r1, ip, r1, r5
 80220f0:	2f01      	cmp	r7, #1
 80220f2:	bf98      	it	ls
 80220f4:	3101      	addls	r1, #1
 80220f6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80220fa:	d30c      	bcc.n	8022116 <gmtime_r+0x126>
 80220fc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8022100:	61e3      	str	r3, [r4, #28]
 8022102:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8022106:	2300      	movs	r3, #0
 8022108:	60e0      	str	r0, [r4, #12]
 802210a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802210e:	6223      	str	r3, [r4, #32]
 8022110:	4620      	mov	r0, r4
 8022112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022116:	f015 0f03 	tst.w	r5, #3
 802211a:	d102      	bne.n	8022122 <gmtime_r+0x132>
 802211c:	fb06 5212 	mls	r2, r6, r2, r5
 8022120:	b95a      	cbnz	r2, 802213a <gmtime_r+0x14a>
 8022122:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8022126:	fbb5 f2f6 	udiv	r2, r5, r6
 802212a:	fb06 5212 	mls	r2, r6, r2, r5
 802212e:	fab2 f282 	clz	r2, r2
 8022132:	0952      	lsrs	r2, r2, #5
 8022134:	333b      	adds	r3, #59	; 0x3b
 8022136:	4413      	add	r3, r2
 8022138:	e7e2      	b.n	8022100 <gmtime_r+0x110>
 802213a:	2201      	movs	r2, #1
 802213c:	e7fa      	b.n	8022134 <gmtime_r+0x144>
 802213e:	bf00      	nop
 8022140:	00015180 	.word	0x00015180
 8022144:	00023ab1 	.word	0x00023ab1
 8022148:	fffdc54f 	.word	0xfffdc54f
 802214c:	00023ab0 	.word	0x00023ab0

08022150 <_isatty_r>:
 8022150:	b538      	push	{r3, r4, r5, lr}
 8022152:	4d06      	ldr	r5, [pc, #24]	; (802216c <_isatty_r+0x1c>)
 8022154:	2300      	movs	r3, #0
 8022156:	4604      	mov	r4, r0
 8022158:	4608      	mov	r0, r1
 802215a:	602b      	str	r3, [r5, #0]
 802215c:	f7de fe70 	bl	8000e40 <_isatty>
 8022160:	1c43      	adds	r3, r0, #1
 8022162:	d102      	bne.n	802216a <_isatty_r+0x1a>
 8022164:	682b      	ldr	r3, [r5, #0]
 8022166:	b103      	cbz	r3, 802216a <_isatty_r+0x1a>
 8022168:	6023      	str	r3, [r4, #0]
 802216a:	bd38      	pop	{r3, r4, r5, pc}
 802216c:	20000f94 	.word	0x20000f94

08022170 <labs>:
 8022170:	2800      	cmp	r0, #0
 8022172:	bfb8      	it	lt
 8022174:	4240      	neglt	r0, r0
 8022176:	4770      	bx	lr

08022178 <_lseek_r>:
 8022178:	b538      	push	{r3, r4, r5, lr}
 802217a:	4d07      	ldr	r5, [pc, #28]	; (8022198 <_lseek_r+0x20>)
 802217c:	4604      	mov	r4, r0
 802217e:	4608      	mov	r0, r1
 8022180:	4611      	mov	r1, r2
 8022182:	2200      	movs	r2, #0
 8022184:	602a      	str	r2, [r5, #0]
 8022186:	461a      	mov	r2, r3
 8022188:	f7de fe65 	bl	8000e56 <_lseek>
 802218c:	1c43      	adds	r3, r0, #1
 802218e:	d102      	bne.n	8022196 <_lseek_r+0x1e>
 8022190:	682b      	ldr	r3, [r5, #0]
 8022192:	b103      	cbz	r3, 8022196 <_lseek_r+0x1e>
 8022194:	6023      	str	r3, [r4, #0]
 8022196:	bd38      	pop	{r3, r4, r5, pc}
 8022198:	20000f94 	.word	0x20000f94

0802219c <__ascii_mbtowc>:
 802219c:	b082      	sub	sp, #8
 802219e:	b901      	cbnz	r1, 80221a2 <__ascii_mbtowc+0x6>
 80221a0:	a901      	add	r1, sp, #4
 80221a2:	b142      	cbz	r2, 80221b6 <__ascii_mbtowc+0x1a>
 80221a4:	b14b      	cbz	r3, 80221ba <__ascii_mbtowc+0x1e>
 80221a6:	7813      	ldrb	r3, [r2, #0]
 80221a8:	600b      	str	r3, [r1, #0]
 80221aa:	7812      	ldrb	r2, [r2, #0]
 80221ac:	1e10      	subs	r0, r2, #0
 80221ae:	bf18      	it	ne
 80221b0:	2001      	movne	r0, #1
 80221b2:	b002      	add	sp, #8
 80221b4:	4770      	bx	lr
 80221b6:	4610      	mov	r0, r2
 80221b8:	e7fb      	b.n	80221b2 <__ascii_mbtowc+0x16>
 80221ba:	f06f 0001 	mvn.w	r0, #1
 80221be:	e7f8      	b.n	80221b2 <__ascii_mbtowc+0x16>

080221c0 <__malloc_lock>:
 80221c0:	4801      	ldr	r0, [pc, #4]	; (80221c8 <__malloc_lock+0x8>)
 80221c2:	f7fe b974 	b.w	80204ae <__retarget_lock_acquire_recursive>
 80221c6:	bf00      	nop
 80221c8:	20000f8c 	.word	0x20000f8c

080221cc <__malloc_unlock>:
 80221cc:	4801      	ldr	r0, [pc, #4]	; (80221d4 <__malloc_unlock+0x8>)
 80221ce:	f7fe b970 	b.w	80204b2 <__retarget_lock_release_recursive>
 80221d2:	bf00      	nop
 80221d4:	20000f8c 	.word	0x20000f8c

080221d8 <_realloc_r>:
 80221d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221da:	4607      	mov	r7, r0
 80221dc:	4614      	mov	r4, r2
 80221de:	460e      	mov	r6, r1
 80221e0:	b921      	cbnz	r1, 80221ec <_realloc_r+0x14>
 80221e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80221e6:	4611      	mov	r1, r2
 80221e8:	f7fe ba4e 	b.w	8020688 <_malloc_r>
 80221ec:	b922      	cbnz	r2, 80221f8 <_realloc_r+0x20>
 80221ee:	f7fe f9fb 	bl	80205e8 <_free_r>
 80221f2:	4625      	mov	r5, r4
 80221f4:	4628      	mov	r0, r5
 80221f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80221f8:	f000 fd66 	bl	8022cc8 <_malloc_usable_size_r>
 80221fc:	42a0      	cmp	r0, r4
 80221fe:	d20f      	bcs.n	8022220 <_realloc_r+0x48>
 8022200:	4621      	mov	r1, r4
 8022202:	4638      	mov	r0, r7
 8022204:	f7fe fa40 	bl	8020688 <_malloc_r>
 8022208:	4605      	mov	r5, r0
 802220a:	2800      	cmp	r0, #0
 802220c:	d0f2      	beq.n	80221f4 <_realloc_r+0x1c>
 802220e:	4631      	mov	r1, r6
 8022210:	4622      	mov	r2, r4
 8022212:	f7fe f9c3 	bl	802059c <memcpy>
 8022216:	4631      	mov	r1, r6
 8022218:	4638      	mov	r0, r7
 802221a:	f7fe f9e5 	bl	80205e8 <_free_r>
 802221e:	e7e9      	b.n	80221f4 <_realloc_r+0x1c>
 8022220:	4635      	mov	r5, r6
 8022222:	e7e7      	b.n	80221f4 <_realloc_r+0x1c>

08022224 <__ssputs_r>:
 8022224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022228:	688e      	ldr	r6, [r1, #8]
 802222a:	429e      	cmp	r6, r3
 802222c:	4682      	mov	sl, r0
 802222e:	460c      	mov	r4, r1
 8022230:	4690      	mov	r8, r2
 8022232:	461f      	mov	r7, r3
 8022234:	d838      	bhi.n	80222a8 <__ssputs_r+0x84>
 8022236:	898a      	ldrh	r2, [r1, #12]
 8022238:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802223c:	d032      	beq.n	80222a4 <__ssputs_r+0x80>
 802223e:	6825      	ldr	r5, [r4, #0]
 8022240:	6909      	ldr	r1, [r1, #16]
 8022242:	eba5 0901 	sub.w	r9, r5, r1
 8022246:	6965      	ldr	r5, [r4, #20]
 8022248:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802224c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022250:	3301      	adds	r3, #1
 8022252:	444b      	add	r3, r9
 8022254:	106d      	asrs	r5, r5, #1
 8022256:	429d      	cmp	r5, r3
 8022258:	bf38      	it	cc
 802225a:	461d      	movcc	r5, r3
 802225c:	0553      	lsls	r3, r2, #21
 802225e:	d531      	bpl.n	80222c4 <__ssputs_r+0xa0>
 8022260:	4629      	mov	r1, r5
 8022262:	f7fe fa11 	bl	8020688 <_malloc_r>
 8022266:	4606      	mov	r6, r0
 8022268:	b950      	cbnz	r0, 8022280 <__ssputs_r+0x5c>
 802226a:	230c      	movs	r3, #12
 802226c:	f8ca 3000 	str.w	r3, [sl]
 8022270:	89a3      	ldrh	r3, [r4, #12]
 8022272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022276:	81a3      	strh	r3, [r4, #12]
 8022278:	f04f 30ff 	mov.w	r0, #4294967295
 802227c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022280:	6921      	ldr	r1, [r4, #16]
 8022282:	464a      	mov	r2, r9
 8022284:	f7fe f98a 	bl	802059c <memcpy>
 8022288:	89a3      	ldrh	r3, [r4, #12]
 802228a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802228e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022292:	81a3      	strh	r3, [r4, #12]
 8022294:	6126      	str	r6, [r4, #16]
 8022296:	6165      	str	r5, [r4, #20]
 8022298:	444e      	add	r6, r9
 802229a:	eba5 0509 	sub.w	r5, r5, r9
 802229e:	6026      	str	r6, [r4, #0]
 80222a0:	60a5      	str	r5, [r4, #8]
 80222a2:	463e      	mov	r6, r7
 80222a4:	42be      	cmp	r6, r7
 80222a6:	d900      	bls.n	80222aa <__ssputs_r+0x86>
 80222a8:	463e      	mov	r6, r7
 80222aa:	4632      	mov	r2, r6
 80222ac:	6820      	ldr	r0, [r4, #0]
 80222ae:	4641      	mov	r1, r8
 80222b0:	f000 fcf0 	bl	8022c94 <memmove>
 80222b4:	68a3      	ldr	r3, [r4, #8]
 80222b6:	6822      	ldr	r2, [r4, #0]
 80222b8:	1b9b      	subs	r3, r3, r6
 80222ba:	4432      	add	r2, r6
 80222bc:	60a3      	str	r3, [r4, #8]
 80222be:	6022      	str	r2, [r4, #0]
 80222c0:	2000      	movs	r0, #0
 80222c2:	e7db      	b.n	802227c <__ssputs_r+0x58>
 80222c4:	462a      	mov	r2, r5
 80222c6:	f7ff ff87 	bl	80221d8 <_realloc_r>
 80222ca:	4606      	mov	r6, r0
 80222cc:	2800      	cmp	r0, #0
 80222ce:	d1e1      	bne.n	8022294 <__ssputs_r+0x70>
 80222d0:	6921      	ldr	r1, [r4, #16]
 80222d2:	4650      	mov	r0, sl
 80222d4:	f7fe f988 	bl	80205e8 <_free_r>
 80222d8:	e7c7      	b.n	802226a <__ssputs_r+0x46>
	...

080222dc <_svfiprintf_r>:
 80222dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222e0:	4698      	mov	r8, r3
 80222e2:	898b      	ldrh	r3, [r1, #12]
 80222e4:	061b      	lsls	r3, r3, #24
 80222e6:	b09d      	sub	sp, #116	; 0x74
 80222e8:	4607      	mov	r7, r0
 80222ea:	460d      	mov	r5, r1
 80222ec:	4614      	mov	r4, r2
 80222ee:	d50e      	bpl.n	802230e <_svfiprintf_r+0x32>
 80222f0:	690b      	ldr	r3, [r1, #16]
 80222f2:	b963      	cbnz	r3, 802230e <_svfiprintf_r+0x32>
 80222f4:	2140      	movs	r1, #64	; 0x40
 80222f6:	f7fe f9c7 	bl	8020688 <_malloc_r>
 80222fa:	6028      	str	r0, [r5, #0]
 80222fc:	6128      	str	r0, [r5, #16]
 80222fe:	b920      	cbnz	r0, 802230a <_svfiprintf_r+0x2e>
 8022300:	230c      	movs	r3, #12
 8022302:	603b      	str	r3, [r7, #0]
 8022304:	f04f 30ff 	mov.w	r0, #4294967295
 8022308:	e0d1      	b.n	80224ae <_svfiprintf_r+0x1d2>
 802230a:	2340      	movs	r3, #64	; 0x40
 802230c:	616b      	str	r3, [r5, #20]
 802230e:	2300      	movs	r3, #0
 8022310:	9309      	str	r3, [sp, #36]	; 0x24
 8022312:	2320      	movs	r3, #32
 8022314:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022318:	f8cd 800c 	str.w	r8, [sp, #12]
 802231c:	2330      	movs	r3, #48	; 0x30
 802231e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80224c8 <_svfiprintf_r+0x1ec>
 8022322:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022326:	f04f 0901 	mov.w	r9, #1
 802232a:	4623      	mov	r3, r4
 802232c:	469a      	mov	sl, r3
 802232e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022332:	b10a      	cbz	r2, 8022338 <_svfiprintf_r+0x5c>
 8022334:	2a25      	cmp	r2, #37	; 0x25
 8022336:	d1f9      	bne.n	802232c <_svfiprintf_r+0x50>
 8022338:	ebba 0b04 	subs.w	fp, sl, r4
 802233c:	d00b      	beq.n	8022356 <_svfiprintf_r+0x7a>
 802233e:	465b      	mov	r3, fp
 8022340:	4622      	mov	r2, r4
 8022342:	4629      	mov	r1, r5
 8022344:	4638      	mov	r0, r7
 8022346:	f7ff ff6d 	bl	8022224 <__ssputs_r>
 802234a:	3001      	adds	r0, #1
 802234c:	f000 80aa 	beq.w	80224a4 <_svfiprintf_r+0x1c8>
 8022350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022352:	445a      	add	r2, fp
 8022354:	9209      	str	r2, [sp, #36]	; 0x24
 8022356:	f89a 3000 	ldrb.w	r3, [sl]
 802235a:	2b00      	cmp	r3, #0
 802235c:	f000 80a2 	beq.w	80224a4 <_svfiprintf_r+0x1c8>
 8022360:	2300      	movs	r3, #0
 8022362:	f04f 32ff 	mov.w	r2, #4294967295
 8022366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802236a:	f10a 0a01 	add.w	sl, sl, #1
 802236e:	9304      	str	r3, [sp, #16]
 8022370:	9307      	str	r3, [sp, #28]
 8022372:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022376:	931a      	str	r3, [sp, #104]	; 0x68
 8022378:	4654      	mov	r4, sl
 802237a:	2205      	movs	r2, #5
 802237c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022380:	4851      	ldr	r0, [pc, #324]	; (80224c8 <_svfiprintf_r+0x1ec>)
 8022382:	f7dd ff6d 	bl	8000260 <memchr>
 8022386:	9a04      	ldr	r2, [sp, #16]
 8022388:	b9d8      	cbnz	r0, 80223c2 <_svfiprintf_r+0xe6>
 802238a:	06d0      	lsls	r0, r2, #27
 802238c:	bf44      	itt	mi
 802238e:	2320      	movmi	r3, #32
 8022390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022394:	0711      	lsls	r1, r2, #28
 8022396:	bf44      	itt	mi
 8022398:	232b      	movmi	r3, #43	; 0x2b
 802239a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802239e:	f89a 3000 	ldrb.w	r3, [sl]
 80223a2:	2b2a      	cmp	r3, #42	; 0x2a
 80223a4:	d015      	beq.n	80223d2 <_svfiprintf_r+0xf6>
 80223a6:	9a07      	ldr	r2, [sp, #28]
 80223a8:	4654      	mov	r4, sl
 80223aa:	2000      	movs	r0, #0
 80223ac:	f04f 0c0a 	mov.w	ip, #10
 80223b0:	4621      	mov	r1, r4
 80223b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80223b6:	3b30      	subs	r3, #48	; 0x30
 80223b8:	2b09      	cmp	r3, #9
 80223ba:	d94e      	bls.n	802245a <_svfiprintf_r+0x17e>
 80223bc:	b1b0      	cbz	r0, 80223ec <_svfiprintf_r+0x110>
 80223be:	9207      	str	r2, [sp, #28]
 80223c0:	e014      	b.n	80223ec <_svfiprintf_r+0x110>
 80223c2:	eba0 0308 	sub.w	r3, r0, r8
 80223c6:	fa09 f303 	lsl.w	r3, r9, r3
 80223ca:	4313      	orrs	r3, r2
 80223cc:	9304      	str	r3, [sp, #16]
 80223ce:	46a2      	mov	sl, r4
 80223d0:	e7d2      	b.n	8022378 <_svfiprintf_r+0x9c>
 80223d2:	9b03      	ldr	r3, [sp, #12]
 80223d4:	1d19      	adds	r1, r3, #4
 80223d6:	681b      	ldr	r3, [r3, #0]
 80223d8:	9103      	str	r1, [sp, #12]
 80223da:	2b00      	cmp	r3, #0
 80223dc:	bfbb      	ittet	lt
 80223de:	425b      	neglt	r3, r3
 80223e0:	f042 0202 	orrlt.w	r2, r2, #2
 80223e4:	9307      	strge	r3, [sp, #28]
 80223e6:	9307      	strlt	r3, [sp, #28]
 80223e8:	bfb8      	it	lt
 80223ea:	9204      	strlt	r2, [sp, #16]
 80223ec:	7823      	ldrb	r3, [r4, #0]
 80223ee:	2b2e      	cmp	r3, #46	; 0x2e
 80223f0:	d10c      	bne.n	802240c <_svfiprintf_r+0x130>
 80223f2:	7863      	ldrb	r3, [r4, #1]
 80223f4:	2b2a      	cmp	r3, #42	; 0x2a
 80223f6:	d135      	bne.n	8022464 <_svfiprintf_r+0x188>
 80223f8:	9b03      	ldr	r3, [sp, #12]
 80223fa:	1d1a      	adds	r2, r3, #4
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	9203      	str	r2, [sp, #12]
 8022400:	2b00      	cmp	r3, #0
 8022402:	bfb8      	it	lt
 8022404:	f04f 33ff 	movlt.w	r3, #4294967295
 8022408:	3402      	adds	r4, #2
 802240a:	9305      	str	r3, [sp, #20]
 802240c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80224d8 <_svfiprintf_r+0x1fc>
 8022410:	7821      	ldrb	r1, [r4, #0]
 8022412:	2203      	movs	r2, #3
 8022414:	4650      	mov	r0, sl
 8022416:	f7dd ff23 	bl	8000260 <memchr>
 802241a:	b140      	cbz	r0, 802242e <_svfiprintf_r+0x152>
 802241c:	2340      	movs	r3, #64	; 0x40
 802241e:	eba0 000a 	sub.w	r0, r0, sl
 8022422:	fa03 f000 	lsl.w	r0, r3, r0
 8022426:	9b04      	ldr	r3, [sp, #16]
 8022428:	4303      	orrs	r3, r0
 802242a:	3401      	adds	r4, #1
 802242c:	9304      	str	r3, [sp, #16]
 802242e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022432:	4826      	ldr	r0, [pc, #152]	; (80224cc <_svfiprintf_r+0x1f0>)
 8022434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022438:	2206      	movs	r2, #6
 802243a:	f7dd ff11 	bl	8000260 <memchr>
 802243e:	2800      	cmp	r0, #0
 8022440:	d038      	beq.n	80224b4 <_svfiprintf_r+0x1d8>
 8022442:	4b23      	ldr	r3, [pc, #140]	; (80224d0 <_svfiprintf_r+0x1f4>)
 8022444:	bb1b      	cbnz	r3, 802248e <_svfiprintf_r+0x1b2>
 8022446:	9b03      	ldr	r3, [sp, #12]
 8022448:	3307      	adds	r3, #7
 802244a:	f023 0307 	bic.w	r3, r3, #7
 802244e:	3308      	adds	r3, #8
 8022450:	9303      	str	r3, [sp, #12]
 8022452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022454:	4433      	add	r3, r6
 8022456:	9309      	str	r3, [sp, #36]	; 0x24
 8022458:	e767      	b.n	802232a <_svfiprintf_r+0x4e>
 802245a:	fb0c 3202 	mla	r2, ip, r2, r3
 802245e:	460c      	mov	r4, r1
 8022460:	2001      	movs	r0, #1
 8022462:	e7a5      	b.n	80223b0 <_svfiprintf_r+0xd4>
 8022464:	2300      	movs	r3, #0
 8022466:	3401      	adds	r4, #1
 8022468:	9305      	str	r3, [sp, #20]
 802246a:	4619      	mov	r1, r3
 802246c:	f04f 0c0a 	mov.w	ip, #10
 8022470:	4620      	mov	r0, r4
 8022472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022476:	3a30      	subs	r2, #48	; 0x30
 8022478:	2a09      	cmp	r2, #9
 802247a:	d903      	bls.n	8022484 <_svfiprintf_r+0x1a8>
 802247c:	2b00      	cmp	r3, #0
 802247e:	d0c5      	beq.n	802240c <_svfiprintf_r+0x130>
 8022480:	9105      	str	r1, [sp, #20]
 8022482:	e7c3      	b.n	802240c <_svfiprintf_r+0x130>
 8022484:	fb0c 2101 	mla	r1, ip, r1, r2
 8022488:	4604      	mov	r4, r0
 802248a:	2301      	movs	r3, #1
 802248c:	e7f0      	b.n	8022470 <_svfiprintf_r+0x194>
 802248e:	ab03      	add	r3, sp, #12
 8022490:	9300      	str	r3, [sp, #0]
 8022492:	462a      	mov	r2, r5
 8022494:	4b0f      	ldr	r3, [pc, #60]	; (80224d4 <_svfiprintf_r+0x1f8>)
 8022496:	a904      	add	r1, sp, #16
 8022498:	4638      	mov	r0, r7
 802249a:	f3af 8000 	nop.w
 802249e:	1c42      	adds	r2, r0, #1
 80224a0:	4606      	mov	r6, r0
 80224a2:	d1d6      	bne.n	8022452 <_svfiprintf_r+0x176>
 80224a4:	89ab      	ldrh	r3, [r5, #12]
 80224a6:	065b      	lsls	r3, r3, #25
 80224a8:	f53f af2c 	bmi.w	8022304 <_svfiprintf_r+0x28>
 80224ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80224ae:	b01d      	add	sp, #116	; 0x74
 80224b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224b4:	ab03      	add	r3, sp, #12
 80224b6:	9300      	str	r3, [sp, #0]
 80224b8:	462a      	mov	r2, r5
 80224ba:	4b06      	ldr	r3, [pc, #24]	; (80224d4 <_svfiprintf_r+0x1f8>)
 80224bc:	a904      	add	r1, sp, #16
 80224be:	4638      	mov	r0, r7
 80224c0:	f000 f9d4 	bl	802286c <_printf_i>
 80224c4:	e7eb      	b.n	802249e <_svfiprintf_r+0x1c2>
 80224c6:	bf00      	nop
 80224c8:	08029aab 	.word	0x08029aab
 80224cc:	08029ab5 	.word	0x08029ab5
 80224d0:	00000000 	.word	0x00000000
 80224d4:	08022225 	.word	0x08022225
 80224d8:	08029ab1 	.word	0x08029ab1

080224dc <__sfputc_r>:
 80224dc:	6893      	ldr	r3, [r2, #8]
 80224de:	3b01      	subs	r3, #1
 80224e0:	2b00      	cmp	r3, #0
 80224e2:	b410      	push	{r4}
 80224e4:	6093      	str	r3, [r2, #8]
 80224e6:	da08      	bge.n	80224fa <__sfputc_r+0x1e>
 80224e8:	6994      	ldr	r4, [r2, #24]
 80224ea:	42a3      	cmp	r3, r4
 80224ec:	db01      	blt.n	80224f2 <__sfputc_r+0x16>
 80224ee:	290a      	cmp	r1, #10
 80224f0:	d103      	bne.n	80224fa <__sfputc_r+0x1e>
 80224f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80224f6:	f7ff bb75 	b.w	8021be4 <__swbuf_r>
 80224fa:	6813      	ldr	r3, [r2, #0]
 80224fc:	1c58      	adds	r0, r3, #1
 80224fe:	6010      	str	r0, [r2, #0]
 8022500:	7019      	strb	r1, [r3, #0]
 8022502:	4608      	mov	r0, r1
 8022504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022508:	4770      	bx	lr

0802250a <__sfputs_r>:
 802250a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802250c:	4606      	mov	r6, r0
 802250e:	460f      	mov	r7, r1
 8022510:	4614      	mov	r4, r2
 8022512:	18d5      	adds	r5, r2, r3
 8022514:	42ac      	cmp	r4, r5
 8022516:	d101      	bne.n	802251c <__sfputs_r+0x12>
 8022518:	2000      	movs	r0, #0
 802251a:	e007      	b.n	802252c <__sfputs_r+0x22>
 802251c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022520:	463a      	mov	r2, r7
 8022522:	4630      	mov	r0, r6
 8022524:	f7ff ffda 	bl	80224dc <__sfputc_r>
 8022528:	1c43      	adds	r3, r0, #1
 802252a:	d1f3      	bne.n	8022514 <__sfputs_r+0xa>
 802252c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022530 <_vfiprintf_r>:
 8022530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022534:	460d      	mov	r5, r1
 8022536:	b09d      	sub	sp, #116	; 0x74
 8022538:	4614      	mov	r4, r2
 802253a:	4698      	mov	r8, r3
 802253c:	4606      	mov	r6, r0
 802253e:	b118      	cbz	r0, 8022548 <_vfiprintf_r+0x18>
 8022540:	6983      	ldr	r3, [r0, #24]
 8022542:	b90b      	cbnz	r3, 8022548 <_vfiprintf_r+0x18>
 8022544:	f7fd fc00 	bl	801fd48 <__sinit>
 8022548:	4b89      	ldr	r3, [pc, #548]	; (8022770 <_vfiprintf_r+0x240>)
 802254a:	429d      	cmp	r5, r3
 802254c:	d11b      	bne.n	8022586 <_vfiprintf_r+0x56>
 802254e:	6875      	ldr	r5, [r6, #4]
 8022550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022552:	07d9      	lsls	r1, r3, #31
 8022554:	d405      	bmi.n	8022562 <_vfiprintf_r+0x32>
 8022556:	89ab      	ldrh	r3, [r5, #12]
 8022558:	059a      	lsls	r2, r3, #22
 802255a:	d402      	bmi.n	8022562 <_vfiprintf_r+0x32>
 802255c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802255e:	f7fd ffa6 	bl	80204ae <__retarget_lock_acquire_recursive>
 8022562:	89ab      	ldrh	r3, [r5, #12]
 8022564:	071b      	lsls	r3, r3, #28
 8022566:	d501      	bpl.n	802256c <_vfiprintf_r+0x3c>
 8022568:	692b      	ldr	r3, [r5, #16]
 802256a:	b9eb      	cbnz	r3, 80225a8 <_vfiprintf_r+0x78>
 802256c:	4629      	mov	r1, r5
 802256e:	4630      	mov	r0, r6
 8022570:	f7ff fb9c 	bl	8021cac <__swsetup_r>
 8022574:	b1c0      	cbz	r0, 80225a8 <_vfiprintf_r+0x78>
 8022576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022578:	07dc      	lsls	r4, r3, #31
 802257a:	d50e      	bpl.n	802259a <_vfiprintf_r+0x6a>
 802257c:	f04f 30ff 	mov.w	r0, #4294967295
 8022580:	b01d      	add	sp, #116	; 0x74
 8022582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022586:	4b7b      	ldr	r3, [pc, #492]	; (8022774 <_vfiprintf_r+0x244>)
 8022588:	429d      	cmp	r5, r3
 802258a:	d101      	bne.n	8022590 <_vfiprintf_r+0x60>
 802258c:	68b5      	ldr	r5, [r6, #8]
 802258e:	e7df      	b.n	8022550 <_vfiprintf_r+0x20>
 8022590:	4b79      	ldr	r3, [pc, #484]	; (8022778 <_vfiprintf_r+0x248>)
 8022592:	429d      	cmp	r5, r3
 8022594:	bf08      	it	eq
 8022596:	68f5      	ldreq	r5, [r6, #12]
 8022598:	e7da      	b.n	8022550 <_vfiprintf_r+0x20>
 802259a:	89ab      	ldrh	r3, [r5, #12]
 802259c:	0598      	lsls	r0, r3, #22
 802259e:	d4ed      	bmi.n	802257c <_vfiprintf_r+0x4c>
 80225a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80225a2:	f7fd ff86 	bl	80204b2 <__retarget_lock_release_recursive>
 80225a6:	e7e9      	b.n	802257c <_vfiprintf_r+0x4c>
 80225a8:	2300      	movs	r3, #0
 80225aa:	9309      	str	r3, [sp, #36]	; 0x24
 80225ac:	2320      	movs	r3, #32
 80225ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80225b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80225b6:	2330      	movs	r3, #48	; 0x30
 80225b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802277c <_vfiprintf_r+0x24c>
 80225bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80225c0:	f04f 0901 	mov.w	r9, #1
 80225c4:	4623      	mov	r3, r4
 80225c6:	469a      	mov	sl, r3
 80225c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80225cc:	b10a      	cbz	r2, 80225d2 <_vfiprintf_r+0xa2>
 80225ce:	2a25      	cmp	r2, #37	; 0x25
 80225d0:	d1f9      	bne.n	80225c6 <_vfiprintf_r+0x96>
 80225d2:	ebba 0b04 	subs.w	fp, sl, r4
 80225d6:	d00b      	beq.n	80225f0 <_vfiprintf_r+0xc0>
 80225d8:	465b      	mov	r3, fp
 80225da:	4622      	mov	r2, r4
 80225dc:	4629      	mov	r1, r5
 80225de:	4630      	mov	r0, r6
 80225e0:	f7ff ff93 	bl	802250a <__sfputs_r>
 80225e4:	3001      	adds	r0, #1
 80225e6:	f000 80aa 	beq.w	802273e <_vfiprintf_r+0x20e>
 80225ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80225ec:	445a      	add	r2, fp
 80225ee:	9209      	str	r2, [sp, #36]	; 0x24
 80225f0:	f89a 3000 	ldrb.w	r3, [sl]
 80225f4:	2b00      	cmp	r3, #0
 80225f6:	f000 80a2 	beq.w	802273e <_vfiprintf_r+0x20e>
 80225fa:	2300      	movs	r3, #0
 80225fc:	f04f 32ff 	mov.w	r2, #4294967295
 8022600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022604:	f10a 0a01 	add.w	sl, sl, #1
 8022608:	9304      	str	r3, [sp, #16]
 802260a:	9307      	str	r3, [sp, #28]
 802260c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022610:	931a      	str	r3, [sp, #104]	; 0x68
 8022612:	4654      	mov	r4, sl
 8022614:	2205      	movs	r2, #5
 8022616:	f814 1b01 	ldrb.w	r1, [r4], #1
 802261a:	4858      	ldr	r0, [pc, #352]	; (802277c <_vfiprintf_r+0x24c>)
 802261c:	f7dd fe20 	bl	8000260 <memchr>
 8022620:	9a04      	ldr	r2, [sp, #16]
 8022622:	b9d8      	cbnz	r0, 802265c <_vfiprintf_r+0x12c>
 8022624:	06d1      	lsls	r1, r2, #27
 8022626:	bf44      	itt	mi
 8022628:	2320      	movmi	r3, #32
 802262a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802262e:	0713      	lsls	r3, r2, #28
 8022630:	bf44      	itt	mi
 8022632:	232b      	movmi	r3, #43	; 0x2b
 8022634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022638:	f89a 3000 	ldrb.w	r3, [sl]
 802263c:	2b2a      	cmp	r3, #42	; 0x2a
 802263e:	d015      	beq.n	802266c <_vfiprintf_r+0x13c>
 8022640:	9a07      	ldr	r2, [sp, #28]
 8022642:	4654      	mov	r4, sl
 8022644:	2000      	movs	r0, #0
 8022646:	f04f 0c0a 	mov.w	ip, #10
 802264a:	4621      	mov	r1, r4
 802264c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022650:	3b30      	subs	r3, #48	; 0x30
 8022652:	2b09      	cmp	r3, #9
 8022654:	d94e      	bls.n	80226f4 <_vfiprintf_r+0x1c4>
 8022656:	b1b0      	cbz	r0, 8022686 <_vfiprintf_r+0x156>
 8022658:	9207      	str	r2, [sp, #28]
 802265a:	e014      	b.n	8022686 <_vfiprintf_r+0x156>
 802265c:	eba0 0308 	sub.w	r3, r0, r8
 8022660:	fa09 f303 	lsl.w	r3, r9, r3
 8022664:	4313      	orrs	r3, r2
 8022666:	9304      	str	r3, [sp, #16]
 8022668:	46a2      	mov	sl, r4
 802266a:	e7d2      	b.n	8022612 <_vfiprintf_r+0xe2>
 802266c:	9b03      	ldr	r3, [sp, #12]
 802266e:	1d19      	adds	r1, r3, #4
 8022670:	681b      	ldr	r3, [r3, #0]
 8022672:	9103      	str	r1, [sp, #12]
 8022674:	2b00      	cmp	r3, #0
 8022676:	bfbb      	ittet	lt
 8022678:	425b      	neglt	r3, r3
 802267a:	f042 0202 	orrlt.w	r2, r2, #2
 802267e:	9307      	strge	r3, [sp, #28]
 8022680:	9307      	strlt	r3, [sp, #28]
 8022682:	bfb8      	it	lt
 8022684:	9204      	strlt	r2, [sp, #16]
 8022686:	7823      	ldrb	r3, [r4, #0]
 8022688:	2b2e      	cmp	r3, #46	; 0x2e
 802268a:	d10c      	bne.n	80226a6 <_vfiprintf_r+0x176>
 802268c:	7863      	ldrb	r3, [r4, #1]
 802268e:	2b2a      	cmp	r3, #42	; 0x2a
 8022690:	d135      	bne.n	80226fe <_vfiprintf_r+0x1ce>
 8022692:	9b03      	ldr	r3, [sp, #12]
 8022694:	1d1a      	adds	r2, r3, #4
 8022696:	681b      	ldr	r3, [r3, #0]
 8022698:	9203      	str	r2, [sp, #12]
 802269a:	2b00      	cmp	r3, #0
 802269c:	bfb8      	it	lt
 802269e:	f04f 33ff 	movlt.w	r3, #4294967295
 80226a2:	3402      	adds	r4, #2
 80226a4:	9305      	str	r3, [sp, #20]
 80226a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802278c <_vfiprintf_r+0x25c>
 80226aa:	7821      	ldrb	r1, [r4, #0]
 80226ac:	2203      	movs	r2, #3
 80226ae:	4650      	mov	r0, sl
 80226b0:	f7dd fdd6 	bl	8000260 <memchr>
 80226b4:	b140      	cbz	r0, 80226c8 <_vfiprintf_r+0x198>
 80226b6:	2340      	movs	r3, #64	; 0x40
 80226b8:	eba0 000a 	sub.w	r0, r0, sl
 80226bc:	fa03 f000 	lsl.w	r0, r3, r0
 80226c0:	9b04      	ldr	r3, [sp, #16]
 80226c2:	4303      	orrs	r3, r0
 80226c4:	3401      	adds	r4, #1
 80226c6:	9304      	str	r3, [sp, #16]
 80226c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80226cc:	482c      	ldr	r0, [pc, #176]	; (8022780 <_vfiprintf_r+0x250>)
 80226ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80226d2:	2206      	movs	r2, #6
 80226d4:	f7dd fdc4 	bl	8000260 <memchr>
 80226d8:	2800      	cmp	r0, #0
 80226da:	d03f      	beq.n	802275c <_vfiprintf_r+0x22c>
 80226dc:	4b29      	ldr	r3, [pc, #164]	; (8022784 <_vfiprintf_r+0x254>)
 80226de:	bb1b      	cbnz	r3, 8022728 <_vfiprintf_r+0x1f8>
 80226e0:	9b03      	ldr	r3, [sp, #12]
 80226e2:	3307      	adds	r3, #7
 80226e4:	f023 0307 	bic.w	r3, r3, #7
 80226e8:	3308      	adds	r3, #8
 80226ea:	9303      	str	r3, [sp, #12]
 80226ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226ee:	443b      	add	r3, r7
 80226f0:	9309      	str	r3, [sp, #36]	; 0x24
 80226f2:	e767      	b.n	80225c4 <_vfiprintf_r+0x94>
 80226f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80226f8:	460c      	mov	r4, r1
 80226fa:	2001      	movs	r0, #1
 80226fc:	e7a5      	b.n	802264a <_vfiprintf_r+0x11a>
 80226fe:	2300      	movs	r3, #0
 8022700:	3401      	adds	r4, #1
 8022702:	9305      	str	r3, [sp, #20]
 8022704:	4619      	mov	r1, r3
 8022706:	f04f 0c0a 	mov.w	ip, #10
 802270a:	4620      	mov	r0, r4
 802270c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022710:	3a30      	subs	r2, #48	; 0x30
 8022712:	2a09      	cmp	r2, #9
 8022714:	d903      	bls.n	802271e <_vfiprintf_r+0x1ee>
 8022716:	2b00      	cmp	r3, #0
 8022718:	d0c5      	beq.n	80226a6 <_vfiprintf_r+0x176>
 802271a:	9105      	str	r1, [sp, #20]
 802271c:	e7c3      	b.n	80226a6 <_vfiprintf_r+0x176>
 802271e:	fb0c 2101 	mla	r1, ip, r1, r2
 8022722:	4604      	mov	r4, r0
 8022724:	2301      	movs	r3, #1
 8022726:	e7f0      	b.n	802270a <_vfiprintf_r+0x1da>
 8022728:	ab03      	add	r3, sp, #12
 802272a:	9300      	str	r3, [sp, #0]
 802272c:	462a      	mov	r2, r5
 802272e:	4b16      	ldr	r3, [pc, #88]	; (8022788 <_vfiprintf_r+0x258>)
 8022730:	a904      	add	r1, sp, #16
 8022732:	4630      	mov	r0, r6
 8022734:	f3af 8000 	nop.w
 8022738:	4607      	mov	r7, r0
 802273a:	1c78      	adds	r0, r7, #1
 802273c:	d1d6      	bne.n	80226ec <_vfiprintf_r+0x1bc>
 802273e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022740:	07d9      	lsls	r1, r3, #31
 8022742:	d405      	bmi.n	8022750 <_vfiprintf_r+0x220>
 8022744:	89ab      	ldrh	r3, [r5, #12]
 8022746:	059a      	lsls	r2, r3, #22
 8022748:	d402      	bmi.n	8022750 <_vfiprintf_r+0x220>
 802274a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802274c:	f7fd feb1 	bl	80204b2 <__retarget_lock_release_recursive>
 8022750:	89ab      	ldrh	r3, [r5, #12]
 8022752:	065b      	lsls	r3, r3, #25
 8022754:	f53f af12 	bmi.w	802257c <_vfiprintf_r+0x4c>
 8022758:	9809      	ldr	r0, [sp, #36]	; 0x24
 802275a:	e711      	b.n	8022580 <_vfiprintf_r+0x50>
 802275c:	ab03      	add	r3, sp, #12
 802275e:	9300      	str	r3, [sp, #0]
 8022760:	462a      	mov	r2, r5
 8022762:	4b09      	ldr	r3, [pc, #36]	; (8022788 <_vfiprintf_r+0x258>)
 8022764:	a904      	add	r1, sp, #16
 8022766:	4630      	mov	r0, r6
 8022768:	f000 f880 	bl	802286c <_printf_i>
 802276c:	e7e4      	b.n	8022738 <_vfiprintf_r+0x208>
 802276e:	bf00      	nop
 8022770:	0802952c 	.word	0x0802952c
 8022774:	0802954c 	.word	0x0802954c
 8022778:	0802950c 	.word	0x0802950c
 802277c:	08029aab 	.word	0x08029aab
 8022780:	08029ab5 	.word	0x08029ab5
 8022784:	00000000 	.word	0x00000000
 8022788:	0802250b 	.word	0x0802250b
 802278c:	08029ab1 	.word	0x08029ab1

08022790 <_printf_common>:
 8022790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022794:	4616      	mov	r6, r2
 8022796:	4699      	mov	r9, r3
 8022798:	688a      	ldr	r2, [r1, #8]
 802279a:	690b      	ldr	r3, [r1, #16]
 802279c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80227a0:	4293      	cmp	r3, r2
 80227a2:	bfb8      	it	lt
 80227a4:	4613      	movlt	r3, r2
 80227a6:	6033      	str	r3, [r6, #0]
 80227a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80227ac:	4607      	mov	r7, r0
 80227ae:	460c      	mov	r4, r1
 80227b0:	b10a      	cbz	r2, 80227b6 <_printf_common+0x26>
 80227b2:	3301      	adds	r3, #1
 80227b4:	6033      	str	r3, [r6, #0]
 80227b6:	6823      	ldr	r3, [r4, #0]
 80227b8:	0699      	lsls	r1, r3, #26
 80227ba:	bf42      	ittt	mi
 80227bc:	6833      	ldrmi	r3, [r6, #0]
 80227be:	3302      	addmi	r3, #2
 80227c0:	6033      	strmi	r3, [r6, #0]
 80227c2:	6825      	ldr	r5, [r4, #0]
 80227c4:	f015 0506 	ands.w	r5, r5, #6
 80227c8:	d106      	bne.n	80227d8 <_printf_common+0x48>
 80227ca:	f104 0a19 	add.w	sl, r4, #25
 80227ce:	68e3      	ldr	r3, [r4, #12]
 80227d0:	6832      	ldr	r2, [r6, #0]
 80227d2:	1a9b      	subs	r3, r3, r2
 80227d4:	42ab      	cmp	r3, r5
 80227d6:	dc26      	bgt.n	8022826 <_printf_common+0x96>
 80227d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80227dc:	1e13      	subs	r3, r2, #0
 80227de:	6822      	ldr	r2, [r4, #0]
 80227e0:	bf18      	it	ne
 80227e2:	2301      	movne	r3, #1
 80227e4:	0692      	lsls	r2, r2, #26
 80227e6:	d42b      	bmi.n	8022840 <_printf_common+0xb0>
 80227e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80227ec:	4649      	mov	r1, r9
 80227ee:	4638      	mov	r0, r7
 80227f0:	47c0      	blx	r8
 80227f2:	3001      	adds	r0, #1
 80227f4:	d01e      	beq.n	8022834 <_printf_common+0xa4>
 80227f6:	6823      	ldr	r3, [r4, #0]
 80227f8:	68e5      	ldr	r5, [r4, #12]
 80227fa:	6832      	ldr	r2, [r6, #0]
 80227fc:	f003 0306 	and.w	r3, r3, #6
 8022800:	2b04      	cmp	r3, #4
 8022802:	bf08      	it	eq
 8022804:	1aad      	subeq	r5, r5, r2
 8022806:	68a3      	ldr	r3, [r4, #8]
 8022808:	6922      	ldr	r2, [r4, #16]
 802280a:	bf0c      	ite	eq
 802280c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022810:	2500      	movne	r5, #0
 8022812:	4293      	cmp	r3, r2
 8022814:	bfc4      	itt	gt
 8022816:	1a9b      	subgt	r3, r3, r2
 8022818:	18ed      	addgt	r5, r5, r3
 802281a:	2600      	movs	r6, #0
 802281c:	341a      	adds	r4, #26
 802281e:	42b5      	cmp	r5, r6
 8022820:	d11a      	bne.n	8022858 <_printf_common+0xc8>
 8022822:	2000      	movs	r0, #0
 8022824:	e008      	b.n	8022838 <_printf_common+0xa8>
 8022826:	2301      	movs	r3, #1
 8022828:	4652      	mov	r2, sl
 802282a:	4649      	mov	r1, r9
 802282c:	4638      	mov	r0, r7
 802282e:	47c0      	blx	r8
 8022830:	3001      	adds	r0, #1
 8022832:	d103      	bne.n	802283c <_printf_common+0xac>
 8022834:	f04f 30ff 	mov.w	r0, #4294967295
 8022838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802283c:	3501      	adds	r5, #1
 802283e:	e7c6      	b.n	80227ce <_printf_common+0x3e>
 8022840:	18e1      	adds	r1, r4, r3
 8022842:	1c5a      	adds	r2, r3, #1
 8022844:	2030      	movs	r0, #48	; 0x30
 8022846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802284a:	4422      	add	r2, r4
 802284c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022850:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022854:	3302      	adds	r3, #2
 8022856:	e7c7      	b.n	80227e8 <_printf_common+0x58>
 8022858:	2301      	movs	r3, #1
 802285a:	4622      	mov	r2, r4
 802285c:	4649      	mov	r1, r9
 802285e:	4638      	mov	r0, r7
 8022860:	47c0      	blx	r8
 8022862:	3001      	adds	r0, #1
 8022864:	d0e6      	beq.n	8022834 <_printf_common+0xa4>
 8022866:	3601      	adds	r6, #1
 8022868:	e7d9      	b.n	802281e <_printf_common+0x8e>
	...

0802286c <_printf_i>:
 802286c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022870:	460c      	mov	r4, r1
 8022872:	4691      	mov	r9, r2
 8022874:	7e27      	ldrb	r7, [r4, #24]
 8022876:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022878:	2f78      	cmp	r7, #120	; 0x78
 802287a:	4680      	mov	r8, r0
 802287c:	469a      	mov	sl, r3
 802287e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022882:	d807      	bhi.n	8022894 <_printf_i+0x28>
 8022884:	2f62      	cmp	r7, #98	; 0x62
 8022886:	d80a      	bhi.n	802289e <_printf_i+0x32>
 8022888:	2f00      	cmp	r7, #0
 802288a:	f000 80d8 	beq.w	8022a3e <_printf_i+0x1d2>
 802288e:	2f58      	cmp	r7, #88	; 0x58
 8022890:	f000 80a3 	beq.w	80229da <_printf_i+0x16e>
 8022894:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802289c:	e03a      	b.n	8022914 <_printf_i+0xa8>
 802289e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80228a2:	2b15      	cmp	r3, #21
 80228a4:	d8f6      	bhi.n	8022894 <_printf_i+0x28>
 80228a6:	a001      	add	r0, pc, #4	; (adr r0, 80228ac <_printf_i+0x40>)
 80228a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80228ac:	08022905 	.word	0x08022905
 80228b0:	08022919 	.word	0x08022919
 80228b4:	08022895 	.word	0x08022895
 80228b8:	08022895 	.word	0x08022895
 80228bc:	08022895 	.word	0x08022895
 80228c0:	08022895 	.word	0x08022895
 80228c4:	08022919 	.word	0x08022919
 80228c8:	08022895 	.word	0x08022895
 80228cc:	08022895 	.word	0x08022895
 80228d0:	08022895 	.word	0x08022895
 80228d4:	08022895 	.word	0x08022895
 80228d8:	08022a25 	.word	0x08022a25
 80228dc:	08022949 	.word	0x08022949
 80228e0:	08022a07 	.word	0x08022a07
 80228e4:	08022895 	.word	0x08022895
 80228e8:	08022895 	.word	0x08022895
 80228ec:	08022a47 	.word	0x08022a47
 80228f0:	08022895 	.word	0x08022895
 80228f4:	08022949 	.word	0x08022949
 80228f8:	08022895 	.word	0x08022895
 80228fc:	08022895 	.word	0x08022895
 8022900:	08022a0f 	.word	0x08022a0f
 8022904:	680b      	ldr	r3, [r1, #0]
 8022906:	1d1a      	adds	r2, r3, #4
 8022908:	681b      	ldr	r3, [r3, #0]
 802290a:	600a      	str	r2, [r1, #0]
 802290c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022914:	2301      	movs	r3, #1
 8022916:	e0a3      	b.n	8022a60 <_printf_i+0x1f4>
 8022918:	6825      	ldr	r5, [r4, #0]
 802291a:	6808      	ldr	r0, [r1, #0]
 802291c:	062e      	lsls	r6, r5, #24
 802291e:	f100 0304 	add.w	r3, r0, #4
 8022922:	d50a      	bpl.n	802293a <_printf_i+0xce>
 8022924:	6805      	ldr	r5, [r0, #0]
 8022926:	600b      	str	r3, [r1, #0]
 8022928:	2d00      	cmp	r5, #0
 802292a:	da03      	bge.n	8022934 <_printf_i+0xc8>
 802292c:	232d      	movs	r3, #45	; 0x2d
 802292e:	426d      	negs	r5, r5
 8022930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022934:	485e      	ldr	r0, [pc, #376]	; (8022ab0 <_printf_i+0x244>)
 8022936:	230a      	movs	r3, #10
 8022938:	e019      	b.n	802296e <_printf_i+0x102>
 802293a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802293e:	6805      	ldr	r5, [r0, #0]
 8022940:	600b      	str	r3, [r1, #0]
 8022942:	bf18      	it	ne
 8022944:	b22d      	sxthne	r5, r5
 8022946:	e7ef      	b.n	8022928 <_printf_i+0xbc>
 8022948:	680b      	ldr	r3, [r1, #0]
 802294a:	6825      	ldr	r5, [r4, #0]
 802294c:	1d18      	adds	r0, r3, #4
 802294e:	6008      	str	r0, [r1, #0]
 8022950:	0628      	lsls	r0, r5, #24
 8022952:	d501      	bpl.n	8022958 <_printf_i+0xec>
 8022954:	681d      	ldr	r5, [r3, #0]
 8022956:	e002      	b.n	802295e <_printf_i+0xf2>
 8022958:	0669      	lsls	r1, r5, #25
 802295a:	d5fb      	bpl.n	8022954 <_printf_i+0xe8>
 802295c:	881d      	ldrh	r5, [r3, #0]
 802295e:	4854      	ldr	r0, [pc, #336]	; (8022ab0 <_printf_i+0x244>)
 8022960:	2f6f      	cmp	r7, #111	; 0x6f
 8022962:	bf0c      	ite	eq
 8022964:	2308      	moveq	r3, #8
 8022966:	230a      	movne	r3, #10
 8022968:	2100      	movs	r1, #0
 802296a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802296e:	6866      	ldr	r6, [r4, #4]
 8022970:	60a6      	str	r6, [r4, #8]
 8022972:	2e00      	cmp	r6, #0
 8022974:	bfa2      	ittt	ge
 8022976:	6821      	ldrge	r1, [r4, #0]
 8022978:	f021 0104 	bicge.w	r1, r1, #4
 802297c:	6021      	strge	r1, [r4, #0]
 802297e:	b90d      	cbnz	r5, 8022984 <_printf_i+0x118>
 8022980:	2e00      	cmp	r6, #0
 8022982:	d04d      	beq.n	8022a20 <_printf_i+0x1b4>
 8022984:	4616      	mov	r6, r2
 8022986:	fbb5 f1f3 	udiv	r1, r5, r3
 802298a:	fb03 5711 	mls	r7, r3, r1, r5
 802298e:	5dc7      	ldrb	r7, [r0, r7]
 8022990:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022994:	462f      	mov	r7, r5
 8022996:	42bb      	cmp	r3, r7
 8022998:	460d      	mov	r5, r1
 802299a:	d9f4      	bls.n	8022986 <_printf_i+0x11a>
 802299c:	2b08      	cmp	r3, #8
 802299e:	d10b      	bne.n	80229b8 <_printf_i+0x14c>
 80229a0:	6823      	ldr	r3, [r4, #0]
 80229a2:	07df      	lsls	r7, r3, #31
 80229a4:	d508      	bpl.n	80229b8 <_printf_i+0x14c>
 80229a6:	6923      	ldr	r3, [r4, #16]
 80229a8:	6861      	ldr	r1, [r4, #4]
 80229aa:	4299      	cmp	r1, r3
 80229ac:	bfde      	ittt	le
 80229ae:	2330      	movle	r3, #48	; 0x30
 80229b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80229b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80229b8:	1b92      	subs	r2, r2, r6
 80229ba:	6122      	str	r2, [r4, #16]
 80229bc:	f8cd a000 	str.w	sl, [sp]
 80229c0:	464b      	mov	r3, r9
 80229c2:	aa03      	add	r2, sp, #12
 80229c4:	4621      	mov	r1, r4
 80229c6:	4640      	mov	r0, r8
 80229c8:	f7ff fee2 	bl	8022790 <_printf_common>
 80229cc:	3001      	adds	r0, #1
 80229ce:	d14c      	bne.n	8022a6a <_printf_i+0x1fe>
 80229d0:	f04f 30ff 	mov.w	r0, #4294967295
 80229d4:	b004      	add	sp, #16
 80229d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229da:	4835      	ldr	r0, [pc, #212]	; (8022ab0 <_printf_i+0x244>)
 80229dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80229e0:	6823      	ldr	r3, [r4, #0]
 80229e2:	680e      	ldr	r6, [r1, #0]
 80229e4:	061f      	lsls	r7, r3, #24
 80229e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80229ea:	600e      	str	r6, [r1, #0]
 80229ec:	d514      	bpl.n	8022a18 <_printf_i+0x1ac>
 80229ee:	07d9      	lsls	r1, r3, #31
 80229f0:	bf44      	itt	mi
 80229f2:	f043 0320 	orrmi.w	r3, r3, #32
 80229f6:	6023      	strmi	r3, [r4, #0]
 80229f8:	b91d      	cbnz	r5, 8022a02 <_printf_i+0x196>
 80229fa:	6823      	ldr	r3, [r4, #0]
 80229fc:	f023 0320 	bic.w	r3, r3, #32
 8022a00:	6023      	str	r3, [r4, #0]
 8022a02:	2310      	movs	r3, #16
 8022a04:	e7b0      	b.n	8022968 <_printf_i+0xfc>
 8022a06:	6823      	ldr	r3, [r4, #0]
 8022a08:	f043 0320 	orr.w	r3, r3, #32
 8022a0c:	6023      	str	r3, [r4, #0]
 8022a0e:	2378      	movs	r3, #120	; 0x78
 8022a10:	4828      	ldr	r0, [pc, #160]	; (8022ab4 <_printf_i+0x248>)
 8022a12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022a16:	e7e3      	b.n	80229e0 <_printf_i+0x174>
 8022a18:	065e      	lsls	r6, r3, #25
 8022a1a:	bf48      	it	mi
 8022a1c:	b2ad      	uxthmi	r5, r5
 8022a1e:	e7e6      	b.n	80229ee <_printf_i+0x182>
 8022a20:	4616      	mov	r6, r2
 8022a22:	e7bb      	b.n	802299c <_printf_i+0x130>
 8022a24:	680b      	ldr	r3, [r1, #0]
 8022a26:	6826      	ldr	r6, [r4, #0]
 8022a28:	6960      	ldr	r0, [r4, #20]
 8022a2a:	1d1d      	adds	r5, r3, #4
 8022a2c:	600d      	str	r5, [r1, #0]
 8022a2e:	0635      	lsls	r5, r6, #24
 8022a30:	681b      	ldr	r3, [r3, #0]
 8022a32:	d501      	bpl.n	8022a38 <_printf_i+0x1cc>
 8022a34:	6018      	str	r0, [r3, #0]
 8022a36:	e002      	b.n	8022a3e <_printf_i+0x1d2>
 8022a38:	0671      	lsls	r1, r6, #25
 8022a3a:	d5fb      	bpl.n	8022a34 <_printf_i+0x1c8>
 8022a3c:	8018      	strh	r0, [r3, #0]
 8022a3e:	2300      	movs	r3, #0
 8022a40:	6123      	str	r3, [r4, #16]
 8022a42:	4616      	mov	r6, r2
 8022a44:	e7ba      	b.n	80229bc <_printf_i+0x150>
 8022a46:	680b      	ldr	r3, [r1, #0]
 8022a48:	1d1a      	adds	r2, r3, #4
 8022a4a:	600a      	str	r2, [r1, #0]
 8022a4c:	681e      	ldr	r6, [r3, #0]
 8022a4e:	6862      	ldr	r2, [r4, #4]
 8022a50:	2100      	movs	r1, #0
 8022a52:	4630      	mov	r0, r6
 8022a54:	f7dd fc04 	bl	8000260 <memchr>
 8022a58:	b108      	cbz	r0, 8022a5e <_printf_i+0x1f2>
 8022a5a:	1b80      	subs	r0, r0, r6
 8022a5c:	6060      	str	r0, [r4, #4]
 8022a5e:	6863      	ldr	r3, [r4, #4]
 8022a60:	6123      	str	r3, [r4, #16]
 8022a62:	2300      	movs	r3, #0
 8022a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022a68:	e7a8      	b.n	80229bc <_printf_i+0x150>
 8022a6a:	6923      	ldr	r3, [r4, #16]
 8022a6c:	4632      	mov	r2, r6
 8022a6e:	4649      	mov	r1, r9
 8022a70:	4640      	mov	r0, r8
 8022a72:	47d0      	blx	sl
 8022a74:	3001      	adds	r0, #1
 8022a76:	d0ab      	beq.n	80229d0 <_printf_i+0x164>
 8022a78:	6823      	ldr	r3, [r4, #0]
 8022a7a:	079b      	lsls	r3, r3, #30
 8022a7c:	d413      	bmi.n	8022aa6 <_printf_i+0x23a>
 8022a7e:	68e0      	ldr	r0, [r4, #12]
 8022a80:	9b03      	ldr	r3, [sp, #12]
 8022a82:	4298      	cmp	r0, r3
 8022a84:	bfb8      	it	lt
 8022a86:	4618      	movlt	r0, r3
 8022a88:	e7a4      	b.n	80229d4 <_printf_i+0x168>
 8022a8a:	2301      	movs	r3, #1
 8022a8c:	4632      	mov	r2, r6
 8022a8e:	4649      	mov	r1, r9
 8022a90:	4640      	mov	r0, r8
 8022a92:	47d0      	blx	sl
 8022a94:	3001      	adds	r0, #1
 8022a96:	d09b      	beq.n	80229d0 <_printf_i+0x164>
 8022a98:	3501      	adds	r5, #1
 8022a9a:	68e3      	ldr	r3, [r4, #12]
 8022a9c:	9903      	ldr	r1, [sp, #12]
 8022a9e:	1a5b      	subs	r3, r3, r1
 8022aa0:	42ab      	cmp	r3, r5
 8022aa2:	dcf2      	bgt.n	8022a8a <_printf_i+0x21e>
 8022aa4:	e7eb      	b.n	8022a7e <_printf_i+0x212>
 8022aa6:	2500      	movs	r5, #0
 8022aa8:	f104 0619 	add.w	r6, r4, #25
 8022aac:	e7f5      	b.n	8022a9a <_printf_i+0x22e>
 8022aae:	bf00      	nop
 8022ab0:	08029abc 	.word	0x08029abc
 8022ab4:	08029acd 	.word	0x08029acd

08022ab8 <_putc_r>:
 8022ab8:	b570      	push	{r4, r5, r6, lr}
 8022aba:	460d      	mov	r5, r1
 8022abc:	4614      	mov	r4, r2
 8022abe:	4606      	mov	r6, r0
 8022ac0:	b118      	cbz	r0, 8022aca <_putc_r+0x12>
 8022ac2:	6983      	ldr	r3, [r0, #24]
 8022ac4:	b90b      	cbnz	r3, 8022aca <_putc_r+0x12>
 8022ac6:	f7fd f93f 	bl	801fd48 <__sinit>
 8022aca:	4b1c      	ldr	r3, [pc, #112]	; (8022b3c <_putc_r+0x84>)
 8022acc:	429c      	cmp	r4, r3
 8022ace:	d124      	bne.n	8022b1a <_putc_r+0x62>
 8022ad0:	6874      	ldr	r4, [r6, #4]
 8022ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022ad4:	07d8      	lsls	r0, r3, #31
 8022ad6:	d405      	bmi.n	8022ae4 <_putc_r+0x2c>
 8022ad8:	89a3      	ldrh	r3, [r4, #12]
 8022ada:	0599      	lsls	r1, r3, #22
 8022adc:	d402      	bmi.n	8022ae4 <_putc_r+0x2c>
 8022ade:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022ae0:	f7fd fce5 	bl	80204ae <__retarget_lock_acquire_recursive>
 8022ae4:	68a3      	ldr	r3, [r4, #8]
 8022ae6:	3b01      	subs	r3, #1
 8022ae8:	2b00      	cmp	r3, #0
 8022aea:	60a3      	str	r3, [r4, #8]
 8022aec:	da05      	bge.n	8022afa <_putc_r+0x42>
 8022aee:	69a2      	ldr	r2, [r4, #24]
 8022af0:	4293      	cmp	r3, r2
 8022af2:	db1c      	blt.n	8022b2e <_putc_r+0x76>
 8022af4:	b2eb      	uxtb	r3, r5
 8022af6:	2b0a      	cmp	r3, #10
 8022af8:	d019      	beq.n	8022b2e <_putc_r+0x76>
 8022afa:	6823      	ldr	r3, [r4, #0]
 8022afc:	1c5a      	adds	r2, r3, #1
 8022afe:	6022      	str	r2, [r4, #0]
 8022b00:	701d      	strb	r5, [r3, #0]
 8022b02:	b2ed      	uxtb	r5, r5
 8022b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022b06:	07da      	lsls	r2, r3, #31
 8022b08:	d405      	bmi.n	8022b16 <_putc_r+0x5e>
 8022b0a:	89a3      	ldrh	r3, [r4, #12]
 8022b0c:	059b      	lsls	r3, r3, #22
 8022b0e:	d402      	bmi.n	8022b16 <_putc_r+0x5e>
 8022b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022b12:	f7fd fcce 	bl	80204b2 <__retarget_lock_release_recursive>
 8022b16:	4628      	mov	r0, r5
 8022b18:	bd70      	pop	{r4, r5, r6, pc}
 8022b1a:	4b09      	ldr	r3, [pc, #36]	; (8022b40 <_putc_r+0x88>)
 8022b1c:	429c      	cmp	r4, r3
 8022b1e:	d101      	bne.n	8022b24 <_putc_r+0x6c>
 8022b20:	68b4      	ldr	r4, [r6, #8]
 8022b22:	e7d6      	b.n	8022ad2 <_putc_r+0x1a>
 8022b24:	4b07      	ldr	r3, [pc, #28]	; (8022b44 <_putc_r+0x8c>)
 8022b26:	429c      	cmp	r4, r3
 8022b28:	bf08      	it	eq
 8022b2a:	68f4      	ldreq	r4, [r6, #12]
 8022b2c:	e7d1      	b.n	8022ad2 <_putc_r+0x1a>
 8022b2e:	4629      	mov	r1, r5
 8022b30:	4622      	mov	r2, r4
 8022b32:	4630      	mov	r0, r6
 8022b34:	f7ff f856 	bl	8021be4 <__swbuf_r>
 8022b38:	4605      	mov	r5, r0
 8022b3a:	e7e3      	b.n	8022b04 <_putc_r+0x4c>
 8022b3c:	0802952c 	.word	0x0802952c
 8022b40:	0802954c 	.word	0x0802954c
 8022b44:	0802950c 	.word	0x0802950c

08022b48 <_read_r>:
 8022b48:	b538      	push	{r3, r4, r5, lr}
 8022b4a:	4d07      	ldr	r5, [pc, #28]	; (8022b68 <_read_r+0x20>)
 8022b4c:	4604      	mov	r4, r0
 8022b4e:	4608      	mov	r0, r1
 8022b50:	4611      	mov	r1, r2
 8022b52:	2200      	movs	r2, #0
 8022b54:	602a      	str	r2, [r5, #0]
 8022b56:	461a      	mov	r2, r3
 8022b58:	f7de f91d 	bl	8000d96 <_read>
 8022b5c:	1c43      	adds	r3, r0, #1
 8022b5e:	d102      	bne.n	8022b66 <_read_r+0x1e>
 8022b60:	682b      	ldr	r3, [r5, #0]
 8022b62:	b103      	cbz	r3, 8022b66 <_read_r+0x1e>
 8022b64:	6023      	str	r3, [r4, #0]
 8022b66:	bd38      	pop	{r3, r4, r5, pc}
 8022b68:	20000f94 	.word	0x20000f94

08022b6c <sniprintf>:
 8022b6c:	b40c      	push	{r2, r3}
 8022b6e:	b530      	push	{r4, r5, lr}
 8022b70:	4b17      	ldr	r3, [pc, #92]	; (8022bd0 <sniprintf+0x64>)
 8022b72:	1e0c      	subs	r4, r1, #0
 8022b74:	681d      	ldr	r5, [r3, #0]
 8022b76:	b09d      	sub	sp, #116	; 0x74
 8022b78:	da08      	bge.n	8022b8c <sniprintf+0x20>
 8022b7a:	238b      	movs	r3, #139	; 0x8b
 8022b7c:	602b      	str	r3, [r5, #0]
 8022b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8022b82:	b01d      	add	sp, #116	; 0x74
 8022b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022b88:	b002      	add	sp, #8
 8022b8a:	4770      	bx	lr
 8022b8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022b90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022b94:	bf14      	ite	ne
 8022b96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022b9a:	4623      	moveq	r3, r4
 8022b9c:	9304      	str	r3, [sp, #16]
 8022b9e:	9307      	str	r3, [sp, #28]
 8022ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022ba4:	9002      	str	r0, [sp, #8]
 8022ba6:	9006      	str	r0, [sp, #24]
 8022ba8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022bac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022bae:	ab21      	add	r3, sp, #132	; 0x84
 8022bb0:	a902      	add	r1, sp, #8
 8022bb2:	4628      	mov	r0, r5
 8022bb4:	9301      	str	r3, [sp, #4]
 8022bb6:	f7ff fb91 	bl	80222dc <_svfiprintf_r>
 8022bba:	1c43      	adds	r3, r0, #1
 8022bbc:	bfbc      	itt	lt
 8022bbe:	238b      	movlt	r3, #139	; 0x8b
 8022bc0:	602b      	strlt	r3, [r5, #0]
 8022bc2:	2c00      	cmp	r4, #0
 8022bc4:	d0dd      	beq.n	8022b82 <sniprintf+0x16>
 8022bc6:	9b02      	ldr	r3, [sp, #8]
 8022bc8:	2200      	movs	r2, #0
 8022bca:	701a      	strb	r2, [r3, #0]
 8022bcc:	e7d9      	b.n	8022b82 <sniprintf+0x16>
 8022bce:	bf00      	nop
 8022bd0:	20000108 	.word	0x20000108

08022bd4 <siscanf>:
 8022bd4:	b40e      	push	{r1, r2, r3}
 8022bd6:	b510      	push	{r4, lr}
 8022bd8:	b09f      	sub	sp, #124	; 0x7c
 8022bda:	ac21      	add	r4, sp, #132	; 0x84
 8022bdc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8022be0:	f854 2b04 	ldr.w	r2, [r4], #4
 8022be4:	9201      	str	r2, [sp, #4]
 8022be6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022bea:	9004      	str	r0, [sp, #16]
 8022bec:	9008      	str	r0, [sp, #32]
 8022bee:	f7dd fb25 	bl	800023c <strlen>
 8022bf2:	4b0c      	ldr	r3, [pc, #48]	; (8022c24 <siscanf+0x50>)
 8022bf4:	9005      	str	r0, [sp, #20]
 8022bf6:	9009      	str	r0, [sp, #36]	; 0x24
 8022bf8:	930d      	str	r3, [sp, #52]	; 0x34
 8022bfa:	480b      	ldr	r0, [pc, #44]	; (8022c28 <siscanf+0x54>)
 8022bfc:	9a01      	ldr	r2, [sp, #4]
 8022bfe:	6800      	ldr	r0, [r0, #0]
 8022c00:	9403      	str	r4, [sp, #12]
 8022c02:	2300      	movs	r3, #0
 8022c04:	9311      	str	r3, [sp, #68]	; 0x44
 8022c06:	9316      	str	r3, [sp, #88]	; 0x58
 8022c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022c0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022c10:	a904      	add	r1, sp, #16
 8022c12:	4623      	mov	r3, r4
 8022c14:	f000 f8ba 	bl	8022d8c <__ssvfiscanf_r>
 8022c18:	b01f      	add	sp, #124	; 0x7c
 8022c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022c1e:	b003      	add	sp, #12
 8022c20:	4770      	bx	lr
 8022c22:	bf00      	nop
 8022c24:	08020983 	.word	0x08020983
 8022c28:	20000108 	.word	0x20000108

08022c2c <strcpy>:
 8022c2c:	4603      	mov	r3, r0
 8022c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c32:	f803 2b01 	strb.w	r2, [r3], #1
 8022c36:	2a00      	cmp	r2, #0
 8022c38:	d1f9      	bne.n	8022c2e <strcpy+0x2>
 8022c3a:	4770      	bx	lr

08022c3c <strncmp>:
 8022c3c:	b510      	push	{r4, lr}
 8022c3e:	b16a      	cbz	r2, 8022c5c <strncmp+0x20>
 8022c40:	3901      	subs	r1, #1
 8022c42:	1884      	adds	r4, r0, r2
 8022c44:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022c48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8022c4c:	4293      	cmp	r3, r2
 8022c4e:	d103      	bne.n	8022c58 <strncmp+0x1c>
 8022c50:	42a0      	cmp	r0, r4
 8022c52:	d001      	beq.n	8022c58 <strncmp+0x1c>
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	d1f5      	bne.n	8022c44 <strncmp+0x8>
 8022c58:	1a98      	subs	r0, r3, r2
 8022c5a:	bd10      	pop	{r4, pc}
 8022c5c:	4610      	mov	r0, r2
 8022c5e:	e7fc      	b.n	8022c5a <strncmp+0x1e>

08022c60 <__ascii_wctomb>:
 8022c60:	b149      	cbz	r1, 8022c76 <__ascii_wctomb+0x16>
 8022c62:	2aff      	cmp	r2, #255	; 0xff
 8022c64:	bf85      	ittet	hi
 8022c66:	238a      	movhi	r3, #138	; 0x8a
 8022c68:	6003      	strhi	r3, [r0, #0]
 8022c6a:	700a      	strbls	r2, [r1, #0]
 8022c6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8022c70:	bf98      	it	ls
 8022c72:	2001      	movls	r0, #1
 8022c74:	4770      	bx	lr
 8022c76:	4608      	mov	r0, r1
 8022c78:	4770      	bx	lr
	...

08022c7c <__env_lock>:
 8022c7c:	4801      	ldr	r0, [pc, #4]	; (8022c84 <__env_lock+0x8>)
 8022c7e:	f7fd bc16 	b.w	80204ae <__retarget_lock_acquire_recursive>
 8022c82:	bf00      	nop
 8022c84:	20000f8a 	.word	0x20000f8a

08022c88 <__env_unlock>:
 8022c88:	4801      	ldr	r0, [pc, #4]	; (8022c90 <__env_unlock+0x8>)
 8022c8a:	f7fd bc12 	b.w	80204b2 <__retarget_lock_release_recursive>
 8022c8e:	bf00      	nop
 8022c90:	20000f8a 	.word	0x20000f8a

08022c94 <memmove>:
 8022c94:	4288      	cmp	r0, r1
 8022c96:	b510      	push	{r4, lr}
 8022c98:	eb01 0402 	add.w	r4, r1, r2
 8022c9c:	d902      	bls.n	8022ca4 <memmove+0x10>
 8022c9e:	4284      	cmp	r4, r0
 8022ca0:	4623      	mov	r3, r4
 8022ca2:	d807      	bhi.n	8022cb4 <memmove+0x20>
 8022ca4:	1e43      	subs	r3, r0, #1
 8022ca6:	42a1      	cmp	r1, r4
 8022ca8:	d008      	beq.n	8022cbc <memmove+0x28>
 8022caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022cb2:	e7f8      	b.n	8022ca6 <memmove+0x12>
 8022cb4:	4402      	add	r2, r0
 8022cb6:	4601      	mov	r1, r0
 8022cb8:	428a      	cmp	r2, r1
 8022cba:	d100      	bne.n	8022cbe <memmove+0x2a>
 8022cbc:	bd10      	pop	{r4, pc}
 8022cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022cc6:	e7f7      	b.n	8022cb8 <memmove+0x24>

08022cc8 <_malloc_usable_size_r>:
 8022cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022ccc:	1f18      	subs	r0, r3, #4
 8022cce:	2b00      	cmp	r3, #0
 8022cd0:	bfbc      	itt	lt
 8022cd2:	580b      	ldrlt	r3, [r1, r0]
 8022cd4:	18c0      	addlt	r0, r0, r3
 8022cd6:	4770      	bx	lr

08022cd8 <_sungetc_r>:
 8022cd8:	b538      	push	{r3, r4, r5, lr}
 8022cda:	1c4b      	adds	r3, r1, #1
 8022cdc:	4614      	mov	r4, r2
 8022cde:	d103      	bne.n	8022ce8 <_sungetc_r+0x10>
 8022ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8022ce4:	4628      	mov	r0, r5
 8022ce6:	bd38      	pop	{r3, r4, r5, pc}
 8022ce8:	8993      	ldrh	r3, [r2, #12]
 8022cea:	f023 0320 	bic.w	r3, r3, #32
 8022cee:	8193      	strh	r3, [r2, #12]
 8022cf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022cf2:	6852      	ldr	r2, [r2, #4]
 8022cf4:	b2cd      	uxtb	r5, r1
 8022cf6:	b18b      	cbz	r3, 8022d1c <_sungetc_r+0x44>
 8022cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022cfa:	4293      	cmp	r3, r2
 8022cfc:	dd08      	ble.n	8022d10 <_sungetc_r+0x38>
 8022cfe:	6823      	ldr	r3, [r4, #0]
 8022d00:	1e5a      	subs	r2, r3, #1
 8022d02:	6022      	str	r2, [r4, #0]
 8022d04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8022d08:	6863      	ldr	r3, [r4, #4]
 8022d0a:	3301      	adds	r3, #1
 8022d0c:	6063      	str	r3, [r4, #4]
 8022d0e:	e7e9      	b.n	8022ce4 <_sungetc_r+0xc>
 8022d10:	4621      	mov	r1, r4
 8022d12:	f000 fb39 	bl	8023388 <__submore>
 8022d16:	2800      	cmp	r0, #0
 8022d18:	d0f1      	beq.n	8022cfe <_sungetc_r+0x26>
 8022d1a:	e7e1      	b.n	8022ce0 <_sungetc_r+0x8>
 8022d1c:	6921      	ldr	r1, [r4, #16]
 8022d1e:	6823      	ldr	r3, [r4, #0]
 8022d20:	b151      	cbz	r1, 8022d38 <_sungetc_r+0x60>
 8022d22:	4299      	cmp	r1, r3
 8022d24:	d208      	bcs.n	8022d38 <_sungetc_r+0x60>
 8022d26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8022d2a:	42a9      	cmp	r1, r5
 8022d2c:	d104      	bne.n	8022d38 <_sungetc_r+0x60>
 8022d2e:	3b01      	subs	r3, #1
 8022d30:	3201      	adds	r2, #1
 8022d32:	6023      	str	r3, [r4, #0]
 8022d34:	6062      	str	r2, [r4, #4]
 8022d36:	e7d5      	b.n	8022ce4 <_sungetc_r+0xc>
 8022d38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8022d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022d40:	6363      	str	r3, [r4, #52]	; 0x34
 8022d42:	2303      	movs	r3, #3
 8022d44:	63a3      	str	r3, [r4, #56]	; 0x38
 8022d46:	4623      	mov	r3, r4
 8022d48:	f803 5f46 	strb.w	r5, [r3, #70]!
 8022d4c:	6023      	str	r3, [r4, #0]
 8022d4e:	2301      	movs	r3, #1
 8022d50:	e7dc      	b.n	8022d0c <_sungetc_r+0x34>

08022d52 <__ssrefill_r>:
 8022d52:	b510      	push	{r4, lr}
 8022d54:	460c      	mov	r4, r1
 8022d56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022d58:	b169      	cbz	r1, 8022d76 <__ssrefill_r+0x24>
 8022d5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022d5e:	4299      	cmp	r1, r3
 8022d60:	d001      	beq.n	8022d66 <__ssrefill_r+0x14>
 8022d62:	f7fd fc41 	bl	80205e8 <_free_r>
 8022d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022d68:	6063      	str	r3, [r4, #4]
 8022d6a:	2000      	movs	r0, #0
 8022d6c:	6360      	str	r0, [r4, #52]	; 0x34
 8022d6e:	b113      	cbz	r3, 8022d76 <__ssrefill_r+0x24>
 8022d70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022d72:	6023      	str	r3, [r4, #0]
 8022d74:	bd10      	pop	{r4, pc}
 8022d76:	6923      	ldr	r3, [r4, #16]
 8022d78:	6023      	str	r3, [r4, #0]
 8022d7a:	2300      	movs	r3, #0
 8022d7c:	6063      	str	r3, [r4, #4]
 8022d7e:	89a3      	ldrh	r3, [r4, #12]
 8022d80:	f043 0320 	orr.w	r3, r3, #32
 8022d84:	81a3      	strh	r3, [r4, #12]
 8022d86:	f04f 30ff 	mov.w	r0, #4294967295
 8022d8a:	e7f3      	b.n	8022d74 <__ssrefill_r+0x22>

08022d8c <__ssvfiscanf_r>:
 8022d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d90:	460c      	mov	r4, r1
 8022d92:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8022d96:	2100      	movs	r1, #0
 8022d98:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8022d9c:	49b2      	ldr	r1, [pc, #712]	; (8023068 <__ssvfiscanf_r+0x2dc>)
 8022d9e:	91a0      	str	r1, [sp, #640]	; 0x280
 8022da0:	f10d 0804 	add.w	r8, sp, #4
 8022da4:	49b1      	ldr	r1, [pc, #708]	; (802306c <__ssvfiscanf_r+0x2e0>)
 8022da6:	4fb2      	ldr	r7, [pc, #712]	; (8023070 <__ssvfiscanf_r+0x2e4>)
 8022da8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8023074 <__ssvfiscanf_r+0x2e8>
 8022dac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8022db0:	4606      	mov	r6, r0
 8022db2:	91a1      	str	r1, [sp, #644]	; 0x284
 8022db4:	9300      	str	r3, [sp, #0]
 8022db6:	f892 a000 	ldrb.w	sl, [r2]
 8022dba:	f1ba 0f00 	cmp.w	sl, #0
 8022dbe:	f000 8151 	beq.w	8023064 <__ssvfiscanf_r+0x2d8>
 8022dc2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8022dc6:	f013 0308 	ands.w	r3, r3, #8
 8022dca:	f102 0501 	add.w	r5, r2, #1
 8022dce:	d019      	beq.n	8022e04 <__ssvfiscanf_r+0x78>
 8022dd0:	6863      	ldr	r3, [r4, #4]
 8022dd2:	2b00      	cmp	r3, #0
 8022dd4:	dd0f      	ble.n	8022df6 <__ssvfiscanf_r+0x6a>
 8022dd6:	6823      	ldr	r3, [r4, #0]
 8022dd8:	781a      	ldrb	r2, [r3, #0]
 8022dda:	5cba      	ldrb	r2, [r7, r2]
 8022ddc:	0712      	lsls	r2, r2, #28
 8022dde:	d401      	bmi.n	8022de4 <__ssvfiscanf_r+0x58>
 8022de0:	462a      	mov	r2, r5
 8022de2:	e7e8      	b.n	8022db6 <__ssvfiscanf_r+0x2a>
 8022de4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022de6:	3201      	adds	r2, #1
 8022de8:	9245      	str	r2, [sp, #276]	; 0x114
 8022dea:	6862      	ldr	r2, [r4, #4]
 8022dec:	3301      	adds	r3, #1
 8022dee:	3a01      	subs	r2, #1
 8022df0:	6062      	str	r2, [r4, #4]
 8022df2:	6023      	str	r3, [r4, #0]
 8022df4:	e7ec      	b.n	8022dd0 <__ssvfiscanf_r+0x44>
 8022df6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022df8:	4621      	mov	r1, r4
 8022dfa:	4630      	mov	r0, r6
 8022dfc:	4798      	blx	r3
 8022dfe:	2800      	cmp	r0, #0
 8022e00:	d0e9      	beq.n	8022dd6 <__ssvfiscanf_r+0x4a>
 8022e02:	e7ed      	b.n	8022de0 <__ssvfiscanf_r+0x54>
 8022e04:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8022e08:	f040 8083 	bne.w	8022f12 <__ssvfiscanf_r+0x186>
 8022e0c:	9341      	str	r3, [sp, #260]	; 0x104
 8022e0e:	9343      	str	r3, [sp, #268]	; 0x10c
 8022e10:	7853      	ldrb	r3, [r2, #1]
 8022e12:	2b2a      	cmp	r3, #42	; 0x2a
 8022e14:	bf02      	ittt	eq
 8022e16:	2310      	moveq	r3, #16
 8022e18:	1c95      	addeq	r5, r2, #2
 8022e1a:	9341      	streq	r3, [sp, #260]	; 0x104
 8022e1c:	220a      	movs	r2, #10
 8022e1e:	46ab      	mov	fp, r5
 8022e20:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8022e24:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8022e28:	2b09      	cmp	r3, #9
 8022e2a:	d91d      	bls.n	8022e68 <__ssvfiscanf_r+0xdc>
 8022e2c:	4891      	ldr	r0, [pc, #580]	; (8023074 <__ssvfiscanf_r+0x2e8>)
 8022e2e:	2203      	movs	r2, #3
 8022e30:	f7dd fa16 	bl	8000260 <memchr>
 8022e34:	b140      	cbz	r0, 8022e48 <__ssvfiscanf_r+0xbc>
 8022e36:	2301      	movs	r3, #1
 8022e38:	eba0 0009 	sub.w	r0, r0, r9
 8022e3c:	fa03 f000 	lsl.w	r0, r3, r0
 8022e40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022e42:	4318      	orrs	r0, r3
 8022e44:	9041      	str	r0, [sp, #260]	; 0x104
 8022e46:	465d      	mov	r5, fp
 8022e48:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022e4c:	2b78      	cmp	r3, #120	; 0x78
 8022e4e:	d806      	bhi.n	8022e5e <__ssvfiscanf_r+0xd2>
 8022e50:	2b57      	cmp	r3, #87	; 0x57
 8022e52:	d810      	bhi.n	8022e76 <__ssvfiscanf_r+0xea>
 8022e54:	2b25      	cmp	r3, #37	; 0x25
 8022e56:	d05c      	beq.n	8022f12 <__ssvfiscanf_r+0x186>
 8022e58:	d856      	bhi.n	8022f08 <__ssvfiscanf_r+0x17c>
 8022e5a:	2b00      	cmp	r3, #0
 8022e5c:	d074      	beq.n	8022f48 <__ssvfiscanf_r+0x1bc>
 8022e5e:	2303      	movs	r3, #3
 8022e60:	9347      	str	r3, [sp, #284]	; 0x11c
 8022e62:	230a      	movs	r3, #10
 8022e64:	9342      	str	r3, [sp, #264]	; 0x108
 8022e66:	e081      	b.n	8022f6c <__ssvfiscanf_r+0x1e0>
 8022e68:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8022e6a:	fb02 1303 	mla	r3, r2, r3, r1
 8022e6e:	3b30      	subs	r3, #48	; 0x30
 8022e70:	9343      	str	r3, [sp, #268]	; 0x10c
 8022e72:	465d      	mov	r5, fp
 8022e74:	e7d3      	b.n	8022e1e <__ssvfiscanf_r+0x92>
 8022e76:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8022e7a:	2a20      	cmp	r2, #32
 8022e7c:	d8ef      	bhi.n	8022e5e <__ssvfiscanf_r+0xd2>
 8022e7e:	a101      	add	r1, pc, #4	; (adr r1, 8022e84 <__ssvfiscanf_r+0xf8>)
 8022e80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022e84:	08022f57 	.word	0x08022f57
 8022e88:	08022e5f 	.word	0x08022e5f
 8022e8c:	08022e5f 	.word	0x08022e5f
 8022e90:	08022fb5 	.word	0x08022fb5
 8022e94:	08022e5f 	.word	0x08022e5f
 8022e98:	08022e5f 	.word	0x08022e5f
 8022e9c:	08022e5f 	.word	0x08022e5f
 8022ea0:	08022e5f 	.word	0x08022e5f
 8022ea4:	08022e5f 	.word	0x08022e5f
 8022ea8:	08022e5f 	.word	0x08022e5f
 8022eac:	08022e5f 	.word	0x08022e5f
 8022eb0:	08022fcb 	.word	0x08022fcb
 8022eb4:	08022fa1 	.word	0x08022fa1
 8022eb8:	08022f0f 	.word	0x08022f0f
 8022ebc:	08022f0f 	.word	0x08022f0f
 8022ec0:	08022f0f 	.word	0x08022f0f
 8022ec4:	08022e5f 	.word	0x08022e5f
 8022ec8:	08022fa5 	.word	0x08022fa5
 8022ecc:	08022e5f 	.word	0x08022e5f
 8022ed0:	08022e5f 	.word	0x08022e5f
 8022ed4:	08022e5f 	.word	0x08022e5f
 8022ed8:	08022e5f 	.word	0x08022e5f
 8022edc:	08022fdb 	.word	0x08022fdb
 8022ee0:	08022fad 	.word	0x08022fad
 8022ee4:	08022f4f 	.word	0x08022f4f
 8022ee8:	08022e5f 	.word	0x08022e5f
 8022eec:	08022e5f 	.word	0x08022e5f
 8022ef0:	08022fd7 	.word	0x08022fd7
 8022ef4:	08022e5f 	.word	0x08022e5f
 8022ef8:	08022fa1 	.word	0x08022fa1
 8022efc:	08022e5f 	.word	0x08022e5f
 8022f00:	08022e5f 	.word	0x08022e5f
 8022f04:	08022f57 	.word	0x08022f57
 8022f08:	3b45      	subs	r3, #69	; 0x45
 8022f0a:	2b02      	cmp	r3, #2
 8022f0c:	d8a7      	bhi.n	8022e5e <__ssvfiscanf_r+0xd2>
 8022f0e:	2305      	movs	r3, #5
 8022f10:	e02b      	b.n	8022f6a <__ssvfiscanf_r+0x1de>
 8022f12:	6863      	ldr	r3, [r4, #4]
 8022f14:	2b00      	cmp	r3, #0
 8022f16:	dd0d      	ble.n	8022f34 <__ssvfiscanf_r+0x1a8>
 8022f18:	6823      	ldr	r3, [r4, #0]
 8022f1a:	781a      	ldrb	r2, [r3, #0]
 8022f1c:	4552      	cmp	r2, sl
 8022f1e:	f040 80a1 	bne.w	8023064 <__ssvfiscanf_r+0x2d8>
 8022f22:	3301      	adds	r3, #1
 8022f24:	6862      	ldr	r2, [r4, #4]
 8022f26:	6023      	str	r3, [r4, #0]
 8022f28:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8022f2a:	3a01      	subs	r2, #1
 8022f2c:	3301      	adds	r3, #1
 8022f2e:	6062      	str	r2, [r4, #4]
 8022f30:	9345      	str	r3, [sp, #276]	; 0x114
 8022f32:	e755      	b.n	8022de0 <__ssvfiscanf_r+0x54>
 8022f34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022f36:	4621      	mov	r1, r4
 8022f38:	4630      	mov	r0, r6
 8022f3a:	4798      	blx	r3
 8022f3c:	2800      	cmp	r0, #0
 8022f3e:	d0eb      	beq.n	8022f18 <__ssvfiscanf_r+0x18c>
 8022f40:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022f42:	2800      	cmp	r0, #0
 8022f44:	f040 8084 	bne.w	8023050 <__ssvfiscanf_r+0x2c4>
 8022f48:	f04f 30ff 	mov.w	r0, #4294967295
 8022f4c:	e086      	b.n	802305c <__ssvfiscanf_r+0x2d0>
 8022f4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022f50:	f042 0220 	orr.w	r2, r2, #32
 8022f54:	9241      	str	r2, [sp, #260]	; 0x104
 8022f56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022f5c:	9241      	str	r2, [sp, #260]	; 0x104
 8022f5e:	2210      	movs	r2, #16
 8022f60:	2b6f      	cmp	r3, #111	; 0x6f
 8022f62:	9242      	str	r2, [sp, #264]	; 0x108
 8022f64:	bf34      	ite	cc
 8022f66:	2303      	movcc	r3, #3
 8022f68:	2304      	movcs	r3, #4
 8022f6a:	9347      	str	r3, [sp, #284]	; 0x11c
 8022f6c:	6863      	ldr	r3, [r4, #4]
 8022f6e:	2b00      	cmp	r3, #0
 8022f70:	dd41      	ble.n	8022ff6 <__ssvfiscanf_r+0x26a>
 8022f72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022f74:	0659      	lsls	r1, r3, #25
 8022f76:	d404      	bmi.n	8022f82 <__ssvfiscanf_r+0x1f6>
 8022f78:	6823      	ldr	r3, [r4, #0]
 8022f7a:	781a      	ldrb	r2, [r3, #0]
 8022f7c:	5cba      	ldrb	r2, [r7, r2]
 8022f7e:	0712      	lsls	r2, r2, #28
 8022f80:	d440      	bmi.n	8023004 <__ssvfiscanf_r+0x278>
 8022f82:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8022f84:	2b02      	cmp	r3, #2
 8022f86:	dc4f      	bgt.n	8023028 <__ssvfiscanf_r+0x29c>
 8022f88:	466b      	mov	r3, sp
 8022f8a:	4622      	mov	r2, r4
 8022f8c:	a941      	add	r1, sp, #260	; 0x104
 8022f8e:	4630      	mov	r0, r6
 8022f90:	f000 f874 	bl	802307c <_scanf_chars>
 8022f94:	2801      	cmp	r0, #1
 8022f96:	d065      	beq.n	8023064 <__ssvfiscanf_r+0x2d8>
 8022f98:	2802      	cmp	r0, #2
 8022f9a:	f47f af21 	bne.w	8022de0 <__ssvfiscanf_r+0x54>
 8022f9e:	e7cf      	b.n	8022f40 <__ssvfiscanf_r+0x1b4>
 8022fa0:	220a      	movs	r2, #10
 8022fa2:	e7dd      	b.n	8022f60 <__ssvfiscanf_r+0x1d4>
 8022fa4:	2300      	movs	r3, #0
 8022fa6:	9342      	str	r3, [sp, #264]	; 0x108
 8022fa8:	2303      	movs	r3, #3
 8022faa:	e7de      	b.n	8022f6a <__ssvfiscanf_r+0x1de>
 8022fac:	2308      	movs	r3, #8
 8022fae:	9342      	str	r3, [sp, #264]	; 0x108
 8022fb0:	2304      	movs	r3, #4
 8022fb2:	e7da      	b.n	8022f6a <__ssvfiscanf_r+0x1de>
 8022fb4:	4629      	mov	r1, r5
 8022fb6:	4640      	mov	r0, r8
 8022fb8:	f000 f9ac 	bl	8023314 <__sccl>
 8022fbc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022fc2:	9341      	str	r3, [sp, #260]	; 0x104
 8022fc4:	4605      	mov	r5, r0
 8022fc6:	2301      	movs	r3, #1
 8022fc8:	e7cf      	b.n	8022f6a <__ssvfiscanf_r+0x1de>
 8022fca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022fd0:	9341      	str	r3, [sp, #260]	; 0x104
 8022fd2:	2300      	movs	r3, #0
 8022fd4:	e7c9      	b.n	8022f6a <__ssvfiscanf_r+0x1de>
 8022fd6:	2302      	movs	r3, #2
 8022fd8:	e7c7      	b.n	8022f6a <__ssvfiscanf_r+0x1de>
 8022fda:	9841      	ldr	r0, [sp, #260]	; 0x104
 8022fdc:	06c3      	lsls	r3, r0, #27
 8022fde:	f53f aeff 	bmi.w	8022de0 <__ssvfiscanf_r+0x54>
 8022fe2:	9b00      	ldr	r3, [sp, #0]
 8022fe4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022fe6:	1d19      	adds	r1, r3, #4
 8022fe8:	9100      	str	r1, [sp, #0]
 8022fea:	681b      	ldr	r3, [r3, #0]
 8022fec:	07c0      	lsls	r0, r0, #31
 8022fee:	bf4c      	ite	mi
 8022ff0:	801a      	strhmi	r2, [r3, #0]
 8022ff2:	601a      	strpl	r2, [r3, #0]
 8022ff4:	e6f4      	b.n	8022de0 <__ssvfiscanf_r+0x54>
 8022ff6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022ff8:	4621      	mov	r1, r4
 8022ffa:	4630      	mov	r0, r6
 8022ffc:	4798      	blx	r3
 8022ffe:	2800      	cmp	r0, #0
 8023000:	d0b7      	beq.n	8022f72 <__ssvfiscanf_r+0x1e6>
 8023002:	e79d      	b.n	8022f40 <__ssvfiscanf_r+0x1b4>
 8023004:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023006:	3201      	adds	r2, #1
 8023008:	9245      	str	r2, [sp, #276]	; 0x114
 802300a:	6862      	ldr	r2, [r4, #4]
 802300c:	3a01      	subs	r2, #1
 802300e:	2a00      	cmp	r2, #0
 8023010:	6062      	str	r2, [r4, #4]
 8023012:	dd02      	ble.n	802301a <__ssvfiscanf_r+0x28e>
 8023014:	3301      	adds	r3, #1
 8023016:	6023      	str	r3, [r4, #0]
 8023018:	e7ae      	b.n	8022f78 <__ssvfiscanf_r+0x1ec>
 802301a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802301c:	4621      	mov	r1, r4
 802301e:	4630      	mov	r0, r6
 8023020:	4798      	blx	r3
 8023022:	2800      	cmp	r0, #0
 8023024:	d0a8      	beq.n	8022f78 <__ssvfiscanf_r+0x1ec>
 8023026:	e78b      	b.n	8022f40 <__ssvfiscanf_r+0x1b4>
 8023028:	2b04      	cmp	r3, #4
 802302a:	dc06      	bgt.n	802303a <__ssvfiscanf_r+0x2ae>
 802302c:	466b      	mov	r3, sp
 802302e:	4622      	mov	r2, r4
 8023030:	a941      	add	r1, sp, #260	; 0x104
 8023032:	4630      	mov	r0, r6
 8023034:	f000 f87a 	bl	802312c <_scanf_i>
 8023038:	e7ac      	b.n	8022f94 <__ssvfiscanf_r+0x208>
 802303a:	4b0f      	ldr	r3, [pc, #60]	; (8023078 <__ssvfiscanf_r+0x2ec>)
 802303c:	2b00      	cmp	r3, #0
 802303e:	f43f aecf 	beq.w	8022de0 <__ssvfiscanf_r+0x54>
 8023042:	466b      	mov	r3, sp
 8023044:	4622      	mov	r2, r4
 8023046:	a941      	add	r1, sp, #260	; 0x104
 8023048:	4630      	mov	r0, r6
 802304a:	f3af 8000 	nop.w
 802304e:	e7a1      	b.n	8022f94 <__ssvfiscanf_r+0x208>
 8023050:	89a3      	ldrh	r3, [r4, #12]
 8023052:	f013 0f40 	tst.w	r3, #64	; 0x40
 8023056:	bf18      	it	ne
 8023058:	f04f 30ff 	movne.w	r0, #4294967295
 802305c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8023060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023064:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023066:	e7f9      	b.n	802305c <__ssvfiscanf_r+0x2d0>
 8023068:	08022cd9 	.word	0x08022cd9
 802306c:	08022d53 	.word	0x08022d53
 8023070:	080299a1 	.word	0x080299a1
 8023074:	08029ab1 	.word	0x08029ab1
 8023078:	00000000 	.word	0x00000000

0802307c <_scanf_chars>:
 802307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023080:	4615      	mov	r5, r2
 8023082:	688a      	ldr	r2, [r1, #8]
 8023084:	4680      	mov	r8, r0
 8023086:	460c      	mov	r4, r1
 8023088:	b932      	cbnz	r2, 8023098 <_scanf_chars+0x1c>
 802308a:	698a      	ldr	r2, [r1, #24]
 802308c:	2a00      	cmp	r2, #0
 802308e:	bf0c      	ite	eq
 8023090:	2201      	moveq	r2, #1
 8023092:	f04f 32ff 	movne.w	r2, #4294967295
 8023096:	608a      	str	r2, [r1, #8]
 8023098:	6822      	ldr	r2, [r4, #0]
 802309a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8023128 <_scanf_chars+0xac>
 802309e:	06d1      	lsls	r1, r2, #27
 80230a0:	bf5f      	itttt	pl
 80230a2:	681a      	ldrpl	r2, [r3, #0]
 80230a4:	1d11      	addpl	r1, r2, #4
 80230a6:	6019      	strpl	r1, [r3, #0]
 80230a8:	6816      	ldrpl	r6, [r2, #0]
 80230aa:	2700      	movs	r7, #0
 80230ac:	69a0      	ldr	r0, [r4, #24]
 80230ae:	b188      	cbz	r0, 80230d4 <_scanf_chars+0x58>
 80230b0:	2801      	cmp	r0, #1
 80230b2:	d107      	bne.n	80230c4 <_scanf_chars+0x48>
 80230b4:	682b      	ldr	r3, [r5, #0]
 80230b6:	781a      	ldrb	r2, [r3, #0]
 80230b8:	6963      	ldr	r3, [r4, #20]
 80230ba:	5c9b      	ldrb	r3, [r3, r2]
 80230bc:	b953      	cbnz	r3, 80230d4 <_scanf_chars+0x58>
 80230be:	bb27      	cbnz	r7, 802310a <_scanf_chars+0x8e>
 80230c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80230c4:	2802      	cmp	r0, #2
 80230c6:	d120      	bne.n	802310a <_scanf_chars+0x8e>
 80230c8:	682b      	ldr	r3, [r5, #0]
 80230ca:	781b      	ldrb	r3, [r3, #0]
 80230cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80230d0:	071b      	lsls	r3, r3, #28
 80230d2:	d41a      	bmi.n	802310a <_scanf_chars+0x8e>
 80230d4:	6823      	ldr	r3, [r4, #0]
 80230d6:	06da      	lsls	r2, r3, #27
 80230d8:	bf5e      	ittt	pl
 80230da:	682b      	ldrpl	r3, [r5, #0]
 80230dc:	781b      	ldrbpl	r3, [r3, #0]
 80230de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80230e2:	682a      	ldr	r2, [r5, #0]
 80230e4:	686b      	ldr	r3, [r5, #4]
 80230e6:	3201      	adds	r2, #1
 80230e8:	602a      	str	r2, [r5, #0]
 80230ea:	68a2      	ldr	r2, [r4, #8]
 80230ec:	3b01      	subs	r3, #1
 80230ee:	3a01      	subs	r2, #1
 80230f0:	606b      	str	r3, [r5, #4]
 80230f2:	3701      	adds	r7, #1
 80230f4:	60a2      	str	r2, [r4, #8]
 80230f6:	b142      	cbz	r2, 802310a <_scanf_chars+0x8e>
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	dcd7      	bgt.n	80230ac <_scanf_chars+0x30>
 80230fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023100:	4629      	mov	r1, r5
 8023102:	4640      	mov	r0, r8
 8023104:	4798      	blx	r3
 8023106:	2800      	cmp	r0, #0
 8023108:	d0d0      	beq.n	80230ac <_scanf_chars+0x30>
 802310a:	6823      	ldr	r3, [r4, #0]
 802310c:	f013 0310 	ands.w	r3, r3, #16
 8023110:	d105      	bne.n	802311e <_scanf_chars+0xa2>
 8023112:	68e2      	ldr	r2, [r4, #12]
 8023114:	3201      	adds	r2, #1
 8023116:	60e2      	str	r2, [r4, #12]
 8023118:	69a2      	ldr	r2, [r4, #24]
 802311a:	b102      	cbz	r2, 802311e <_scanf_chars+0xa2>
 802311c:	7033      	strb	r3, [r6, #0]
 802311e:	6923      	ldr	r3, [r4, #16]
 8023120:	441f      	add	r7, r3
 8023122:	6127      	str	r7, [r4, #16]
 8023124:	2000      	movs	r0, #0
 8023126:	e7cb      	b.n	80230c0 <_scanf_chars+0x44>
 8023128:	080299a1 	.word	0x080299a1

0802312c <_scanf_i>:
 802312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023130:	4698      	mov	r8, r3
 8023132:	4b74      	ldr	r3, [pc, #464]	; (8023304 <_scanf_i+0x1d8>)
 8023134:	460c      	mov	r4, r1
 8023136:	4682      	mov	sl, r0
 8023138:	4616      	mov	r6, r2
 802313a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802313e:	b087      	sub	sp, #28
 8023140:	ab03      	add	r3, sp, #12
 8023142:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8023146:	4b70      	ldr	r3, [pc, #448]	; (8023308 <_scanf_i+0x1dc>)
 8023148:	69a1      	ldr	r1, [r4, #24]
 802314a:	4a70      	ldr	r2, [pc, #448]	; (802330c <_scanf_i+0x1e0>)
 802314c:	2903      	cmp	r1, #3
 802314e:	bf18      	it	ne
 8023150:	461a      	movne	r2, r3
 8023152:	68a3      	ldr	r3, [r4, #8]
 8023154:	9201      	str	r2, [sp, #4]
 8023156:	1e5a      	subs	r2, r3, #1
 8023158:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802315c:	bf88      	it	hi
 802315e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8023162:	4627      	mov	r7, r4
 8023164:	bf82      	ittt	hi
 8023166:	eb03 0905 	addhi.w	r9, r3, r5
 802316a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802316e:	60a3      	strhi	r3, [r4, #8]
 8023170:	f857 3b1c 	ldr.w	r3, [r7], #28
 8023174:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8023178:	bf98      	it	ls
 802317a:	f04f 0900 	movls.w	r9, #0
 802317e:	6023      	str	r3, [r4, #0]
 8023180:	463d      	mov	r5, r7
 8023182:	f04f 0b00 	mov.w	fp, #0
 8023186:	6831      	ldr	r1, [r6, #0]
 8023188:	ab03      	add	r3, sp, #12
 802318a:	7809      	ldrb	r1, [r1, #0]
 802318c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8023190:	2202      	movs	r2, #2
 8023192:	f7dd f865 	bl	8000260 <memchr>
 8023196:	b328      	cbz	r0, 80231e4 <_scanf_i+0xb8>
 8023198:	f1bb 0f01 	cmp.w	fp, #1
 802319c:	d159      	bne.n	8023252 <_scanf_i+0x126>
 802319e:	6862      	ldr	r2, [r4, #4]
 80231a0:	b92a      	cbnz	r2, 80231ae <_scanf_i+0x82>
 80231a2:	6822      	ldr	r2, [r4, #0]
 80231a4:	2308      	movs	r3, #8
 80231a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80231aa:	6063      	str	r3, [r4, #4]
 80231ac:	6022      	str	r2, [r4, #0]
 80231ae:	6822      	ldr	r2, [r4, #0]
 80231b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80231b4:	6022      	str	r2, [r4, #0]
 80231b6:	68a2      	ldr	r2, [r4, #8]
 80231b8:	1e51      	subs	r1, r2, #1
 80231ba:	60a1      	str	r1, [r4, #8]
 80231bc:	b192      	cbz	r2, 80231e4 <_scanf_i+0xb8>
 80231be:	6832      	ldr	r2, [r6, #0]
 80231c0:	1c51      	adds	r1, r2, #1
 80231c2:	6031      	str	r1, [r6, #0]
 80231c4:	7812      	ldrb	r2, [r2, #0]
 80231c6:	f805 2b01 	strb.w	r2, [r5], #1
 80231ca:	6872      	ldr	r2, [r6, #4]
 80231cc:	3a01      	subs	r2, #1
 80231ce:	2a00      	cmp	r2, #0
 80231d0:	6072      	str	r2, [r6, #4]
 80231d2:	dc07      	bgt.n	80231e4 <_scanf_i+0xb8>
 80231d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80231d8:	4631      	mov	r1, r6
 80231da:	4650      	mov	r0, sl
 80231dc:	4790      	blx	r2
 80231de:	2800      	cmp	r0, #0
 80231e0:	f040 8085 	bne.w	80232ee <_scanf_i+0x1c2>
 80231e4:	f10b 0b01 	add.w	fp, fp, #1
 80231e8:	f1bb 0f03 	cmp.w	fp, #3
 80231ec:	d1cb      	bne.n	8023186 <_scanf_i+0x5a>
 80231ee:	6863      	ldr	r3, [r4, #4]
 80231f0:	b90b      	cbnz	r3, 80231f6 <_scanf_i+0xca>
 80231f2:	230a      	movs	r3, #10
 80231f4:	6063      	str	r3, [r4, #4]
 80231f6:	6863      	ldr	r3, [r4, #4]
 80231f8:	4945      	ldr	r1, [pc, #276]	; (8023310 <_scanf_i+0x1e4>)
 80231fa:	6960      	ldr	r0, [r4, #20]
 80231fc:	1ac9      	subs	r1, r1, r3
 80231fe:	f000 f889 	bl	8023314 <__sccl>
 8023202:	f04f 0b00 	mov.w	fp, #0
 8023206:	68a3      	ldr	r3, [r4, #8]
 8023208:	6822      	ldr	r2, [r4, #0]
 802320a:	2b00      	cmp	r3, #0
 802320c:	d03d      	beq.n	802328a <_scanf_i+0x15e>
 802320e:	6831      	ldr	r1, [r6, #0]
 8023210:	6960      	ldr	r0, [r4, #20]
 8023212:	f891 c000 	ldrb.w	ip, [r1]
 8023216:	f810 000c 	ldrb.w	r0, [r0, ip]
 802321a:	2800      	cmp	r0, #0
 802321c:	d035      	beq.n	802328a <_scanf_i+0x15e>
 802321e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8023222:	d124      	bne.n	802326e <_scanf_i+0x142>
 8023224:	0510      	lsls	r0, r2, #20
 8023226:	d522      	bpl.n	802326e <_scanf_i+0x142>
 8023228:	f10b 0b01 	add.w	fp, fp, #1
 802322c:	f1b9 0f00 	cmp.w	r9, #0
 8023230:	d003      	beq.n	802323a <_scanf_i+0x10e>
 8023232:	3301      	adds	r3, #1
 8023234:	f109 39ff 	add.w	r9, r9, #4294967295
 8023238:	60a3      	str	r3, [r4, #8]
 802323a:	6873      	ldr	r3, [r6, #4]
 802323c:	3b01      	subs	r3, #1
 802323e:	2b00      	cmp	r3, #0
 8023240:	6073      	str	r3, [r6, #4]
 8023242:	dd1b      	ble.n	802327c <_scanf_i+0x150>
 8023244:	6833      	ldr	r3, [r6, #0]
 8023246:	3301      	adds	r3, #1
 8023248:	6033      	str	r3, [r6, #0]
 802324a:	68a3      	ldr	r3, [r4, #8]
 802324c:	3b01      	subs	r3, #1
 802324e:	60a3      	str	r3, [r4, #8]
 8023250:	e7d9      	b.n	8023206 <_scanf_i+0xda>
 8023252:	f1bb 0f02 	cmp.w	fp, #2
 8023256:	d1ae      	bne.n	80231b6 <_scanf_i+0x8a>
 8023258:	6822      	ldr	r2, [r4, #0]
 802325a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802325e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8023262:	d1bf      	bne.n	80231e4 <_scanf_i+0xb8>
 8023264:	2310      	movs	r3, #16
 8023266:	6063      	str	r3, [r4, #4]
 8023268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802326c:	e7a2      	b.n	80231b4 <_scanf_i+0x88>
 802326e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8023272:	6022      	str	r2, [r4, #0]
 8023274:	780b      	ldrb	r3, [r1, #0]
 8023276:	f805 3b01 	strb.w	r3, [r5], #1
 802327a:	e7de      	b.n	802323a <_scanf_i+0x10e>
 802327c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023280:	4631      	mov	r1, r6
 8023282:	4650      	mov	r0, sl
 8023284:	4798      	blx	r3
 8023286:	2800      	cmp	r0, #0
 8023288:	d0df      	beq.n	802324a <_scanf_i+0x11e>
 802328a:	6823      	ldr	r3, [r4, #0]
 802328c:	05d9      	lsls	r1, r3, #23
 802328e:	d50d      	bpl.n	80232ac <_scanf_i+0x180>
 8023290:	42bd      	cmp	r5, r7
 8023292:	d909      	bls.n	80232a8 <_scanf_i+0x17c>
 8023294:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8023298:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802329c:	4632      	mov	r2, r6
 802329e:	4650      	mov	r0, sl
 80232a0:	4798      	blx	r3
 80232a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80232a6:	464d      	mov	r5, r9
 80232a8:	42bd      	cmp	r5, r7
 80232aa:	d028      	beq.n	80232fe <_scanf_i+0x1d2>
 80232ac:	6822      	ldr	r2, [r4, #0]
 80232ae:	f012 0210 	ands.w	r2, r2, #16
 80232b2:	d113      	bne.n	80232dc <_scanf_i+0x1b0>
 80232b4:	702a      	strb	r2, [r5, #0]
 80232b6:	6863      	ldr	r3, [r4, #4]
 80232b8:	9e01      	ldr	r6, [sp, #4]
 80232ba:	4639      	mov	r1, r7
 80232bc:	4650      	mov	r0, sl
 80232be:	47b0      	blx	r6
 80232c0:	f8d8 3000 	ldr.w	r3, [r8]
 80232c4:	6821      	ldr	r1, [r4, #0]
 80232c6:	1d1a      	adds	r2, r3, #4
 80232c8:	f8c8 2000 	str.w	r2, [r8]
 80232cc:	f011 0f20 	tst.w	r1, #32
 80232d0:	681b      	ldr	r3, [r3, #0]
 80232d2:	d00f      	beq.n	80232f4 <_scanf_i+0x1c8>
 80232d4:	6018      	str	r0, [r3, #0]
 80232d6:	68e3      	ldr	r3, [r4, #12]
 80232d8:	3301      	adds	r3, #1
 80232da:	60e3      	str	r3, [r4, #12]
 80232dc:	1bed      	subs	r5, r5, r7
 80232de:	44ab      	add	fp, r5
 80232e0:	6925      	ldr	r5, [r4, #16]
 80232e2:	445d      	add	r5, fp
 80232e4:	6125      	str	r5, [r4, #16]
 80232e6:	2000      	movs	r0, #0
 80232e8:	b007      	add	sp, #28
 80232ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232ee:	f04f 0b00 	mov.w	fp, #0
 80232f2:	e7ca      	b.n	802328a <_scanf_i+0x15e>
 80232f4:	07ca      	lsls	r2, r1, #31
 80232f6:	bf4c      	ite	mi
 80232f8:	8018      	strhmi	r0, [r3, #0]
 80232fa:	6018      	strpl	r0, [r3, #0]
 80232fc:	e7eb      	b.n	80232d6 <_scanf_i+0x1aa>
 80232fe:	2001      	movs	r0, #1
 8023300:	e7f2      	b.n	80232e8 <_scanf_i+0x1bc>
 8023302:	bf00      	nop
 8023304:	08026968 	.word	0x08026968
 8023308:	080216ed 	.word	0x080216ed
 802330c:	080215dd 	.word	0x080215dd
 8023310:	08029af7 	.word	0x08029af7

08023314 <__sccl>:
 8023314:	b570      	push	{r4, r5, r6, lr}
 8023316:	780b      	ldrb	r3, [r1, #0]
 8023318:	4604      	mov	r4, r0
 802331a:	2b5e      	cmp	r3, #94	; 0x5e
 802331c:	bf0b      	itete	eq
 802331e:	784b      	ldrbeq	r3, [r1, #1]
 8023320:	1c48      	addne	r0, r1, #1
 8023322:	1c88      	addeq	r0, r1, #2
 8023324:	2200      	movne	r2, #0
 8023326:	bf08      	it	eq
 8023328:	2201      	moveq	r2, #1
 802332a:	1e61      	subs	r1, r4, #1
 802332c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8023330:	f801 2f01 	strb.w	r2, [r1, #1]!
 8023334:	42a9      	cmp	r1, r5
 8023336:	d1fb      	bne.n	8023330 <__sccl+0x1c>
 8023338:	b90b      	cbnz	r3, 802333e <__sccl+0x2a>
 802333a:	3801      	subs	r0, #1
 802333c:	bd70      	pop	{r4, r5, r6, pc}
 802333e:	f082 0101 	eor.w	r1, r2, #1
 8023342:	54e1      	strb	r1, [r4, r3]
 8023344:	1c42      	adds	r2, r0, #1
 8023346:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802334a:	2d2d      	cmp	r5, #45	; 0x2d
 802334c:	f102 36ff 	add.w	r6, r2, #4294967295
 8023350:	4610      	mov	r0, r2
 8023352:	d006      	beq.n	8023362 <__sccl+0x4e>
 8023354:	2d5d      	cmp	r5, #93	; 0x5d
 8023356:	d0f1      	beq.n	802333c <__sccl+0x28>
 8023358:	b90d      	cbnz	r5, 802335e <__sccl+0x4a>
 802335a:	4630      	mov	r0, r6
 802335c:	e7ee      	b.n	802333c <__sccl+0x28>
 802335e:	462b      	mov	r3, r5
 8023360:	e7ef      	b.n	8023342 <__sccl+0x2e>
 8023362:	7816      	ldrb	r6, [r2, #0]
 8023364:	2e5d      	cmp	r6, #93	; 0x5d
 8023366:	d0fa      	beq.n	802335e <__sccl+0x4a>
 8023368:	42b3      	cmp	r3, r6
 802336a:	dcf8      	bgt.n	802335e <__sccl+0x4a>
 802336c:	4618      	mov	r0, r3
 802336e:	3001      	adds	r0, #1
 8023370:	4286      	cmp	r6, r0
 8023372:	5421      	strb	r1, [r4, r0]
 8023374:	dcfb      	bgt.n	802336e <__sccl+0x5a>
 8023376:	43d8      	mvns	r0, r3
 8023378:	4430      	add	r0, r6
 802337a:	1c5d      	adds	r5, r3, #1
 802337c:	42b3      	cmp	r3, r6
 802337e:	bfa8      	it	ge
 8023380:	2000      	movge	r0, #0
 8023382:	182b      	adds	r3, r5, r0
 8023384:	3202      	adds	r2, #2
 8023386:	e7de      	b.n	8023346 <__sccl+0x32>

08023388 <__submore>:
 8023388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802338c:	460c      	mov	r4, r1
 802338e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023394:	4299      	cmp	r1, r3
 8023396:	d11d      	bne.n	80233d4 <__submore+0x4c>
 8023398:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802339c:	f7fd f974 	bl	8020688 <_malloc_r>
 80233a0:	b918      	cbnz	r0, 80233aa <__submore+0x22>
 80233a2:	f04f 30ff 	mov.w	r0, #4294967295
 80233a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80233ae:	63a3      	str	r3, [r4, #56]	; 0x38
 80233b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80233b4:	6360      	str	r0, [r4, #52]	; 0x34
 80233b6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80233ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80233be:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80233c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80233c6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80233ca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80233ce:	6020      	str	r0, [r4, #0]
 80233d0:	2000      	movs	r0, #0
 80233d2:	e7e8      	b.n	80233a6 <__submore+0x1e>
 80233d4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80233d6:	0077      	lsls	r7, r6, #1
 80233d8:	463a      	mov	r2, r7
 80233da:	f7fe fefd 	bl	80221d8 <_realloc_r>
 80233de:	4605      	mov	r5, r0
 80233e0:	2800      	cmp	r0, #0
 80233e2:	d0de      	beq.n	80233a2 <__submore+0x1a>
 80233e4:	eb00 0806 	add.w	r8, r0, r6
 80233e8:	4601      	mov	r1, r0
 80233ea:	4632      	mov	r2, r6
 80233ec:	4640      	mov	r0, r8
 80233ee:	f7fd f8d5 	bl	802059c <memcpy>
 80233f2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80233f6:	f8c4 8000 	str.w	r8, [r4]
 80233fa:	e7e9      	b.n	80233d0 <__submore+0x48>

080233fc <_init>:
 80233fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233fe:	bf00      	nop
 8023400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023402:	bc08      	pop	{r3}
 8023404:	469e      	mov	lr, r3
 8023406:	4770      	bx	lr

08023408 <_fini>:
 8023408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802340a:	bf00      	nop
 802340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802340e:	bc08      	pop	{r3}
 8023410:	469e      	mov	lr, r3
 8023412:	4770      	bx	lr
 8023414:	0000      	movs	r0, r0
	...

08023418 <__time_veneer>:
 8023418:	e51ff004 	ldr	pc, [pc, #-4]	; 802341c <__time_veneer+0x4>
 802341c:	200005c0 	.word	0x200005c0
