
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022b58  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000627c  08022d38  08022d38  00032d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028fb4  08028fb4  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08028fb4  08028fb4  00038fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028fbc  08028fbc  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08028fbc  08028fbc  00038fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08028fcc  08028fcc  00038fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08028fdc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf8  2000033c  08029318  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f34  08029318  00040f34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00069ea3  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c0d4  00000000  00000000  000aa20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004420  00000000  00000000  000b62e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004200  00000000  00000000  000ba708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d861  00000000  00000000  000be908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d0fb  00000000  00000000  000ec169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113380  00000000  00000000  00119264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022c5e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001496c  00000000  00000000  0022c638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08022d18 	.word	0x08022d18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08022d18 	.word	0x08022d18

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000408 	.word	0x20000408

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01e fade 	bl	801f32c <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01e fa36 	bl	801f32c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000f38 	.word	0x20000f38

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01e fe0d 	bl	801fb68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 ffdb 	bl	8003f08 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08028fdc 	.word	0x08028fdc
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000f34 	.word	0x20000f34

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000f20 	.word	0x20000f20
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000f20 	.word	0x20000f20

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08026090 	.word	0x08026090
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	080260a0 	.word	0x080260a0

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	080260a0 	.word	0x080260a0

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	080260a8 	.word	0x080260a8
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	080260c0 	.word	0x080260c0
 8003904:	080260c8 	.word	0x080260c8

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 f9f6 	bl	8003d2c <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	20000498 	.word	0x20000498

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fa08 	bl	8003dae <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	20000498 	.word	0x20000498

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fa7f 	bl	8003ec2 <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000498 	.word	0x20000498

080039d4 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <Wait_Response+0x74>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <Wait_Response+0x78>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <Wait_Response+0x7c>)
 80039f0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <Wait_Response+0x74>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <Wait_Response+0x80>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fa5f 	bl	8003ec2 <ringBuffer_lookFor>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <Wait_Response+0x46>
	{
		firstCall = 0;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <Wait_Response+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <Wait_Response+0x7c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e012      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <Wait_Response+0x78>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4798      	blx	r3
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <Wait_Response+0x7c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d807      	bhi.n	8003a3e <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <Wait_Response+0x74>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <Wait_Response+0x7c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e000      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003a3e:	2305      	movs	r3, #5
	}

}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000036c 	.word	0x2000036c
 8003a4c:	20000360 	.word	0x20000360
 8003a50:	20000370 	.word	0x20000370
 8003a54:	20000498 	.word	0x20000498

08003a58 <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b098      	sub	sp, #96	; 0x60
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003a62:	4a16      	ldr	r2, [pc, #88]	; (8003abc <Connect_Wifi+0x64>)
 8003a64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003a6e:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <Connect_Wifi+0x68>)
 8003a70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003a80:	f107 0008 	add.w	r0, r7, #8
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <Connect_Wifi+0x6c>)
 8003a8c:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <Connect_Wifi+0x70>)
 8003a8e:	f01c fbdf 	bl	8020250 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003a92:	f107 0308 	add.w	r3, r7, #8
 8003a96:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003a98:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003a9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f82e 	bl	8003b04 <Command_Process>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003aae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3758      	adds	r7, #88	; 0x58
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	08022da4 	.word	0x08022da4
 8003ac0:	08022db0 	.word	0x08022db0
 8003ac4:	08022d88 	.word	0x08022d88
 8003ac8:	08022d94 	.word	0x08022d94

08003acc <Disconnect_Wifi>:

Status Disconnect_Wifi(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <Disconnect_Wifi+0x30>)
 8003ad4:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <Disconnect_Wifi+0x34>)
 8003ad8:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003ada:	2305      	movs	r3, #5
 8003adc:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003ade:	1d39      	adds	r1, r7, #4
 8003ae0:	f107 0308 	add.w	r3, r7, #8
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f80c 	bl	8003b04 <Command_Process>
 8003aec:	4603      	mov	r3, r0
 8003aee:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]

}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	08022d48 	.word	0x08022d48
 8003b00:	08022d58 	.word	0x08022d58

08003b04 <Command_Process>:

Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <Command_Process+0x1e>
 8003b18:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <Command_Process+0xfc>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	79fa      	ldrb	r2, [r7, #7]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d806      	bhi.n	8003b30 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <Command_Process+0x100>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f995 	bl	8003e56 <ringBuffer_flush>
		return STATUS_ERROR;
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	e062      	b.n	8003bf6 <Command_Process+0xf2>
	}
	else
	{
		if(commandFlag)
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <Command_Process+0x104>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <Command_Process+0xfc>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff0b 	bl	8003960 <Send_AT_Command>
			commandFlag = 0;
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <Command_Process+0x104>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
		}
//		else
//		{
			response = Wait_Response(responseArray[currentCommand], 5000);
 8003b50:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <Command_Process+0xfc>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4413      	add	r3, r2
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff37 	bl	80039d4 <Wait_Response>
 8003b66:	4603      	mov	r3, r0
 8003b68:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003b6a:	4828      	ldr	r0, [pc, #160]	; (8003c0c <Command_Process+0x108>)
 8003b6c:	f7ff ff20 	bl	80039b0 <Read_Response>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <Command_Process+0x104>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <Command_Process+0xfc>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <Command_Process+0x100>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f965 	bl	8003e56 <ringBuffer_flush>
				return STATUS_ERROR;
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e032      	b.n	8003bf6 <Command_Process+0xf2>
			}
			else if(response == IDLE)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d101      	bne.n	8003b9a <Command_Process+0x96>
			{
				return response;
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	e02d      	b.n	8003bf6 <Command_Process+0xf2>
			}
			else if(response == FOUND)
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d123      	bne.n	8003be8 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <Command_Process+0xfc>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d10c      	bne.n	8003bc8 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003bae:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <Command_Process+0x104>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <Command_Process+0xfc>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <Command_Process+0x100>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f949 	bl	8003e56 <ringBuffer_flush>
					return STATUS_OK;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e016      	b.n	8003bf6 <Command_Process+0xf2>
				}
				else
				{
					commandFlag = 1;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <Command_Process+0x104>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <Command_Process+0xfc>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <Command_Process+0xfc>)
 8003bd8:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <Command_Process+0x100>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f939 	bl	8003e56 <ringBuffer_flush>
					return response;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	e006      	b.n	8003bf6 <Command_Process+0xf2>
				}

			}
			else
			{
				commandFlag = 1;
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <Command_Process+0x104>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <Command_Process+0xfc>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
				return response;
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
			}
//		}
	}


}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000374 	.word	0x20000374
 8003c04:	20000498 	.word	0x20000498
 8003c08:	20000010 	.word	0x20000010
 8003c0c:	08022dbc 	.word	0x08022dbc

08003c10 <Connect_TCP_Server>:

Status Connect_TCP_Server(char* ip, char* port)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b0a4      	sub	sp, #144	; 0x90
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	char *command_buffer[3] =
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <Connect_TCP_Server+0x64>)
 8003c22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_CIPCLOSE,
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[3] =
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <Connect_TCP_Server+0x68>)
 8003c2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003c32:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003c38:	f107 0008 	add.w	r0, r7, #8
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <Connect_TCP_Server+0x6c>)
 8003c44:	490e      	ldr	r1, [pc, #56]	; (8003c80 <Connect_TCP_Server+0x70>)
 8003c46:	f01c fb03 	bl	8020250 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003c52:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003c56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff51 	bl	8003b04 <Command_Process>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	return response_state;
 8003c68:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3788      	adds	r7, #136	; 0x88
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	08022de4 	.word	0x08022de4
 8003c78:	08022db0 	.word	0x08022db0
 8003c7c:	08022dc4 	.word	0x08022dc4
 8003c80:	08022dd8 	.word	0x08022dd8

08003c84 <Disconnect_TCP_Server>:

Status Disconnect_TCP_Server(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003c8a:	2305      	movs	r3, #5
 8003c8c:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <Disconnect_TCP_Server+0x30>)
 8003c90:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <Disconnect_TCP_Server+0x34>)
 8003c94:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003c96:	1d39      	adds	r1, r7, #4
 8003c98:	f107 0308 	add.w	r3, r7, #8
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff ff30 	bl	8003b04 <Command_Process>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]

}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	08022d5c 	.word	0x08022d5c
 8003cb8:	08022d58 	.word	0x08022d58

08003cbc <Send_TCP_Message>:

Status Send_TCP_Message(char* message)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b096      	sub	sp, #88	; 0x58
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fc fab4 	bl	800023c <strlen>
 8003cd4:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%d\r\n",AT_CIPSEND,length);
 8003cd6:	f107 001c 	add.w	r0, r7, #28
 8003cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cdc:	4a10      	ldr	r2, [pc, #64]	; (8003d20 <Send_TCP_Message+0x64>)
 8003cde:	4911      	ldr	r1, [pc, #68]	; (8003d24 <Send_TCP_Message+0x68>)
 8003ce0:	f01c fab6 	bl	8020250 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8003ce4:	f107 031c 	add.w	r3, r7, #28
 8003ce8:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 8003cee:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <Send_TCP_Message+0x6c>)
 8003cf0:	f107 030c 	add.w	r3, r7, #12
 8003cf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cf8:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003cfc:	f107 010c 	add.w	r1, r7, #12
 8003d00:	f107 0314 	add.w	r3, r7, #20
 8003d04:	2202      	movs	r2, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fefc 	bl	8003b04 <Command_Process>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 8003d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3758      	adds	r7, #88	; 0x58
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	08022df0 	.word	0x08022df0
 8003d24:	08022dfc 	.word	0x08022dfc
 8003d28:	08022e04 	.word	0x08022e04

08003d2c <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003d34:	2010      	movs	r0, #16
 8003d36:	f01c f8b9 	bl	801feac <malloc>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e017      	b.n	8003d78 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f01b fadd 	bl	801f31c <calloc>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461a      	mov	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f01c f88e 	bl	801febc <free>
		}
		free(buffer);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f01c f88b 	bl	801febc <free>
	}
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d00c      	beq.n	8003de2 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003de0:	e009      	b.n	8003df6 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d00d      	beq.n	8003e34 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	605a      	str	r2, [r3, #4]
		return data;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	e00a      	b.n	8003e4a <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]
		return data;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68d8      	ldr	r0, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	461a      	mov	r2, r3
 8003e68:	2100      	movs	r1, #0
 8003e6a:	f01c f83d 	bl	801fee8 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	601a      	str	r2, [r3, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e00a      	b.n	8003eaa <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ff85 	bl	8003dae <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	6838      	ldr	r0, [r7, #0]
 8003eac:	f7fc f9c6 	bl	800023c <strlen>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d8ed      	bhi.n	8003e94 <ringBuffer_pushArray+0x10>
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	6839      	ldr	r1, [r7, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f01c ff7e 	bl	8020dd4 <strstr>
 8003ed8:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <ringBuffer_lookFor+0x22>
		return 1;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003ee4:	2300      	movs	r3, #0

}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f0e:	f7fd f82e 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f12:	f000 f81d 	bl	8003f50 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f16:	f000 f951 	bl	80041bc <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003f1a:	f000 f891 	bl	8004040 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003f1e:	f000 f8ed 	bl	80040fc <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003f22:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <main+0x44>)
 8003f24:	463b      	mov	r3, r7
 8003f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f2a:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003f2e:	463b      	mov	r3, r7
 8003f30:	4619      	mov	r1, r3
 8003f32:	2002      	movs	r0, #2
 8003f34:	f004 fa66 	bl	8008404 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003f38:	2120      	movs	r1, #32
 8003f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f3e:	f7fd fc13 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003f42:	2064      	movs	r0, #100	; 0x64
 8003f44:	f7fd f884 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003f48:	e7f6      	b.n	8003f38 <main+0x30>
 8003f4a:	bf00      	nop
 8003f4c:	08022e14 	.word	0x08022e14

08003f50 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b0a8      	sub	sp, #160	; 0xa0
 8003f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f5a:	2238      	movs	r2, #56	; 0x38
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f01b ffc2 	bl	801fee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f74:	463b      	mov	r3, r7
 8003f76:	2254      	movs	r2, #84	; 0x54
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f01b ffb4 	bl	801fee8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7fd fc2f 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f86:	2302      	movs	r3, #2
 8003f88:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f8e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f90:	2340      	movs	r3, #64	; 0x40
 8003f92:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f94:	2302      	movs	r3, #2
 8003f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003fa6:	2355      	movs	r3, #85	; 0x55
 8003fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003fac:	2302      	movs	r3, #2
 8003fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd fcc2 	bl	800194c <HAL_RCC_OscConfig>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003fd8:	f000 f960 	bl	800429c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fdc:	230f      	movs	r3, #15
 8003fde:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fec:	2300      	movs	r3, #0
 8003fee:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003ff0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ff4:	2104      	movs	r1, #4
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd ffc0 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf14      	ite	ne
 8004002:	2301      	movne	r3, #1
 8004004:	2300      	moveq	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 800400c:	f000 f946 	bl	800429c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8004010:	2321      	movs	r3, #33	; 0x21
 8004012:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004014:	2300      	movs	r3, #0
 8004016:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800401c:	463b      	mov	r3, r7
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe f9c8 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf14      	ite	ne
 800402a:	2301      	movne	r3, #1
 800402c:	2300      	moveq	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8004034:	f000 f932 	bl	800429c <Error_Handler>
  }
}
 8004038:	bf00      	nop
 800403a:	37a0      	adds	r7, #160	; 0xa0
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004044:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004046:	4a2c      	ldr	r2, [pc, #176]	; (80040f8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8004048:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800404c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004050:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004052:	4b28      	ldr	r3, [pc, #160]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004058:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800405e:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004064:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004066:	220c      	movs	r2, #12
 8004068:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406a:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004072:	2200      	movs	r2, #0
 8004074:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004076:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004078:	2200      	movs	r2, #0
 800407a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800407e:	2200      	movs	r2, #0
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004082:	481c      	ldr	r0, [pc, #112]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004084:	f7fe fbe2 	bl	800284c <HAL_UART_Init>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8004098:	f000 f900 	bl	800429c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800409c:	2100      	movs	r1, #0
 800409e:	4815      	ldr	r0, [pc, #84]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040a0:	f7ff fb68 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 80040b4:	f000 f8f2 	bl	800429c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040b8:	2100      	movs	r1, #0
 80040ba:	480e      	ldr	r0, [pc, #56]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040bc:	f7ff fb98 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 80040d0:	f000 f8e4 	bl	800429c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80040d4:	4807      	ldr	r0, [pc, #28]	; (80040f4 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80040d6:	f7ff fb14 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 80040ea:	f000 f8d7 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000378 	.word	0x20000378
 80040f8:	40008000 	.word	0x40008000

080040fc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004100:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004102:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8004104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004106:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800410c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800410e:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004110:	2200      	movs	r2, #0
 8004112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004114:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004116:	2200      	movs	r2, #0
 8004118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800411a:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800411c:	2200      	movs	r2, #0
 800411e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004120:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004122:	220c      	movs	r2, #12
 8004124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004128:	2200      	movs	r2, #0
 800412a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800412c:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800412e:	2200      	movs	r2, #0
 8004130:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004132:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004134:	2200      	movs	r2, #0
 8004136:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004138:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800413a:	2200      	movs	r2, #0
 800413c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004140:	2200      	movs	r2, #0
 8004142:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004144:	481b      	ldr	r0, [pc, #108]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004146:	f7fe fb81 	bl	800284c <HAL_UART_Init>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800415a:	f000 f89f 	bl	800429c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800415e:	2100      	movs	r1, #0
 8004160:	4814      	ldr	r0, [pc, #80]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004162:	f7ff fb07 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8004176:	f000 f891 	bl	800429c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800417a:	2100      	movs	r1, #0
 800417c:	480d      	ldr	r0, [pc, #52]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800417e:	f7ff fb37 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8004192:	f000 f883 	bl	800429c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004196:	4807      	ldr	r0, [pc, #28]	; (80041b4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004198:	f7ff fab3 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80041ac:	f000 f876 	bl	800429c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041b0:	bf00      	nop
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000408 	.word	0x20000408
 80041b8:	40013800 	.word	0x40013800

080041bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c2:	f107 0314 	add.w	r3, r7, #20
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d2:	4b2f      	ldr	r3, [pc, #188]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	4a2e      	ldr	r2, [pc, #184]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041de:	4b2c      	ldr	r3, [pc, #176]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 80041e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041ea:	4b29      	ldr	r3, [pc, #164]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	4a28      	ldr	r2, [pc, #160]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 80041f0:	f043 0320 	orr.w	r3, r3, #32
 80041f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041f6:	4b26      	ldr	r3, [pc, #152]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004202:	4b23      	ldr	r3, [pc, #140]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	4a22      	ldr	r2, [pc, #136]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800421a:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 800421c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421e:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 8004220:	f043 0302 	orr.w	r3, r3, #2
 8004224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004226:	4b1a      	ldr	r3, [pc, #104]	; (8004290 <_ZL12MX_GPIO_Initv+0xd4>)
 8004228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004232:	2200      	movs	r2, #0
 8004234:	2120      	movs	r1, #32
 8004236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800423a:	f7fd fa7d 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800423e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004244:	4b13      	ldr	r3, [pc, #76]	; (8004294 <_ZL12MX_GPIO_Initv+0xd8>)
 8004246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800424c:	f107 0314 	add.w	r3, r7, #20
 8004250:	4619      	mov	r1, r3
 8004252:	4811      	ldr	r0, [pc, #68]	; (8004298 <_ZL12MX_GPIO_Initv+0xdc>)
 8004254:	f7fd f8ee 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004258:	2320      	movs	r3, #32
 800425a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800425c:	2301      	movs	r3, #1
 800425e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004264:	2300      	movs	r3, #0
 8004266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	4619      	mov	r1, r3
 800426e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004272:	f7fd f8df 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004276:	2200      	movs	r2, #0
 8004278:	2100      	movs	r1, #0
 800427a:	2028      	movs	r0, #40	; 0x28
 800427c:	f7fc ffe5 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004280:	2028      	movs	r0, #40	; 0x28
 8004282:	f7fc fffc 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8004286:	bf00      	nop
 8004288:	3728      	adds	r7, #40	; 0x28
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	10110000 	.word	0x10110000
 8004298:	48000800 	.word	0x48000800

0800429c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042a0:	b672      	cpsid	i
}
 80042a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042a4:	e7fe      	b.n	80042a4 <Error_Handler+0x8>

080042a6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 80042ae:	2032      	movs	r0, #50	; 0x32
 80042b0:	f7ff fd3c 	bl	8003d2c <ringBuffer_init>
 80042b4:	4602      	mov	r2, r0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	605a      	str	r2, [r3, #4]

	}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fd56 	bl	8003d80 <ringBuffer_deInit>
	}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f00f fd2a 	bl	8013d40 <_ZN5UtestC1Ev>
 80042ec:	4a03      	ldr	r2, [pc, #12]	; (80042fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	080275b0 	.word	0x080275b0

08004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	4a05      	ldr	r2, [pc, #20]	; (8004320 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4618      	mov	r0, r3
 8004312:	f00f fd25 	bl	8013d60 <_ZN5UtestD1Ev>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	080275b0 	.word	0x080275b0

08004324 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ffe7 	bl	8004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004332:	2108      	movs	r1, #8
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f005 fd47 	bl	8009dc8 <_ZdlPvj>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	605a      	str	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ffbe 	bl	80042dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004360:	4a03      	ldr	r2, [pc, #12]	; (8004370 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	08027590 	.word	0x08027590

08004374 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	2224      	movs	r2, #36	; 0x24
 800437e:	4906      	ldr	r1, [pc, #24]	; (8004398 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8004380:	2008      	movs	r0, #8
 8004382:	f005 fd0d 	bl	8009da0 <_ZnwjPKci>
 8004386:	4604      	mov	r4, r0
 8004388:	4620      	mov	r0, r4
 800438a:	f7ff ffdb 	bl	8004344 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 800438e:	4623      	mov	r3, r4
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bd90      	pop	{r4, r7, pc}
 8004398:	08022ea4 	.word	0x08022ea4

0800439c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f00e f8e8 	bl	801257c <_ZN10UtestShellC1Ev>
 80043ac:	4a03      	ldr	r2, [pc, #12]	; (80043bc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	080274e4 	.word	0x080274e4

080043c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 80043c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af04      	add	r7, sp, #16
 80043c6:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 80043c8:	f00f fc90 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80043cc:	4604      	mov	r4, r0
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	3338      	adds	r3, #56	; 0x38
 80043d2:	681d      	ldr	r5, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	461e      	mov	r6, r3
 80043dc:	f00f fc96 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043e0:	4603      	mov	r3, r0
 80043e2:	9302      	str	r3, [sp, #8]
 80043e4:	2327      	movs	r3, #39	; 0x27
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 80043ee:	4632      	mov	r2, r6
 80043f0:	2132      	movs	r1, #50	; 0x32
 80043f2:	4620      	mov	r0, r4
 80043f4:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 80043f6:	f00f fc79 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80043fa:	4604      	mov	r4, r0
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	3320      	adds	r3, #32
 8004400:	681d      	ldr	r5, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2de      	uxtb	r6, r3
 8004412:	f00f fc7b 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004416:	4603      	mov	r3, r0
 8004418:	9303      	str	r3, [sp, #12]
 800441a:	2328      	movs	r3, #40	; 0x28
 800441c:	9302      	str	r3, [sp, #8]
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	2300      	movs	r3, #0
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004428:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800442a:	4631      	mov	r1, r6
 800442c:	4620      	mov	r0, r4
 800442e:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004430:	f00f fc5c 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004434:	4604      	mov	r4, r0
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	3338      	adds	r3, #56	; 0x38
 800443a:	681d      	ldr	r5, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461e      	mov	r6, r3
 8004444:	f00f fc62 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004448:	4603      	mov	r3, r0
 800444a:	9302      	str	r3, [sp, #8]
 800444c:	2329      	movs	r3, #41	; 0x29
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	4b10      	ldr	r3, [pc, #64]	; (8004494 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8004456:	4632      	mov	r2, r6
 8004458:	2100      	movs	r1, #0
 800445a:	4620      	mov	r0, r4
 800445c:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 800445e:	f00f fc45 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004462:	4604      	mov	r4, r0
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	3338      	adds	r3, #56	; 0x38
 8004468:	681d      	ldr	r5, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	461e      	mov	r6, r3
 8004472:	f00f fc4b 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004476:	4603      	mov	r3, r0
 8004478:	9302      	str	r3, [sp, #8]
 800447a:	232a      	movs	r3, #42	; 0x2a
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8004484:	4632      	mov	r2, r6
 8004486:	2100      	movs	r1, #0
 8004488:	4620      	mov	r0, r4
 800448a:	47a8      	blx	r5

}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004494:	08022ea4 	.word	0x08022ea4
 8004498:	08022eb8 	.word	0x08022eb8
 800449c:	08022ee0 	.word	0x08022ee0
 80044a0:	08022ef8 	.word	0x08022ef8
 80044a4:	08022f00 	.word	0x08022f00
 80044a8:	08022f28 	.word	0x08022f28

080044ac <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff ff0a 	bl	80042dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80044c8:	4a03      	ldr	r2, [pc, #12]	; (80044d8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	080274c4 	.word	0x080274c4

080044dc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	222e      	movs	r2, #46	; 0x2e
 80044e6:	4906      	ldr	r1, [pc, #24]	; (8004500 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 80044e8:	2008      	movs	r0, #8
 80044ea:	f005 fc59 	bl	8009da0 <_ZnwjPKci>
 80044ee:	4604      	mov	r4, r0
 80044f0:	4620      	mov	r0, r4
 80044f2:	f7ff ffdb 	bl	80044ac <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 80044f6:	4623      	mov	r3, r4
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd90      	pop	{r4, r7, pc}
 8004500:	08022ea4 	.word	0x08022ea4

08004504 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4618      	mov	r0, r3
 8004510:	f00e f834 	bl	801257c <_ZN10UtestShellC1Ev>
 8004514:	4a03      	ldr	r2, [pc, #12]	; (8004524 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	08027418 	.word	0x08027418

08004528 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452a:	b087      	sub	sp, #28
 800452c:	af04      	add	r7, sp, #16
 800452e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2145      	movs	r1, #69	; 0x45
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fc39 	bl	8003dae <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 800453c:	f00f fbd6 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004540:	4604      	mov	r4, r0
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	3338      	adds	r3, #56	; 0x38
 8004546:	681d      	ldr	r5, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	461e      	mov	r6, r3
 8004552:	f00f fbdb 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004556:	4603      	mov	r3, r0
 8004558:	9302      	str	r3, [sp, #8]
 800455a:	2331      	movs	r3, #49	; 0x31
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004564:	4632      	mov	r2, r6
 8004566:	2145      	movs	r1, #69	; 0x45
 8004568:	4620      	mov	r0, r4
 800456a:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2110      	movs	r1, #16
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fc1b 	bl	8003dae <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004578:	f00f fbb8 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800457c:	4604      	mov	r4, r0
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	3338      	adds	r3, #56	; 0x38
 8004582:	681d      	ldr	r5, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	3301      	adds	r3, #1
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	461e      	mov	r6, r3
 8004590:	f00f fbbc 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004594:	4603      	mov	r3, r0
 8004596:	9302      	str	r3, [sp, #8]
 8004598:	2334      	movs	r3, #52	; 0x34
 800459a:	9301      	str	r3, [sp, #4]
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80045a2:	4632      	mov	r2, r6
 80045a4:	2110      	movs	r1, #16
 80045a6:	4620      	mov	r0, r4
 80045a8:	47a8      	blx	r5

}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b2:	bf00      	nop
 80045b4:	08022ea4 	.word	0x08022ea4
 80045b8:	08022f50 	.word	0x08022f50
 80045bc:	08022f80 	.word	0x08022f80

080045c0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	605a      	str	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fe80 	bl	80042dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80045dc:	4a03      	ldr	r2, [pc, #12]	; (80045ec <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	080273f8 	.word	0x080273f8

080045f0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	2238      	movs	r2, #56	; 0x38
 80045fa:	4906      	ldr	r1, [pc, #24]	; (8004614 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 80045fc:	2008      	movs	r0, #8
 80045fe:	f005 fbcf 	bl	8009da0 <_ZnwjPKci>
 8004602:	4604      	mov	r4, r0
 8004604:	4620      	mov	r0, r4
 8004606:	f7ff ffdb 	bl	80045c0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800460a:	4623      	mov	r3, r4
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bd90      	pop	{r4, r7, pc}
 8004614:	08022ea4 	.word	0x08022ea4

08004618 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4618      	mov	r0, r3
 8004624:	f00d ffaa 	bl	801257c <_ZN10UtestShellC1Ev>
 8004628:	4a03      	ldr	r2, [pc, #12]	; (8004638 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	0802734c 	.word	0x0802734c

0800463c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 800463c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af04      	add	r7, sp, #16
 8004642:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	3b01      	subs	r3, #1
 800465a:	429a      	cmp	r2, r3
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4293      	cmp	r3, r2
 800466a:	da0b      	bge.n	8004684 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fb99 	bl	8003dae <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	e7e3      	b.n	800464c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	21ff      	movs	r1, #255	; 0xff
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fb8f 	bl	8003dae <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004690:	f00f fb2c 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004694:	4604      	mov	r4, r0
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	3338      	adds	r3, #56	; 0x38
 800469a:	681d      	ldr	r5, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	461e      	mov	r6, r3
 80046a6:	f00f fb31 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046aa:	4603      	mov	r3, r0
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	2340      	movs	r3, #64	; 0x40
 80046b0:	9301      	str	r3, [sp, #4]
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80046b8:	4632      	mov	r2, r6
 80046ba:	21ff      	movs	r1, #255	; 0xff
 80046bc:	4620      	mov	r0, r4
 80046be:	47a8      	blx	r5
}
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c8:	08022ea4 	.word	0x08022ea4
 80046cc:	08022fb0 	.word	0x08022fb0

080046d0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fdf8 	bl	80042dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80046ec:	4a03      	ldr	r2, [pc, #12]	; (80046fc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	0802732c 	.word	0x0802732c

08004700 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	2243      	movs	r2, #67	; 0x43
 800470a:	4906      	ldr	r1, [pc, #24]	; (8004724 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 800470c:	2008      	movs	r0, #8
 800470e:	f005 fb47 	bl	8009da0 <_ZnwjPKci>
 8004712:	4604      	mov	r4, r0
 8004714:	4620      	mov	r0, r4
 8004716:	f7ff ffdb 	bl	80046d0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800471a:	4623      	mov	r3, r4
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	08022ea4 	.word	0x08022ea4

08004728 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4618      	mov	r0, r3
 8004734:	f00d ff22 	bl	801257c <_ZN10UtestShellC1Ev>
 8004738:	4a03      	ldr	r2, [pc, #12]	; (8004748 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	08027280 	.word	0x08027280

0800474c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 800474c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800474e:	b089      	sub	sp, #36	; 0x24
 8004750:	af04      	add	r7, sp, #16
 8004752:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	21ff      	movs	r1, #255	; 0xff
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fb27 	bl	8003dae <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fb4c 	bl	8003e02 <ringBuffer_pop>
 800476a:	4603      	mov	r3, r0
 800476c:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 800476e:	f00f fabd 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004772:	4604      	mov	r4, r0
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	3338      	adds	r3, #56	; 0x38
 8004778:	681d      	ldr	r5, [r3, #0]
 800477a:	7bfe      	ldrb	r6, [r7, #15]
 800477c:	f00f fac6 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004780:	4603      	mov	r3, r0
 8004782:	9302      	str	r3, [sp, #8]
 8004784:	2348      	movs	r3, #72	; 0x48
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 800478e:	4632      	mov	r2, r6
 8004790:	21ff      	movs	r1, #255	; 0xff
 8004792:	4620      	mov	r0, r4
 8004794:	47a8      	blx	r5

}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800479e:	bf00      	nop
 80047a0:	08022ea4 	.word	0x08022ea4
 80047a4:	08022fe0 	.word	0x08022fe0

080047a8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fd8c 	bl	80042dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80047c4:	4a03      	ldr	r2, [pc, #12]	; (80047d4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	08027260 	.word	0x08027260

080047d8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	224c      	movs	r2, #76	; 0x4c
 80047e2:	4906      	ldr	r1, [pc, #24]	; (80047fc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 80047e4:	2008      	movs	r0, #8
 80047e6:	f005 fadb 	bl	8009da0 <_ZnwjPKci>
 80047ea:	4604      	mov	r4, r0
 80047ec:	4620      	mov	r0, r4
 80047ee:	f7ff ffdb 	bl	80047a8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 80047f2:	4623      	mov	r3, r4
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd90      	pop	{r4, r7, pc}
 80047fc:	08022ea4 	.word	0x08022ea4

08004800 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4618      	mov	r0, r3
 800480c:	f00d feb6 	bl	801257c <_ZN10UtestShellC1Ev>
 8004810:	4a03      	ldr	r2, [pc, #12]	; (8004820 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	080271b4 	.word	0x080271b4

08004824 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af04      	add	r7, sp, #16
 800482a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	21aa      	movs	r1, #170	; 0xaa
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fab9 	bl	8003dae <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	3b01      	subs	r3, #1
 8004852:	429a      	cmp	r2, r3
 8004854:	bf0c      	ite	eq
 8004856:	2301      	moveq	r3, #1
 8004858:	2300      	movne	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4293      	cmp	r3, r2
 8004862:	da0a      	bge.n	800487a <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff faca 	bl	8003e02 <ringBuffer_pop>
 800486e:	4603      	mov	r3, r0
 8004870:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3301      	adds	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	e7e4      	b.n	8004844 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fabf 	bl	8003e02 <ringBuffer_pop>
 8004884:	4603      	mov	r3, r0
 8004886:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004888:	f00f fa30 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800488c:	4604      	mov	r4, r0
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	3338      	adds	r3, #56	; 0x38
 8004892:	681d      	ldr	r5, [r3, #0]
 8004894:	7afe      	ldrb	r6, [r7, #11]
 8004896:	f00f fa39 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800489a:	4603      	mov	r3, r0
 800489c:	9302      	str	r3, [sp, #8]
 800489e:	2359      	movs	r3, #89	; 0x59
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80048a8:	4632      	mov	r2, r6
 80048aa:	21aa      	movs	r1, #170	; 0xaa
 80048ac:	4620      	mov	r0, r4
 80048ae:	47a8      	blx	r5
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b8:	08022ea4 	.word	0x08022ea4
 80048bc:	08023000 	.word	0x08023000

080048c0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fd00 	bl	80042dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80048dc:	4a03      	ldr	r2, [pc, #12]	; (80048ec <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	08027194 	.word	0x08027194

080048f0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	225c      	movs	r2, #92	; 0x5c
 80048fa:	4906      	ldr	r1, [pc, #24]	; (8004914 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 80048fc:	2008      	movs	r0, #8
 80048fe:	f005 fa4f 	bl	8009da0 <_ZnwjPKci>
 8004902:	4604      	mov	r4, r0
 8004904:	4620      	mov	r0, r4
 8004906:	f7ff ffdb 	bl	80048c0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 800490a:	4623      	mov	r3, r4
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bd90      	pop	{r4, r7, pc}
 8004914:	08022ea4 	.word	0x08022ea4

08004918 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f00d fe2a 	bl	801257c <_ZN10UtestShellC1Ev>
 8004928:	4a03      	ldr	r2, [pc, #12]	; (8004938 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	080270e8 	.word	0x080270e8

0800493c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 800493c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af04      	add	r7, sp, #16
 8004942:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	429a      	cmp	r2, r3
 8004952:	d20b      	bcs.n	800496c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fa25 	bl	8003dae <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e7ed      	b.n	8004948 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 800496c:	f00f f9be 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004970:	4604      	mov	r4, r0
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	3338      	adds	r3, #56	; 0x38
 8004976:	681d      	ldr	r5, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	3b01      	subs	r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	461e      	mov	r6, r3
 800498c:	f00f f9be 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004990:	4603      	mov	r3, r0
 8004992:	9302      	str	r3, [sp, #8]
 8004994:	2363      	movs	r3, #99	; 0x63
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 800499e:	4632      	mov	r2, r6
 80049a0:	2131      	movs	r1, #49	; 0x31
 80049a2:	4620      	mov	r0, r4
 80049a4:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fa53 	bl	8003e56 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 80049b0:	f00f f99c 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80049b4:	4604      	mov	r4, r0
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	3338      	adds	r3, #56	; 0x38
 80049ba:	681d      	ldr	r5, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	461e      	mov	r6, r3
 80049d0:	f00f f99c 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049d4:	4603      	mov	r3, r0
 80049d6:	9302      	str	r3, [sp, #8]
 80049d8:	2367      	movs	r3, #103	; 0x67
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 80049e2:	4632      	mov	r2, r6
 80049e4:	2100      	movs	r1, #0
 80049e6:	4620      	mov	r0, r4
 80049e8:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 80049ea:	f00f f97f 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80049ee:	4604      	mov	r4, r0
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	3338      	adds	r3, #56	; 0x38
 80049f4:	681d      	ldr	r5, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	4413      	add	r3, r2
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	461e      	mov	r6, r3
 8004a0a:	f00f f97f 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	9302      	str	r3, [sp, #8]
 8004a12:	2368      	movs	r3, #104	; 0x68
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004a1c:	4632      	mov	r2, r6
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4620      	mov	r0, r4
 8004a22:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2c:	08022ea4 	.word	0x08022ea4
 8004a30:	08023020 	.word	0x08023020
 8004a34:	0802305c 	.word	0x0802305c
 8004a38:	08023098 	.word	0x08023098

08004a3c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fc42 	bl	80042dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a58:	4a03      	ldr	r2, [pc, #12]	; (8004a68 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	080270c8 	.word	0x080270c8

08004a6c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	2271      	movs	r2, #113	; 0x71
 8004a76:	4906      	ldr	r1, [pc, #24]	; (8004a90 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004a78:	2008      	movs	r0, #8
 8004a7a:	f005 f991 	bl	8009da0 <_ZnwjPKci>
 8004a7e:	4604      	mov	r4, r0
 8004a80:	4620      	mov	r0, r4
 8004a82:	f7ff ffdb 	bl	8004a3c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004a86:	4623      	mov	r3, r4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd90      	pop	{r4, r7, pc}
 8004a90:	08022ea4 	.word	0x08022ea4

08004a94 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f00d fd6c 	bl	801257c <_ZN10UtestShellC1Ev>
 8004aa4:	4a03      	ldr	r2, [pc, #12]	; (8004ab4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	0802701c 	.word	0x0802701c

08004ab8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af04      	add	r7, sp, #16
 8004abe:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	490e      	ldr	r1, [pc, #56]	; (8004b00 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff f9dc 	bl	8003e84 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004acc:	f00f f90e 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	3324      	adds	r3, #36	; 0x24
 8004ad6:	681d      	ldr	r5, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	68de      	ldr	r6, [r3, #12]
 8004ade:	f00f f915 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	9302      	str	r3, [sp, #8]
 8004ae6:	2375      	movs	r3, #117	; 0x75
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2300      	movs	r3, #0
 8004af0:	4632      	mov	r2, r6
 8004af2:	4903      	ldr	r1, [pc, #12]	; (8004b00 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004af4:	4620      	mov	r0, r4
 8004af6:	47a8      	blx	r5
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b00:	080230d0 	.word	0x080230d0
 8004b04:	08022ea4 	.word	0x08022ea4

08004b08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	605a      	str	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fbdc 	bl	80042dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004b24:	4a03      	ldr	r2, [pc, #12]	; (8004b34 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	08026ffc 	.word	0x08026ffc

08004b38 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	2278      	movs	r2, #120	; 0x78
 8004b42:	4906      	ldr	r1, [pc, #24]	; (8004b5c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004b44:	2008      	movs	r0, #8
 8004b46:	f005 f92b 	bl	8009da0 <_ZnwjPKci>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7ff ffdb 	bl	8004b08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004b52:	4623      	mov	r3, r4
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd90      	pop	{r4, r7, pc}
 8004b5c:	08022ea4 	.word	0x08022ea4

08004b60 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f00d fd06 	bl	801257c <_ZN10UtestShellC1Ev>
 8004b70:	4a03      	ldr	r2, [pc, #12]	; (8004b80 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	08026f50 	.word	0x08026f50

08004b84 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b88:	b08a      	sub	sp, #40	; 0x28
 8004b8a:	af04      	add	r7, sp, #16
 8004b8c:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	494e      	ldr	r1, [pc, #312]	; (8004ccc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff f975 	bl	8003e84 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004b9a:	f00f f8a7 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	3324      	adds	r3, #36	; 0x24
 8004ba4:	681d      	ldr	r5, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	68de      	ldr	r6, [r3, #12]
 8004bac:	f00f f8ae 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	9302      	str	r3, [sp, #8]
 8004bb4:	237c      	movs	r3, #124	; 0x7c
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	4b45      	ldr	r3, [pc, #276]	; (8004cd0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4632      	mov	r2, r6
 8004bc0:	4942      	ldr	r1, [pc, #264]	; (8004ccc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4942      	ldr	r1, [pc, #264]	; (8004cd4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff f978 	bl	8003ec2 <ringBuffer_lookFor>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d05c      	beq.n	8004c9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	493b      	ldr	r1, [pc, #236]	; (8004cd4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff f96a 	bl	8003ec2 <ringBuffer_lookFor>
 8004bee:	4604      	mov	r4, r0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4937      	ldr	r1, [pc, #220]	; (8004cd4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff f963 	bl	8003ec2 <ringBuffer_lookFor>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	429c      	cmp	r4, r3
 8004c00:	bf14      	ite	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	2300      	moveq	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004c0c:	f00f f86e 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004c10:	6803      	ldr	r3, [r0, #0]
 8004c12:	3370      	adds	r3, #112	; 0x70
 8004c14:	681c      	ldr	r4, [r3, #0]
 8004c16:	237d      	movs	r3, #125	; 0x7d
 8004c18:	4a2d      	ldr	r2, [pc, #180]	; (8004cd0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004c1a:	492f      	ldr	r1, [pc, #188]	; (8004cd8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004c1c:	47a0      	blx	r4
 8004c1e:	f00f f865 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004c22:	4604      	mov	r4, r0
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	3358      	adds	r3, #88	; 0x58
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	f107 0308 	add.w	r3, r7, #8
 8004c2e:	2101      	movs	r1, #1
 8004c30:	4618      	mov	r0, r3
 8004c32:	f008 faf7 	bl	800d224 <_Z10StringFromi>
 8004c36:	f107 0308 	add.w	r3, r7, #8
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f007 fffe 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8004c40:	4606      	mov	r6, r0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4923      	ldr	r1, [pc, #140]	; (8004cd4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff f93a 	bl	8003ec2 <ringBuffer_lookFor>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	f107 0310 	add.w	r3, r7, #16
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f008 fd5e 	bl	800d718 <_Z10StringFromm>
 8004c5c:	f107 0310 	add.w	r3, r7, #16
 8004c60:	4618      	mov	r0, r3
 8004c62:	f007 ffeb 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8004c66:	4680      	mov	r8, r0
 8004c68:	f00f f850 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	9303      	str	r3, [sp, #12]
 8004c70:	237d      	movs	r3, #125	; 0x7d
 8004c72:	9302      	str	r3, [sp, #8]
 8004c74:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	4643      	mov	r3, r8
 8004c7e:	4632      	mov	r2, r6
 8004c80:	2101      	movs	r1, #1
 8004c82:	4620      	mov	r0, r4
 8004c84:	47a8      	blx	r5
 8004c86:	f107 0310 	add.w	r3, r7, #16
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f008 f803 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8004c90:	f107 0308 	add.w	r3, r7, #8
 8004c94:	4618      	mov	r0, r3
 8004c96:	f007 fffe 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8004c9a:	e012      	b.n	8004cc2 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004c9c:	f00f f826 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	3338      	adds	r3, #56	; 0x38
 8004ca6:	681d      	ldr	r5, [r3, #0]
 8004ca8:	f00f f830 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004cac:	4603      	mov	r3, r0
 8004cae:	9302      	str	r3, [sp, #8]
 8004cb0:	237d      	movs	r3, #125	; 0x7d
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	47a8      	blx	r5
}
 8004cc2:	bf00      	nop
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ccc:	080230d8 	.word	0x080230d8
 8004cd0:	08022ea4 	.word	0x08022ea4
 8004cd4:	080230e4 	.word	0x080230e4
 8004cd8:	080230ec 	.word	0x080230ec

08004cdc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	605a      	str	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff faf2 	bl	80042dc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004cf8:	4a03      	ldr	r2, [pc, #12]	; (8004d08 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	08026f30 	.word	0x08026f30

08004d0c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	4906      	ldr	r1, [pc, #24]	; (8004d30 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004d18:	2008      	movs	r0, #8
 8004d1a:	f005 f841 	bl	8009da0 <_ZnwjPKci>
 8004d1e:	4604      	mov	r4, r0
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7ff ffdb 	bl	8004cdc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004d26:	4623      	mov	r3, r4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd90      	pop	{r4, r7, pc}
 8004d30:	08022ea4 	.word	0x08022ea4

08004d34 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f00d fc1c 	bl	801257c <_ZN10UtestShellC1Ev>
 8004d44:	4a03      	ldr	r2, [pc, #12]	; (8004d54 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	08026e84 	.word	0x08026e84

08004d58 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af04      	add	r7, sp, #16
 8004d5e:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004d60:	f00e ffc4 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8004d64:	4604      	mov	r4, r0
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	3338      	adds	r3, #56	; 0x38
 8004d6a:	681d      	ldr	r5, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff f8bc 	bl	8003eee <ringBuffer_capacity>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461e      	mov	r6, r3
 8004d7a:	f00e ffc7 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	9302      	str	r3, [sp, #8]
 8004d82:	2383      	movs	r3, #131	; 0x83
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	2132      	movs	r1, #50	; 0x32
 8004d90:	4620      	mov	r0, r4
 8004d92:	47a8      	blx	r5

}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d9c:	08022ea4 	.word	0x08022ea4
 8004da0:	08023190 	.word	0x08023190

08004da4 <_Z18UART_Transmit_FakePh>:


void UART_Transmit_Fake(uint8_t* data)
{
 8004da4:	b5b0      	push	{r4, r5, r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
//	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004dac:	f107 0308 	add.w	r3, r7, #8
 8004db0:	491d      	ldr	r1, [pc, #116]	; (8004e28 <_Z18UART_Transmit_FakePh+0x84>)
 8004db2:	4618      	mov	r0, r3
 8004db4:	f007 fbb7 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8004db8:	f107 0308 	add.w	r3, r7, #8
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f005 fc8a 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	3318      	adds	r3, #24
 8004dca:	681d      	ldr	r5, [r3, #0]
 8004dcc:	f107 0310 	add.w	r3, r7, #16
 8004dd0:	4916      	ldr	r1, [pc, #88]	; (8004e2c <_Z18UART_Transmit_FakePh+0x88>)
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f007 fba7 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8004dd8:	f107 0310 	add.w	r3, r7, #16
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4620      	mov	r0, r4
 8004de0:	47a8      	blx	r5
 8004de2:	4604      	mov	r4, r0
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	333c      	adds	r3, #60	; 0x3c
 8004de8:	681d      	ldr	r5, [r3, #0]
 8004dea:	f107 0318 	add.w	r3, r7, #24
 8004dee:	4910      	ldr	r1, [pc, #64]	; (8004e30 <_Z18UART_Transmit_FakePh+0x8c>)
 8004df0:	4618      	mov	r0, r3
 8004df2:	f007 fb98 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8004df6:	f107 0318 	add.w	r3, r7, #24
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4620      	mov	r0, r4
 8004e00:	47a8      	blx	r5
 8004e02:	f107 0318 	add.w	r3, r7, #24
 8004e06:	4618      	mov	r0, r3
 8004e08:	f007 ff45 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8004e0c:	f107 0310 	add.w	r3, r7, #16
 8004e10:	4618      	mov	r0, r3
 8004e12:	f007 ff40 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8004e16:	f107 0308 	add.w	r3, r7, #8
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f007 ff3b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8004e20:	bf00      	nop
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bdb0      	pop	{r4, r5, r7, pc}
 8004e28:	080231c8 	.word	0x080231c8
 8004e2c:	080231cc 	.word	0x080231cc
 8004e30:	080231e0 	.word	0x080231e0

08004e34 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004e34:	b5b0      	push	{r4, r5, r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004e3a:	463b      	mov	r3, r7
 8004e3c:	4916      	ldr	r1, [pc, #88]	; (8004e98 <_Z17UART_Receive_Fakev+0x64>)
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f007 fb71 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8004e44:	463b      	mov	r3, r7
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f005 fc45 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e4e:	4604      	mov	r4, r0
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	3318      	adds	r3, #24
 8004e54:	681d      	ldr	r5, [r3, #0]
 8004e56:	f107 0308 	add.w	r3, r7, #8
 8004e5a:	4910      	ldr	r1, [pc, #64]	; (8004e9c <_Z17UART_Receive_Fakev+0x68>)
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f007 fb62 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8004e62:	f107 0308 	add.w	r3, r7, #8
 8004e66:	4619      	mov	r1, r3
 8004e68:	4620      	mov	r0, r4
 8004e6a:	47a8      	blx	r5
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	3264      	adds	r2, #100	; 0x64
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	4790      	blx	r2
 8004e78:	4603      	mov	r3, r0
 8004e7a:	b2dc      	uxtb	r4, r3
 8004e7c:	f107 0308 	add.w	r3, r7, #8
 8004e80:	4618      	mov	r0, r3
 8004e82:	f007 ff08 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8004e86:	463b      	mov	r3, r7
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f007 ff04 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8004e8e:	4623      	mov	r3, r4
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bdb0      	pop	{r4, r5, r7, pc}
 8004e98:	080231c8 	.word	0x080231c8
 8004e9c:	080231e8 	.word	0x080231e8

08004ea0 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <_Z12getTick_Fakev+0x30>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d103      	bne.n	8004eb6 <_Z12getTick_Fakev+0x16>
		time = 0;
 8004eae:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <_Z12getTick_Fakev+0x30>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e004      	b.n	8004ec0 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <_Z12getTick_Fakev+0x30>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <_Z12getTick_Fakev+0x30>)
 8004ebe:	6013      	str	r3, [r2, #0]
	return time;
 8004ec0:	4b03      	ldr	r3, [pc, #12]	; (8004ed0 <_Z12getTick_Fakev+0x30>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	200005bc 	.word	0x200005bc

08004ed4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004edc:	2364      	movs	r3, #100	; 0x64
 8004ede:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004ee0:	4904      	ldr	r1, [pc, #16]	; (8004ef4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004ee2:	4805      	ldr	r0, [pc, #20]	; (8004ef8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004ee4:	f7fe fd10 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	08004ea1 	.word	0x08004ea1
 8004ef4:	08004e35 	.word	0x08004e35
 8004ef8:	08004da5 	.word	0x08004da5

08004efc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8004f04:	f107 0308 	add.w	r3, r7, #8
 8004f08:	4917      	ldr	r1, [pc, #92]	; (8004f68 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f007 fb0b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8004f10:	f107 0308 	add.w	r3, r7, #8
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f005 fbde 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	3294      	adds	r2, #148	; 0x94
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	4790      	blx	r2
 8004f28:	f107 0308 	add.w	r3, r7, #8
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f007 feb2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
		mock().clear();
 8004f32:	f107 0310 	add.w	r3, r7, #16
 8004f36:	490c      	ldr	r1, [pc, #48]	; (8004f68 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f007 faf4 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8004f3e:	f107 0310 	add.w	r3, r7, #16
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f005 fbc7 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	329c      	adds	r2, #156	; 0x9c
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	4790      	blx	r2
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f007 fe9b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	}
 8004f60:	bf00      	nop
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	080231c8 	.word	0x080231c8

08004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f00e fee2 	bl	8013d40 <_ZN5UtestC1Ev>
 8004f7c:	4a03      	ldr	r2, [pc, #12]	; (8004f8c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4618      	mov	r0, r3
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	08026e64 	.word	0x08026e64

08004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f00e fedd 	bl	8013d60 <_ZN5UtestD1Ev>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	08026e64 	.word	0x08026e64

08004fb4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ffe7 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004fc2:	2104      	movs	r1, #4
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f004 feff 	bl	8009dc8 <_ZdlPvj>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff ffc4 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004fe4:	4a03      	ldr	r2, [pc, #12]	; (8004ff4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	08026e44 	.word	0x08026e44

08004ff8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	22b8      	movs	r2, #184	; 0xb8
 8005002:	4906      	ldr	r1, [pc, #24]	; (800501c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8005004:	2004      	movs	r0, #4
 8005006:	f004 fecb 	bl	8009da0 <_ZnwjPKci>
 800500a:	4604      	mov	r4, r0
 800500c:	4620      	mov	r0, r4
 800500e:	f7ff ffe1 	bl	8004fd4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8005012:	4623      	mov	r3, r4
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bd90      	pop	{r4, r7, pc}
 800501c:	08022ea4 	.word	0x08022ea4

08005020 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4618      	mov	r0, r3
 800502c:	f00d faa6 	bl	801257c <_ZN10UtestShellC1Ev>
 8005030:	4a03      	ldr	r2, [pc, #12]	; (8005040 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	08026d98 	.word	0x08026d98

08005044 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8005044:	b5b0      	push	{r4, r5, r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af04      	add	r7, sp, #16
 800504a:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 800504c:	4b10      	ldr	r3, [pc, #64]	; (8005090 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 800504e:	4a11      	ldr	r2, [pc, #68]	; (8005094 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8005050:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 8005052:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	2364      	movs	r3, #100	; 0x64
 8005058:	4a0f      	ldr	r2, [pc, #60]	; (8005098 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 800505a:	4910      	ldr	r1, [pc, #64]	; (800509c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 800505c:	f7fe fc54 	bl	8003908 <ESP_Init>
 8005060:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8005062:	f00e fe43 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8005066:	4604      	mov	r4, r0
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	3338      	adds	r3, #56	; 0x38
 800506c:	681d      	ldr	r5, [r3, #0]
 800506e:	f00e fe4d 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005072:	4603      	mov	r3, r0
 8005074:	9302      	str	r3, [sp, #8]
 8005076:	23c6      	movs	r3, #198	; 0xc6
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	2101      	movs	r1, #1
 8005084:	4620      	mov	r0, r4
 8005086:	47a8      	blx	r5

}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bdb0      	pop	{r4, r5, r7, pc}
 8005090:	200005c0 	.word	0x200005c0
 8005094:	08004da5 	.word	0x08004da5
 8005098:	08004ea1 	.word	0x08004ea1
 800509c:	08004e35 	.word	0x08004e35
 80050a0:	08022ea4 	.word	0x08022ea4
 80050a4:	080231fc 	.word	0x080231fc

080050a8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff ff5a 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80050b8:	4a03      	ldr	r2, [pc, #12]	; (80050c8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	08026d78 	.word	0x08026d78

080050cc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 80050cc:	b590      	push	{r4, r7, lr}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	22ca      	movs	r2, #202	; 0xca
 80050d6:	4906      	ldr	r1, [pc, #24]	; (80050f0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 80050d8:	2004      	movs	r0, #4
 80050da:	f004 fe61 	bl	8009da0 <_ZnwjPKci>
 80050de:	4604      	mov	r4, r0
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7ff ffe1 	bl	80050a8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 80050e6:	4623      	mov	r3, r4
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd90      	pop	{r4, r7, pc}
 80050f0:	08022ea4 	.word	0x08022ea4

080050f4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4618      	mov	r0, r3
 8005100:	f00d fa3c 	bl	801257c <_ZN10UtestShellC1Ev>
 8005104:	4a03      	ldr	r2, [pc, #12]	; (8005114 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	08026ccc 	.word	0x08026ccc

08005118 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005118:	b5b0      	push	{r4, r5, r7, lr}
 800511a:	b08e      	sub	sp, #56	; 0x38
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");
 8005120:	f107 0308 	add.w	r3, r7, #8
 8005124:	493d      	ldr	r1, [pc, #244]	; (800521c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8005126:	4618      	mov	r0, r3
 8005128:	f007 f9fd 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800512c:	f107 0308 	add.w	r3, r7, #8
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f005 fad0 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005138:	4604      	mov	r4, r0
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	681d      	ldr	r5, [r3, #0]
 8005140:	f107 0310 	add.w	r3, r7, #16
 8005144:	4936      	ldr	r1, [pc, #216]	; (8005220 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8005146:	4618      	mov	r0, r3
 8005148:	f007 f9ed 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800514c:	f107 0310 	add.w	r3, r7, #16
 8005150:	4619      	mov	r1, r3
 8005152:	4620      	mov	r0, r4
 8005154:	47a8      	blx	r5
 8005156:	4604      	mov	r4, r0
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	334c      	adds	r3, #76	; 0x4c
 800515c:	681d      	ldr	r5, [r3, #0]
 800515e:	f107 0318 	add.w	r3, r7, #24
 8005162:	4930      	ldr	r1, [pc, #192]	; (8005224 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8005164:	4618      	mov	r0, r3
 8005166:	f007 f9de 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800516a:	f107 0318 	add.w	r3, r7, #24
 800516e:	4a2e      	ldr	r2, [pc, #184]	; (8005228 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8005170:	4619      	mov	r1, r3
 8005172:	4620      	mov	r0, r4
 8005174:	47a8      	blx	r5
 8005176:	f107 0318 	add.w	r3, r7, #24
 800517a:	4618      	mov	r0, r3
 800517c:	f007 fd8b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	4618      	mov	r0, r3
 8005186:	f007 fd86 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	4618      	mov	r0, r3
 8005190:	f007 fd81 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 8005194:	f107 0320 	add.w	r3, r7, #32
 8005198:	4920      	ldr	r1, [pc, #128]	; (800521c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 800519a:	4618      	mov	r0, r3
 800519c:	f007 f9c3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80051a0:	f107 0320 	add.w	r3, r7, #32
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f005 fa96 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051ac:	4604      	mov	r4, r0
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	681d      	ldr	r5, [r3, #0]
 80051b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051b8:	4919      	ldr	r1, [pc, #100]	; (8005220 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 80051ba:	4618      	mov	r0, r3
 80051bc:	f007 f9b3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80051c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051c4:	4619      	mov	r1, r3
 80051c6:	4620      	mov	r0, r4
 80051c8:	47a8      	blx	r5
 80051ca:	4604      	mov	r4, r0
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	334c      	adds	r3, #76	; 0x4c
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051d6:	4913      	ldr	r1, [pc, #76]	; (8005224 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80051d8:	4618      	mov	r0, r3
 80051da:	f007 f9a4 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80051de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051e2:	4a12      	ldr	r2, [pc, #72]	; (800522c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 80051e4:	4619      	mov	r1, r3
 80051e6:	4620      	mov	r0, r4
 80051e8:	47a8      	blx	r5
 80051ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051ee:	4618      	mov	r0, r3
 80051f0:	f007 fd51 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80051f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051f8:	4618      	mov	r0, r3
 80051fa:	f007 fd4c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80051fe:	f107 0320 	add.w	r3, r7, #32
 8005202:	4618      	mov	r0, r3
 8005204:	f007 fd47 	bl	800cc96 <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8005208:	4807      	ldr	r0, [pc, #28]	; (8005228 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 800520a:	f7fe fba9 	bl	8003960 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 800520e:	4807      	ldr	r0, [pc, #28]	; (800522c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005210:	f7fe fba6 	bl	8003960 <Send_AT_Command>



}
 8005214:	bf00      	nop
 8005216:	3738      	adds	r7, #56	; 0x38
 8005218:	46bd      	mov	sp, r7
 800521a:	bdb0      	pop	{r4, r5, r7, pc}
 800521c:	080231c8 	.word	0x080231c8
 8005220:	080231cc 	.word	0x080231cc
 8005224:	080231e0 	.word	0x080231e0
 8005228:	080230d0 	.word	0x080230d0
 800522c:	0802321c 	.word	0x0802321c

08005230 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fe96 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005240:	4a03      	ldr	r2, [pc, #12]	; (8005250 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	08026cac 	.word	0x08026cac

08005254 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 8005254:	b590      	push	{r4, r7, lr}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	22d6      	movs	r2, #214	; 0xd6
 800525e:	4906      	ldr	r1, [pc, #24]	; (8005278 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8005260:	2004      	movs	r0, #4
 8005262:	f004 fd9d 	bl	8009da0 <_ZnwjPKci>
 8005266:	4604      	mov	r4, r0
 8005268:	4620      	mov	r0, r4
 800526a:	f7ff ffe1 	bl	8005230 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 800526e:	4623      	mov	r3, r4
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bd90      	pop	{r4, r7, pc}
 8005278:	08022ea4 	.word	0x08022ea4

0800527c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4618      	mov	r0, r3
 8005288:	f00d f978 	bl	801257c <_ZN10UtestShellC1Ev>
 800528c:	4a03      	ldr	r2, [pc, #12]	; (800529c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	08026c00 	.word	0x08026c00

080052a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 80052a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a2:	b097      	sub	sp, #92	; 0x5c
 80052a4:	af04      	add	r7, sp, #16
 80052a6:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 80052a8:	f107 0308 	add.w	r3, r7, #8
 80052ac:	4967      	ldr	r1, [pc, #412]	; (800544c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80052ae:	4618      	mov	r0, r3
 80052b0:	f007 f939 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f005 fa0c 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052c0:	4604      	mov	r4, r0
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	681d      	ldr	r5, [r3, #0]
 80052c8:	f107 0310 	add.w	r3, r7, #16
 80052cc:	4960      	ldr	r1, [pc, #384]	; (8005450 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80052ce:	4618      	mov	r0, r3
 80052d0:	f007 f929 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80052d4:	f107 0310 	add.w	r3, r7, #16
 80052d8:	4619      	mov	r1, r3
 80052da:	4620      	mov	r0, r4
 80052dc:	47a8      	blx	r5
 80052de:	4603      	mov	r3, r0
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	3264      	adds	r2, #100	; 0x64
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	214f      	movs	r1, #79	; 0x4f
 80052e8:	4618      	mov	r0, r3
 80052ea:	4790      	blx	r2
 80052ec:	f107 0310 	add.w	r3, r7, #16
 80052f0:	4618      	mov	r0, r3
 80052f2:	f007 fcd0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4618      	mov	r0, r3
 80052fc:	f007 fccb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005300:	f7fe fb3c 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 8005304:	f107 0318 	add.w	r3, r7, #24
 8005308:	4950      	ldr	r1, [pc, #320]	; (800544c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800530a:	4618      	mov	r0, r3
 800530c:	f007 f90b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005310:	f107 0318 	add.w	r3, r7, #24
 8005314:	2100      	movs	r1, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f005 f9de 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800531c:	4604      	mov	r4, r0
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	681d      	ldr	r5, [r3, #0]
 8005324:	f107 0320 	add.w	r3, r7, #32
 8005328:	4949      	ldr	r1, [pc, #292]	; (8005450 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800532a:	4618      	mov	r0, r3
 800532c:	f007 f8fb 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005330:	f107 0320 	add.w	r3, r7, #32
 8005334:	4619      	mov	r1, r3
 8005336:	4620      	mov	r0, r4
 8005338:	47a8      	blx	r5
 800533a:	4603      	mov	r3, r0
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	3264      	adds	r2, #100	; 0x64
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	214b      	movs	r1, #75	; 0x4b
 8005344:	4618      	mov	r0, r3
 8005346:	4790      	blx	r2
 8005348:	f107 0320 	add.w	r3, r7, #32
 800534c:	4618      	mov	r0, r3
 800534e:	f007 fca2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005352:	f107 0318 	add.w	r3, r7, #24
 8005356:	4618      	mov	r0, r3
 8005358:	f007 fc9d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 800535c:	f7fe fb0e 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 8005360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005364:	4939      	ldr	r1, [pc, #228]	; (800544c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 8005366:	4618      	mov	r0, r3
 8005368:	f007 f8dd 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800536c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005370:	2100      	movs	r1, #0
 8005372:	4618      	mov	r0, r3
 8005374:	f005 f9b0 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005378:	4604      	mov	r4, r0
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	681d      	ldr	r5, [r3, #0]
 8005380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005384:	4932      	ldr	r1, [pc, #200]	; (8005450 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 8005386:	4618      	mov	r0, r3
 8005388:	f007 f8cd 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800538c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005390:	4619      	mov	r1, r3
 8005392:	4620      	mov	r0, r4
 8005394:	47a8      	blx	r5
 8005396:	4603      	mov	r3, r0
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	3264      	adds	r2, #100	; 0x64
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	210d      	movs	r1, #13
 80053a0:	4618      	mov	r0, r3
 80053a2:	4790      	blx	r2
 80053a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053a8:	4618      	mov	r0, r3
 80053aa:	f007 fc74 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80053ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b2:	4618      	mov	r0, r3
 80053b4:	f007 fc6f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80053b8:	f7fe fae0 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 80053bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80053c0:	4922      	ldr	r1, [pc, #136]	; (800544c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80053c2:	4618      	mov	r0, r3
 80053c4:	f007 f8af 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80053c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f005 f982 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80053d4:	4604      	mov	r4, r0
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	681d      	ldr	r5, [r3, #0]
 80053dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053e0:	491b      	ldr	r1, [pc, #108]	; (8005450 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80053e2:	4618      	mov	r0, r3
 80053e4:	f007 f89f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80053e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053ec:	4619      	mov	r1, r3
 80053ee:	4620      	mov	r0, r4
 80053f0:	47a8      	blx	r5
 80053f2:	4603      	mov	r3, r0
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	3264      	adds	r2, #100	; 0x64
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	210a      	movs	r1, #10
 80053fc:	4618      	mov	r0, r3
 80053fe:	4790      	blx	r2
 8005400:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005404:	4618      	mov	r0, r3
 8005406:	f007 fc46 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800540a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800540e:	4618      	mov	r0, r3
 8005410:	f007 fc41 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005414:	f7fe fab2 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 8005418:	f00e fc68 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800541c:	4604      	mov	r4, r0
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	3324      	adds	r3, #36	; 0x24
 8005422:	681d      	ldr	r5, [r3, #0]
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68de      	ldr	r6, [r3, #12]
 800542a:	f00e fc6f 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800542e:	4603      	mov	r3, r0
 8005430:	9302      	str	r3, [sp, #8]
 8005432:	23e2      	movs	r3, #226	; 0xe2
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	4b08      	ldr	r3, [pc, #32]	; (8005458 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b8>)
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	4632      	mov	r2, r6
 800543e:	4907      	ldr	r1, [pc, #28]	; (800545c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1bc>)
 8005440:	4620      	mov	r0, r4
 8005442:	47a8      	blx	r5

}
 8005444:	bf00      	nop
 8005446:	374c      	adds	r7, #76	; 0x4c
 8005448:	46bd      	mov	sp, r7
 800544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544c:	080231c8 	.word	0x080231c8
 8005450:	080231e8 	.word	0x080231e8
 8005454:	20000498 	.word	0x20000498
 8005458:	08022ea4 	.word	0x08022ea4
 800545c:	08022e1c 	.word	0x08022e1c

08005460 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fd7e 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005470:	4a03      	ldr	r2, [pc, #12]	; (8005480 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	08026be0 	.word	0x08026be0

08005484 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	22e6      	movs	r2, #230	; 0xe6
 800548e:	4906      	ldr	r1, [pc, #24]	; (80054a8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 8005490:	2004      	movs	r0, #4
 8005492:	f004 fc85 	bl	8009da0 <_ZnwjPKci>
 8005496:	4604      	mov	r4, r0
 8005498:	4620      	mov	r0, r4
 800549a:	f7ff ffe1 	bl	8005460 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 800549e:	4623      	mov	r3, r4
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd90      	pop	{r4, r7, pc}
 80054a8:	08022ea4 	.word	0x08022ea4

080054ac <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f00d f860 	bl	801257c <_ZN10UtestShellC1Ev>
 80054bc:	4a03      	ldr	r2, [pc, #12]	; (80054cc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	08026b34 	.word	0x08026b34

080054d0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 80054d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d2:	b091      	sub	sp, #68	; 0x44
 80054d4:	af04      	add	r7, sp, #16
 80054d6:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 80054d8:	4a35      	ldr	r2, [pc, #212]	; (80055b0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 80054da:	f107 030c 	add.w	r3, r7, #12
 80054de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054e2:	6018      	str	r0, [r3, #0]
 80054e4:	3304      	adds	r3, #4
 80054e6:	7019      	strb	r1, [r3, #0]
 80054e8:	f107 0311 	add.w	r3, r7, #17
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f6:	f107 030c 	add.w	r3, r7, #12
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fa fe9e 	bl	800023c <strlen>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	4293      	cmp	r3, r2
 8005508:	da35      	bge.n	8005576 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800550a:	f107 0318 	add.w	r3, r7, #24
 800550e:	4929      	ldr	r1, [pc, #164]	; (80055b4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8005510:	4618      	mov	r0, r3
 8005512:	f007 f808 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005516:	f107 0318 	add.w	r3, r7, #24
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f005 f8db 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005522:	4604      	mov	r4, r0
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	681d      	ldr	r5, [r3, #0]
 800552a:	f107 0320 	add.w	r3, r7, #32
 800552e:	4922      	ldr	r1, [pc, #136]	; (80055b8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8005530:	4618      	mov	r0, r3
 8005532:	f006 fff8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005536:	f107 0320 	add.w	r3, r7, #32
 800553a:	4619      	mov	r1, r3
 800553c:	4620      	mov	r0, r4
 800553e:	47a8      	blx	r5
 8005540:	4603      	mov	r3, r0
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	3264      	adds	r2, #100	; 0x64
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	f107 000c 	add.w	r0, r7, #12
 800554c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800554e:	4401      	add	r1, r0
 8005550:	7809      	ldrb	r1, [r1, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	4790      	blx	r2
 8005556:	f107 0320 	add.w	r3, r7, #32
 800555a:	4618      	mov	r0, r3
 800555c:	f007 fb9b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005560:	f107 0318 	add.w	r3, r7, #24
 8005564:	4618      	mov	r0, r3
 8005566:	f007 fb96 	bl	800cc96 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 800556a:	f7fe fa07 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	3301      	adds	r3, #1
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005574:	e7bf      	b.n	80054f6 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 8005576:	4811      	ldr	r0, [pc, #68]	; (80055bc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xec>)
 8005578:	f7fe fa1a 	bl	80039b0 <Read_Response>
 800557c:	62b8      	str	r0, [r7, #40]	; 0x28

	LONGS_EQUAL(1,result);
 800557e:	f00e fbb5 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8005582:	4604      	mov	r4, r0
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	3338      	adds	r3, #56	; 0x38
 8005588:	681d      	ldr	r5, [r3, #0]
 800558a:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800558c:	f00e fbbe 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005590:	4603      	mov	r3, r0
 8005592:	9302      	str	r3, [sp, #8]
 8005594:	23f2      	movs	r3, #242	; 0xf2
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf0>)
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf4>)
 800559e:	4632      	mov	r2, r6
 80055a0:	2101      	movs	r1, #1
 80055a2:	4620      	mov	r0, r4
 80055a4:	47a8      	blx	r5

}
 80055a6:	bf00      	nop
 80055a8:	3734      	adds	r7, #52	; 0x34
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ae:	bf00      	nop
 80055b0:	08023228 	.word	0x08023228
 80055b4:	080231c8 	.word	0x080231c8
 80055b8:	080231e8 	.word	0x080231e8
 80055bc:	08023224 	.word	0x08023224
 80055c0:	08022ea4 	.word	0x08022ea4
 80055c4:	080231fc 	.word	0x080231fc

080055c8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fcca 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80055d8:	4a03      	ldr	r2, [pc, #12]	; (80055e8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	08026b14 	.word	0x08026b14

080055ec <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	22f7      	movs	r2, #247	; 0xf7
 80055f6:	4906      	ldr	r1, [pc, #24]	; (8005610 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 80055f8:	2004      	movs	r0, #4
 80055fa:	f004 fbd1 	bl	8009da0 <_ZnwjPKci>
 80055fe:	4604      	mov	r4, r0
 8005600:	4620      	mov	r0, r4
 8005602:	f7ff ffe1 	bl	80055c8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005606:	4623      	mov	r3, r4
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	bd90      	pop	{r4, r7, pc}
 8005610:	08022ea4 	.word	0x08022ea4

08005614 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4618      	mov	r0, r3
 8005620:	f00c ffac 	bl	801257c <_ZN10UtestShellC1Ev>
 8005624:	4a03      	ldr	r2, [pc, #12]	; (8005634 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	08026a68 	.word	0x08026a68

08005638 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800563a:	b089      	sub	sp, #36	; 0x24
 800563c:	af04      	add	r7, sp, #16
 800563e:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005640:	2305      	movs	r3, #5
 8005642:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8005644:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005648:	4811      	ldr	r0, [pc, #68]	; (8005690 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 800564a:	f7fe f9c3 	bl	80039d4 <Wait_Response>
 800564e:	4603      	mov	r3, r0
 8005650:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	2b05      	cmp	r3, #5
 8005656:	d100      	bne.n	800565a <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8005658:	e7f4      	b.n	8005644 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 800565a:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 800565c:	f00e fb46 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8005660:	4604      	mov	r4, r0
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	3338      	adds	r3, #56	; 0x38
 8005666:	681d      	ldr	r5, [r3, #0]
 8005668:	7bfe      	ldrb	r6, [r7, #15]
 800566a:	f00e fb4f 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800566e:	4603      	mov	r3, r0
 8005670:	9302      	str	r3, [sp, #8]
 8005672:	f240 1303 	movw	r3, #259	; 0x103
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 800567e:	4632      	mov	r2, r6
 8005680:	2102      	movs	r1, #2
 8005682:	4620      	mov	r0, r4
 8005684:	47a8      	blx	r5

}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800568e:	bf00      	nop
 8005690:	08023224 	.word	0x08023224
 8005694:	08022ea4 	.word	0x08022ea4
 8005698:	08023234 	.word	0x08023234

0800569c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff fc60 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80056ac:	4a03      	ldr	r2, [pc, #12]	; (80056bc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	08026a48 	.word	0x08026a48

080056c0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	f240 1207 	movw	r2, #263	; 0x107
 80056cc:	4906      	ldr	r1, [pc, #24]	; (80056e8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 80056ce:	2004      	movs	r0, #4
 80056d0:	f004 fb66 	bl	8009da0 <_ZnwjPKci>
 80056d4:	4604      	mov	r4, r0
 80056d6:	4620      	mov	r0, r4
 80056d8:	f7ff ffe0 	bl	800569c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 80056dc:	4623      	mov	r3, r4
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd90      	pop	{r4, r7, pc}
 80056e6:	bf00      	nop
 80056e8:	08022ea4 	.word	0x08022ea4

080056ec <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f00c ff40 	bl	801257c <_ZN10UtestShellC1Ev>
 80056fc:	4a03      	ldr	r2, [pc, #12]	; (800570c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	0802699c 	.word	0x0802699c

08005710 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005712:	b091      	sub	sp, #68	; 0x44
 8005714:	af04      	add	r7, sp, #16
 8005716:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005718:	2305      	movs	r3, #5
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	char response[10] = "OK\r\n";
 800571e:	4a3b      	ldr	r2, [pc, #236]	; (800580c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005720:	f107 030c 	add.w	r3, r7, #12
 8005724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005728:	6018      	str	r0, [r3, #0]
 800572a:	3304      	adds	r3, #4
 800572c:	7019      	strb	r1, [r3, #0]
 800572e:	f107 0311 	add.w	r3, r7, #17
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005738:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800573c:	4834      	ldr	r0, [pc, #208]	; (8005810 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 800573e:	f7fe f949 	bl	80039d4 <Wait_Response>
 8005742:	4603      	mov	r3, r0
 8005744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(response_state != IDLE)
 8005748:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800574c:	2b05      	cmp	r3, #5
 800574e:	d141      	bne.n	80057d4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005750:	2300      	movs	r3, #0
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005754:	f107 030c 	add.w	r3, r7, #12
 8005758:	4618      	mov	r0, r3
 800575a:	f7fa fd6f 	bl	800023c <strlen>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	4293      	cmp	r3, r2
 8005766:	dae7      	bge.n	8005738 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005768:	f107 0318 	add.w	r3, r7, #24
 800576c:	4929      	ldr	r1, [pc, #164]	; (8005814 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 800576e:	4618      	mov	r0, r3
 8005770:	f006 fed9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005774:	f107 0318 	add.w	r3, r7, #24
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f004 ffac 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005780:	4604      	mov	r4, r0
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	681d      	ldr	r5, [r3, #0]
 8005788:	f107 0320 	add.w	r3, r7, #32
 800578c:	4922      	ldr	r1, [pc, #136]	; (8005818 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x108>)
 800578e:	4618      	mov	r0, r3
 8005790:	f006 fec9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005794:	f107 0320 	add.w	r3, r7, #32
 8005798:	4619      	mov	r1, r3
 800579a:	4620      	mov	r0, r4
 800579c:	47a8      	blx	r5
 800579e:	4603      	mov	r3, r0
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	3264      	adds	r2, #100	; 0x64
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	f107 000c 	add.w	r0, r7, #12
 80057aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ac:	4401      	add	r1, r0
 80057ae:	7809      	ldrb	r1, [r1, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	4790      	blx	r2
 80057b4:	f107 0320 	add.w	r3, r7, #32
 80057b8:	4618      	mov	r0, r3
 80057ba:	f007 fa6c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80057be:	f107 0318 	add.w	r3, r7, #24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f007 fa67 	bl	800cc96 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80057c8:	f7fe f8d8 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ce:	3301      	adds	r3, #1
 80057d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d2:	e7bf      	b.n	8005754 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 80057d4:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 80057d6:	f00e fa89 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80057da:	4604      	mov	r4, r0
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	3338      	adds	r3, #56	; 0x38
 80057e0:	681d      	ldr	r5, [r3, #0]
 80057e2:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 80057e6:	f00e fa91 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80057ea:	4603      	mov	r3, r0
 80057ec:	9302      	str	r3, [sp, #8]
 80057ee:	f44f 738d 	mov.w	r3, #282	; 0x11a
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x10c>)
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	4b09      	ldr	r3, [pc, #36]	; (8005820 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x110>)
 80057fa:	4632      	mov	r2, r6
 80057fc:	2100      	movs	r1, #0
 80057fe:	4620      	mov	r0, r4
 8005800:	47a8      	blx	r5
}
 8005802:	bf00      	nop
 8005804:	3734      	adds	r7, #52	; 0x34
 8005806:	46bd      	mov	sp, r7
 8005808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800580a:	bf00      	nop
 800580c:	08023228 	.word	0x08023228
 8005810:	08023224 	.word	0x08023224
 8005814:	080231c8 	.word	0x080231c8
 8005818:	080231e8 	.word	0x080231e8
 800581c:	08022ea4 	.word	0x08022ea4
 8005820:	08023268 	.word	0x08023268

08005824 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fb9c 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005834:	4a03      	ldr	r2, [pc, #12]	; (8005844 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	0802697c 	.word	0x0802697c

08005848 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	f240 121d 	movw	r2, #285	; 0x11d
 8005854:	4906      	ldr	r1, [pc, #24]	; (8005870 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005856:	2004      	movs	r0, #4
 8005858:	f004 faa2 	bl	8009da0 <_ZnwjPKci>
 800585c:	4604      	mov	r4, r0
 800585e:	4620      	mov	r0, r4
 8005860:	f7ff ffe0 	bl	8005824 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005864:	4623      	mov	r3, r4
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	bd90      	pop	{r4, r7, pc}
 800586e:	bf00      	nop
 8005870:	08022ea4 	.word	0x08022ea4

08005874 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4618      	mov	r0, r3
 8005880:	f00c fe7c 	bl	801257c <_ZN10UtestShellC1Ev>
 8005884:	4a03      	ldr	r2, [pc, #12]	; (8005894 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	080268d0 	.word	0x080268d0

08005898 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800589a:	b08f      	sub	sp, #60	; 0x3c
 800589c:	af04      	add	r7, sp, #16
 800589e:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 80058a0:	2302      	movs	r3, #2
 80058a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 80058a6:	f107 030c 	add.w	r3, r7, #12
 80058aa:	492f      	ldr	r1, [pc, #188]	; (8005968 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80058ac:	4618      	mov	r0, r3
 80058ae:	f006 fe3a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80058b2:	f107 030c 	add.w	r3, r7, #12
 80058b6:	2100      	movs	r1, #0
 80058b8:	4618      	mov	r0, r3
 80058ba:	f004 ff0d 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80058be:	4604      	mov	r4, r0
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	681d      	ldr	r5, [r3, #0]
 80058c6:	f107 0314 	add.w	r3, r7, #20
 80058ca:	4928      	ldr	r1, [pc, #160]	; (800596c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 80058cc:	4618      	mov	r0, r3
 80058ce:	f006 fe2a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80058d2:	f107 0314 	add.w	r3, r7, #20
 80058d6:	4619      	mov	r1, r3
 80058d8:	4620      	mov	r0, r4
 80058da:	47a8      	blx	r5
 80058dc:	4604      	mov	r4, r0
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	334c      	adds	r3, #76	; 0x4c
 80058e2:	681d      	ldr	r5, [r3, #0]
 80058e4:	f107 031c 	add.w	r3, r7, #28
 80058e8:	4921      	ldr	r1, [pc, #132]	; (8005970 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 80058ea:	4618      	mov	r0, r3
 80058ec:	f006 fe1b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80058f0:	f107 031c 	add.w	r3, r7, #28
 80058f4:	4a1f      	ldr	r2, [pc, #124]	; (8005974 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 80058f6:	4619      	mov	r1, r3
 80058f8:	4620      	mov	r0, r4
 80058fa:	47a8      	blx	r5
 80058fc:	f107 031c 	add.w	r3, r7, #28
 8005900:	4618      	mov	r0, r3
 8005902:	f007 f9c8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005906:	f107 0314 	add.w	r3, r7, #20
 800590a:	4618      	mov	r0, r3
 800590c:	f007 f9c3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005910:	f107 030c 	add.w	r3, r7, #12
 8005914:	4618      	mov	r0, r3
 8005916:	f007 f9be 	bl	800cc96 <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 800591a:	4917      	ldr	r1, [pc, #92]	; (8005978 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 800591c:	4817      	ldr	r0, [pc, #92]	; (800597c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 800591e:	f7fe f89b 	bl	8003a58 <Connect_Wifi>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592c:	2b05      	cmp	r3, #5
 800592e:	d100      	bne.n	8005932 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005930:	e7f3      	b.n	800591a <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005932:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005934:	f00e f9da 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8005938:	4604      	mov	r4, r0
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	3338      	adds	r3, #56	; 0x38
 800593e:	681d      	ldr	r5, [r3, #0]
 8005940:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005944:	f00e f9e2 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005948:	4603      	mov	r3, r0
 800594a:	9302      	str	r3, [sp, #8]
 800594c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005958:	4632      	mov	r2, r6
 800595a:	2102      	movs	r1, #2
 800595c:	4620      	mov	r0, r4
 800595e:	47a8      	blx	r5

}
 8005960:	bf00      	nop
 8005962:	372c      	adds	r7, #44	; 0x2c
 8005964:	46bd      	mov	sp, r7
 8005966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005968:	080231c8 	.word	0x080231c8
 800596c:	080231cc 	.word	0x080231cc
 8005970:	080231e0 	.word	0x080231e0
 8005974:	08022e24 	.word	0x08022e24
 8005978:	08023294 	.word	0x08023294
 800597c:	0802329c 	.word	0x0802329c
 8005980:	08022ea4 	.word	0x08022ea4
 8005984:	080232a4 	.word	0x080232a4

08005988 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff faea 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005998:	4a03      	ldr	r2, [pc, #12]	; (80059a8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	080268b0 	.word	0x080268b0

080059ac <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	f44f 729a 	mov.w	r2, #308	; 0x134
 80059b8:	4906      	ldr	r1, [pc, #24]	; (80059d4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 80059ba:	2004      	movs	r0, #4
 80059bc:	f004 f9f0 	bl	8009da0 <_ZnwjPKci>
 80059c0:	4604      	mov	r4, r0
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff ffe0 	bl	8005988 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 80059c8:	4623      	mov	r3, r4
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd90      	pop	{r4, r7, pc}
 80059d2:	bf00      	nop
 80059d4:	08022ea4 	.word	0x08022ea4

080059d8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f00c fdca 	bl	801257c <_ZN10UtestShellC1Ev>
 80059e8:	4a03      	ldr	r2, [pc, #12]	; (80059f8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	08026804 	.word	0x08026804

080059fc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 80059fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fe:	b0e1      	sub	sp, #388	; 0x184
 8005a00:	af04      	add	r7, sp, #16
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005a06:	4a78      	ldr	r2, [pc, #480]	; (8005be8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005a08:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	2296      	movs	r2, #150	; 0x96
 8005a10:	4618      	mov	r0, r3
 8005a12:	f01a fa5b 	bl	801fecc <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									// check disconnect response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	char fake_tx_buffer[3][50] =
 8005a16:	f107 0308 	add.w	r3, r7, #8
 8005a1a:	4a74      	ldr	r2, [pc, #464]	; (8005bec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	4611      	mov	r1, r2
 8005a20:	2396      	movs	r3, #150	; 0x96
 8005a22:	461a      	mov	r2, r3
 8005a24:	f01a fa52 	bl	801fecc <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005a2e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	dc46      	bgt.n	8005ac4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005a36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a3a:	496d      	ldr	r1, [pc, #436]	; (8005bf0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f006 fd72 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005a42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a46:	2100      	movs	r1, #0
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f004 fe45 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a4e:	4604      	mov	r4, r0
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	681d      	ldr	r5, [r3, #0]
 8005a56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a5a:	4966      	ldr	r1, [pc, #408]	; (8005bf4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f006 fd62 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005a62:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a66:	4619      	mov	r1, r3
 8005a68:	4620      	mov	r0, r4
 8005a6a:	47a8      	blx	r5
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	334c      	adds	r3, #76	; 0x4c
 8005a72:	681d      	ldr	r5, [r3, #0]
 8005a74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a78:	495f      	ldr	r1, [pc, #380]	; (8005bf8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f006 fd53 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005a80:	f107 0208 	add.w	r2, r7, #8
 8005a84:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a88:	2132      	movs	r1, #50	; 0x32
 8005a8a:	fb01 f303 	mul.w	r3, r1, r3
 8005a8e:	441a      	add	r2, r3
 8005a90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a94:	4619      	mov	r1, r3
 8005a96:	4620      	mov	r0, r4
 8005a98:	47a8      	blx	r5
 8005a9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f007 f8f9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005aa4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f007 f8f4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005aae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f007 f8ef 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005ab8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005abc:	3301      	adds	r3, #1
 8005abe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005ac2:	e7b4      	b.n	8005a2e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005ac4:	2305      	movs	r3, #5
 8005ac6:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005ad0:	494a      	ldr	r1, [pc, #296]	; (8005bfc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005ad2:	484b      	ldr	r0, [pc, #300]	; (8005c00 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005ad4:	f7fd ffc0 	bl	8003a58 <Connect_Wifi>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8005ade:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d065      	beq.n	8005bb2 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005ae6:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d061      	beq.n	8005bb2 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005aee:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d05d      	beq.n	8005bb2 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
		{
			break;
		}

		if(i<3)
 8005af6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	dce8      	bgt.n	8005ad0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005b04:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005b08:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b0c:	2132      	movs	r1, #50	; 0x32
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fa fb91 	bl	800023c <strlen>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b22:	4293      	cmp	r3, r2
 8005b24:	da3f      	bge.n	8005ba6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1aa>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005b26:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b2a:	4931      	ldr	r1, [pc, #196]	; (8005bf0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f006 fcfa 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005b32:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f004 fdcd 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b3e:	4604      	mov	r4, r0
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	681d      	ldr	r5, [r3, #0]
 8005b46:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b4a:	492e      	ldr	r1, [pc, #184]	; (8005c04 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x208>)
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f006 fcea 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005b52:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b56:	4619      	mov	r1, r3
 8005b58:	4620      	mov	r0, r4
 8005b5a:	47a8      	blx	r5
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	3264      	adds	r2, #100	; 0x64
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005b68:	2032      	movs	r0, #50	; 0x32
 8005b6a:	fb00 f101 	mul.w	r1, r0, r1
 8005b6e:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005b72:	4408      	add	r0, r1
 8005b74:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005b78:	4401      	add	r1, r0
 8005b7a:	39d0      	subs	r1, #208	; 0xd0
 8005b7c:	7809      	ldrb	r1, [r1, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	4790      	blx	r2
 8005b82:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b86:	4618      	mov	r0, r3
 8005b88:	f007 f885 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005b8c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b90:	4618      	mov	r0, r3
 8005b92:	f007 f880 	bl	800cc96 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005b96:	f7fd fef1 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005b9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005ba4:	e7ae      	b.n	8005b04 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x108>
			}
			i++;
 8005ba6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005baa:	3301      	adds	r3, #1
 8005bac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005bb0:	e78e      	b.n	8005ad0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
	LONGS_EQUAL(STATUS_ERROR,response);
 8005bb2:	f00e f89b 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	3338      	adds	r3, #56	; 0x38
 8005bbc:	681d      	ldr	r5, [r3, #0]
 8005bbe:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005bc2:	f00e f8a3 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	9302      	str	r3, [sp, #8]
 8005bca:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x20c>)
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	4b0d      	ldr	r3, [pc, #52]	; (8005c0c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x210>)
 8005bd6:	4632      	mov	r2, r6
 8005bd8:	2104      	movs	r1, #4
 8005bda:	4620      	mov	r0, r4
 8005bdc:	47a8      	blx	r5

}
 8005bde:	bf00      	nop
 8005be0:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be8:	080232fc 	.word	0x080232fc
 8005bec:	08023394 	.word	0x08023394
 8005bf0:	080231c8 	.word	0x080231c8
 8005bf4:	080231cc 	.word	0x080231cc
 8005bf8:	080231e0 	.word	0x080231e0
 8005bfc:	08023294 	.word	0x08023294
 8005c00:	0802329c 	.word	0x0802329c
 8005c04:	080231e8 	.word	0x080231e8
 8005c08:	08022ea4 	.word	0x08022ea4
 8005c0c:	080232d0 	.word	0x080232d0

08005c10 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff f9a6 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005c20:	4a03      	ldr	r2, [pc, #12]	; (8005c30 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	080267e4 	.word	0x080267e4

08005c34 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005c40:	4906      	ldr	r1, [pc, #24]	; (8005c5c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005c42:	2004      	movs	r0, #4
 8005c44:	f004 f8ac 	bl	8009da0 <_ZnwjPKci>
 8005c48:	4604      	mov	r4, r0
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f7ff ffe0 	bl	8005c10 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005c50:	4623      	mov	r3, r4
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd90      	pop	{r4, r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	08022ea4 	.word	0x08022ea4

08005c60 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f00c fc86 	bl	801257c <_ZN10UtestShellC1Ev>
 8005c70:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	08026738 	.word	0x08026738

08005c84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c86:	b0e1      	sub	sp, #388	; 0x184
 8005c88:	af04      	add	r7, sp, #16
 8005c8a:	1d3b      	adds	r3, r7, #4
 8005c8c:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005c8e:	4a77      	ldr	r2, [pc, #476]	; (8005e6c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005c90:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005c94:	4611      	mov	r1, r2
 8005c96:	2296      	movs	r2, #150	; 0x96
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f01a f917 	bl	801fecc <memcpy>
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char fake_tx_buffer[3][50] =
 8005c9e:	f107 0308 	add.w	r3, r7, #8
 8005ca2:	4a73      	ldr	r2, [pc, #460]	; (8005e70 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	2396      	movs	r3, #150	; 0x96
 8005caa:	461a      	mov	r2, r3
 8005cac:	f01a f90e 	bl	801fecc <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005cb6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	dc46      	bgt.n	8005d4c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005cbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005cc2:	496c      	ldr	r1, [pc, #432]	; (8005e74 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f006 fc2e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005cca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f004 fd01 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	330c      	adds	r3, #12
 8005cdc:	681d      	ldr	r5, [r3, #0]
 8005cde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ce2:	4965      	ldr	r1, [pc, #404]	; (8005e78 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f006 fc1e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005cea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	47a8      	blx	r5
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	334c      	adds	r3, #76	; 0x4c
 8005cfa:	681d      	ldr	r5, [r3, #0]
 8005cfc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d00:	495e      	ldr	r1, [pc, #376]	; (8005e7c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005d02:	4618      	mov	r0, r3
 8005d04:	f006 fc0f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005d08:	f107 0208 	add.w	r2, r7, #8
 8005d0c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d10:	2132      	movs	r1, #50	; 0x32
 8005d12:	fb01 f303 	mul.w	r3, r1, r3
 8005d16:	441a      	add	r2, r3
 8005d18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4620      	mov	r0, r4
 8005d20:	47a8      	blx	r5
 8005d22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d26:	4618      	mov	r0, r3
 8005d28:	f006 ffb5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005d2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d30:	4618      	mov	r0, r3
 8005d32:	f006 ffb0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005d36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f006 ffab 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005d40:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d44:	3301      	adds	r3, #1
 8005d46:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d4a:	e7b4      	b.n	8005cb6 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005d52:	494b      	ldr	r1, [pc, #300]	; (8005e80 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005d54:	484b      	ldr	r0, [pc, #300]	; (8005e84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x200>)
 8005d56:	f7fd fe7f 	bl	8003a58 <Connect_Wifi>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8005d60:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	d065      	beq.n	8005e34 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005d68:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d061      	beq.n	8005e34 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005d70:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d05d      	beq.n	8005e34 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
		{
			break;
		}

		if(i<3)
 8005d78:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	dce8      	bgt.n	8005d52 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005d86:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005d8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d8e:	2132      	movs	r1, #50	; 0x32
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	4413      	add	r3, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fa fa50 	bl	800023c <strlen>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005da4:	4293      	cmp	r3, r2
 8005da6:	da3f      	bge.n	8005e28 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005da8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005dac:	4931      	ldr	r1, [pc, #196]	; (8005e74 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005dae:	4618      	mov	r0, r3
 8005db0:	f006 fbb9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005db4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f004 fc8c 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	681d      	ldr	r5, [r3, #0]
 8005dc8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005dcc:	492e      	ldr	r1, [pc, #184]	; (8005e88 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x204>)
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f006 fba9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005dd4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4620      	mov	r0, r4
 8005ddc:	47a8      	blx	r5
 8005dde:	4603      	mov	r3, r0
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	3264      	adds	r2, #100	; 0x64
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005dea:	2032      	movs	r0, #50	; 0x32
 8005dec:	fb00 f101 	mul.w	r1, r0, r1
 8005df0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005df4:	4408      	add	r0, r1
 8005df6:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005dfa:	4401      	add	r1, r0
 8005dfc:	39d0      	subs	r1, #208	; 0xd0
 8005dfe:	7809      	ldrb	r1, [r1, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	4790      	blx	r2
 8005e04:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f006 ff44 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005e0e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e12:	4618      	mov	r0, r3
 8005e14:	f006 ff3f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005e18:	f7fd fdb0 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005e1c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005e20:	3301      	adds	r3, #1
 8005e22:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005e26:	e7ae      	b.n	8005d86 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x102>
			}
			i++;
 8005e28:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005e32:	e78e      	b.n	8005d52 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
	LONGS_EQUAL(STATUS_OK,response);
 8005e34:	f00d ff5a 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8005e38:	4604      	mov	r4, r0
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	3338      	adds	r3, #56	; 0x38
 8005e3e:	681d      	ldr	r5, [r3, #0]
 8005e40:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005e44:	f00d ff62 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	9302      	str	r3, [sp, #8]
 8005e4c:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x208>)
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x20c>)
 8005e58:	4632      	mov	r2, r6
 8005e5a:	2103      	movs	r1, #3
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	47a8      	blx	r5

}
 8005e60:	bf00      	nop
 8005e62:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	08023454 	.word	0x08023454
 8005e70:	08023394 	.word	0x08023394
 8005e74:	080231c8 	.word	0x080231c8
 8005e78:	080231cc 	.word	0x080231cc
 8005e7c:	080231e0 	.word	0x080231e0
 8005e80:	08023294 	.word	0x08023294
 8005e84:	0802329c 	.word	0x0802329c
 8005e88:	080231e8 	.word	0x080231e8
 8005e8c:	08022ea4 	.word	0x08022ea4
 8005e90:	0802342c 	.word	0x0802342c

08005e94 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff f864 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ea4:	4a03      	ldr	r2, [pc, #12]	; (8005eb4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	08026718 	.word	0x08026718

08005eb8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005eb8:	b590      	push	{r4, r7, lr}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005ec4:	4906      	ldr	r1, [pc, #24]	; (8005ee0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005ec6:	2004      	movs	r0, #4
 8005ec8:	f003 ff6a 	bl	8009da0 <_ZnwjPKci>
 8005ecc:	4604      	mov	r4, r0
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7ff ffe0 	bl	8005e94 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8005ed4:	4623      	mov	r3, r4
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd90      	pop	{r4, r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	08022ea4 	.word	0x08022ea4

08005ee4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f00c fb44 	bl	801257c <_ZN10UtestShellC1Ev>
 8005ef4:	4a03      	ldr	r2, [pc, #12]	; (8005f04 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	0802666c 	.word	0x0802666c

08005f08 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f0a:	b08f      	sub	sp, #60	; 0x3c
 8005f0c:	af04      	add	r7, sp, #16
 8005f0e:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	492e      	ldr	r1, [pc, #184]	; (8005fd0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 8005f16:	4618      	mov	r0, r3
 8005f18:	f006 fb05 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005f1c:	f107 030c 	add.w	r3, r7, #12
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f004 fbd8 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f28:	4604      	mov	r4, r0
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	330c      	adds	r3, #12
 8005f2e:	681d      	ldr	r5, [r3, #0]
 8005f30:	f107 0314 	add.w	r3, r7, #20
 8005f34:	4927      	ldr	r1, [pc, #156]	; (8005fd4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 8005f36:	4618      	mov	r0, r3
 8005f38:	f006 faf5 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005f3c:	f107 0314 	add.w	r3, r7, #20
 8005f40:	4619      	mov	r1, r3
 8005f42:	4620      	mov	r0, r4
 8005f44:	47a8      	blx	r5
 8005f46:	4604      	mov	r4, r0
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	334c      	adds	r3, #76	; 0x4c
 8005f4c:	681d      	ldr	r5, [r3, #0]
 8005f4e:	f107 031c 	add.w	r3, r7, #28
 8005f52:	4921      	ldr	r1, [pc, #132]	; (8005fd8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005f54:	4618      	mov	r0, r3
 8005f56:	f006 fae6 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8005f5a:	f107 031c 	add.w	r3, r7, #28
 8005f5e:	4a1f      	ldr	r2, [pc, #124]	; (8005fdc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005f60:	4619      	mov	r1, r3
 8005f62:	4620      	mov	r0, r4
 8005f64:	47a8      	blx	r5
 8005f66:	f107 031c 	add.w	r3, r7, #28
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f006 fe93 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005f70:	f107 0314 	add.w	r3, r7, #20
 8005f74:	4618      	mov	r0, r3
 8005f76:	f006 fe8e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8005f7a:	f107 030c 	add.w	r3, r7, #12
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f006 fe89 	bl	800cc96 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8005f84:	f7fd fda2 	bl	8003acc <Disconnect_Wifi>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f92:	2b05      	cmp	r3, #5
 8005f94:	d100      	bne.n	8005f98 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 8005f96:	e7f5      	b.n	8005f84 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 8005f98:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005f9a:	f00d fea7 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	3338      	adds	r3, #56	; 0x38
 8005fa4:	681d      	ldr	r5, [r3, #0]
 8005fa6:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005faa:	f00d feaf 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	9302      	str	r3, [sp, #8]
 8005fb2:	f240 139b 	movw	r3, #411	; 0x19b
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005fbe:	4632      	mov	r2, r6
 8005fc0:	2102      	movs	r1, #2
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	47a8      	blx	r5
}
 8005fc6:	bf00      	nop
 8005fc8:	372c      	adds	r7, #44	; 0x2c
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	080231c8 	.word	0x080231c8
 8005fd4:	080231cc 	.word	0x080231cc
 8005fd8:	080231e0 	.word	0x080231e0
 8005fdc:	08022e34 	.word	0x08022e34
 8005fe0:	08022ea4 	.word	0x08022ea4
 8005fe4:	080232a4 	.word	0x080232a4

08005fe8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe ffba 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ff8:	4a03      	ldr	r2, [pc, #12]	; (8006008 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	0802664c 	.word	0x0802664c

0800600c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 800600c:	b590      	push	{r4, r7, lr}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8006018:	4906      	ldr	r1, [pc, #24]	; (8006034 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 800601a:	2004      	movs	r0, #4
 800601c:	f003 fec0 	bl	8009da0 <_ZnwjPKci>
 8006020:	4604      	mov	r4, r0
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff ffe0 	bl	8005fe8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8006028:	4623      	mov	r3, r4
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	bd90      	pop	{r4, r7, pc}
 8006032:	bf00      	nop
 8006034:	08022ea4 	.word	0x08022ea4

08006038 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	f00c fa9a 	bl	801257c <_ZN10UtestShellC1Ev>
 8006048:	4a03      	ldr	r2, [pc, #12]	; (8006058 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	080265a0 	.word	0x080265a0

0800605c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 800605c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800605e:	b093      	sub	sp, #76	; 0x4c
 8006060:	af04      	add	r7, sp, #16
 8006062:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8006064:	f107 0308 	add.w	r3, r7, #8
 8006068:	494a      	ldr	r1, [pc, #296]	; (8006194 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 800606a:	4618      	mov	r0, r3
 800606c:	f006 fa5b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006070:	f107 0308 	add.w	r3, r7, #8
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f004 fb2e 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800607c:	4604      	mov	r4, r0
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	681d      	ldr	r5, [r3, #0]
 8006084:	f107 0310 	add.w	r3, r7, #16
 8006088:	4943      	ldr	r1, [pc, #268]	; (8006198 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 800608a:	4618      	mov	r0, r3
 800608c:	f006 fa4b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006090:	f107 0310 	add.w	r3, r7, #16
 8006094:	4619      	mov	r1, r3
 8006096:	4620      	mov	r0, r4
 8006098:	47a8      	blx	r5
 800609a:	4604      	mov	r4, r0
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	334c      	adds	r3, #76	; 0x4c
 80060a0:	681d      	ldr	r5, [r3, #0]
 80060a2:	f107 0318 	add.w	r3, r7, #24
 80060a6:	493d      	ldr	r1, [pc, #244]	; (800619c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 80060a8:	4618      	mov	r0, r3
 80060aa:	f006 fa3c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80060ae:	f107 0318 	add.w	r3, r7, #24
 80060b2:	4a3b      	ldr	r2, [pc, #236]	; (80061a0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 80060b4:	4619      	mov	r1, r3
 80060b6:	4620      	mov	r0, r4
 80060b8:	47a8      	blx	r5
 80060ba:	f107 0318 	add.w	r3, r7, #24
 80060be:	4618      	mov	r0, r3
 80060c0:	f006 fde9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80060c4:	f107 0310 	add.w	r3, r7, #16
 80060c8:	4618      	mov	r0, r3
 80060ca:	f006 fde4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80060ce:	f107 0308 	add.w	r3, r7, #8
 80060d2:	4618      	mov	r0, r3
 80060d4:	f006 fddf 	bl	800cc96 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80060d8:	f7fd fcf8 	bl	8003acc <Disconnect_Wifi>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 80060e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d139      	bne.n	800615e <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80060ea:	2300      	movs	r3, #0
 80060ec:	637b      	str	r3, [r7, #52]	; 0x34
 80060ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	dcf1      	bgt.n	80060d8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 80060f4:	f107 0320 	add.w	r3, r7, #32
 80060f8:	4926      	ldr	r1, [pc, #152]	; (8006194 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80060fa:	4618      	mov	r0, r3
 80060fc:	f006 fa13 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006100:	f107 0320 	add.w	r3, r7, #32
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f004 fae6 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800610c:	4604      	mov	r4, r0
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	681d      	ldr	r5, [r3, #0]
 8006114:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006118:	4922      	ldr	r1, [pc, #136]	; (80061a4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 800611a:	4618      	mov	r0, r3
 800611c:	f006 fa03 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006124:	4619      	mov	r1, r3
 8006126:	4620      	mov	r0, r4
 8006128:	47a8      	blx	r5
 800612a:	4603      	mov	r3, r0
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	3264      	adds	r2, #100	; 0x64
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	481d      	ldr	r0, [pc, #116]	; (80061a8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 8006134:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006136:	4401      	add	r1, r0
 8006138:	7809      	ldrb	r1, [r1, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	4790      	blx	r2
 800613e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006142:	4618      	mov	r0, r3
 8006144:	f006 fda7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006148:	f107 0320 	add.w	r3, r7, #32
 800614c:	4618      	mov	r0, r3
 800614e:	f006 fda2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006152:	f7fd fc13 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006158:	3301      	adds	r3, #1
 800615a:	637b      	str	r3, [r7, #52]	; 0x34
 800615c:	e7c7      	b.n	80060ee <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 800615e:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006160:	f00d fdc4 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8006164:	4604      	mov	r4, r0
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	3338      	adds	r3, #56	; 0x38
 800616a:	681d      	ldr	r5, [r3, #0]
 800616c:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006170:	f00d fdcc 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006174:	4603      	mov	r3, r0
 8006176:	9302      	str	r3, [sp, #8]
 8006178:	f240 13b3 	movw	r3, #435	; 0x1b3
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 8006184:	4632      	mov	r2, r6
 8006186:	2103      	movs	r1, #3
 8006188:	4620      	mov	r0, r4
 800618a:	47a8      	blx	r5
}
 800618c:	bf00      	nop
 800618e:	373c      	adds	r7, #60	; 0x3c
 8006190:	46bd      	mov	sp, r7
 8006192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006194:	080231c8 	.word	0x080231c8
 8006198:	080231cc 	.word	0x080231cc
 800619c:	080231e0 	.word	0x080231e0
 80061a0:	08022e34 	.word	0x08022e34
 80061a4:	080231e8 	.word	0x080231e8
 80061a8:	08023224 	.word	0x08023224
 80061ac:	08022ea4 	.word	0x08022ea4
 80061b0:	0802342c 	.word	0x0802342c

080061b4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fed4 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80061c4:	4a03      	ldr	r2, [pc, #12]	; (80061d4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4618      	mov	r0, r3
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	08026580 	.word	0x08026580

080061d8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 80061d8:	b590      	push	{r4, r7, lr}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80061e4:	4906      	ldr	r1, [pc, #24]	; (8006200 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 80061e6:	2004      	movs	r0, #4
 80061e8:	f003 fdda 	bl	8009da0 <_ZnwjPKci>
 80061ec:	4604      	mov	r4, r0
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff ffe0 	bl	80061b4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 80061f4:	4623      	mov	r3, r4
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd90      	pop	{r4, r7, pc}
 80061fe:	bf00      	nop
 8006200:	08022ea4 	.word	0x08022ea4

08006204 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4618      	mov	r0, r3
 8006210:	f00c f9b4 	bl	801257c <_ZN10UtestShellC1Ev>
 8006214:	4a03      	ldr	r2, [pc, #12]	; (8006224 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	080264d4 	.word	0x080264d4

08006228 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8006228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622a:	b09b      	sub	sp, #108	; 0x6c
 800622c:	af04      	add	r7, sp, #16
 800622e:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8006230:	4a6d      	ldr	r2, [pc, #436]	; (80063e8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	ca07      	ldmia	r2, {r0, r1, r2}
 8006238:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char *fake_command_buffer[3] =
 800623c:	4a6b      	ldr	r2, [pc, #428]	; (80063ec <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 800623e:	f107 0308 	add.w	r3, r7, #8
 8006242:	ca07      	ldmia	r2, {r0, r1, r2}
 8006244:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CWMODE=1\r\n",
		(char*)"AT+CWQAP\r\n",
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006248:	2300      	movs	r3, #0
 800624a:	657b      	str	r3, [r7, #84]	; 0x54
 800624c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800624e:	2b02      	cmp	r3, #2
 8006250:	dc43      	bgt.n	80062da <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006252:	f107 0320 	add.w	r3, r7, #32
 8006256:	4966      	ldr	r1, [pc, #408]	; (80063f0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 8006258:	4618      	mov	r0, r3
 800625a:	f006 f964 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800625e:	f107 0320 	add.w	r3, r7, #32
 8006262:	2100      	movs	r1, #0
 8006264:	4618      	mov	r0, r3
 8006266:	f004 fa37 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800626a:	4604      	mov	r4, r0
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	681d      	ldr	r5, [r3, #0]
 8006272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006276:	495f      	ldr	r1, [pc, #380]	; (80063f4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 8006278:	4618      	mov	r0, r3
 800627a:	f006 f954 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800627e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006282:	4619      	mov	r1, r3
 8006284:	4620      	mov	r0, r4
 8006286:	47a8      	blx	r5
 8006288:	4604      	mov	r4, r0
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	334c      	adds	r3, #76	; 0x4c
 800628e:	681d      	ldr	r5, [r3, #0]
 8006290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006294:	4958      	ldr	r1, [pc, #352]	; (80063f8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 8006296:	4618      	mov	r0, r3
 8006298:	f006 f945 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800629c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80062a4:	4413      	add	r3, r2
 80062a6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80062aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062ae:	4619      	mov	r1, r3
 80062b0:	4620      	mov	r0, r4
 80062b2:	47a8      	blx	r5
 80062b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062b8:	4618      	mov	r0, r3
 80062ba:	f006 fcec 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80062be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062c2:	4618      	mov	r0, r3
 80062c4:	f006 fce7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80062c8:	f107 0320 	add.w	r3, r7, #32
 80062cc:	4618      	mov	r0, r3
 80062ce:	f006 fce2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80062d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d4:	3301      	adds	r3, #1
 80062d6:	657b      	str	r3, [r7, #84]	; 0x54
 80062d8:	e7b8      	b.n	800624c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 80062de:	f107 0114 	add.w	r1, r7, #20
 80062e2:	f107 0308 	add.w	r3, r7, #8
 80062e6:	2203      	movs	r2, #3
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fd fc0b 	bl	8003b04 <Command_Process>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 80062f4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d05b      	beq.n	80063b4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
 80062fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006300:	2b03      	cmp	r3, #3
 8006302:	d057      	beq.n	80063b4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
 8006304:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006308:	2b02      	cmp	r3, #2
 800630a:	d053      	beq.n	80063b4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x18c>
		{
			break;
		}

		if(i<3)
 800630c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800630e:	2b02      	cmp	r3, #2
 8006310:	dce5      	bgt.n	80062de <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006312:	2300      	movs	r3, #0
 8006314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800631e:	4413      	add	r3, r2
 8006320:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006324:	4618      	mov	r0, r3
 8006326:	f7f9 ff89 	bl	800023c <strlen>
 800632a:	4603      	mov	r3, r0
 800632c:	461a      	mov	r2, r3
 800632e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006330:	4293      	cmp	r3, r2
 8006332:	da3b      	bge.n	80063ac <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x184>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006334:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006338:	492d      	ldr	r1, [pc, #180]	; (80063f0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 800633a:	4618      	mov	r0, r3
 800633c:	f006 f8f3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006340:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006344:	2100      	movs	r1, #0
 8006346:	4618      	mov	r0, r3
 8006348:	f004 f9c6 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800634c:	4604      	mov	r4, r0
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	330c      	adds	r3, #12
 8006352:	681d      	ldr	r5, [r3, #0]
 8006354:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006358:	4928      	ldr	r1, [pc, #160]	; (80063fc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d4>)
 800635a:	4618      	mov	r0, r3
 800635c:	f006 f8e3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006364:	4619      	mov	r1, r3
 8006366:	4620      	mov	r0, r4
 8006368:	47a8      	blx	r5
 800636a:	4602      	mov	r2, r0
 800636c:	6813      	ldr	r3, [r2, #0]
 800636e:	3364      	adds	r3, #100	; 0x64
 8006370:	681c      	ldr	r4, [r3, #0]
 8006372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800637a:	440b      	add	r3, r1
 800637c:	f853 1c44 	ldr.w	r1, [r3, #-68]
 8006380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006382:	440b      	add	r3, r1
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	47a0      	blx	r4
 800638c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006390:	4618      	mov	r0, r3
 8006392:	f006 fc80 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006396:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800639a:	4618      	mov	r0, r3
 800639c:	f006 fc7b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80063a0:	f7fd faec 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80063a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a6:	3301      	adds	r3, #1
 80063a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063aa:	e7b4      	b.n	8006316 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xee>
			}
			i++;
 80063ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ae:	3301      	adds	r3, #1
 80063b0:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 80063b2:	e794      	b.n	80062de <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
	LONGS_EQUAL(STATUS_OK,response);
 80063b4:	f00d fc9a 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80063b8:	4604      	mov	r4, r0
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	3338      	adds	r3, #56	; 0x38
 80063be:	681d      	ldr	r5, [r3, #0]
 80063c0:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 80063c4:	f00d fca2 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80063c8:	4603      	mov	r3, r0
 80063ca:	9302      	str	r3, [sp, #8]
 80063cc:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d8>)
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1dc>)
 80063d8:	4632      	mov	r2, r6
 80063da:	2103      	movs	r1, #3
 80063dc:	4620      	mov	r0, r4
 80063de:	47a8      	blx	r5

}
 80063e0:	bf00      	nop
 80063e2:	375c      	adds	r7, #92	; 0x5c
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e8:	080234ec 	.word	0x080234ec
 80063ec:	080234f8 	.word	0x080234f8
 80063f0:	080231c8 	.word	0x080231c8
 80063f4:	080231cc 	.word	0x080231cc
 80063f8:	080231e0 	.word	0x080231e0
 80063fc:	080231e8 	.word	0x080231e8
 8006400:	08022ea4 	.word	0x08022ea4
 8006404:	0802342c 	.word	0x0802342c

08006408 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fdaa 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006418:	4a03      	ldr	r2, [pc, #12]	; (8006428 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	080264b4 	.word	0x080264b4

0800642c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 800642c:	b590      	push	{r4, r7, lr}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8006438:	4906      	ldr	r1, [pc, #24]	; (8006454 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 800643a:	2004      	movs	r0, #4
 800643c:	f003 fcb0 	bl	8009da0 <_ZnwjPKci>
 8006440:	4604      	mov	r4, r0
 8006442:	4620      	mov	r0, r4
 8006444:	f7ff ffe0 	bl	8006408 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8006448:	4623      	mov	r3, r4
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	bd90      	pop	{r4, r7, pc}
 8006452:	bf00      	nop
 8006454:	08022ea4 	.word	0x08022ea4

08006458 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	f00c f88a 	bl	801257c <_ZN10UtestShellC1Ev>
 8006468:	4a03      	ldr	r2, [pc, #12]	; (8006478 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	08026408 	.word	0x08026408

0800647c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 800647c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647e:	b0bf      	sub	sp, #252	; 0xfc
 8006480:	af04      	add	r7, sp, #16
 8006482:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 8006484:	4a74      	ldr	r2, [pc, #464]	; (8006658 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 8006486:	f107 0318 	add.w	r3, r7, #24
 800648a:	4611      	mov	r1, r2
 800648c:	2296      	movs	r2, #150	; 0x96
 800648e:	4618      	mov	r0, r3
 8006490:	f019 fd1c 	bl	801fecc <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	char *fake_command_buffer[3] =
 8006494:	4a71      	ldr	r2, [pc, #452]	; (800665c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 8006496:	f107 030c 	add.w	r3, r7, #12
 800649a:	ca07      	ldmia	r2, {r0, r1, r2}
 800649c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<3;i++)
 80064a0:	2300      	movs	r3, #0
 80064a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	dc46      	bgt.n	800653c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80064ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80064b2:	496b      	ldr	r1, [pc, #428]	; (8006660 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 80064b4:	4618      	mov	r0, r3
 80064b6:	f006 f836 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80064ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80064be:	2100      	movs	r1, #0
 80064c0:	4618      	mov	r0, r3
 80064c2:	f004 f909 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80064c6:	4604      	mov	r4, r0
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	681d      	ldr	r5, [r3, #0]
 80064ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80064d2:	4964      	ldr	r1, [pc, #400]	; (8006664 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 80064d4:	4618      	mov	r0, r3
 80064d6:	f006 f826 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80064da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80064de:	4619      	mov	r1, r3
 80064e0:	4620      	mov	r0, r4
 80064e2:	47a8      	blx	r5
 80064e4:	4604      	mov	r4, r0
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	334c      	adds	r3, #76	; 0x4c
 80064ea:	681d      	ldr	r5, [r3, #0]
 80064ec:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80064f0:	495d      	ldr	r1, [pc, #372]	; (8006668 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 80064f2:	4618      	mov	r0, r3
 80064f4:	f006 f817 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80064f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006502:	4413      	add	r3, r2
 8006504:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8006508:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800650c:	4619      	mov	r1, r3
 800650e:	4620      	mov	r0, r4
 8006510:	47a8      	blx	r5
 8006512:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006516:	4618      	mov	r0, r3
 8006518:	f006 fbbd 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800651c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006520:	4618      	mov	r0, r3
 8006522:	f006 fbb8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006526:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800652a:	4618      	mov	r0, r3
 800652c:	f006 fbb3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006534:	3301      	adds	r3, #1
 8006536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800653a:	e7b4      	b.n	80064a6 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2a>
	}

	Status response;
	int i = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006542:	494a      	ldr	r1, [pc, #296]	; (800666c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 8006544:	484a      	ldr	r0, [pc, #296]	; (8006670 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 8006546:	f7fd fb63 	bl	8003c10 <Connect_TCP_Server>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006550:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006554:	2b04      	cmp	r3, #4
 8006556:	d065      	beq.n	8006624 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
 8006558:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800655c:	2b03      	cmp	r3, #3
 800655e:	d061      	beq.n	8006624 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
 8006560:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006564:	2b02      	cmp	r3, #2
 8006566:	d05d      	beq.n	8006624 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1a8>
		{
			break;
		}

		if(i<3)
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656c:	2b02      	cmp	r3, #2
 800656e:	dce8      	bgt.n	8006542 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006570:	2300      	movs	r3, #0
 8006572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006576:	f107 0218 	add.w	r2, r7, #24
 800657a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657e:	2132      	movs	r1, #50	; 0x32
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	4413      	add	r3, r2
 8006586:	4618      	mov	r0, r3
 8006588:	f7f9 fe58 	bl	800023c <strlen>
 800658c:	4603      	mov	r3, r0
 800658e:	461a      	mov	r2, r3
 8006590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006594:	4293      	cmp	r3, r2
 8006596:	da3f      	bge.n	8006618 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19c>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006598:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800659c:	4930      	ldr	r1, [pc, #192]	; (8006660 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 800659e:	4618      	mov	r0, r3
 80065a0:	f005 ffc1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80065a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f004 f894 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80065b0:	4604      	mov	r4, r0
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	681d      	ldr	r5, [r3, #0]
 80065b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80065bc:	492d      	ldr	r1, [pc, #180]	; (8006674 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f8>)
 80065be:	4618      	mov	r0, r3
 80065c0:	f005 ffb1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80065c4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80065c8:	4619      	mov	r1, r3
 80065ca:	4620      	mov	r0, r4
 80065cc:	47a8      	blx	r5
 80065ce:	4603      	mov	r3, r0
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	3264      	adds	r2, #100	; 0x64
 80065d4:	6812      	ldr	r2, [r2, #0]
 80065d6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80065da:	2032      	movs	r0, #50	; 0x32
 80065dc:	fb00 f101 	mul.w	r1, r0, r1
 80065e0:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 80065e4:	4408      	add	r0, r1
 80065e6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80065ea:	4401      	add	r1, r0
 80065ec:	39d0      	subs	r1, #208	; 0xd0
 80065ee:	7809      	ldrb	r1, [r1, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	4790      	blx	r2
 80065f4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80065f8:	4618      	mov	r0, r3
 80065fa:	f006 fb4c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80065fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006602:	4618      	mov	r0, r3
 8006604:	f006 fb47 	bl	800cc96 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006608:	f7fd f9b8 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800660c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006610:	3301      	adds	r3, #1
 8006612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006616:	e7ae      	b.n	8006576 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xfa>
			}
			i++;
 8006618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661c:	3301      	adds	r3, #1
 800661e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 8006622:	e78e      	b.n	8006542 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(STATUS_OK,response);
 8006624:	f00d fb62 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8006628:	4604      	mov	r4, r0
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	3338      	adds	r3, #56	; 0x38
 800662e:	681d      	ldr	r5, [r3, #0]
 8006630:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 8006634:	f00d fb6a 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006638:	4603      	mov	r3, r0
 800663a:	9302      	str	r3, [sp, #8]
 800663c:	f240 230b 	movw	r3, #523	; 0x20b
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	4b0d      	ldr	r3, [pc, #52]	; (8006678 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1fc>)
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	4b0d      	ldr	r3, [pc, #52]	; (800667c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x200>)
 8006648:	4632      	mov	r2, r6
 800664a:	2103      	movs	r1, #3
 800664c:	4620      	mov	r0, r4
 800664e:	47a8      	blx	r5

}
 8006650:	bf00      	nop
 8006652:	37ec      	adds	r7, #236	; 0xec
 8006654:	46bd      	mov	sp, r7
 8006656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006658:	08023454 	.word	0x08023454
 800665c:	08023514 	.word	0x08023514
 8006660:	080231c8 	.word	0x080231c8
 8006664:	080231cc 	.word	0x080231cc
 8006668:	080231e0 	.word	0x080231e0
 800666c:	08023504 	.word	0x08023504
 8006670:	08023508 	.word	0x08023508
 8006674:	080231e8 	.word	0x080231e8
 8006678:	08022ea4 	.word	0x08022ea4
 800667c:	0802342c 	.word	0x0802342c

08006680 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe fc6e 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006690:	4a03      	ldr	r2, [pc, #12]	; (80066a0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	080263e8 	.word	0x080263e8

080066a4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 80066a4:	b590      	push	{r4, r7, lr}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	f240 220f 	movw	r2, #527	; 0x20f
 80066b0:	4906      	ldr	r1, [pc, #24]	; (80066cc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 80066b2:	2004      	movs	r0, #4
 80066b4:	f003 fb74 	bl	8009da0 <_ZnwjPKci>
 80066b8:	4604      	mov	r4, r0
 80066ba:	4620      	mov	r0, r4
 80066bc:	f7ff ffe0 	bl	8006680 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 80066c0:	4623      	mov	r3, r4
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd90      	pop	{r4, r7, pc}
 80066ca:	bf00      	nop
 80066cc:	08022ea4 	.word	0x08022ea4

080066d0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4618      	mov	r0, r3
 80066dc:	f00b ff4e 	bl	801257c <_ZN10UtestShellC1Ev>
 80066e0:	4a03      	ldr	r2, [pc, #12]	; (80066f0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	0802633c 	.word	0x0802633c

080066f4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 80066f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066f6:	b091      	sub	sp, #68	; 0x44
 80066f8:	af04      	add	r7, sp, #16
 80066fa:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[3] =
 80066fc:	4a36      	ldr	r2, [pc, #216]	; (80067d8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 80066fe:	f107 0308 	add.w	r3, r7, #8
 8006702:	ca07      	ldmia	r2, {r0, r1, r2}
 8006704:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	4933      	ldr	r1, [pc, #204]	; (80067dc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 800670e:	4618      	mov	r0, r3
 8006710:	f005 ff09 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006714:	f107 0314 	add.w	r3, r7, #20
 8006718:	2100      	movs	r1, #0
 800671a:	4618      	mov	r0, r3
 800671c:	f003 ffdc 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006720:	4604      	mov	r4, r0
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	681d      	ldr	r5, [r3, #0]
 8006728:	f107 031c 	add.w	r3, r7, #28
 800672c:	492c      	ldr	r1, [pc, #176]	; (80067e0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 800672e:	4618      	mov	r0, r3
 8006730:	f005 fef9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006734:	f107 031c 	add.w	r3, r7, #28
 8006738:	4619      	mov	r1, r3
 800673a:	4620      	mov	r0, r4
 800673c:	47a8      	blx	r5
 800673e:	4604      	mov	r4, r0
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	334c      	adds	r3, #76	; 0x4c
 8006744:	681d      	ldr	r5, [r3, #0]
 8006746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800674a:	4926      	ldr	r1, [pc, #152]	; (80067e4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 800674c:	4618      	mov	r0, r3
 800674e:	f005 feea 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006758:	4619      	mov	r1, r3
 800675a:	4620      	mov	r0, r4
 800675c:	47a8      	blx	r5
 800675e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006762:	4618      	mov	r0, r3
 8006764:	f006 fa97 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	4618      	mov	r0, r3
 800676e:	f006 fa92 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006772:	f107 0314 	add.w	r3, r7, #20
 8006776:	4618      	mov	r0, r3
 8006778:	f006 fa8d 	bl	800cc96 <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 800677c:	491a      	ldr	r1, [pc, #104]	; (80067e8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 800677e:	481b      	ldr	r0, [pc, #108]	; (80067ec <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf8>)
 8006780:	f7fd fa46 	bl	8003c10 <Connect_TCP_Server>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 800678a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800678e:	2b04      	cmp	r3, #4
 8006790:	d008      	beq.n	80067a4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
 8006792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006796:	2b03      	cmp	r3, #3
 8006798:	d004      	beq.n	80067a4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
 800679a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d000      	beq.n	80067a4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xb0>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80067a2:	e7eb      	b.n	800677c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x88>
		{
			break;
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80067a4:	f00d faa2 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80067a8:	4604      	mov	r4, r0
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	3338      	adds	r3, #56	; 0x38
 80067ae:	681d      	ldr	r5, [r3, #0]
 80067b0:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 80067b4:	f00d faaa 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80067b8:	4603      	mov	r3, r0
 80067ba:	9302      	str	r3, [sp, #8]
 80067bc:	f240 2326 	movw	r3, #550	; 0x226
 80067c0:	9301      	str	r3, [sp, #4]
 80067c2:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xfc>)
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x100>)
 80067c8:	4632      	mov	r2, r6
 80067ca:	2102      	movs	r1, #2
 80067cc:	4620      	mov	r0, r4
 80067ce:	47a8      	blx	r5

}
 80067d0:	bf00      	nop
 80067d2:	3734      	adds	r7, #52	; 0x34
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d8:	08023514 	.word	0x08023514
 80067dc:	080231c8 	.word	0x080231c8
 80067e0:	080231cc 	.word	0x080231cc
 80067e4:	080231e0 	.word	0x080231e0
 80067e8:	08023504 	.word	0x08023504
 80067ec:	08023508 	.word	0x08023508
 80067f0:	08022ea4 	.word	0x08022ea4
 80067f4:	080232a4 	.word	0x080232a4

080067f8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4618      	mov	r0, r3
 8006804:	f7fe fbb2 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006808:	4a03      	ldr	r2, [pc, #12]	; (8006818 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	0802631c 	.word	0x0802631c

0800681c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 800681c:	b590      	push	{r4, r7, lr}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	f240 222a 	movw	r2, #554	; 0x22a
 8006828:	4906      	ldr	r1, [pc, #24]	; (8006844 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 800682a:	2004      	movs	r0, #4
 800682c:	f003 fab8 	bl	8009da0 <_ZnwjPKci>
 8006830:	4604      	mov	r4, r0
 8006832:	4620      	mov	r0, r4
 8006834:	f7ff ffe0 	bl	80067f8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 8006838:	4623      	mov	r3, r4
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bd90      	pop	{r4, r7, pc}
 8006842:	bf00      	nop
 8006844:	08022ea4 	.word	0x08022ea4

08006848 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4618      	mov	r0, r3
 8006854:	f00b fe92 	bl	801257c <_ZN10UtestShellC1Ev>
 8006858:	4a03      	ldr	r2, [pc, #12]	; (8006868 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	08026270 	.word	0x08026270

0800686c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	b0bf      	sub	sp, #252	; 0xfc
 8006870:	af04      	add	r7, sp, #16
 8006872:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 8006874:	4a74      	ldr	r2, [pc, #464]	; (8006a48 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 8006876:	f107 0318 	add.w	r3, r7, #24
 800687a:	4611      	mov	r1, r2
 800687c:	2296      	movs	r2, #150	; 0x96
 800687e:	4618      	mov	r0, r3
 8006880:	f019 fb24 	bl	801fecc <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "ERROR\r\n"
	};

	char *fake_command_buffer[3] =
 8006884:	4a71      	ldr	r2, [pc, #452]	; (8006a4c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 8006886:	f107 030c 	add.w	r3, r7, #12
 800688a:	ca07      	ldmia	r2, {r0, r1, r2}
 800688c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CIPCLOSE\r\n",
		(char*)"AT+CIPMUX=0\r\n",
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<3;i++)
 8006890:	2300      	movs	r3, #0
 8006892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689a:	2b02      	cmp	r3, #2
 800689c:	dc46      	bgt.n	800692c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 800689e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80068a2:	496b      	ldr	r1, [pc, #428]	; (8006a50 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 80068a4:	4618      	mov	r0, r3
 80068a6:	f005 fe3e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80068aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80068ae:	2100      	movs	r1, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f003 ff11 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80068b6:	4604      	mov	r4, r0
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	681d      	ldr	r5, [r3, #0]
 80068be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80068c2:	4964      	ldr	r1, [pc, #400]	; (8006a54 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 80068c4:	4618      	mov	r0, r3
 80068c6:	f005 fe2e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80068ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80068ce:	4619      	mov	r1, r3
 80068d0:	4620      	mov	r0, r4
 80068d2:	47a8      	blx	r5
 80068d4:	4604      	mov	r4, r0
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	334c      	adds	r3, #76	; 0x4c
 80068da:	681d      	ldr	r5, [r3, #0]
 80068dc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80068e0:	495d      	ldr	r1, [pc, #372]	; (8006a58 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 80068e2:	4618      	mov	r0, r3
 80068e4:	f005 fe1f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80068e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80068f2:	4413      	add	r3, r2
 80068f4:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 80068f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80068fc:	4619      	mov	r1, r3
 80068fe:	4620      	mov	r0, r4
 8006900:	47a8      	blx	r5
 8006902:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006906:	4618      	mov	r0, r3
 8006908:	f006 f9c5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800690c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006910:	4618      	mov	r0, r3
 8006912:	f006 f9c0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006916:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800691a:	4618      	mov	r0, r3
 800691c:	f006 f9bb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006924:	3301      	adds	r3, #1
 8006926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800692a:	e7b4      	b.n	8006896 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2a>
	}

	Status response;
	int i = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006932:	494a      	ldr	r1, [pc, #296]	; (8006a5c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006934:	484a      	ldr	r0, [pc, #296]	; (8006a60 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 8006936:	f7fd f96b 	bl	8003c10 <Connect_TCP_Server>
 800693a:	4603      	mov	r3, r0
 800693c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006940:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006944:	2b04      	cmp	r3, #4
 8006946:	d065      	beq.n	8006a14 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
 8006948:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800694c:	2b03      	cmp	r3, #3
 800694e:	d061      	beq.n	8006a14 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
 8006950:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006954:	2b02      	cmp	r3, #2
 8006956:	d05d      	beq.n	8006a14 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1a8>
		{
			break;
		}

		if(i<3)
 8006958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800695c:	2b02      	cmp	r3, #2
 800695e:	dce8      	bgt.n	8006932 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006960:	2300      	movs	r3, #0
 8006962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006966:	f107 0218 	add.w	r2, r7, #24
 800696a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696e:	2132      	movs	r1, #50	; 0x32
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	4413      	add	r3, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f7f9 fc60 	bl	800023c <strlen>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006984:	4293      	cmp	r3, r2
 8006986:	da3f      	bge.n	8006a08 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19c>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006988:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800698c:	4930      	ldr	r1, [pc, #192]	; (8006a50 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 800698e:	4618      	mov	r0, r3
 8006990:	f005 fdc9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006994:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f003 fe9c 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80069a0:	4604      	mov	r4, r0
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	330c      	adds	r3, #12
 80069a6:	681d      	ldr	r5, [r3, #0]
 80069a8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80069ac:	492d      	ldr	r1, [pc, #180]	; (8006a64 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f8>)
 80069ae:	4618      	mov	r0, r3
 80069b0:	f005 fdb9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80069b4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80069b8:	4619      	mov	r1, r3
 80069ba:	4620      	mov	r0, r4
 80069bc:	47a8      	blx	r5
 80069be:	4603      	mov	r3, r0
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	3264      	adds	r2, #100	; 0x64
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80069ca:	2032      	movs	r0, #50	; 0x32
 80069cc:	fb00 f101 	mul.w	r1, r0, r1
 80069d0:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 80069d4:	4408      	add	r0, r1
 80069d6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80069da:	4401      	add	r1, r0
 80069dc:	39d0      	subs	r1, #208	; 0xd0
 80069de:	7809      	ldrb	r1, [r1, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	4790      	blx	r2
 80069e4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f006 f954 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80069ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80069f2:	4618      	mov	r0, r3
 80069f4:	f006 f94f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80069f8:	f7fc ffc0 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80069fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a00:	3301      	adds	r3, #1
 8006a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a06:	e7ae      	b.n	8006966 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xfa>
			}
			i++;
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 8006a12:	e78e      	b.n	8006932 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(STATUS_ERROR,response);
 8006a14:	f00d f96a 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8006a18:	4604      	mov	r4, r0
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	3338      	adds	r3, #56	; 0x38
 8006a1e:	681d      	ldr	r5, [r3, #0]
 8006a20:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 8006a24:	f00d f972 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	9302      	str	r3, [sp, #8]
 8006a2c:	f240 2353 	movw	r3, #595	; 0x253
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1fc>)
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x200>)
 8006a38:	4632      	mov	r2, r6
 8006a3a:	2104      	movs	r1, #4
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	47a8      	blx	r5

}
 8006a40:	bf00      	nop
 8006a42:	37ec      	adds	r7, #236	; 0xec
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a48:	080232fc 	.word	0x080232fc
 8006a4c:	08023514 	.word	0x08023514
 8006a50:	080231c8 	.word	0x080231c8
 8006a54:	080231cc 	.word	0x080231cc
 8006a58:	080231e0 	.word	0x080231e0
 8006a5c:	08023504 	.word	0x08023504
 8006a60:	08023508 	.word	0x08023508
 8006a64:	080231e8 	.word	0x080231e8
 8006a68:	08022ea4 	.word	0x08022ea4
 8006a6c:	080232d0 	.word	0x080232d0

08006a70 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fa76 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006a80:	4a03      	ldr	r2, [pc, #12]	; (8006a90 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	08026250 	.word	0x08026250

08006a94 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006a94:	b590      	push	{r4, r7, lr}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	f240 2257 	movw	r2, #599	; 0x257
 8006aa0:	4906      	ldr	r1, [pc, #24]	; (8006abc <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006aa2:	2004      	movs	r0, #4
 8006aa4:	f003 f97c 	bl	8009da0 <_ZnwjPKci>
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f7ff ffe0 	bl	8006a70 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006ab0:	4623      	mov	r3, r4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd90      	pop	{r4, r7, pc}
 8006aba:	bf00      	nop
 8006abc:	08022ea4 	.word	0x08022ea4

08006ac0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f00b fd56 	bl	801257c <_ZN10UtestShellC1Ev>
 8006ad0:	4a03      	ldr	r2, [pc, #12]	; (8006ae0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	080261a4 	.word	0x080261a4

08006ae4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8006ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae6:	b093      	sub	sp, #76	; 0x4c
 8006ae8:	af04      	add	r7, sp, #16
 8006aea:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 8006aec:	f107 0308 	add.w	r3, r7, #8
 8006af0:	494a      	ldr	r1, [pc, #296]	; (8006c1c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006af2:	4618      	mov	r0, r3
 8006af4:	f005 fd17 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006af8:	f107 0308 	add.w	r3, r7, #8
 8006afc:	2100      	movs	r1, #0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f003 fdea 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006b04:	4604      	mov	r4, r0
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	681d      	ldr	r5, [r3, #0]
 8006b0c:	f107 0310 	add.w	r3, r7, #16
 8006b10:	4943      	ldr	r1, [pc, #268]	; (8006c20 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 8006b12:	4618      	mov	r0, r3
 8006b14:	f005 fd07 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006b18:	f107 0310 	add.w	r3, r7, #16
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4620      	mov	r0, r4
 8006b20:	47a8      	blx	r5
 8006b22:	4604      	mov	r4, r0
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	334c      	adds	r3, #76	; 0x4c
 8006b28:	681d      	ldr	r5, [r3, #0]
 8006b2a:	f107 0318 	add.w	r3, r7, #24
 8006b2e:	493d      	ldr	r1, [pc, #244]	; (8006c24 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006b30:	4618      	mov	r0, r3
 8006b32:	f005 fcf8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006b36:	f107 0318 	add.w	r3, r7, #24
 8006b3a:	4a3b      	ldr	r2, [pc, #236]	; (8006c28 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4620      	mov	r0, r4
 8006b40:	47a8      	blx	r5
 8006b42:	f107 0318 	add.w	r3, r7, #24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f006 f8a5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006b4c:	f107 0310 	add.w	r3, r7, #16
 8006b50:	4618      	mov	r0, r3
 8006b52:	f006 f8a0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006b56:	f107 0308 	add.w	r3, r7, #8
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f006 f89b 	bl	800cc96 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006b60:	f7fd f890 	bl	8003c84 <Disconnect_TCP_Server>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d139      	bne.n	8006be6 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006b72:	2300      	movs	r3, #0
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	dcf1      	bgt.n	8006b60 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006b7c:	f107 0320 	add.w	r3, r7, #32
 8006b80:	4926      	ldr	r1, [pc, #152]	; (8006c1c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006b82:	4618      	mov	r0, r3
 8006b84:	f005 fccf 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006b88:	f107 0320 	add.w	r3, r7, #32
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f003 fda2 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006b94:	4604      	mov	r4, r0
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	681d      	ldr	r5, [r3, #0]
 8006b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ba0:	4922      	ldr	r1, [pc, #136]	; (8006c2c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f005 fcbf 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006ba8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bac:	4619      	mov	r1, r3
 8006bae:	4620      	mov	r0, r4
 8006bb0:	47a8      	blx	r5
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	3264      	adds	r2, #100	; 0x64
 8006bb8:	6812      	ldr	r2, [r2, #0]
 8006bba:	481d      	ldr	r0, [pc, #116]	; (8006c30 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006bbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bbe:	4401      	add	r1, r0
 8006bc0:	7809      	ldrb	r1, [r1, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	4790      	blx	r2
 8006bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f006 f863 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006bd0:	f107 0320 	add.w	r3, r7, #32
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f006 f85e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006bda:	f7fc fecf 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be0:	3301      	adds	r3, #1
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
 8006be4:	e7c7      	b.n	8006b76 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 8006be6:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006be8:	f00d f880 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8006bec:	4604      	mov	r4, r0
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	3338      	adds	r3, #56	; 0x38
 8006bf2:	681d      	ldr	r5, [r3, #0]
 8006bf4:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006bf8:	f00d f888 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	9302      	str	r3, [sp, #8]
 8006c00:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	2103      	movs	r1, #3
 8006c10:	4620      	mov	r0, r4
 8006c12:	47a8      	blx	r5

}
 8006c14:	bf00      	nop
 8006c16:	373c      	adds	r7, #60	; 0x3c
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1c:	080231c8 	.word	0x080231c8
 8006c20:	080231cc 	.word	0x080231cc
 8006c24:	080231e0 	.word	0x080231e0
 8006c28:	08022e5c 	.word	0x08022e5c
 8006c2c:	080231e8 	.word	0x080231e8
 8006c30:	08023224 	.word	0x08023224
 8006c34:	08022ea4 	.word	0x08022ea4
 8006c38:	0802342c 	.word	0x0802342c

08006c3c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe f990 	bl	8004f6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006c4c:	4a03      	ldr	r2, [pc, #12]	; (8006c5c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	08026184 	.word	0x08026184

08006c60 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006c60:	b590      	push	{r4, r7, lr}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	f44f 721c 	mov.w	r2, #624	; 0x270
 8006c6c:	4906      	ldr	r1, [pc, #24]	; (8006c88 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006c6e:	2004      	movs	r0, #4
 8006c70:	f003 f896 	bl	8009da0 <_ZnwjPKci>
 8006c74:	4604      	mov	r4, r0
 8006c76:	4620      	mov	r0, r4
 8006c78:	f7ff ffe0 	bl	8006c3c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006c7c:	4623      	mov	r3, r4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd90      	pop	{r4, r7, pc}
 8006c86:	bf00      	nop
 8006c88:	08022ea4 	.word	0x08022ea4

08006c8c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f00b fc70 	bl	801257c <_ZN10UtestShellC1Ev>
 8006c9c:	4a03      	ldr	r2, [pc, #12]	; (8006cac <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	080260d8 	.word	0x080260d8

08006cb0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb2:	b0b3      	sub	sp, #204	; 0xcc
 8006cb4:	af04      	add	r7, sp, #16
 8006cb6:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006cbe:	4a83      	ldr	r2, [pc, #524]	; (8006ecc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 8006cc0:	f107 0308 	add.w	r3, r7, #8
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	2264      	movs	r2, #100	; 0x64
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f019 f8ff 	bl	801fecc <memcpy>
	{ ">\r\n",
	  "SEND OK\r\n",
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n"); // AT+CIPSEMD=11
 8006cce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006cd2:	497f      	ldr	r1, [pc, #508]	; (8006ed0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f005 fc26 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006cda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f003 fcf9 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	681d      	ldr	r5, [r3, #0]
 8006cee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006cf2:	4978      	ldr	r1, [pc, #480]	; (8006ed4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f005 fc16 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006cfa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4620      	mov	r0, r4
 8006d02:	47a8      	blx	r5
 8006d04:	4604      	mov	r4, r0
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	334c      	adds	r3, #76	; 0x4c
 8006d0a:	681d      	ldr	r5, [r3, #0]
 8006d0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d10:	4971      	ldr	r1, [pc, #452]	; (8006ed8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006d12:	4618      	mov	r0, r3
 8006d14:	f005 fc07 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006d18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d1c:	4a6f      	ldr	r2, [pc, #444]	; (8006edc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4620      	mov	r0, r4
 8006d22:	47a8      	blx	r5
 8006d24:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f005 ffb4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006d2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d32:	4618      	mov	r0, r3
 8006d34:	f005 ffaf 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006d38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f005 ffaa 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006d42:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006d46:	4962      	ldr	r1, [pc, #392]	; (8006ed0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f005 fbec 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006d4e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f003 fcbf 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	681d      	ldr	r5, [r3, #0]
 8006d62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d66:	495b      	ldr	r1, [pc, #364]	; (8006ed4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f005 fbdc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006d6e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d72:	4619      	mov	r1, r3
 8006d74:	4620      	mov	r0, r4
 8006d76:	47a8      	blx	r5
 8006d78:	4604      	mov	r4, r0
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	334c      	adds	r3, #76	; 0x4c
 8006d7e:	681d      	ldr	r5, [r3, #0]
 8006d80:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d84:	4954      	ldr	r1, [pc, #336]	; (8006ed8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006d86:	4618      	mov	r0, r3
 8006d88:	f005 fbcd 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006d8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d90:	4a53      	ldr	r2, [pc, #332]	; (8006ee0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x230>)
 8006d92:	4619      	mov	r1, r3
 8006d94:	4620      	mov	r0, r4
 8006d96:	47a8      	blx	r5
 8006d98:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f005 ff7a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006da2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006da6:	4618      	mov	r0, r3
 8006da8:	f005 ff75 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006dac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006db0:	4618      	mov	r0, r3
 8006db2:	f005 ff70 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8006db6:	484a      	ldr	r0, [pc, #296]	; (8006ee0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x230>)
 8006db8:	f7fc ff80 	bl	8003cbc <Send_TCP_Message>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response == STATUS_ERROR || response == STATUS_OK || response == TIMEOUT_ERROR)
 8006dc2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d065      	beq.n	8006e96 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
 8006dca:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d061      	beq.n	8006e96 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
 8006dd2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d05d      	beq.n	8006e96 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1e6>
		{
			break;
		}

		if(i<2)
 8006dda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	dce9      	bgt.n	8006db6 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006de2:	2300      	movs	r3, #0
 8006de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006de8:	f107 0208 	add.w	r2, r7, #8
 8006dec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006df0:	2132      	movs	r1, #50	; 0x32
 8006df2:	fb01 f303 	mul.w	r3, r1, r3
 8006df6:	4413      	add	r3, r2
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7f9 fa1f 	bl	800023c <strlen>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461a      	mov	r2, r3
 8006e02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e06:	4293      	cmp	r3, r2
 8006e08:	da3f      	bge.n	8006e8a <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1da>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006e0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e0e:	4930      	ldr	r1, [pc, #192]	; (8006ed0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006e10:	4618      	mov	r0, r3
 8006e12:	f005 fb88 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006e16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f003 fc5b 	bl	800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006e22:	4604      	mov	r4, r0
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	681d      	ldr	r5, [r3, #0]
 8006e2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e2e:	492d      	ldr	r1, [pc, #180]	; (8006ee4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x234>)
 8006e30:	4618      	mov	r0, r3
 8006e32:	f005 fb78 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8006e36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	47a8      	blx	r5
 8006e40:	4603      	mov	r3, r0
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	3264      	adds	r2, #100	; 0x64
 8006e46:	6812      	ldr	r2, [r2, #0]
 8006e48:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006e4c:	2032      	movs	r0, #50	; 0x32
 8006e4e:	fb00 f101 	mul.w	r1, r0, r1
 8006e52:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006e56:	4408      	add	r0, r1
 8006e58:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006e5c:	4401      	add	r1, r0
 8006e5e:	39b0      	subs	r1, #176	; 0xb0
 8006e60:	7809      	ldrb	r1, [r1, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	4790      	blx	r2
 8006e66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f005 ff13 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8006e70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e74:	4618      	mov	r0, r3
 8006e76:	f005 ff0e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006e7a:	f7fc fd7f 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006e7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e82:	3301      	adds	r3, #1
 8006e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e88:	e7ae      	b.n	8006de8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x138>
			}
			i++;
 8006e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e8e:	3301      	adds	r3, #1
 8006e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 8006e94:	e78f      	b.n	8006db6 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>

	LONGS_EQUAL(STATUS_OK,response);
 8006e96:	f00c ff29 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	3338      	adds	r3, #56	; 0x38
 8006ea0:	681d      	ldr	r5, [r3, #0]
 8006ea2:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 8006ea6:	f00c ff31 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	9302      	str	r3, [sp, #8]
 8006eae:	f240 2391 	movw	r3, #657	; 0x291
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x238>)
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x23c>)
 8006eba:	4632      	mov	r2, r6
 8006ebc:	2103      	movs	r1, #3
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	47a8      	blx	r5

}
 8006ec2:	bf00      	nop
 8006ec4:	37bc      	adds	r7, #188	; 0xbc
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	08023530 	.word	0x08023530
 8006ed0:	080231c8 	.word	0x080231c8
 8006ed4:	080231cc 	.word	0x080231cc
 8006ed8:	080231e0 	.word	0x080231e0
 8006edc:	08023520 	.word	0x08023520
 8006ee0:	080230d8 	.word	0x080230d8
 8006ee4:	080231e8 	.word	0x080231e8
 8006ee8:	08022ea4 	.word	0x08022ea4
 8006eec:	0802342c 	.word	0x0802342c

08006ef0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	4a05      	ldr	r2, [pc, #20]	; (8006f10 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f00b fb8f 	bl	8012624 <_ZN10UtestShellD1Ev>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	080260d8 	.word	0x080260d8

08006f14 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff ffe7 	bl	8006ef0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 8006f22:	211c      	movs	r1, #28
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f002 ff4f 	bl	8009dc8 <_ZdlPvj>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	4a05      	ldr	r2, [pc, #20]	; (8006f54 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe f823 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	08026184 	.word	0x08026184

08006f58 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff ffe7 	bl	8006f34 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 8006f66:	2104      	movs	r1, #4
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f002 ff2d 	bl	8009dc8 <_ZdlPvj>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	4a05      	ldr	r2, [pc, #20]	; (8006f98 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f00b fb4b 	bl	8012624 <_ZN10UtestShellD1Ev>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	080261a4 	.word	0x080261a4

08006f9c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff ffe7 	bl	8006f78 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 8006faa:	211c      	movs	r1, #28
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f002 ff0b 	bl	8009dc8 <_ZdlPvj>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	4a05      	ldr	r2, [pc, #20]	; (8006fdc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fd ffdf 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	08026250 	.word	0x08026250

08006fe0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff ffe7 	bl	8006fbc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 8006fee:	2104      	movs	r1, #4
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f002 fee9 	bl	8009dc8 <_ZdlPvj>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	4a05      	ldr	r2, [pc, #20]	; (8007020 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4618      	mov	r0, r3
 8007012:	f00b fb07 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	08026270 	.word	0x08026270

08007024 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff ffe7 	bl	8007000 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 8007032:	211c      	movs	r1, #28
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f002 fec7 	bl	8009dc8 <_ZdlPvj>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	4a05      	ldr	r2, [pc, #20]	; (8007064 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4618      	mov	r0, r3
 8007056:	f7fd ff9b 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	0802631c 	.word	0x0802631c

08007068 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff ffe7 	bl	8007044 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 8007076:	2104      	movs	r1, #4
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f002 fea5 	bl	8009dc8 <_ZdlPvj>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	4a05      	ldr	r2, [pc, #20]	; (80070a8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4618      	mov	r0, r3
 800709a:	f00b fac3 	bl	8012624 <_ZN10UtestShellD1Ev>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	0802633c 	.word	0x0802633c

080070ac <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff ffe7 	bl	8007088 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 80070ba:	211c      	movs	r1, #28
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f002 fe83 	bl	8009dc8 <_ZdlPvj>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	4a05      	ldr	r2, [pc, #20]	; (80070ec <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fd ff57 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	080263e8 	.word	0x080263e8

080070f0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff ffe7 	bl	80070cc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 80070fe:	2104      	movs	r1, #4
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f002 fe61 	bl	8009dc8 <_ZdlPvj>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	4a05      	ldr	r2, [pc, #20]	; (8007130 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4618      	mov	r0, r3
 8007122:	f00b fa7f 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	08026408 	.word	0x08026408

08007134 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff ffe7 	bl	8007110 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 8007142:	211c      	movs	r1, #28
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f002 fe3f 	bl	8009dc8 <_ZdlPvj>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	4a05      	ldr	r2, [pc, #20]	; (8007174 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4618      	mov	r0, r3
 8007166:	f7fd ff13 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	080264b4 	.word	0x080264b4

08007178 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff ffe7 	bl	8007154 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 8007186:	2104      	movs	r1, #4
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f002 fe1d 	bl	8009dc8 <_ZdlPvj>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	4a05      	ldr	r2, [pc, #20]	; (80071b8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f00b fa3b 	bl	8012624 <_ZN10UtestShellD1Ev>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	080264d4 	.word	0x080264d4

080071bc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff ffe7 	bl	8007198 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 80071ca:	211c      	movs	r1, #28
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f002 fdfb 	bl	8009dc8 <_ZdlPvj>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	4a05      	ldr	r2, [pc, #20]	; (80071fc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fd fecf 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	08026580 	.word	0x08026580

08007200 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff ffe7 	bl	80071dc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 800720e:	2104      	movs	r1, #4
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f002 fdd9 	bl	8009dc8 <_ZdlPvj>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	4a05      	ldr	r2, [pc, #20]	; (8007240 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4618      	mov	r0, r3
 8007232:	f00b f9f7 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	080265a0 	.word	0x080265a0

08007244 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ffe7 	bl	8007220 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8007252:	211c      	movs	r1, #28
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f002 fdb7 	bl	8009dc8 <_ZdlPvj>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	4a05      	ldr	r2, [pc, #20]	; (8007284 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4618      	mov	r0, r3
 8007276:	f7fd fe8b 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	0802664c 	.word	0x0802664c

08007288 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff ffe7 	bl	8007264 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 8007296:	2104      	movs	r1, #4
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f002 fd95 	bl	8009dc8 <_ZdlPvj>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	4a05      	ldr	r2, [pc, #20]	; (80072c8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f00b f9b3 	bl	8012624 <_ZN10UtestShellD1Ev>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	0802666c 	.word	0x0802666c

080072cc <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff ffe7 	bl	80072a8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 80072da:	211c      	movs	r1, #28
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f002 fd73 	bl	8009dc8 <_ZdlPvj>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	4a05      	ldr	r2, [pc, #20]	; (800730c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fd fe47 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	08026718 	.word	0x08026718

08007310 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff ffe7 	bl	80072ec <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 800731e:	2104      	movs	r1, #4
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f002 fd51 	bl	8009dc8 <_ZdlPvj>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	4a05      	ldr	r2, [pc, #20]	; (8007350 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4618      	mov	r0, r3
 8007342:	f00b f96f 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	08026738 	.word	0x08026738

08007354 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff ffe7 	bl	8007330 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8007362:	211c      	movs	r1, #28
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f002 fd2f 	bl	8009dc8 <_ZdlPvj>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	4a05      	ldr	r2, [pc, #20]	; (8007394 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4618      	mov	r0, r3
 8007386:	f7fd fe03 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	080267e4 	.word	0x080267e4

08007398 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff ffe7 	bl	8007374 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 80073a6:	2104      	movs	r1, #4
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f002 fd0d 	bl	8009dc8 <_ZdlPvj>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	4a05      	ldr	r2, [pc, #20]	; (80073d8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f00b f92b 	bl	8012624 <_ZN10UtestShellD1Ev>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	08026804 	.word	0x08026804

080073dc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff ffe7 	bl	80073b8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 80073ea:	211c      	movs	r1, #28
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f002 fceb 	bl	8009dc8 <_ZdlPvj>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	4a05      	ldr	r2, [pc, #20]	; (800741c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4618      	mov	r0, r3
 800740e:	f7fd fdbf 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	080268b0 	.word	0x080268b0

08007420 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff ffe7 	bl	80073fc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 800742e:	2104      	movs	r1, #4
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f002 fcc9 	bl	8009dc8 <_ZdlPvj>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	4a05      	ldr	r2, [pc, #20]	; (8007460 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4618      	mov	r0, r3
 8007452:	f00b f8e7 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	080268d0 	.word	0x080268d0

08007464 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff ffe7 	bl	8007440 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007472:	211c      	movs	r1, #28
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f002 fca7 	bl	8009dc8 <_ZdlPvj>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4618      	mov	r0, r3
 8007496:	f7fd fd7b 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	0802697c 	.word	0x0802697c

080074a8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff ffe7 	bl	8007484 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 80074b6:	2104      	movs	r1, #4
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f002 fc85 	bl	8009dc8 <_ZdlPvj>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	4a05      	ldr	r2, [pc, #20]	; (80074e8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4618      	mov	r0, r3
 80074da:	f00b f8a3 	bl	8012624 <_ZN10UtestShellD1Ev>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	0802699c 	.word	0x0802699c

080074ec <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff ffe7 	bl	80074c8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 80074fa:	211c      	movs	r1, #28
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f002 fc63 	bl	8009dc8 <_ZdlPvj>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	4a05      	ldr	r2, [pc, #20]	; (800752c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4618      	mov	r0, r3
 800751e:	f7fd fd37 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	08026a48 	.word	0x08026a48

08007530 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff ffe7 	bl	800750c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 800753e:	2104      	movs	r1, #4
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f002 fc41 	bl	8009dc8 <_ZdlPvj>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	4a05      	ldr	r2, [pc, #20]	; (8007570 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4618      	mov	r0, r3
 8007562:	f00b f85f 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	08026a68 	.word	0x08026a68

08007574 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff ffe7 	bl	8007550 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007582:	211c      	movs	r1, #28
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f002 fc1f 	bl	8009dc8 <_ZdlPvj>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	4a05      	ldr	r2, [pc, #20]	; (80075b4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd fcf3 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	08026b14 	.word	0x08026b14

080075b8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff ffe7 	bl	8007594 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 80075c6:	2104      	movs	r1, #4
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f002 fbfd 	bl	8009dc8 <_ZdlPvj>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	4a05      	ldr	r2, [pc, #20]	; (80075f8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f00b f81b 	bl	8012624 <_ZN10UtestShellD1Ev>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	08026b34 	.word	0x08026b34

080075fc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff ffe7 	bl	80075d8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 800760a:	211c      	movs	r1, #28
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f002 fbdb 	bl	8009dc8 <_ZdlPvj>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	4a05      	ldr	r2, [pc, #20]	; (800763c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4618      	mov	r0, r3
 800762e:	f7fd fcaf 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	08026be0 	.word	0x08026be0

08007640 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff ffe7 	bl	800761c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 800764e:	2104      	movs	r1, #4
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f002 fbb9 	bl	8009dc8 <_ZdlPvj>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	4a05      	ldr	r2, [pc, #20]	; (8007680 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4618      	mov	r0, r3
 8007672:	f00a ffd7 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	08026c00 	.word	0x08026c00

08007684 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff ffe7 	bl	8007660 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007692:	211c      	movs	r1, #28
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f002 fb97 	bl	8009dc8 <_ZdlPvj>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	4a05      	ldr	r2, [pc, #20]	; (80076c4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fd fc6b 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	08026cac 	.word	0x08026cac

080076c8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff ffe7 	bl	80076a4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 80076d6:	2104      	movs	r1, #4
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f002 fb75 	bl	8009dc8 <_ZdlPvj>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	4a05      	ldr	r2, [pc, #20]	; (8007708 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f00a ff93 	bl	8012624 <_ZN10UtestShellD1Ev>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	08026ccc 	.word	0x08026ccc

0800770c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff ffe7 	bl	80076e8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 800771a:	211c      	movs	r1, #28
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f002 fb53 	bl	8009dc8 <_ZdlPvj>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	4a05      	ldr	r2, [pc, #20]	; (800774c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4618      	mov	r0, r3
 800773e:	f7fd fc27 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	08026d78 	.word	0x08026d78

08007750 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff ffe7 	bl	800772c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 800775e:	2104      	movs	r1, #4
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f002 fb31 	bl	8009dc8 <_ZdlPvj>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	4a05      	ldr	r2, [pc, #20]	; (8007790 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4618      	mov	r0, r3
 8007782:	f00a ff4f 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	08026d98 	.word	0x08026d98

08007794 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ffe7 	bl	8007770 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 80077a2:	211c      	movs	r1, #28
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f002 fb0f 	bl	8009dc8 <_ZdlPvj>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	4a05      	ldr	r2, [pc, #20]	; (80077d4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fd fbe3 	bl	8004f90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	08026e44 	.word	0x08026e44

080077d8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff ffe7 	bl	80077b4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 80077e6:	2104      	movs	r1, #4
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f002 faed 	bl	8009dc8 <_ZdlPvj>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	4a05      	ldr	r2, [pc, #20]	; (8007818 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4618      	mov	r0, r3
 800780a:	f00a ff0b 	bl	8012624 <_ZN10UtestShellD1Ev>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	08026e84 	.word	0x08026e84

0800781c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ffe7 	bl	80077f8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 800782a:	211c      	movs	r1, #28
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f002 facb 	bl	8009dc8 <_ZdlPvj>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	4a05      	ldr	r2, [pc, #20]	; (800785c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4618      	mov	r0, r3
 800784e:	f7fc fd57 	bl	8004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	08026f30 	.word	0x08026f30

08007860 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ffe7 	bl	800783c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 800786e:	2108      	movs	r1, #8
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f002 faa9 	bl	8009dc8 <_ZdlPvj>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	4a05      	ldr	r2, [pc, #20]	; (80078a0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4618      	mov	r0, r3
 8007892:	f00a fec7 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	08026f50 	.word	0x08026f50

080078a4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff ffe7 	bl	8007880 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 80078b2:	211c      	movs	r1, #28
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f002 fa87 	bl	8009dc8 <_ZdlPvj>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fc fd13 	bl	8004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	08026ffc 	.word	0x08026ffc

080078e8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ffe7 	bl	80078c4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 80078f6:	2108      	movs	r1, #8
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f002 fa65 	bl	8009dc8 <_ZdlPvj>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	4a05      	ldr	r2, [pc, #20]	; (8007928 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4618      	mov	r0, r3
 800791a:	f00a fe83 	bl	8012624 <_ZN10UtestShellD1Ev>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	0802701c 	.word	0x0802701c

0800792c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff ffe7 	bl	8007908 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 800793a:	211c      	movs	r1, #28
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f002 fa43 	bl	8009dc8 <_ZdlPvj>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	4a05      	ldr	r2, [pc, #20]	; (800796c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4618      	mov	r0, r3
 800795e:	f7fc fccf 	bl	8004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	080270c8 	.word	0x080270c8

08007970 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff ffe7 	bl	800794c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 800797e:	2108      	movs	r1, #8
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f002 fa21 	bl	8009dc8 <_ZdlPvj>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	4a05      	ldr	r2, [pc, #20]	; (80079b0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f00a fe3f 	bl	8012624 <_ZN10UtestShellD1Ev>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	080270e8 	.word	0x080270e8

080079b4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ffe7 	bl	8007990 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 80079c2:	211c      	movs	r1, #28
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f002 f9ff 	bl	8009dc8 <_ZdlPvj>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	4a05      	ldr	r2, [pc, #20]	; (80079f4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fc fc8b 	bl	8004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	08027194 	.word	0x08027194

080079f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff ffe7 	bl	80079d4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8007a06:	2108      	movs	r1, #8
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f002 f9dd 	bl	8009dc8 <_ZdlPvj>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	4a05      	ldr	r2, [pc, #20]	; (8007a38 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f00a fdfb 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	080271b4 	.word	0x080271b4

08007a3c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff ffe7 	bl	8007a18 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8007a4a:	211c      	movs	r1, #28
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f002 f9bb 	bl	8009dc8 <_ZdlPvj>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	4a05      	ldr	r2, [pc, #20]	; (8007a7c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fc fc47 	bl	8004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	08027260 	.word	0x08027260

08007a80 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ffe7 	bl	8007a5c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8007a8e:	2108      	movs	r1, #8
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f002 f999 	bl	8009dc8 <_ZdlPvj>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	4a05      	ldr	r2, [pc, #20]	; (8007ac0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f00a fdb7 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	08027280 	.word	0x08027280

08007ac4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff ffe7 	bl	8007aa0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8007ad2:	211c      	movs	r1, #28
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f002 f977 	bl	8009dc8 <_ZdlPvj>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	4a05      	ldr	r2, [pc, #20]	; (8007b04 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fc fc03 	bl	8004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	0802732c 	.word	0x0802732c

08007b08 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff ffe7 	bl	8007ae4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8007b16:	2108      	movs	r1, #8
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f002 f955 	bl	8009dc8 <_ZdlPvj>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	4a05      	ldr	r2, [pc, #20]	; (8007b48 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f00a fd73 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	0802734c 	.word	0x0802734c

08007b4c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ffe7 	bl	8007b28 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8007b5a:	211c      	movs	r1, #28
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f002 f933 	bl	8009dc8 <_ZdlPvj>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	4a05      	ldr	r2, [pc, #20]	; (8007b8c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fc fbbf 	bl	8004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	080273f8 	.word	0x080273f8

08007b90 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7ff ffe7 	bl	8007b6c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8007b9e:	2108      	movs	r1, #8
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f002 f911 	bl	8009dc8 <_ZdlPvj>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	4a05      	ldr	r2, [pc, #20]	; (8007bd0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f00a fd2f 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	08027418 	.word	0x08027418

08007bd4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff ffe7 	bl	8007bb0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8007be2:	211c      	movs	r1, #28
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f002 f8ef 	bl	8009dc8 <_ZdlPvj>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	4a05      	ldr	r2, [pc, #20]	; (8007c14 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fc fb7b 	bl	8004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	080274c4 	.word	0x080274c4

08007c18 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff ffe7 	bl	8007bf4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8007c26:	2108      	movs	r1, #8
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f002 f8cd 	bl	8009dc8 <_ZdlPvj>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	4a05      	ldr	r2, [pc, #20]	; (8007c58 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f00a fceb 	bl	8012624 <_ZN10UtestShellD1Ev>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	080274e4 	.word	0x080274e4

08007c5c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff ffe7 	bl	8007c38 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8007c6a:	211c      	movs	r1, #28
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f002 f8ab 	bl	8009dc8 <_ZdlPvj>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	4a05      	ldr	r2, [pc, #20]	; (8007c9c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fc fb37 	bl	8004300 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	08027590 	.word	0x08027590

08007ca0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff ffe7 	bl	8007c7c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8007cae:	2108      	movs	r1, #8
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f002 f889 	bl	8009dc8 <_ZdlPvj>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <_Z41__static_initialization_and_destruction_0ii>:
}
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	f040 81fa 	bne.w	80080c6 <_Z41__static_initialization_and_destruction_0ii+0x406>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	f040 81f4 	bne.w	80080c6 <_Z41__static_initialization_and_destruction_0ii+0x406>
TEST(RingBuffer_Test_Group, InitTest)
 8007cde:	489f      	ldr	r0, [pc, #636]	; (8007f5c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007ce0:	f7fc fb5c 	bl	800439c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8007ce4:	2324      	movs	r3, #36	; 0x24
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	4b9d      	ldr	r3, [pc, #628]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4b9d      	ldr	r3, [pc, #628]	; (8007f64 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8007cee:	4a9e      	ldr	r2, [pc, #632]	; (8007f68 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007cf0:	499a      	ldr	r1, [pc, #616]	; (8007f5c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007cf2:	489e      	ldr	r0, [pc, #632]	; (8007f6c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8007cf4:	f00c fa92 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8007cf8:	489d      	ldr	r0, [pc, #628]	; (8007f70 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007cfa:	f7fc fc03 	bl	8004504 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8007cfe:	232e      	movs	r3, #46	; 0x2e
 8007d00:	9301      	str	r3, [sp, #4]
 8007d02:	4b97      	ldr	r3, [pc, #604]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4b9b      	ldr	r3, [pc, #620]	; (8007f74 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8007d08:	4a97      	ldr	r2, [pc, #604]	; (8007f68 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007d0a:	4999      	ldr	r1, [pc, #612]	; (8007f70 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007d0c:	489a      	ldr	r0, [pc, #616]	; (8007f78 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8007d0e:	f00c fa85 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8007d12:	489a      	ldr	r0, [pc, #616]	; (8007f7c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8007d14:	f7fc fc80 	bl	8004618 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8007d18:	2338      	movs	r3, #56	; 0x38
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	4b90      	ldr	r3, [pc, #576]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4b97      	ldr	r3, [pc, #604]	; (8007f80 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8007d22:	4a91      	ldr	r2, [pc, #580]	; (8007f68 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007d24:	4995      	ldr	r1, [pc, #596]	; (8007f7c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8007d26:	4897      	ldr	r0, [pc, #604]	; (8007f84 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8007d28:	f00c fa78 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8007d2c:	4896      	ldr	r0, [pc, #600]	; (8007f88 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8007d2e:	f7fc fcfb 	bl	8004728 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8007d32:	2343      	movs	r3, #67	; 0x43
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	4b8a      	ldr	r3, [pc, #552]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	4b94      	ldr	r3, [pc, #592]	; (8007f8c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8007d3c:	4a8a      	ldr	r2, [pc, #552]	; (8007f68 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007d3e:	4992      	ldr	r1, [pc, #584]	; (8007f88 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8007d40:	4893      	ldr	r0, [pc, #588]	; (8007f90 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8007d42:	f00c fa6b 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8007d46:	4893      	ldr	r0, [pc, #588]	; (8007f94 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8007d48:	f7fc fd5a 	bl	8004800 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8007d4c:	234c      	movs	r3, #76	; 0x4c
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	4b83      	ldr	r3, [pc, #524]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	4b90      	ldr	r3, [pc, #576]	; (8007f98 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8007d56:	4a84      	ldr	r2, [pc, #528]	; (8007f68 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007d58:	498e      	ldr	r1, [pc, #568]	; (8007f94 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8007d5a:	4890      	ldr	r0, [pc, #576]	; (8007f9c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8007d5c:	f00c fa5e 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007d60:	488f      	ldr	r0, [pc, #572]	; (8007fa0 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8007d62:	f7fc fdd9 	bl	8004918 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8007d66:	235c      	movs	r3, #92	; 0x5c
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	4b7d      	ldr	r3, [pc, #500]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4b8d      	ldr	r3, [pc, #564]	; (8007fa4 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8007d70:	4a7d      	ldr	r2, [pc, #500]	; (8007f68 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007d72:	498b      	ldr	r1, [pc, #556]	; (8007fa0 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8007d74:	488c      	ldr	r0, [pc, #560]	; (8007fa8 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8007d76:	f00c fa51 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8007d7a:	488c      	ldr	r0, [pc, #560]	; (8007fac <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8007d7c:	f7fc fe8a 	bl	8004a94 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8007d80:	2371      	movs	r3, #113	; 0x71
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	4b76      	ldr	r3, [pc, #472]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	4b89      	ldr	r3, [pc, #548]	; (8007fb0 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8007d8a:	4a77      	ldr	r2, [pc, #476]	; (8007f68 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007d8c:	4987      	ldr	r1, [pc, #540]	; (8007fac <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8007d8e:	4889      	ldr	r0, [pc, #548]	; (8007fb4 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8007d90:	f00c fa44 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8007d94:	4888      	ldr	r0, [pc, #544]	; (8007fb8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8007d96:	f7fc fee3 	bl	8004b60 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8007d9a:	2378      	movs	r3, #120	; 0x78
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	4b70      	ldr	r3, [pc, #448]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	4b86      	ldr	r3, [pc, #536]	; (8007fbc <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8007da4:	4a70      	ldr	r2, [pc, #448]	; (8007f68 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007da6:	4984      	ldr	r1, [pc, #528]	; (8007fb8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8007da8:	4885      	ldr	r0, [pc, #532]	; (8007fc0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8007daa:	f00c fa37 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8007dae:	4885      	ldr	r0, [pc, #532]	; (8007fc4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007db0:	f7fc ffc0 	bl	8004d34 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	4b69      	ldr	r3, [pc, #420]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	4b82      	ldr	r3, [pc, #520]	; (8007fc8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8007dbe:	4a6a      	ldr	r2, [pc, #424]	; (8007f68 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007dc0:	4980      	ldr	r1, [pc, #512]	; (8007fc4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007dc2:	4882      	ldr	r0, [pc, #520]	; (8007fcc <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8007dc4:	f00c fa2a 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007dc8:	4881      	ldr	r0, [pc, #516]	; (8007fd0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8007dca:	f7fd f929 	bl	8005020 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8007dce:	23b8      	movs	r3, #184	; 0xb8
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	4b63      	ldr	r3, [pc, #396]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	4b7f      	ldr	r3, [pc, #508]	; (8007fd4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8007dd8:	4a7f      	ldr	r2, [pc, #508]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007dda:	497d      	ldr	r1, [pc, #500]	; (8007fd0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8007ddc:	487f      	ldr	r0, [pc, #508]	; (8007fdc <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8007dde:	f00c fa1d 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007de2:	487f      	ldr	r0, [pc, #508]	; (8007fe0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8007de4:	f7fd f986 	bl	80050f4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8007de8:	23ca      	movs	r3, #202	; 0xca
 8007dea:	9301      	str	r3, [sp, #4]
 8007dec:	4b5c      	ldr	r3, [pc, #368]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	4b7c      	ldr	r3, [pc, #496]	; (8007fe4 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8007df2:	4a79      	ldr	r2, [pc, #484]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007df4:	497a      	ldr	r1, [pc, #488]	; (8007fe0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8007df6:	487c      	ldr	r0, [pc, #496]	; (8007fe8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007df8:	f00c fa10 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007dfc:	487b      	ldr	r0, [pc, #492]	; (8007fec <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8007dfe:	f7fd fa3d 	bl	800527c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8007e02:	23d6      	movs	r3, #214	; 0xd6
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	4b56      	ldr	r3, [pc, #344]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	4b79      	ldr	r3, [pc, #484]	; (8007ff0 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8007e0c:	4a72      	ldr	r2, [pc, #456]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007e0e:	4977      	ldr	r1, [pc, #476]	; (8007fec <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8007e10:	4878      	ldr	r0, [pc, #480]	; (8007ff4 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8007e12:	f00c fa03 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007e16:	4878      	ldr	r0, [pc, #480]	; (8007ff8 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8007e18:	f7fd fb48 	bl	80054ac <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8007e1c:	23e6      	movs	r3, #230	; 0xe6
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	4b4f      	ldr	r3, [pc, #316]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	4b75      	ldr	r3, [pc, #468]	; (8007ffc <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8007e26:	4a6c      	ldr	r2, [pc, #432]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007e28:	4973      	ldr	r1, [pc, #460]	; (8007ff8 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8007e2a:	4875      	ldr	r0, [pc, #468]	; (8008000 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8007e2c:	f00c f9f6 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007e30:	4874      	ldr	r0, [pc, #464]	; (8008004 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8007e32:	f7fd fbef 	bl	8005614 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8007e36:	23f7      	movs	r3, #247	; 0xf7
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	4b49      	ldr	r3, [pc, #292]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	4b72      	ldr	r3, [pc, #456]	; (8008008 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8007e40:	4a65      	ldr	r2, [pc, #404]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007e42:	4970      	ldr	r1, [pc, #448]	; (8008004 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8007e44:	4871      	ldr	r0, [pc, #452]	; (800800c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8007e46:	f00c f9e9 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007e4a:	4871      	ldr	r0, [pc, #452]	; (8008010 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8007e4c:	f7fd fc4e 	bl	80056ec <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8007e50:	f240 1307 	movw	r3, #263	; 0x107
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	4b42      	ldr	r3, [pc, #264]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4b6e      	ldr	r3, [pc, #440]	; (8008014 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8007e5c:	4a5e      	ldr	r2, [pc, #376]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007e5e:	496c      	ldr	r1, [pc, #432]	; (8008010 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8007e60:	486d      	ldr	r0, [pc, #436]	; (8008018 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8007e62:	f00c f9db 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007e66:	486d      	ldr	r0, [pc, #436]	; (800801c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8007e68:	f7fd fd04 	bl	8005874 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8007e6c:	f240 131d 	movw	r3, #285	; 0x11d
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	4b3b      	ldr	r3, [pc, #236]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	4b6a      	ldr	r3, [pc, #424]	; (8008020 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8007e78:	4a57      	ldr	r2, [pc, #348]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007e7a:	4968      	ldr	r1, [pc, #416]	; (800801c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8007e7c:	4869      	ldr	r0, [pc, #420]	; (8008024 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8007e7e:	f00c f9cd 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007e82:	4869      	ldr	r0, [pc, #420]	; (8008028 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8007e84:	f7fd fda8 	bl	80059d8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8007e88:	f44f 739a 	mov.w	r3, #308	; 0x134
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	4b34      	ldr	r3, [pc, #208]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	4b66      	ldr	r3, [pc, #408]	; (800802c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8007e94:	4a50      	ldr	r2, [pc, #320]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007e96:	4964      	ldr	r1, [pc, #400]	; (8008028 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8007e98:	4865      	ldr	r0, [pc, #404]	; (8008030 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8007e9a:	f00c f9bf 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007e9e:	4865      	ldr	r0, [pc, #404]	; (8008034 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8007ea0:	f7fd fede 	bl	8005c60 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 8007ea4:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	4b2d      	ldr	r3, [pc, #180]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	4b62      	ldr	r3, [pc, #392]	; (8008038 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8007eb0:	4a49      	ldr	r2, [pc, #292]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007eb2:	4960      	ldr	r1, [pc, #384]	; (8008034 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8007eb4:	4861      	ldr	r0, [pc, #388]	; (800803c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8007eb6:	f00c f9b1 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8007eba:	4861      	ldr	r0, [pc, #388]	; (8008040 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8007ebc:	f7fe f812 	bl	8005ee4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 8007ec0:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	4b26      	ldr	r3, [pc, #152]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	4b5e      	ldr	r3, [pc, #376]	; (8008044 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8007ecc:	4a42      	ldr	r2, [pc, #264]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007ece:	495c      	ldr	r1, [pc, #368]	; (8008040 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8007ed0:	485d      	ldr	r0, [pc, #372]	; (8008048 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8007ed2:	f00c f9a3 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007ed6:	485d      	ldr	r0, [pc, #372]	; (800804c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8007ed8:	f7fe f8ae 	bl	8006038 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 8007edc:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	4b1f      	ldr	r3, [pc, #124]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	4b5a      	ldr	r3, [pc, #360]	; (8008050 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8007ee8:	4a3b      	ldr	r2, [pc, #236]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007eea:	4958      	ldr	r1, [pc, #352]	; (800804c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8007eec:	4859      	ldr	r0, [pc, #356]	; (8008054 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8007eee:	f00c f995 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8007ef2:	4859      	ldr	r0, [pc, #356]	; (8008058 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8007ef4:	f7fe f986 	bl	8006204 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 8007ef8:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	4b18      	ldr	r3, [pc, #96]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	4b56      	ldr	r3, [pc, #344]	; (800805c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8007f04:	4a34      	ldr	r2, [pc, #208]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007f06:	4954      	ldr	r1, [pc, #336]	; (8008058 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8007f08:	4855      	ldr	r0, [pc, #340]	; (8008060 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8007f0a:	f00c f987 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007f0e:	4855      	ldr	r0, [pc, #340]	; (8008064 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8007f10:	f7fe faa2 	bl	8006458 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 8007f14:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	4b52      	ldr	r3, [pc, #328]	; (8008068 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8007f20:	4a2d      	ldr	r2, [pc, #180]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007f22:	4950      	ldr	r1, [pc, #320]	; (8008064 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8007f24:	4851      	ldr	r0, [pc, #324]	; (800806c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8007f26:	f00c f979 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8007f2a:	4851      	ldr	r0, [pc, #324]	; (8008070 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8007f2c:	f7fe fbd0 	bl	80066d0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8007f30:	f240 230f 	movw	r3, #527	; 0x20f
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	4b4e      	ldr	r3, [pc, #312]	; (8008074 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8007f3c:	4a26      	ldr	r2, [pc, #152]	; (8007fd8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007f3e:	494c      	ldr	r1, [pc, #304]	; (8008070 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8007f40:	484d      	ldr	r0, [pc, #308]	; (8008078 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8007f42:	f00c f96b 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8007f46:	484d      	ldr	r0, [pc, #308]	; (800807c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8007f48:	f7fe fc7e 	bl	8006848 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8007f4c:	f240 232a 	movw	r3, #554	; 0x22a
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	4b4a      	ldr	r3, [pc, #296]	; (8008080 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8007f58:	e094      	b.n	8008084 <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 8007f5a:	bf00      	nop
 8007f5c:	2000049c 	.word	0x2000049c
 8007f60:	08022ea4 	.word	0x08022ea4
 8007f64:	08023594 	.word	0x08023594
 8007f68:	080235a0 	.word	0x080235a0
 8007f6c:	200004b8 	.word	0x200004b8
 8007f70:	200004bc 	.word	0x200004bc
 8007f74:	080235b8 	.word	0x080235b8
 8007f78:	200004d8 	.word	0x200004d8
 8007f7c:	200004dc 	.word	0x200004dc
 8007f80:	080235c8 	.word	0x080235c8
 8007f84:	200004f8 	.word	0x200004f8
 8007f88:	200004fc 	.word	0x200004fc
 8007f8c:	080235dc 	.word	0x080235dc
 8007f90:	20000518 	.word	0x20000518
 8007f94:	2000051c 	.word	0x2000051c
 8007f98:	080235ec 	.word	0x080235ec
 8007f9c:	20000538 	.word	0x20000538
 8007fa0:	2000053c 	.word	0x2000053c
 8007fa4:	08023604 	.word	0x08023604
 8007fa8:	20000558 	.word	0x20000558
 8007fac:	2000055c 	.word	0x2000055c
 8007fb0:	08023614 	.word	0x08023614
 8007fb4:	20000578 	.word	0x20000578
 8007fb8:	2000057c 	.word	0x2000057c
 8007fbc:	08023624 	.word	0x08023624
 8007fc0:	20000598 	.word	0x20000598
 8007fc4:	2000059c 	.word	0x2000059c
 8007fc8:	08023630 	.word	0x08023630
 8007fcc:	200005b8 	.word	0x200005b8
 8007fd0:	200005c4 	.word	0x200005c4
 8007fd4:	08023640 	.word	0x08023640
 8007fd8:	08023650 	.word	0x08023650
 8007fdc:	200005e0 	.word	0x200005e0
 8007fe0:	200005e4 	.word	0x200005e4
 8007fe4:	08023668 	.word	0x08023668
 8007fe8:	20000600 	.word	0x20000600
 8007fec:	20000604 	.word	0x20000604
 8007ff0:	08023680 	.word	0x08023680
 8007ff4:	20000620 	.word	0x20000620
 8007ff8:	20000624 	.word	0x20000624
 8007ffc:	0802369c 	.word	0x0802369c
 8008000:	20000640 	.word	0x20000640
 8008004:	20000644 	.word	0x20000644
 8008008:	080236b0 	.word	0x080236b0
 800800c:	20000660 	.word	0x20000660
 8008010:	20000664 	.word	0x20000664
 8008014:	080236cc 	.word	0x080236cc
 8008018:	20000680 	.word	0x20000680
 800801c:	20000684 	.word	0x20000684
 8008020:	080236e0 	.word	0x080236e0
 8008024:	200006a0 	.word	0x200006a0
 8008028:	200006a4 	.word	0x200006a4
 800802c:	080236fc 	.word	0x080236fc
 8008030:	200006c0 	.word	0x200006c0
 8008034:	200006c4 	.word	0x200006c4
 8008038:	08023714 	.word	0x08023714
 800803c:	200006e0 	.word	0x200006e0
 8008040:	200006e4 	.word	0x200006e4
 8008044:	08023728 	.word	0x08023728
 8008048:	20000700 	.word	0x20000700
 800804c:	20000704 	.word	0x20000704
 8008050:	08023748 	.word	0x08023748
 8008054:	20000720 	.word	0x20000720
 8008058:	20000724 	.word	0x20000724
 800805c:	08023760 	.word	0x08023760
 8008060:	20000740 	.word	0x20000740
 8008064:	20000744 	.word	0x20000744
 8008068:	08023778 	.word	0x08023778
 800806c:	20000760 	.word	0x20000760
 8008070:	20000764 	.word	0x20000764
 8008074:	0802378c 	.word	0x0802378c
 8008078:	20000780 	.word	0x20000780
 800807c:	20000784 	.word	0x20000784
 8008080:	080237a8 	.word	0x080237a8
 8008084:	4a65      	ldr	r2, [pc, #404]	; (800821c <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8008086:	4966      	ldr	r1, [pc, #408]	; (8008220 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 8008088:	4866      	ldr	r0, [pc, #408]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0x564>)
 800808a:	f00c f8c7 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 800808e:	4866      	ldr	r0, [pc, #408]	; (8008228 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 8008090:	f7fe fd16 	bl	8006ac0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 8008094:	f240 2357 	movw	r3, #599	; 0x257
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	4b64      	ldr	r3, [pc, #400]	; (800822c <_Z41__static_initialization_and_destruction_0ii+0x56c>)
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	4b64      	ldr	r3, [pc, #400]	; (8008230 <_Z41__static_initialization_and_destruction_0ii+0x570>)
 80080a0:	4a5e      	ldr	r2, [pc, #376]	; (800821c <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 80080a2:	4961      	ldr	r1, [pc, #388]	; (8008228 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 80080a4:	4863      	ldr	r0, [pc, #396]	; (8008234 <_Z41__static_initialization_and_destruction_0ii+0x574>)
 80080a6:	f00c f8b9 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80080aa:	4863      	ldr	r0, [pc, #396]	; (8008238 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 80080ac:	f7fe fdee 	bl	8006c8c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 80080b0:	f44f 731c 	mov.w	r3, #624	; 0x270
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	4b5d      	ldr	r3, [pc, #372]	; (800822c <_Z41__static_initialization_and_destruction_0ii+0x56c>)
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	4b60      	ldr	r3, [pc, #384]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 80080bc:	4a57      	ldr	r2, [pc, #348]	; (800821c <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 80080be:	495e      	ldr	r1, [pc, #376]	; (8008238 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 80080c0:	485f      	ldr	r0, [pc, #380]	; (8008240 <_Z41__static_initialization_and_destruction_0ii+0x580>)
 80080c2:	f00c f8ab 	bl	801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f040 80a2 	bne.w	8008212 <_Z41__static_initialization_and_destruction_0ii+0x552>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080d4:	4293      	cmp	r3, r2
 80080d6:	f040 809c 	bne.w	8008212 <_Z41__static_initialization_and_destruction_0ii+0x552>
 80080da:	4859      	ldr	r0, [pc, #356]	; (8008240 <_Z41__static_initialization_and_destruction_0ii+0x580>)
 80080dc:	f00c f8c8 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80080e0:	4855      	ldr	r0, [pc, #340]	; (8008238 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 80080e2:	f7fe ff05 	bl	8006ef0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80080e6:	4853      	ldr	r0, [pc, #332]	; (8008234 <_Z41__static_initialization_and_destruction_0ii+0x574>)
 80080e8:	f00c f8c2 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80080ec:	484e      	ldr	r0, [pc, #312]	; (8008228 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 80080ee:	f7fe ff43 	bl	8006f78 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80080f2:	484c      	ldr	r0, [pc, #304]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0x564>)
 80080f4:	f00c f8bc 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80080f8:	4849      	ldr	r0, [pc, #292]	; (8008220 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 80080fa:	f7fe ff81 	bl	8007000 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80080fe:	4851      	ldr	r0, [pc, #324]	; (8008244 <_Z41__static_initialization_and_destruction_0ii+0x584>)
 8008100:	f00c f8b6 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008104:	4850      	ldr	r0, [pc, #320]	; (8008248 <_Z41__static_initialization_and_destruction_0ii+0x588>)
 8008106:	f7fe ffbf 	bl	8007088 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800810a:	4850      	ldr	r0, [pc, #320]	; (800824c <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800810c:	f00c f8b0 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008110:	484f      	ldr	r0, [pc, #316]	; (8008250 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 8008112:	f7fe fffd 	bl	8007110 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008116:	484f      	ldr	r0, [pc, #316]	; (8008254 <_Z41__static_initialization_and_destruction_0ii+0x594>)
 8008118:	f00c f8aa 	bl	8014270 <_ZN13TestInstallerD1Ev>
 800811c:	484e      	ldr	r0, [pc, #312]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 800811e:	f7ff f83b 	bl	8007198 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8008122:	484e      	ldr	r0, [pc, #312]	; (800825c <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 8008124:	f00c f8a4 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008128:	484d      	ldr	r0, [pc, #308]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 800812a:	f7ff f879 	bl	8007220 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800812e:	484d      	ldr	r0, [pc, #308]	; (8008264 <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 8008130:	f00c f89e 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008134:	484c      	ldr	r0, [pc, #304]	; (8008268 <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 8008136:	f7ff f8b7 	bl	80072a8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 800813a:	484c      	ldr	r0, [pc, #304]	; (800826c <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 800813c:	f00c f898 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008140:	484b      	ldr	r0, [pc, #300]	; (8008270 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 8008142:	f7ff f8f5 	bl	8007330 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8008146:	484b      	ldr	r0, [pc, #300]	; (8008274 <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 8008148:	f00c f892 	bl	8014270 <_ZN13TestInstallerD1Ev>
 800814c:	484a      	ldr	r0, [pc, #296]	; (8008278 <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 800814e:	f7ff f933 	bl	80073b8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8008152:	484a      	ldr	r0, [pc, #296]	; (800827c <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 8008154:	f00c f88c 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008158:	4849      	ldr	r0, [pc, #292]	; (8008280 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800815a:	f7ff f971 	bl	8007440 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800815e:	4849      	ldr	r0, [pc, #292]	; (8008284 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8008160:	f00c f886 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008164:	4848      	ldr	r0, [pc, #288]	; (8008288 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 8008166:	f7ff f9af 	bl	80074c8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800816a:	4848      	ldr	r0, [pc, #288]	; (800828c <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800816c:	f00c f880 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008170:	4847      	ldr	r0, [pc, #284]	; (8008290 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 8008172:	f7ff f9ed 	bl	8007550 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008176:	4847      	ldr	r0, [pc, #284]	; (8008294 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008178:	f00c f87a 	bl	8014270 <_ZN13TestInstallerD1Ev>
 800817c:	4846      	ldr	r0, [pc, #280]	; (8008298 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800817e:	f7ff fa2b 	bl	80075d8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008182:	4846      	ldr	r0, [pc, #280]	; (800829c <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8008184:	f00c f874 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008188:	4845      	ldr	r0, [pc, #276]	; (80082a0 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800818a:	f7ff fa69 	bl	8007660 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800818e:	4845      	ldr	r0, [pc, #276]	; (80082a4 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008190:	f00c f86e 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008194:	4844      	ldr	r0, [pc, #272]	; (80082a8 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 8008196:	f7ff faa7 	bl	80076e8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 800819a:	4844      	ldr	r0, [pc, #272]	; (80082ac <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800819c:	f00c f868 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80081a0:	4843      	ldr	r0, [pc, #268]	; (80082b0 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80081a2:	f7ff fae5 	bl	8007770 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 80081a6:	4843      	ldr	r0, [pc, #268]	; (80082b4 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80081a8:	f00c f862 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80081ac:	4842      	ldr	r0, [pc, #264]	; (80082b8 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80081ae:	f7ff fb23 	bl	80077f8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 80081b2:	4842      	ldr	r0, [pc, #264]	; (80082bc <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80081b4:	f00c f85c 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80081b8:	4841      	ldr	r0, [pc, #260]	; (80082c0 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 80081ba:	f7ff fb61 	bl	8007880 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80081be:	4841      	ldr	r0, [pc, #260]	; (80082c4 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80081c0:	f00c f856 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80081c4:	4840      	ldr	r0, [pc, #256]	; (80082c8 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80081c6:	f7ff fb9f 	bl	8007908 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80081ca:	4840      	ldr	r0, [pc, #256]	; (80082cc <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80081cc:	f00c f850 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80081d0:	483f      	ldr	r0, [pc, #252]	; (80082d0 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 80081d2:	f7ff fbdd 	bl	8007990 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80081d6:	483f      	ldr	r0, [pc, #252]	; (80082d4 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80081d8:	f00c f84a 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80081dc:	483e      	ldr	r0, [pc, #248]	; (80082d8 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 80081de:	f7ff fc1b 	bl	8007a18 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 80081e2:	483e      	ldr	r0, [pc, #248]	; (80082dc <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80081e4:	f00c f844 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80081e8:	483d      	ldr	r0, [pc, #244]	; (80082e0 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 80081ea:	f7ff fc59 	bl	8007aa0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80081ee:	483d      	ldr	r0, [pc, #244]	; (80082e4 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 80081f0:	f00c f83e 	bl	8014270 <_ZN13TestInstallerD1Ev>
 80081f4:	483c      	ldr	r0, [pc, #240]	; (80082e8 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 80081f6:	f7ff fc97 	bl	8007b28 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 80081fa:	483c      	ldr	r0, [pc, #240]	; (80082ec <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 80081fc:	f00c f838 	bl	8014270 <_ZN13TestInstallerD1Ev>
 8008200:	483b      	ldr	r0, [pc, #236]	; (80082f0 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8008202:	f7ff fcd5 	bl	8007bb0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8008206:	483b      	ldr	r0, [pc, #236]	; (80082f4 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 8008208:	f00c f832 	bl	8014270 <_ZN13TestInstallerD1Ev>
 800820c:	483a      	ldr	r0, [pc, #232]	; (80082f8 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 800820e:	f7ff fd13 	bl	8007c38 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	08023650 	.word	0x08023650
 8008220:	20000784 	.word	0x20000784
 8008224:	200007a0 	.word	0x200007a0
 8008228:	200007a4 	.word	0x200007a4
 800822c:	08022ea4 	.word	0x08022ea4
 8008230:	080237c0 	.word	0x080237c0
 8008234:	200007c0 	.word	0x200007c0
 8008238:	200007c4 	.word	0x200007c4
 800823c:	080237d4 	.word	0x080237d4
 8008240:	200007e0 	.word	0x200007e0
 8008244:	20000780 	.word	0x20000780
 8008248:	20000764 	.word	0x20000764
 800824c:	20000760 	.word	0x20000760
 8008250:	20000744 	.word	0x20000744
 8008254:	20000740 	.word	0x20000740
 8008258:	20000724 	.word	0x20000724
 800825c:	20000720 	.word	0x20000720
 8008260:	20000704 	.word	0x20000704
 8008264:	20000700 	.word	0x20000700
 8008268:	200006e4 	.word	0x200006e4
 800826c:	200006e0 	.word	0x200006e0
 8008270:	200006c4 	.word	0x200006c4
 8008274:	200006c0 	.word	0x200006c0
 8008278:	200006a4 	.word	0x200006a4
 800827c:	200006a0 	.word	0x200006a0
 8008280:	20000684 	.word	0x20000684
 8008284:	20000680 	.word	0x20000680
 8008288:	20000664 	.word	0x20000664
 800828c:	20000660 	.word	0x20000660
 8008290:	20000644 	.word	0x20000644
 8008294:	20000640 	.word	0x20000640
 8008298:	20000624 	.word	0x20000624
 800829c:	20000620 	.word	0x20000620
 80082a0:	20000604 	.word	0x20000604
 80082a4:	20000600 	.word	0x20000600
 80082a8:	200005e4 	.word	0x200005e4
 80082ac:	200005e0 	.word	0x200005e0
 80082b0:	200005c4 	.word	0x200005c4
 80082b4:	200005b8 	.word	0x200005b8
 80082b8:	2000059c 	.word	0x2000059c
 80082bc:	20000598 	.word	0x20000598
 80082c0:	2000057c 	.word	0x2000057c
 80082c4:	20000578 	.word	0x20000578
 80082c8:	2000055c 	.word	0x2000055c
 80082cc:	20000558 	.word	0x20000558
 80082d0:	2000053c 	.word	0x2000053c
 80082d4:	20000538 	.word	0x20000538
 80082d8:	2000051c 	.word	0x2000051c
 80082dc:	20000518 	.word	0x20000518
 80082e0:	200004fc 	.word	0x200004fc
 80082e4:	200004f8 	.word	0x200004f8
 80082e8:	200004dc 	.word	0x200004dc
 80082ec:	200004d8 	.word	0x200004d8
 80082f0:	200004bc 	.word	0x200004bc
 80082f4:	200004b8 	.word	0x200004b8
 80082f8:	2000049c 	.word	0x2000049c

080082fc <_GLOBAL__sub_I_rx_buffer>:
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
 8008300:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008304:	2001      	movs	r0, #1
 8008306:	f7ff fcdb 	bl	8007cc0 <_Z41__static_initialization_and_destruction_0ii>
 800830a:	bd80      	pop	{r7, pc}

0800830c <_GLOBAL__sub_D_rx_buffer>:
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
 8008310:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008314:	2000      	movs	r0, #0
 8008316:	f7ff fcd3 	bl	8007cc0 <_Z41__static_initialization_and_destruction_0ii>
 800831a:	bd80      	pop	{r7, pc}

0800831c <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
    }
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	69db      	ldr	r3, [r3, #28]
    }
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	695b      	ldr	r3, [r3, #20]
    }
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff ffed 	bl	800834c <_ZNK10TestResult15getFailureCountEv>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <_ZNK10TestResult9isFailureEv+0x2a>
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff ffcf 	bl	800831c <_ZNK10TestResult11getRunCountEv>
 800837e:	4604      	mov	r4, r0
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff ffd7 	bl	8008334 <_ZNK10TestResult15getIgnoredCountEv>
 8008386:	4603      	mov	r3, r0
 8008388:	4423      	add	r3, r4
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <_ZNK10TestResult9isFailureEv+0x2e>
 800838e:	2301      	movs	r3, #1
 8008390:	e000      	b.n	8008394 <_ZNK10TestResult9isFailureEv+0x30>
 8008392:	2300      	movs	r3, #0
    }
 8008394:	4618      	mov	r0, r3
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	bd90      	pop	{r4, r7, pc}

0800839c <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
    {
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f007 fde6 	bl	800ff78 <_ZN10TestOutputC1Ev>
 80083ac:	4a03      	ldr	r2, [pc, #12]	; (80083bc <_ZN17ConsoleTestOutputC1Ev+0x20>)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	601a      	str	r2, [r3, #0]
    }
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	08027c44 	.word	0x08027c44

080083c0 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
    {
 80083c8:	4a05      	ldr	r2, [pc, #20]	; (80083e0 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f007 fdef 	bl	800ffb4 <_ZN10TestOutputD1Ev>
    }
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	08027c44 	.word	0x08027c44

080083e4 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
    }
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff ffe7 	bl	80083c0 <_ZN17ConsoleTestOutputD1Ev>
 80083f2:	2110      	movs	r1, #16
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 fce7 	bl	8009dc8 <_ZdlPvj>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8008404:	b5b0      	push	{r4, r5, r7, lr}
 8008406:	b098      	sub	sp, #96	; 0x60
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
    int result = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8008412:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff ffc0 	bl	800839c <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800841c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008420:	4935      	ldr	r1, [pc, #212]	; (80084f8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008422:	4618      	mov	r0, r3
 8008424:	f004 f87f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8008428:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800842c:	f107 0318 	add.w	r3, r7, #24
 8008430:	2200      	movs	r2, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f001 ff6a 	bl	800a30c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8008438:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800843c:	4618      	mov	r0, r3
 800843e:	f004 fc2a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8008442:	f107 0318 	add.w	r3, r7, #24
 8008446:	2101      	movs	r1, #1
 8008448:	4618      	mov	r0, r3
 800844a:	f001 ff2f 	bl	800a2ac <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 800844e:	f009 fb21 	bl	8011a94 <_ZN12TestRegistry18getCurrentRegistryEv>
 8008452:	4603      	mov	r3, r0
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	3234      	adds	r2, #52	; 0x34
 8008458:	6812      	ldr	r2, [r2, #0]
 800845a:	f107 0118 	add.w	r1, r7, #24
 800845e:	4618      	mov	r0, r3
 8008460:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8008462:	f009 fb17 	bl	8011a94 <_ZN12TestRegistry18getCurrentRegistryEv>
 8008466:	4603      	mov	r3, r0
 8008468:	f107 0008 	add.w	r0, r7, #8
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	f000 f844 	bl	80084fc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8008474:	f107 0308 	add.w	r3, r7, #8
 8008478:	4618      	mov	r0, r3
 800847a:	f000 f899 	bl	80085b0 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 800847e:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8008480:	f107 0308 	add.w	r3, r7, #8
 8008484:	4618      	mov	r0, r3
 8008486:	f000 f863 	bl	8008550 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 800848a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10c      	bne.n	80084aa <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8008490:	f107 0318 	add.w	r3, r7, #24
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f002 f83a 	bl	800a510 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 800849c:	4602      	mov	r2, r0
 800849e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084a2:	4611      	mov	r1, r2
 80084a4:	4618      	mov	r0, r3
 80084a6:	f007 fe27 	bl	80100f8 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 80084aa:	f009 faf3 	bl	8011a94 <_ZN12TestRegistry18getCurrentRegistryEv>
 80084ae:	4604      	mov	r4, r0
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	3344      	adds	r3, #68	; 0x44
 80084b4:	681d      	ldr	r5, [r3, #0]
 80084b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80084ba:	490f      	ldr	r1, [pc, #60]	; (80084f8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80084bc:	4618      	mov	r0, r3
 80084be:	f004 f832 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80084c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80084c6:	4619      	mov	r1, r3
 80084c8:	4620      	mov	r0, r4
 80084ca:	47a8      	blx	r5
 80084cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80084d0:	4618      	mov	r0, r3
 80084d2:	f004 fbe0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return result;
 80084d6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 80084d8:	f107 0318 	add.w	r3, r7, #24
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 ff4d 	bl	800a37c <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 80084e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff ff6a 	bl	80083c0 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 80084ec:	4623      	mov	r3, r4
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3760      	adds	r7, #96	; 0x60
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bdb0      	pop	{r4, r5, r7, pc}
 80084f6:	bf00      	nop
 80084f8:	080237ec 	.word	0x080237ec

080084fc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 80084fc:	b590      	push	{r4, r7, lr}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800850a:	4a0f      	ldr	r2, [pc, #60]	; (8008548 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	605a      	str	r2, [r3, #4]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	609a      	str	r2, [r3, #8]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8008522:	2241      	movs	r2, #65	; 0x41
 8008524:	4909      	ldr	r1, [pc, #36]	; (800854c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8008526:	2038      	movs	r0, #56	; 0x38
 8008528:	f001 fc3a 	bl	8009da0 <_ZnwjPKci>
 800852c:	4604      	mov	r4, r0
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	4620      	mov	r0, r4
 8008534:	f00c f84a 	bl	80145cc <_ZN20CommandLineArgumentsC1EiPKPKc>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	609c      	str	r4, [r3, #8]
}
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	bd90      	pop	{r4, r7, pc}
 8008546:	bf00      	nop
 8008548:	080275d0 	.word	0x080275d0
 800854c:	08023800 	.word	0x08023800

08008550 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	4a0c      	ldr	r2, [pc, #48]	; (800858c <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d004      	beq.n	8008570 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	3204      	adds	r2, #4
 800856a:	6812      	ldr	r2, [r2, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	4790      	blx	r2
    delete output_;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	3204      	adds	r2, #4
 800857c:	6812      	ldr	r2, [r2, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	4790      	blx	r2
}
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	080275d0 	.word	0x080275d0

08008590 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
}
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff ffd9 	bl	8008550 <_ZN21CommandLineTestRunnerD1Ev>
 800859e:	2110      	movs	r1, #16
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 fc11 	bl	8009dc8 <_ZdlPvj>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4618      	mov	r0, r3
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 80085b0:	b5b0      	push	{r4, r5, r7, lr}
 80085b2:	b08c      	sub	sp, #48	; 0x30
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 80085b8:	2301      	movs	r3, #1
 80085ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80085bc:	f107 031c 	add.w	r3, r7, #28
 80085c0:	4929      	ldr	r1, [pc, #164]	; (8008668 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80085c2:	4618      	mov	r0, r3
 80085c4:	f003 ffaf 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80085c8:	f107 021c 	add.w	r2, r7, #28
 80085cc:	f107 0308 	add.w	r3, r7, #8
 80085d0:	4611      	mov	r1, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f008 fe1c 	bl	8011210 <_ZN16SetPointerPluginC1ERK12SimpleString>
 80085d8:	f107 031c 	add.w	r3, r7, #28
 80085dc:	4618      	mov	r0, r3
 80085de:	f004 fb5a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3334      	adds	r3, #52	; 0x34
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f107 0108 	add.w	r1, r7, #8
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	333c      	adds	r3, #60	; 0x3c
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4610      	mov	r0, r2
 8008608:	4798      	blx	r3
 800860a:	4603      	mov	r3, r0
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fa3e 	bl	8008a90 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f8ac 	bl	8008778 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8008620:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68dd      	ldr	r5, [r3, #12]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3344      	adds	r3, #68	; 0x44
 800862e:	681c      	ldr	r4, [r3, #0]
 8008630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008634:	490c      	ldr	r1, [pc, #48]	; (8008668 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8008636:	4618      	mov	r0, r3
 8008638:	f003 ff75 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800863c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008640:	4619      	mov	r1, r3
 8008642:	4628      	mov	r0, r5
 8008644:	47a0      	blx	r4
 8008646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800864a:	4618      	mov	r0, r3
 800864c:	f004 fb23 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return testResult;
 8008650:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8008652:	f107 0308 	add.w	r3, r7, #8
 8008656:	4618      	mov	r0, r3
 8008658:	f000 faaa 	bl	8008bb0 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 800865c:	4623      	mov	r3, r4
}
 800865e:	4618      	mov	r0, r3
 8008660:	3730      	adds	r7, #48	; 0x30
 8008662:	46bd      	mov	sp, r7
 8008664:	bdb0      	pop	{r4, r5, r7, pc}
 8008666:	bf00      	nop
 8008668:	08023824 	.word	0x08023824

0800866c <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 800866c:	b5b0      	push	{r4, r5, r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68dd      	ldr	r5, [r3, #12]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3330      	adds	r3, #48	; 0x30
 8008680:	681c      	ldr	r4, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	4618      	mov	r0, r3
 8008688:	f00c fce0 	bl	801504c <_ZNK20CommandLineArguments15getGroupFiltersEv>
 800868c:	4603      	mov	r3, r0
 800868e:	4619      	mov	r1, r3
 8008690:	4628      	mov	r0, r5
 8008692:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68dd      	ldr	r5, [r3, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	332c      	adds	r3, #44	; 0x2c
 80086a0:	681c      	ldr	r4, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f00c fcdc 	bl	8015064 <_ZNK20CommandLineArguments14getNameFiltersEv>
 80086ac:	4603      	mov	r3, r0
 80086ae:	4619      	mov	r1, r3
 80086b0:	4628      	mov	r0, r5
 80086b2:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f00c fc2b 	bl	8014f14 <_ZNK20CommandLineArguments9isVerboseEv>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d009      	beq.n	80086d8 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3320      	adds	r3, #32
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2101      	movs	r1, #1
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	4618      	mov	r0, r3
 80086de:	f00c fc25 	bl	8014f2c <_ZNK20CommandLineArguments13isVeryVerboseEv>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d009      	beq.n	80086fc <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3320      	adds	r3, #32
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2102      	movs	r1, #2
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	4618      	mov	r0, r3
 8008702:	f00c fc1f 	bl	8014f44 <_ZNK20CommandLineArguments7isColorEv>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d008      	beq.n	800871e <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3324      	adds	r3, #36	; 0x24
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4610      	mov	r0, r2
 800871c:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	4618      	mov	r0, r3
 8008724:	f00c fc4a 	bl	8014fbc <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d008      	beq.n	8008740 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3360      	adds	r3, #96	; 0x60
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	4618      	mov	r0, r3
 8008746:	f00c fc2d 	bl	8014fa4 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d004      	beq.n	800875a <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4618      	mov	r0, r3
 8008756:	f009 fa19 	bl	8011b8c <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	4618      	mov	r0, r3
 8008760:	f00c fc50 	bl	8015004 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 800876a:	f00b fadb 	bl	8013d24 <_ZN10UtestShell14setCrashOnFailEv>
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008778 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8008778:	b5b0      	push	{r4, r5, r7, lr}
 800877a:	b094      	sub	sp, #80	; 0x50
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff ff73 	bl	800866c <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	4618      	mov	r0, r3
 8008798:	f00c fc1c 	bl	8014fd4 <_ZNK20CommandLineArguments14getRepeatCountEv>
 800879c:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f00c fbda 	bl	8014f5c <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d019      	beq.n	80087e2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	f107 0308 	add.w	r3, r7, #8
 80087b6:	4611      	mov	r1, r2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f009 fbaf 	bl	8011f1c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3320      	adds	r3, #32
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f107 0108 	add.w	r1, r7, #8
 80087d0:	4610      	mov	r0, r2
 80087d2:	4798      	blx	r3
        return 0;
 80087d4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80087d6:	f107 0308 	add.w	r3, r7, #8
 80087da:	4618      	mov	r0, r3
 80087dc:	f009 fbd6 	bl	8011f8c <_ZN10TestResultD1Ev>
 80087e0:	e0e1      	b.n	80089a6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f00c fbc4 	bl	8014f74 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d019      	beq.n	8008826 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	f107 0308 	add.w	r3, r7, #8
 80087fa:	4611      	mov	r1, r2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f009 fb8d 	bl	8011f1c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68da      	ldr	r2, [r3, #12]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3324      	adds	r3, #36	; 0x24
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f107 0108 	add.w	r1, r7, #8
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
        return 0;
 8008818:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800881a:	f107 0308 	add.w	r3, r7, #8
 800881e:	4618      	mov	r0, r3
 8008820:	f009 fbb4 	bl	8011f8c <_ZN10TestResultD1Ev>
 8008824:	e0bf      	b.n	80089a6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	4618      	mov	r0, r3
 800882c:	f00c fbae 	bl	8014f8c <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d019      	beq.n	800886a <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	f107 0308 	add.w	r3, r7, #8
 800883e:	4611      	mov	r1, r2
 8008840:	4618      	mov	r0, r3
 8008842:	f009 fb6b 	bl	8011f1c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3328      	adds	r3, #40	; 0x28
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f107 0108 	add.w	r1, r7, #8
 8008858:	4610      	mov	r0, r2
 800885a:	4798      	blx	r3
        return 0;
 800885c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800885e:	f107 0308 	add.w	r3, r7, #8
 8008862:	4618      	mov	r0, r3
 8008864:	f009 fb92 	bl	8011f8c <_ZN10TestResultD1Ev>
 8008868:	e09d      	b.n	80089a6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	4618      	mov	r0, r3
 8008870:	f00c fbbc 	bl	8014fec <_ZNK20CommandLineArguments11isReversingEv>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d008      	beq.n	800888c <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	331c      	adds	r3, #28
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3

    if (arguments_->isShuffling())
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	4618      	mov	r0, r3
 8008892:	f00c fbc3 	bl	801501c <_ZNK20CommandLineArguments11isShufflingEv>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d023      	beq.n	80088e4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	332c      	adds	r3, #44	; 0x2c
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4941      	ldr	r1, [pc, #260]	; (80089b0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 80088ac:	4610      	mov	r0, r2
 80088ae:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685d      	ldr	r5, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3334      	adds	r3, #52	; 0x34
 80088bc:	681c      	ldr	r4, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f00c fbb6 	bl	8015034 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80088c8:	4603      	mov	r3, r0
 80088ca:	4619      	mov	r1, r3
 80088cc:	4628      	mov	r0, r5
 80088ce:	47a0      	blx	r4
        output_->print("\n");
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	332c      	adds	r3, #44	; 0x2c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4935      	ldr	r1, [pc, #212]	; (80089b4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 80088e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e6:	1c5a      	adds	r2, r3, #1
 80088e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80088ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088ec:	429a      	cmp	r2, r3
 80088ee:	bf8c      	ite	hi
 80088f0:	2301      	movhi	r3, #1
 80088f2:	2300      	movls	r3, #0
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d04e      	beq.n	8008998 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	4618      	mov	r0, r3
 8008900:	f00c fb8c 	bl	801501c <_ZNK20CommandLineArguments11isShufflingEv>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00f      	beq.n	800892a <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68dd      	ldr	r5, [r3, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3318      	adds	r3, #24
 8008916:	681c      	ldr	r4, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	4618      	mov	r0, r3
 800891e:	f00c fb89 	bl	8015034 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8008922:	4603      	mov	r3, r0
 8008924:	4619      	mov	r1, r3
 8008926:	4628      	mov	r0, r5
 8008928:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6858      	ldr	r0, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3340      	adds	r3, #64	; 0x40
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800893a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800893c:	4798      	blx	r3
        TestResult tr(*output_);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	f107 0308 	add.w	r3, r7, #8
 8008946:	4611      	mov	r1, r2
 8008948:	4618      	mov	r0, r3
 800894a:	f009 fae7 	bl	8011f1c <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3314      	adds	r3, #20
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f107 0108 	add.w	r1, r7, #8
 8008960:	4610      	mov	r0, r2
 8008962:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8008964:	f107 0308 	add.w	r3, r7, #8
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff fcef 	bl	800834c <_ZNK10TestResult15getFailureCountEv>
 800896e:	4602      	mov	r2, r0
 8008970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008972:	4413      	add	r3, r2
 8008974:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8008976:	f107 0308 	add.w	r3, r7, #8
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff fcf2 	bl	8008364 <_ZNK10TestResult9isFailureEv>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8008986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008988:	3301      	adds	r3, #1
 800898a:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 800898c:	f107 0308 	add.w	r3, r7, #8
 8008990:	4618      	mov	r0, r3
 8008992:	f009 fafb 	bl	8011f8c <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8008996:	e7a5      	b.n	80088e4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8008998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800899e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80089a0:	e000      	b.n	80089a4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 80089a2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80089a4:	bf00      	nop
 80089a6:	4623      	mov	r3, r4
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3750      	adds	r7, #80	; 0x50
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bdb0      	pop	{r4, r5, r7, pc}
 80089b0:	08023838 	.word	0x08023838
 80089b4:	08023864 	.word	0x08023864

080089b8 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 80089b8:	b590      	push	{r4, r7, lr}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 80089c0:	229d      	movs	r2, #157	; 0x9d
 80089c2:	4906      	ldr	r1, [pc, #24]	; (80089dc <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 80089c4:	201c      	movs	r0, #28
 80089c6:	f001 f9eb 	bl	8009da0 <_ZnwjPKci>
 80089ca:	4604      	mov	r4, r0
 80089cc:	4620      	mov	r0, r4
 80089ce:	f005 f955 	bl	800dc7c <_ZN18TeamCityTestOutputC1Ev>
 80089d2:	4623      	mov	r3, r4
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd90      	pop	{r4, r7, pc}
 80089dc:	08023800 	.word	0x08023800

080089e0 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 80089e0:	b590      	push	{r4, r7, lr}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 80089ea:	22a2      	movs	r2, #162	; 0xa2
 80089ec:	490a      	ldr	r1, [pc, #40]	; (8008a18 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 80089ee:	2014      	movs	r0, #20
 80089f0:	f001 f9d6 	bl	8009da0 <_ZnwjPKci>
 80089f4:	4604      	mov	r4, r0
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 f980 	bl	8008cfc <_ZN15JUnitTestOutputC1Ev>
 80089fc:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 fbb2 	bl	8009170 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd90      	pop	{r4, r7, pc}
 8008a16:	bf00      	nop
 8008a18:	08023800 	.word	0x08023800

08008a1c <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8008a1c:	b590      	push	{r4, r7, lr}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8008a24:	22ab      	movs	r2, #171	; 0xab
 8008a26:	4906      	ldr	r1, [pc, #24]	; (8008a40 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8008a28:	2010      	movs	r0, #16
 8008a2a:	f001 f9b9 	bl	8009da0 <_ZnwjPKci>
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4620      	mov	r0, r4
 8008a32:	f7ff fcb3 	bl	800839c <_ZN17ConsoleTestOutputC1Ev>
 8008a36:	4623      	mov	r3, r4
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd90      	pop	{r4, r7, pc}
 8008a40:	08023800 	.word	0x08023800

08008a44 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8008a44:	b590      	push	{r4, r7, lr}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8008a50:	22b0      	movs	r2, #176	; 0xb0
 8008a52:	490e      	ldr	r1, [pc, #56]	; (8008a8c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8008a54:	2018      	movs	r0, #24
 8008a56:	f001 f9a3 	bl	8009da0 <_ZnwjPKci>
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f007 ff83 	bl	8010968 <_ZN19CompositeTestOutputC1Ev>
 8008a62:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	335c      	adds	r3, #92	; 0x5c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	6978      	ldr	r0, [r7, #20]
 8008a70:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3360      	adds	r3, #96	; 0x60
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	6978      	ldr	r0, [r7, #20]
 8008a7e:	4798      	blx	r3
  return composite;
 8008a80:	697b      	ldr	r3, [r7, #20]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd90      	pop	{r4, r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08023800 	.word	0x08023800

08008a90 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8008a90:	b5b0      	push	{r4, r5, r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f00b fe4f 	bl	8014744 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f083 0301 	eor.w	r3, r3, #1
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d029      	beq.n	8008b06 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3310      	adds	r3, #16
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	4798      	blx	r3
 8008abe:	4602      	mov	r2, r0
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685d      	ldr	r5, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	332c      	adds	r3, #44	; 0x2c
 8008ad0:	681c      	ldr	r4, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f00c fa10 	bl	8014efc <_ZNK20CommandLineArguments8needHelpEv>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d006      	beq.n	8008af0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f00c f9fa 	bl	8014ee0 <_ZNK20CommandLineArguments4helpEv>
 8008aec:	4603      	mov	r3, r0
 8008aee:	e005      	b.n	8008afc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f00c f9e5 	bl	8014ec4 <_ZNK20CommandLineArguments5usageEv>
 8008afa:	4603      	mov	r3, r0
 8008afc:	4619      	mov	r1, r3
 8008afe:	4628      	mov	r0, r5
 8008b00:	47a0      	blx	r4
    return false;
 8008b02:	2300      	movs	r3, #0
 8008b04:	e050      	b.n	8008ba8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f00d f84c 	bl	8015ba8 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d02c      	beq.n	8008b70 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	330c      	adds	r3, #12
 8008b1c:	681c      	ldr	r4, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f00d f864 	bl	8015bf0 <_ZNK20CommandLineArguments14getPackageNameEv>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	47a0      	blx	r4
 8008b30:	4602      	mov	r2, r0
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f00c f9ea 	bl	8014f14 <_ZNK20CommandLineArguments9isVerboseEv>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d02f      	beq.n	8008ba6 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3314      	adds	r3, #20
 8008b4c:	681c      	ldr	r4, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685d      	ldr	r5, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3310      	adds	r3, #16
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
 8008b5e:	4603      	mov	r3, r0
 8008b60:	461a      	mov	r2, r3
 8008b62:	4629      	mov	r1, r5
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	47a0      	blx	r4
 8008b68:	4602      	mov	r2, r0
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	605a      	str	r2, [r3, #4]
 8008b6e:	e01a      	b.n	8008ba6 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f00d f829 	bl	8015bcc <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d009      	beq.n	8008b94 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3308      	adds	r3, #8
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	4798      	blx	r3
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	605a      	str	r2, [r3, #4]
 8008b92:	e008      	b.n	8008ba6 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3310      	adds	r3, #16
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	4798      	blx	r3
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	605a      	str	r2, [r3, #4]
  return true;
 8008ba6:	2301      	movs	r3, #1
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bdb0      	pop	{r4, r5, r7, pc}

08008bb0 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	4a05      	ldr	r2, [pc, #20]	; (8008bd0 <_ZN16SetPointerPluginD1Ev+0x20>)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f008 f9e7 	bl	8010f94 <_ZN10TestPluginD1Ev>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	08027d50 	.word	0x08027d50

08008bd4 <_ZN16SetPointerPluginD0Ev>:
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ffe7 	bl	8008bb0 <_ZN16SetPointerPluginD1Ev>
 8008be2:	2114      	movs	r1, #20
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 f8ef 	bl	8009dc8 <_ZdlPvj>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691b      	ldr	r3, [r3, #16]
    }
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4910      	ldr	r1, [pc, #64]	; (8008c58 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f003 fc84 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	609a      	str	r2, [r3, #8]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	60da      	str	r2, [r3, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	741a      	strb	r2, [r3, #16]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3314      	adds	r3, #20
 8008c34:	4908      	ldr	r1, [pc, #32]	; (8008c58 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8008c36:	4618      	mov	r0, r3
 8008c38:	f003 fc75 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	61da      	str	r2, [r3, #28]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	621a      	str	r2, [r3, #32]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	08023868 	.word	0x08023868

08008c5c <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	605a      	str	r2, [r3, #4]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	609a      	str	r2, [r3, #8]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	60da      	str	r2, [r3, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	611a      	str	r2, [r3, #16]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3314      	adds	r3, #20
 8008c86:	4907      	ldr	r1, [pc, #28]	; (8008ca4 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f003 fc4c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	61da      	str	r2, [r3, #28]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	621a      	str	r2, [r3, #32]
    {
    }
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	08023868 	.word	0x08023868

08008ca8 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3314      	adds	r3, #20
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f003 ffee 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff ffc4 	bl	8008c5c <_ZN20JUnitTestGroupResultC1Ev>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3328      	adds	r3, #40	; 0x28
 8008cd8:	4907      	ldr	r1, [pc, #28]	; (8008cf8 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f003 fc23 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3330      	adds	r3, #48	; 0x30
 8008ce4:	4904      	ldr	r1, [pc, #16]	; (8008cf8 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f003 fc1d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	08023868 	.word	0x08023868

08008cfc <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8008cfc:	b590      	push	{r4, r7, lr}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f007 f936 	bl	800ff78 <_ZN10TestOutputC1Ev>
 8008d0c:	4a09      	ldr	r2, [pc, #36]	; (8008d34 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	224d      	movs	r2, #77	; 0x4d
 8008d14:	4908      	ldr	r1, [pc, #32]	; (8008d38 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8008d16:	2038      	movs	r0, #56	; 0x38
 8008d18:	f001 f842 	bl	8009da0 <_ZnwjPKci>
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f7ff ffd0 	bl	8008cc4 <_ZN19JUnitTestOutputImplC1Ev>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	611c      	str	r4, [r3, #16]
{
}
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd90      	pop	{r4, r7, pc}
 8008d32:	bf00      	nop
 8008d34:	080275f0 	.word	0x080275f0
 8008d38:	0802386c 	.word	0x0802386c

08008d3c <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3330      	adds	r3, #48	; 0x30
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f003 ffa4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3328      	adds	r3, #40	; 0x28
 8008d52:	4618      	mov	r0, r3
 8008d54:	f003 ff9f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff ffa4 	bl	8008ca8 <_ZN20JUnitTestGroupResultD1Ev>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8008d6c:	b590      	push	{r4, r7, lr}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	4a0c      	ldr	r2, [pc, #48]	; (8008da8 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f838 	bl	8008df0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691c      	ldr	r4, [r3, #16]
 8008d84:	2c00      	cmp	r4, #0
 8008d86:	d006      	beq.n	8008d96 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7ff ffd7 	bl	8008d3c <_ZN19JUnitTestOutputImplD1Ev>
 8008d8e:	2138      	movs	r1, #56	; 0x38
 8008d90:	4620      	mov	r0, r4
 8008d92:	f001 f819 	bl	8009dc8 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f007 f90b 	bl	800ffb4 <_ZN10TestOutputD1Ev>
}
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd90      	pop	{r4, r7, pc}
 8008da8:	080275f0 	.word	0x080275f0

08008dac <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
}
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff ffd9 	bl	8008d6c <_ZN15JUnitTestOutputD1Ev>
 8008dba:	2114      	movs	r1, #20
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 f803 	bl	8009dc8 <_ZdlPvj>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3314      	adds	r3, #20
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f003 ff5c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f003 ff58 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8008df0:	b590      	push	{r4, r7, lr}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	2200      	movs	r2, #0
 8008e06:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	f103 0414 	add.w	r4, r3, #20
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	491d      	ldr	r1, [pc, #116]	; (8008e8c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8008e16:	4618      	mov	r0, r3
 8008e18:	f003 fb85 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8008e1c:	f107 0308 	add.w	r3, r7, #8
 8008e20:	4619      	mov	r1, r3
 8008e22:	4620      	mov	r0, r4
 8008e24:	f003 fbeb 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f003 ff32 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	617b      	str	r3, [r7, #20]
    while (cur) {
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d018      	beq.n	8008e72 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d004      	beq.n	8008e58 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	3204      	adds	r2, #4
 8008e52:	6812      	ldr	r2, [r2, #0]
 8008e54:	4618      	mov	r0, r3
 8008e56:	4790      	blx	r2
        delete cur;
 8008e58:	697c      	ldr	r4, [r7, #20]
 8008e5a:	2c00      	cmp	r4, #0
 8008e5c:	d006      	beq.n	8008e6c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f7ff ffb4 	bl	8008dcc <_ZN23JUnitTestCaseResultNodeD1Ev>
 8008e64:	2128      	movs	r1, #40	; 0x28
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 ffae 	bl	8009dc8 <_ZdlPvj>
        cur = tmp;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	617b      	str	r3, [r7, #20]
    while (cur) {
 8008e70:	e7e3      	b.n	8008e3a <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	2200      	movs	r2, #0
 8008e78:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	621a      	str	r2, [r3, #32]
}
 8008e82:	bf00      	nop
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd90      	pop	{r4, r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	08023868 	.word	0x08023868

08008e90 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8008eba:	b590      	push	{r4, r7, lr}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	6a1c      	ldr	r4, [r3, #32]
 8008eca:	6838      	ldr	r0, [r7, #0]
 8008ecc:	f009 f9c6 	bl	801225c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	6a1c      	ldr	r4, [r3, #32]
 8008eda:	6838      	ldr	r0, [r7, #0]
 8008edc:	f7ff fe8a 	bl	8008bf4 <_ZNK10TestResult13getCheckCountEv>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	6223      	str	r3, [r4, #32]
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd90      	pop	{r4, r7, pc}

08008eec <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8008f02:	b590      	push	{r4, r7, lr}
 8008f04:	b083      	sub	sp, #12
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691c      	ldr	r4, [r3, #16]
 8008f10:	6838      	ldr	r0, [r7, #0]
 8008f12:	f009 f9af 	bl	8012274 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8008f16:	4603      	mov	r3, r0
 8008f18:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3364      	adds	r3, #100	; 0x64
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	4798      	blx	r3
    resetTestGroupResult();
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff ff62 	bl	8008df0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd90      	pop	{r4, r7, pc}

08008f34 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8008f34:	b590      	push	{r4, r7, lr}
 8008f36:	b089      	sub	sp, #36	; 0x24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	3201      	adds	r2, #1
 8008f46:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	f103 0414 	add.w	r4, r3, #20
 8008f50:	f107 0308 	add.w	r3, r7, #8
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f009 fcef 	bl	801293a <_ZNK10UtestShell8getGroupEv>
 8008f5c:	f107 0308 	add.w	r3, r7, #8
 8008f60:	4619      	mov	r1, r3
 8008f62:	4620      	mov	r0, r4
 8008f64:	f003 fb4b 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 8008f68:	f107 0308 	add.w	r3, r7, #8
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f003 fe92 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8008f72:	4b3c      	ldr	r3, [pc, #240]	; (8009064 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4798      	blx	r3
 8008f78:	4602      	mov	r2, r0
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d110      	bne.n	8008fac <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8008f8a:	2288      	movs	r2, #136	; 0x88
 8008f8c:	4936      	ldr	r1, [pc, #216]	; (8009068 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8008f8e:	2028      	movs	r0, #40	; 0x28
 8008f90:	f000 ff06 	bl	8009da0 <_ZnwjPKci>
 8008f94:	4604      	mov	r4, r0
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7ff fe38 	bl	8008c0c <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8008fa0:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	6912      	ldr	r2, [r2, #16]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	61d3      	str	r3, [r2, #28]
 8008faa:	e013      	b.n	8008fd4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8008fac:	228b      	movs	r2, #139	; 0x8b
 8008fae:	492e      	ldr	r1, [pc, #184]	; (8009068 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8008fb0:	2028      	movs	r0, #40	; 0x28
 8008fb2:	f000 fef5 	bl	8009da0 <_ZnwjPKci>
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f7ff fe27 	bl	8008c0c <_ZN23JUnitTestCaseResultNodeC1Ev>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	6a1a      	ldr	r2, [r3, #32]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008fd2:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	461c      	mov	r4, r3
 8008fdc:	f107 0310 	add.w	r3, r7, #16
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f009 fc9a 	bl	801291c <_ZNK10UtestShell7getNameEv>
 8008fe8:	f107 0310 	add.w	r3, r7, #16
 8008fec:	4619      	mov	r1, r3
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f003 fb05 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 8008ff4:	f107 0310 	add.w	r3, r7, #16
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f003 fe4c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	6a1b      	ldr	r3, [r3, #32]
 8009004:	f103 0414 	add.w	r4, r3, #20
 8009008:	f107 0318 	add.w	r3, r7, #24
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f009 fd55 	bl	8012abe <_ZNK10UtestShell7getFileEv>
 8009014:	f107 0318 	add.w	r3, r7, #24
 8009018:	4619      	mov	r1, r3
 800901a:	4620      	mov	r0, r4
 800901c:	f003 faef 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 8009020:	f107 0318 	add.w	r3, r7, #24
 8009024:	4618      	mov	r0, r3
 8009026:	f003 fe36 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	6a1c      	ldr	r4, [r3, #32]
 8009030:	6838      	ldr	r0, [r7, #0]
 8009032:	f009 fd53 	bl	8012adc <_ZNK10UtestShell13getLineNumberEv>
 8009036:	4603      	mov	r3, r0
 8009038:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3318      	adds	r3, #24
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6838      	ldr	r0, [r7, #0]
 8009044:	4798      	blx	r3
 8009046:	4603      	mov	r3, r0
 8009048:	f083 0301 	eor.w	r3, r3, #1
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d004      	beq.n	800905c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	2201      	movs	r2, #1
 800905a:	741a      	strb	r2, [r3, #16]
    }
}
 800905c:	bf00      	nop
 800905e:	3724      	adds	r7, #36	; 0x24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd90      	pop	{r4, r7, pc}
 8009064:	200000a8 	.word	0x200000a8
 8009068:	0802386c 	.word	0x0802386c

0800906c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08a      	sub	sp, #40	; 0x28
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8009078:	f107 0310 	add.w	r3, r7, #16
 800907c:	4928      	ldr	r1, [pc, #160]	; (8009120 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800907e:	4618      	mov	r0, r3
 8009080:	f003 fa51 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	3328      	adds	r3, #40	; 0x28
 800908a:	4618      	mov	r0, r3
 800908c:	f003 fdf2 	bl	800cc74 <_ZNK12SimpleString7isEmptyEv>
 8009090:	4603      	mov	r3, r0
 8009092:	f083 0301 	eor.w	r3, r3, #1
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00f      	beq.n	80090bc <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80090a4:	f107 0310 	add.w	r3, r7, #16
 80090a8:	4611      	mov	r1, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f003 fe70 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 80090b0:	f107 0310 	add.w	r3, r7, #16
 80090b4:	491b      	ldr	r1, [pc, #108]	; (8009124 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 80090b6:	4618      	mov	r0, r3
 80090b8:	f003 fe7c 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 80090bc:	f107 0310 	add.w	r3, r7, #16
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f003 fe64 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3384      	adds	r3, #132	; 0x84
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f107 0018 	add.w	r0, r7, #24
 80090d4:	f107 0210 	add.w	r2, r7, #16
 80090d8:	68b9      	ldr	r1, [r7, #8]
 80090da:	4798      	blx	r3
 80090dc:	f107 0320 	add.w	r3, r7, #32
 80090e0:	4911      	ldr	r1, [pc, #68]	; (8009128 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 80090e2:	4618      	mov	r0, r3
 80090e4:	f003 fa1f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f107 0220 	add.w	r2, r7, #32
 80090ee:	f107 0118 	add.w	r1, r7, #24
 80090f2:	4618      	mov	r0, r3
 80090f4:	f003 fe31 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 80090f8:	f107 0320 	add.w	r3, r7, #32
 80090fc:	4618      	mov	r0, r3
 80090fe:	f003 fdca 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8009102:	f107 0318 	add.w	r3, r7, #24
 8009106:	4618      	mov	r0, r3
 8009108:	f003 fdc5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 800910c:	f107 0310 	add.w	r3, r7, #16
 8009110:	4618      	mov	r0, r3
 8009112:	f003 fdc0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8009116:	bf00      	nop
}
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	3728      	adds	r7, #40	; 0x28
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	08023888 	.word	0x08023888
 8009124:	08023894 	.word	0x08023894
 8009128:	08023898 	.word	0x08023898

0800912c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f003 fa47 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00a      	beq.n	8009162 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	225f      	movs	r2, #95	; 0x5f
 8009152:	4619      	mov	r1, r3
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f003 fbcc 	bl	800c8f2 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	3301      	adds	r3, #1
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	e7f0      	b.n	8009144 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8009162:	bf00      	nop
}
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	080238a0 	.word	0x080238a0

08009170 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d006      	beq.n	8009190 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	3328      	adds	r3, #40	; 0x28
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f003 fa37 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
    }
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8009198:	b590      	push	{r4, r7, lr}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3368      	adds	r3, #104	; 0x68
 80091a6:	681c      	ldr	r4, [r3, #0]
 80091a8:	f107 0308 	add.w	r3, r7, #8
 80091ac:	4908      	ldr	r1, [pc, #32]	; (80091d0 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 80091ae:	4618      	mov	r0, r3
 80091b0:	f003 f9b9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80091b4:	f107 0308 	add.w	r3, r7, #8
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	47a0      	blx	r4
 80091be:	f107 0308 	add.w	r3, r7, #8
 80091c2:	4618      	mov	r0, r3
 80091c4:	f003 fd67 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80091c8:	bf00      	nop
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd90      	pop	{r4, r7, pc}
 80091d0:	080238ac 	.word	0x080238ac

080091d4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 80091d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d8:	b08a      	sub	sp, #40	; 0x28
 80091da:	af04      	add	r7, sp, #16
 80091dc:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 80091e4:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 80091ea:	3314      	adds	r3, #20
 80091ec:	4618      	mov	r0, r3
 80091ee:	f003 fd25 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 80091f2:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 80091fa:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	4a23      	ldr	r2, [pc, #140]	; (8009290 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009204:	fba2 2303 	umull	r2, r3, r2, r3
 8009208:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800920a:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	691a      	ldr	r2, [r3, #16]
 8009212:	4b1f      	ldr	r3, [pc, #124]	; (8009290 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009214:	fba3 1302 	umull	r1, r3, r3, r2
 8009218:	099b      	lsrs	r3, r3, #6
 800921a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800921e:	fb01 f303 	mul.w	r3, r1, r3
 8009222:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	4b1b      	ldr	r3, [pc, #108]	; (8009294 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4798      	blx	r3
 800922c:	4603      	mov	r3, r0
 800922e:	f107 0008 	add.w	r0, r7, #8
 8009232:	9303      	str	r3, [sp, #12]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	9302      	str	r3, [sp, #8]
 8009238:	9601      	str	r6, [sp, #4]
 800923a:	9500      	str	r5, [sp, #0]
 800923c:	4623      	mov	r3, r4
 800923e:	4642      	mov	r2, r8
 8009240:	4915      	ldr	r1, [pc, #84]	; (8009298 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8009242:	f004 fa2f 	bl	800d6a4 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3368      	adds	r3, #104	; 0x68
 800924c:	681c      	ldr	r4, [r3, #0]
 800924e:	f107 0308 	add.w	r3, r7, #8
 8009252:	4618      	mov	r0, r3
 8009254:	f003 fcf2 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8009258:	4602      	mov	r2, r0
 800925a:	f107 0310 	add.w	r3, r7, #16
 800925e:	4611      	mov	r1, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f003 f960 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8009266:	f107 0310 	add.w	r3, r7, #16
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	47a0      	blx	r4
 8009270:	f107 0310 	add.w	r3, r7, #16
 8009274:	4618      	mov	r0, r3
 8009276:	f003 fd0e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800927a:	f107 0308 	add.w	r3, r7, #8
 800927e:	4618      	mov	r0, r3
 8009280:	f003 fd09 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8009284:	bf00      	nop
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928e:	bf00      	nop
 8009290:	10624dd3 	.word	0x10624dd3
 8009294:	200000ac 	.word	0x200000ac
 8009298:	080238d8 	.word	0x080238d8

0800929c <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 800929c:	b590      	push	{r4, r7, lr}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3368      	adds	r3, #104	; 0x68
 80092aa:	681c      	ldr	r4, [r3, #0]
 80092ac:	f107 0308 	add.w	r3, r7, #8
 80092b0:	4912      	ldr	r1, [pc, #72]	; (80092fc <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 80092b2:	4618      	mov	r0, r3
 80092b4:	f003 f937 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80092b8:	f107 0308 	add.w	r3, r7, #8
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	47a0      	blx	r4
 80092c2:	f107 0308 	add.w	r3, r7, #8
 80092c6:	4618      	mov	r0, r3
 80092c8:	f003 fce5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3368      	adds	r3, #104	; 0x68
 80092d2:	681c      	ldr	r4, [r3, #0]
 80092d4:	f107 0310 	add.w	r3, r7, #16
 80092d8:	4909      	ldr	r1, [pc, #36]	; (8009300 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 80092da:	4618      	mov	r0, r3
 80092dc:	f003 f923 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80092e0:	f107 0310 	add.w	r3, r7, #16
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	47a0      	blx	r4
 80092ea:	f107 0310 	add.w	r3, r7, #16
 80092ee:	4618      	mov	r0, r3
 80092f0:	f003 fcd1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80092f4:	bf00      	nop
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd90      	pop	{r4, r7, pc}
 80092fc:	08023948 	.word	0x08023948
 8009300:	08023958 	.word	0x08023958

08009304 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f003 fc93 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8009316:	4603      	mov	r3, r0
 8009318:	4619      	mov	r1, r3
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f003 f903 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8009320:	4a0e      	ldr	r2, [pc, #56]	; (800935c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8009322:	490f      	ldr	r1, [pc, #60]	; (8009360 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f003 fb13 	bl	800c950 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800932a:	4a0e      	ldr	r2, [pc, #56]	; (8009364 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 800932c:	490e      	ldr	r1, [pc, #56]	; (8009368 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f003 fb0e 	bl	800c950 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8009334:	4a0d      	ldr	r2, [pc, #52]	; (800936c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8009336:	490e      	ldr	r1, [pc, #56]	; (8009370 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f003 fb09 	bl	800c950 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 800933e:	4a0d      	ldr	r2, [pc, #52]	; (8009374 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8009340:	490d      	ldr	r1, [pc, #52]	; (8009378 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f003 fb04 	bl	800c950 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8009348:	4a0c      	ldr	r2, [pc, #48]	; (800937c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800934a:	490d      	ldr	r1, [pc, #52]	; (8009380 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f003 faff 	bl	800c950 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8009352:	bf00      	nop
}
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	08023968 	.word	0x08023968
 8009360:	08023970 	.word	0x08023970
 8009364:	08023974 	.word	0x08023974
 8009368:	0802397c 	.word	0x0802397c
 800936c:	08023980 	.word	0x08023980
 8009370:	08023988 	.word	0x08023988
 8009374:	0802398c 	.word	0x0802398c
 8009378:	08023994 	.word	0x08023994
 800937c:	08023998 	.word	0x08023998
 8009380:	080239a4 	.word	0x080239a4

08009384 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8009384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009388:	b096      	sub	sp, #88	; 0x58
 800938a:	af08      	add	r7, sp, #32
 800938c:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8009396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 80b2 	beq.w	8009502 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 80093a2:	3328      	adds	r3, #40	; 0x28
 80093a4:	4618      	mov	r0, r3
 80093a6:	f003 fc49 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 80093aa:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	3328      	adds	r3, #40	; 0x28
 80093b2:	4618      	mov	r0, r3
 80093b4:	f003 fc5e 	bl	800cc74 <_ZNK12SimpleString7isEmptyEv>
 80093b8:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 80093be:	4c53      	ldr	r4, [pc, #332]	; (800950c <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 80093c0:	e000      	b.n	80093c4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 80093c2:	4c53      	ldr	r4, [pc, #332]	; (8009510 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 80093c8:	3314      	adds	r3, #20
 80093ca:	4618      	mov	r0, r3
 80093cc:	f003 fc36 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 80093d0:	4605      	mov	r5, r0
 80093d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d4:	4618      	mov	r0, r3
 80093d6:	f003 fc31 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 80093da:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 80093dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093de:	6a1a      	ldr	r2, [r3, #32]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 80093e8:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 80093ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	4a49      	ldr	r2, [pc, #292]	; (8009514 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 80093f0:	fba2 2303 	umull	r2, r3, r2, r3
 80093f4:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 80093f6:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 80093f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	4b45      	ldr	r3, [pc, #276]	; (8009514 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 80093fe:	fba3 1302 	umull	r1, r3, r3, r2
 8009402:	099b      	lsrs	r3, r3, #6
 8009404:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800940e:	603b      	str	r3, [r7, #0]
 8009410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009412:	3314      	adds	r3, #20
 8009414:	4618      	mov	r0, r3
 8009416:	f003 fc11 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800941a:	4602      	mov	r2, r0
 800941c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	f107 0014 	add.w	r0, r7, #20
 8009424:	9306      	str	r3, [sp, #24]
 8009426:	9205      	str	r2, [sp, #20]
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	9204      	str	r2, [sp, #16]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	9203      	str	r2, [sp, #12]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	9302      	str	r3, [sp, #8]
 8009434:	9601      	str	r6, [sp, #4]
 8009436:	9500      	str	r5, [sp, #0]
 8009438:	4623      	mov	r3, r4
 800943a:	4642      	mov	r2, r8
 800943c:	4936      	ldr	r1, [pc, #216]	; (8009518 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 800943e:	f004 f931 	bl	800d6a4 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3368      	adds	r3, #104	; 0x68
 8009448:	681c      	ldr	r4, [r3, #0]
 800944a:	f107 0314 	add.w	r3, r7, #20
 800944e:	4618      	mov	r0, r3
 8009450:	f003 fbf4 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8009454:	4602      	mov	r2, r0
 8009456:	f107 031c 	add.w	r3, r7, #28
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f003 f862 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8009462:	f107 031c 	add.w	r3, r7, #28
 8009466:	4619      	mov	r1, r3
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	47a0      	blx	r4
 800946c:	f107 031c 	add.w	r3, r7, #28
 8009470:	4618      	mov	r0, r3
 8009472:	f003 fc10 	bl	800cc96 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800947c:	6a12      	ldr	r2, [r2, #32]
 800947e:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8009480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3388      	adds	r3, #136	; 0x88
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	4798      	blx	r3
 8009496:	e017      	b.n	80094c8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8009498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949a:	7c1b      	ldrb	r3, [r3, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d013      	beq.n	80094c8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3368      	adds	r3, #104	; 0x68
 80094a6:	681c      	ldr	r4, [r3, #0]
 80094a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ac:	491b      	ldr	r1, [pc, #108]	; (800951c <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 80094ae:	4618      	mov	r0, r3
 80094b0:	f003 f839 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80094b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094b8:	4619      	mov	r1, r3
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	47a0      	blx	r4
 80094be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094c2:	4618      	mov	r0, r3
 80094c4:	f003 fbe7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3368      	adds	r3, #104	; 0x68
 80094ce:	681c      	ldr	r4, [r3, #0]
 80094d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094d4:	4912      	ldr	r1, [pc, #72]	; (8009520 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 80094d6:	4618      	mov	r0, r3
 80094d8:	f003 f825 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80094dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094e0:	4619      	mov	r1, r3
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	47a0      	blx	r4
 80094e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094ea:	4618      	mov	r0, r3
 80094ec:	f003 fbd3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 80094f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 80094f6:	f107 0314 	add.w	r3, r7, #20
 80094fa:	4618      	mov	r0, r3
 80094fc:	f003 fbcb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    while (cur) {
 8009500:	e749      	b.n	8009396 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8009502:	bf00      	nop
 8009504:	3738      	adds	r7, #56	; 0x38
 8009506:	46bd      	mov	sp, r7
 8009508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950c:	08023868 	.word	0x08023868
 8009510:	080239a8 	.word	0x080239a8
 8009514:	10624dd3 	.word	0x10624dd3
 8009518:	080239ac 	.word	0x080239ac
 800951c:	08023a08 	.word	0x08023a08
 8009520:	08023a18 	.word	0x08023a18

08009524 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8009524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009526:	b091      	sub	sp, #68	; 0x44
 8009528:	af02      	add	r7, sp, #8
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	68d9      	ldr	r1, [r3, #12]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3308      	adds	r3, #8
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f107 0210 	add.w	r2, r7, #16
 8009540:	4610      	mov	r0, r2
 8009542:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009544:	f107 0310 	add.w	r3, r7, #16
 8009548:	4618      	mov	r0, r3
 800954a:	f003 fb77 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800954e:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3314      	adds	r3, #20
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4610      	mov	r0, r2
 8009560:	4798      	blx	r3
 8009562:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009564:	461e      	mov	r6, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3380      	adds	r3, #128	; 0x80
 800956c:	681c      	ldr	r4, [r3, #0]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	68d9      	ldr	r1, [r3, #12]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3318      	adds	r3, #24
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f107 0220 	add.w	r2, r7, #32
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	f107 0318 	add.w	r3, r7, #24
 8009588:	f107 0220 	add.w	r2, r7, #32
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	4618      	mov	r0, r3
 8009590:	47a0      	blx	r4
 8009592:	f107 0318 	add.w	r3, r7, #24
 8009596:	4618      	mov	r0, r3
 8009598:	f003 fb50 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800959c:	4603      	mov	r3, r0
 800959e:	f107 0008 	add.w	r0, r7, #8
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	4633      	mov	r3, r6
 80095a6:	462a      	mov	r2, r5
 80095a8:	4924      	ldr	r1, [pc, #144]	; (800963c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 80095aa:	f004 f87b 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 80095ae:	f107 0318 	add.w	r3, r7, #24
 80095b2:	4618      	mov	r0, r3
 80095b4:	f003 fb6f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80095b8:	f107 0320 	add.w	r3, r7, #32
 80095bc:	4618      	mov	r0, r3
 80095be:	f003 fb6a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 80095c2:	f107 0310 	add.w	r3, r7, #16
 80095c6:	4618      	mov	r0, r3
 80095c8:	f003 fb65 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3368      	adds	r3, #104	; 0x68
 80095d2:	681c      	ldr	r4, [r3, #0]
 80095d4:	f107 0308 	add.w	r3, r7, #8
 80095d8:	4618      	mov	r0, r3
 80095da:	f003 fb2f 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 80095de:	4602      	mov	r2, r0
 80095e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80095e4:	4611      	mov	r1, r2
 80095e6:	4618      	mov	r0, r3
 80095e8:	f002 ff9d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80095ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	47a0      	blx	r4
 80095f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80095fa:	4618      	mov	r0, r3
 80095fc:	f003 fb4b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3368      	adds	r3, #104	; 0x68
 8009606:	681c      	ldr	r4, [r3, #0]
 8009608:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800960c:	490c      	ldr	r1, [pc, #48]	; (8009640 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800960e:	4618      	mov	r0, r3
 8009610:	f002 ff89 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8009614:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	47a0      	blx	r4
 800961e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009622:	4618      	mov	r0, r3
 8009624:	f003 fb37 	bl	800cc96 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009628:	f107 0308 	add.w	r3, r7, #8
 800962c:	4618      	mov	r0, r3
 800962e:	f003 fb32 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8009632:	bf00      	nop
 8009634:	373c      	adds	r7, #60	; 0x3c
 8009636:	46bd      	mov	sp, r7
 8009638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800963a:	bf00      	nop
 800963c:	08023a28 	.word	0x08023a28
 8009640:	08023a64 	.word	0x08023a64

08009644 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8009644:	b590      	push	{r4, r7, lr}
 8009646:	b08d      	sub	sp, #52	; 0x34
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3368      	adds	r3, #104	; 0x68
 8009652:	681c      	ldr	r4, [r3, #0]
 8009654:	f107 0308 	add.w	r3, r7, #8
 8009658:	4933      	ldr	r1, [pc, #204]	; (8009728 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800965a:	4618      	mov	r0, r3
 800965c:	f002 ff63 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8009660:	f107 0308 	add.w	r3, r7, #8
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	47a0      	blx	r4
 800966a:	f107 0308 	add.w	r3, r7, #8
 800966e:	4618      	mov	r0, r3
 8009670:	f003 fb11 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3368      	adds	r3, #104	; 0x68
 800967a:	681c      	ldr	r4, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3380      	adds	r3, #128	; 0x80
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	6912      	ldr	r2, [r2, #16]
 8009688:	3230      	adds	r2, #48	; 0x30
 800968a:	f107 0010 	add.w	r0, r7, #16
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	4798      	blx	r3
 8009692:	f107 0310 	add.w	r3, r7, #16
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	47a0      	blx	r4
 800969c:	f107 0310 	add.w	r3, r7, #16
 80096a0:	4618      	mov	r0, r3
 80096a2:	f003 faf8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3368      	adds	r3, #104	; 0x68
 80096ac:	681c      	ldr	r4, [r3, #0]
 80096ae:	f107 0318 	add.w	r3, r7, #24
 80096b2:	491e      	ldr	r1, [pc, #120]	; (800972c <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 80096b4:	4618      	mov	r0, r3
 80096b6:	f002 ff36 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80096ba:	f107 0318 	add.w	r3, r7, #24
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	47a0      	blx	r4
 80096c4:	f107 0318 	add.w	r3, r7, #24
 80096c8:	4618      	mov	r0, r3
 80096ca:	f003 fae4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3368      	adds	r3, #104	; 0x68
 80096d4:	681c      	ldr	r4, [r3, #0]
 80096d6:	f107 0320 	add.w	r3, r7, #32
 80096da:	4915      	ldr	r1, [pc, #84]	; (8009730 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 80096dc:	4618      	mov	r0, r3
 80096de:	f002 ff22 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80096e2:	f107 0320 	add.w	r3, r7, #32
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	47a0      	blx	r4
 80096ec:	f107 0320 	add.w	r3, r7, #32
 80096f0:	4618      	mov	r0, r3
 80096f2:	f003 fad0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3368      	adds	r3, #104	; 0x68
 80096fc:	681c      	ldr	r4, [r3, #0]
 80096fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009702:	490c      	ldr	r1, [pc, #48]	; (8009734 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8009704:	4618      	mov	r0, r3
 8009706:	f002 ff0e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800970a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	47a0      	blx	r4
 8009714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009718:	4618      	mov	r0, r3
 800971a:	f003 fabc 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800971e:	bf00      	nop
 8009720:	3734      	adds	r7, #52	; 0x34
 8009722:	46bd      	mov	sp, r7
 8009724:	bd90      	pop	{r4, r7, pc}
 8009726:	bf00      	nop
 8009728:	08023a70 	.word	0x08023a70
 800972c:	08023a80 	.word	0x08023a80
 8009730:	08023a90 	.word	0x08023a90
 8009734:	08023aac 	.word	0x08023aac

08009738 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8009738:	b590      	push	{r4, r7, lr}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3360      	adds	r3, #96	; 0x60
 8009746:	681c      	ldr	r4, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	335c      	adds	r3, #92	; 0x5c
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6912      	ldr	r2, [r2, #16]
 8009754:	3214      	adds	r2, #20
 8009756:	f107 0008 	add.w	r0, r7, #8
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	4798      	blx	r3
 800975e:	f107 0308 	add.w	r3, r7, #8
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	47a0      	blx	r4
 8009768:	f107 0308 	add.w	r3, r7, #8
 800976c:	4618      	mov	r0, r3
 800976e:	f003 fa92 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3370      	adds	r3, #112	; 0x70
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	4798      	blx	r3
    writeTestSuiteSummary();
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3374      	adds	r3, #116	; 0x74
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
    writeProperties();
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3378      	adds	r3, #120	; 0x78
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	4798      	blx	r3
    writeTestCases();
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	337c      	adds	r3, #124	; 0x7c
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	4798      	blx	r3
    writeFileEnding();
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	338c      	adds	r3, #140	; 0x8c
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	4798      	blx	r3
    closeFile();
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	336c      	adds	r3, #108	; 0x6c
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	4798      	blx	r3
}
 80097ba:	bf00      	nop
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd90      	pop	{r4, r7, pc}

080097c2 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	3330      	adds	r3, #48	; 0x30
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f003 fae2 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
}
 8009802:	bf00      	nop
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8009838:	b590      	push	{r4, r7, lr}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d113      	bne.n	8009876 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	3201      	adds	r2, #1
 8009856:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8009858:	f240 1233 	movw	r2, #307	; 0x133
 800985c:	4908      	ldr	r1, [pc, #32]	; (8009880 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800985e:	2034      	movs	r0, #52	; 0x34
 8009860:	f000 fa9e 	bl	8009da0 <_ZnwjPKci>
 8009864:	4604      	mov	r4, r0
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	4620      	mov	r0, r4
 800986a:	f004 fd37 	bl	800e2dc <_ZN11TestFailureC1ERKS_>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	60dc      	str	r4, [r3, #12]
    }
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	bd90      	pop	{r4, r7, pc}
 800987e:	bf00      	nop
 8009880:	0802386c 	.word	0x0802386c

08009884 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8009884:	b5b0      	push	{r4, r5, r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800988e:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8009890:	681d      	ldr	r5, [r3, #0]
 8009892:	6838      	ldr	r0, [r7, #0]
 8009894:	f003 f9d2 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8009898:	4602      	mov	r2, r0
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691c      	ldr	r4, [r3, #16]
 800989e:	4905      	ldr	r1, [pc, #20]	; (80098b4 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 80098a0:	4610      	mov	r0, r2
 80098a2:	47a8      	blx	r5
 80098a4:	4603      	mov	r3, r0
 80098a6:	6263      	str	r3, [r4, #36]	; 0x24
}
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bdb0      	pop	{r4, r5, r7, pc}
 80098b0:	200000b4 	.word	0x200000b4
 80098b4:	08023abc 	.word	0x08023abc

080098b8 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 80098b8:	b590      	push	{r4, r7, lr}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 80098c2:	4b08      	ldr	r3, [pc, #32]	; (80098e4 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 80098c4:	681c      	ldr	r4, [r3, #0]
 80098c6:	6838      	ldr	r0, [r7, #0]
 80098c8:	f003 f9b8 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 80098cc:	4602      	mov	r2, r0
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	47a0      	blx	r4
}
 80098da:	bf00      	nop
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd90      	pop	{r4, r7, pc}
 80098e2:	bf00      	nop
 80098e4:	200000b8 	.word	0x200000b8

080098e8 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	6912      	ldr	r2, [r2, #16]
 80098f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80098fa:	4610      	mov	r0, r2
 80098fc:	4798      	blx	r3
}
 80098fe:	bf00      	nop
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	200000bc 	.word	0x200000bc

0800990c <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
 8009918:	603b      	str	r3, [r7, #0]
        return false;
 800991a:	2300      	movs	r3, #0
    }
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
    {
 8009930:	4a04      	ldr	r2, [pc, #16]	; (8009944 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	601a      	str	r2, [r3, #0]
    }
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4618      	mov	r0, r3
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	0802769c 	.word	0x0802769c

08009948 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
    }
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff ffe9 	bl	8009928 <_ZN17MemoryLeakFailureD1Ev>
 8009956:	2104      	movs	r1, #4
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fa35 	bl	8009dc8 <_ZdlPvj>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4618      	mov	r0, r3
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 8009968:	b590      	push	{r4, r7, lr}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	687c      	ldr	r4, [r7, #4]
 8009972:	f000 fc71 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009976:	4603      	mov	r3, r0
 8009978:	4618      	mov	r0, r3
 800997a:	f00c ff6c 	bl	8016856 <_ZN18MemoryLeakDetector8getMutexEv>
 800997e:	4603      	mov	r3, r0
 8009980:	4619      	mov	r1, r3
 8009982:	4620      	mov	r0, r4
 8009984:	f002 fb24 	bl	800bfd0 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4618      	mov	r0, r3
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	bd90      	pop	{r4, r7, pc}

08009992 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8009992:	b580      	push	{r7, lr}
 8009994:	b082      	sub	sp, #8
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4618      	mov	r0, r3
 800999e:	f002 fb29 	bl	800bff4 <_ZN15ScopedMutexLockD1Ev>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 80099ac:	b590      	push	{r4, r7, lr}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 80099b8:	f000 fc4e 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80099bc:	4604      	mov	r4, r0
 80099be:	f006 f8df 	bl	800fb80 <_Z25getCurrentMallocAllocatorv>
 80099c2:	4601      	mov	r1, r0
 80099c4:	2301      	movs	r3, #1
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4620      	mov	r0, r4
 80099d2:	f00d f983 	bl	8016cdc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80099d6:	4603      	mov	r3, r0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd90      	pop	{r4, r7, pc}

080099e0 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 80099e0:	b590      	push	{r4, r7, lr}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 80099ec:	f000 fc34 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80099f0:	4603      	mov	r3, r0
 80099f2:	68f9      	ldr	r1, [r7, #12]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f00c ffdd 	bl	80169b4 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 80099fa:	f000 fc2d 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80099fe:	4604      	mov	r4, r0
 8009a00:	f006 f8be 	bl	800fb80 <_Z25getCurrentMallocAllocatorv>
 8009a04:	4601      	mov	r1, r0
 8009a06:	2301      	movs	r3, #1
 8009a08:	9301      	str	r3, [sp, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4620      	mov	r0, r4
 8009a14:	f00d f996 	bl	8016d44 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8009a18:	bf00      	nop
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd90      	pop	{r4, r7, pc}

08009a20 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8009a20:	b590      	push	{r4, r7, lr}
 8009a22:	b089      	sub	sp, #36	; 0x24
 8009a24:	af04      	add	r7, sp, #16
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8009a2e:	f000 fc13 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009a32:	4604      	mov	r4, r0
 8009a34:	f006 f8a4 	bl	800fb80 <_Z25getCurrentMallocAllocatorv>
 8009a38:	4601      	mov	r1, r0
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	9302      	str	r3, [sp, #8]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	9301      	str	r3, [sp, #4]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f00d f9de 	bl	8016e0c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8009a50:	4603      	mov	r3, r0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd90      	pop	{r4, r7, pc}
	...

08009a5c <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8009a68:	4b04      	ldr	r3, [pc, #16]	; (8009a7c <_ZL13normal_mallocjPKcj+0x20>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	4798      	blx	r3
 8009a70:	4603      	mov	r3, r0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	200000c8 	.word	0x200000c8

08009a80 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8009a8e:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <_ZL14normal_reallocPvjPKcj+0x24>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	4798      	blx	r3
 8009a98:	4603      	mov	r3, r0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	200000cc 	.word	0x200000cc

08009aa8 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8009ab4:	4b03      	ldr	r3, [pc, #12]	; (8009ac4 <_ZL11normal_freePvPKcj+0x1c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	4798      	blx	r3
}
 8009abc:	bf00      	nop
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	200000d0 	.word	0x200000d0

08009ac8 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009ac8:	b590      	push	{r4, r7, lr}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8009ad0:	f107 0308 	add.w	r3, r7, #8
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff ff47 	bl	8009968 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009ada:	f000 fbbd 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009ade:	4604      	mov	r4, r0
 8009ae0:	f005 ff9e 	bl	800fa20 <_Z22getCurrentNewAllocatorv>
 8009ae4:	4601      	mov	r1, r0
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	4620      	mov	r0, r4
 8009aec:	f00d f864 	bl	8016bb8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009af0:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009af2:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8009af4:	f107 0308 	add.w	r3, r7, #8
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7ff ff4a 	bl	8009992 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8009afe:	4623      	mov	r3, r4
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd90      	pop	{r4, r7, pc}

08009b08 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009b08:	b590      	push	{r4, r7, lr}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009b10:	f000 fba2 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b14:	4604      	mov	r4, r0
 8009b16:	f005 ff83 	bl	800fa20 <_Z22getCurrentNewAllocatorv>
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	4620      	mov	r0, r4
 8009b22:	f00d f849 	bl	8016bb8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009b26:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009b28:	68fb      	ldr	r3, [r7, #12]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd90      	pop	{r4, r7, pc}

08009b32 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8009b32:	b590      	push	{r4, r7, lr}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8009b3a:	f000 fb8d 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b3e:	4604      	mov	r4, r0
 8009b40:	f005 ff6e 	bl	800fa20 <_Z22getCurrentNewAllocatorv>
 8009b44:	4601      	mov	r1, r0
 8009b46:	2300      	movs	r3, #0
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f00d f834 	bl	8016bb8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009b50:	4603      	mov	r3, r0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd90      	pop	{r4, r7, pc}

08009b5a <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8009b5a:	b590      	push	{r4, r7, lr}
 8009b5c:	b089      	sub	sp, #36	; 0x24
 8009b5e:	af02      	add	r7, sp, #8
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8009b66:	f000 fb77 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	f005 ff58 	bl	800fa20 <_Z22getCurrentNewAllocatorv>
 8009b70:	4601      	mov	r1, r0
 8009b72:	2300      	movs	r3, #0
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f00d f8ac 	bl	8016cdc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009b84:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009b86:	697b      	ldr	r3, [r7, #20]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	371c      	adds	r7, #28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd90      	pop	{r4, r7, pc}

08009b90 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8009b90:	b590      	push	{r4, r7, lr}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8009b98:	f000 fb5e 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	f005 ff97 	bl	800fad0 <_Z27getCurrentNewArrayAllocatorv>
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f00d f805 	bl	8016bb8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009bae:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3714      	adds	r7, #20
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd90      	pop	{r4, r7, pc}

08009bba <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8009bba:	b590      	push	{r4, r7, lr}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8009bc2:	f000 fb49 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	f005 ff82 	bl	800fad0 <_Z27getCurrentNewArrayAllocatorv>
 8009bcc:	4601      	mov	r1, r0
 8009bce:	2300      	movs	r3, #0
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f00c fff0 	bl	8016bb8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8009bd8:	4603      	mov	r3, r0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd90      	pop	{r4, r7, pc}

08009be2 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8009be2:	b590      	push	{r4, r7, lr}
 8009be4:	b089      	sub	sp, #36	; 0x24
 8009be6:	af02      	add	r7, sp, #8
 8009be8:	60f8      	str	r0, [r7, #12]
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8009bee:	f000 fb33 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	f005 ff6c 	bl	800fad0 <_Z27getCurrentNewArrayAllocatorv>
 8009bf8:	4601      	mov	r1, r0
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9301      	str	r3, [sp, #4]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4620      	mov	r0, r4
 8009c08:	f00d f868 	bl	8016cdc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8009c0c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009c0e:	697b      	ldr	r3, [r7, #20]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	371c      	adds	r7, #28
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd90      	pop	{r4, r7, pc}

08009c18 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8009c18:	b590      	push	{r4, r7, lr}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8009c20:	f000 fb1a 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009c24:	4603      	mov	r3, r0
 8009c26:	6879      	ldr	r1, [r7, #4]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f00c fec3 	bl	80169b4 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8009c2e:	f000 fb13 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009c32:	4604      	mov	r4, r0
 8009c34:	f005 fef4 	bl	800fa20 <_Z22getCurrentNewAllocatorv>
 8009c38:	4601      	mov	r1, r0
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f00d f8ca 	bl	8016dd8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd90      	pop	{r4, r7, pc}

08009c4c <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8009c4c:	b590      	push	{r4, r7, lr}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8009c54:	f000 fb00 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	6879      	ldr	r1, [r7, #4]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f00c fea9 	bl	80169b4 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8009c62:	f000 faf9 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8009c66:	4604      	mov	r4, r0
 8009c68:	f005 ff32 	bl	800fad0 <_Z27getCurrentNewArrayAllocatorv>
 8009c6c:	4601      	mov	r1, r0
 8009c6e:	2300      	movs	r3, #0
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	4620      	mov	r0, r4
 8009c74:	f00d f8b0 	bl	8016dd8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd90      	pop	{r4, r7, pc}

08009c80 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009c88:	4b04      	ldr	r3, [pc, #16]	; (8009c9c <_ZL19normal_operator_newj+0x1c>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	4798      	blx	r3
 8009c90:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009c92:	68fb      	ldr	r3, [r7, #12]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	200000c8 	.word	0x200000c8

08009ca0 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8009ca8:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <_ZL27normal_operator_new_nothrowj+0x1c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	4798      	blx	r3
 8009cb0:	4603      	mov	r3, r0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	200000c8 	.word	0x200000c8

08009cc0 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009ccc:	4b04      	ldr	r3, [pc, #16]	; (8009ce0 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	4798      	blx	r3
 8009cd4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009cd6:	697b      	ldr	r3, [r7, #20]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	200000c8 	.word	0x200000c8

08009ce4 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009cec:	4b04      	ldr	r3, [pc, #16]	; (8009d00 <_ZL25normal_operator_new_arrayj+0x1c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	4798      	blx	r3
 8009cf4:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	200000c8 	.word	0x200000c8

08009d04 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8009d0c:	4b04      	ldr	r3, [pc, #16]	; (8009d20 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	4798      	blx	r3
 8009d14:	4603      	mov	r3, r0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	200000c8 	.word	0x200000c8

08009d24 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	4798      	blx	r3
 8009d38:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8009d3a:	697b      	ldr	r3, [r7, #20]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	200000c8 	.word	0x200000c8

08009d48 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8009d50:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <_ZL22normal_operator_deletePv+0x18>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	4798      	blx	r3
}
 8009d58:	bf00      	nop
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	200000d0 	.word	0x200000d0

08009d64 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8009d6c:	4b03      	ldr	r3, [pc, #12]	; (8009d7c <_ZL28normal_operator_delete_arrayPv+0x18>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	4798      	blx	r3
}
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	200000d0 	.word	0x200000d0

08009d80 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8009d88:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <_Znwj+0x1c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	4798      	blx	r3
 8009d90:	4603      	mov	r3, r0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	2000002c 	.word	0x2000002c

08009da0 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8009dac:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <_ZnwjPKci+0x24>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	68b9      	ldr	r1, [r7, #8]
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	4798      	blx	r3
 8009db8:	4603      	mov	r3, r0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000034 	.word	0x20000034

08009dc8 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8009dd2:	4b04      	ldr	r3, [pc, #16]	; (8009de4 <_ZdlPvj+0x1c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	4798      	blx	r3
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20000044 	.word	0x20000044

08009de8 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8009df4:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <_ZnajPKci+0x24>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	68b9      	ldr	r1, [r7, #8]
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	4798      	blx	r3
 8009e00:	4603      	mov	r3, r0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20000040 	.word	0x20000040

08009e10 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8009e18:	4b03      	ldr	r3, [pc, #12]	; (8009e28 <_ZdaPv+0x18>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	4798      	blx	r3
}
 8009e20:	bf00      	nop
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	20000048 	.word	0x20000048

08009e2c <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8009e36:	4b04      	ldr	r3, [pc, #16]	; (8009e48 <_ZdaPvj+0x1c>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	4798      	blx	r3
}
 8009e3e:	bf00      	nop
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20000048 	.word	0x20000048

08009e4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8009e50:	4b12      	ldr	r3, [pc, #72]	; (8009e9c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8009e52:	4a13      	ldr	r2, [pc, #76]	; (8009ea0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8009e54:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8009e56:	4b13      	ldr	r3, [pc, #76]	; (8009ea4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8009e58:	4a13      	ldr	r2, [pc, #76]	; (8009ea8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8009e5a:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8009e5c:	4b13      	ldr	r3, [pc, #76]	; (8009eac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8009e5e:	4a14      	ldr	r2, [pc, #80]	; (8009eb0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8009e60:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8009e62:	4b14      	ldr	r3, [pc, #80]	; (8009eb4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8009e64:	4a14      	ldr	r2, [pc, #80]	; (8009eb8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8009e66:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8009e68:	4b14      	ldr	r3, [pc, #80]	; (8009ebc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8009e6a:	4a15      	ldr	r2, [pc, #84]	; (8009ec0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8009e6c:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8009e6e:	4b15      	ldr	r3, [pc, #84]	; (8009ec4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8009e70:	4a15      	ldr	r2, [pc, #84]	; (8009ec8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8009e72:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8009e74:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8009e76:	4a16      	ldr	r2, [pc, #88]	; (8009ed0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8009e78:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8009e7a:	4b16      	ldr	r3, [pc, #88]	; (8009ed4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8009e7c:	4a16      	ldr	r2, [pc, #88]	; (8009ed8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8009e7e:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8009e80:	4b16      	ldr	r3, [pc, #88]	; (8009edc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8009e82:	4a17      	ldr	r2, [pc, #92]	; (8009ee0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8009e84:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8009e86:	4b17      	ldr	r3, [pc, #92]	; (8009ee4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8009e88:	4a17      	ldr	r2, [pc, #92]	; (8009ee8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8009e8a:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8009e8c:	4b17      	ldr	r3, [pc, #92]	; (8009eec <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8009e8e:	4a18      	ldr	r2, [pc, #96]	; (8009ef0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8009e90:	601a      	str	r2, [r3, #0]

#endif
}
 8009e92:	bf00      	nop
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	2000002c 	.word	0x2000002c
 8009ea0:	08009c81 	.word	0x08009c81
 8009ea4:	20000030 	.word	0x20000030
 8009ea8:	08009ca1 	.word	0x08009ca1
 8009eac:	20000034 	.word	0x20000034
 8009eb0:	08009cc1 	.word	0x08009cc1
 8009eb4:	20000038 	.word	0x20000038
 8009eb8:	08009ce5 	.word	0x08009ce5
 8009ebc:	2000003c 	.word	0x2000003c
 8009ec0:	08009d05 	.word	0x08009d05
 8009ec4:	20000040 	.word	0x20000040
 8009ec8:	08009d25 	.word	0x08009d25
 8009ecc:	20000044 	.word	0x20000044
 8009ed0:	08009d49 	.word	0x08009d49
 8009ed4:	20000048 	.word	0x20000048
 8009ed8:	08009d65 	.word	0x08009d65
 8009edc:	20000014 	.word	0x20000014
 8009ee0:	08009a5d 	.word	0x08009a5d
 8009ee4:	2000001c 	.word	0x2000001c
 8009ee8:	08009a81 	.word	0x08009a81
 8009eec:	20000018 	.word	0x20000018
 8009ef0:	08009aa9 	.word	0x08009aa9

08009ef4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8009ef8:	4b08      	ldr	r3, [pc, #32]	; (8009f1c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a08      	ldr	r2, [pc, #32]	; (8009f20 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d004      	beq.n	8009f0c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8009f02:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a07      	ldr	r2, [pc, #28]	; (8009f24 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d101      	bne.n	8009f10 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e000      	b.n	8009f12 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8009f10:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	2000002c 	.word	0x2000002c
 8009f20:	08009b09 	.word	0x08009b09
 8009f24:	08009ac9 	.word	0x08009ac9

08009f28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8009f2c:	4b1f      	ldr	r3, [pc, #124]	; (8009fac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	4a1e      	ldr	r2, [pc, #120]	; (8009fac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	4b1d      	ldr	r3, [pc, #116]	; (8009fac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	bfcc      	ite	gt
 8009f3e:	2301      	movgt	r3, #1
 8009f40:	2300      	movle	r3, #0
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d12e      	bne.n	8009fa6 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8009f48:	4b19      	ldr	r3, [pc, #100]	; (8009fb0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a19      	ldr	r2, [pc, #100]	; (8009fb4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8009f4e:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8009f50:	4b19      	ldr	r3, [pc, #100]	; (8009fb8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a19      	ldr	r2, [pc, #100]	; (8009fbc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8009f56:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8009f58:	4b19      	ldr	r3, [pc, #100]	; (8009fc0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a19      	ldr	r2, [pc, #100]	; (8009fc4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8009f5e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8009f60:	4b19      	ldr	r3, [pc, #100]	; (8009fc8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a19      	ldr	r2, [pc, #100]	; (8009fcc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8009f66:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8009f68:	4b19      	ldr	r3, [pc, #100]	; (8009fd0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a19      	ldr	r2, [pc, #100]	; (8009fd4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8009f6e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8009f70:	4b19      	ldr	r3, [pc, #100]	; (8009fd8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a19      	ldr	r2, [pc, #100]	; (8009fdc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8009f76:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8009f78:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a19      	ldr	r2, [pc, #100]	; (8009fe4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8009f7e:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8009f80:	4b19      	ldr	r3, [pc, #100]	; (8009fe8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a19      	ldr	r2, [pc, #100]	; (8009fec <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8009f86:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8009f88:	4b19      	ldr	r3, [pc, #100]	; (8009ff0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a19      	ldr	r2, [pc, #100]	; (8009ff4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8009f8e:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8009f90:	4b19      	ldr	r3, [pc, #100]	; (8009ff8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a19      	ldr	r2, [pc, #100]	; (8009ffc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8009f96:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8009f98:	4b19      	ldr	r3, [pc, #100]	; (800a000 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a19      	ldr	r2, [pc, #100]	; (800a004 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8009f9e:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8009fa0:	f7ff ff54 	bl	8009e4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8009fa4:	e000      	b.n	8009fa8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8009fa6:	bf00      	nop
#endif
}
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	200007e4 	.word	0x200007e4
 8009fb0:	2000002c 	.word	0x2000002c
 8009fb4:	2000004c 	.word	0x2000004c
 8009fb8:	20000030 	.word	0x20000030
 8009fbc:	20000050 	.word	0x20000050
 8009fc0:	20000034 	.word	0x20000034
 8009fc4:	20000054 	.word	0x20000054
 8009fc8:	20000038 	.word	0x20000038
 8009fcc:	20000058 	.word	0x20000058
 8009fd0:	2000003c 	.word	0x2000003c
 8009fd4:	2000005c 	.word	0x2000005c
 8009fd8:	20000040 	.word	0x20000040
 8009fdc:	20000060 	.word	0x20000060
 8009fe0:	20000044 	.word	0x20000044
 8009fe4:	20000064 	.word	0x20000064
 8009fe8:	20000048 	.word	0x20000048
 8009fec:	20000068 	.word	0x20000068
 8009ff0:	20000014 	.word	0x20000014
 8009ff4:	20000020 	.word	0x20000020
 8009ff8:	2000001c 	.word	0x2000001c
 8009ffc:	20000028 	.word	0x20000028
 800a000:	20000018 	.word	0x20000018
 800a004:	20000024 	.word	0x20000024

0800a008 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800a008:	b480      	push	{r7}
 800a00a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800a00c:	4b1f      	ldr	r3, [pc, #124]	; (800a08c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3b01      	subs	r3, #1
 800a012:	4a1e      	ldr	r2, [pc, #120]	; (800a08c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	4b1d      	ldr	r3, [pc, #116]	; (800a08c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	bfcc      	ite	gt
 800a01e:	2301      	movgt	r3, #1
 800a020:	2300      	movle	r3, #0
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	d12c      	bne.n	800a082 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800a028:	4b19      	ldr	r3, [pc, #100]	; (800a090 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a19      	ldr	r2, [pc, #100]	; (800a094 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800a02e:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800a030:	4b19      	ldr	r3, [pc, #100]	; (800a098 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a19      	ldr	r2, [pc, #100]	; (800a09c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800a036:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800a038:	4b19      	ldr	r3, [pc, #100]	; (800a0a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a19      	ldr	r2, [pc, #100]	; (800a0a4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800a03e:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800a040:	4b19      	ldr	r3, [pc, #100]	; (800a0a8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a19      	ldr	r2, [pc, #100]	; (800a0ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800a046:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800a048:	4b19      	ldr	r3, [pc, #100]	; (800a0b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a19      	ldr	r2, [pc, #100]	; (800a0b4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800a04e:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800a050:	4b19      	ldr	r3, [pc, #100]	; (800a0b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a19      	ldr	r2, [pc, #100]	; (800a0bc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800a056:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800a058:	4b19      	ldr	r3, [pc, #100]	; (800a0c0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a19      	ldr	r2, [pc, #100]	; (800a0c4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800a05e:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800a060:	4b19      	ldr	r3, [pc, #100]	; (800a0c8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a19      	ldr	r2, [pc, #100]	; (800a0cc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800a066:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800a068:	4b19      	ldr	r3, [pc, #100]	; (800a0d0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a19      	ldr	r2, [pc, #100]	; (800a0d4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800a06e:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800a070:	4b19      	ldr	r3, [pc, #100]	; (800a0d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a19      	ldr	r2, [pc, #100]	; (800a0dc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800a076:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800a078:	4b19      	ldr	r3, [pc, #100]	; (800a0e0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a19      	ldr	r2, [pc, #100]	; (800a0e4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	e000      	b.n	800a084 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800a082:	bf00      	nop
#endif
}
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	200007e4 	.word	0x200007e4
 800a090:	2000004c 	.word	0x2000004c
 800a094:	2000002c 	.word	0x2000002c
 800a098:	20000050 	.word	0x20000050
 800a09c:	20000030 	.word	0x20000030
 800a0a0:	20000054 	.word	0x20000054
 800a0a4:	20000034 	.word	0x20000034
 800a0a8:	20000058 	.word	0x20000058
 800a0ac:	20000038 	.word	0x20000038
 800a0b0:	2000005c 	.word	0x2000005c
 800a0b4:	2000003c 	.word	0x2000003c
 800a0b8:	20000060 	.word	0x20000060
 800a0bc:	20000040 	.word	0x20000040
 800a0c0:	20000064 	.word	0x20000064
 800a0c4:	20000044 	.word	0x20000044
 800a0c8:	20000068 	.word	0x20000068
 800a0cc:	20000048 	.word	0x20000048
 800a0d0:	20000020 	.word	0x20000020
 800a0d4:	20000014 	.word	0x20000014
 800a0d8:	20000028 	.word	0x20000028
 800a0dc:	2000001c 	.word	0x2000001c
 800a0e0:	20000024 	.word	0x20000024
 800a0e4:	20000018 	.word	0x20000018

0800a0e8 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
    {
 800a0f0:	4a05      	ldr	r2, [pc, #20]	; (800a108 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7ff fc15 	bl	8009928 <_ZN17MemoryLeakFailureD1Ev>
    }
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4618      	mov	r0, r3
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	08027688 	.word	0x08027688

0800a10c <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
    }
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff ffe7 	bl	800a0e8 <_ZN25MemoryLeakWarningReporterD1Ev>
 800a11a:	2104      	movs	r1, #4
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff fe53 	bl	8009dc8 <_ZdlPvj>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4618      	mov	r0, r3
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	4a04      	ldr	r2, [pc, #16]	; (800a148 <_ZN14TestTerminatorC1Ev+0x1c>)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4618      	mov	r0, r3
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	08028034 	.word	0x08028034

0800a14c <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4618      	mov	r0, r3
 800a158:	f7ff ffe8 	bl	800a12c <_ZN14TestTerminatorC1Ev>
 800a15c:	4a03      	ldr	r2, [pc, #12]	; (800a16c <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	0802800c 	.word	0x0802800c

0800a170 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800a170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a172:	b099      	sub	sp, #100	; 0x64
 800a174:	af02      	add	r7, sp, #8
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800a17a:	f009 fdb7 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800a17e:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800a180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	339c      	adds	r3, #156	; 0x9c
 800a186:	681c      	ldr	r4, [r3, #0]
 800a188:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a18c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a18e:	4618      	mov	r0, r3
 800a190:	f008 fbc4 	bl	801291c <_ZNK10UtestShell7getNameEv>
 800a194:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a198:	4618      	mov	r0, r3
 800a19a:	f002 fd4f 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800a19e:	4605      	mov	r5, r0
 800a1a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a1a2:	f008 fc9b 	bl	8012adc <_ZNK10UtestShell13getLineNumberEv>
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f002 f9b9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800a1b4:	f107 000c 	add.w	r0, r7, #12
 800a1b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	4633      	mov	r3, r6
 800a1c0:	462a      	mov	r2, r5
 800a1c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1c4:	f004 fd14 	bl	800ebf0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a1cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff ffbb 	bl	800a14c <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800a1d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800a1da:	f107 030c 	add.w	r3, r7, #12
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a1e2:	47a0      	blx	r4
 800a1e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f009 fe79 	bl	8013ee0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800a1ee:	f107 030c 	add.w	r3, r7, #12
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 f9ac 	bl	800a550 <_ZN11FailFailureD1Ev>
 800a1f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f002 fd4a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800a202:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a206:	4618      	mov	r0, r3
 800a208:	f002 fd45 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800a20c:	bf00      	nop
 800a20e:	375c      	adds	r7, #92	; 0x5c
 800a210:	46bd      	mov	sp, r7
 800a212:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a214 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	4a04      	ldr	r2, [pc, #16]	; (800a230 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	0802769c 	.word	0x0802769c

0800a234 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4618      	mov	r0, r3
 800a240:	f7ff ffe8 	bl	800a214 <_ZN17MemoryLeakFailureC1Ev>
 800a244:	4a03      	ldr	r2, [pc, #12]	; (800a254 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	08027688 	.word	0x08027688

0800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800a258:	b598      	push	{r3, r4, r7, lr}
 800a25a:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800a25c:	4b11      	ldr	r3, [pc, #68]	; (800a2a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d11b      	bne.n	800a29c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800a264:	f7ff fe60 	bl	8009f28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800a268:	2004      	movs	r0, #4
 800a26a:	f7ff fd89 	bl	8009d80 <_Znwj>
 800a26e:	4603      	mov	r3, r0
 800a270:	461c      	mov	r4, r3
 800a272:	4620      	mov	r0, r4
 800a274:	f7ff ffde 	bl	800a234 <_ZN25MemoryLeakWarningReporterC1Ev>
 800a278:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800a27a:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800a27c:	f241 1050 	movw	r0, #4432	; 0x1150
 800a280:	f7ff fd7e 	bl	8009d80 <_Znwj>
 800a284:	4603      	mov	r3, r0
 800a286:	461c      	mov	r4, r3
 800a288:	4b07      	ldr	r3, [pc, #28]	; (800a2a8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4619      	mov	r1, r3
 800a28e:	4620      	mov	r0, r4
 800a290:	f00c fa3e 	bl	8016710 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800a294:	4b03      	ldr	r3, [pc, #12]	; (800a2a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a296:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800a298:	f7ff feb6 	bl	800a008 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800a29c:	4b01      	ldr	r3, [pc, #4]	; (800a2a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	bd98      	pop	{r3, r4, r7, pc}
 800a2a4:	200007ec 	.word	0x200007ec
 800a2a8:	200007e8 	.word	0x200007e8

0800a2ac <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	765a      	strb	r2, [r3, #25]
}
 800a2be:	bf00      	nop
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
	...

0800a2cc <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800a2d0:	f7ff fdbc 	bl	8009e4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800a2d4:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d004      	beq.n	800a2e6 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	3204      	adds	r2, #4
 800a2e0:	6812      	ldr	r2, [r2, #0]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	4790      	blx	r2
    delete globalReporter;
 800a2e6:	4b08      	ldr	r3, [pc, #32]	; (800a308 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d004      	beq.n	800a2f8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	3204      	adds	r2, #4
 800a2f2:	6812      	ldr	r2, [r2, #0]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	4790      	blx	r2
    globalDetector = NULLPTR;
 800a2f8:	4b02      	ldr	r3, [pc, #8]	; (800a304 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]
}
 800a2fe:	bf00      	nop
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	200007ec 	.word	0x200007ec
 800a308:	200007e8 	.word	0x200007e8

0800a30c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	68b9      	ldr	r1, [r7, #8]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f006 fdfd 	bl	8010f1c <_ZN10TestPluginC1ERK12SimpleString>
 800a322:	4a14      	ldr	r2, [pc, #80]	; (800a374 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	761a      	strb	r2, [r3, #24]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	765a      	strb	r2, [r3, #25]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800a33a:	4b0f      	ldr	r3, [pc, #60]	; (800a378 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d102      	bne.n	800a348 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800a342:	4a0d      	ldr	r2, [pc, #52]	; (800a378 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	615a      	str	r2, [r3, #20]
 800a354:	e004      	b.n	800a360 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800a356:	f7ff ff7f 	bl	800a258 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a35a:	4602      	mov	r2, r0
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	4618      	mov	r0, r3
 800a366:	f00c fa69 	bl	801683c <_ZN18MemoryLeakDetector6enableEv>
}
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	080276b0 	.word	0x080276b0
 800a378:	200007f0 	.word	0x200007f0

0800a37c <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	4a09      	ldr	r2, [pc, #36]	; (800a3ac <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	7e5b      	ldrb	r3, [r3, #25]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800a392:	f7ff fd5b 	bl	8009e4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800a396:	f7ff ff99 	bl	800a2cc <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f006 fdf9 	bl	8010f94 <_ZN10TestPluginD1Ev>
    }
}
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	080276b0 	.word	0x080276b0

0800a3b0 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
}
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f7ff ffdf 	bl	800a37c <_ZN23MemoryLeakWarningPluginD1Ev>
 800a3be:	2124      	movs	r1, #36	; 0x24
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff fd01 	bl	8009dc8 <_ZdlPvj>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f00c fa0e 	bl	8016802 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7fd ffb0 	bl	800834c <_ZNK10TestResult15getFailureCountEv>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	621a      	str	r2, [r3, #32]
}
 800a3f2:	bf00      	nop
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800a3fc:	b590      	push	{r4, r7, lr}
 800a3fe:	b097      	sub	sp, #92	; 0x5c
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f00c fa08 	bl	8016822 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	2103      	movs	r1, #3
 800a418:	4618      	mov	r0, r3
 800a41a:	f00c fda5 	bl	8016f68 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800a41e:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	7e1b      	ldrb	r3, [r3, #24]
 800a424:	f083 0301 	eor.w	r3, r3, #1
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00e      	beq.n	800a44c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a434:	429a      	cmp	r2, r3
 800a436:	d009      	beq.n	800a44c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6a1c      	ldr	r4, [r3, #32]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7fd ff85 	bl	800834c <_ZNK10TestResult15getFailureCountEv>
 800a442:	4603      	mov	r3, r0
 800a444:	429c      	cmp	r4, r3
 800a446:	d101      	bne.n	800a44c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800a448:	2301      	movs	r3, #1
 800a44a:	e000      	b.n	800a44e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800a44c:	2300      	movs	r3, #0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d04c      	beq.n	800a4ec <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800a452:	f7ff fd4f 	bl	8009ef4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d028      	beq.n	800a4ae <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	2103      	movs	r1, #3
 800a462:	4618      	mov	r0, r3
 800a464:	f00c fd45 	bl	8016ef2 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800a468:	4602      	mov	r2, r0
 800a46a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a46e:	4611      	mov	r1, r2
 800a470:	4618      	mov	r0, r3
 800a472:	f002 f858 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800a476:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a47a:	f107 0310 	add.w	r3, r7, #16
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	4618      	mov	r0, r3
 800a482:	f003 feaf 	bl	800e1e4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800a486:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a48a:	4618      	mov	r0, r3
 800a48c:	f002 fc03 	bl	800cc96 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3334      	adds	r3, #52	; 0x34
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f107 0210 	add.w	r2, r7, #16
 800a49c:	4611      	mov	r1, r2
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800a4a2:	f107 0310 	add.w	r3, r7, #16
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f003 ff5c 	bl	800e364 <_ZN11TestFailureD1Ev>
 800a4ac:	e01e      	b.n	800a4ec <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d01a      	beq.n	800a4ec <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3338      	adds	r3, #56	; 0x38
 800a4bc:	681c      	ldr	r4, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a4c8:	4910      	ldr	r1, [pc, #64]	; (800a50c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f003 f8ea 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 800a4d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f002 fbb1 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	47a0      	blx	r4
 800a4e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f002 fbd5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f00c fd13 	bl	8016f1c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	61da      	str	r2, [r3, #28]
}
 800a502:	bf00      	nop
 800a504:	375c      	adds	r7, #92	; 0x5c
 800a506:	46bd      	mov	sp, r7
 800a508:	bd90      	pop	{r4, r7, pc}
 800a50a:	bf00      	nop
 800a50c:	08023ac0 	.word	0x08023ac0

0800a510 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	2102      	movs	r1, #2
 800a520:	4618      	mov	r0, r3
 800a522:	f00c fd21 	bl	8016f68 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800a526:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d007      	beq.n	800a540 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	2102      	movs	r1, #2
 800a536:	4618      	mov	r0, r3
 800a538:	f00c fcdb 	bl	8016ef2 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800a53c:	4603      	mov	r3, r0
 800a53e:	e000      	b.n	800a542 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800a540:	4b02      	ldr	r3, [pc, #8]	; (800a54c <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	08023b00 	.word	0x08023b00

0800a550 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	4a05      	ldr	r2, [pc, #20]	; (800a570 <_ZN11FailFailureD1Ev+0x20>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	601a      	str	r2, [r3, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4618      	mov	r0, r3
 800a562:	f003 feff 	bl	800e364 <_ZN11TestFailureD1Ev>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	080276f8 	.word	0x080276f8

0800a574 <_ZN11FailFailureD0Ev>:
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7ff ffe7 	bl	800a550 <_ZN11FailFailureD1Ev>
 800a582:	2134      	movs	r1, #52	; 0x34
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff fc1f 	bl	8009dc8 <_ZdlPvj>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	4a06      	ldr	r2, [pc, #24]	; (800a5e8 <_ZN19MockFailureReporterC1Ev+0x24>)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	711a      	strb	r2, [r3, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	080288d4 	.word	0x080288d4

0800a5ec <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	4a04      	ldr	r2, [pc, #16]	; (800a608 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	080288d4 	.word	0x080288d4

0800a60c <_ZN19MockFailureReporterD0Ev>:
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f7ff ffe9 	bl	800a5ec <_ZN19MockFailureReporterD1Ev>
 800a61a:	2108      	movs	r1, #8
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff fbd3 	bl	8009dc8 <_ZdlPvj>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4618      	mov	r0, r3
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	4a05      	ldr	r2, [pc, #20]	; (800a64c <_ZN11MockFailureD1Ev+0x20>)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f003 fe91 	bl	800e364 <_ZN11TestFailureD1Ev>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	0802784c 	.word	0x0802784c

0800a650 <_ZN11MockFailureD0Ev>:
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff ffe7 	bl	800a62c <_ZN11MockFailureD1Ev>
 800a65e:	2134      	movs	r1, #52	; 0x34
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff fbb1 	bl	8009dc8 <_ZdlPvj>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800a670:	b590      	push	{r4, r7, lr}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	4a16      	ldr	r2, [pc, #88]	; (800a6d4 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	1d1a      	adds	r2, r3, #4
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	3304      	adds	r3, #4
 800a688:	4619      	mov	r1, r3
 800a68a:	4610      	mov	r0, r2
 800a68c:	f001 ff9f 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f103 020c 	add.w	r2, r3, #12
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	330c      	adds	r3, #12
 800a69a:	4619      	mov	r1, r3
 800a69c:	4610      	mov	r0, r2
 800a69e:	f001 ff96 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	f102 0418 	add.w	r4, r2, #24
 800a6aa:	3318      	adds	r3, #24
 800a6ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a6ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	629a      	str	r2, [r3, #40]	; 0x28
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	62da      	str	r2, [r3, #44]	; 0x2c
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	631a      	str	r2, [r3, #48]	; 0x30
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd90      	pop	{r4, r7, pc}
 800a6d4:	08028914 	.word	0x08028914

0800a6d8 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800a6e2:	f107 030c 	add.w	r3, r7, #12
 800a6e6:	4916      	ldr	r1, [pc, #88]	; (800a740 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f001 ff1c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800a6ee:	f107 030c 	add.w	r3, r7, #12
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f002 fb1f 	bl	800cd38 <_ZneRK12SimpleStringS1_>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d005      	beq.n	800a70c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	4810      	ldr	r0, [pc, #64]	; (800a744 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800a704:	f000 ff70 	bl	800b5e8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800a708:	4603      	mov	r3, r0
 800a70a:	e000      	b.n	800a70e <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800a70c:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800a70e:	617b      	str	r3, [r7, #20]
 800a710:	f107 030c 	add.w	r3, r7, #12
 800a714:	4618      	mov	r0, r3
 800a716:	f002 fabe 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	33a8      	adds	r3, #168	; 0xa8
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6978      	ldr	r0, [r7, #20]
 800a726:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	33ac      	adds	r3, #172	; 0xac
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6978      	ldr	r0, [r7, #20]
 800a732:	4798      	blx	r3
    return mock_support;
 800a734:	697b      	ldr	r3, [r7, #20]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	08023b04 	.word	0x08023b04
 800a744:	200007f4 	.word	0x200007f4

0800a748 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800a752:	4a21      	ldr	r2, [pc, #132]	; (800a7d8 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	605a      	str	r2, [r3, #4]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	609a      	str	r2, [r3, #8]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	731a      	strb	r2, [r3, #12]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f103 0218 	add.w	r2, r3, #24
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	615a      	str	r2, [r3, #20]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3318      	adds	r3, #24
 800a778:	4618      	mov	r0, r3
 800a77a:	f7ff ff23 	bl	800a5c4 <_ZN19MockFailureReporterC1Ev>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	3320      	adds	r3, #32
 800a782:	4618      	mov	r0, r3
 800a784:	f010 fefc 	bl	801b580 <_ZN21MockExpectedCallsListC1Ev>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3330      	adds	r3, #48	; 0x30
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f014 fbea 	bl	801ef7c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	3338      	adds	r3, #56	; 0x38
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f014 faf4 	bl	801ed9a <_ZN18MockNamedValueListC1Ev>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	333c      	adds	r3, #60	; 0x3c
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f001 ff08 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f894 	bl	800a8f6 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	08027724 	.word	0x08027724

0800a7dc <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	4a0d      	ldr	r2, [pc, #52]	; (800a81c <_ZN11MockSupportD1Ev+0x40>)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	333c      	adds	r3, #60	; 0x3c
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f002 fa51 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3330      	adds	r3, #48	; 0x30
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f014 fbd3 	bl	801efa4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	3320      	adds	r3, #32
 800a802:	4618      	mov	r0, r3
 800a804:	f010 fed0 	bl	801b5a8 <_ZN21MockExpectedCallsListD1Ev>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3318      	adds	r3, #24
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7ff feed 	bl	800a5ec <_ZN19MockFailureReporterD1Ev>
{
}
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	08027724 	.word	0x08027724

0800a820 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
}
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff ffd7 	bl	800a7dc <_ZN11MockSupportD1Ev>
 800a82e:	2148      	movs	r1, #72	; 0x48
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff fac9 	bl	8009dc8 <_ZdlPvj>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	460b      	mov	r3, r1
 800a84a:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	691a      	ldr	r2, [r3, #16]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3310      	adds	r3, #16
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	78f9      	ldrb	r1, [r7, #3]
 800a85c:	4610      	mov	r0, r2
 800a85e:	4798      	blx	r3
}
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d102      	bne.n	800a87e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3318      	adds	r3, #24
 800a87c:	e000      	b.n	800a880 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00a      	beq.n	800a8a2 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	33c8      	adds	r3, #200	; 0xc8
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	6952      	ldr	r2, [r2, #20]
 800a89e:	4611      	mov	r1, r2
 800a8a0:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3338      	adds	r3, #56	; 0x38
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f014 fb0d 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800a8ac:	60f8      	str	r0, [r7, #12]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01c      	beq.n	800a8ee <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800a8b4:	68f9      	ldr	r1, [r7, #12]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 ff26 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	bf14      	ite	ne
 800a8c2:	2301      	movne	r3, #1
 800a8c4:	2300      	moveq	r3, #0
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00b      	beq.n	800a8e4 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800a8cc:	68f9      	ldr	r1, [r7, #12]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 ff1a 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	32a4      	adds	r2, #164	; 0xa4
 800a8da:	6812      	ldr	r2, [r2, #0]
 800a8dc:	6879      	ldr	r1, [r7, #4]
 800a8de:	6949      	ldr	r1, [r1, #20]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f014 f9f7 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	e7df      	b.n	800a8ae <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800a8ee:	bf00      	nop
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b083      	sub	sp, #12
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
 800a8fe:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d102      	bne.n	800a90c <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	e000      	b.n	800a90e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	6113      	str	r3, [r2, #16]
}
 800a912:	bf00      	nop
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b082      	sub	sp, #8
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	3330      	adds	r3, #48	; 0x30
 800a92a:	4618      	mov	r0, r3
 800a92c:	f012 fb10 	bl	801cf50 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800a930:	bf00      	nop
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800a938:	b590      	push	{r4, r7, lr}
 800a93a:	b087      	sub	sp, #28
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3330      	adds	r3, #48	; 0x30
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	68b9      	ldr	r1, [r7, #8]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f014 fb77 	bl	801f040 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3338      	adds	r3, #56	; 0x38
 800a956:	4618      	mov	r0, r3
 800a958:	f014 fab5 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800a95c:	6178      	str	r0, [r7, #20]
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01c      	beq.n	800a99e <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800a964:	6979      	ldr	r1, [r7, #20]
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 fece 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bf14      	ite	ne
 800a972:	2301      	movne	r3, #1
 800a974:	2300      	moveq	r3, #0
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800a97c:	6979      	ldr	r1, [r7, #20]
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f000 fec2 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a984:	4603      	mov	r3, r0
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	32b0      	adds	r2, #176	; 0xb0
 800a98a:	6814      	ldr	r4, [r2, #0]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	68b9      	ldr	r1, [r7, #8]
 800a990:	4618      	mov	r0, r3
 800a992:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a994:	6978      	ldr	r0, [r7, #20]
 800a996:	f014 f99f 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800a99a:	6178      	str	r0, [r7, #20]
 800a99c:	e7df      	b.n	800a95e <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800a99e:	bf00      	nop
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd90      	pop	{r4, r7, pc}

0800a9a6 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800a9a6:	b590      	push	{r4, r7, lr}
 800a9a8:	b087      	sub	sp, #28
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	60f8      	str	r0, [r7, #12]
 800a9ae:	60b9      	str	r1, [r7, #8]
 800a9b0:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	3330      	adds	r3, #48	; 0x30
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	68b9      	ldr	r1, [r7, #8]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f014 fb5c 	bl	801f078 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3338      	adds	r3, #56	; 0x38
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f014 fa7e 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800a9ca:	6178      	str	r0, [r7, #20]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d01c      	beq.n	800aa0c <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800a9d2:	6979      	ldr	r1, [r7, #20]
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f000 fe97 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	bf14      	ite	ne
 800a9e0:	2301      	movne	r3, #1
 800a9e2:	2300      	moveq	r3, #0
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00b      	beq.n	800aa02 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800a9ea:	6979      	ldr	r1, [r7, #20]
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 fe8b 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	32b4      	adds	r2, #180	; 0xb4
 800a9f8:	6814      	ldr	r4, [r2, #0]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	68b9      	ldr	r1, [r7, #8]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aa02:	6978      	ldr	r0, [r7, #20]
 800aa04:	f014 f968 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800aa08:	6178      	str	r0, [r7, #20]
 800aa0a:	e7df      	b.n	800a9cc <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800aa0c:	bf00      	nop
 800aa0e:	371c      	adds	r7, #28
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd90      	pop	{r4, r7, pc}

0800aa14 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	3330      	adds	r3, #48	; 0x30
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f014 fb93 	bl	801f150 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	3338      	adds	r3, #56	; 0x38
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f014 fa49 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800aa34:	60f8      	str	r0, [r7, #12]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d01b      	beq.n	800aa74 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800aa3c:	68f9      	ldr	r1, [r7, #12]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fe62 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bf14      	ite	ne
 800aa4a:	2301      	movne	r3, #1
 800aa4c:	2300      	moveq	r3, #0
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00a      	beq.n	800aa6a <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800aa54:	68f9      	ldr	r1, [r7, #12]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 fe56 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	32b8      	adds	r2, #184	; 0xb8
 800aa62:	6812      	ldr	r2, [r2, #0]
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	4618      	mov	r0, r3
 800aa68:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f014 f934 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	e7e0      	b.n	800aa36 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800aa74:	bf00      	nop
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3330      	adds	r3, #48	; 0x30
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f014 faba 	bl	801f002 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3338      	adds	r3, #56	; 0x38
 800aa92:	4618      	mov	r0, r3
 800aa94:	f014 fa17 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800aa98:	60f8      	str	r0, [r7, #12]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d01a      	beq.n	800aad6 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800aaa0:	68f9      	ldr	r1, [r7, #12]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fe30 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	bf14      	ite	ne
 800aaae:	2301      	movne	r3, #1
 800aab0:	2300      	moveq	r3, #0
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800aab8:	68f9      	ldr	r1, [r7, #12]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fe24 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aac0:	4603      	mov	r3, r0
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	32bc      	adds	r2, #188	; 0xbc
 800aac6:	6812      	ldr	r2, [r2, #0]
 800aac8:	4618      	mov	r0, r3
 800aaca:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f014 f903 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	e7e1      	b.n	800aa9a <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800aad6:	bf00      	nop
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b084      	sub	sp, #16
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d004      	beq.n	800aaf8 <_ZN11MockSupport5clearEv+0x1a>
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	3204      	adds	r2, #4
 800aaf2:	6812      	ldr	r2, [r2, #0]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800ab06:	f00e fe0d 	bl	8019724 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3320      	adds	r3, #32
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f011 f937 	bl	801bd82 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3338      	adds	r3, #56	; 0x38
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f014 f9c3 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800ab40:	60f8      	str	r0, [r7, #12]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d01a      	beq.n	800ab7e <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800ab48:	68f9      	ldr	r1, [r7, #12]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fddc 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ab50:	60b8      	str	r0, [r7, #8]
        if (support) {
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00d      	beq.n	800ab74 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	339c      	adds	r3, #156	; 0x9c
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68b8      	ldr	r0, [r7, #8]
 800ab62:	4798      	blx	r3
            delete support;
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d004      	beq.n	800ab74 <_ZN11MockSupport5clearEv+0x96>
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	3204      	adds	r2, #4
 800ab6e:	6812      	ldr	r2, [r2, #0]
 800ab70:	4618      	mov	r0, r3
 800ab72:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f014 f8af 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	e7e1      	b.n	800ab42 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3338      	adds	r3, #56	; 0x38
 800ab82:	4618      	mov	r0, r3
 800ab84:	f014 f917 	bl	801edb6 <_ZN18MockNamedValueList5clearEv>
}
 800ab88:	bf00      	nop
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	731a      	strb	r2, [r3, #12]
}
 800ab9e:	bf00      	nop
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
	...

0800abac <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b089      	sub	sp, #36	; 0x24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	333c      	adds	r3, #60	; 0x3c
 800abbc:	4618      	mov	r0, r3
 800abbe:	f002 f859 	bl	800cc74 <_ZNK12SimpleString7isEmptyEv>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d004      	beq.n	800abd2 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800abc8:	6879      	ldr	r1, [r7, #4]
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f001 fcff 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 800abd0:	e021      	b.n	800ac16 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800abd8:	f107 0318 	add.w	r3, r7, #24
 800abdc:	4910      	ldr	r1, [pc, #64]	; (800ac20 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800abde:	4618      	mov	r0, r3
 800abe0:	f001 fca1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800abe4:	f107 0310 	add.w	r3, r7, #16
 800abe8:	f107 0218 	add.w	r2, r7, #24
 800abec:	4621      	mov	r1, r4
 800abee:	4618      	mov	r0, r3
 800abf0:	f002 f8b3 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f107 0110 	add.w	r1, r7, #16
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f002 f8ac 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800ac02:	f107 0310 	add.w	r3, r7, #16
 800ac06:	4618      	mov	r0, r3
 800ac08:	f002 f845 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800ac0c:	f107 0318 	add.w	r3, r7, #24
 800ac10:	4618      	mov	r0, r3
 800ac12:	f002 f840 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	3724      	adds	r7, #36	; 0x24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd90      	pop	{r4, r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	08023b08 	.word	0x08023b08

0800ac24 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3314      	adds	r3, #20
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	2101      	movs	r1, #1
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	4798      	blx	r3
 800ac3e:	4603      	mov	r3, r0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3314      	adds	r3, #20
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	4798      	blx	r3
}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800ac6c:	b590      	push	{r4, r7, lr}
 800ac6e:	b089      	sub	sp, #36	; 0x24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ac7e:	f083 0301 	eor.w	r3, r3, #1
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d003      	beq.n	800ac90 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800ac88:	f010 fbf6 	bl	801b478 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	e041      	b.n	800ad14 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f000 fb1b 	bl	800b2cc <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800ac96:	22a5      	movs	r2, #165	; 0xa5
 800ac98:	4920      	ldr	r1, [pc, #128]	; (800ad1c <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800ac9a:	2070      	movs	r0, #112	; 0x70
 800ac9c:	f7ff f880 	bl	8009da0 <_ZnwjPKci>
 800aca0:	4604      	mov	r4, r0
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	4620      	mov	r0, r4
 800aca6:	f00f f8f3 	bl	8019e90 <_ZN23MockCheckedExpectedCallC1Ej>
 800acaa:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	3308      	adds	r3, #8
 800acb2:	681c      	ldr	r4, [r3, #0]
 800acb4:	f107 0314 	add.w	r3, r7, #20
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	68f9      	ldr	r1, [r7, #12]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff ff75 	bl	800abac <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800acc2:	f107 0314 	add.w	r3, r7, #20
 800acc6:	4619      	mov	r1, r3
 800acc8:	69f8      	ldr	r0, [r7, #28]
 800acca:	47a0      	blx	r4
 800accc:	f107 0314 	add.w	r3, r7, #20
 800acd0:	4618      	mov	r0, r3
 800acd2:	f001 ffe0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	7b1b      	ldrb	r3, [r3, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d013      	beq.n	800ad06 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3310      	adds	r3, #16
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	6892      	ldr	r2, [r2, #8]
 800acea:	1c50      	adds	r0, r2, #1
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	6891      	ldr	r1, [r2, #8]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	440a      	add	r2, r1
 800acf4:	4601      	mov	r1, r0
 800acf6:	69f8      	ldr	r0, [r7, #28]
 800acf8:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	689a      	ldr	r2, [r3, #8]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	441a      	add	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	3320      	adds	r3, #32
 800ad0a:	69f9      	ldr	r1, [r7, #28]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f010 fd89 	bl	801b824 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800ad12:	69fb      	ldr	r3, [r7, #28]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3724      	adds	r7, #36	; 0x24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd90      	pop	{r4, r7, pc}
 800ad1c:	08023b0c 	.word	0x08023b0c

0800ad20 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800ad20:	b5b0      	push	{r4, r5, r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	605a      	str	r2, [r3, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685d      	ldr	r5, [r3, #4]
 800ad36:	22b1      	movs	r2, #177	; 0xb1
 800ad38:	490a      	ldr	r1, [pc, #40]	; (800ad64 <_ZN11MockSupport16createActualCallEv+0x44>)
 800ad3a:	202c      	movs	r0, #44	; 0x2c
 800ad3c:	f7ff f830 	bl	8009da0 <_ZnwjPKci>
 800ad40:	4604      	mov	r4, r0
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	691a      	ldr	r2, [r3, #16]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	3320      	adds	r3, #32
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f00c fbdb 	bl	8017508 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bdb0      	pop	{r4, r5, r7, pc}
 800ad62:	bf00      	nop
 800ad64:	08023b0c 	.word	0x08023b0c

0800ad68 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00d      	beq.n	800ad98 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3320      	adds	r3, #32
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f010 fd2a 	bl	801b7dc <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	f083 0301 	eor.w	r3, r3, #1
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e000      	b.n	800ad9a <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800ada2:	b590      	push	{r4, r7, lr}
 800ada4:	b087      	sub	sp, #28
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800adac:	f107 030c 	add.w	r3, r7, #12
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7ff fef9 	bl	800abac <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d014      	beq.n	800adec <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	33c4      	adds	r3, #196	; 0xc4
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4610      	mov	r0, r2
 800add2:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add8:	2b00      	cmp	r3, #0
 800adda:	d004      	beq.n	800ade6 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	3204      	adds	r2, #4
 800ade0:	6812      	ldr	r2, [r2, #0]
 800ade2:	4618      	mov	r0, r3
 800ade4:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800adf2:	f083 0301 	eor.w	r3, r3, #1
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d004      	beq.n	800ae06 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800adfc:	f00e fcbe 	bl	801977c <_ZN21MockIgnoredActualCall8instanceEv>
 800ae00:	4603      	mov	r3, r0
 800ae02:	461c      	mov	r4, r3
 800ae04:	e02f      	b.n	800ae66 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00b      	beq.n	800ae28 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800ae10:	f00e fc6e 	bl	80196f0 <_ZN19MockActualCallTrace8instanceEv>
 800ae14:	4603      	mov	r3, r0
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	3208      	adds	r2, #8
 800ae1a:	6812      	ldr	r2, [r2, #0]
 800ae1c:	f107 010c 	add.w	r1, r7, #12
 800ae20:	4618      	mov	r0, r3
 800ae22:	4790      	blx	r2
 800ae24:	4604      	mov	r4, r0
 800ae26:	e01e      	b.n	800ae66 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800ae28:	f107 030c 	add.w	r3, r7, #12
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff ff9a 	bl	800ad68 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d004      	beq.n	800ae44 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800ae3a:	f00e fc9f 	bl	801977c <_ZN21MockIgnoredActualCall8instanceEv>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	461c      	mov	r4, r3
 800ae42:	e010      	b.n	800ae66 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	33c0      	adds	r3, #192	; 0xc0
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	4798      	blx	r3
 800ae50:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3308      	adds	r3, #8
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f107 020c 	add.w	r2, r7, #12
 800ae5e:	4611      	mov	r1, r2
 800ae60:	6978      	ldr	r0, [r7, #20]
 800ae62:	4798      	blx	r3
    return *call;
 800ae64:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800ae66:	f107 030c 	add.w	r3, r7, #12
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f001 ff13 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800ae70:	4623      	mov	r3, r4
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	371c      	adds	r7, #28
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd90      	pop	{r4, r7, pc}

0800ae7a <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3338      	adds	r3, #56	; 0x38
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f014 f819 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01a      	beq.n	800aed2 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800ae9c:	68f9      	ldr	r1, [r7, #12]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fc32 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bf14      	ite	ne
 800aeaa:	2301      	movne	r3, #1
 800aeac:	2300      	moveq	r3, #0
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d009      	beq.n	800aec8 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800aeb4:	68f9      	ldr	r1, [r7, #12]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fc26 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800aebc:	4603      	mov	r3, r0
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	3290      	adds	r2, #144	; 0x90
 800aec2:	6812      	ldr	r2, [r2, #0]
 800aec4:	4618      	mov	r0, r3
 800aec6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f013 ff05 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	e7e1      	b.n	800ae96 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800aed2:	bf00      	nop
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3338      	adds	r3, #56	; 0x38
 800aeee:	4618      	mov	r0, r3
 800aef0:	f013 ffe9 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800aef4:	60f8      	str	r0, [r7, #12]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d01a      	beq.n	800af32 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800aefc:	68f9      	ldr	r1, [r7, #12]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fc02 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	bf14      	ite	ne
 800af0a:	2301      	movne	r3, #1
 800af0c:	2300      	moveq	r3, #0
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b00      	cmp	r3, #0
 800af12:	d009      	beq.n	800af28 <_ZN11MockSupport7disableEv+0x4e>
 800af14:	68f9      	ldr	r1, [r7, #12]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fbf6 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af1c:	4603      	mov	r3, r0
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	3284      	adds	r2, #132	; 0x84
 800af22:	6812      	ldr	r2, [r2, #0]
 800af24:	4618      	mov	r0, r3
 800af26:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f013 fed5 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	e7e1      	b.n	800aef6 <_ZN11MockSupport7disableEv+0x1c>
}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b084      	sub	sp, #16
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	3338      	adds	r3, #56	; 0x38
 800af4e:	4618      	mov	r0, r3
 800af50:	f013 ffb9 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800af54:	60f8      	str	r0, [r7, #12]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d01a      	beq.n	800af92 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800af5c:	68f9      	ldr	r1, [r7, #12]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fbd2 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	bf14      	ite	ne
 800af6a:	2301      	movne	r3, #1
 800af6c:	2300      	moveq	r3, #0
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	d009      	beq.n	800af88 <_ZN11MockSupport6enableEv+0x4e>
 800af74:	68f9      	ldr	r1, [r7, #12]
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fbc6 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800af7c:	4603      	mov	r3, r0
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	3288      	adds	r2, #136	; 0x88
 800af82:	6812      	ldr	r2, [r2, #0]
 800af84:	4618      	mov	r0, r3
 800af86:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f013 fea5 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	e7e1      	b.n	800af56 <_ZN11MockSupport6enableEv+0x1c>
}
 800af92:	bf00      	nop
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b084      	sub	sp, #16
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	460b      	mov	r3, r1
 800afa4:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	78fa      	ldrb	r2, [r7, #3]
 800afaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3338      	adds	r3, #56	; 0x38
 800afb2:	4618      	mov	r0, r3
 800afb4:	f013 ff87 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01b      	beq.n	800aff8 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800afc0:	68f9      	ldr	r1, [r7, #12]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fba0 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	bf14      	ite	ne
 800afce:	2301      	movne	r3, #1
 800afd0:	2300      	moveq	r3, #0
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00a      	beq.n	800afee <_ZN11MockSupport7tracingEb+0x54>
 800afd8:	68f9      	ldr	r1, [r7, #12]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fb94 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800afe0:	4603      	mov	r3, r0
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	328c      	adds	r2, #140	; 0x8c
 800afe6:	6812      	ldr	r2, [r2, #0]
 800afe8:	78f9      	ldrb	r1, [r7, #3]
 800afea:	4618      	mov	r0, r3
 800afec:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f013 fe72 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	e7e0      	b.n	800afba <_ZN11MockSupport7tracingEb+0x20>
}
 800aff8:	bf00      	nop
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3320      	adds	r3, #32
 800b00c:	4618      	mov	r0, r3
 800b00e:	f010 fbc1 	bl	801b794 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800b012:	4603      	mov	r3, r0
 800b014:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	3338      	adds	r3, #56	; 0x38
 800b01a:	4618      	mov	r0, r3
 800b01c:	f013 ff53 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800b020:	60b8      	str	r0, [r7, #8]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d01f      	beq.n	800b068 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fb6c 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	bf14      	ite	ne
 800b036:	2301      	movne	r3, #1
 800b038:	2300      	moveq	r3, #0
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00e      	beq.n	800b05e <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800b040:	68b9      	ldr	r1, [r7, #8]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fb60 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b048:	4603      	mov	r3, r0
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	3298      	adds	r2, #152	; 0x98
 800b04e:	6812      	ldr	r2, [r2, #0]
 800b050:	4618      	mov	r0, r3
 800b052:	4790      	blx	r2
 800b054:	4603      	mov	r3, r0
 800b056:	461a      	mov	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4413      	add	r3, r2
 800b05c:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b05e:	68b8      	ldr	r0, [r7, #8]
 800b060:	f013 fe3a 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800b064:	60b8      	str	r0, [r7, #8]
 800b066:	e7dc      	b.n	800b022 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	bf14      	ite	ne
 800b06e:	2301      	movne	r3, #1
 800b070:	2300      	moveq	r3, #0
 800b072:	b2db      	uxtb	r3, r3
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d010      	beq.n	800b0ae <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	33bc      	adds	r3, #188	; 0xbc
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4610      	mov	r0, r2
 800b09c:	4798      	blx	r3
 800b09e:	4603      	mov	r3, r0
 800b0a0:	f083 0301 	eor.w	r3, r3, #1
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e000      	b.n	800b0b0 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d001      	beq.n	800b0b8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	e02a      	b.n	800b10e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3338      	adds	r3, #56	; 0x38
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f013 ff02 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d020      	beq.n	800b10c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800b0ca:	68f9      	ldr	r1, [r7, #12]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fb1b 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00f      	beq.n	800b0f8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b0d8:	68f9      	ldr	r1, [r7, #12]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fb14 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff ffca 	bl	800b07c <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f083 0301 	eor.w	r3, r3, #1
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e000      	b.n	800b0fa <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800b0fe:	2300      	movs	r3, #0
 800b100:	e005      	b.n	800b10e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f013 fde8 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	e7db      	b.n	800b0c4 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800b10c:	2301      	movs	r3, #1
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b092      	sub	sp, #72	; 0x48
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b11e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b122:	4618      	mov	r0, r3
 800b124:	f010 fa2c 	bl	801b580 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f103 0220 	add.w	r2, r3, #32
 800b12e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b132:	4611      	mov	r1, r2
 800b134:	4618      	mov	r0, r3
 800b136:	f010 fbf3 	bl	801b920 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	3338      	adds	r3, #56	; 0x38
 800b13e:	4618      	mov	r0, r3
 800b140:	f013 fec1 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800b144:	6478      	str	r0, [r7, #68]	; 0x44
 800b146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d01d      	beq.n	800b188 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800b14c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fada 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	bf14      	ite	ne
 800b15a:	2301      	movne	r3, #1
 800b15c:	2300      	moveq	r3, #0
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00c      	beq.n	800b17e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b164:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 face 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b16c:	4603      	mov	r3, r0
 800b16e:	f103 0220 	add.w	r2, r3, #32
 800b172:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b176:	4611      	mov	r1, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f010 fbd1 	bl	801b920 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b17e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b180:	f013 fdaa 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800b184:	6478      	str	r0, [r7, #68]	; 0x44
 800b186:	e7de      	b.n	800b146 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	691a      	ldr	r2, [r3, #16]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	330c      	adds	r3, #12
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4610      	mov	r0, r2
 800b198:	4798      	blx	r3
 800b19a:	4601      	mov	r1, r0
 800b19c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b1a0:	f107 0308 	add.w	r3, r7, #8
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f011 f9f5 	bl	801c594 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	33c4      	adds	r3, #196	; 0xc4
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f107 0208 	add.w	r2, r7, #8
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b1bc:	f107 0308 	add.w	r3, r7, #8
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 fe6d 	bl	800bea0 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b1c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f010 f9ec 	bl	801b5a8 <_ZN21MockExpectedCallsListD1Ev>
}
 800b1d0:	bf00      	nop
 800b1d2:	3748      	adds	r7, #72	; 0x48
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b092      	sub	sp, #72	; 0x48
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800b1e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f010 f9cb 	bl	801b580 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f103 0220 	add.w	r2, r3, #32
 800b1f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f010 fb92 	bl	801b920 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	3338      	adds	r3, #56	; 0x38
 800b200:	4618      	mov	r0, r3
 800b202:	f013 fe60 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800b206:	6478      	str	r0, [r7, #68]	; 0x44
 800b208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d01d      	beq.n	800b24a <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800b20e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fa79 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bf14      	ite	ne
 800b21c:	2301      	movne	r3, #1
 800b21e:	2300      	moveq	r3, #0
 800b220:	b2db      	uxtb	r3, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00c      	beq.n	800b240 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800b226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fa6d 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b22e:	4603      	mov	r3, r0
 800b230:	f103 0220 	add.w	r2, r3, #32
 800b234:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b238:	4611      	mov	r1, r2
 800b23a:	4618      	mov	r0, r3
 800b23c:	f010 fb70 	bl	801b920 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b240:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b242:	f013 fd49 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800b246:	6478      	str	r0, [r7, #68]	; 0x44
 800b248:	e7de      	b.n	800b208 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	691a      	ldr	r2, [r3, #16]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	330c      	adds	r3, #12
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4610      	mov	r0, r2
 800b25a:	4798      	blx	r3
 800b25c:	4601      	mov	r1, r0
 800b25e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b262:	f107 0308 	add.w	r3, r7, #8
 800b266:	4618      	mov	r0, r3
 800b268:	f011 fa38 	bl	801c6dc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	33c4      	adds	r3, #196	; 0xc4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f107 0208 	add.w	r2, r7, #8
 800b278:	4611      	mov	r1, r2
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800b27e:	f107 0308 	add.w	r3, r7, #8
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fe2e 	bl	800bee4 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800b288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b28c:	4618      	mov	r0, r3
 800b28e:	f010 f98b 	bl	801b5a8 <_ZN21MockExpectedCallsListD1Ev>
}
 800b292:	bf00      	nop
 800b294:	3748      	adds	r7, #72	; 0x48
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b082      	sub	sp, #8
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
    clear();
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	339c      	adds	r3, #156	; 0x9c
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	691a      	ldr	r2, [r3, #16]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	3308      	adds	r3, #8
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	4798      	blx	r3
}
 800b2c4:	bf00      	nop
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800b2d4:	f008 fd0a 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f007 fb78 	bl	80129d0 <_ZN10UtestShell10countCheckEv>
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d008      	beq.n	800b30a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	33c4      	adds	r3, #196	; 0xc4
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4610      	mov	r0, r2
 800b308:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3338      	adds	r3, #56	; 0x38
 800b30e:	4618      	mov	r0, r3
 800b310:	f013 fdd9 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d023      	beq.n	800b364 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800b31c:	68f9      	ldr	r1, [r7, #12]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f9f2 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d009      	beq.n	800b33e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800b32a:	68f9      	ldr	r1, [r7, #12]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f9eb 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b332:	4603      	mov	r3, r0
 800b334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800b33a:	2301      	movs	r3, #1
 800b33c:	e000      	b.n	800b340 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800b33e:	2300      	movs	r3, #0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00a      	beq.n	800b35a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800b344:	68f9      	ldr	r1, [r7, #12]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f9de 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b34c:	4603      	mov	r3, r0
 800b34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	32c4      	adds	r2, #196	; 0xc4
 800b354:	6812      	ldr	r2, [r2, #0]
 800b356:	4618      	mov	r0, r3
 800b358:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f013 fcbc 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800b360:	60f8      	str	r0, [r7, #12]
 800b362:	e7d8      	b.n	800b316 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800b364:	bf00      	nop
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3320      	adds	r3, #32
 800b378:	4618      	mov	r0, r3
 800b37a:	f010 f947 	bl	801b60c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800b384:	2301      	movs	r3, #1
 800b386:	e027      	b.n	800b3d8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	3338      	adds	r3, #56	; 0x38
 800b38c:	4618      	mov	r0, r3
 800b38e:	f013 fd9a 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d01d      	beq.n	800b3d6 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800b39a:	68f9      	ldr	r1, [r7, #12]
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f9b3 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00c      	beq.n	800b3c2 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800b3a8:	68f9      	ldr	r1, [r7, #12]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f9ac 	bl	800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff ffda 	bl	800b36c <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e000      	b.n	800b3c4 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e005      	b.n	800b3d8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f013 fc83 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	e7de      	b.n	800b394 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff ff7d 	bl	800b2e8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff fe44 	bl	800b07c <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00a      	beq.n	800b410 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3398      	adds	r3, #152	; 0x98
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	4798      	blx	r3
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800b40c:	2301      	movs	r3, #1
 800b40e:	e000      	b.n	800b412 <_ZN11MockSupport17checkExpectationsEv+0x32>
 800b410:	2300      	movs	r3, #0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff fe7d 	bl	800b116 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7ff ffa5 	bl	800b36c <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7ff fed5 	bl	800b1d8 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800b42e:	bf00      	nop
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b082      	sub	sp, #8
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3338      	adds	r3, #56	; 0x38
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	4618      	mov	r0, r3
 800b448:	f013 fd0e 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	bf14      	ite	ne
 800b452:	2301      	movne	r3, #1
 800b454:	2300      	moveq	r3, #0
 800b456:	b2db      	uxtb	r3, r3
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800b460:	b590      	push	{r4, r7, lr}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	3338      	adds	r3, #56	; 0x38
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	4618      	mov	r0, r3
 800b472:	f013 fcf9 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b476:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d111      	bne.n	800b4a2 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800b47e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b482:	490a      	ldr	r1, [pc, #40]	; (800b4ac <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800b484:	2038      	movs	r0, #56	; 0x38
 800b486:	f7fe fc8b 	bl	8009da0 <_ZnwjPKci>
 800b48a:	4604      	mov	r4, r0
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	4620      	mov	r0, r4
 800b490:	f011 fd6e 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
 800b494:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	3338      	adds	r3, #56	; 0x38
 800b49a:	68f9      	ldr	r1, [r7, #12]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f013 fcad 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd90      	pop	{r4, r7, pc}
 800b4ac:	08023b0c 	.word	0x08023b0c

0800b4b0 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800b4be:	68b9      	ldr	r1, [r7, #8]
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f7ff ffcd 	bl	800b460 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800b4c6:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3344      	adds	r3, #68	; 0x44
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	6879      	ldr	r1, [r7, #4]
 800b4d4:	6978      	ldr	r0, [r7, #20]
 800b4d6:	4798      	blx	r3
}
 800b4d8:	bf00      	nop
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	3338      	adds	r3, #56	; 0x38
 800b4f0:	6879      	ldr	r1, [r7, #4]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f013 fcb8 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800b4f8:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d111      	bne.n	800b524 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800b500:	f107 0314 	add.w	r3, r7, #20
 800b504:	490b      	ldr	r1, [pc, #44]	; (800b534 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800b506:	4618      	mov	r0, r3
 800b508:	f001 f80d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800b50c:	f107 0314 	add.w	r3, r7, #20
 800b510:	4619      	mov	r1, r3
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f011 fd2c 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
 800b518:	f107 0314 	add.w	r3, r7, #20
 800b51c:	4618      	mov	r0, r3
 800b51e:	f001 fbba 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800b522:	e003      	b.n	800b52c <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800b524:	69f9      	ldr	r1, [r7, #28]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7ff f8a2 	bl	800a670 <_ZN14MockNamedValueC1ERKS_>
}
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	3720      	adds	r7, #32
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	08023b04 	.word	0x08023b04

0800b538 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800b538:	b590      	push	{r4, r7, lr}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800b542:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b546:	4927      	ldr	r1, [pc, #156]	; (800b5e4 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800b548:	2048      	movs	r0, #72	; 0x48
 800b54a:	f7fe fc29 	bl	8009da0 <_ZnwjPKci>
 800b54e:	4604      	mov	r4, r0
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	4620      	mov	r0, r4
 800b554:	f7ff f8f8 	bl	800a748 <_ZN11MockSupportC1ERK12SimpleString>
 800b558:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	33a4      	adds	r3, #164	; 0xa4
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	6952      	ldr	r2, [r2, #20]
 800b566:	4611      	mov	r1, r2
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b572:	2b00      	cmp	r3, #0
 800b574:	d005      	beq.n	800b582 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3390      	adds	r3, #144	; 0x90
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b588:	f083 0301 	eor.w	r3, r3, #1
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d005      	beq.n	800b59e <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3384      	adds	r3, #132	; 0x84
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	7b1b      	ldrb	r3, [r3, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d005      	beq.n	800b5b2 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	4798      	blx	r3

    newMock->tracing(tracing_);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	338c      	adds	r3, #140	; 0x8c
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	33b8      	adds	r3, #184	; 0xb8
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	3230      	adds	r2, #48	; 0x30
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	4798      	blx	r3
    return newMock;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd90      	pop	{r4, r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	08023b0c 	.word	0x08023b0c

0800b5e8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800b5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ea:	b0ab      	sub	sp, #172	; 0xac
 800b5ec:	af04      	add	r7, sp, #16
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800b5f2:	f107 0308 	add.w	r3, r7, #8
 800b5f6:	4941      	ldr	r1, [pc, #260]	; (800b6fc <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 ff94 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800b5fe:	f107 0308 	add.w	r3, r7, #8
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	4618      	mov	r0, r3
 800b606:	f001 fbc3 	bl	800cd90 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800b60a:	f107 0308 	add.w	r3, r7, #8
 800b60e:	4619      	mov	r1, r3
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7ff ff10 	bl	800b436 <_ZN11MockSupport7hasDataERK12SimpleString>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d048      	beq.n	800b6ae <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800b61c:	f008 fb66 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800b620:	4604      	mov	r4, r0
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	3324      	adds	r3, #36	; 0x24
 800b626:	681d      	ldr	r5, [r3, #0]
 800b628:	f107 0318 	add.w	r3, r7, #24
 800b62c:	f107 0208 	add.w	r2, r7, #8
 800b630:	6879      	ldr	r1, [r7, #4]
 800b632:	4618      	mov	r0, r3
 800b634:	f7ff ff54 	bl	800b4e0 <_ZN11MockSupport7getDataERK12SimpleString>
 800b638:	f107 0310 	add.w	r3, r7, #16
 800b63c:	f107 0218 	add.w	r2, r7, #24
 800b640:	4611      	mov	r1, r2
 800b642:	4618      	mov	r0, r3
 800b644:	f011 ff63 	bl	801d50e <_ZNK14MockNamedValue7getTypeEv>
 800b648:	f107 0310 	add.w	r3, r7, #16
 800b64c:	4618      	mov	r0, r3
 800b64e:	f001 faf5 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800b652:	4606      	mov	r6, r0
 800b654:	f008 fb5a 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800b658:	4603      	mov	r3, r0
 800b65a:	9302      	str	r3, [sp, #8]
 800b65c:	f240 13bd 	movw	r3, #445	; 0x1bd
 800b660:	9301      	str	r3, [sp, #4]
 800b662:	4b27      	ldr	r3, [pc, #156]	; (800b700 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	2300      	movs	r3, #0
 800b668:	4632      	mov	r2, r6
 800b66a:	4926      	ldr	r1, [pc, #152]	; (800b704 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800b66c:	4620      	mov	r0, r4
 800b66e:	47a8      	blx	r5
 800b670:	f107 0310 	add.w	r3, r7, #16
 800b674:	4618      	mov	r0, r3
 800b676:	f001 fb0e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800b67a:	f107 0318 	add.w	r3, r7, #24
 800b67e:	4618      	mov	r0, r3
 800b680:	f011 fca0 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800b684:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b688:	f107 0208 	add.w	r2, r7, #8
 800b68c:	6879      	ldr	r1, [r7, #4]
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff ff26 	bl	800b4e0 <_ZN11MockSupport7getDataERK12SimpleString>
 800b694:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b698:	4618      	mov	r0, r3
 800b69a:	f012 fa51 	bl	801db40 <_ZNK14MockNamedValue16getObjectPointerEv>
 800b69e:	4604      	mov	r4, r0
 800b6a0:	bf00      	nop
 800b6a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f011 fc8c 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800b6ac:	e01b      	b.n	800b6e6 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff ff41 	bl	800b538 <_ZN11MockSupport5cloneERK12SimpleString>
 800b6b6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800b6ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b6be:	4911      	ldr	r1, [pc, #68]	; (800b704 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 ff30 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800b6c6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800b6ca:	f107 0108 	add.w	r1, r7, #8
 800b6ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff feec 	bl	800b4b0 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800b6d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f001 fada 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return newMock;
 800b6e2:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800b6e6:	f107 0308 	add.w	r3, r7, #8
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f001 fad3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800b6f0:	4623      	mov	r3, r4
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	379c      	adds	r7, #156	; 0x9c
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	08023b24 	.word	0x08023b24
 800b700:	08023b0c 	.word	0x08023b0c
 800b704:	08023b44 	.word	0x08023b44

0800b708 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800b708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b70c:	b08b      	sub	sp, #44	; 0x2c
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800b714:	2500      	movs	r5, #0
 800b716:	2600      	movs	r6, #0
 800b718:	f107 0308 	add.w	r3, r7, #8
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	4618      	mov	r0, r3
 800b720:	f013 fb28 	bl	801ed74 <_ZNK22MockNamedValueListNode7getTypeEv>
 800b724:	f04f 0801 	mov.w	r8, #1
 800b728:	f107 0310 	add.w	r3, r7, #16
 800b72c:	492e      	ldr	r1, [pc, #184]	; (800b7e8 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 fef9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800b734:	f04f 0901 	mov.w	r9, #1
 800b738:	f107 0210 	add.w	r2, r7, #16
 800b73c:	f107 0308 	add.w	r3, r7, #8
 800b740:	4611      	mov	r1, r2
 800b742:	4618      	mov	r0, r3
 800b744:	f001 fab3 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d01a      	beq.n	800b784 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800b74e:	f107 0318 	add.w	r3, r7, #24
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	4618      	mov	r0, r3
 800b756:	f013 fafa 	bl	801ed4e <_ZNK22MockNamedValueListNode7getNameEv>
 800b75a:	2501      	movs	r5, #1
 800b75c:	f107 0320 	add.w	r3, r7, #32
 800b760:	4922      	ldr	r1, [pc, #136]	; (800b7ec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800b762:	4618      	mov	r0, r3
 800b764:	f000 fedf 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800b768:	2601      	movs	r6, #1
 800b76a:	f107 0220 	add.w	r2, r7, #32
 800b76e:	f107 0318 	add.w	r3, r7, #24
 800b772:	4611      	mov	r1, r2
 800b774:	4618      	mov	r0, r3
 800b776:	f000 ff54 	bl	800c622 <_ZNK12SimpleString8containsERKS_>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d001      	beq.n	800b784 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800b780:	2401      	movs	r4, #1
 800b782:	e000      	b.n	800b786 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800b784:	2400      	movs	r4, #0
 800b786:	2e00      	cmp	r6, #0
 800b788:	d004      	beq.n	800b794 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800b78a:	f107 0320 	add.w	r3, r7, #32
 800b78e:	4618      	mov	r0, r3
 800b790:	f001 fa81 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800b794:	2d00      	cmp	r5, #0
 800b796:	d004      	beq.n	800b7a2 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800b798:	f107 0318 	add.w	r3, r7, #24
 800b79c:	4618      	mov	r0, r3
 800b79e:	f001 fa7a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800b7a2:	f1b9 0f00 	cmp.w	r9, #0
 800b7a6:	d004      	beq.n	800b7b2 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800b7a8:	f107 0310 	add.w	r3, r7, #16
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f001 fa72 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800b7b2:	f1b8 0f00 	cmp.w	r8, #0
 800b7b6:	d004      	beq.n	800b7c2 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800b7b8:	f107 0308 	add.w	r3, r7, #8
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f001 fa6a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800b7c2:	2c00      	cmp	r4, #0
 800b7c4:	d00a      	beq.n	800b7dc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800b7c6:	6838      	ldr	r0, [r7, #0]
 800b7c8:	f013 fa92 	bl	801ecf0 <_ZN22MockNamedValueListNode4itemEv>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	32a0      	adds	r2, #160	; 0xa0
 800b7d2:	6812      	ldr	r2, [r2, #0]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	4790      	blx	r2
 800b7d8:	4603      	mov	r3, r0
 800b7da:	e000      	b.n	800b7de <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	372c      	adds	r7, #44	; 0x2c
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7e8:	08023b44 	.word	0x08023b44
 800b7ec:	08023b24 	.word	0x08023b24

0800b7f0 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00a      	beq.n	800b818 <_ZN11MockSupport11returnValueEv+0x28>
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	3354      	adds	r3, #84	; 0x54
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	4610      	mov	r0, r2
 800b814:	4798      	blx	r3
 800b816:	e010      	b.n	800b83a <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800b818:	f107 0308 	add.w	r3, r7, #8
 800b81c:	4909      	ldr	r1, [pc, #36]	; (800b844 <_ZN11MockSupport11returnValueEv+0x54>)
 800b81e:	4618      	mov	r0, r3
 800b820:	f000 fe81 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800b824:	f107 0308 	add.w	r3, r7, #8
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f011 fba0 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
 800b830:	f107 0308 	add.w	r3, r7, #8
 800b834:	4618      	mov	r0, r3
 800b836:	f001 fa2e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	08023b04 	.word	0x08023b04

0800b848 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800b848:	b590      	push	{r4, r7, lr}
 800b84a:	b091      	sub	sp, #68	; 0x44
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	3320      	adds	r3, #32
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f107 0208 	add.w	r2, r7, #8
 800b85c:	6879      	ldr	r1, [r7, #4]
 800b85e:	4610      	mov	r0, r2
 800b860:	4798      	blx	r3
 800b862:	f107 0308 	add.w	r3, r7, #8
 800b866:	4618      	mov	r0, r3
 800b868:	f011 fe60 	bl	801d52c <_ZNK14MockNamedValue12getBoolValueEv>
 800b86c:	4603      	mov	r3, r0
 800b86e:	461c      	mov	r4, r3
 800b870:	bf00      	nop
 800b872:	f107 0308 	add.w	r3, r7, #8
 800b876:	4618      	mov	r0, r3
 800b878:	f011 fba4 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800b87c:	4623      	mov	r3, r4
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3744      	adds	r7, #68	; 0x44
 800b882:	46bd      	mov	sp, r7
 800b884:	bd90      	pop	{r4, r7, pc}

0800b886 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800b886:	b590      	push	{r4, r7, lr}
 800b888:	b091      	sub	sp, #68	; 0x44
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3320      	adds	r3, #32
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f107 0208 	add.w	r2, r7, #8
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	4610      	mov	r0, r2
 800b89e:	4798      	blx	r3
 800b8a0:	f107 0308 	add.w	r3, r7, #8
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f011 fe69 	bl	801d57c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	bf00      	nop
 800b8ae:	f107 0308 	add.w	r3, r7, #8
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f011 fb86 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800b8b8:	4623      	mov	r3, r4
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3744      	adds	r7, #68	; 0x44
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd90      	pop	{r4, r7, pc}

0800b8c2 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800b8c2:	b590      	push	{r4, r7, lr}
 800b8c4:	b091      	sub	sp, #68	; 0x44
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3320      	adds	r3, #32
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f107 0208 	add.w	r2, r7, #8
 800b8d6:	6879      	ldr	r1, [r7, #4]
 800b8d8:	4610      	mov	r0, r2
 800b8da:	4798      	blx	r3
 800b8dc:	f107 0308 	add.w	r3, r7, #8
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f011 fe9b 	bl	801d61c <_ZNK14MockNamedValue11getIntValueEv>
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	bf00      	nop
 800b8ea:	f107 0308 	add.w	r3, r7, #8
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f011 fb68 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800b8f4:	4623      	mov	r3, r4
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3744      	adds	r7, #68	; 0x44
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd90      	pop	{r4, r7, pc}

0800b8fe <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	331c      	adds	r3, #28
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	4798      	blx	r3
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d007      	beq.n	800b92a <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	335c      	adds	r3, #92	; 0x5c
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	4798      	blx	r3
 800b926:	4603      	mov	r3, r0
 800b928:	e000      	b.n	800b92c <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800b92a:	683b      	ldr	r3, [r7, #0]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	331c      	adds	r3, #28
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	4798      	blx	r3
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00a      	beq.n	800b968 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	3368      	adds	r3, #104	; 0x68
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	4798      	blx	r3
 800b95e:	eeb0 7a40 	vmov.f32	s14, s0
 800b962:	eef0 7a60 	vmov.f32	s15, s1
 800b966:	e001      	b.n	800b96c <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800b968:	ed97 7b00 	vldr	d7, [r7]
}
 800b96c:	eeb0 0a47 	vmov.f32	s0, s14
 800b970:	eef0 0a67 	vmov.f32	s1, s15
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	331c      	adds	r3, #28
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	4798      	blx	r3
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d007      	beq.n	800b9a6 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3338      	adds	r3, #56	; 0x38
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	4798      	blx	r3
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	e000      	b.n	800b9a8 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800b9a6:	683b      	ldr	r3, [r7, #0]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3708      	adds	r7, #8
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	331c      	adds	r3, #28
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	4798      	blx	r3
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d007      	beq.n	800b9de <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3324      	adds	r3, #36	; 0x24
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	4798      	blx	r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	e000      	b.n	800b9e0 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800b9de:	78fb      	ldrb	r3, [r7, #3]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	331c      	adds	r3, #28
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	4798      	blx	r3
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d007      	beq.n	800ba14 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	332c      	adds	r3, #44	; 0x2c
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	4798      	blx	r3
 800ba10:	4603      	mov	r3, r0
 800ba12:	e000      	b.n	800ba16 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800ba14:	683b      	ldr	r3, [r7, #0]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	331c      	adds	r3, #28
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	4798      	blx	r3
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d007      	beq.n	800ba4a <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3334      	adds	r3, #52	; 0x34
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	4798      	blx	r3
 800ba46:	4603      	mov	r3, r0
 800ba48:	e000      	b.n	800ba4c <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800ba4a:	683b      	ldr	r3, [r7, #0]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	331c      	adds	r3, #28
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	4798      	blx	r3
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d007      	beq.n	800ba80 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3340      	adds	r3, #64	; 0x40
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	4798      	blx	r3
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	e000      	b.n	800ba82 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800ba80:	683b      	ldr	r3, [r7, #0]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800ba8a:	b590      	push	{r4, r7, lr}
 800ba8c:	b091      	sub	sp, #68	; 0x44
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3320      	adds	r3, #32
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f107 0208 	add.w	r2, r7, #8
 800ba9e:	6879      	ldr	r1, [r7, #4]
 800baa0:	4610      	mov	r0, r2
 800baa2:	4798      	blx	r3
 800baa4:	f107 0308 	add.w	r3, r7, #8
 800baa8:	4618      	mov	r0, r3
 800baaa:	f011 fddf 	bl	801d66c <_ZNK14MockNamedValue15getLongIntValueEv>
 800baae:	4604      	mov	r4, r0
 800bab0:	bf00      	nop
 800bab2:	f107 0308 	add.w	r3, r7, #8
 800bab6:	4618      	mov	r0, r3
 800bab8:	f011 fa84 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800babc:	4623      	mov	r3, r4
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3744      	adds	r7, #68	; 0x44
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd90      	pop	{r4, r7, pc}

0800bac6 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800bac6:	b590      	push	{r4, r7, lr}
 800bac8:	b091      	sub	sp, #68	; 0x44
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3320      	adds	r3, #32
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f107 0208 	add.w	r2, r7, #8
 800bada:	6879      	ldr	r1, [r7, #4]
 800badc:	4610      	mov	r0, r2
 800bade:	4798      	blx	r3
 800bae0:	f107 0308 	add.w	r3, r7, #8
 800bae4:	4618      	mov	r0, r3
 800bae6:	f011 fe23 	bl	801d730 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800baea:	4604      	mov	r4, r0
 800baec:	bf00      	nop
 800baee:	f107 0308 	add.w	r3, r7, #8
 800baf2:	4618      	mov	r0, r3
 800baf4:	f011 fa66 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800baf8:	4623      	mov	r3, r4
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3744      	adds	r7, #68	; 0x44
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd90      	pop	{r4, r7, pc}
	...

0800bb04 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800bb04:	b5b0      	push	{r4, r5, r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af02      	add	r7, sp, #8
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800bb0e:	f008 f8ed 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800bb12:	4604      	mov	r4, r0
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	3368      	adds	r3, #104	; 0x68
 800bb18:	681d      	ldr	r5, [r3, #0]
 800bb1a:	f008 f8f7 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	f240 2345 	movw	r3, #581	; 0x245
 800bb26:	4a06      	ldr	r2, [pc, #24]	; (800bb40 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800bb28:	4906      	ldr	r1, [pc, #24]	; (800bb44 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	47a8      	blx	r5
    return cpputest_longlong(0);
 800bb2e:	2100      	movs	r1, #0
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7fe fd2f 	bl	800a594 <_ZN17cpputest_longlongC1Ei>
}
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bdb0      	pop	{r4, r5, r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	08023b0c 	.word	0x08023b0c
 800bb44:	08023b50 	.word	0x08023b50

0800bb48 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800bb48:	b5b0      	push	{r4, r5, r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800bb52:	f008 f8cb 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800bb56:	4604      	mov	r4, r0
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	3368      	adds	r3, #104	; 0x68
 800bb5c:	681d      	ldr	r5, [r3, #0]
 800bb5e:	f008 f8d5 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bb62:	4603      	mov	r3, r0
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	f240 234b 	movw	r3, #587	; 0x24b
 800bb6a:	4a06      	ldr	r2, [pc, #24]	; (800bb84 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800bb6c:	4906      	ldr	r1, [pc, #24]	; (800bb88 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800bb6e:	4620      	mov	r0, r4
 800bb70:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800bb72:	2100      	movs	r1, #0
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7fe fd19 	bl	800a5ac <_ZN18cpputest_ulonglongC1Ei>
}
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bdb0      	pop	{r4, r5, r7, pc}
 800bb82:	bf00      	nop
 800bb84:	08023b0c 	.word	0x08023b0c
 800bb88:	08023b70 	.word	0x08023b70

0800bb8c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800bb8c:	b5b0      	push	{r4, r5, r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af02      	add	r7, sp, #8
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	4639      	mov	r1, r7
 800bb98:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800bb9c:	f008 f8a6 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800bba0:	4604      	mov	r4, r0
 800bba2:	6823      	ldr	r3, [r4, #0]
 800bba4:	3368      	adds	r3, #104	; 0x68
 800bba6:	681d      	ldr	r5, [r3, #0]
 800bba8:	f008 f8b0 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bbac:	4603      	mov	r3, r0
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	f240 2351 	movw	r3, #593	; 0x251
 800bbb4:	4a06      	ldr	r2, [pc, #24]	; (800bbd0 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800bbb6:	4907      	ldr	r1, [pc, #28]	; (800bbd4 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800bbb8:	4620      	mov	r0, r4
 800bbba:	47a8      	blx	r5
    return defaultValue;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	463b      	mov	r3, r7
 800bbc2:	cb03      	ldmia	r3!, {r0, r1}
 800bbc4:	6010      	str	r0, [r2, #0]
 800bbc6:	6051      	str	r1, [r2, #4]
}
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bdb0      	pop	{r4, r5, r7, pc}
 800bbd0:	08023b0c 	.word	0x08023b0c
 800bbd4:	08023b50 	.word	0x08023b50

0800bbd8 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800bbd8:	b5b0      	push	{r4, r5, r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af02      	add	r7, sp, #8
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	4639      	mov	r1, r7
 800bbe4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800bbe8:	f008 f880 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800bbec:	4604      	mov	r4, r0
 800bbee:	6823      	ldr	r3, [r4, #0]
 800bbf0:	3368      	adds	r3, #104	; 0x68
 800bbf2:	681d      	ldr	r5, [r3, #0]
 800bbf4:	f008 f88a 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	f240 2357 	movw	r3, #599	; 0x257
 800bc00:	4a06      	ldr	r2, [pc, #24]	; (800bc1c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800bc02:	4907      	ldr	r1, [pc, #28]	; (800bc20 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800bc04:	4620      	mov	r0, r4
 800bc06:	47a8      	blx	r5
    return defaultValue;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	463b      	mov	r3, r7
 800bc0e:	cb03      	ldmia	r3!, {r0, r1}
 800bc10:	6010      	str	r0, [r2, #0]
 800bc12:	6051      	str	r1, [r2, #4]
}
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bdb0      	pop	{r4, r5, r7, pc}
 800bc1c:	08023b0c 	.word	0x08023b0c
 800bc20:	08023b70 	.word	0x08023b70

0800bc24 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800bc24:	b590      	push	{r4, r7, lr}
 800bc26:	b091      	sub	sp, #68	; 0x44
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3320      	adds	r3, #32
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f107 0208 	add.w	r2, r7, #8
 800bc38:	6879      	ldr	r1, [r7, #4]
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	4798      	blx	r3
 800bc3e:	f107 0308 	add.w	r3, r7, #8
 800bc42:	4618      	mov	r0, r3
 800bc44:	f011 fea8 	bl	801d998 <_ZNK14MockNamedValue14getStringValueEv>
 800bc48:	4604      	mov	r4, r0
 800bc4a:	bf00      	nop
 800bc4c:	f107 0308 	add.w	r3, r7, #8
 800bc50:	4618      	mov	r0, r3
 800bc52:	f011 f9b7 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800bc56:	4623      	mov	r3, r4
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3744      	adds	r7, #68	; 0x44
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd90      	pop	{r4, r7, pc}

0800bc60 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	ed2d 8b02 	vpush	{d8}
 800bc66:	b090      	sub	sp, #64	; 0x40
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	3320      	adds	r3, #32
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f107 0208 	add.w	r2, r7, #8
 800bc78:	6879      	ldr	r1, [r7, #4]
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	4798      	blx	r3
 800bc7e:	f107 0308 	add.w	r3, r7, #8
 800bc82:	4618      	mov	r0, r3
 800bc84:	f011 fe2c 	bl	801d8e0 <_ZNK14MockNamedValue14getDoubleValueEv>
 800bc88:	eeb0 8a40 	vmov.f32	s16, s0
 800bc8c:	eef0 8a60 	vmov.f32	s17, s1
 800bc90:	bf00      	nop
 800bc92:	f107 0308 	add.w	r3, r7, #8
 800bc96:	4618      	mov	r0, r3
 800bc98:	f011 f994 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800bc9c:	eeb0 7a48 	vmov.f32	s14, s16
 800bca0:	eef0 7a68 	vmov.f32	s15, s17
}
 800bca4:	eeb0 0a47 	vmov.f32	s0, s14
 800bca8:	eef0 0a67 	vmov.f32	s1, s15
 800bcac:	3740      	adds	r7, #64	; 0x40
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	ecbd 8b02 	vpop	{d8}
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b082      	sub	sp, #8
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
 800bcbe:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	331c      	adds	r3, #28
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	4798      	blx	r3
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d007      	beq.n	800bce2 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	336c      	adds	r3, #108	; 0x6c
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	4798      	blx	r3
 800bcde:	4603      	mov	r3, r0
 800bce0:	e000      	b.n	800bce4 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800bce2:	683b      	ldr	r3, [r7, #0]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	331c      	adds	r3, #28
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	4798      	blx	r3
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d007      	beq.n	800bd18 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3378      	adds	r3, #120	; 0x78
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	4798      	blx	r3
 800bd14:	4603      	mov	r3, r0
 800bd16:	e000      	b.n	800bd1a <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800bd18:	683b      	ldr	r3, [r7, #0]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	331c      	adds	r3, #28
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	4798      	blx	r3
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d007      	beq.n	800bd4e <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	3380      	adds	r3, #128	; 0x80
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	4798      	blx	r3
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	e000      	b.n	800bd50 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800bd4e:	683b      	ldr	r3, [r7, #0]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800bd58:	b590      	push	{r4, r7, lr}
 800bd5a:	b091      	sub	sp, #68	; 0x44
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3320      	adds	r3, #32
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f107 0208 	add.w	r2, r7, #8
 800bd6c:	6879      	ldr	r1, [r7, #4]
 800bd6e:	4610      	mov	r0, r2
 800bd70:	4798      	blx	r3
 800bd72:	f107 0308 	add.w	r3, r7, #8
 800bd76:	4618      	mov	r0, r3
 800bd78:	f011 fe36 	bl	801d9e8 <_ZNK14MockNamedValue15getPointerValueEv>
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	bf00      	nop
 800bd80:	f107 0308 	add.w	r3, r7, #8
 800bd84:	4618      	mov	r0, r3
 800bd86:	f011 f91d 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800bd8a:	4623      	mov	r3, r4
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3744      	adds	r7, #68	; 0x44
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd90      	pop	{r4, r7, pc}

0800bd94 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800bd94:	b590      	push	{r4, r7, lr}
 800bd96:	b091      	sub	sp, #68	; 0x44
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3320      	adds	r3, #32
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f107 0208 	add.w	r2, r7, #8
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	4610      	mov	r0, r2
 800bdac:	4798      	blx	r3
 800bdae:	f107 0308 	add.w	r3, r7, #8
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f011 fe40 	bl	801da38 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800bdb8:	4604      	mov	r4, r0
 800bdba:	bf00      	nop
 800bdbc:	f107 0308 	add.w	r3, r7, #8
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f011 f8ff 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800bdc6:	4623      	mov	r3, r4
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3744      	adds	r7, #68	; 0x44
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd90      	pop	{r4, r7, pc}

0800bdd0 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800bdd0:	b590      	push	{r4, r7, lr}
 800bdd2:	b091      	sub	sp, #68	; 0x44
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3320      	adds	r3, #32
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f107 0208 	add.w	r2, r7, #8
 800bde4:	6879      	ldr	r1, [r7, #4]
 800bde6:	4610      	mov	r0, r2
 800bde8:	4798      	blx	r3
 800bdea:	f107 0308 	add.w	r3, r7, #8
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f011 fe4a 	bl	801da88 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	bf00      	nop
 800bdf8:	f107 0308 	add.w	r3, r7, #8
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f011 f8e1 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 800be02:	4623      	mov	r3, r4
}
 800be04:	4618      	mov	r0, r3
 800be06:	3744      	adds	r7, #68	; 0x44
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd90      	pop	{r4, r7, pc}

0800be0c <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00a      	beq.n	800be32 <_ZN11MockSupport14hasReturnValueEv+0x26>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3350      	adds	r3, #80	; 0x50
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4610      	mov	r0, r2
 800be2c:	4798      	blx	r3
 800be2e:	4603      	mov	r3, r0
 800be30:	e000      	b.n	800be34 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <_Z41__static_initialization_and_destruction_0ii>:
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d115      	bne.n	800be78 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be52:	4293      	cmp	r3, r2
 800be54:	d110      	bne.n	800be78 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800be56:	f107 0308 	add.w	r3, r7, #8
 800be5a:	490f      	ldr	r1, [pc, #60]	; (800be98 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 fb62 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800be62:	f107 0308 	add.w	r3, r7, #8
 800be66:	4619      	mov	r1, r3
 800be68:	480c      	ldr	r0, [pc, #48]	; (800be9c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800be6a:	f7fe fc6d 	bl	800a748 <_ZN11MockSupportC1ERK12SimpleString>
 800be6e:	f107 0308 	add.w	r3, r7, #8
 800be72:	4618      	mov	r0, r3
 800be74:	f000 ff0f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d107      	bne.n	800be8e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be84:	4293      	cmp	r3, r2
 800be86:	d102      	bne.n	800be8e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800be88:	4804      	ldr	r0, [pc, #16]	; (800be9c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800be8a:	f7fe fca7 	bl	800a7dc <_ZN11MockSupportD1Ev>
}
 800be8e:	bf00      	nop
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	08023b04 	.word	0x08023b04
 800be9c:	200007f4 	.word	0x200007f4

0800bea0 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	4a05      	ldr	r2, [pc, #20]	; (800bec0 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fe fbbb 	bl	800a62c <_ZN11MockFailureD1Ev>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4618      	mov	r0, r3
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	08027820 	.word	0x08027820

0800bec4 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ffe7 	bl	800bea0 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800bed2:	2134      	movs	r1, #52	; 0x34
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7fd ff77 	bl	8009dc8 <_ZdlPvj>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	4a05      	ldr	r2, [pc, #20]	; (800bf04 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	601a      	str	r2, [r3, #0]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fe fb99 	bl	800a62c <_ZN11MockFailureD1Ev>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	080277f4 	.word	0x080277f4

0800bf08 <_ZN20MockCallOrderFailureD0Ev>:
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7ff ffe7 	bl	800bee4 <_ZN20MockCallOrderFailureD1Ev>
 800bf16:	2134      	movs	r1, #52	; 0x34
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7fd ff55 	bl	8009dc8 <_ZdlPvj>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf30:	2001      	movs	r0, #1
 800bf32:	f7ff ff83 	bl	800be3c <_Z41__static_initialization_and_destruction_0ii>
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf40:	2000      	movs	r0, #0
 800bf42:	f7ff ff7b 	bl	800be3c <_Z41__static_initialization_and_destruction_0ii>
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800bf50:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <_ZN11SimpleMutexC1Ev+0x20>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4798      	blx	r3
 800bf56:	4602      	mov	r2, r0
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	601a      	str	r2, [r3, #0]
}
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	200000f0 	.word	0x200000f0

0800bf6c <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800bf74:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <_ZN11SimpleMutexD1Ev+0x20>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	6812      	ldr	r2, [r2, #0]
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	4798      	blx	r3
}
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4618      	mov	r0, r3
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	200000fc 	.word	0x200000fc

0800bf90 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800bf98:	4b04      	ldr	r3, [pc, #16]	; (800bfac <_ZN11SimpleMutex4LockEv+0x1c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	6812      	ldr	r2, [r2, #0]
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	4798      	blx	r3
}
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	200000f4 	.word	0x200000f4

0800bfb0 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800bfb8:	4b04      	ldr	r3, [pc, #16]	; (800bfcc <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	6812      	ldr	r2, [r2, #0]
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	4798      	blx	r3
}
 800bfc4:	bf00      	nop
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	200000f8 	.word	0x200000f8

0800bfd0 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7ff ffd3 	bl	800bf90 <_ZN11SimpleMutex4LockEv>
}
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4618      	mov	r0, r3
 800c002:	f7ff ffd5 	bl	800bfb0 <_ZN11SimpleMutex6UnlockEv>
}
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4618      	mov	r0, r3
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800c010:	b580      	push	{r7, lr}
 800c012:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800c014:	4b05      	ldr	r3, [pc, #20]	; (800c02c <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d103      	bne.n	800c024 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800c01c:	f003 fd7a 	bl	800fb14 <_Z24defaultNewArrayAllocatorv>
 800c020:	4603      	mov	r3, r0
 800c022:	e001      	b.n	800c028 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800c024:	4b01      	ldr	r3, [pc, #4]	; (800c02c <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800c026:	681b      	ldr	r3, [r3, #0]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	2000083c 	.word	0x2000083c

0800c030 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800c030:	b590      	push	{r4, r7, lr}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800c03c:	f7ff ffe8 	bl	800c010 <_ZN12SimpleString18getStringAllocatorEv>
 800c040:	6803      	ldr	r3, [r0, #0]
 800c042:	3308      	adds	r3, #8
 800c044:	681c      	ldr	r4, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	68f9      	ldr	r1, [r7, #12]
 800c04c:	47a0      	blx	r4
 800c04e:	4603      	mov	r3, r0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	bd90      	pop	{r4, r7, pc}

0800c058 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800c058:	b590      	push	{r4, r7, lr}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af02      	add	r7, sp, #8
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800c066:	f7ff ffd3 	bl	800c010 <_ZN12SimpleString18getStringAllocatorEv>
 800c06a:	6803      	ldr	r3, [r0, #0]
 800c06c:	330c      	adds	r3, #12
 800c06e:	681c      	ldr	r4, [r3, #0]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	68f9      	ldr	r1, [r7, #12]
 800c07a:	47a0      	blx	r4
}
 800c07c:	bf00      	nop
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	bd90      	pop	{r4, r7, pc}

0800c084 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800c08c:	2284      	movs	r2, #132	; 0x84
 800c08e:	4906      	ldr	r1, [pc, #24]	; (800c0a8 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800c090:	2001      	movs	r0, #1
 800c092:	f7ff ffcd 	bl	800c030 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c096:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	701a      	strb	r2, [r3, #0]
    return empty;
 800c09e:	68fb      	ldr	r3, [r7, #12]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	08023b9c 	.word	0x08023b9c

0800c0ac <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f001 f809 	bl	800d0d0 <_ZN12SimpleString7isSpaceEc>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d003      	beq.n	800c0cc <_ZN12SimpleString4AtoUEPKc+0x20>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	607b      	str	r3, [r7, #4]
 800c0ca:	e7f3      	b.n	800c0b4 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 ffe7 	bl	800d0a8 <_ZN12SimpleString7isDigitEc>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d005      	beq.n	800c0ec <_ZN12SimpleString4AtoUEPKc+0x40>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b2f      	cmp	r3, #47	; 0x2f
 800c0e6:	d901      	bls.n	800c0ec <_ZN12SimpleString4AtoUEPKc+0x40>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e000      	b.n	800c0ee <_ZN12SimpleString4AtoUEPKc+0x42>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d010      	beq.n	800c114 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	005b      	lsls	r3, r3, #1
 800c0fc:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	461a      	mov	r2, r3
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	4413      	add	r3, r2
 800c108:	3b30      	subs	r3, #48	; 0x30
 800c10a:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	3301      	adds	r3, #1
 800c110:	607b      	str	r3, [r7, #4]
 800c112:	e7dd      	b.n	800c0d0 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800c114:	68fb      	ldr	r3, [r7, #12]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b084      	sub	sp, #16
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f000 ffd0 	bl	800d0d0 <_ZN12SimpleString7isSpaceEc>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <_ZN12SimpleString4AtoIEPKc+0x20>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	3301      	adds	r3, #1
 800c13a:	607b      	str	r3, [r7, #4]
 800c13c:	e7f3      	b.n	800c126 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800c144:	7afb      	ldrb	r3, [r7, #11]
 800c146:	2b2d      	cmp	r3, #45	; 0x2d
 800c148:	d002      	beq.n	800c150 <_ZN12SimpleString4AtoIEPKc+0x32>
 800c14a:	7afb      	ldrb	r3, [r7, #11]
 800c14c:	2b2b      	cmp	r3, #43	; 0x2b
 800c14e:	d102      	bne.n	800c156 <_ZN12SimpleString4AtoIEPKc+0x38>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3301      	adds	r3, #1
 800c154:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800c156:	2300      	movs	r3, #0
 800c158:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 ffa2 	bl	800d0a8 <_ZN12SimpleString7isDigitEc>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00f      	beq.n	800c18a <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	4613      	mov	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	3b30      	subs	r3, #48	; 0x30
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	4413      	add	r3, r2
 800c180:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	3301      	adds	r3, #1
 800c186:	607b      	str	r3, [r7, #4]
 800c188:	e7e7      	b.n	800c15a <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800c18a:	7afb      	ldrb	r3, [r7, #11]
 800c18c:	2b2d      	cmp	r3, #45	; 0x2d
 800c18e:	d102      	bne.n	800c196 <_ZN12SimpleString4AtoIEPKc+0x78>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	425b      	negs	r3, r3
 800c194:	e000      	b.n	800c198 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800c196:	68fb      	ldr	r3, [r7, #12]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00c      	beq.n	800c1cc <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	781a      	ldrb	r2, [r3, #0]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d106      	bne.n	800c1cc <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	607b      	str	r3, [r7, #4]
       ++s2;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800c1ca:	e7ee      	b.n	800c1aa <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	1ad3      	subs	r3, r2, r3
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800c1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f0:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	60fb      	str	r3, [r7, #12]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	607a      	str	r2, [r7, #4]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	bf14      	ite	ne
 800c204:	2301      	movne	r3, #1
 800c206:	2300      	moveq	r3, #0
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d000      	beq.n	800c210 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800c20e:	e7f0      	b.n	800c1f2 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800c210:	68fb      	ldr	r3, [r7, #12]
}
 800c212:	4618      	mov	r0, r3
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800c21e:	b480      	push	{r7}
 800c220:	b085      	sub	sp, #20
 800c222:	af00      	add	r7, sp, #0
 800c224:	60f8      	str	r0, [r7, #12]
 800c226:	60b9      	str	r1, [r7, #8]
 800c228:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d013      	beq.n	800c258 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00f      	beq.n	800c258 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	781a      	ldrb	r2, [r3, #0]
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	429a      	cmp	r2, r3
 800c242:	d109      	bne.n	800c258 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3b01      	subs	r3, #1
 800c248:	607b      	str	r3, [r7, #4]
        ++s1;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	3301      	adds	r3, #1
 800c24e:	60fb      	str	r3, [r7, #12]
        ++s2;
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	3301      	adds	r3, #1
 800c254:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800c256:	e7e8      	b.n	800c22a <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d006      	beq.n	800c26c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	461a      	mov	r2, r3
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	e000      	b.n	800c26e <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b087      	sub	sp, #28
 800c27e:	af00      	add	r7, sp, #0
 800c280:	60f8      	str	r0, [r7, #12]
 800c282:	60b9      	str	r1, [r7, #8]
 800c284:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d002      	beq.n	800c296 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	e01e      	b.n	800c2d8 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	781a      	ldrb	r2, [r3, #0]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	607b      	str	r3, [r7, #4]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d005      	beq.n	800c2ba <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d001      	beq.n	800c2ba <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e000      	b.n	800c2bc <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00a      	beq.n	800c2d6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	60bb      	str	r3, [r7, #8]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	60fb      	str	r3, [r7, #12]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	781a      	ldrb	r2, [r3, #0]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800c2d4:	e7e5      	b.n	800c2a2 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800c2d6:	697b      	ldr	r3, [r7, #20]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	371c      	adds	r7, #28
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	e01b      	b.n	800c332 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d016      	beq.n	800c330 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800c302:	6838      	ldr	r0, [r7, #0]
 800c304:	f7ff ff6e 	bl	800c1e4 <_ZN12SimpleString6StrLenEPKc>
 800c308:	4603      	mov	r3, r0
 800c30a:	461a      	mov	r2, r3
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff ff85 	bl	800c21e <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	bf0c      	ite	eq
 800c31a:	2301      	moveq	r3, #1
 800c31c:	2300      	movne	r3, #0
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	2b00      	cmp	r3, #0
 800c322:	d001      	beq.n	800c328 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	e004      	b.n	800c332 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	3301      	adds	r3, #1
 800c32c:	607b      	str	r3, [r7, #4]
 800c32e:	e7e4      	b.n	800c2fa <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b082      	sub	sp, #8
 800c33e:	af00      	add	r7, sp, #0
 800c340:	4603      	mov	r3, r0
 800c342:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800c344:	79fb      	ldrb	r3, [r7, #7]
 800c346:	4618      	mov	r0, r3
 800c348:	f000 fed9 	bl	800d0fe <_ZN12SimpleString7isUpperEc>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <_ZN12SimpleString7ToLowerEc+0x20>
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	3320      	adds	r3, #32
 800c356:	b2db      	uxtb	r3, r3
 800c358:	e000      	b.n	800c35c <_ZN12SimpleString7ToLowerEc+0x22>
 800c35a:	79fb      	ldrb	r3, [r7, #7]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800c364:	b480      	push	{r7}
 800c366:	b087      	sub	sp, #28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	613b      	str	r3, [r7, #16]

    while (n--)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	1e5a      	subs	r2, r3, #1
 800c37c:	607a      	str	r2, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	bf14      	ite	ne
 800c382:	2301      	movne	r3, #1
 800c384:	2300      	moveq	r3, #0
 800c386:	b2db      	uxtb	r3, r3
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d013      	beq.n	800c3b4 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	781a      	ldrb	r2, [r3, #0]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d006      	beq.n	800c3a6 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	461a      	mov	r2, r3
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	e007      	b.n	800c3b6 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	617b      	str	r3, [r7, #20]
            ++p2;
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	613b      	str	r3, [r7, #16]
    while (n--)
 800c3b2:	e7e1      	b.n	800c378 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	371c      	adds	r7, #28
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
	...

0800c3c4 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00d      	beq.n	800c3f0 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6818      	ldr	r0, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6859      	ldr	r1, [r3, #4]
 800c3dc:	23ee      	movs	r3, #238	; 0xee
 800c3de:	4a06      	ldr	r2, [pc, #24]	; (800c3f8 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800c3e0:	f7ff fe3a 	bl	800c058 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	605a      	str	r2, [r3, #4]
    }
}
 800c3f0:	bf00      	nop
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	08023b9c 	.word	0x08023b9c

0800c3fc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f7ff ffdd 	bl	800c3c4 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7ff fe37 	bl	800c084 <_ZNK12SimpleString14getEmptyStringEv>
 800c416:	4602      	mov	r2, r0
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	601a      	str	r2, [r3, #0]
}
 800c41c:	bf00      	nop
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f7ff ffc7 	bl	800c3c4 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	4619      	mov	r1, r3
 800c442:	68b8      	ldr	r0, [r7, #8]
 800c444:	f000 fe12 	bl	800d06c <_ZN12SimpleString15copyToNewBufferEPKcj>
 800c448:	4602      	mov	r2, r0
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	601a      	str	r2, [r3, #0]
}
 800c44e:	bf00      	nop
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7ff ffae 	bl	800c3c4 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	f240 1209 	movw	r2, #265	; 0x109
 800c476:	4907      	ldr	r1, [pc, #28]	; (800c494 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff fdd9 	bl	800c030 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c47e:	4602      	mov	r2, r0
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2200      	movs	r2, #0
 800c48a:	701a      	strb	r2, [r3, #0]
}
 800c48c:	bf00      	nop
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	08023b9c 	.word	0x08023b9c

0800c498 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f7ff ff8d 	bl	800c3c4 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	601a      	str	r2, [r3, #0]
}
 800c4b6:	bf00      	nop
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800c4be:	b590      	push	{r4, r7, lr}
 800c4c0:	b083      	sub	sp, #12
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	681c      	ldr	r4, [r3, #0]
 800c4cc:	6838      	ldr	r0, [r7, #0]
 800c4ce:	f000 fbc1 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	4621      	mov	r1, r4
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7ff ffa2 	bl	800c424 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd90      	pop	{r4, r7, pc}

0800c4e8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800c4f2:	6838      	ldr	r0, [r7, #0]
 800c4f4:	f7ff fe76 	bl	800c1e4 <_ZN12SimpleString6StrLenEPKc>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7ff ff8f 	bl	800c424 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800c506:	bf00      	nop
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800c50e:	b480      	push	{r7}
 800c510:	b083      	sub	sp, #12
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
    return buffer_;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d103      	bne.n	800c54a <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff ff5a 	bl	800c3fc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800c548:	e003      	b.n	800c552 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7ff ffcb 	bl	800c4e8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b088      	sub	sp, #32
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800c574:	68b8      	ldr	r0, [r7, #8]
 800c576:	f7ff fe35 	bl	800c1e4 <_ZN12SimpleString6StrLenEPKc>
 800c57a:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	fb02 f303 	mul.w	r3, r2, r3
 800c584:	3301      	adds	r3, #1
 800c586:	4619      	mov	r1, r3
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f7ff ff65 	bl	800c458 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800c594:	2300      	movs	r3, #0
 800c596:	61bb      	str	r3, [r7, #24]
 800c598:	69ba      	ldr	r2, [r7, #24]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d20e      	bcs.n	800c5be <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	69f8      	ldr	r0, [r7, #28]
 800c5aa:	f7ff fe66 	bl	800c27a <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800c5ae:	69fa      	ldr	r2, [r7, #28]
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	61bb      	str	r3, [r7, #24]
 800c5bc:	e7ec      	b.n	800c598 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	701a      	strb	r2, [r3, #0]
}
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3720      	adds	r7, #32
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800c5e4:	6838      	ldr	r0, [r7, #0]
 800c5e6:	f7ff ff92 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff ff7a 	bl	800c4e8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d003      	beq.n	800c618 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7ff ff53 	bl	800c4be <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800c618:	687b      	ldr	r3, [r7, #4]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800c622:	b590      	push	{r4, r7, lr}
 800c624:	b083      	sub	sp, #12
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff ff6e 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c632:	4604      	mov	r4, r0
 800c634:	6838      	ldr	r0, [r7, #0]
 800c636:	f7ff ff6a 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c63a:	4603      	mov	r3, r0
 800c63c:	4619      	mov	r1, r3
 800c63e:	4620      	mov	r0, r4
 800c640:	f7ff fe50 	bl	800c2e4 <_ZN12SimpleString6StrStrEPKcS1_>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	bf14      	ite	ne
 800c64a:	2301      	movne	r3, #1
 800c64c:	2300      	moveq	r3, #0
 800c64e:	b2db      	uxtb	r3, r3
}
 800c650:	4618      	mov	r0, r3
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	bd90      	pop	{r4, r7, pc}

0800c658 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800c658:	b590      	push	{r4, r7, lr}
 800c65a:	b087      	sub	sp, #28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800c662:	f107 0308 	add.w	r3, r7, #8
 800c666:	6879      	ldr	r1, [r7, #4]
 800c668:	4618      	mov	r0, r3
 800c66a:	f000 fabb 	bl	800cbe4 <_ZNK12SimpleString9lowerCaseEv>
 800c66e:	f107 0310 	add.w	r3, r7, #16
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	4618      	mov	r0, r3
 800c676:	f000 fab5 	bl	800cbe4 <_ZNK12SimpleString9lowerCaseEv>
 800c67a:	f107 0210 	add.w	r2, r7, #16
 800c67e:	f107 0308 	add.w	r3, r7, #8
 800c682:	4611      	mov	r1, r2
 800c684:	4618      	mov	r0, r3
 800c686:	f7ff ffcc 	bl	800c622 <_ZNK12SimpleString8containsERKS_>
 800c68a:	4603      	mov	r3, r0
 800c68c:	461c      	mov	r4, r3
 800c68e:	bf00      	nop
 800c690:	f107 0310 	add.w	r3, r7, #16
 800c694:	4618      	mov	r0, r3
 800c696:	f000 fafe 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800c69a:	f107 0308 	add.w	r3, r7, #8
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 faf9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800c6a4:	4623      	mov	r3, r4
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd90      	pop	{r4, r7, pc}

0800c6ae <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800c6ae:	b590      	push	{r4, r7, lr}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800c6b8:	6838      	ldr	r0, [r7, #0]
 800c6ba:	f000 facb 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bf0c      	ite	eq
 800c6c4:	2301      	moveq	r3, #1
 800c6c6:	2300      	movne	r3, #0
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e022      	b.n	800c718 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 fabe 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	bf0c      	ite	eq
 800c6de:	2301      	moveq	r3, #1
 800c6e0:	2300      	movne	r3, #0
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	e015      	b.n	800c718 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7ff ff0e 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	6838      	ldr	r0, [r7, #0]
 800c6f6:	f7ff ff0a 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	4620      	mov	r0, r4
 800c700:	f7ff fdf0 	bl	800c2e4 <_ZN12SimpleString6StrStrEPKcS1_>
 800c704:	4604      	mov	r4, r0
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7ff ff01 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c70c:	4603      	mov	r3, r0
 800c70e:	429c      	cmp	r4, r3
 800c710:	bf0c      	ite	eq
 800c712:	2301      	moveq	r3, #1
 800c714:	2300      	movne	r3, #0
 800c716:	b2db      	uxtb	r3, r3
}
 800c718:	4618      	mov	r0, r3
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd90      	pop	{r4, r7, pc}

0800c720 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800c720:	b590      	push	{r4, r7, lr}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 fa92 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800c730:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800c732:	6838      	ldr	r0, [r7, #0]
 800c734:	f000 fa8e 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800c738:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800c740:	2301      	movs	r3, #1
 800c742:	e020      	b.n	800c786 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d101      	bne.n	800c74e <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800c74a:	2300      	movs	r3, #0
 800c74c:	e01b      	b.n	800c786 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	429a      	cmp	r2, r3
 800c754:	d201      	bcs.n	800c75a <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800c756:	2300      	movs	r3, #0
 800c758:	e015      	b.n	800c786 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff fed7 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c760:	4601      	mov	r1, r0
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	18cc      	adds	r4, r1, r3
 800c76a:	6838      	ldr	r0, [r7, #0]
 800c76c:	f7ff fecf 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c770:	4603      	mov	r3, r0
 800c772:	4619      	mov	r1, r3
 800c774:	4620      	mov	r0, r4
 800c776:	f7ff fd13 	bl	800c1a0 <_ZN12SimpleString6StrCmpEPKcS1_>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	bf0c      	ite	eq
 800c780:	2301      	moveq	r3, #1
 800c782:	2300      	movne	r3, #0
 800c784:	b2db      	uxtb	r3, r3
}
 800c786:	4618      	mov	r0, r3
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd90      	pop	{r4, r7, pc}

0800c78e <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b086      	sub	sp, #24
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff feb6 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c7a2:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	60fb      	str	r3, [r7, #12]
    if (*str){
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d008      	beq.n	800c7c2 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800c7b0:	6838      	ldr	r0, [r7, #0]
 800c7b2:	f7ff feac 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	6938      	ldr	r0, [r7, #16]
 800c7bc:	f7ff fd92 	bl	800c2e4 <_ZN12SimpleString6StrStrEPKcS1_>
 800c7c0:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d014      	beq.n	800c7f4 <_ZNK12SimpleString5countERKS_+0x66>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d011      	beq.n	800c7f4 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	613b      	str	r3, [r7, #16]
        str++;
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	613b      	str	r3, [r7, #16]
        num++;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800c7e0:	6838      	ldr	r0, [r7, #0]
 800c7e2:	f7ff fe94 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6938      	ldr	r0, [r7, #16]
 800c7ec:	f7ff fd7a 	bl	800c2e4 <_ZN12SimpleString6StrStrEPKcS1_>
 800c7f0:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800c7f2:	e7e6      	b.n	800c7c2 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800c7f4:	697b      	ldr	r3, [r7, #20]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800c7fe:	b590      	push	{r4, r7, lr}
 800c800:	b091      	sub	sp, #68	; 0x44
 800c802:	af00      	add	r7, sp, #0
 800c804:	60f8      	str	r0, [r7, #12]
 800c806:	60b9      	str	r1, [r7, #8]
 800c808:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800c80a:	68b9      	ldr	r1, [r7, #8]
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f7ff ffbe 	bl	800c78e <_ZNK12SimpleString5countERKS_>
 800c812:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800c814:	68b9      	ldr	r1, [r7, #8]
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f7ff ff82 	bl	800c720 <_ZNK12SimpleString8endsWithERKS_>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800c822:	2300      	movs	r3, #0
 800c824:	e000      	b.n	800c828 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800c826:	2301      	movs	r3, #1
 800c828:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800c82a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82e:	4413      	add	r3, r2
 800c830:	4619      	mov	r1, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f001 f95c 	bl	800daf0 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f7ff fe68 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c83e:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800c840:	2300      	movs	r3, #0
 800c842:	63bb      	str	r3, [r7, #56]	; 0x38
 800c844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c848:	429a      	cmp	r2, r3
 800c84a:	d235      	bcs.n	800c8b8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800c84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84e:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800c850:	68b8      	ldr	r0, [r7, #8]
 800c852:	f7ff fe5c 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c856:	4603      	mov	r3, r0
 800c858:	4619      	mov	r1, r3
 800c85a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c85c:	f7ff fd42 	bl	800c2e4 <_ZN12SimpleString6StrStrEPKcS1_>
 800c860:	4603      	mov	r3, r0
 800c862:	3301      	adds	r3, #1
 800c864:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800c866:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f001 f9db 	bl	800dc24 <_ZN22SimpleStringCollectionixEj>
 800c86e:	4604      	mov	r4, r0
 800c870:	f107 031c 	add.w	r3, r7, #28
 800c874:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff fe55 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800c87c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	f107 0014 	add.w	r0, r7, #20
 800c886:	f107 011c 	add.w	r1, r7, #28
 800c88a:	2200      	movs	r2, #0
 800c88c:	f000 fb0c 	bl	800cea8 <_ZNK12SimpleString9subStringEjj>
 800c890:	f107 0314 	add.w	r3, r7, #20
 800c894:	4619      	mov	r1, r3
 800c896:	4620      	mov	r0, r4
 800c898:	f7ff feb1 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800c89c:	f107 0314 	add.w	r3, r7, #20
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 f9f8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800c8a6:	f107 031c 	add.w	r3, r7, #28
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f000 f9f3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8b6:	e7c5      	b.n	800c844 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d015      	beq.n	800c8ea <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800c8be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f001 f9af 	bl	800dc24 <_ZN22SimpleStringCollectionixEj>
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff fe29 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800c8d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f7ff fe8f 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800c8e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 f9d6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    }
}
 800c8ea:	bf00      	nop
 800c8ec:	3744      	adds	r7, #68	; 0x44
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd90      	pop	{r4, r7, pc}

0800c8f2 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	70fb      	strb	r3, [r7, #3]
 800c8fe:	4613      	mov	r3, r2
 800c900:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f9a6 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800c908:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800c90a:	2300      	movs	r3, #0
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	68fa      	ldr	r2, [r7, #12]
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	429a      	cmp	r2, r3
 800c914:	d218      	bcs.n	800c948 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7ff fdf9 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c91c:	4602      	mov	r2, r0
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	4413      	add	r3, r2
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	78fa      	ldrb	r2, [r7, #3]
 800c926:	429a      	cmp	r2, r3
 800c928:	bf0c      	ite	eq
 800c92a:	2301      	moveq	r3, #1
 800c92c:	2300      	movne	r3, #0
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b00      	cmp	r3, #0
 800c932:	d005      	beq.n	800c940 <_ZN12SimpleString7replaceEcc+0x4e>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	4413      	add	r3, r2
 800c93c:	78ba      	ldrb	r2, [r7, #2]
 800c93e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	3301      	adds	r3, #1
 800c944:	60fb      	str	r3, [r7, #12]
 800c946:	e7e2      	b.n	800c90e <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800c948:	bf00      	nop
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b08e      	sub	sp, #56	; 0x38
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800c95c:	f107 0310 	add.w	r3, r7, #16
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	4618      	mov	r0, r3
 800c964:	f7ff fddf 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800c968:	f107 0310 	add.w	r3, r7, #16
 800c96c:	4619      	mov	r1, r3
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f7ff ff0d 	bl	800c78e <_ZNK12SimpleString5countERKS_>
 800c974:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c976:	f107 0310 	add.w	r3, r7, #16
 800c97a:	4618      	mov	r0, r3
 800c97c:	f000 f98b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800c980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c982:	2b00      	cmp	r3, #0
 800c984:	d071      	beq.n	800ca6a <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f000 f964 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800c98c:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800c98e:	68b8      	ldr	r0, [r7, #8]
 800c990:	f7ff fc28 	bl	800c1e4 <_ZN12SimpleString6StrLenEPKc>
 800c994:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff fc24 	bl	800c1e4 <_ZN12SimpleString6StrLenEPKc>
 800c99c:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800c99e:	6a3b      	ldr	r3, [r7, #32]
 800c9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9a2:	fb02 f203 	mul.w	r2, r2, r3
 800c9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a8:	441a      	add	r2, r3
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9ae:	fb01 f303 	mul.w	r3, r1, r3
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d951      	bls.n	800ca62 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800c9be:	f240 129d 	movw	r2, #413	; 0x19d
 800c9c2:	492c      	ldr	r1, [pc, #176]	; (800ca74 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800c9c4:	69f8      	ldr	r0, [r7, #28]
 800c9c6:	f7ff fb33 	bl	800c030 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c9ca:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	633b      	str	r3, [r7, #48]	; 0x30
 800c9d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d236      	bcs.n	800ca4a <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f7ff fd96 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9e6:	4413      	add	r3, r2
 800c9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ea:	68b9      	ldr	r1, [r7, #8]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff fc16 	bl	800c21e <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	bf0c      	ite	eq
 800c9f8:	2301      	moveq	r3, #1
 800c9fa:	2300      	movne	r3, #0
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d011      	beq.n	800ca26 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800ca02:	69ba      	ldr	r2, [r7, #24]
 800ca04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca06:	18d0      	adds	r0, r2, r3
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	6879      	ldr	r1, [r7, #4]
 800ca10:	f7ff fc33 	bl	800c27a <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800ca14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	4413      	add	r3, r2
 800ca1a:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800ca1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	4413      	add	r3, r2
 800ca22:	637b      	str	r3, [r7, #52]	; 0x34
 800ca24:	e7d6      	b.n	800c9d4 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f7ff fd71 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca30:	441a      	add	r2, r3
 800ca32:	69b9      	ldr	r1, [r7, #24]
 800ca34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca36:	440b      	add	r3, r1
 800ca38:	7812      	ldrb	r2, [r2, #0]
 800ca3a:	701a      	strb	r2, [r3, #0]
                j++;
 800ca3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3e:	3301      	adds	r3, #1
 800ca40:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800ca42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca44:	3301      	adds	r3, #1
 800ca46:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800ca48:	e7c4      	b.n	800c9d4 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	69ba      	ldr	r2, [r7, #24]
 800ca50:	4413      	add	r3, r2
 800ca52:	2200      	movs	r2, #0
 800ca54:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800ca56:	69fa      	ldr	r2, [r7, #28]
 800ca58:	69b9      	ldr	r1, [r7, #24]
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f7ff fd1c 	bl	800c498 <_ZN12SimpleString19setInternalBufferToEPcj>
 800ca60:	e004      	b.n	800ca6c <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f7ff fcca 	bl	800c3fc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800ca68:	e000      	b.n	800ca6c <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800ca6a:	bf00      	nop
}
 800ca6c:	3738      	adds	r7, #56	; 0x38
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	08023b9c 	.word	0x08023b9c

0800ca78 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800ca78:	b590      	push	{r4, r7, lr}
 800ca7a:	b089      	sub	sp, #36	; 0x24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800ca82:	493b      	ldr	r1, [pc, #236]	; (800cb70 <_ZNK12SimpleString9printableEv+0xf8>)
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7ff fd4e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800ca8a:	6838      	ldr	r0, [r7, #0]
 800ca8c:	f000 f876 	bl	800cb7c <_ZNK12SimpleString16getPrintableSizeEv>
 800ca90:	4603      	mov	r3, r0
 800ca92:	3301      	adds	r3, #1
 800ca94:	4619      	mov	r1, r3
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7ff fcde 	bl	800c458 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800ca9c:	6838      	ldr	r0, [r7, #0]
 800ca9e:	f000 f8d9 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800caa2:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800caa8:	2300      	movs	r3, #0
 800caaa:	61bb      	str	r3, [r7, #24]
 800caac:	69ba      	ldr	r2, [r7, #24]
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d252      	bcs.n	800cb5a <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	4413      	add	r3, r2
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800cac0:	7cfb      	ldrb	r3, [r7, #19]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 fb43 	bl	800d14e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d012      	beq.n	800caf4 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	18d0      	adds	r0, r2, r3
 800cad6:	7cfb      	ldrb	r3, [r7, #19]
 800cad8:	3b07      	subs	r3, #7
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	461a      	mov	r2, r3
 800cade:	4b25      	ldr	r3, [pc, #148]	; (800cb74 <_ZNK12SimpleString9printableEv+0xfc>)
 800cae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae4:	2202      	movs	r2, #2
 800cae6:	4619      	mov	r1, r3
 800cae8:	f7ff fbc7 	bl	800c27a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	3302      	adds	r3, #2
 800caf0:	61fb      	str	r3, [r7, #28]
 800caf2:	e02e      	b.n	800cb52 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800caf4:	7cfb      	ldrb	r3, [r7, #19]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 fb15 	bl	800d126 <_ZN12SimpleString9isControlEc>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d01e      	beq.n	800cb40 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800cb02:	7cfa      	ldrb	r2, [r7, #19]
 800cb04:	f107 0308 	add.w	r3, r7, #8
 800cb08:	491b      	ldr	r1, [pc, #108]	; (800cb78 <_ZNK12SimpleString9printableEv+0x100>)
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 fdca 	bl	800d6a4 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	18d4      	adds	r4, r2, r3
 800cb18:	f107 0308 	add.w	r3, r7, #8
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 f88d 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2204      	movs	r2, #4
 800cb26:	4619      	mov	r1, r3
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f7ff fba6 	bl	800c27a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	3304      	adds	r3, #4
 800cb32:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800cb34:	f107 0308 	add.w	r3, r7, #8
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 f8ac 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800cb3e:	e008      	b.n	800cb52 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	4413      	add	r3, r2
 800cb48:	7cfa      	ldrb	r2, [r7, #19]
 800cb4a:	701a      	strb	r2, [r3, #0]
            j++;
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	3301      	adds	r3, #1
 800cb56:	61bb      	str	r3, [r7, #24]
 800cb58:	e7a8      	b.n	800caac <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	4413      	add	r3, r2
 800cb62:	2200      	movs	r2, #0
 800cb64:	701a      	strb	r2, [r3, #0]

    return result;
 800cb66:	bf00      	nop
}
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	3724      	adds	r7, #36	; 0x24
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd90      	pop	{r4, r7, pc}
 800cb70:	08023c5c 	.word	0x08023c5c
 800cb74:	2000006c 	.word	0x2000006c
 800cb78:	08023c60 	.word	0x08023c60

0800cb7c <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b086      	sub	sp, #24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 f865 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800cb8a:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800cb90:	2300      	movs	r3, #0
 800cb92:	613b      	str	r3, [r7, #16]
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d21e      	bcs.n	800cbda <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	4413      	add	r3, r2
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800cba8:	7afb      	ldrb	r3, [r7, #11]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 facf 	bl	800d14e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d003      	beq.n	800cbbe <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	617b      	str	r3, [r7, #20]
 800cbbc:	e009      	b.n	800cbd2 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800cbbe:	7afb      	ldrb	r3, [r7, #11]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fab0 	bl	800d126 <_ZN12SimpleString9isControlEc>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	3303      	adds	r3, #3
 800cbd0:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	613b      	str	r3, [r7, #16]
 800cbd8:	e7dc      	b.n	800cb94 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800cbda:	697b      	ldr	r3, [r7, #20]
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3718      	adds	r7, #24
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800cbe4:	b590      	push	{r4, r7, lr}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800cbee:	6839      	ldr	r1, [r7, #0]
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f7ff fcec 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 f82c 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800cbfc:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800cbfe:	2300      	movs	r3, #0
 800cc00:	60fb      	str	r3, [r7, #12]
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d213      	bcs.n	800cc32 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff fc7f 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800cc10:	4602      	mov	r2, r0
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	4413      	add	r3, r2
 800cc16:	7819      	ldrb	r1, [r3, #0]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	18d4      	adds	r4, r2, r3
 800cc20:	4608      	mov	r0, r1
 800cc22:	f7ff fb8a 	bl	800c33a <_ZN12SimpleString7ToLowerEc>
 800cc26:	4603      	mov	r3, r0
 800cc28:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	60fb      	str	r3, [r7, #12]
 800cc30:	e7e7      	b.n	800cc02 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800cc32:	bf00      	nop
}
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd90      	pop	{r4, r7, pc}

0800cc3c <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7ff fc62 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800cc4a:	4603      	mov	r3, r0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff fc56 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800cc62:	4603      	mov	r3, r0
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7ff fabd 	bl	800c1e4 <_ZN12SimpleString6StrLenEPKc>
 800cc6a:	4603      	mov	r3, r0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff ffe9 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	bf0c      	ite	eq
 800cc88:	2301      	moveq	r3, #1
 800cc8a:	2300      	movne	r3, #0
 800cc8c:	b2db      	uxtb	r3, r3
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b082      	sub	sp, #8
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7ff fb90 	bl	800c3c4 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4618      	mov	r0, r3
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800ccae:	b590      	push	{r4, r7, lr}
 800ccb0:	b083      	sub	sp, #12
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
 800ccb6:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7ff ffbf 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	6838      	ldr	r0, [r7, #0]
 800ccc2:	f7ff ffbb 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4620      	mov	r0, r4
 800cccc:	f7ff fa68 	bl	800c1a0 <_ZN12SimpleString6StrCmpEPKcS1_>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	bf0c      	ite	eq
 800ccd6:	2301      	moveq	r3, #1
 800ccd8:	2300      	movne	r3, #0
 800ccda:	b2db      	uxtb	r3, r3
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd90      	pop	{r4, r7, pc}

0800cce4 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800cce4:	b590      	push	{r4, r7, lr}
 800cce6:	b087      	sub	sp, #28
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800ccee:	f107 0308 	add.w	r3, r7, #8
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7ff ff75 	bl	800cbe4 <_ZNK12SimpleString9lowerCaseEv>
 800ccfa:	f107 0310 	add.w	r3, r7, #16
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7ff ff6f 	bl	800cbe4 <_ZNK12SimpleString9lowerCaseEv>
 800cd06:	f107 0210 	add.w	r2, r7, #16
 800cd0a:	f107 0308 	add.w	r3, r7, #8
 800cd0e:	4611      	mov	r1, r2
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff ffcc 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 800cd16:	4603      	mov	r3, r0
 800cd18:	461c      	mov	r4, r3
 800cd1a:	f107 0310 	add.w	r3, r7, #16
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7ff ffb9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800cd24:	f107 0308 	add.w	r3, r7, #8
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7ff ffb4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800cd2e:	4623      	mov	r3, r4
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	371c      	adds	r7, #28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd90      	pop	{r4, r7, pc}

0800cd38 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800cd42:	6839      	ldr	r1, [r7, #0]
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7ff ffb2 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	f083 0301 	eor.w	r3, r3, #1
 800cd50:	b2db      	uxtb	r3, r3
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3708      	adds	r7, #8
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b084      	sub	sp, #16
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800cd66:	68b8      	ldr	r0, [r7, #8]
 800cd68:	f7ff fbd1 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	4619      	mov	r1, r3
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f7ff fbd8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7ff fbc9 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	4619      	mov	r1, r3
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f000 f817 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    return t;
 800cd86:	bf00      	nop
}
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800cd9a:	6838      	ldr	r0, [r7, #0]
 800cd9c:	f7ff fbb7 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800cda0:	4603      	mov	r3, r0
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 f805 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
 800cdaa:	4603      	mov	r3, r0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b086      	sub	sp, #24
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff ff48 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800cdc4:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800cdc6:	6838      	ldr	r0, [r7, #0]
 800cdc8:	f7ff fa0c 	bl	800c1e4 <_ZN12SimpleString6StrLenEPKc>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	3301      	adds	r3, #1
 800cdd0:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff fb97 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800cde0:	4603      	mov	r3, r0
 800cde2:	68f9      	ldr	r1, [r7, #12]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 f941 	bl	800d06c <_ZN12SimpleString15copyToNewBufferEPKcj>
 800cdea:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7ff fa3f 	bl	800c27a <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	68b9      	ldr	r1, [r7, #8]
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7ff fb49 	bl	800c498 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800ce06:	687b      	ldr	r3, [r7, #4]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3718      	adds	r7, #24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800ce10:	b590      	push	{r4, r7, lr}
 800ce12:	b08b      	sub	sp, #44	; 0x2c
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f7ff ff18 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800ce24:	4604      	mov	r4, r0
 800ce26:	68b8      	ldr	r0, [r7, #8]
 800ce28:	f7ff ff14 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	429c      	cmp	r4, r3
 800ce30:	bf8c      	ite	hi
 800ce32:	2301      	movhi	r3, #1
 800ce34:	2300      	movls	r3, #0
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d006      	beq.n	800ce4a <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800ce3c:	79fb      	ldrb	r3, [r7, #7]
 800ce3e:	461a      	mov	r2, r3
 800ce40:	68f9      	ldr	r1, [r7, #12]
 800ce42:	68b8      	ldr	r0, [r7, #8]
 800ce44:	f7ff ffe4 	bl	800ce10 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800ce48:	e02b      	b.n	800cea2 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800ce4a:	79fb      	ldrb	r3, [r7, #7]
 800ce4c:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800ce52:	68b8      	ldr	r0, [r7, #8]
 800ce54:	f7ff fefe 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800ce58:	4604      	mov	r4, r0
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f7ff fefa 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800ce60:	4603      	mov	r3, r0
 800ce62:	1ae2      	subs	r2, r4, r3
 800ce64:	f107 0114 	add.w	r1, r7, #20
 800ce68:	f107 0320 	add.w	r3, r7, #32
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff fb75 	bl	800c55c <_ZN12SimpleStringC1EPKcj>
 800ce72:	f107 0318 	add.w	r3, r7, #24
 800ce76:	f107 0120 	add.w	r1, r7, #32
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7ff ff6c 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800ce82:	f107 0318 	add.w	r3, r7, #24
 800ce86:	4619      	mov	r1, r3
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f7ff fbb8 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800ce8e:	f107 0318 	add.w	r3, r7, #24
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7ff feff 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800ce98:	f107 0320 	add.w	r3, r7, #32
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff fefa 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800cea2:	372c      	adds	r7, #44	; 0x2c
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd90      	pop	{r4, r7, pc}

0800cea8 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800ceb6:	68b8      	ldr	r0, [r7, #8]
 800ceb8:	f7ff fecc 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800cebc:	4603      	mov	r3, r0
 800cebe:	3b01      	subs	r3, #1
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	bf8c      	ite	hi
 800cec6:	2301      	movhi	r3, #1
 800cec8:	2300      	movls	r3, #0
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d004      	beq.n	800ceda <_ZNK12SimpleString9subStringEjj+0x32>
 800ced0:	4919      	ldr	r1, [pc, #100]	; (800cf38 <_ZNK12SimpleString9subStringEjj+0x90>)
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	f7ff fb27 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800ced8:	e029      	b.n	800cf2e <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800ceda:	68b8      	ldr	r0, [r7, #8]
 800cedc:	f7ff fb17 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800cee0:	4602      	mov	r2, r0
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	441a      	add	r2, r3
 800cee6:	f107 0310 	add.w	r3, r7, #16
 800ceea:	4611      	mov	r1, r2
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7ff fb1a 	bl	800c526 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800cef2:	f107 0310 	add.w	r3, r7, #16
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff feac 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800cefc:	4602      	mov	r2, r0
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	4293      	cmp	r3, r2
 800cf02:	bf34      	ite	cc
 800cf04:	2301      	movcc	r3, #1
 800cf06:	2300      	movcs	r3, #0
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d004      	beq.n	800cf18 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	4413      	add	r3, r2
 800cf14:	2200      	movs	r2, #0
 800cf16:	701a      	strb	r2, [r3, #0]

    return newString;
 800cf18:	f107 0310 	add.w	r3, r7, #16
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f7ff fb55 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800cf24:	f107 0310 	add.w	r3, r7, #16
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7ff feb4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	3718      	adds	r7, #24
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	08023c5c 	.word	0x08023c5c

0800cf3c <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	68b9      	ldr	r1, [r7, #8]
 800cf52:	f7ff ffa9 	bl	800cea8 <_ZNK12SimpleString9subStringEjj>
}
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	3710      	adds	r7, #16
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b082      	sub	sp, #8
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff fad0 	bl	800c50e <_ZNK12SimpleString9getBufferEv>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	4413      	add	r3, r2
 800cf74:	781b      	ldrb	r3, [r3, #0]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3708      	adds	r7, #8
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b082      	sub	sp, #8
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
 800cf86:	460b      	mov	r3, r1
 800cf88:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800cf8a:	78fb      	ldrb	r3, [r7, #3]
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	2100      	movs	r1, #0
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 f805 	bl	800cfa0 <_ZNK12SimpleString8findFromEjc>
 800cf96:	4603      	mov	r3, r0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b086      	sub	sp, #24
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	4613      	mov	r3, r2
 800cfac:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f7ff fe50 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800cfb4:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	617b      	str	r3, [r7, #20]
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d213      	bcs.n	800cfea <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800cfc2:	6979      	ldr	r1, [r7, #20]
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f7ff ffca 	bl	800cf5e <_ZNK12SimpleString2atEj>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	461a      	mov	r2, r3
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	bf0c      	ite	eq
 800cfd4:	2301      	moveq	r3, #1
 800cfd6:	2300      	movne	r3, #0
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d001      	beq.n	800cfe2 <_ZNK12SimpleString8findFromEjc+0x42>
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	e005      	b.n	800cfee <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	617b      	str	r3, [r7, #20]
 800cfe8:	e7e7      	b.n	800cfba <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800cfea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	4611      	mov	r1, r2
 800d004:	461a      	mov	r2, r3
 800d006:	460b      	mov	r3, r1
 800d008:	71fb      	strb	r3, [r7, #7]
 800d00a:	4613      	mov	r3, r2
 800d00c:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800d00e:	79fb      	ldrb	r3, [r7, #7]
 800d010:	4619      	mov	r1, r3
 800d012:	68b8      	ldr	r0, [r7, #8]
 800d014:	f7ff ffb3 	bl	800cf7e <_ZNK12SimpleString4findEc>
 800d018:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d020:	d104      	bne.n	800d02c <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800d022:	4911      	ldr	r1, [pc, #68]	; (800d068 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f7ff fa7e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800d02a:	e019      	b.n	800d060 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800d02c:	79bb      	ldrb	r3, [r7, #6]
 800d02e:	461a      	mov	r2, r3
 800d030:	6979      	ldr	r1, [r7, #20]
 800d032:	68b8      	ldr	r0, [r7, #8]
 800d034:	f7ff ffb4 	bl	800cfa0 <_ZNK12SimpleString8findFromEjc>
 800d038:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d040:	d106      	bne.n	800d050 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	697a      	ldr	r2, [r7, #20]
 800d046:	68b9      	ldr	r1, [r7, #8]
 800d048:	4618      	mov	r0, r3
 800d04a:	f7ff ff77 	bl	800cf3c <_ZNK12SimpleString9subStringEj>
 800d04e:	e007      	b.n	800d060 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	697a      	ldr	r2, [r7, #20]
 800d05a:	68b9      	ldr	r1, [r7, #8]
 800d05c:	f7ff ff24 	bl	800cea8 <_ZNK12SimpleString9subStringEjj>
}
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	3718      	adds	r7, #24
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	08023c5c 	.word	0x08023c5c

0800d06c <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800d076:	f240 2275 	movw	r2, #629	; 0x275
 800d07a:	490a      	ldr	r1, [pc, #40]	; (800d0a4 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800d07c:	6838      	ldr	r0, [r7, #0]
 800d07e:	f7fe ffd7 	bl	800c030 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d082:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	6879      	ldr	r1, [r7, #4]
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f7ff f8f6 	bl	800c27a <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	3b01      	subs	r3, #1
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	4413      	add	r3, r2
 800d096:	2200      	movs	r2, #0
 800d098:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800d09a:	68fb      	ldr	r3, [r7, #12]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	08023b9c 	.word	0x08023b9c

0800d0a8 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800d0b2:	79fb      	ldrb	r3, [r7, #7]
 800d0b4:	2b2f      	cmp	r3, #47	; 0x2f
 800d0b6:	d904      	bls.n	800d0c2 <_ZN12SimpleString7isDigitEc+0x1a>
 800d0b8:	79fb      	ldrb	r3, [r7, #7]
 800d0ba:	2b39      	cmp	r3, #57	; 0x39
 800d0bc:	d801      	bhi.n	800d0c2 <_ZN12SimpleString7isDigitEc+0x1a>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e000      	b.n	800d0c4 <_ZN12SimpleString7isDigitEc+0x1c>
 800d0c2:	2300      	movs	r3, #0
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800d0da:	79fb      	ldrb	r3, [r7, #7]
 800d0dc:	2b20      	cmp	r3, #32
 800d0de:	d005      	beq.n	800d0ec <_ZN12SimpleString7isSpaceEc+0x1c>
 800d0e0:	79fb      	ldrb	r3, [r7, #7]
 800d0e2:	2b08      	cmp	r3, #8
 800d0e4:	d904      	bls.n	800d0f0 <_ZN12SimpleString7isSpaceEc+0x20>
 800d0e6:	79fb      	ldrb	r3, [r7, #7]
 800d0e8:	2b0d      	cmp	r3, #13
 800d0ea:	d801      	bhi.n	800d0f0 <_ZN12SimpleString7isSpaceEc+0x20>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e000      	b.n	800d0f2 <_ZN12SimpleString7isSpaceEc+0x22>
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800d0fe:	b480      	push	{r7}
 800d100:	b083      	sub	sp, #12
 800d102:	af00      	add	r7, sp, #0
 800d104:	4603      	mov	r3, r0
 800d106:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800d108:	79fb      	ldrb	r3, [r7, #7]
 800d10a:	2b40      	cmp	r3, #64	; 0x40
 800d10c:	d904      	bls.n	800d118 <_ZN12SimpleString7isUpperEc+0x1a>
 800d10e:	79fb      	ldrb	r3, [r7, #7]
 800d110:	2b5a      	cmp	r3, #90	; 0x5a
 800d112:	d801      	bhi.n	800d118 <_ZN12SimpleString7isUpperEc+0x1a>
 800d114:	2301      	movs	r3, #1
 800d116:	e000      	b.n	800d11a <_ZN12SimpleString7isUpperEc+0x1c>
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800d126:	b480      	push	{r7}
 800d128:	b083      	sub	sp, #12
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	4603      	mov	r3, r0
 800d12e:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800d130:	79fb      	ldrb	r3, [r7, #7]
 800d132:	2b1f      	cmp	r3, #31
 800d134:	d902      	bls.n	800d13c <_ZN12SimpleString9isControlEc+0x16>
 800d136:	79fb      	ldrb	r3, [r7, #7]
 800d138:	2b7f      	cmp	r3, #127	; 0x7f
 800d13a:	d101      	bne.n	800d140 <_ZN12SimpleString9isControlEc+0x1a>
 800d13c:	2301      	movs	r3, #1
 800d13e:	e000      	b.n	800d142 <_ZN12SimpleString9isControlEc+0x1c>
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	370c      	adds	r7, #12
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr

0800d14e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800d14e:	b480      	push	{r7}
 800d150:	b083      	sub	sp, #12
 800d152:	af00      	add	r7, sp, #0
 800d154:	4603      	mov	r3, r0
 800d156:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800d158:	79fb      	ldrb	r3, [r7, #7]
 800d15a:	2b06      	cmp	r3, #6
 800d15c:	d904      	bls.n	800d168 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d15e:	79fb      	ldrb	r3, [r7, #7]
 800d160:	2b0d      	cmp	r3, #13
 800d162:	d801      	bhi.n	800d168 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800d164:	2301      	movs	r3, #1
 800d166:	e000      	b.n	800d16a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
	...

0800d178 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800d184:	78fb      	ldrb	r3, [r7, #3]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d001      	beq.n	800d18e <_Z10StringFromb+0x16>
 800d18a:	4a06      	ldr	r2, [pc, #24]	; (800d1a4 <_Z10StringFromb+0x2c>)
 800d18c:	e000      	b.n	800d190 <_Z10StringFromb+0x18>
 800d18e:	4a06      	ldr	r2, [pc, #24]	; (800d1a8 <_Z10StringFromb+0x30>)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4906      	ldr	r1, [pc, #24]	; (800d1ac <_Z10StringFromb+0x34>)
 800d194:	4618      	mov	r0, r3
 800d196:	f000 fa85 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	3708      	adds	r7, #8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	08023c68 	.word	0x08023c68
 800d1a8:	08023c70 	.word	0x08023c70
 800d1ac:	08023c78 	.word	0x08023c78

0800d1b0 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f7ff f9b2 	bl	800c526 <_ZN12SimpleStringC1EPKc>
}
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	3708      	adds	r7, #8
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
	...

0800d1cc <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800d1cc:	b590      	push	{r4, r7, lr}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800d1d6:	2400      	movs	r4, #0
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00e      	beq.n	800d1fc <_Z25PrintableStringFromOrNullPKc+0x30>
 800d1de:	f107 0308 	add.w	r3, r7, #8
 800d1e2:	6839      	ldr	r1, [r7, #0]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7ff ffe3 	bl	800d1b0 <_Z10StringFromPKc>
 800d1ea:	2401      	movs	r4, #1
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f107 0208 	add.w	r2, r7, #8
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7ff fc3f 	bl	800ca78 <_ZNK12SimpleString9printableEv>
 800d1fa:	e004      	b.n	800d206 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4908      	ldr	r1, [pc, #32]	; (800d220 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800d200:	4618      	mov	r0, r3
 800d202:	f7ff ffd5 	bl	800d1b0 <_Z10StringFromPKc>
 800d206:	2c00      	cmp	r4, #0
 800d208:	d004      	beq.n	800d214 <_Z25PrintableStringFromOrNullPKc+0x48>
 800d20a:	f107 0308 	add.w	r3, r7, #8
 800d20e:	4618      	mov	r0, r3
 800d210:	f7ff fd41 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d214:	bf00      	nop
}
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	3714      	adds	r7, #20
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd90      	pop	{r4, r7, pc}
 800d21e:	bf00      	nop
 800d220:	08023c7c 	.word	0x08023c7c

0800d224 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	4904      	ldr	r1, [pc, #16]	; (800d244 <_Z10StringFromi+0x20>)
 800d234:	4618      	mov	r0, r3
 800d236:	f000 fa35 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	08023c84 	.word	0x08023c84

0800d248 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	683a      	ldr	r2, [r7, #0]
 800d256:	4904      	ldr	r1, [pc, #16]	; (800d268 <_Z10StringFroml+0x20>)
 800d258:	4618      	mov	r0, r3
 800d25a:	f000 fa23 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	08023c88 	.word	0x08023c88

0800d26c <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b086      	sub	sp, #24
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800d276:	f107 0308 	add.w	r3, r7, #8
 800d27a:	4910      	ldr	r1, [pc, #64]	; (800d2bc <_Z10StringFromPKv+0x50>)
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff f952 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800d282:	f107 0310 	add.w	r3, r7, #16
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 f9a1 	bl	800d5d0 <_Z13HexStringFromPKv>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f107 0210 	add.w	r2, r7, #16
 800d294:	f107 0108 	add.w	r1, r7, #8
 800d298:	4618      	mov	r0, r3
 800d29a:	f7ff fd5e 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800d29e:	f107 0310 	add.w	r3, r7, #16
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7ff fcf7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d2a8:	f107 0308 	add.w	r3, r7, #8
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7ff fcf2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d2b2:	bf00      	nop
}
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	3718      	adds	r7, #24
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	08023c8c 	.word	0x08023c8c

0800d2c0 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b086      	sub	sp, #24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800d2ca:	f107 0308 	add.w	r3, r7, #8
 800d2ce:	4910      	ldr	r1, [pc, #64]	; (800d310 <_Z10StringFromPFvvE+0x50>)
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff f928 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800d2d6:	f107 0310 	add.w	r3, r7, #16
 800d2da:	6839      	ldr	r1, [r7, #0]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 f98b 	bl	800d5f8 <_Z13HexStringFromPFvvE>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f107 0210 	add.w	r2, r7, #16
 800d2e8:	f107 0108 	add.w	r1, r7, #8
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7ff fd34 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800d2f2:	f107 0310 	add.w	r3, r7, #16
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7ff fccd 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d2fc:	f107 0308 	add.w	r3, r7, #8
 800d300:	4618      	mov	r0, r3
 800d302:	f7ff fcc8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d306:	bf00      	nop
}
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	3718      	adds	r7, #24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	08023c8c 	.word	0x08023c8c

0800d314 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	683a      	ldr	r2, [r7, #0]
 800d322:	4904      	ldr	r1, [pc, #16]	; (800d334 <_Z13HexStringFroml+0x20>)
 800d324:	4618      	mov	r0, r3
 800d326:	f000 f9bd 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	08023c90 	.word	0x08023c90

0800d338 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	4904      	ldr	r1, [pc, #16]	; (800d358 <_Z13HexStringFromi+0x20>)
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 f9ab 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	08023c94 	.word	0x08023c94

0800d35c <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800d368:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4912      	ldr	r1, [pc, #72]	; (800d3b8 <_Z13HexStringFroma+0x5c>)
 800d370:	4618      	mov	r0, r3
 800d372:	f000 f997 	bl	800d6a4 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800d376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	da16      	bge.n	800d3ac <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f7ff fc68 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800d384:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	1e9a      	subs	r2, r3, #2
 800d38a:	f107 030c 	add.w	r3, r7, #12
 800d38e:	6879      	ldr	r1, [r7, #4]
 800d390:	4618      	mov	r0, r3
 800d392:	f7ff fdd3 	bl	800cf3c <_ZNK12SimpleString9subStringEj>
 800d396:	f107 030c 	add.w	r3, r7, #12
 800d39a:	4619      	mov	r1, r3
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f7ff f92e 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800d3a2:	f107 030c 	add.w	r3, r7, #12
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7ff fc75 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800d3ac:	bf00      	nop
}
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	3718      	adds	r7, #24
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	08023c94 	.word	0x08023c94

0800d3bc <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	683a      	ldr	r2, [r7, #0]
 800d3ca:	4904      	ldr	r1, [pc, #16]	; (800d3dc <_Z13HexStringFromm+0x20>)
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 f969 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	08023c90 	.word	0x08023c90

0800d3e0 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	683a      	ldr	r2, [r7, #0]
 800d3ee:	4904      	ldr	r1, [pc, #16]	; (800d400 <_Z13HexStringFromj+0x20>)
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f000 f957 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	08023c94 	.word	0x08023c94

0800d404 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d40e:	f107 0308 	add.w	r3, r7, #8
 800d412:	6839      	ldr	r1, [r7, #0]
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff ff8f 	bl	800d338 <_Z13HexStringFromi>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f107 0208 	add.w	r2, r7, #8
 800d420:	4611      	mov	r1, r2
 800d422:	4618      	mov	r0, r3
 800d424:	f000 f87e 	bl	800d524 <_Z26BracketsFormattedHexString12SimpleString>
 800d428:	f107 0308 	add.w	r3, r7, #8
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff fc32 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d432:	bf00      	nop
}
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d446:	f107 0308 	add.w	r3, r7, #8
 800d44a:	6839      	ldr	r1, [r7, #0]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7ff ffc7 	bl	800d3e0 <_Z13HexStringFromj>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f107 0208 	add.w	r2, r7, #8
 800d458:	4611      	mov	r1, r2
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 f862 	bl	800d524 <_Z26BracketsFormattedHexString12SimpleString>
 800d460:	f107 0308 	add.w	r3, r7, #8
 800d464:	4618      	mov	r0, r3
 800d466:	f7ff fc16 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d46a:	bf00      	nop
}
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d47e:	f107 0308 	add.w	r3, r7, #8
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	4618      	mov	r0, r3
 800d486:	f7ff ff45 	bl	800d314 <_Z13HexStringFroml>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f107 0208 	add.w	r2, r7, #8
 800d490:	4611      	mov	r1, r2
 800d492:	4618      	mov	r0, r3
 800d494:	f000 f846 	bl	800d524 <_Z26BracketsFormattedHexString12SimpleString>
 800d498:	f107 0308 	add.w	r3, r7, #8
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff fbfa 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d4a2:	bf00      	nop
}
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d4b6:	f107 0308 	add.w	r3, r7, #8
 800d4ba:	6839      	ldr	r1, [r7, #0]
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7ff ff7d 	bl	800d3bc <_Z13HexStringFromm>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f107 0208 	add.w	r2, r7, #8
 800d4c8:	4611      	mov	r1, r2
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f000 f82a 	bl	800d524 <_Z26BracketsFormattedHexString12SimpleString>
 800d4d0:	f107 0308 	add.w	r3, r7, #8
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff fbde 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d4da:	bf00      	nop
}
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800d4f0:	f107 0308 	add.w	r3, r7, #8
 800d4f4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff ff2e 	bl	800d35c <_Z13HexStringFroma>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f107 0208 	add.w	r2, r7, #8
 800d506:	4611      	mov	r1, r2
 800d508:	4618      	mov	r0, r3
 800d50a:	f000 f80b 	bl	800d524 <_Z26BracketsFormattedHexString12SimpleString>
 800d50e:	f107 0308 	add.w	r3, r7, #8
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff fbbf 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d518:	bf00      	nop
}
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
	...

0800d524 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b088      	sub	sp, #32
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800d52e:	f107 0310 	add.w	r3, r7, #16
 800d532:	4917      	ldr	r1, [pc, #92]	; (800d590 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe fff6 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800d53a:	f107 0308 	add.w	r3, r7, #8
 800d53e:	f107 0110 	add.w	r1, r7, #16
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff fc08 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800d54a:	f107 0318 	add.w	r3, r7, #24
 800d54e:	4911      	ldr	r1, [pc, #68]	; (800d594 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800d550:	4618      	mov	r0, r3
 800d552:	f7fe ffe8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f107 0218 	add.w	r2, r7, #24
 800d55c:	f107 0108 	add.w	r1, r7, #8
 800d560:	4618      	mov	r0, r3
 800d562:	f7ff fbfa 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800d566:	f107 0318 	add.w	r3, r7, #24
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff fb93 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d570:	f107 0308 	add.w	r3, r7, #8
 800d574:	4618      	mov	r0, r3
 800d576:	f7ff fb8e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d57a:	f107 0310 	add.w	r3, r7, #16
 800d57e:	4618      	mov	r0, r3
 800d580:	f7ff fb89 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800d584:	bf00      	nop
}
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	3720      	adds	r7, #32
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	08023c98 	.word	0x08023c98
 800d594:	08023c9c 	.word	0x08023c9c

0800d598 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800d598:	b480      	push	{r7}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800d5a0:	1d3b      	adds	r3, r7, #4
 800d5a2:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3714      	adds	r7, #20
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800d5bc:	1d3b      	adds	r3, r7, #4
 800d5be:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3714      	adds	r7, #20
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800d5da:	6838      	ldr	r0, [r7, #0]
 800d5dc:	f7ff ffdc 	bl	800d598 <_ZL25convertPointerToLongValuePKv>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4903      	ldr	r1, [pc, #12]	; (800d5f4 <_Z13HexStringFromPKv+0x24>)
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f000 f85c 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	08023c90 	.word	0x08023c90

0800d5f8 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800d602:	6838      	ldr	r0, [r7, #0]
 800d604:	f7ff ffd6 	bl	800d5b4 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800d608:	4602      	mov	r2, r0
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4903      	ldr	r1, [pc, #12]	; (800d61c <_Z13HexStringFromPFvvE+0x24>)
 800d60e:	4618      	mov	r0, r3
 800d610:	f000 f848 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	08023c90 	.word	0x08023c90

0800d620 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af02      	add	r7, sp, #8
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	ed87 0b00 	vstr	d0, [r7]
 800d62c:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800d62e:	4b18      	ldr	r3, [pc, #96]	; (800d690 <_Z10StringFromdi+0x70>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	ed97 0b00 	vldr	d0, [r7]
 800d636:	4798      	blx	r3
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	bf14      	ite	ne
 800d63e:	2301      	movne	r3, #1
 800d640:	2300      	moveq	r3, #0
 800d642:	b2db      	uxtb	r3, r3
 800d644:	2b00      	cmp	r3, #0
 800d646:	d004      	beq.n	800d652 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800d648:	4912      	ldr	r1, [pc, #72]	; (800d694 <_Z10StringFromdi+0x74>)
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f7fe ff6b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800d650:	e01a      	b.n	800d688 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800d652:	4b11      	ldr	r3, [pc, #68]	; (800d698 <_Z10StringFromdi+0x78>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	ed97 0b00 	vldr	d0, [r7]
 800d65a:	4798      	blx	r3
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bf14      	ite	ne
 800d662:	2301      	movne	r3, #1
 800d664:	2300      	moveq	r3, #0
 800d666:	b2db      	uxtb	r3, r3
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d004      	beq.n	800d676 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800d66c:	490b      	ldr	r1, [pc, #44]	; (800d69c <_Z10StringFromdi+0x7c>)
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f7fe ff59 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800d674:	e008      	b.n	800d688 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d67c:	e9cd 2300 	strd	r2, r3, [sp]
 800d680:	68ba      	ldr	r2, [r7, #8]
 800d682:	4907      	ldr	r1, [pc, #28]	; (800d6a0 <_Z10StringFromdi+0x80>)
 800d684:	f000 f80e 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	200000e8 	.word	0x200000e8
 800d694:	08023cd0 	.word	0x08023cd0
 800d698:	200000ec 	.word	0x200000ec
 800d69c:	08023ce4 	.word	0x08023ce4
 800d6a0:	08023cf4 	.word	0x08023cf4

0800d6a4 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800d6a4:	b40e      	push	{r1, r2, r3}
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b087      	sub	sp, #28
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800d6ae:	4910      	ldr	r1, [pc, #64]	; (800d6f0 <_Z16StringFromFormatPKcz+0x4c>)
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7fe ff38 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800d6b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d6ba:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800d6bc:	f107 0310 	add.w	r3, r7, #16
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f000 f839 	bl	800d73c <_Z17VStringFromFormatPKcSt9__va_list>
 800d6ca:	f107 0310 	add.w	r3, r7, #16
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7fe ff94 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800d6d6:	f107 0310 	add.w	r3, r7, #16
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7ff fadb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800d6e0:	bf00      	nop
}
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	371c      	adds	r7, #28
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6ec:	b003      	add	sp, #12
 800d6ee:	4770      	bx	lr
 800d6f0:	08023c5c 	.word	0x08023c5c

0800d6f4 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	4904      	ldr	r1, [pc, #16]	; (800d714 <_Z10StringFromj+0x20>)
 800d704:	4618      	mov	r0, r3
 800d706:	f7ff ffcd 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	08023d00 	.word	0x08023d00

0800d718 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	683a      	ldr	r2, [r7, #0]
 800d726:	4904      	ldr	r1, [pc, #16]	; (800d738 <_Z10StringFromm+0x20>)
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff ffbb 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	3708      	adds	r7, #8
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	08023d04 	.word	0x08023d04

0800d73c <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800d73c:	b590      	push	{r4, r7, lr}
 800d73e:	b0a7      	sub	sp, #156	; 0x9c
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800d74c:	492e      	ldr	r1, [pc, #184]	; (800d808 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f7fe fee9 	bl	800c526 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800d754:	4b2d      	ldr	r3, [pc, #180]	; (800d80c <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800d756:	681c      	ldr	r4, [r3, #0]
 800d758:	f107 0014 	add.w	r0, r7, #20
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	2164      	movs	r1, #100	; 0x64
 800d762:	47a0      	blx	r4
 800d764:	4603      	mov	r3, r0
 800d766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800d76a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d76e:	2b63      	cmp	r3, #99	; 0x63
 800d770:	d813      	bhi.n	800d79a <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800d772:	f107 0214 	add.w	r2, r7, #20
 800d776:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d77a:	4611      	mov	r1, r2
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe fed2 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800d782:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d786:	4619      	mov	r1, r3
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7fe ff38 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800d78e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d792:	4618      	mov	r0, r3
 800d794:	f7ff fa7f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800d798:	e031      	b.n	800d7fe <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800d79a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d79e:	3301      	adds	r3, #1
 800d7a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800d7a4:	f240 32c3 	movw	r2, #963	; 0x3c3
 800d7a8:	4919      	ldr	r1, [pc, #100]	; (800d810 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800d7aa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d7ae:	f7fe fc3f 	bl	800c030 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d7b2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800d7b6:	4b15      	ldr	r3, [pc, #84]	; (800d80c <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800d7b8:	681c      	ldr	r4, [r3, #0]
 800d7ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d7c2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d7c6:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800d7c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d7cc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fe fea8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800d7d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f7fe ff0e 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800d7e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7ff fa55 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800d7ec:	f240 33c7 	movw	r3, #967	; 0x3c7
 800d7f0:	4a07      	ldr	r2, [pc, #28]	; (800d810 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800d7f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d7f6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d7fa:	f7fe fc2d 	bl	800c058 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800d7fe:	bf00      	nop
}
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	379c      	adds	r7, #156	; 0x9c
 800d804:	46bd      	mov	sp, r7
 800d806:	bd90      	pop	{r4, r7, pc}
 800d808:	08023c5c 	.word	0x08023c5c
 800d80c:	200000b0 	.word	0x200000b0
 800d810:	08023b9c 	.word	0x08023b9c

0800d814 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b08a      	sub	sp, #40	; 0x28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800d820:	491f      	ldr	r1, [pc, #124]	; (800d8a0 <_Z16StringFromBinaryPKhj+0x8c>)
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f7fe fe7f 	bl	800c526 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800d828:	2300      	movs	r3, #0
 800d82a:	627b      	str	r3, [r7, #36]	; 0x24
 800d82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	429a      	cmp	r2, r3
 800d832:	d219      	bcs.n	800d868 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800d834:	68ba      	ldr	r2, [r7, #8]
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	4413      	add	r3, r2
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	461a      	mov	r2, r3
 800d83e:	f107 0314 	add.w	r3, r7, #20
 800d842:	4918      	ldr	r1, [pc, #96]	; (800d8a4 <_Z16StringFromBinaryPKhj+0x90>)
 800d844:	4618      	mov	r0, r3
 800d846:	f7ff ff2d 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 800d84a:	f107 0314 	add.w	r3, r7, #20
 800d84e:	4619      	mov	r1, r3
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f7ff fa9d 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800d856:	f107 0314 	add.w	r3, r7, #20
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7ff fa1b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800d860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d862:	3301      	adds	r3, #1
 800d864:	627b      	str	r3, [r7, #36]	; 0x24
 800d866:	e7e1      	b.n	800d82c <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f7ff f9f3 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800d86e:	4603      	mov	r3, r0
 800d870:	3b01      	subs	r3, #1
 800d872:	f107 001c 	add.w	r0, r7, #28
 800d876:	2200      	movs	r2, #0
 800d878:	68f9      	ldr	r1, [r7, #12]
 800d87a:	f7ff fb15 	bl	800cea8 <_ZNK12SimpleString9subStringEjj>
 800d87e:	f107 031c 	add.w	r3, r7, #28
 800d882:	4619      	mov	r1, r3
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f7fe feba 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800d88a:	f107 031c 	add.w	r3, r7, #28
 800d88e:	4618      	mov	r0, r3
 800d890:	f7ff fa01 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    return result;
 800d894:	bf00      	nop
}
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	3728      	adds	r7, #40	; 0x28
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	08023c5c 	.word	0x08023c5c
 800d8a4:	08023d08 	.word	0x08023d08

0800d8a8 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d006      	beq.n	800d8c8 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	68b9      	ldr	r1, [r7, #8]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7ff ffa7 	bl	800d814 <_Z16StringFromBinaryPKhj>
 800d8c6:	e004      	b.n	800d8d2 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	4904      	ldr	r1, [pc, #16]	; (800d8dc <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7ff fc6f 	bl	800d1b0 <_Z10StringFromPKc>
}
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	08023c7c 	.word	0x08023c7c

0800d8e0 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	4913      	ldr	r1, [pc, #76]	; (800d940 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7ff fed6 	bl	800d6a4 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b80      	cmp	r3, #128	; 0x80
 800d8fc:	bf28      	it	cs
 800d8fe:	2380      	movcs	r3, #128	; 0x80
 800d900:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800d902:	f107 0314 	add.w	r3, r7, #20
 800d906:	69fa      	ldr	r2, [r7, #28]
 800d908:	68b9      	ldr	r1, [r7, #8]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7ff ffcc 	bl	800d8a8 <_Z22StringFromBinaryOrNullPKhj>
 800d910:	f107 0314 	add.w	r3, r7, #20
 800d914:	4619      	mov	r1, r3
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f7ff fa3a 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800d91c:	f107 0314 	add.w	r3, r7, #20
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff f9b8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d903      	bls.n	800d936 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800d92e:	4905      	ldr	r1, [pc, #20]	; (800d944 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f7ff fa3f 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800d936:	bf00      	nop
}
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	3720      	adds	r7, #32
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	08023d10 	.word	0x08023d10
 800d944:	08023d2c 	.word	0x08023d2c

0800d948 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d006      	beq.n	800d968 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	68b9      	ldr	r1, [r7, #8]
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff ffbd 	bl	800d8e0 <_Z24StringFromBinaryWithSizePKhj>
 800d966:	e004      	b.n	800d972 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	4904      	ldr	r1, [pc, #16]	; (800d97c <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7ff fc1f 	bl	800d1b0 <_Z10StringFromPKc>
}
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	08023c7c 	.word	0x08023c7c

0800d980 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b088      	sub	sp, #32
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
 800d98c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800d98e:	4925      	ldr	r1, [pc, #148]	; (800da24 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800d990:	68f8      	ldr	r0, [r7, #12]
 800d992:	f7fe fdc8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2b04      	cmp	r3, #4
 800d99a:	d802      	bhi.n	800d9a2 <_Z20StringFromMaskedBitsmmj+0x22>
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	00db      	lsls	r3, r3, #3
 800d9a0:	e000      	b.n	800d9a4 <_Z20StringFromMaskedBitsmmj+0x24>
 800d9a2:	2320      	movs	r3, #32
 800d9a4:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d9b0:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	61fb      	str	r3, [r7, #28]
 800d9b6:	69fa      	ldr	r2, [r7, #28]
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d22d      	bcs.n	800da1a <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	4013      	ands	r3, r2
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00c      	beq.n	800d9e2 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d001      	beq.n	800d9d6 <_Z20StringFromMaskedBitsmmj+0x56>
 800d9d2:	4b15      	ldr	r3, [pc, #84]	; (800da28 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800d9d4:	e000      	b.n	800d9d8 <_Z20StringFromMaskedBitsmmj+0x58>
 800d9d6:	4b15      	ldr	r3, [pc, #84]	; (800da2c <_Z20StringFromMaskedBitsmmj+0xac>)
 800d9d8:	4619      	mov	r1, r3
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f7ff f9ea 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
 800d9e0:	e003      	b.n	800d9ea <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800d9e2:	4913      	ldr	r1, [pc, #76]	; (800da30 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800d9e4:	68f8      	ldr	r0, [r7, #12]
 800d9e6:	f7ff f9e5 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	f003 0307 	and.w	r3, r3, #7
 800d9f0:	2b07      	cmp	r3, #7
 800d9f2:	d108      	bne.n	800da06 <_Z20StringFromMaskedBitsmmj+0x86>
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	69fa      	ldr	r2, [r7, #28]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d003      	beq.n	800da06 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800d9fe:	490d      	ldr	r1, [pc, #52]	; (800da34 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f7ff f9d7 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	005b      	lsls	r3, r3, #1
 800da0a:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	005b      	lsls	r3, r3, #1
 800da10:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800da12:	69fb      	ldr	r3, [r7, #28]
 800da14:	3301      	adds	r3, #1
 800da16:	61fb      	str	r3, [r7, #28]
 800da18:	e7cd      	b.n	800d9b6 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800da1a:	bf00      	nop
}
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	3720      	adds	r7, #32
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	08023c5c 	.word	0x08023c5c
 800da28:	08023d34 	.word	0x08023d34
 800da2c:	08023d38 	.word	0x08023d38
 800da30:	08023d3c 	.word	0x08023d3c
 800da34:	08023d40 	.word	0x08023d40

0800da38 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800da42:	683a      	ldr	r2, [r7, #0]
 800da44:	4b18      	ldr	r3, [pc, #96]	; (800daa8 <_Z23StringFromOrdinalNumberj+0x70>)
 800da46:	fba3 1302 	umull	r1, r3, r3, r2
 800da4a:	08d9      	lsrs	r1, r3, #3
 800da4c:	460b      	mov	r3, r1
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	440b      	add	r3, r1
 800da52:	005b      	lsls	r3, r3, #1
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	2b0a      	cmp	r3, #10
 800da5c:	d905      	bls.n	800da6a <_Z23StringFromOrdinalNumberj+0x32>
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	2b0d      	cmp	r3, #13
 800da62:	d802      	bhi.n	800da6a <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800da64:	4b11      	ldr	r3, [pc, #68]	; (800daac <_Z23StringFromOrdinalNumberj+0x74>)
 800da66:	60fb      	str	r3, [r7, #12]
 800da68:	e013      	b.n	800da92 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	2b03      	cmp	r3, #3
 800da6e:	d102      	bne.n	800da76 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800da70:	4b0f      	ldr	r3, [pc, #60]	; (800dab0 <_Z23StringFromOrdinalNumberj+0x78>)
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	e00d      	b.n	800da92 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d102      	bne.n	800da82 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800da7c:	4b0d      	ldr	r3, [pc, #52]	; (800dab4 <_Z23StringFromOrdinalNumberj+0x7c>)
 800da7e:	60fb      	str	r3, [r7, #12]
 800da80:	e007      	b.n	800da92 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d102      	bne.n	800da8e <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800da88:	4b0b      	ldr	r3, [pc, #44]	; (800dab8 <_Z23StringFromOrdinalNumberj+0x80>)
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	e001      	b.n	800da92 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800da8e:	4b07      	ldr	r3, [pc, #28]	; (800daac <_Z23StringFromOrdinalNumberj+0x74>)
 800da90:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	4908      	ldr	r1, [pc, #32]	; (800dabc <_Z23StringFromOrdinalNumberj+0x84>)
 800da9a:	f7ff fe03 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	cccccccd 	.word	0xcccccccd
 800daac:	08023d44 	.word	0x08023d44
 800dab0:	08023d48 	.word	0x08023d48
 800dab4:	08023d4c 	.word	0x08023d4c
 800dab8:	08023d50 	.word	0x08023d50
 800dabc:	08023d54 	.word	0x08023d54

0800dac0 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	3304      	adds	r3, #4
 800dacc:	4907      	ldr	r1, [pc, #28]	; (800daec <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800dace:	4618      	mov	r0, r3
 800dad0:	f7fe fd29 	bl	800c526 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	60da      	str	r2, [r3, #12]
}
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	08023c5c 	.word	0x08023c5c

0800daf0 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800daf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d01e      	beq.n	800db40 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	3b04      	subs	r3, #4
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	00db      	lsls	r3, r3, #3
 800db10:	18d4      	adds	r4, r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	429c      	cmp	r4, r3
 800db18:	d004      	beq.n	800db24 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800db1a:	3c08      	subs	r4, #8
 800db1c:	4620      	mov	r0, r4
 800db1e:	f7ff f8ba 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800db22:	e7f6      	b.n	800db12 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f1a3 0208 	sub.w	r2, r3, #8
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	3b04      	subs	r3, #4
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	3301      	adds	r3, #1
 800db36:	00db      	lsls	r3, r3, #3
 800db38:	4619      	mov	r1, r3
 800db3a:	4610      	mov	r0, r2
 800db3c:	f7fc f976 	bl	8009e2c <_ZdaPvj>

    size_ = _size;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	683a      	ldr	r2, [r7, #0]
 800db44:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	68dc      	ldr	r4, [r3, #12]
 800db4a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800db4e:	d202      	bcs.n	800db56 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800db50:	1c63      	adds	r3, r4, #1
 800db52:	00db      	lsls	r3, r3, #3
 800db54:	e001      	b.n	800db5a <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800db56:	f04f 33ff 	mov.w	r3, #4294967295
 800db5a:	f240 4227 	movw	r2, #1063	; 0x427
 800db5e:	4910      	ldr	r1, [pc, #64]	; (800dba0 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800db60:	4618      	mov	r0, r3
 800db62:	f7fc f941 	bl	8009de8 <_ZnajPKci>
 800db66:	4605      	mov	r5, r0
 800db68:	1d2b      	adds	r3, r5, #4
 800db6a:	3b04      	subs	r3, #4
 800db6c:	2208      	movs	r2, #8
 800db6e:	601a      	str	r2, [r3, #0]
 800db70:	1d2b      	adds	r3, r5, #4
 800db72:	601c      	str	r4, [r3, #0]
 800db74:	f105 0308 	add.w	r3, r5, #8
 800db78:	1e62      	subs	r2, r4, #1
 800db7a:	4614      	mov	r4, r2
 800db7c:	461e      	mov	r6, r3
 800db7e:	2c00      	cmp	r4, #0
 800db80:	db06      	blt.n	800db90 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800db82:	4908      	ldr	r1, [pc, #32]	; (800dba4 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800db84:	4630      	mov	r0, r6
 800db86:	f7fe fcce 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800db8a:	3608      	adds	r6, #8
 800db8c:	3c01      	subs	r4, #1
 800db8e:	e7f6      	b.n	800db7e <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800db90:	f105 0208 	add.w	r2, r5, #8
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	601a      	str	r2, [r3, #0]
}
 800db98:	bf00      	nop
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dba0:	08023b9c 	.word	0x08023b9c
 800dba4:	08023c5c 	.word	0x08023c5c

0800dba8 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800dba8:	b590      	push	{r4, r7, lr}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d01e      	beq.n	800dbf6 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	3b04      	subs	r3, #4
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	18d4      	adds	r4, r2, r3
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	429c      	cmp	r4, r3
 800dbce:	d004      	beq.n	800dbda <_ZN22SimpleStringCollectionD1Ev+0x32>
 800dbd0:	3c08      	subs	r4, #8
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f7ff f85f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800dbd8:	e7f6      	b.n	800dbc8 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f1a3 0208 	sub.w	r2, r3, #8
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3b04      	subs	r3, #4
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	3301      	adds	r3, #1
 800dbec:	00db      	lsls	r3, r3, #3
 800dbee:	4619      	mov	r1, r3
 800dbf0:	4610      	mov	r0, r2
 800dbf2:	f7fc f91b 	bl	8009e2c <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7ff f84b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	4618      	mov	r0, r3
 800dc04:	370c      	adds	r7, #12
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd90      	pop	{r4, r7, pc}

0800dc0a <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
    return size_;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	68db      	ldr	r3, [r3, #12]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
	...

0800dc24 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800dc24:	b590      	push	{r4, r7, lr}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	683a      	ldr	r2, [r7, #0]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d315      	bcc.n	800dc64 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	1d1c      	adds	r4, r3, #4
 800dc3c:	f107 0308 	add.w	r3, r7, #8
 800dc40:	490d      	ldr	r1, [pc, #52]	; (800dc78 <_ZN22SimpleStringCollectionixEj+0x54>)
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fe fc6f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800dc48:	f107 0308 	add.w	r3, r7, #8
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f7fe fcd5 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800dc54:	f107 0308 	add.w	r3, r7, #8
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff f81c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        return empty_;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	3304      	adds	r3, #4
 800dc62:	e004      	b.n	800dc6e <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	00db      	lsls	r3, r3, #3
 800dc6c:	4413      	add	r3, r2
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd90      	pop	{r4, r7, pc}
 800dc76:	bf00      	nop
 800dc78:	08023c5c 	.word	0x08023c5c

0800dc7c <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fa fb88 	bl	800839c <_ZN17ConsoleTestOutputC1Ev>
 800dc8c:	4a08      	ldr	r2, [pc, #32]	; (800dcb0 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	601a      	str	r2, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	611a      	str	r2, [r3, #16]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	3314      	adds	r3, #20
 800dc9c:	4905      	ldr	r1, [pc, #20]	; (800dcb4 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe fc41 	bl	800c526 <_ZN12SimpleStringC1EPKc>
{
}
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4618      	mov	r0, r3
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	08027878 	.word	0x08027878
 800dcb4:	08023d5c 	.word	0x08023d5c

0800dcb8 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	4a08      	ldr	r2, [pc, #32]	; (800dce4 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	3314      	adds	r3, #20
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe ffe3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fa fb74 	bl	80083c0 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	08027878 	.word	0x08027878

0800dce8 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
}
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7ff ffe1 	bl	800dcb8 <_ZN18TeamCityTestOutputD1Ev>
 800dcf6:	211c      	movs	r1, #28
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f7fc f865 	bl	8009dc8 <_ZdlPvj>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4618      	mov	r0, r3
 800dd02:	3708      	adds	r7, #8
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	332c      	adds	r3, #44	; 0x2c
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	492b      	ldr	r1, [pc, #172]	; (800ddcc <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800dd1e:	4610      	mov	r0, r2
 800dd20:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800dd22:	f107 0308 	add.w	r3, r7, #8
 800dd26:	6839      	ldr	r1, [r7, #0]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f004 fdf7 	bl	801291c <_ZNK10UtestShell7getNameEv>
 800dd2e:	f107 0308 	add.w	r3, r7, #8
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fe ff82 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 f919 	bl	800df74 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800dd42:	f107 0308 	add.w	r3, r7, #8
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fe ffa5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	332c      	adds	r3, #44	; 0x2c
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	491e      	ldr	r1, [pc, #120]	; (800ddd0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800dd58:	4610      	mov	r0, r2
 800dd5a:	4798      	blx	r3
    if (!test.willRun()) {
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	3318      	adds	r3, #24
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	6838      	ldr	r0, [r7, #0]
 800dd66:	4798      	blx	r3
 800dd68:	4603      	mov	r3, r0
 800dd6a:	f083 0301 	eor.w	r3, r3, #1
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d024      	beq.n	800ddbe <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	332c      	adds	r3, #44	; 0x2c
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4915      	ldr	r1, [pc, #84]	; (800ddd4 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800dd80:	4610      	mov	r0, r2
 800dd82:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800dd84:	f107 0310 	add.w	r3, r7, #16
 800dd88:	6839      	ldr	r1, [r7, #0]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f004 fdc6 	bl	801291c <_ZNK10UtestShell7getNameEv>
 800dd90:	f107 0310 	add.w	r3, r7, #16
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fe ff51 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f8e8 	bl	800df74 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800dda4:	f107 0310 	add.w	r3, r7, #16
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7fe ff74 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        print("']\n");
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	332c      	adds	r3, #44	; 0x2c
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4905      	ldr	r1, [pc, #20]	; (800ddd0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800ddba:	4610      	mov	r0, r2
 800ddbc:	4798      	blx	r3
    }
    currtest_ = &test;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	611a      	str	r2, [r3, #16]
}
 800ddc4:	bf00      	nop
 800ddc6:	3718      	adds	r7, #24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	08023d60 	.word	0x08023d60
 800ddd0:	08023d80 	.word	0x08023d80
 800ddd4:	08023d84 	.word	0x08023d84

0800ddd8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800ddd8:	b5b0      	push	{r4, r5, r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	691b      	ldr	r3, [r3, #16]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d03b      	beq.n	800de62 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	332c      	adds	r3, #44	; 0x2c
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	491d      	ldr	r1, [pc, #116]	; (800de6c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800ddf6:	4610      	mov	r0, r2
 800ddf8:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	691a      	ldr	r2, [r3, #16]
 800ddfe:	f107 0308 	add.w	r3, r7, #8
 800de02:	4611      	mov	r1, r2
 800de04:	4618      	mov	r0, r3
 800de06:	f004 fd89 	bl	801291c <_ZNK10UtestShell7getNameEv>
 800de0a:	f107 0308 	add.w	r3, r7, #8
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe ff14 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800de14:	4603      	mov	r3, r0
 800de16:	4619      	mov	r1, r3
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 f8ab 	bl	800df74 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800de1e:	f107 0308 	add.w	r3, r7, #8
 800de22:	4618      	mov	r0, r3
 800de24:	f7fe ff37 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	332c      	adds	r3, #44	; 0x2c
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	490f      	ldr	r1, [pc, #60]	; (800de70 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800de34:	4610      	mov	r0, r2
 800de36:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800de38:	687d      	ldr	r5, [r7, #4]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	3334      	adds	r3, #52	; 0x34
 800de40:	681c      	ldr	r4, [r3, #0]
 800de42:	6838      	ldr	r0, [r7, #0]
 800de44:	f004 fa0a 	bl	801225c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800de48:	4603      	mov	r3, r0
 800de4a:	4619      	mov	r1, r3
 800de4c:	4628      	mov	r0, r5
 800de4e:	47a0      	blx	r4
    print("']\n");
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	332c      	adds	r3, #44	; 0x2c
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4906      	ldr	r1, [pc, #24]	; (800de74 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800de5c:	4610      	mov	r0, r2
 800de5e:	4798      	blx	r3
 800de60:	e000      	b.n	800de64 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800de62:	bf00      	nop
}
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bdb0      	pop	{r4, r5, r7, pc}
 800de6a:	bf00      	nop
 800de6c:	08023da4 	.word	0x08023da4
 800de70:	08023dc4 	.word	0x08023dc4
 800de74:	08023d80 	.word	0x08023d80

0800de78 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800de78:	b590      	push	{r4, r7, lr}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f103 0414 	add.w	r4, r3, #20
 800de88:	f107 0308 	add.w	r3, r7, #8
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	4618      	mov	r0, r3
 800de90:	f004 fd53 	bl	801293a <_ZNK10UtestShell8getGroupEv>
 800de94:	f107 0308 	add.w	r3, r7, #8
 800de98:	4619      	mov	r1, r3
 800de9a:	4620      	mov	r0, r4
 800de9c:	f7fe fbaf 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800dea0:	f107 0308 	add.w	r3, r7, #8
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fe fef6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	332c      	adds	r3, #44	; 0x2c
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	490c      	ldr	r1, [pc, #48]	; (800dee8 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800deb6:	4610      	mov	r0, r2
 800deb8:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	3314      	adds	r3, #20
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fe febc 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800dec4:	4603      	mov	r3, r0
 800dec6:	4619      	mov	r1, r3
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 f853 	bl	800df74 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	332c      	adds	r3, #44	; 0x2c
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4904      	ldr	r1, [pc, #16]	; (800deec <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800deda:	4610      	mov	r0, r2
 800dedc:	4798      	blx	r3
}
 800dede:	bf00      	nop
 800dee0:	3714      	adds	r7, #20
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd90      	pop	{r4, r7, pc}
 800dee6:	bf00      	nop
 800dee8:	08023dd4 	.word	0x08023dd4
 800deec:	08023d80 	.word	0x08023d80

0800def0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800def0:	b590      	push	{r4, r7, lr}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f103 0414 	add.w	r4, r3, #20
 800df00:	f107 0308 	add.w	r3, r7, #8
 800df04:	4918      	ldr	r1, [pc, #96]	; (800df68 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800df06:	4618      	mov	r0, r3
 800df08:	f7fe fb0d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800df0c:	f107 0308 	add.w	r3, r7, #8
 800df10:	4619      	mov	r1, r3
 800df12:	4620      	mov	r0, r4
 800df14:	f7fe fecb 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 800df18:	4603      	mov	r3, r0
 800df1a:	461c      	mov	r4, r3
 800df1c:	f107 0308 	add.w	r3, r7, #8
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe feb8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800df26:	2c00      	cmp	r4, #0
 800df28:	d11a      	bne.n	800df60 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	332c      	adds	r3, #44	; 0x2c
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	490d      	ldr	r1, [pc, #52]	; (800df6c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800df36:	4610      	mov	r0, r2
 800df38:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	3314      	adds	r3, #20
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fe fe7c 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800df44:	4603      	mov	r3, r0
 800df46:	4619      	mov	r1, r3
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f813 	bl	800df74 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	332c      	adds	r3, #44	; 0x2c
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4905      	ldr	r1, [pc, #20]	; (800df70 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800df5a:	4610      	mov	r0, r2
 800df5c:	4798      	blx	r3
 800df5e:	e000      	b.n	800df62 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800df60:	bf00      	nop
}
 800df62:	3714      	adds	r7, #20
 800df64:	46bd      	mov	sp, r7
 800df66:	bd90      	pop	{r4, r7, pc}
 800df68:	08023d5c 	.word	0x08023d5c
 800df6c:	08023df8 	.word	0x08023df8
 800df70:	08023d80 	.word	0x08023d80

0800df74 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
    while (*s) {
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d03f      	beq.n	800e006 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	2b27      	cmp	r3, #39	; 0x27
 800df8c:	d00b      	beq.n	800dfa6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	2b7c      	cmp	r3, #124	; 0x7c
 800df94:	d007      	beq.n	800dfa6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	2b5b      	cmp	r3, #91	; 0x5b
 800df9c:	d003      	beq.n	800dfa6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b5d      	cmp	r3, #93	; 0x5d
 800dfa4:	d107      	bne.n	800dfb6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800dfa6:	237c      	movs	r3, #124	; 0x7c
 800dfa8:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	73bb      	strb	r3, [r7, #14]
 800dfb4:	e01a      	b.n	800dfec <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	2b0d      	cmp	r3, #13
 800dfbc:	d106      	bne.n	800dfcc <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800dfbe:	237c      	movs	r3, #124	; 0x7c
 800dfc0:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800dfc2:	2372      	movs	r3, #114	; 0x72
 800dfc4:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	73bb      	strb	r3, [r7, #14]
 800dfca:	e00f      	b.n	800dfec <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b0a      	cmp	r3, #10
 800dfd2:	d106      	bne.n	800dfe2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800dfd4:	237c      	movs	r3, #124	; 0x7c
 800dfd6:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800dfd8:	236e      	movs	r3, #110	; 0x6e
 800dfda:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	73bb      	strb	r3, [r7, #14]
 800dfe0:	e004      	b.n	800dfec <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	3328      	adds	r3, #40	; 0x28
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f107 010c 	add.w	r1, r7, #12
 800dffa:	4610      	mov	r0, r2
 800dffc:	4798      	blx	r3
        s++;
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	3301      	adds	r3, #1
 800e002:	603b      	str	r3, [r7, #0]
    while (*s) {
 800e004:	e7bb      	b.n	800df7e <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800e006:	bf00      	nop
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
	...

0800e010 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800e010:	b5b0      	push	{r4, r5, r7, lr}
 800e012:	b08a      	sub	sp, #40	; 0x28
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	332c      	adds	r3, #44	; 0x2c
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4968      	ldr	r1, [pc, #416]	; (800e1c8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800e026:	4610      	mov	r0, r2
 800e028:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	3310      	adds	r3, #16
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f107 0208 	add.w	r2, r7, #8
 800e036:	6839      	ldr	r1, [r7, #0]
 800e038:	4610      	mov	r0, r2
 800e03a:	4798      	blx	r3
 800e03c:	f107 0308 	add.w	r3, r7, #8
 800e040:	4618      	mov	r0, r3
 800e042:	f7fe fdfb 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e046:	4603      	mov	r3, r0
 800e048:	4619      	mov	r1, r3
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f7ff ff92 	bl	800df74 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e050:	f107 0308 	add.w	r3, r7, #8
 800e054:	4618      	mov	r0, r3
 800e056:	f7fe fe1e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	332c      	adds	r3, #44	; 0x2c
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4959      	ldr	r1, [pc, #356]	; (800e1cc <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800e066:	4610      	mov	r0, r2
 800e068:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800e06a:	6838      	ldr	r0, [r7, #0]
 800e06c:	f000 fa15 	bl	800e49a <_ZNK11TestFailure17isOutsideTestFileEv>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d105      	bne.n	800e082 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800e076:	6838      	ldr	r0, [r7, #0]
 800e078:	f000 fa21 	bl	800e4be <_ZNK11TestFailure18isInHelperFunctionEv>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d001      	beq.n	800e086 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800e082:	2301      	movs	r3, #1
 800e084:	e000      	b.n	800e088 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800e086:	2300      	movs	r3, #0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d042      	beq.n	800e112 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	332c      	adds	r3, #44	; 0x2c
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	494e      	ldr	r1, [pc, #312]	; (800e1d0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800e098:	4610      	mov	r0, r2
 800e09a:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800e09c:	687d      	ldr	r5, [r7, #4]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	332c      	adds	r3, #44	; 0x2c
 800e0a4:	681c      	ldr	r4, [r3, #0]
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	331c      	adds	r3, #28
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f107 0210 	add.w	r2, r7, #16
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	4798      	blx	r3
 800e0b8:	f107 0310 	add.w	r3, r7, #16
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fe fdbd 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	47a0      	blx	r4
 800e0ca:	f107 0310 	add.w	r3, r7, #16
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fe fde1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        print(":");
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	332c      	adds	r3, #44	; 0x2c
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	493d      	ldr	r1, [pc, #244]	; (800e1d4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e0e0:	4610      	mov	r0, r2
 800e0e2:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800e0e4:	687d      	ldr	r5, [r7, #4]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	3334      	adds	r3, #52	; 0x34
 800e0ec:	681c      	ldr	r4, [r3, #0]
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	3320      	adds	r3, #32
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	6838      	ldr	r0, [r7, #0]
 800e0f8:	4798      	blx	r3
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	4628      	mov	r0, r5
 800e100:	47a0      	blx	r4
        print("): ");
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	332c      	adds	r3, #44	; 0x2c
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4932      	ldr	r1, [pc, #200]	; (800e1d8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800e10e:	4610      	mov	r0, r2
 800e110:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	3308      	adds	r3, #8
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f107 0218 	add.w	r2, r7, #24
 800e11e:	6839      	ldr	r1, [r7, #0]
 800e120:	4610      	mov	r0, r2
 800e122:	4798      	blx	r3
 800e124:	f107 0318 	add.w	r3, r7, #24
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fe fd87 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e12e:	4603      	mov	r3, r0
 800e130:	4619      	mov	r1, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7ff ff1e 	bl	800df74 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e138:	f107 0318 	add.w	r3, r7, #24
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fe fdaa 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    print(":");
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	332c      	adds	r3, #44	; 0x2c
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4921      	ldr	r1, [pc, #132]	; (800e1d4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800e14e:	4610      	mov	r0, r2
 800e150:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800e152:	687d      	ldr	r5, [r7, #4]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	3334      	adds	r3, #52	; 0x34
 800e15a:	681c      	ldr	r4, [r3, #0]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	3314      	adds	r3, #20
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	6838      	ldr	r0, [r7, #0]
 800e166:	4798      	blx	r3
 800e168:	4603      	mov	r3, r0
 800e16a:	4619      	mov	r1, r3
 800e16c:	4628      	mov	r0, r5
 800e16e:	47a0      	blx	r4

    print("' details='");
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	332c      	adds	r3, #44	; 0x2c
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4918      	ldr	r1, [pc, #96]	; (800e1dc <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800e17c:	4610      	mov	r0, r2
 800e17e:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	3318      	adds	r3, #24
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f107 0220 	add.w	r2, r7, #32
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	4610      	mov	r0, r2
 800e190:	4798      	blx	r3
 800e192:	f107 0320 	add.w	r3, r7, #32
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe fd50 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e19c:	4603      	mov	r3, r0
 800e19e:	4619      	mov	r1, r3
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7ff fee7 	bl	800df74 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e1a6:	f107 0320 	add.w	r3, r7, #32
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fe fd73 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	332c      	adds	r3, #44	; 0x2c
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4909      	ldr	r1, [pc, #36]	; (800e1e0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800e1bc:	4610      	mov	r0, r2
 800e1be:	4798      	blx	r3
}
 800e1c0:	bf00      	nop
 800e1c2:	3728      	adds	r7, #40	; 0x28
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bdb0      	pop	{r4, r5, r7, pc}
 800e1c8:	08023e1c 	.word	0x08023e1c
 800e1cc:	08023e3c 	.word	0x08023e3c
 800e1d0:	08023e48 	.word	0x08023e48
 800e1d4:	08023e58 	.word	0x08023e58
 800e1d8:	08023e5c 	.word	0x08023e5c
 800e1dc:	08023e60 	.word	0x08023e60
 800e1e0:	08023d80 	.word	0x08023d80

0800e1e4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800e1f0:	4a1a      	ldr	r2, [pc, #104]	; (800e25c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	601a      	str	r2, [r3, #0]
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3314      	adds	r3, #20
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	3204      	adds	r2, #4
 800e202:	68b9      	ldr	r1, [r7, #8]
 800e204:	4610      	mov	r0, r2
 800e206:	4798      	blx	r3
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	330c      	adds	r3, #12
 800e20c:	68b9      	ldr	r1, [r7, #8]
 800e20e:	4618      	mov	r0, r3
 800e210:	f004 fb84 	bl	801291c <_ZNK10UtestShell7getNameEv>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	3314      	adds	r3, #20
 800e218:	68b9      	ldr	r1, [r7, #8]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f004 fc4f 	bl	8012abe <_ZNK10UtestShell7getFileEv>
 800e220:	68b8      	ldr	r0, [r7, #8]
 800e222:	f004 fc5b 	bl	8012adc <_ZNK10UtestShell13getLineNumberEv>
 800e226:	4602      	mov	r2, r0
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	61da      	str	r2, [r3, #28]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	3320      	adds	r3, #32
 800e230:	68b9      	ldr	r1, [r7, #8]
 800e232:	4618      	mov	r0, r3
 800e234:	f004 fc43 	bl	8012abe <_ZNK10UtestShell7getFileEv>
 800e238:	68b8      	ldr	r0, [r7, #8]
 800e23a:	f004 fc4f 	bl	8012adc <_ZNK10UtestShell13getLineNumberEv>
 800e23e:	4602      	mov	r2, r0
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	629a      	str	r2, [r3, #40]	; 0x28
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	332c      	adds	r3, #44	; 0x2c
 800e248:	6879      	ldr	r1, [r7, #4]
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fe f9bf 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
{
}
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	08027b44 	.word	0x08027b44

0800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
 800e26c:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800e26e:	4a19      	ldr	r2, [pc, #100]	; (800e2d4 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	3314      	adds	r3, #20
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	3204      	adds	r2, #4
 800e280:	68b9      	ldr	r1, [r7, #8]
 800e282:	4610      	mov	r0, r2
 800e284:	4798      	blx	r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	330c      	adds	r3, #12
 800e28a:	68b9      	ldr	r1, [r7, #8]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f004 fb45 	bl	801291c <_ZNK10UtestShell7getNameEv>
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	3314      	adds	r3, #20
 800e296:	6879      	ldr	r1, [r7, #4]
 800e298:	4618      	mov	r0, r3
 800e29a:	f7fe f944 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	61da      	str	r2, [r3, #28]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	3320      	adds	r3, #32
 800e2a8:	68b9      	ldr	r1, [r7, #8]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f004 fc07 	bl	8012abe <_ZNK10UtestShell7getFileEv>
 800e2b0:	68b8      	ldr	r0, [r7, #8]
 800e2b2:	f004 fc13 	bl	8012adc <_ZNK10UtestShell13getLineNumberEv>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	629a      	str	r2, [r3, #40]	; 0x28
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	332c      	adds	r3, #44	; 0x2c
 800e2c0:	4905      	ldr	r1, [pc, #20]	; (800e2d8 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fe f92f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
{
}
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	08027b44 	.word	0x08027b44
 800e2d8:	08023e6c 	.word	0x08023e6c

0800e2dc <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800e2e6:	4a1e      	ldr	r2, [pc, #120]	; (800e360 <_ZN11TestFailureC1ERKS_+0x84>)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	601a      	str	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	1d1a      	adds	r2, r3, #4
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f7fe f969 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f103 020c 	add.w	r2, r3, #12
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	330c      	adds	r3, #12
 800e306:	4619      	mov	r1, r3
 800e308:	4610      	mov	r0, r2
 800e30a:	f7fe f960 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f103 0214 	add.w	r2, r3, #20
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	3314      	adds	r3, #20
 800e318:	4619      	mov	r1, r3
 800e31a:	4610      	mov	r0, r2
 800e31c:	f7fe f957 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	69da      	ldr	r2, [r3, #28]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	61da      	str	r2, [r3, #28]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f103 0220 	add.w	r2, r3, #32
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	3320      	adds	r3, #32
 800e332:	4619      	mov	r1, r3
 800e334:	4610      	mov	r0, r2
 800e336:	f7fe f94a 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	629a      	str	r2, [r3, #40]	; 0x28
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	332c      	adds	r3, #44	; 0x2c
 800e34c:	4619      	mov	r1, r3
 800e34e:	4610      	mov	r0, r2
 800e350:	f7fe f93d 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
{
}
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	4618      	mov	r0, r3
 800e358:	3708      	adds	r7, #8
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	08027b44 	.word	0x08027b44

0800e364 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	4a10      	ldr	r2, [pc, #64]	; (800e3b0 <_ZN11TestFailureD1Ev+0x4c>)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	332c      	adds	r3, #44	; 0x2c
 800e376:	4618      	mov	r0, r3
 800e378:	f7fe fc8d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3320      	adds	r3, #32
 800e380:	4618      	mov	r0, r3
 800e382:	f7fe fc88 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3314      	adds	r3, #20
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fe fc83 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	330c      	adds	r3, #12
 800e394:	4618      	mov	r0, r3
 800e396:	f7fe fc7e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	3304      	adds	r3, #4
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fe fc79 	bl	800cc96 <_ZN12SimpleStringD1Ev>
{
}
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3708      	adds	r7, #8
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	08027b44 	.word	0x08027b44

0800e3b4 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
}
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7ff ffd1 	bl	800e364 <_ZN11TestFailureD1Ev>
 800e3c2:	2134      	movs	r1, #52	; 0x34
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7fb fcff 	bl	8009dc8 <_ZdlPvj>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
    return fileName_;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	3314      	adds	r3, #20
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7fe f8f2 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
}
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b082      	sub	sp, #8
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	3320      	adds	r3, #32
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7fe f8e3 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
}
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
    return testName_;
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	3304      	adds	r3, #4
 800e41e:	4619      	mov	r1, r3
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f7fe f8d4 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
}
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b082      	sub	sp, #8
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	330c      	adds	r3, #12
 800e43c:	4619      	mov	r1, r3
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f7fe f8c5 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
}
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	69db      	ldr	r3, [r3, #28]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800e470:	4618      	mov	r0, r3
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
    return message_;
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	332c      	adds	r3, #44	; 0x2c
 800e48a:	4619      	mov	r1, r3
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7fe f89e 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
}
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b082      	sub	sp, #8
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f103 0220 	add.w	r2, r3, #32
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	3314      	adds	r3, #20
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	4610      	mov	r0, r2
 800e4b0:	f7fe fc42 	bl	800cd38 <_ZneRK12SimpleStringS1_>
 800e4b4:	4603      	mov	r3, r0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3708      	adds	r7, #8
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}

0800e4be <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800e4be:	b480      	push	{r7}
 800e4c0:	b083      	sub	sp, #12
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	69da      	ldr	r2, [r3, #28]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	bf34      	ite	cc
 800e4d2:	2301      	movcc	r3, #1
 800e4d4:	2300      	movcs	r3, #0
 800e4d6:	b2db      	uxtb	r3, r3
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800e4e4:	b590      	push	{r4, r7, lr}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
 800e4f0:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7fe fba2 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	6838      	ldr	r0, [r7, #0]
 800e4fc:	f7fe fb9e 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e500:	4603      	mov	r3, r0
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	4622      	mov	r2, r4
 800e506:	4903      	ldr	r1, [pc, #12]	; (800e514 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800e508:	f7ff f8cc 	bl	800d6a4 <_Z16StringFromFormatPKcz>
}
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	3714      	adds	r7, #20
 800e510:	46bd      	mov	sp, r7
 800e512:	bd90      	pop	{r4, r7, pc}
 800e514:	08023e78 	.word	0x08023e78

0800e518 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800e518:	b590      	push	{r4, r7, lr}
 800e51a:	b097      	sub	sp, #92	; 0x5c
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
 800e524:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800e526:	494c      	ldr	r1, [pc, #304]	; (800e658 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f7fd fffc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800e52e:	2314      	movs	r3, #20
 800e530:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800e532:	230a      	movs	r3, #10
 800e534:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800e536:	f107 0320 	add.w	r3, r7, #32
 800e53a:	220a      	movs	r2, #10
 800e53c:	4947      	ldr	r1, [pc, #284]	; (800e65c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fe f80c 	bl	800c55c <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800e544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e548:	f107 0120 	add.w	r1, r7, #32
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fe fc03 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800e554:	f107 0318 	add.w	r3, r7, #24
 800e558:	f107 0220 	add.w	r2, r7, #32
 800e55c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e560:	4618      	mov	r0, r3
 800e562:	f7fe fbfa 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800e566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fe fb93 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800e570:	f107 0310 	add.w	r3, r7, #16
 800e574:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e576:	493a      	ldr	r1, [pc, #232]	; (800e660 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800e578:	4618      	mov	r0, r3
 800e57a:	f7ff f893 	bl	800d6a4 <_Z16StringFromFormatPKcz>

    result += "\n";
 800e57e:	4939      	ldr	r1, [pc, #228]	; (800e664 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7fe fc17 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800e586:	f107 0310 	add.w	r3, r7, #16
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fe fb56 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e590:	4604      	mov	r4, r0
 800e592:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800e596:	f107 0118 	add.w	r1, r7, #24
 800e59a:	2314      	movs	r3, #20
 800e59c:	683a      	ldr	r2, [r7, #0]
 800e59e:	f7fe fc83 	bl	800cea8 <_ZNK12SimpleString9subStringEjj>
 800e5a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fe fb48 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e5b2:	4622      	mov	r2, r4
 800e5b4:	492c      	ldr	r1, [pc, #176]	; (800e668 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800e5b6:	f7ff f875 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 800e5ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e5be:	4619      	mov	r1, r3
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f7fe fbe5 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800e5c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fe fb63 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800e5d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7fe fb5e 	bl	800cc96 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800e5da:	f107 0310 	add.w	r3, r7, #16
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fe fb38 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	f103 020a 	add.w	r2, r3, #10
 800e5ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e5ee:	491b      	ldr	r1, [pc, #108]	; (800e65c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7fd ffb3 	bl	800c55c <_ZN12SimpleStringC1EPKcj>
 800e5f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fe fb1e 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e600:	4602      	mov	r2, r0
 800e602:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e606:	4919      	ldr	r1, [pc, #100]	; (800e66c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800e608:	4618      	mov	r0, r3
 800e60a:	f7ff f84b 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 800e60e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e612:	4619      	mov	r1, r3
 800e614:	68f8      	ldr	r0, [r7, #12]
 800e616:	f7fe fbbb 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800e61a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e61e:	4618      	mov	r0, r3
 800e620:	f7fe fb39 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800e624:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fe fb34 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return result;
 800e62e:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800e630:	f107 0310 	add.w	r3, r7, #16
 800e634:	4618      	mov	r0, r3
 800e636:	f7fe fb2e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800e63a:	f107 0318 	add.w	r3, r7, #24
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe fb29 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800e644:	f107 0320 	add.w	r3, r7, #32
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fe fb24 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return result;
 800e64e:	bf00      	nop
}
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	375c      	adds	r7, #92	; 0x5c
 800e654:	46bd      	mov	sp, r7
 800e656:	bd90      	pop	{r4, r7, pc}
 800e658:	08023e98 	.word	0x08023e98
 800e65c:	08023e9c 	.word	0x08023e9c
 800e660:	08023ea0 	.word	0x08023ea0
 800e664:	08023ec8 	.word	0x08023ec8
 800e668:	08023ecc 	.word	0x08023ecc
 800e66c:	08023ed4 	.word	0x08023ed4

0800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800e670:	b590      	push	{r4, r7, lr}
 800e672:	b087      	sub	sp, #28
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800e67c:	491a      	ldr	r1, [pc, #104]	; (800e6e8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f7fd ff51 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7fe faf5 	bl	800cc74 <_ZNK12SimpleString7isEmptyEv>
 800e68a:	4603      	mov	r3, r0
 800e68c:	f083 0301 	eor.w	r3, r3, #1
 800e690:	b2db      	uxtb	r3, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	d022      	beq.n	800e6dc <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800e696:	f107 0310 	add.w	r3, r7, #16
 800e69a:	4914      	ldr	r1, [pc, #80]	; (800e6ec <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fd ff42 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800e6a2:	f107 0310 	add.w	r3, r7, #16
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f7fe f800 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	f083 0301 	eor.w	r3, r3, #1
 800e6b4:	b2dc      	uxtb	r4, r3
 800e6b6:	f107 0310 	add.w	r3, r7, #16
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fe faeb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800e6c0:	2c00      	cmp	r4, #0
 800e6c2:	d003      	beq.n	800e6cc <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800e6c4:	490a      	ldr	r1, [pc, #40]	; (800e6f0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800e6c6:	68f8      	ldr	r0, [r7, #12]
 800e6c8:	f7fe fb74 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800e6cc:	6879      	ldr	r1, [r7, #4]
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f7fe fb5e 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800e6d4:	4907      	ldr	r1, [pc, #28]	; (800e6f4 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800e6d6:	68f8      	ldr	r0, [r7, #12]
 800e6d8:	f7fe fb6c 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800e6dc:	bf00      	nop
}
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	371c      	adds	r7, #28
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd90      	pop	{r4, r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	08023e98 	.word	0x08023e98
 800e6ec:	08023edc 	.word	0x08023edc
 800e6f0:	08023ee8 	.word	0x08023ee8
 800e6f4:	08023ef4 	.word	0x08023ef4

0800e6f8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800e6f8:	b590      	push	{r4, r7, lr}
 800e6fa:	b089      	sub	sp, #36	; 0x24
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	607a      	str	r2, [r7, #4]
 800e704:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800e706:	68f8      	ldr	r0, [r7, #12]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	68b9      	ldr	r1, [r7, #8]
 800e70e:	f7ff fda7 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e712:	4a19      	ldr	r2, [pc, #100]	; (800e778 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e71e:	68f9      	ldr	r1, [r7, #12]
 800e720:	f107 0310 	add.w	r3, r7, #16
 800e724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e726:	4618      	mov	r0, r3
 800e728:	f7ff ffa2 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e72c:	f107 0310 	add.w	r3, r7, #16
 800e730:	4619      	mov	r1, r3
 800e732:	4620      	mov	r0, r4
 800e734:	f7fd ff63 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800e738:	f107 0310 	add.w	r3, r7, #16
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fe faaa 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e748:	68f9      	ldr	r1, [r7, #12]
 800e74a:	f107 0018 	add.w	r0, r7, #24
 800e74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e752:	f7ff fec7 	bl	800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e756:	f107 0318 	add.w	r3, r7, #24
 800e75a:	4619      	mov	r1, r3
 800e75c:	4620      	mov	r0, r4
 800e75e:	f7fe fb17 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800e762:	f107 0318 	add.w	r3, r7, #24
 800e766:	4618      	mov	r0, r3
 800e768:	f7fe fa95 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	4618      	mov	r0, r3
 800e770:	3724      	adds	r7, #36	; 0x24
 800e772:	46bd      	mov	sp, r7
 800e774:	bd90      	pop	{r4, r7, pc}
 800e776:	bf00      	nop
 800e778:	08027b18 	.word	0x08027b18

0800e77c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800e77c:	b5b0      	push	{r4, r5, r7, lr}
 800e77e:	b094      	sub	sp, #80	; 0x50
 800e780:	af00      	add	r7, sp, #0
 800e782:	6278      	str	r0, [r7, #36]	; 0x24
 800e784:	6239      	str	r1, [r7, #32]
 800e786:	61fa      	str	r2, [r7, #28]
 800e788:	61bb      	str	r3, [r7, #24]
 800e78a:	ed87 0b04 	vstr	d0, [r7, #16]
 800e78e:	ed87 1b02 	vstr	d1, [r7, #8]
 800e792:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800e796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	69fa      	ldr	r2, [r7, #28]
 800e79c:	6a39      	ldr	r1, [r7, #32]
 800e79e:	f7ff fd5f 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e7a2:	4a4a      	ldr	r2, [pc, #296]	; (800e8cc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e7ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e7b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7ff ff5a 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e7bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	f7fd ff1b 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800e7c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fe fa62 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800e7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e7d8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800e7da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e7de:	2107      	movs	r1, #7
 800e7e0:	ed97 0b04 	vldr	d0, [r7, #16]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe ff1b 	bl	800d620 <_Z10StringFromdi>
 800e7ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e7ee:	2107      	movs	r1, #7
 800e7f0:	ed97 0b02 	vldr	d0, [r7, #8]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fe ff13 	bl	800d620 <_Z10StringFromdi>
 800e7fa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e7fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e802:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e806:	4629      	mov	r1, r5
 800e808:	f7ff fe6c 	bl	800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e80c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e810:	4619      	mov	r1, r3
 800e812:	4620      	mov	r0, r4
 800e814:	f7fe fabc 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800e818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fe fa3a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800e822:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe fa35 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800e82c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e830:	4618      	mov	r0, r3
 800e832:	f7fe fa30 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	332c      	adds	r3, #44	; 0x2c
 800e83a:	4925      	ldr	r1, [pc, #148]	; (800e8d0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fe fab9 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e848:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e84c:	2107      	movs	r1, #7
 800e84e:	ed97 0b00 	vldr	d0, [r7]
 800e852:	4618      	mov	r0, r3
 800e854:	f7fe fee4 	bl	800d620 <_Z10StringFromdi>
 800e858:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e85c:	4619      	mov	r1, r3
 800e85e:	4620      	mov	r0, r4
 800e860:	f7fe fa96 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800e864:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fe fa14 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	332c      	adds	r3, #44	; 0x2c
 800e872:	4918      	ldr	r1, [pc, #96]	; (800e8d4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800e874:	4618      	mov	r0, r3
 800e876:	f7fe fa9d 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800e87a:	4b17      	ldr	r3, [pc, #92]	; (800e8d8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	ed97 0b04 	vldr	d0, [r7, #16]
 800e882:	4798      	blx	r3
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d10f      	bne.n	800e8aa <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800e88a:	4b13      	ldr	r3, [pc, #76]	; (800e8d8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	ed97 0b02 	vldr	d0, [r7, #8]
 800e892:	4798      	blx	r3
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d107      	bne.n	800e8aa <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800e89a:	4b0f      	ldr	r3, [pc, #60]	; (800e8d8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	ed97 0b00 	vldr	d0, [r7]
 800e8a2:	4798      	blx	r3
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e000      	b.n	800e8b0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d005      	beq.n	800e8c0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	332c      	adds	r3, #44	; 0x2c
 800e8b8:	4908      	ldr	r1, [pc, #32]	; (800e8dc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fe fa7a 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
}
 800e8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3750      	adds	r7, #80	; 0x50
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bdb0      	pop	{r4, r5, r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	08027aec 	.word	0x08027aec
 800e8d0:	08023ef8 	.word	0x08023ef8
 800e8d4:	08023f10 	.word	0x08023f10
 800e8d8:	200000e8 	.word	0x200000e8
 800e8dc:	08023f14 	.word	0x08023f14

0800e8e0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800e8e0:	b590      	push	{r4, r7, lr}
 800e8e2:	b093      	sub	sp, #76	; 0x4c
 800e8e4:	af02      	add	r7, sp, #8
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
 800e8ec:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	68b9      	ldr	r1, [r7, #8]
 800e8f6:	f7ff fcb3 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e8fa:	4a4f      	ldr	r2, [pc, #316]	; (800ea38 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e906:	68f9      	ldr	r1, [r7, #12]
 800e908:	f107 0320 	add.w	r3, r7, #32
 800e90c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e90e:	4618      	mov	r0, r3
 800e910:	f7ff feae 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e914:	f107 0320 	add.w	r3, r7, #32
 800e918:	4619      	mov	r1, r3
 800e91a:	4620      	mov	r0, r4
 800e91c:	f7fd fe6f 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800e920:	f107 0320 	add.w	r3, r7, #32
 800e924:	4618      	mov	r0, r3
 800e926:	f7fe f9b6 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800e92a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e92c:	f7fe f986 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e930:	4602      	mov	r2, r0
 800e932:	f107 0318 	add.w	r3, r7, #24
 800e936:	4611      	mov	r1, r2
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fe fc47 	bl	800d1cc <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800e93e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e940:	f7fe f97c 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800e944:	4602      	mov	r2, r0
 800e946:	f107 0310 	add.w	r3, r7, #16
 800e94a:	4611      	mov	r1, r2
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fe fc3d 	bl	800d1cc <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e958:	68f9      	ldr	r1, [r7, #12]
 800e95a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e95e:	f107 0310 	add.w	r3, r7, #16
 800e962:	f107 0218 	add.w	r2, r7, #24
 800e966:	f7ff fdbd 	bl	800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e96a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e96e:	4619      	mov	r1, r3
 800e970:	4620      	mov	r0, r4
 800e972:	f7fe fa0d 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800e976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fe f98b 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800e980:	2300      	movs	r3, #0
 800e982:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e984:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e986:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e988:	f7fe fae9 	bl	800cf5e <_ZNK12SimpleString2atEj>
 800e98c:	4603      	mov	r3, r0
 800e98e:	461c      	mov	r4, r3
 800e990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e992:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e994:	f7fe fae3 	bl	800cf5e <_ZNK12SimpleString2atEj>
 800e998:	4603      	mov	r3, r0
 800e99a:	429c      	cmp	r4, r3
 800e99c:	bf0c      	ite	eq
 800e99e:	2301      	moveq	r3, #1
 800e9a0:	2300      	movne	r3, #0
 800e9a2:	b2db      	uxtb	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d003      	beq.n	800e9b0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800e9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9ae:	e7e9      	b.n	800e984 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9b4:	f107 0310 	add.w	r3, r7, #16
 800e9b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fe facf 	bl	800cf5e <_ZNK12SimpleString2atEj>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	461c      	mov	r4, r3
 800e9c4:	f107 0318 	add.w	r3, r7, #24
 800e9c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fe fac7 	bl	800cf5e <_ZNK12SimpleString2atEj>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	429c      	cmp	r4, r3
 800e9d4:	bf0c      	ite	eq
 800e9d6:	2301      	moveq	r3, #1
 800e9d8:	2300      	movne	r3, #0
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d003      	beq.n	800e9e8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9e6:	e7e5      	b.n	800e9b4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e9ee:	68f9      	ldr	r1, [r7, #12]
 800e9f0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e9f4:	f107 0210 	add.w	r2, r7, #16
 800e9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fe:	f7ff fd8b 	bl	800e518 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800ea02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ea06:	4619      	mov	r1, r3
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f7fe f9c1 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800ea0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fe f93f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800ea18:	f107 0310 	add.w	r3, r7, #16
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7fe f93a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800ea22:	f107 0318 	add.w	r3, r7, #24
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fe f935 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3744      	adds	r7, #68	; 0x44
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd90      	pop	{r4, r7, pc}
 800ea36:	bf00      	nop
 800ea38:	08027ac0 	.word	0x08027ac0

0800ea3c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800ea3c:	b590      	push	{r4, r7, lr}
 800ea3e:	b087      	sub	sp, #28
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	68b9      	ldr	r1, [r7, #8]
 800ea52:	f7ff fc05 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ea56:	4a1a      	ldr	r2, [pc, #104]	; (800eac0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ea62:	68f9      	ldr	r1, [r7, #12]
 800ea64:	f107 0310 	add.w	r3, r7, #16
 800ea68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7ff fe00 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ea70:	f107 0310 	add.w	r3, r7, #16
 800ea74:	4619      	mov	r1, r3
 800ea76:	4620      	mov	r0, r4
 800ea78:	f7fd fdc1 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800ea7c:	f107 0310 	add.w	r3, r7, #16
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fe f908 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	332c      	adds	r3, #44	; 0x2c
 800ea8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7fe f97f 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	332c      	adds	r3, #44	; 0x2c
 800ea96:	490b      	ldr	r1, [pc, #44]	; (800eac4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fe f98b 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	332c      	adds	r3, #44	; 0x2c
 800eaa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fe f973 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	332c      	adds	r3, #44	; 0x2c
 800eaae:	4906      	ldr	r1, [pc, #24]	; (800eac8 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fe f97f 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
}
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	4618      	mov	r0, r3
 800eaba:	371c      	adds	r7, #28
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd90      	pop	{r4, r7, pc}
 800eac0:	08027a94 	.word	0x08027a94
 800eac4:	08023f38 	.word	0x08023f38
 800eac8:	08023f3c 	.word	0x08023f3c

0800eacc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800eacc:	b5b0      	push	{r4, r5, r7, lr}
 800eace:	b088      	sub	sp, #32
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]
 800ead8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	68b9      	ldr	r1, [r7, #8]
 800eae2:	f7ff fbbd 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eae6:	4a1c      	ldr	r2, [pc, #112]	; (800eb58 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eaf2:	68f9      	ldr	r1, [r7, #12]
 800eaf4:	f107 0310 	add.w	r3, r7, #16
 800eaf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff fdb8 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800eb00:	f107 0310 	add.w	r3, r7, #16
 800eb04:	4619      	mov	r1, r3
 800eb06:	4620      	mov	r0, r4
 800eb08:	f7fd fd79 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800eb0c:	f107 0310 	add.w	r3, r7, #16
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe f8c0 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eb1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb1e:	f7fe f88d 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800eb22:	4605      	mov	r5, r0
 800eb24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb26:	f7fe f889 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	f107 0018 	add.w	r0, r7, #24
 800eb30:	462a      	mov	r2, r5
 800eb32:	490a      	ldr	r1, [pc, #40]	; (800eb5c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800eb34:	f7fe fdb6 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 800eb38:	f107 0318 	add.w	r3, r7, #24
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f7fe f926 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800eb44:	f107 0318 	add.w	r3, r7, #24
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fe f8a4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	4618      	mov	r0, r3
 800eb52:	3720      	adds	r7, #32
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bdb0      	pop	{r4, r5, r7, pc}
 800eb58:	08027a68 	.word	0x08027a68
 800eb5c:	08023f48 	.word	0x08023f48

0800eb60 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800eb60:	b590      	push	{r4, r7, lr}
 800eb62:	b087      	sub	sp, #28
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
 800eb6c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	68b9      	ldr	r1, [r7, #8]
 800eb76:	f7ff fb73 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800eb7a:	4a1a      	ldr	r2, [pc, #104]	; (800ebe4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eb86:	68f9      	ldr	r1, [r7, #12]
 800eb88:	f107 0310 	add.w	r3, r7, #16
 800eb8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7ff fd6e 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800eb94:	f107 0310 	add.w	r3, r7, #16
 800eb98:	4619      	mov	r1, r3
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f7fd fd2f 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800eba0:	f107 0310 	add.w	r3, r7, #16
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fe f876 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	332c      	adds	r3, #44	; 0x2c
 800ebae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7fe f8ed 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	332c      	adds	r3, #44	; 0x2c
 800ebba:	490b      	ldr	r1, [pc, #44]	; (800ebe8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7fe f8f9 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	332c      	adds	r3, #44	; 0x2c
 800ebc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7fe f8e1 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	332c      	adds	r3, #44	; 0x2c
 800ebd2:	4906      	ldr	r1, [pc, #24]	; (800ebec <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fe f8ed 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
}
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	371c      	adds	r7, #28
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd90      	pop	{r4, r7, pc}
 800ebe4:	08027a3c 	.word	0x08027a3c
 800ebe8:	08023f38 	.word	0x08023f38
 800ebec:	08023f3c 	.word	0x08023f3c

0800ebf0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]
 800ebfc:	603b      	str	r3, [r7, #0]
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	68b9      	ldr	r1, [r7, #8]
 800ec06:	f7ff fb2b 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ec0a:	4a07      	ldr	r2, [pc, #28]	; (800ec28 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	332c      	adds	r3, #44	; 0x2c
 800ec14:	69b9      	ldr	r1, [r7, #24]
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fd fcf1 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
}
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3710      	adds	r7, #16
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	080276f8 	.word	0x080276f8

0800ec2c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800ec2c:	b590      	push	{r4, r7, lr}
 800ec2e:	b09d      	sub	sp, #116	; 0x74
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
 800ec38:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ec3a:	68f8      	ldr	r0, [r7, #12]
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	68b9      	ldr	r1, [r7, #8]
 800ec42:	f7ff fb0d 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ec46:	4a5d      	ldr	r2, [pc, #372]	; (800edbc <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ec52:	68f9      	ldr	r1, [r7, #12]
 800ec54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ec58:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7ff fd07 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ec62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ec66:	4619      	mov	r1, r3
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f7fd fcc8 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800ec6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fe f80f 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800ec78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fe fae1 	bl	800d248 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800ec86:	f107 0320 	add.w	r3, r7, #32
 800ec8a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fe fada 	bl	800d248 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800ec94:	f107 0120 	add.w	r1, r7, #32
 800ec98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec9c:	2220      	movs	r2, #32
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fe f8b6 	bl	800ce10 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800eca4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eca8:	4945      	ldr	r1, [pc, #276]	; (800edc0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fd fc3b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800ecb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ecb4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ecb8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fe f84c 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800ecc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ecc6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fe fbd2 	bl	800d474 <_Z30BracketsFormattedHexStringFroml>
 800ecd0:	f107 0318 	add.w	r3, r7, #24
 800ecd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ecd8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fe f83c 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800ece2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fd ffd5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800ecec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fd ffd0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800ecf6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fd ffcb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ed00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ed04:	492e      	ldr	r1, [pc, #184]	; (800edc0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fd fc0d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800ed0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ed10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ed14:	f107 0120 	add.w	r1, r7, #32
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fe f81e 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800ed1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ed22:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fe fba4 	bl	800d474 <_Z30BracketsFormattedHexStringFroml>
 800ed2c:	f107 0310 	add.w	r3, r7, #16
 800ed30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ed34:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7fe f80e 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800ed3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7fd ffa7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800ed48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7fd ffa2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800ed52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7fd ff9d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ed62:	68f9      	ldr	r1, [r7, #12]
 800ed64:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800ed68:	f107 0318 	add.w	r3, r7, #24
 800ed6c:	f107 0210 	add.w	r2, r7, #16
 800ed70:	f7ff fbb8 	bl	800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ed74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ed78:	4619      	mov	r1, r3
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	f7fe f808 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800ed80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7fd ff86 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ed8a:	f107 0310 	add.w	r3, r7, #16
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fd ff81 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ed94:	f107 0318 	add.w	r3, r7, #24
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fd ff7c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800ed9e:	f107 0320 	add.w	r3, r7, #32
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fd ff77 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800eda8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800edac:	4618      	mov	r0, r3
 800edae:	f7fd ff72 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	4618      	mov	r0, r3
 800edb6:	3774      	adds	r7, #116	; 0x74
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd90      	pop	{r4, r7, pc}
 800edbc:	08027a10 	.word	0x08027a10
 800edc0:	08023e9c 	.word	0x08023e9c

0800edc4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800edc4:	b590      	push	{r4, r7, lr}
 800edc6:	b09d      	sub	sp, #116	; 0x74
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
 800edd0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	68b9      	ldr	r1, [r7, #8]
 800edda:	f7ff fa41 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800edde:	4a5d      	ldr	r2, [pc, #372]	; (800ef54 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800edea:	68f9      	ldr	r1, [r7, #12]
 800edec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800edf0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7ff fc3b 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800edfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800edfe:	4619      	mov	r1, r3
 800ee00:	4620      	mov	r0, r4
 800ee02:	f7fd fbfc 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800ee06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fd ff43 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800ee10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee14:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fe fc7d 	bl	800d718 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800ee1e:	f107 0320 	add.w	r3, r7, #32
 800ee22:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fe fc76 	bl	800d718 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800ee2c:	f107 0120 	add.w	r1, r7, #32
 800ee30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee34:	2220      	movs	r2, #32
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fd ffea 	bl	800ce10 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ee3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ee40:	4945      	ldr	r1, [pc, #276]	; (800ef58 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7fd fb6f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800ee48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee4c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ee50:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7fd ff80 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800ee5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ee5e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fe fb22 	bl	800d4ac <_Z30BracketsFormattedHexStringFromm>
 800ee68:	f107 0318 	add.w	r3, r7, #24
 800ee6c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ee70:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fd ff70 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800ee7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fd ff09 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800ee84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fd ff04 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800ee8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fd feff 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ee98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee9c:	492e      	ldr	r1, [pc, #184]	; (800ef58 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7fd fb41 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800eea4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eea8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800eeac:	f107 0120 	add.w	r1, r7, #32
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fd ff52 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800eeb6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800eeba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fe faf4 	bl	800d4ac <_Z30BracketsFormattedHexStringFromm>
 800eec4:	f107 0310 	add.w	r3, r7, #16
 800eec8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800eecc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fd ff42 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800eed6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fd fedb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800eee0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7fd fed6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800eeea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fd fed1 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eefa:	68f9      	ldr	r1, [r7, #12]
 800eefc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800ef00:	f107 0318 	add.w	r3, r7, #24
 800ef04:	f107 0210 	add.w	r2, r7, #16
 800ef08:	f7ff faec 	bl	800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ef0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ef10:	4619      	mov	r1, r3
 800ef12:	4620      	mov	r0, r4
 800ef14:	f7fd ff3c 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800ef18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fd feba 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ef22:	f107 0310 	add.w	r3, r7, #16
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fd feb5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ef2c:	f107 0318 	add.w	r3, r7, #24
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7fd feb0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800ef36:	f107 0320 	add.w	r3, r7, #32
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fd feab 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800ef40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fd fea6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3774      	adds	r7, #116	; 0x74
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd90      	pop	{r4, r7, pc}
 800ef54:	080279e4 	.word	0x080279e4
 800ef58:	08023e9c 	.word	0x08023e9c

0800ef5c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800ef5c:	b590      	push	{r4, r7, lr}
 800ef5e:	b09d      	sub	sp, #116	; 0x74
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
 800ef68:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	68b9      	ldr	r1, [r7, #8]
 800ef72:	f7ff f975 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ef76:	4a5f      	ldr	r2, [pc, #380]	; (800f0f4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ef82:	68f9      	ldr	r1, [r7, #12]
 800ef84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef88:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7ff fb6f 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ef92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef96:	4619      	mov	r1, r3
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f7fd fb30 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800ef9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fd fe77 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800efa8:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800efac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efb0:	4611      	mov	r1, r2
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fe f936 	bl	800d224 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800efb8:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800efbc:	f107 0320 	add.w	r3, r7, #32
 800efc0:	4611      	mov	r1, r2
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fe f92e 	bl	800d224 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800efc8:	f107 0120 	add.w	r1, r7, #32
 800efcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efd0:	2220      	movs	r2, #32
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fd ff1c 	bl	800ce10 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800efd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800efdc:	4946      	ldr	r1, [pc, #280]	; (800f0f8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fd faa1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800efe4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efe8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800efec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fd feb2 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800eff6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800effa:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800effe:	4611      	mov	r1, r2
 800f000:	4618      	mov	r0, r3
 800f002:	f7fe fa6f 	bl	800d4e4 <_Z30BracketsFormattedHexStringFroma>
 800f006:	f107 0318 	add.w	r3, r7, #24
 800f00a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f00e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f012:	4618      	mov	r0, r3
 800f014:	f7fd fea1 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800f018:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7fd fe3a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800f022:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f026:	4618      	mov	r0, r3
 800f028:	f7fd fe35 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800f02c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f030:	4618      	mov	r0, r3
 800f032:	f7fd fe30 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f036:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f03a:	492f      	ldr	r1, [pc, #188]	; (800f0f8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fd fa72 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 800f042:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f046:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f04a:	f107 0120 	add.w	r1, r7, #32
 800f04e:	4618      	mov	r0, r3
 800f050:	f7fd fe83 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800f054:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f058:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800f05c:	4611      	mov	r1, r2
 800f05e:	4618      	mov	r0, r3
 800f060:	f7fe fa40 	bl	800d4e4 <_Z30BracketsFormattedHexStringFroma>
 800f064:	f107 0310 	add.w	r3, r7, #16
 800f068:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f06c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f070:	4618      	mov	r0, r3
 800f072:	f7fd fe72 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 800f076:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fd fe0b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800f080:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f084:	4618      	mov	r0, r3
 800f086:	f7fd fe06 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800f08a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fd fe01 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f09a:	68f9      	ldr	r1, [r7, #12]
 800f09c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f0a0:	f107 0318 	add.w	r3, r7, #24
 800f0a4:	f107 0210 	add.w	r2, r7, #16
 800f0a8:	f7ff fa1c 	bl	800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f0ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f7fd fe6c 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800f0b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fd fdea 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f0c2:	f107 0310 	add.w	r3, r7, #16
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fd fde5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f0cc:	f107 0318 	add.w	r3, r7, #24
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fd fde0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800f0d6:	f107 0320 	add.w	r3, r7, #32
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fd fddb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800f0e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fd fdd6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3774      	adds	r7, #116	; 0x74
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd90      	pop	{r4, r7, pc}
 800f0f4:	080279b8 	.word	0x080279b8
 800f0f8:	08023e9c 	.word	0x08023e9c

0800f0fc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f0fc:	b590      	push	{r4, r7, lr}
 800f0fe:	b093      	sub	sp, #76	; 0x4c
 800f100:	af02      	add	r7, sp, #8
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
 800f108:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	68b9      	ldr	r1, [r7, #8]
 800f112:	f7ff f8a5 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f116:	4a4a      	ldr	r2, [pc, #296]	; (800f240 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f122:	68f9      	ldr	r1, [r7, #12]
 800f124:	f107 0320 	add.w	r3, r7, #32
 800f128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7ff faa0 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f130:	f107 0320 	add.w	r3, r7, #32
 800f134:	4619      	mov	r1, r3
 800f136:	4620      	mov	r0, r4
 800f138:	f7fd fa61 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800f13c:	f107 0320 	add.w	r3, r7, #32
 800f140:	4618      	mov	r0, r3
 800f142:	f7fd fda8 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f146:	f107 0318 	add.w	r3, r7, #24
 800f14a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fe f83d 	bl	800d1cc <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f152:	f107 0310 	add.w	r3, r7, #16
 800f156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fe f837 	bl	800d1cc <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f164:	68f9      	ldr	r1, [r7, #12]
 800f166:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f16a:	f107 0310 	add.w	r3, r7, #16
 800f16e:	f107 0218 	add.w	r2, r7, #24
 800f172:	f7ff f9b7 	bl	800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f17a:	4619      	mov	r1, r3
 800f17c:	4620      	mov	r0, r4
 800f17e:	f7fd fe07 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800f182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f186:	4618      	mov	r0, r3
 800f188:	f7fd fd85 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d046      	beq.n	800f220 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800f192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f194:	2b00      	cmp	r3, #0
 800f196:	d043      	beq.n	800f220 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f198:	2300      	movs	r3, #0
 800f19a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f19c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a0:	4413      	add	r3, r2
 800f1a2:	781a      	ldrb	r2, [r3, #0]
 800f1a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a8:	440b      	add	r3, r1
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d103      	bne.n	800f1b8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800f1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1b6:	e7f1      	b.n	800f19c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1bc:	f107 0310 	add.w	r3, r7, #16
 800f1c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fd fecb 	bl	800cf5e <_ZNK12SimpleString2atEj>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	461c      	mov	r4, r3
 800f1cc:	f107 0318 	add.w	r3, r7, #24
 800f1d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fd fec3 	bl	800cf5e <_ZNK12SimpleString2atEj>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	429c      	cmp	r4, r3
 800f1dc:	bf0c      	ite	eq
 800f1de:	2301      	moveq	r3, #1
 800f1e0:	2300      	movne	r3, #0
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d003      	beq.n	800f1f0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1ee:	e7e5      	b.n	800f1bc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f1f6:	68f9      	ldr	r1, [r7, #12]
 800f1f8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f1fc:	f107 0210 	add.w	r2, r7, #16
 800f200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f206:	f7ff f987 	bl	800e518 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f20a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f20e:	4619      	mov	r1, r3
 800f210:	4620      	mov	r0, r4
 800f212:	f7fd fdbd 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800f216:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fd fd3b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f220:	f107 0310 	add.w	r3, r7, #16
 800f224:	4618      	mov	r0, r3
 800f226:	f7fd fd36 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f22a:	f107 0318 	add.w	r3, r7, #24
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fd fd31 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    }
}
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	4618      	mov	r0, r3
 800f238:	3744      	adds	r7, #68	; 0x44
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd90      	pop	{r4, r7, pc}
 800f23e:	bf00      	nop
 800f240:	0802798c 	.word	0x0802798c

0800f244 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800f244:	b590      	push	{r4, r7, lr}
 800f246:	b093      	sub	sp, #76	; 0x4c
 800f248:	af02      	add	r7, sp, #8
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	607a      	str	r2, [r7, #4]
 800f250:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f252:	68f8      	ldr	r0, [r7, #12]
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	687a      	ldr	r2, [r7, #4]
 800f258:	68b9      	ldr	r1, [r7, #8]
 800f25a:	f7ff f801 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f25e:	4a55      	ldr	r2, [pc, #340]	; (800f3b4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f26a:	68f9      	ldr	r1, [r7, #12]
 800f26c:	f107 0320 	add.w	r3, r7, #32
 800f270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f272:	4618      	mov	r0, r3
 800f274:	f7ff f9fc 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f278:	f107 0320 	add.w	r3, r7, #32
 800f27c:	4619      	mov	r1, r3
 800f27e:	4620      	mov	r0, r4
 800f280:	f7fd f9bd 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800f284:	f107 0320 	add.w	r3, r7, #32
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fd fd04 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f28e:	f107 0318 	add.w	r3, r7, #24
 800f292:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f294:	4618      	mov	r0, r3
 800f296:	f7fd ff99 	bl	800d1cc <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f29a:	f107 0310 	add.w	r3, r7, #16
 800f29e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fd ff93 	bl	800d1cc <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f2ac:	68f9      	ldr	r1, [r7, #12]
 800f2ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f2b2:	f107 0310 	add.w	r3, r7, #16
 800f2b6:	f107 0218 	add.w	r2, r7, #24
 800f2ba:	f7ff f913 	bl	800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f2be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f7fd fd63 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800f2ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fd fce1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800f2d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d05c      	beq.n	800f394 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800f2da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d059      	beq.n	800f394 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e8:	4413      	add	r3, r2
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7fd f824 	bl	800c33a <_ZN12SimpleString7ToLowerEc>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	461c      	mov	r4, r3
 800f2f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2fa:	4413      	add	r3, r2
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fd f81b 	bl	800c33a <_ZN12SimpleString7ToLowerEc>
 800f304:	4603      	mov	r3, r0
 800f306:	429c      	cmp	r4, r3
 800f308:	bf0c      	ite	eq
 800f30a:	2301      	moveq	r3, #1
 800f30c:	2300      	movne	r3, #0
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	2b00      	cmp	r3, #0
 800f312:	d003      	beq.n	800f31c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800f314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f316:	3301      	adds	r3, #1
 800f318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f31a:	e7e3      	b.n	800f2e4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800f31c:	2300      	movs	r3, #0
 800f31e:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800f320:	f107 0310 	add.w	r3, r7, #16
 800f324:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f326:	4618      	mov	r0, r3
 800f328:	f7fd fe19 	bl	800cf5e <_ZNK12SimpleString2atEj>
 800f32c:	4603      	mov	r3, r0
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fd f803 	bl	800c33a <_ZN12SimpleString7ToLowerEc>
 800f334:	4603      	mov	r3, r0
 800f336:	461c      	mov	r4, r3
 800f338:	f107 0318 	add.w	r3, r7, #24
 800f33c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fd fe0d 	bl	800cf5e <_ZNK12SimpleString2atEj>
 800f344:	4603      	mov	r3, r0
 800f346:	4618      	mov	r0, r3
 800f348:	f7fc fff7 	bl	800c33a <_ZN12SimpleString7ToLowerEc>
 800f34c:	4603      	mov	r3, r0
 800f34e:	429c      	cmp	r4, r3
 800f350:	bf0c      	ite	eq
 800f352:	2301      	moveq	r3, #1
 800f354:	2300      	movne	r3, #0
 800f356:	b2db      	uxtb	r3, r3
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d003      	beq.n	800f364 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	3301      	adds	r3, #1
 800f360:	63bb      	str	r3, [r7, #56]	; 0x38
 800f362:	e7dd      	b.n	800f320 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f36a:	68f9      	ldr	r1, [r7, #12]
 800f36c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f370:	f107 0210 	add.w	r2, r7, #16
 800f374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f37a:	f7ff f8cd 	bl	800e518 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f37e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f382:	4619      	mov	r1, r3
 800f384:	4620      	mov	r0, r4
 800f386:	f7fd fd03 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800f38a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f38e:	4618      	mov	r0, r3
 800f390:	f7fd fc81 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800f394:	f107 0310 	add.w	r3, r7, #16
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fd fc7c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800f39e:	f107 0318 	add.w	r3, r7, #24
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fd fc77 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    }
}
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3744      	adds	r7, #68	; 0x44
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd90      	pop	{r4, r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	08027960 	.word	0x08027960

0800f3b8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800f3b8:	b5b0      	push	{r4, r5, r7, lr}
 800f3ba:	b092      	sub	sp, #72	; 0x48
 800f3bc:	af02      	add	r7, sp, #8
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
 800f3c4:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	68b9      	ldr	r1, [r7, #8]
 800f3ce:	f7fe ff47 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f3d2:	4a40      	ldr	r2, [pc, #256]	; (800f4d4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f3de:	68f9      	ldr	r1, [r7, #12]
 800f3e0:	f107 031c 	add.w	r3, r7, #28
 800f3e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7ff f942 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f3ec:	f107 031c 	add.w	r3, r7, #28
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f7fd f903 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800f3f8:	f107 031c 	add.w	r3, r7, #28
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fd fc4a 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800f402:	f107 0314 	add.w	r3, r7, #20
 800f406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f408:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fe fa4c 	bl	800d8a8 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f416:	68fd      	ldr	r5, [r7, #12]
 800f418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f41c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f41e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f420:	4618      	mov	r0, r3
 800f422:	f7fe fa41 	bl	800d8a8 <_Z22StringFromBinaryOrNullPKhj>
 800f426:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f42a:	f107 0314 	add.w	r3, r7, #20
 800f42e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f432:	4629      	mov	r1, r5
 800f434:	f7ff f856 	bl	800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f43c:	4619      	mov	r1, r3
 800f43e:	4620      	mov	r0, r4
 800f440:	f7fd fca6 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800f444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f448:	4618      	mov	r0, r3
 800f44a:	f7fd fc24 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800f44e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f452:	4618      	mov	r0, r3
 800f454:	f7fd fc1f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800f458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d02f      	beq.n	800f4be <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800f45e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f460:	2b00      	cmp	r3, #0
 800f462:	d02c      	beq.n	800f4be <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800f464:	2300      	movs	r3, #0
 800f466:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f468:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f46c:	4413      	add	r3, r2
 800f46e:	781a      	ldrb	r2, [r3, #0]
 800f470:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f474:	440b      	add	r3, r1
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d103      	bne.n	800f484 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800f47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f47e:	3301      	adds	r3, #1
 800f480:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f482:	e7f1      	b.n	800f468 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f48a:	68f9      	ldr	r1, [r7, #12]
 800f48c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f48e:	4613      	mov	r3, r2
 800f490:	005b      	lsls	r3, r3, #1
 800f492:	4413      	add	r3, r2
 800f494:	1c5d      	adds	r5, r3, #1
 800f496:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f49a:	f107 0214 	add.w	r2, r7, #20
 800f49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4a0:	9300      	str	r3, [sp, #0]
 800f4a2:	462b      	mov	r3, r5
 800f4a4:	f7ff f838 	bl	800e518 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f4a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f7fd fc6e 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800f4b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fd fbec 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800f4be:	f107 0314 	add.w	r3, r7, #20
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fd fbe7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
	}
}
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3740      	adds	r7, #64	; 0x40
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bdb0      	pop	{r4, r5, r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	08027934 	.word	0x08027934

0800f4d8 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800f4d8:	b5b0      	push	{r4, r5, r7, lr}
 800f4da:	b08c      	sub	sp, #48	; 0x30
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
 800f4e4:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	68b9      	ldr	r1, [r7, #8]
 800f4ee:	f7fe feb7 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f4f2:	4a26      	ldr	r2, [pc, #152]	; (800f58c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f4fe:	68f9      	ldr	r1, [r7, #12]
 800f500:	f107 0310 	add.w	r3, r7, #16
 800f504:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f506:	4618      	mov	r0, r3
 800f508:	f7ff f8b2 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f50c:	f107 0310 	add.w	r3, r7, #16
 800f510:	4619      	mov	r1, r3
 800f512:	4620      	mov	r0, r4
 800f514:	f7fd f873 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800f518:	f107 0310 	add.w	r3, r7, #16
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fd fbba 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f528:	68fd      	ldr	r5, [r7, #12]
 800f52a:	f107 0020 	add.w	r0, r7, #32
 800f52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f534:	f7fe fa24 	bl	800d980 <_Z20StringFromMaskedBitsmmj>
 800f538:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f53c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f53e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f540:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f542:	f7fe fa1d 	bl	800d980 <_Z20StringFromMaskedBitsmmj>
 800f546:	f107 0018 	add.w	r0, r7, #24
 800f54a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f54e:	f107 0220 	add.w	r2, r7, #32
 800f552:	4629      	mov	r1, r5
 800f554:	f7fe ffc6 	bl	800e4e4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f558:	f107 0318 	add.w	r3, r7, #24
 800f55c:	4619      	mov	r1, r3
 800f55e:	4620      	mov	r0, r4
 800f560:	f7fd fc16 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800f564:	f107 0318 	add.w	r3, r7, #24
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fd fb94 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800f56e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f572:	4618      	mov	r0, r3
 800f574:	f7fd fb8f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 800f578:	f107 0320 	add.w	r3, r7, #32
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fd fb8a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	4618      	mov	r0, r3
 800f586:	3730      	adds	r7, #48	; 0x30
 800f588:	46bd      	mov	sp, r7
 800f58a:	bdb0      	pop	{r4, r5, r7, pc}
 800f58c:	08027908 	.word	0x08027908

0800f590 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800f590:	b590      	push	{r4, r7, lr}
 800f592:	b089      	sub	sp, #36	; 0x24
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	68b9      	ldr	r1, [r7, #8]
 800f5a6:	f7fe fe5b 	bl	800e260 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f5aa:	4a1a      	ldr	r2, [pc, #104]	; (800f614 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f5b6:	68f9      	ldr	r1, [r7, #12]
 800f5b8:	f107 0310 	add.w	r3, r7, #16
 800f5bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7ff f856 	bl	800e670 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f5c4:	f107 0310 	add.w	r3, r7, #16
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	f7fd f817 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 800f5d0:	f107 0310 	add.w	r3, r7, #16
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7fd fb5e 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f5e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5e2:	f7fd fb2b 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	f107 0318 	add.w	r3, r7, #24
 800f5ec:	490a      	ldr	r1, [pc, #40]	; (800f618 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fe f858 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 800f5f4:	f107 0318 	add.w	r3, r7, #24
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	f7fd fbc8 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 800f600:	f107 0318 	add.w	r3, r7, #24
 800f604:	4618      	mov	r0, r3
 800f606:	f7fd fb46 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	4618      	mov	r0, r3
 800f60e:	3724      	adds	r7, #36	; 0x24
 800f610:	46bd      	mov	sp, r7
 800f612:	bd90      	pop	{r4, r7, pc}
 800f614:	080278dc 	.word	0x080278dc
 800f618:	08023f6c 	.word	0x08023f6c

0800f61c <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	4a05      	ldr	r2, [pc, #20]	; (800f63c <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	601a      	str	r2, [r3, #0]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fe fe99 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4618      	mov	r0, r3
 800f636:	3708      	adds	r7, #8
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	080278dc 	.word	0x080278dc

0800f640 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7ff ffe7 	bl	800f61c <_ZN25FeatureUnsupportedFailureD1Ev>
 800f64e:	2134      	movs	r1, #52	; 0x34
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f7fa fbb9 	bl	8009dc8 <_ZdlPvj>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4618      	mov	r0, r3
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	4a05      	ldr	r2, [pc, #20]	; (800f680 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	601a      	str	r2, [r3, #0]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	4618      	mov	r0, r3
 800f672:	f7fe fe77 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	4618      	mov	r0, r3
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}
 800f680:	08027908 	.word	0x08027908

0800f684 <_ZN16BitsEqualFailureD0Ev>:
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7ff ffe7 	bl	800f660 <_ZN16BitsEqualFailureD1Ev>
 800f692:	2134      	movs	r1, #52	; 0x34
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7fa fb97 	bl	8009dc8 <_ZdlPvj>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4618      	mov	r0, r3
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	4a05      	ldr	r2, [pc, #20]	; (800f6c4 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	601a      	str	r2, [r3, #0]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fe fe55 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3708      	adds	r7, #8
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	08027934 	.word	0x08027934

0800f6c8 <_ZN18BinaryEqualFailureD0Ev>:
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7ff ffe7 	bl	800f6a4 <_ZN18BinaryEqualFailureD1Ev>
 800f6d6:	2134      	movs	r1, #52	; 0x34
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7fa fb75 	bl	8009dc8 <_ZdlPvj>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	4a05      	ldr	r2, [pc, #20]	; (800f708 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	601a      	str	r2, [r3, #0]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fe fe33 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4618      	mov	r0, r3
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	08027960 	.word	0x08027960

0800f70c <_ZN24StringEqualNoCaseFailureD0Ev>:
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7ff ffe7 	bl	800f6e8 <_ZN24StringEqualNoCaseFailureD1Ev>
 800f71a:	2134      	movs	r1, #52	; 0x34
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f7fa fb53 	bl	8009dc8 <_ZdlPvj>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4618      	mov	r0, r3
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	4a05      	ldr	r2, [pc, #20]	; (800f74c <_ZN18StringEqualFailureD1Ev+0x20>)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	601a      	str	r2, [r3, #0]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fe fe11 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4618      	mov	r0, r3
 800f746:	3708      	adds	r7, #8
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	0802798c 	.word	0x0802798c

0800f750 <_ZN18StringEqualFailureD0Ev>:
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7ff ffe7 	bl	800f72c <_ZN18StringEqualFailureD1Ev>
 800f75e:	2134      	movs	r1, #52	; 0x34
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f7fa fb31 	bl	8009dc8 <_ZdlPvj>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4618      	mov	r0, r3
 800f76a:	3708      	adds	r7, #8
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	4a05      	ldr	r2, [pc, #20]	; (800f790 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4618      	mov	r0, r3
 800f782:	f7fe fdef 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	080279b8 	.word	0x080279b8

0800f794 <_ZN23SignedBytesEqualFailureD0Ev>:
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f7ff ffe7 	bl	800f770 <_ZN23SignedBytesEqualFailureD1Ev>
 800f7a2:	2134      	movs	r1, #52	; 0x34
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7fa fb0f 	bl	8009dc8 <_ZdlPvj>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3708      	adds	r7, #8
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	4a05      	ldr	r2, [pc, #20]	; (800f7d4 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	601a      	str	r2, [r3, #0]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fe fdcd 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3708      	adds	r7, #8
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	080279e4 	.word	0x080279e4

0800f7d8 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f7ff ffe7 	bl	800f7b4 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800f7e6:	2134      	movs	r1, #52	; 0x34
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7fa faed 	bl	8009dc8 <_ZdlPvj>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3708      	adds	r7, #8
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	4a05      	ldr	r2, [pc, #20]	; (800f818 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	601a      	str	r2, [r3, #0]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fe fdab 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4618      	mov	r0, r3
 800f812:	3708      	adds	r7, #8
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	08027a10 	.word	0x08027a10

0800f81c <_ZN17LongsEqualFailureD0Ev>:
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7ff ffe7 	bl	800f7f8 <_ZN17LongsEqualFailureD1Ev>
 800f82a:	2134      	movs	r1, #52	; 0x34
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7fa facb 	bl	8009dc8 <_ZdlPvj>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4618      	mov	r0, r3
 800f836:	3708      	adds	r7, #8
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	4a05      	ldr	r2, [pc, #20]	; (800f85c <_ZN12CheckFailureD1Ev+0x20>)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	601a      	str	r2, [r3, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fe fd89 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	4618      	mov	r0, r3
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	08027a3c 	.word	0x08027a3c

0800f860 <_ZN12CheckFailureD0Ev>:
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f7ff ffe7 	bl	800f83c <_ZN12CheckFailureD1Ev>
 800f86e:	2134      	movs	r1, #52	; 0x34
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f7fa faa9 	bl	8009dc8 <_ZdlPvj>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4618      	mov	r0, r3
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	4a05      	ldr	r2, [pc, #20]	; (800f8a0 <_ZN15ContainsFailureD1Ev+0x20>)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	601a      	str	r2, [r3, #0]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe fd67 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4618      	mov	r0, r3
 800f89a:	3708      	adds	r7, #8
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	08027a68 	.word	0x08027a68

0800f8a4 <_ZN15ContainsFailureD0Ev>:
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7ff ffe7 	bl	800f880 <_ZN15ContainsFailureD1Ev>
 800f8b2:	2134      	movs	r1, #52	; 0x34
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7fa fa87 	bl	8009dc8 <_ZdlPvj>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	4a05      	ldr	r2, [pc, #20]	; (800f8e4 <_ZN17ComparisonFailureD1Ev+0x20>)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	601a      	str	r2, [r3, #0]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7fe fd45 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	08027a94 	.word	0x08027a94

0800f8e8 <_ZN17ComparisonFailureD0Ev>:
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f7ff ffe7 	bl	800f8c4 <_ZN17ComparisonFailureD1Ev>
 800f8f6:	2134      	movs	r1, #52	; 0x34
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7fa fa65 	bl	8009dc8 <_ZdlPvj>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4618      	mov	r0, r3
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	4a05      	ldr	r2, [pc, #20]	; (800f928 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	601a      	str	r2, [r3, #0]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4618      	mov	r0, r3
 800f91a:	f7fe fd23 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4618      	mov	r0, r3
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	08027ac0 	.word	0x08027ac0

0800f92c <_ZN17CheckEqualFailureD0Ev>:
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff ffe7 	bl	800f908 <_ZN17CheckEqualFailureD1Ev>
 800f93a:	2134      	movs	r1, #52	; 0x34
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f7fa fa43 	bl	8009dc8 <_ZdlPvj>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	4618      	mov	r0, r3
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	4a05      	ldr	r2, [pc, #20]	; (800f96c <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	601a      	str	r2, [r3, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fe fd01 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	4618      	mov	r0, r3
 800f966:	3708      	adds	r7, #8
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	08027aec 	.word	0x08027aec

0800f970 <_ZN19DoublesEqualFailureD0Ev>:
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f7ff ffe7 	bl	800f94c <_ZN19DoublesEqualFailureD1Ev>
 800f97e:	2134      	movs	r1, #52	; 0x34
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7fa fa21 	bl	8009dc8 <_ZdlPvj>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4618      	mov	r0, r3
 800f98a:	3708      	adds	r7, #8
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	4a05      	ldr	r2, [pc, #20]	; (800f9b0 <_ZN13EqualsFailureD1Ev+0x20>)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	601a      	str	r2, [r3, #0]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7fe fcdf 	bl	800e364 <_ZN11TestFailureD1Ev>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	08027b18 	.word	0x08027b18

0800f9b4 <_ZN13EqualsFailureD0Ev>:
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f7ff ffe7 	bl	800f990 <_ZN13EqualsFailureD1Ev>
 800f9c2:	2134      	movs	r1, #52	; 0x34
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7fa f9ff 	bl	8009dc8 <_ZdlPvj>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3708      	adds	r7, #8
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800f9d4:	b5b0      	push	{r4, r5, r7, lr}
 800f9d6:	b086      	sub	sp, #24
 800f9d8:	af02      	add	r7, sp, #8
 800f9da:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800f9dc:	4b0d      	ldr	r3, [pc, #52]	; (800fa14 <_ZL13checkedMallocj+0x40>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	4798      	blx	r3
 800f9e4:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d10e      	bne.n	800fa0a <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800f9ec:	f004 f97e 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 800f9f0:	4604      	mov	r4, r0
 800f9f2:	6823      	ldr	r3, [r4, #0]
 800f9f4:	3368      	adds	r3, #104	; 0x68
 800f9f6:	681d      	ldr	r5, [r3, #0]
 800f9f8:	f004 f988 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	9300      	str	r3, [sp, #0]
 800fa00:	2325      	movs	r3, #37	; 0x25
 800fa02:	4a05      	ldr	r2, [pc, #20]	; (800fa18 <_ZL13checkedMallocj+0x44>)
 800fa04:	4905      	ldr	r1, [pc, #20]	; (800fa1c <_ZL13checkedMallocj+0x48>)
 800fa06:	4620      	mov	r0, r4
 800fa08:	47a8      	blx	r5
    return mem;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bdb0      	pop	{r4, r5, r7, pc}
 800fa14:	200000c8 	.word	0x200000c8
 800fa18:	08023fe0 	.word	0x08023fe0
 800fa1c:	08024000 	.word	0x08024000

0800fa20 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800fa24:	4b04      	ldr	r3, [pc, #16]	; (800fa38 <_Z22getCurrentNewAllocatorv+0x18>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d101      	bne.n	800fa30 <_Z22getCurrentNewAllocatorv+0x10>
 800fa2c:	f000 f806 	bl	800fa3c <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800fa30:	4b01      	ldr	r3, [pc, #4]	; (800fa38 <_Z22getCurrentNewAllocatorv+0x18>)
 800fa32:	681b      	ldr	r3, [r3, #0]
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	20000840 	.word	0x20000840

0800fa3c <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800fa40:	f000 f810 	bl	800fa64 <_Z19defaultNewAllocatorv>
 800fa44:	4603      	mov	r3, r0
 800fa46:	4a02      	ldr	r2, [pc, #8]	; (800fa50 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800fa48:	6013      	str	r3, [r2, #0]
}
 800fa4a:	bf00      	nop
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	20000840 	.word	0x20000840

0800fa54 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800fa54:	b580      	push	{r7, lr}
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	4801      	ldr	r0, [pc, #4]	; (800fa60 <__tcf_0+0xc>)
 800fa5a:	f000 f909 	bl	800fc70 <_ZN19TestMemoryAllocatorD1Ev>
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	2000084c 	.word	0x2000084c

0800fa64 <_Z19defaultNewAllocatorv>:
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800fa68:	4b13      	ldr	r3, [pc, #76]	; (800fab8 <_Z19defaultNewAllocatorv+0x54>)
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	f3bf 8f5b 	dmb	ish
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	f003 0301 	and.w	r3, r3, #1
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	bf0c      	ite	eq
 800fa7a:	2301      	moveq	r3, #1
 800fa7c:	2300      	movne	r3, #0
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d016      	beq.n	800fab2 <_Z19defaultNewAllocatorv+0x4e>
 800fa84:	480c      	ldr	r0, [pc, #48]	; (800fab8 <_Z19defaultNewAllocatorv+0x54>)
 800fa86:	f00f fc0f 	bl	801f2a8 <__cxa_guard_acquire>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	bf14      	ite	ne
 800fa90:	2301      	movne	r3, #1
 800fa92:	2300      	moveq	r3, #0
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00b      	beq.n	800fab2 <_Z19defaultNewAllocatorv+0x4e>
 800fa9a:	4b08      	ldr	r3, [pc, #32]	; (800fabc <_Z19defaultNewAllocatorv+0x58>)
 800fa9c:	4a08      	ldr	r2, [pc, #32]	; (800fac0 <_Z19defaultNewAllocatorv+0x5c>)
 800fa9e:	4909      	ldr	r1, [pc, #36]	; (800fac4 <_Z19defaultNewAllocatorv+0x60>)
 800faa0:	4809      	ldr	r0, [pc, #36]	; (800fac8 <_Z19defaultNewAllocatorv+0x64>)
 800faa2:	f000 f8c5 	bl	800fc30 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800faa6:	4804      	ldr	r0, [pc, #16]	; (800fab8 <_Z19defaultNewAllocatorv+0x54>)
 800faa8:	f00f fc0a 	bl	801f2c0 <__cxa_guard_release>
 800faac:	4807      	ldr	r0, [pc, #28]	; (800facc <_Z19defaultNewAllocatorv+0x68>)
 800faae:	f00f fc2e 	bl	801f30e <atexit>
    return &allocator;
 800fab2:	4b05      	ldr	r3, [pc, #20]	; (800fac8 <_Z19defaultNewAllocatorv+0x64>)
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	20000860 	.word	0x20000860
 800fabc:	08024020 	.word	0x08024020
 800fac0:	08024028 	.word	0x08024028
 800fac4:	0802402c 	.word	0x0802402c
 800fac8:	2000084c 	.word	0x2000084c
 800facc:	0800fa55 	.word	0x0800fa55

0800fad0 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800fad4:	4b04      	ldr	r3, [pc, #16]	; (800fae8 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d101      	bne.n	800fae0 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800fadc:	f000 f806 	bl	800faec <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800fae0:	4b01      	ldr	r3, [pc, #4]	; (800fae8 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800fae2:	681b      	ldr	r3, [r3, #0]
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	20000844 	.word	0x20000844

0800faec <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800faec:	b580      	push	{r7, lr}
 800faee:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800faf0:	f000 f810 	bl	800fb14 <_Z24defaultNewArrayAllocatorv>
 800faf4:	4603      	mov	r3, r0
 800faf6:	4a02      	ldr	r2, [pc, #8]	; (800fb00 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800faf8:	6013      	str	r3, [r2, #0]
}
 800fafa:	bf00      	nop
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	20000844 	.word	0x20000844

0800fb04 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800fb04:	b580      	push	{r7, lr}
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	4801      	ldr	r0, [pc, #4]	; (800fb10 <__tcf_1+0xc>)
 800fb0a:	f000 f8b1 	bl	800fc70 <_ZN19TestMemoryAllocatorD1Ev>
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	20000864 	.word	0x20000864

0800fb14 <_Z24defaultNewArrayAllocatorv>:
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800fb18:	4b13      	ldr	r3, [pc, #76]	; (800fb68 <_Z24defaultNewArrayAllocatorv+0x54>)
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	f3bf 8f5b 	dmb	ish
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	f003 0301 	and.w	r3, r3, #1
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	bf0c      	ite	eq
 800fb2a:	2301      	moveq	r3, #1
 800fb2c:	2300      	movne	r3, #0
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d016      	beq.n	800fb62 <_Z24defaultNewArrayAllocatorv+0x4e>
 800fb34:	480c      	ldr	r0, [pc, #48]	; (800fb68 <_Z24defaultNewArrayAllocatorv+0x54>)
 800fb36:	f00f fbb7 	bl	801f2a8 <__cxa_guard_acquire>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	bf14      	ite	ne
 800fb40:	2301      	movne	r3, #1
 800fb42:	2300      	moveq	r3, #0
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00b      	beq.n	800fb62 <_Z24defaultNewArrayAllocatorv+0x4e>
 800fb4a:	4b08      	ldr	r3, [pc, #32]	; (800fb6c <_Z24defaultNewArrayAllocatorv+0x58>)
 800fb4c:	4a08      	ldr	r2, [pc, #32]	; (800fb70 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800fb4e:	4909      	ldr	r1, [pc, #36]	; (800fb74 <_Z24defaultNewArrayAllocatorv+0x60>)
 800fb50:	4809      	ldr	r0, [pc, #36]	; (800fb78 <_Z24defaultNewArrayAllocatorv+0x64>)
 800fb52:	f000 f86d 	bl	800fc30 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fb56:	4804      	ldr	r0, [pc, #16]	; (800fb68 <_Z24defaultNewArrayAllocatorv+0x54>)
 800fb58:	f00f fbb2 	bl	801f2c0 <__cxa_guard_release>
 800fb5c:	4807      	ldr	r0, [pc, #28]	; (800fb7c <_Z24defaultNewArrayAllocatorv+0x68>)
 800fb5e:	f00f fbd6 	bl	801f30e <atexit>
    return &allocator;
 800fb62:	4b05      	ldr	r3, [pc, #20]	; (800fb78 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	20000878 	.word	0x20000878
 800fb6c:	08024044 	.word	0x08024044
 800fb70:	08024050 	.word	0x08024050
 800fb74:	08024058 	.word	0x08024058
 800fb78:	20000864 	.word	0x20000864
 800fb7c:	0800fb05 	.word	0x0800fb05

0800fb80 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800fb84:	4b04      	ldr	r3, [pc, #16]	; (800fb98 <_Z25getCurrentMallocAllocatorv+0x18>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d101      	bne.n	800fb90 <_Z25getCurrentMallocAllocatorv+0x10>
 800fb8c:	f000 f806 	bl	800fb9c <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800fb90:	4b01      	ldr	r3, [pc, #4]	; (800fb98 <_Z25getCurrentMallocAllocatorv+0x18>)
 800fb92:	681b      	ldr	r3, [r3, #0]
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	20000848 	.word	0x20000848

0800fb9c <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800fba0:	f000 f810 	bl	800fbc4 <_Z22defaultMallocAllocatorv>
 800fba4:	4603      	mov	r3, r0
 800fba6:	4a02      	ldr	r2, [pc, #8]	; (800fbb0 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800fba8:	6013      	str	r3, [r2, #0]
}
 800fbaa:	bf00      	nop
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	20000848 	.word	0x20000848

0800fbb4 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	4801      	ldr	r0, [pc, #4]	; (800fbc0 <__tcf_2+0xc>)
 800fbba:	f000 f859 	bl	800fc70 <_ZN19TestMemoryAllocatorD1Ev>
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	2000087c 	.word	0x2000087c

0800fbc4 <_Z22defaultMallocAllocatorv>:
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800fbc8:	4b13      	ldr	r3, [pc, #76]	; (800fc18 <_Z22defaultMallocAllocatorv+0x54>)
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	f3bf 8f5b 	dmb	ish
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	f003 0301 	and.w	r3, r3, #1
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	bf0c      	ite	eq
 800fbda:	2301      	moveq	r3, #1
 800fbdc:	2300      	movne	r3, #0
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d016      	beq.n	800fc12 <_Z22defaultMallocAllocatorv+0x4e>
 800fbe4:	480c      	ldr	r0, [pc, #48]	; (800fc18 <_Z22defaultMallocAllocatorv+0x54>)
 800fbe6:	f00f fb5f 	bl	801f2a8 <__cxa_guard_acquire>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	bf14      	ite	ne
 800fbf0:	2301      	movne	r3, #1
 800fbf2:	2300      	moveq	r3, #0
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00b      	beq.n	800fc12 <_Z22defaultMallocAllocatorv+0x4e>
 800fbfa:	4b08      	ldr	r3, [pc, #32]	; (800fc1c <_Z22defaultMallocAllocatorv+0x58>)
 800fbfc:	4a08      	ldr	r2, [pc, #32]	; (800fc20 <_Z22defaultMallocAllocatorv+0x5c>)
 800fbfe:	4909      	ldr	r1, [pc, #36]	; (800fc24 <_Z22defaultMallocAllocatorv+0x60>)
 800fc00:	4809      	ldr	r0, [pc, #36]	; (800fc28 <_Z22defaultMallocAllocatorv+0x64>)
 800fc02:	f000 f815 	bl	800fc30 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fc06:	4804      	ldr	r0, [pc, #16]	; (800fc18 <_Z22defaultMallocAllocatorv+0x54>)
 800fc08:	f00f fb5a 	bl	801f2c0 <__cxa_guard_release>
 800fc0c:	4807      	ldr	r0, [pc, #28]	; (800fc2c <_Z22defaultMallocAllocatorv+0x68>)
 800fc0e:	f00f fb7e 	bl	801f30e <atexit>
    return &allocator;
 800fc12:	4b05      	ldr	r3, [pc, #20]	; (800fc28 <_Z22defaultMallocAllocatorv+0x64>)
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	20000890 	.word	0x20000890
 800fc1c:	08024074 	.word	0x08024074
 800fc20:	0802407c 	.word	0x0802407c
 800fc24:	08024084 	.word	0x08024084
 800fc28:	2000087c 	.word	0x2000087c
 800fc2c:	0800fbb5 	.word	0x0800fbb5

0800fc30 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800fc30:	b480      	push	{r7}
 800fc32:	b085      	sub	sp, #20
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
 800fc3c:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800fc3e:	4a0b      	ldr	r2, [pc, #44]	; (800fc6c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	601a      	str	r2, [r3, #0]
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	68ba      	ldr	r2, [r7, #8]
 800fc48:	605a      	str	r2, [r3, #4]
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	609a      	str	r2, [r3, #8]
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	683a      	ldr	r2, [r7, #0]
 800fc54:	60da      	str	r2, [r3, #12]
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	741a      	strb	r2, [r3, #16]
{
}
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3714      	adds	r7, #20
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	08027ba4 	.word	0x08027ba4

0800fc70 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	4a06      	ldr	r2, [pc, #24]	; (800fc94 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2201      	movs	r2, #1
 800fc82:	741a      	strb	r2, [r3, #16]
}
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	4618      	mov	r0, r3
 800fc88:	370c      	adds	r7, #12
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr
 800fc92:	bf00      	nop
 800fc94:	08027ba4 	.word	0x08027ba4

0800fc98 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
}
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7ff ffe5 	bl	800fc70 <_ZN19TestMemoryAllocatorD1Ev>
 800fca6:	2114      	movs	r1, #20
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7fa f88d 	bl	8009dc8 <_ZdlPvj>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b083      	sub	sp, #12
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	7c1b      	ldrb	r3, [r3, #16]
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	370c      	adds	r7, #12
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr

0800fcd0 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800fcd0:	b590      	push	{r4, r7, lr}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	3310      	adds	r3, #16
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	4798      	blx	r3
 800fce6:	4604      	mov	r4, r0
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	3310      	adds	r3, #16
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	6838      	ldr	r0, [r7, #0]
 800fcf2:	4798      	blx	r3
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	4620      	mov	r0, r4
 800fcfa:	f7fc fa51 	bl	800c1a0 <_ZN12SimpleString6StrCmpEPKcS1_>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	bf0c      	ite	eq
 800fd04:	2301      	moveq	r3, #1
 800fd06:	2300      	movne	r3, #0
 800fd08:	b2db      	uxtb	r3, r3
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd90      	pop	{r4, r7, pc}
	...

0800fd14 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800fd14:	b590      	push	{r4, r7, lr}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	3308      	adds	r3, #8
 800fd24:	681c      	ldr	r4, [r3, #0]
 800fd26:	2301      	movs	r3, #1
 800fd28:	4a04      	ldr	r2, [pc, #16]	; (800fd3c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800fd2a:	6839      	ldr	r1, [r7, #0]
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	47a0      	blx	r4
 800fd30:	4603      	mov	r3, r0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	370c      	adds	r7, #12
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd90      	pop	{r4, r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	080240a0 	.word	0x080240a0

0800fd40 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800fd40:	b590      	push	{r4, r7, lr}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af02      	add	r7, sp, #8
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	330c      	adds	r3, #12
 800fd50:	681c      	ldr	r4, [r3, #0]
 800fd52:	2301      	movs	r3, #1
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	4b04      	ldr	r3, [pc, #16]	; (800fd68 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	6839      	ldr	r1, [r7, #0]
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	47a0      	blx	r4
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd90      	pop	{r4, r7, pc}
 800fd68:	080240a0 	.word	0x080240a0

0800fd6c <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
 800fd78:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800fd7a:	68b8      	ldr	r0, [r7, #8]
 800fd7c:	f7ff fe2a 	bl	800f9d4 <_ZL13checkedMallocj>
 800fd80:	4603      	mov	r3, r0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
	...

0800fd8c <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b084      	sub	sp, #16
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
 800fd98:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800fd9a:	4b04      	ldr	r3, [pc, #16]	; (800fdac <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	68b8      	ldr	r0, [r7, #8]
 800fda0:	4798      	blx	r3
}
 800fda2:	bf00      	nop
 800fda4:	3710      	adds	r7, #16
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	200000d0 	.word	0x200000d0

0800fdb0 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b083      	sub	sp, #12
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
    return name_;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	685b      	ldr	r3, [r3, #4]
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	689b      	ldr	r3, [r3, #8]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	370c      	adds	r7, #12
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
    return free_name_;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	68db      	ldr	r3, [r3, #12]
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	370c      	adds	r7, #12
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr

0800fdf8 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
    return this;
 800fe00:	687b      	ldr	r3, [r7, #4]
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	370c      	adds	r7, #12
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
	...

0800fe10 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	4a05      	ldr	r2, [pc, #20]	; (800fe30 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	601a      	str	r2, [r3, #0]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7ff ff25 	bl	800fc70 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	08027b70 	.word	0x08027b70

0800fe34 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
}
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7ff ffe7 	bl	800fe10 <_ZN20NullUnknownAllocatorD1Ev>
 800fe42:	2114      	movs	r1, #20
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f7f9 ffbf 	bl	8009dc8 <_ZdlPvj>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3708      	adds	r7, #8
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b085      	sub	sp, #20
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	607a      	str	r2, [r7, #4]
 800fe60:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800fe62:	2300      	movs	r3, #0
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3714      	adds	r7, #20
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr

0800fe70 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b085      	sub	sp, #20
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	607a      	str	r2, [r7, #4]
 800fe7c:	603b      	str	r3, [r7, #0]
}
 800fe7e:	bf00      	nop
 800fe80:	3714      	adds	r7, #20
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
	...

0800fe8c <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	4b06      	ldr	r3, [pc, #24]	; (800feb0 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800fe98:	4a05      	ldr	r2, [pc, #20]	; (800feb0 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800fe9a:	4906      	ldr	r1, [pc, #24]	; (800feb4 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800fe9c:	f7ff fec8 	bl	800fc30 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800fea0:	4a05      	ldr	r2, [pc, #20]	; (800feb8 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	601a      	str	r2, [r3, #0]
{
}
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4618      	mov	r0, r3
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	080240d4 	.word	0x080240d4
 800feb4:	080240dc 	.word	0x080240dc
 800feb8:	08027b70 	.word	0x08027b70

0800febc <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800febc:	b580      	push	{r7, lr}
 800febe:	af00      	add	r7, sp, #0
 800fec0:	4801      	ldr	r0, [pc, #4]	; (800fec8 <__tcf_3+0xc>)
 800fec2:	f7ff ffa5 	bl	800fe10 <_ZN20NullUnknownAllocatorD1Ev>
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	20000894 	.word	0x20000894

0800fecc <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800fed0:	4b12      	ldr	r3, [pc, #72]	; (800ff1c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f3bf 8f5b 	dmb	ish
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	f003 0301 	and.w	r3, r3, #1
 800fede:	2b00      	cmp	r3, #0
 800fee0:	bf0c      	ite	eq
 800fee2:	2301      	moveq	r3, #1
 800fee4:	2300      	movne	r3, #0
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d013      	beq.n	800ff14 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800feec:	480b      	ldr	r0, [pc, #44]	; (800ff1c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800feee:	f00f f9db 	bl	801f2a8 <__cxa_guard_acquire>
 800fef2:	4603      	mov	r3, r0
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	bf14      	ite	ne
 800fef8:	2301      	movne	r3, #1
 800fefa:	2300      	moveq	r3, #0
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d008      	beq.n	800ff14 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800ff02:	4807      	ldr	r0, [pc, #28]	; (800ff20 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800ff04:	f7ff ffc2 	bl	800fe8c <_ZN20NullUnknownAllocatorC1Ev>
 800ff08:	4804      	ldr	r0, [pc, #16]	; (800ff1c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800ff0a:	f00f f9d9 	bl	801f2c0 <__cxa_guard_release>
 800ff0e:	4805      	ldr	r0, [pc, #20]	; (800ff24 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800ff10:	f00f f9fd 	bl	801f30e <atexit>
    return &allocator;
 800ff14:	4b02      	ldr	r3, [pc, #8]	; (800ff20 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	200008a8 	.word	0x200008a8
 800ff20:	20000894 	.word	0x20000894
 800ff24:	0800febd 	.word	0x0800febd

0800ff28 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
        return testCount_;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	689b      	ldr	r3, [r3, #8]
    }
 800ff34:	4618      	mov	r0, r3
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	699b      	ldr	r3, [r3, #24]
    }
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800ff5c:	4b05      	ldr	r3, [pc, #20]	; (800ff74 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	2b02      	cmp	r3, #2
 800ff62:	d103      	bne.n	800ff6c <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800ff64:	f004 fa4a 	bl	80143fc <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	e001      	b.n	800ff70 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800ff6c:	4b01      	ldr	r3, [pc, #4]	; (800ff74 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800ff6e:	781b      	ldrb	r3, [r3, #0]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	20000088 	.word	0x20000088

0800ff78 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800ff80:	4a0a      	ldr	r2, [pc, #40]	; (800ffac <_ZN10TestOutputC1Ev+0x34>)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	601a      	str	r2, [r3, #0]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	605a      	str	r2, [r3, #4]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	721a      	strb	r2, [r3, #8]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2200      	movs	r2, #0
 800ff96:	725a      	strb	r2, [r3, #9]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	4a05      	ldr	r2, [pc, #20]	; (800ffb0 <_ZN10TestOutputC1Ev+0x38>)
 800ff9c:	60da      	str	r2, [r3, #12]
{
}
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr
 800ffac:	08027ca8 	.word	0x08027ca8
 800ffb0:	080244dc 	.word	0x080244dc

0800ffb4 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800ffb4:	b480      	push	{r7}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	4a04      	ldr	r2, [pc, #16]	; (800ffd0 <_ZN10TestOutputD1Ev+0x1c>)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	601a      	str	r2, [r3, #0]
{
}
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr
 800ffd0:	08027ca8 	.word	0x08027ca8

0800ffd4 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	460b      	mov	r3, r1
 800ffde:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	78fa      	ldrb	r2, [r7, #3]
 800ffe4:	721a      	strb	r2, [r3, #8]
}
 800ffe6:	bf00      	nop
 800ffe8:	370c      	adds	r7, #12
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr

0800fff2 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800fff2:	b480      	push	{r7}
 800fff4:	b083      	sub	sp, #12
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
    color_ = true;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2201      	movs	r2, #1
 800fffe:	725a      	strb	r2, [r3, #9]
}
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	3328      	adds	r3, #40	; 0x28
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	6839      	ldr	r1, [r7, #0]
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	4798      	blx	r3
}
 8010024:	bf00      	nop
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 801002c:	b590      	push	{r4, r7, lr}
 801002e:	b085      	sub	sp, #20
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	332c      	adds	r3, #44	; 0x2c
 801003c:	681c      	ldr	r4, [r3, #0]
 801003e:	f107 0308 	add.w	r3, r7, #8
 8010042:	6839      	ldr	r1, [r7, #0]
 8010044:	4618      	mov	r0, r3
 8010046:	f7fd f8ff 	bl	800d248 <_Z10StringFroml>
 801004a:	f107 0308 	add.w	r3, r7, #8
 801004e:	4618      	mov	r0, r3
 8010050:	f7fc fdf4 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8010054:	4603      	mov	r3, r0
 8010056:	4619      	mov	r1, r3
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	47a0      	blx	r4
 801005c:	f107 0308 	add.w	r3, r7, #8
 8010060:	4618      	mov	r0, r3
 8010062:	f7fc fe18 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8010066:	bf00      	nop
 8010068:	3714      	adds	r7, #20
 801006a:	46bd      	mov	sp, r7
 801006c:	bd90      	pop	{r4, r7, pc}

0801006e <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 801006e:	b590      	push	{r4, r7, lr}
 8010070:	b085      	sub	sp, #20
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
 8010076:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	332c      	adds	r3, #44	; 0x2c
 801007e:	681c      	ldr	r4, [r3, #0]
 8010080:	f107 0308 	add.w	r3, r7, #8
 8010084:	6839      	ldr	r1, [r7, #0]
 8010086:	4618      	mov	r0, r3
 8010088:	f7fd fb34 	bl	800d6f4 <_Z10StringFromj>
 801008c:	f107 0308 	add.w	r3, r7, #8
 8010090:	4618      	mov	r0, r3
 8010092:	f7fc fdd3 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8010096:	4603      	mov	r3, r0
 8010098:	4619      	mov	r1, r3
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	47a0      	blx	r4
 801009e:	f107 0308 	add.w	r3, r7, #8
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fc fdf7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80100a8:	bf00      	nop
 80100aa:	3714      	adds	r7, #20
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd90      	pop	{r4, r7, pc}

080100b0 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 80100b0:	b590      	push	{r4, r7, lr}
 80100b2:	b087      	sub	sp, #28
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	332c      	adds	r3, #44	; 0x2c
 80100c2:	681c      	ldr	r4, [r3, #0]
 80100c4:	f107 0310 	add.w	r3, r7, #16
 80100c8:	2106      	movs	r1, #6
 80100ca:	ed97 0b00 	vldr	d0, [r7]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fd faa6 	bl	800d620 <_Z10StringFromdi>
 80100d4:	f107 0310 	add.w	r3, r7, #16
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fc fdaf 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 80100de:	4603      	mov	r3, r0
 80100e0:	4619      	mov	r1, r3
 80100e2:	68f8      	ldr	r0, [r7, #12]
 80100e4:	47a0      	blx	r4
 80100e6:	f107 0310 	add.w	r3, r7, #16
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fc fdd3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80100f0:	bf00      	nop
 80100f2:	371c      	adds	r7, #28
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd90      	pop	{r4, r7, pc}

080100f8 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	6039      	str	r1, [r7, #0]
    p.print(s);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	332c      	adds	r3, #44	; 0x2c
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	6839      	ldr	r1, [r7, #0]
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	4798      	blx	r3
    return p;
 8010110:	687b      	ldr	r3, [r7, #4]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3708      	adds	r7, #8
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
	...

0801011c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 801011c:	b590      	push	{r4, r7, lr}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	7a1b      	ldrb	r3, [r3, #8]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d01a      	beq.n	8010164 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	332c      	adds	r3, #44	; 0x2c
 8010134:	681c      	ldr	r4, [r3, #0]
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	3314      	adds	r3, #20
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f107 0208 	add.w	r2, r7, #8
 8010142:	6839      	ldr	r1, [r7, #0]
 8010144:	4610      	mov	r0, r2
 8010146:	4798      	blx	r3
 8010148:	f107 0308 	add.w	r3, r7, #8
 801014c:	4618      	mov	r0, r3
 801014e:	f7fc fd75 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8010152:	4603      	mov	r3, r0
 8010154:	4619      	mov	r1, r3
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	47a0      	blx	r4
 801015a:	f107 0308 	add.w	r3, r7, #8
 801015e:	4618      	mov	r0, r3
 8010160:	f7fc fd99 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	3318      	adds	r3, #24
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	6838      	ldr	r0, [r7, #0]
 801016e:	4798      	blx	r3
 8010170:	4603      	mov	r3, r0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d007      	beq.n	8010186 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3344      	adds	r3, #68	; 0x44
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	4907      	ldr	r1, [pc, #28]	; (801019c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8010184:	e006      	b.n	8010194 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	3344      	adds	r3, #68	; 0x44
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	4904      	ldr	r1, [pc, #16]	; (80101a0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	4798      	blx	r3
}
 8010194:	bf00      	nop
 8010196:	3714      	adds	r7, #20
 8010198:	46bd      	mov	sp, r7
 801019a:	bd90      	pop	{r4, r7, pc}
 801019c:	080244dc 	.word	0x080244dc
 80101a0:	080244e0 	.word	0x080244e0

080101a4 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 80101a4:	b590      	push	{r4, r7, lr}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	7a1b      	ldrb	r3, [r3, #8]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d019      	beq.n	80101ea <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	332c      	adds	r3, #44	; 0x2c
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4910      	ldr	r1, [pc, #64]	; (8010200 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	3334      	adds	r3, #52	; 0x34
 80101ca:	681c      	ldr	r4, [r3, #0]
 80101cc:	6838      	ldr	r0, [r7, #0]
 80101ce:	f002 f845 	bl	801225c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80101d2:	4603      	mov	r3, r0
 80101d4:	4619      	mov	r1, r3
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	47a0      	blx	r4
        print(" ms\n");
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	332c      	adds	r3, #44	; 0x2c
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	4908      	ldr	r1, [pc, #32]	; (8010204 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 80101e8:	e005      	b.n	80101f6 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	3358      	adds	r3, #88	; 0x58
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	4798      	blx	r3
}
 80101f6:	bf00      	nop
 80101f8:	370c      	adds	r7, #12
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd90      	pop	{r4, r7, pc}
 80101fe:	bf00      	nop
 8010200:	080244e4 	.word	0x080244e4
 8010204:	080244e8 	.word	0x080244e8

08010208 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	332c      	adds	r3, #44	; 0x2c
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	68d2      	ldr	r2, [r2, #12]
 801021c:	4611      	mov	r1, r2
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	1c5a      	adds	r2, r3, #1
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	605a      	str	r2, [r3, #4]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	685a      	ldr	r2, [r3, #4]
 8010230:	4b0d      	ldr	r3, [pc, #52]	; (8010268 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 8010232:	fb83 1302 	smull	r1, r3, r3, r2
 8010236:	1119      	asrs	r1, r3, #4
 8010238:	17d3      	asrs	r3, r2, #31
 801023a:	1acb      	subs	r3, r1, r3
 801023c:	2132      	movs	r1, #50	; 0x32
 801023e:	fb01 f303 	mul.w	r3, r1, r3
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	2b00      	cmp	r3, #0
 8010246:	bf0c      	ite	eq
 8010248:	2301      	moveq	r3, #1
 801024a:	2300      	movne	r3, #0
 801024c:	b2db      	uxtb	r3, r3
 801024e:	2b00      	cmp	r3, #0
 8010250:	d006      	beq.n	8010260 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	332c      	adds	r3, #44	; 0x2c
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4904      	ldr	r1, [pc, #16]	; (801026c <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	4798      	blx	r3
}
 8010260:	bf00      	nop
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}
 8010268:	51eb851f 	.word	0x51eb851f
 801026c:	080244f0 	.word	0x080244f0

08010270 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	683a      	ldr	r2, [r7, #0]
 801027e:	60da      	str	r2, [r3, #12]
}
 8010280:	bf00      	nop
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr

0801028c <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
}
 8010294:	bf00      	nop
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6039      	str	r1, [r7, #0]
}
 80102aa:	bf00      	nop
 80102ac:	370c      	adds	r7, #12
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr

080102b6 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 80102b6:	b480      	push	{r7}
 80102b8:	b083      	sub	sp, #12
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
}
 80102c0:	bf00      	nop
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 80102cc:	b590      	push	{r4, r7, lr}
 80102ce:	b085      	sub	sp, #20
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
    print("\n");
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	332c      	adds	r3, #44	; 0x2c
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	496f      	ldr	r1, [pc, #444]	; (801049c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 80102e4:	6838      	ldr	r0, [r7, #0]
 80102e6:	f7f8 f83d 	bl	8008364 <_ZNK10TestResult9isFailureEv>
 80102ea:	4603      	mov	r3, r0
 80102ec:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 80102ee:	6838      	ldr	r0, [r7, #0]
 80102f0:	f7f8 f82c 	bl	800834c <_ZNK10TestResult15getFailureCountEv>
 80102f4:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 80102f6:	7bfb      	ldrb	r3, [r7, #15]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d02b      	beq.n	8010354 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	7a5b      	ldrb	r3, [r3, #9]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d006      	beq.n	8010312 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	332c      	adds	r3, #44	; 0x2c
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4964      	ldr	r1, [pc, #400]	; (80104a0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	4798      	blx	r3
        }
        print("Errors (");
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	332c      	adds	r3, #44	; 0x2c
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4962      	ldr	r1, [pc, #392]	; (80104a4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	4798      	blx	r3
        if (failureCount > 0) {
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d00e      	beq.n	8010344 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3334      	adds	r3, #52	; 0x34
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	68b9      	ldr	r1, [r7, #8]
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	4798      	blx	r3
            print(" failures, ");
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	332c      	adds	r3, #44	; 0x2c
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	495a      	ldr	r1, [pc, #360]	; (80104a8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	4798      	blx	r3
 8010342:	e019      	b.n	8010378 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	332c      	adds	r3, #44	; 0x2c
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	4957      	ldr	r1, [pc, #348]	; (80104ac <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	4798      	blx	r3
 8010352:	e011      	b.n	8010378 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	7a5b      	ldrb	r3, [r3, #9]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d006      	beq.n	801036a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	332c      	adds	r3, #44	; 0x2c
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4952      	ldr	r1, [pc, #328]	; (80104b0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	4798      	blx	r3
        }
        print("OK (");
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	332c      	adds	r3, #44	; 0x2c
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	4950      	ldr	r1, [pc, #320]	; (80104b4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	4798      	blx	r3
    }
    print(result.getTestCount());
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	3334      	adds	r3, #52	; 0x34
 801037e:	681c      	ldr	r4, [r3, #0]
 8010380:	6838      	ldr	r0, [r7, #0]
 8010382:	f7ff fdd1 	bl	800ff28 <_ZNK10TestResult12getTestCountEv>
 8010386:	4603      	mov	r3, r0
 8010388:	4619      	mov	r1, r3
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	47a0      	blx	r4
    print(" tests, ");
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	332c      	adds	r3, #44	; 0x2c
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	4948      	ldr	r1, [pc, #288]	; (80104b8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	4798      	blx	r3
    print(result.getRunCount());
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3334      	adds	r3, #52	; 0x34
 80103a2:	681c      	ldr	r4, [r3, #0]
 80103a4:	6838      	ldr	r0, [r7, #0]
 80103a6:	f7f7 ffb9 	bl	800831c <_ZNK10TestResult11getRunCountEv>
 80103aa:	4603      	mov	r3, r0
 80103ac:	4619      	mov	r1, r3
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	47a0      	blx	r4
    print(" ran, ");
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	332c      	adds	r3, #44	; 0x2c
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4940      	ldr	r1, [pc, #256]	; (80104bc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	4798      	blx	r3
    print(result.getCheckCount());
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3334      	adds	r3, #52	; 0x34
 80103c6:	681c      	ldr	r4, [r3, #0]
 80103c8:	6838      	ldr	r0, [r7, #0]
 80103ca:	f7f8 fc13 	bl	8008bf4 <_ZNK10TestResult13getCheckCountEv>
 80103ce:	4603      	mov	r3, r0
 80103d0:	4619      	mov	r1, r3
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	47a0      	blx	r4
    print(" checks, ");
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	332c      	adds	r3, #44	; 0x2c
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	4938      	ldr	r1, [pc, #224]	; (80104c0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	4798      	blx	r3
    print(result.getIgnoredCount());
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	3334      	adds	r3, #52	; 0x34
 80103ea:	681c      	ldr	r4, [r3, #0]
 80103ec:	6838      	ldr	r0, [r7, #0]
 80103ee:	f7f7 ffa1 	bl	8008334 <_ZNK10TestResult15getIgnoredCountEv>
 80103f2:	4603      	mov	r3, r0
 80103f4:	4619      	mov	r1, r3
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	47a0      	blx	r4
    print(" ignored, ");
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	332c      	adds	r3, #44	; 0x2c
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	4930      	ldr	r1, [pc, #192]	; (80104c4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	3334      	adds	r3, #52	; 0x34
 801040e:	681c      	ldr	r4, [r3, #0]
 8010410:	6838      	ldr	r0, [r7, #0]
 8010412:	f7ff fd95 	bl	800ff40 <_ZNK10TestResult19getFilteredOutCountEv>
 8010416:	4603      	mov	r3, r0
 8010418:	4619      	mov	r1, r3
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	47a0      	blx	r4
    print(" filtered out, ");
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	332c      	adds	r3, #44	; 0x2c
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	4928      	ldr	r1, [pc, #160]	; (80104c8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	3334      	adds	r3, #52	; 0x34
 8010432:	681c      	ldr	r4, [r3, #0]
 8010434:	6838      	ldr	r0, [r7, #0]
 8010436:	f001 ff05 	bl	8012244 <_ZNK10TestResult21getTotalExecutionTimeEv>
 801043a:	4603      	mov	r3, r0
 801043c:	4619      	mov	r1, r3
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	47a0      	blx	r4
    print(" ms)");
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	332c      	adds	r3, #44	; 0x2c
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	4920      	ldr	r1, [pc, #128]	; (80104cc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	4798      	blx	r3
    if (color_) {
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	7a5b      	ldrb	r3, [r3, #9]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d006      	beq.n	8010466 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	332c      	adds	r3, #44	; 0x2c
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	491b      	ldr	r1, [pc, #108]	; (80104d0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 8010466:	7bfb      	ldrb	r3, [r7, #15]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d009      	beq.n	8010480 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d106      	bne.n	8010480 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	332c      	adds	r3, #44	; 0x2c
 8010478:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 801047a:	4916      	ldr	r1, [pc, #88]	; (80104d4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	4798      	blx	r3
    }
    print("\n\n");
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	332c      	adds	r3, #44	; 0x2c
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4913      	ldr	r1, [pc, #76]	; (80104d8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	4798      	blx	r3

    dotCount_ = 0;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2200      	movs	r2, #0
 8010492:	605a      	str	r2, [r3, #4]
}
 8010494:	bf00      	nop
 8010496:	3714      	adds	r7, #20
 8010498:	46bd      	mov	sp, r7
 801049a:	bd90      	pop	{r4, r7, pc}
 801049c:	080244f0 	.word	0x080244f0
 80104a0:	080244f4 	.word	0x080244f4
 80104a4:	080244fc 	.word	0x080244fc
 80104a8:	08024508 	.word	0x08024508
 80104ac:	08024514 	.word	0x08024514
 80104b0:	08024524 	.word	0x08024524
 80104b4:	0802452c 	.word	0x0802452c
 80104b8:	08024534 	.word	0x08024534
 80104bc:	08024540 	.word	0x08024540
 80104c0:	08024548 	.word	0x08024548
 80104c4:	08024554 	.word	0x08024554
 80104c8:	08024560 	.word	0x08024560
 80104cc:	08024570 	.word	0x08024570
 80104d0:	08024578 	.word	0x08024578
 80104d4:	0802457c 	.word	0x0802457c
 80104d8:	08024620 	.word	0x08024620

080104dc <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	d922      	bls.n	8010534 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	332c      	adds	r3, #44	; 0x2c
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4911      	ldr	r1, [pc, #68]	; (801053c <_ZN10TestOutput12printTestRunEjj+0x60>)
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	4798      	blx	r3
        print(number);
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	3334      	adds	r3, #52	; 0x34
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	68b9      	ldr	r1, [r7, #8]
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	4798      	blx	r3
        print(" of ");
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	332c      	adds	r3, #44	; 0x2c
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	490b      	ldr	r1, [pc, #44]	; (8010540 <_ZN10TestOutput12printTestRunEjj+0x64>)
 8010514:	68f8      	ldr	r0, [r7, #12]
 8010516:	4798      	blx	r3
        print(total);
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	3334      	adds	r3, #52	; 0x34
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	6879      	ldr	r1, [r7, #4]
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	4798      	blx	r3
        print("\n");
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	332c      	adds	r3, #44	; 0x2c
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	4905      	ldr	r1, [pc, #20]	; (8010544 <_ZN10TestOutput12printTestRunEjj+0x68>)
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	4798      	blx	r3
    }
}
 8010534:	bf00      	nop
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	08024624 	.word	0x08024624
 8010540:	08024630 	.word	0x08024630
 8010544:	080244f0 	.word	0x080244f0

08010548 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 8010552:	6838      	ldr	r0, [r7, #0]
 8010554:	f7fd ffa1 	bl	800e49a <_ZNK11TestFailure17isOutsideTestFileEv>
 8010558:	4603      	mov	r3, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	d105      	bne.n	801056a <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 801055e:	6838      	ldr	r0, [r7, #0]
 8010560:	f7fd ffad 	bl	800e4be <_ZNK11TestFailure18isInHelperFunctionEv>
 8010564:	4603      	mov	r3, r0
 8010566:	2b00      	cmp	r3, #0
 8010568:	d001      	beq.n	801056e <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 801056a:	2301      	movs	r3, #1
 801056c:	e000      	b.n	8010570 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 801056e:	2300      	movs	r3, #0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d004      	beq.n	801057e <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 8010574:	6839      	ldr	r1, [r7, #0]
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f000 f81d 	bl	80105b6 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 801057c:	e003      	b.n	8010586 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 801057e:	6839      	ldr	r1, [r7, #0]
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f000 f86b 	bl	801065c <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	3318      	adds	r3, #24
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	f107 0208 	add.w	r2, r7, #8
 8010592:	6839      	ldr	r1, [r7, #0]
 8010594:	4610      	mov	r0, r2
 8010596:	4798      	blx	r3
 8010598:	f107 0308 	add.w	r3, r7, #8
 801059c:	4619      	mov	r1, r3
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f000 f8b2 	bl	8010708 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 80105a4:	f107 0308 	add.w	r3, r7, #8
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fc fb74 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80105ae:	bf00      	nop
 80105b0:	3710      	adds	r7, #16
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b088      	sub	sp, #32
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
 80105be:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	331c      	adds	r3, #28
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f107 0208 	add.w	r2, r7, #8
 80105cc:	6839      	ldr	r1, [r7, #0]
 80105ce:	4610      	mov	r0, r2
 80105d0:	4798      	blx	r3
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	3320      	adds	r3, #32
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	6838      	ldr	r0, [r7, #0]
 80105dc:	4798      	blx	r3
 80105de:	4602      	mov	r2, r0
 80105e0:	f107 0308 	add.w	r3, r7, #8
 80105e4:	4619      	mov	r1, r3
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 f8be 	bl	8010768 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80105ec:	f107 0308 	add.w	r3, r7, #8
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7fc fb50 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	330c      	adds	r3, #12
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f107 0210 	add.w	r2, r7, #16
 8010602:	6839      	ldr	r1, [r7, #0]
 8010604:	4610      	mov	r0, r2
 8010606:	4798      	blx	r3
 8010608:	f107 0310 	add.w	r3, r7, #16
 801060c:	4619      	mov	r1, r3
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 f85c 	bl	80106cc <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8010614:	f107 0310 	add.w	r3, r7, #16
 8010618:	4618      	mov	r0, r3
 801061a:	f7fc fb3c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	3308      	adds	r3, #8
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f107 0218 	add.w	r2, r7, #24
 801062a:	6839      	ldr	r1, [r7, #0]
 801062c:	4610      	mov	r0, r2
 801062e:	4798      	blx	r3
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	3314      	adds	r3, #20
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	6838      	ldr	r0, [r7, #0]
 801063a:	4798      	blx	r3
 801063c:	4602      	mov	r2, r0
 801063e:	f107 0318 	add.w	r3, r7, #24
 8010642:	4619      	mov	r1, r3
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f000 f88f 	bl	8010768 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 801064a:	f107 0318 	add.w	r3, r7, #24
 801064e:	4618      	mov	r0, r3
 8010650:	f7fc fb21 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8010654:	bf00      	nop
 8010656:	3720      	adds	r7, #32
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b086      	sub	sp, #24
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	3308      	adds	r3, #8
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f107 0208 	add.w	r2, r7, #8
 8010672:	6839      	ldr	r1, [r7, #0]
 8010674:	4610      	mov	r0, r2
 8010676:	4798      	blx	r3
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	3314      	adds	r3, #20
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	6838      	ldr	r0, [r7, #0]
 8010682:	4798      	blx	r3
 8010684:	4602      	mov	r2, r0
 8010686:	f107 0308 	add.w	r3, r7, #8
 801068a:	4619      	mov	r1, r3
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f000 f86b 	bl	8010768 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8010692:	f107 0308 	add.w	r3, r7, #8
 8010696:	4618      	mov	r0, r3
 8010698:	f7fc fafd 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	330c      	adds	r3, #12
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	f107 0210 	add.w	r2, r7, #16
 80106a8:	6839      	ldr	r1, [r7, #0]
 80106aa:	4610      	mov	r0, r2
 80106ac:	4798      	blx	r3
 80106ae:	f107 0310 	add.w	r3, r7, #16
 80106b2:	4619      	mov	r1, r3
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 f809 	bl	80106cc <_ZN10TestOutput18printFailureInTestE12SimpleString>
 80106ba:	f107 0310 	add.w	r3, r7, #16
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fc fae9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80106c4:	bf00      	nop
 80106c6:	3718      	adds	r7, #24
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 80106cc:	b590      	push	{r4, r7, lr}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	332c      	adds	r3, #44	; 0x2c
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	4909      	ldr	r1, [pc, #36]	; (8010704 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	4798      	blx	r3
    print(testName.asCharString());
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	332c      	adds	r3, #44	; 0x2c
 80106ea:	681c      	ldr	r4, [r3, #0]
 80106ec:	6838      	ldr	r0, [r7, #0]
 80106ee:	f7fc faa5 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 80106f2:	4603      	mov	r3, r0
 80106f4:	4619      	mov	r1, r3
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	47a0      	blx	r4
}
 80106fa:	bf00      	nop
 80106fc:	370c      	adds	r7, #12
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd90      	pop	{r4, r7, pc}
 8010702:	bf00      	nop
 8010704:	08024638 	.word	0x08024638

08010708 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8010708:	b590      	push	{r4, r7, lr}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
    print("\n");
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	332c      	adds	r3, #44	; 0x2c
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4910      	ldr	r1, [pc, #64]	; (801075c <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	4798      	blx	r3
    print("\t");
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	332c      	adds	r3, #44	; 0x2c
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	490d      	ldr	r1, [pc, #52]	; (8010760 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	4798      	blx	r3
    print(reason.asCharString());
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	332c      	adds	r3, #44	; 0x2c
 8010734:	681c      	ldr	r4, [r3, #0]
 8010736:	6838      	ldr	r0, [r7, #0]
 8010738:	f7fc fa80 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801073c:	4603      	mov	r3, r0
 801073e:	4619      	mov	r1, r3
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	47a0      	blx	r4
    print("\n\n");
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	332c      	adds	r3, #44	; 0x2c
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	4905      	ldr	r1, [pc, #20]	; (8010764 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	4798      	blx	r3
}
 8010752:	bf00      	nop
 8010754:	370c      	adds	r7, #12
 8010756:	46bd      	mov	sp, r7
 8010758:	bd90      	pop	{r4, r7, pc}
 801075a:	bf00      	nop
 801075c:	080244f0 	.word	0x080244f0
 8010760:	08024648 	.word	0x08024648
 8010764:	08024620 	.word	0x08024620

08010768 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 8010768:	b590      	push	{r4, r7, lr}
 801076a:	b089      	sub	sp, #36	; 0x24
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 8010774:	f7ff fbf0 	bl	800ff58 <_ZN10TestOutput21getWorkingEnvironmentEv>
 8010778:	4603      	mov	r3, r0
 801077a:	2b00      	cmp	r3, #0
 801077c:	bf0c      	ite	eq
 801077e:	2301      	moveq	r3, #1
 8010780:	2300      	movne	r3, #0
 8010782:	b2db      	uxtb	r3, r3
 8010784:	2b00      	cmp	r3, #0
 8010786:	d015      	beq.n	80107b4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	3354      	adds	r3, #84	; 0x54
 801078e:	681c      	ldr	r4, [r3, #0]
 8010790:	f107 0310 	add.w	r3, r7, #16
 8010794:	68b9      	ldr	r1, [r7, #8]
 8010796:	4618      	mov	r0, r3
 8010798:	f7fb ff19 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 801079c:	f107 0310 	add.w	r3, r7, #16
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	4619      	mov	r1, r3
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	47a0      	blx	r4
 80107a8:	f107 0310 	add.w	r3, r7, #16
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fc fa72 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 80107b2:	e014      	b.n	80107de <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	3350      	adds	r3, #80	; 0x50
 80107ba:	681c      	ldr	r4, [r3, #0]
 80107bc:	f107 0318 	add.w	r3, r7, #24
 80107c0:	68b9      	ldr	r1, [r7, #8]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fb ff03 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 80107c8:	f107 0318 	add.w	r3, r7, #24
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	4619      	mov	r1, r3
 80107d0:	68f8      	ldr	r0, [r7, #12]
 80107d2:	47a0      	blx	r4
 80107d4:	f107 0318 	add.w	r3, r7, #24
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fc fa5c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80107de:	bf00      	nop
 80107e0:	3724      	adds	r7, #36	; 0x24
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd90      	pop	{r4, r7, pc}
	...

080107e8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 80107e8:	b590      	push	{r4, r7, lr}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
    print("\n");
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	332c      	adds	r3, #44	; 0x2c
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4916      	ldr	r1, [pc, #88]	; (8010858 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	4798      	blx	r3
    print(file.asCharString());
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	332c      	adds	r3, #44	; 0x2c
 8010808:	681c      	ldr	r4, [r3, #0]
 801080a:	68b8      	ldr	r0, [r7, #8]
 801080c:	f7fc fa16 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8010810:	4603      	mov	r3, r0
 8010812:	4619      	mov	r1, r3
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	47a0      	blx	r4
    print(":");
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	332c      	adds	r3, #44	; 0x2c
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	490e      	ldr	r1, [pc, #56]	; (801085c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	4798      	blx	r3
    print(lineNumber);
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	3334      	adds	r3, #52	; 0x34
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	6879      	ldr	r1, [r7, #4]
 8010830:	68f8      	ldr	r0, [r7, #12]
 8010832:	4798      	blx	r3
    print(":");
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	332c      	adds	r3, #44	; 0x2c
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	4907      	ldr	r1, [pc, #28]	; (801085c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 801083e:	68f8      	ldr	r0, [r7, #12]
 8010840:	4798      	blx	r3
    print(" error:");
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	332c      	adds	r3, #44	; 0x2c
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4905      	ldr	r1, [pc, #20]	; (8010860 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	4798      	blx	r3
}
 8010850:	bf00      	nop
 8010852:	3714      	adds	r7, #20
 8010854:	46bd      	mov	sp, r7
 8010856:	bd90      	pop	{r4, r7, pc}
 8010858:	080244f0 	.word	0x080244f0
 801085c:	0802464c 	.word	0x0802464c
 8010860:	08024650 	.word	0x08024650

08010864 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8010864:	b590      	push	{r4, r7, lr}
 8010866:	b085      	sub	sp, #20
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
    print("\n");
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	332c      	adds	r3, #44	; 0x2c
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4916      	ldr	r1, [pc, #88]	; (80108d4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 801087a:	68f8      	ldr	r0, [r7, #12]
 801087c:	4798      	blx	r3
    print(file.asCharString());
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	332c      	adds	r3, #44	; 0x2c
 8010884:	681c      	ldr	r4, [r3, #0]
 8010886:	68b8      	ldr	r0, [r7, #8]
 8010888:	f7fc f9d8 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801088c:	4603      	mov	r3, r0
 801088e:	4619      	mov	r1, r3
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	47a0      	blx	r4
    print("(");
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	332c      	adds	r3, #44	; 0x2c
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	490e      	ldr	r1, [pc, #56]	; (80108d8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 801089e:	68f8      	ldr	r0, [r7, #12]
 80108a0:	4798      	blx	r3
    print(lineNumber);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3334      	adds	r3, #52	; 0x34
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	6879      	ldr	r1, [r7, #4]
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	4798      	blx	r3
    print("):");
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	332c      	adds	r3, #44	; 0x2c
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4908      	ldr	r1, [pc, #32]	; (80108dc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	4798      	blx	r3
    print(" error:");
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	332c      	adds	r3, #44	; 0x2c
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4906      	ldr	r1, [pc, #24]	; (80108e0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	4798      	blx	r3
}
 80108cc:	bf00      	nop
 80108ce:	3714      	adds	r7, #20
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd90      	pop	{r4, r7, pc}
 80108d4:	080244f0 	.word	0x080244f0
 80108d8:	08024658 	.word	0x08024658
 80108dc:	0802465c 	.word	0x0802465c
 80108e0:	08024650 	.word	0x08024650

080108e4 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	7a1b      	ldrb	r3, [r3, #8]
 80108f2:	2b02      	cmp	r3, #2
 80108f4:	d106      	bne.n	8010904 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	3328      	adds	r3, #40	; 0x28
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	6839      	ldr	r1, [r7, #0]
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	4798      	blx	r3
}
 8010904:	bf00      	nop
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6039      	str	r1, [r7, #0]
    while (*s) {
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d009      	beq.n	8010932 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 801091e:	4b0a      	ldr	r3, [pc, #40]	; (8010948 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	683a      	ldr	r2, [r7, #0]
 8010924:	7812      	ldrb	r2, [r2, #0]
 8010926:	4610      	mov	r0, r2
 8010928:	4798      	blx	r3
        s++;
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	3301      	adds	r3, #1
 801092e:	603b      	str	r3, [r7, #0]
    while (*s) {
 8010930:	e7f1      	b.n	8010916 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	334c      	adds	r3, #76	; 0x4c
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	4798      	blx	r3
}
 801093e:	bf00      	nop
 8010940:	3708      	adds	r7, #8
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	200000c0 	.word	0x200000c0

0801094c <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 8010954:	4b03      	ldr	r3, [pc, #12]	; (8010964 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4798      	blx	r3
}
 801095a:	bf00      	nop
 801095c:	3708      	adds	r7, #8
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	200000c4 	.word	0x200000c4

08010968 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4618      	mov	r0, r3
 8010974:	f7ff fb00 	bl	800ff78 <_ZN10TestOutputC1Ev>
 8010978:	4a06      	ldr	r2, [pc, #24]	; (8010994 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	601a      	str	r2, [r3, #0]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2200      	movs	r2, #0
 8010982:	611a      	str	r2, [r3, #16]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2200      	movs	r2, #0
 8010988:	615a      	str	r2, [r3, #20]
{
}
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	4618      	mov	r0, r3
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	08027bd8 	.word	0x08027bd8

08010998 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 8010998:	b580      	push	{r7, lr}
 801099a:	b082      	sub	sp, #8
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	4a0e      	ldr	r2, [pc, #56]	; (80109dc <_ZN19CompositeTestOutputD1Ev+0x44>)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	691b      	ldr	r3, [r3, #16]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d004      	beq.n	80109b8 <_ZN19CompositeTestOutputD1Ev+0x20>
 80109ae:	681a      	ldr	r2, [r3, #0]
 80109b0:	3204      	adds	r2, #4
 80109b2:	6812      	ldr	r2, [r2, #0]
 80109b4:	4618      	mov	r0, r3
 80109b6:	4790      	blx	r2
  delete outputTwo_;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	695b      	ldr	r3, [r3, #20]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d004      	beq.n	80109ca <_ZN19CompositeTestOutputD1Ev+0x32>
 80109c0:	681a      	ldr	r2, [r3, #0]
 80109c2:	3204      	adds	r2, #4
 80109c4:	6812      	ldr	r2, [r2, #0]
 80109c6:	4618      	mov	r0, r3
 80109c8:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7ff faf1 	bl	800ffb4 <_ZN10TestOutputD1Ev>
}
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4618      	mov	r0, r3
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	08027bd8 	.word	0x08027bd8

080109e0 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
}
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7ff ffd5 	bl	8010998 <_ZN19CompositeTestOutputD1Ev>
 80109ee:	2118      	movs	r1, #24
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f7f9 f9e9 	bl	8009dc8 <_ZdlPvj>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	4618      	mov	r0, r3
 80109fa:	3708      	adds	r7, #8
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	691b      	ldr	r3, [r3, #16]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d004      	beq.n	8010a1c <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 8010a12:	681a      	ldr	r2, [r3, #0]
 8010a14:	3204      	adds	r2, #4
 8010a16:	6812      	ldr	r2, [r2, #0]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	4790      	blx	r2
  outputOne_ = output;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	683a      	ldr	r2, [r7, #0]
 8010a20:	611a      	str	r2, [r3, #16]
}
 8010a22:	bf00      	nop
 8010a24:	3708      	adds	r7, #8
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b082      	sub	sp, #8
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
 8010a32:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	695b      	ldr	r3, [r3, #20]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d004      	beq.n	8010a46 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	3204      	adds	r2, #4
 8010a40:	6812      	ldr	r2, [r2, #0]
 8010a42:	4618      	mov	r0, r3
 8010a44:	4790      	blx	r2
  outputTwo_ = output;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	683a      	ldr	r2, [r7, #0]
 8010a4a:	615a      	str	r2, [r3, #20]
}
 8010a4c:	bf00      	nop
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	691b      	ldr	r3, [r3, #16]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d008      	beq.n	8010a76 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	691a      	ldr	r2, [r3, #16]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	691b      	ldr	r3, [r3, #16]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	3308      	adds	r3, #8
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4610      	mov	r0, r2
 8010a74:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	695b      	ldr	r3, [r3, #20]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d008      	beq.n	8010a90 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	695a      	ldr	r2, [r3, #20]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	695b      	ldr	r3, [r3, #20]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	3308      	adds	r3, #8
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	4798      	blx	r3
}
 8010a90:	bf00      	nop
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	691b      	ldr	r3, [r3, #16]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d009      	beq.n	8010abe <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	691a      	ldr	r2, [r3, #16]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	691b      	ldr	r3, [r3, #16]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	330c      	adds	r3, #12
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	6839      	ldr	r1, [r7, #0]
 8010aba:	4610      	mov	r0, r2
 8010abc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	695b      	ldr	r3, [r3, #20]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d009      	beq.n	8010ada <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	695a      	ldr	r2, [r3, #20]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	695b      	ldr	r3, [r3, #20]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	330c      	adds	r3, #12
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6839      	ldr	r1, [r7, #0]
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	4798      	blx	r3
}
 8010ada:	bf00      	nop
 8010adc:	3708      	adds	r7, #8
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8010ae2:	b580      	push	{r7, lr}
 8010ae4:	b082      	sub	sp, #8
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
 8010aea:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	691b      	ldr	r3, [r3, #16]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d009      	beq.n	8010b08 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	691a      	ldr	r2, [r3, #16]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	691b      	ldr	r3, [r3, #16]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	3310      	adds	r3, #16
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	6839      	ldr	r1, [r7, #0]
 8010b04:	4610      	mov	r0, r2
 8010b06:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	695b      	ldr	r3, [r3, #20]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d009      	beq.n	8010b24 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	695a      	ldr	r2, [r3, #20]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	695b      	ldr	r3, [r3, #20]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	3310      	adds	r3, #16
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	6839      	ldr	r1, [r7, #0]
 8010b20:	4610      	mov	r0, r2
 8010b22:	4798      	blx	r3
}
 8010b24:	bf00      	nop
 8010b26:	3708      	adds	r7, #8
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d009      	beq.n	8010b52 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	691a      	ldr	r2, [r3, #16]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	691b      	ldr	r3, [r3, #16]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	3314      	adds	r3, #20
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	6839      	ldr	r1, [r7, #0]
 8010b4e:	4610      	mov	r0, r2
 8010b50:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	695b      	ldr	r3, [r3, #20]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d009      	beq.n	8010b6e <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	695a      	ldr	r2, [r3, #20]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	695b      	ldr	r3, [r3, #20]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	3314      	adds	r3, #20
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	6839      	ldr	r1, [r7, #0]
 8010b6a:	4610      	mov	r0, r2
 8010b6c:	4798      	blx	r3
}
 8010b6e:	bf00      	nop
 8010b70:	3708      	adds	r7, #8
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b082      	sub	sp, #8
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
 8010b7e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	691b      	ldr	r3, [r3, #16]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d009      	beq.n	8010b9c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	691a      	ldr	r2, [r3, #16]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	691b      	ldr	r3, [r3, #16]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	3318      	adds	r3, #24
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	6839      	ldr	r1, [r7, #0]
 8010b98:	4610      	mov	r0, r2
 8010b9a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	695b      	ldr	r3, [r3, #20]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d009      	beq.n	8010bb8 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	695a      	ldr	r2, [r3, #20]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	695b      	ldr	r3, [r3, #20]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	3318      	adds	r3, #24
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	6839      	ldr	r1, [r7, #0]
 8010bb4:	4610      	mov	r0, r2
 8010bb6:	4798      	blx	r3
}
 8010bb8:	bf00      	nop
 8010bba:	3708      	adds	r7, #8
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d009      	beq.n	8010be6 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	691a      	ldr	r2, [r3, #16]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	691b      	ldr	r3, [r3, #16]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	331c      	adds	r3, #28
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	6839      	ldr	r1, [r7, #0]
 8010be2:	4610      	mov	r0, r2
 8010be4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	695b      	ldr	r3, [r3, #20]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d009      	beq.n	8010c02 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	695a      	ldr	r2, [r3, #20]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	695b      	ldr	r3, [r3, #20]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	331c      	adds	r3, #28
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	6839      	ldr	r1, [r7, #0]
 8010bfe:	4610      	mov	r0, r2
 8010c00:	4798      	blx	r3
}
 8010c02:	bf00      	nop
 8010c04:	3708      	adds	r7, #8
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}

08010c0a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 8010c0a:	b580      	push	{r7, lr}
 8010c0c:	b082      	sub	sp, #8
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
 8010c12:	460b      	mov	r3, r1
 8010c14:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	691b      	ldr	r3, [r3, #16]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d009      	beq.n	8010c32 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	691a      	ldr	r2, [r3, #16]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	691b      	ldr	r3, [r3, #16]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	3320      	adds	r3, #32
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	78f9      	ldrb	r1, [r7, #3]
 8010c2e:	4610      	mov	r0, r2
 8010c30:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	695b      	ldr	r3, [r3, #20]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d009      	beq.n	8010c4e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	695a      	ldr	r2, [r3, #20]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	695b      	ldr	r3, [r3, #20]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3320      	adds	r3, #32
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	78f9      	ldrb	r1, [r7, #3]
 8010c4a:	4610      	mov	r0, r2
 8010c4c:	4798      	blx	r3
}
 8010c4e:	bf00      	nop
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b082      	sub	sp, #8
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	691b      	ldr	r3, [r3, #16]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d008      	beq.n	8010c78 <_ZN19CompositeTestOutput5colorEv+0x22>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	691a      	ldr	r2, [r3, #16]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	691b      	ldr	r3, [r3, #16]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	3324      	adds	r3, #36	; 0x24
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	4610      	mov	r0, r2
 8010c76:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	695b      	ldr	r3, [r3, #20]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d008      	beq.n	8010c92 <_ZN19CompositeTestOutput5colorEv+0x3c>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	695a      	ldr	r2, [r3, #20]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	695b      	ldr	r3, [r3, #20]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	3324      	adds	r3, #36	; 0x24
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4610      	mov	r0, r2
 8010c90:	4798      	blx	r3
}
 8010c92:	bf00      	nop
 8010c94:	3708      	adds	r7, #8
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}

08010c9a <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 8010c9a:	b580      	push	{r7, lr}
 8010c9c:	b082      	sub	sp, #8
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
 8010ca2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	691b      	ldr	r3, [r3, #16]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d009      	beq.n	8010cc0 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	691a      	ldr	r2, [r3, #16]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	691b      	ldr	r3, [r3, #16]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	3328      	adds	r3, #40	; 0x28
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	6839      	ldr	r1, [r7, #0]
 8010cbc:	4610      	mov	r0, r2
 8010cbe:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	695b      	ldr	r3, [r3, #20]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d009      	beq.n	8010cdc <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	695a      	ldr	r2, [r3, #20]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	695b      	ldr	r3, [r3, #20]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	3328      	adds	r3, #40	; 0x28
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	6839      	ldr	r1, [r7, #0]
 8010cd8:	4610      	mov	r0, r2
 8010cda:	4798      	blx	r3
}
 8010cdc:	bf00      	nop
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	691b      	ldr	r3, [r3, #16]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d009      	beq.n	8010d0a <_ZN19CompositeTestOutput5printEPKc+0x26>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	691a      	ldr	r2, [r3, #16]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	691b      	ldr	r3, [r3, #16]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	332c      	adds	r3, #44	; 0x2c
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	6839      	ldr	r1, [r7, #0]
 8010d06:	4610      	mov	r0, r2
 8010d08:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	695b      	ldr	r3, [r3, #20]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d009      	beq.n	8010d26 <_ZN19CompositeTestOutput5printEPKc+0x42>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	695a      	ldr	r2, [r3, #20]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	695b      	ldr	r3, [r3, #20]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	332c      	adds	r3, #44	; 0x2c
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	6839      	ldr	r1, [r7, #0]
 8010d22:	4610      	mov	r0, r2
 8010d24:	4798      	blx	r3
}
 8010d26:	bf00      	nop
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b082      	sub	sp, #8
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
 8010d36:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	691b      	ldr	r3, [r3, #16]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d009      	beq.n	8010d54 <_ZN19CompositeTestOutput5printEl+0x26>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	691a      	ldr	r2, [r3, #16]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	691b      	ldr	r3, [r3, #16]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	3330      	adds	r3, #48	; 0x30
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	6839      	ldr	r1, [r7, #0]
 8010d50:	4610      	mov	r0, r2
 8010d52:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	695b      	ldr	r3, [r3, #20]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d009      	beq.n	8010d70 <_ZN19CompositeTestOutput5printEl+0x42>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	695a      	ldr	r2, [r3, #20]
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	695b      	ldr	r3, [r3, #20]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	3330      	adds	r3, #48	; 0x30
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	6839      	ldr	r1, [r7, #0]
 8010d6c:	4610      	mov	r0, r2
 8010d6e:	4798      	blx	r3
}
 8010d70:	bf00      	nop
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	691b      	ldr	r3, [r3, #16]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d009      	beq.n	8010d9e <_ZN19CompositeTestOutput5printEj+0x26>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	691a      	ldr	r2, [r3, #16]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	691b      	ldr	r3, [r3, #16]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	3334      	adds	r3, #52	; 0x34
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	6839      	ldr	r1, [r7, #0]
 8010d9a:	4610      	mov	r0, r2
 8010d9c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	695b      	ldr	r3, [r3, #20]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d009      	beq.n	8010dba <_ZN19CompositeTestOutput5printEj+0x42>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	695a      	ldr	r2, [r3, #20]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	695b      	ldr	r3, [r3, #20]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	3334      	adds	r3, #52	; 0x34
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	6839      	ldr	r1, [r7, #0]
 8010db6:	4610      	mov	r0, r2
 8010db8:	4798      	blx	r3
}
 8010dba:	bf00      	nop
 8010dbc:	3708      	adds	r7, #8
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}

08010dc2 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	b084      	sub	sp, #16
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	60f8      	str	r0, [r7, #12]
 8010dca:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	691b      	ldr	r3, [r3, #16]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d00a      	beq.n	8010dec <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	691a      	ldr	r2, [r3, #16]
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	691b      	ldr	r3, [r3, #16]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	3338      	adds	r3, #56	; 0x38
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	ed97 0b00 	vldr	d0, [r7]
 8010de8:	4610      	mov	r0, r2
 8010dea:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	695b      	ldr	r3, [r3, #20]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00a      	beq.n	8010e0a <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	695a      	ldr	r2, [r3, #20]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	695b      	ldr	r3, [r3, #20]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	3338      	adds	r3, #56	; 0x38
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	ed97 0b00 	vldr	d0, [r7]
 8010e06:	4610      	mov	r0, r2
 8010e08:	4798      	blx	r3
}
 8010e0a:	bf00      	nop
 8010e0c:	3710      	adds	r7, #16
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}

08010e12 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 8010e12:	b580      	push	{r7, lr}
 8010e14:	b082      	sub	sp, #8
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
 8010e1a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	691b      	ldr	r3, [r3, #16]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d009      	beq.n	8010e38 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	691a      	ldr	r2, [r3, #16]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	691b      	ldr	r3, [r3, #16]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	333c      	adds	r3, #60	; 0x3c
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	6839      	ldr	r1, [r7, #0]
 8010e34:	4610      	mov	r0, r2
 8010e36:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	695b      	ldr	r3, [r3, #20]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d009      	beq.n	8010e54 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	695a      	ldr	r2, [r3, #20]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	695b      	ldr	r3, [r3, #20]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	333c      	adds	r3, #60	; 0x3c
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	6839      	ldr	r1, [r7, #0]
 8010e50:	4610      	mov	r0, r2
 8010e52:	4798      	blx	r3
}
 8010e54:	bf00      	nop
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	691b      	ldr	r3, [r3, #16]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d009      	beq.n	8010e82 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	691a      	ldr	r2, [r3, #16]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	691b      	ldr	r3, [r3, #16]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	3344      	adds	r3, #68	; 0x44
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	6839      	ldr	r1, [r7, #0]
 8010e7e:	4610      	mov	r0, r2
 8010e80:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	695b      	ldr	r3, [r3, #20]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d009      	beq.n	8010e9e <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	695a      	ldr	r2, [r3, #20]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	695b      	ldr	r3, [r3, #20]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	3344      	adds	r3, #68	; 0x44
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	6839      	ldr	r1, [r7, #0]
 8010e9a:	4610      	mov	r0, r2
 8010e9c:	4798      	blx	r3
}
 8010e9e:	bf00      	nop
 8010ea0:	3708      	adds	r7, #8
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}

08010ea6 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b082      	sub	sp, #8
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	691b      	ldr	r3, [r3, #16]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d008      	beq.n	8010ec8 <_ZN19CompositeTestOutput5flushEv+0x22>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	691a      	ldr	r2, [r3, #16]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	691b      	ldr	r3, [r3, #16]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	334c      	adds	r3, #76	; 0x4c
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4610      	mov	r0, r2
 8010ec6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	695b      	ldr	r3, [r3, #20]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d008      	beq.n	8010ee2 <_ZN19CompositeTestOutput5flushEv+0x3c>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	695a      	ldr	r2, [r3, #20]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	695b      	ldr	r3, [r3, #20]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	334c      	adds	r3, #76	; 0x4c
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	4610      	mov	r0, r2
 8010ee0:	4798      	blx	r3
}
 8010ee2:	bf00      	nop
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 8010eea:	b480      	push	{r7}
 8010eec:	b085      	sub	sp, #20
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	60f8      	str	r0, [r7, #12]
 8010ef2:	60b9      	str	r1, [r7, #8]
 8010ef4:	607a      	str	r2, [r7, #4]
    }
 8010ef6:	bf00      	nop
 8010ef8:	3714      	adds	r7, #20
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr

08010f02 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 8010f02:	b480      	push	{r7}
 8010f04:	b085      	sub	sp, #20
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	60f8      	str	r0, [r7, #12]
 8010f0a:	60b9      	str	r1, [r7, #8]
 8010f0c:	607a      	str	r2, [r7, #4]
    }
 8010f0e:	bf00      	nop
 8010f10:	3714      	adds	r7, #20
 8010f12:	46bd      	mov	sp, r7
 8010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f18:	4770      	bx	lr
	...

08010f1c <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 8010f26:	4a0b      	ldr	r2, [pc, #44]	; (8010f54 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	601a      	str	r2, [r3, #0]
 8010f2c:	f000 f9ce 	bl	80112cc <_ZN14NullTestPlugin8instanceEv>
 8010f30:	4602      	mov	r2, r0
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	605a      	str	r2, [r3, #4]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	3308      	adds	r3, #8
 8010f3a:	6839      	ldr	r1, [r7, #0]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7fb fb46 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2201      	movs	r2, #1
 8010f46:	741a      	strb	r2, [r3, #16]
{
}
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3708      	adds	r7, #8
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop
 8010f54:	08027d94 	.word	0x08027d94

08010f58 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
 8010f60:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 8010f62:	4a0a      	ldr	r2, [pc, #40]	; (8010f8c <_ZN10TestPluginC1EPS_+0x34>)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	601a      	str	r2, [r3, #0]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	683a      	ldr	r2, [r7, #0]
 8010f6c:	605a      	str	r2, [r3, #4]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	3308      	adds	r3, #8
 8010f72:	4907      	ldr	r1, [pc, #28]	; (8010f90 <_ZN10TestPluginC1EPS_+0x38>)
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7fb fad6 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	741a      	strb	r2, [r3, #16]
{
}
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	4618      	mov	r0, r3
 8010f84:	3708      	adds	r7, #8
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
 8010f8a:	bf00      	nop
 8010f8c:	08027d94 	.word	0x08027d94
 8010f90:	08024660 	.word	0x08024660

08010f94 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	4a06      	ldr	r2, [pc, #24]	; (8010fb8 <_ZN10TestPluginD1Ev+0x24>)
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	601a      	str	r2, [r3, #0]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	3308      	adds	r3, #8
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fb fe75 	bl	800cc96 <_ZN12SimpleStringD1Ev>
{
}
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3708      	adds	r7, #8
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	08027d94 	.word	0x08027d94

08010fbc <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
}
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7ff ffe5 	bl	8010f94 <_ZN10TestPluginD1Ev>
 8010fca:	2114      	movs	r1, #20
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f7f8 fefb 	bl	8009dc8 <_ZdlPvj>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3708      	adds	r7, #8
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	683a      	ldr	r2, [r7, #0]
 8010fea:	605a      	str	r2, [r3, #4]
    return this;
 8010fec:	687b      	ldr	r3, [r7, #4]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr

08010ffa <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 8010ffa:	b580      	push	{r7, lr}
 8010ffc:	b084      	sub	sp, #16
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	60f8      	str	r0, [r7, #12]
 8011002:	60b9      	str	r1, [r7, #8]
 8011004:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	7c1b      	ldrb	r3, [r3, #16]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d007      	beq.n	801101e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	3308      	adds	r3, #8
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	68b9      	ldr	r1, [r7, #8]
 801101a:	68f8      	ldr	r0, [r7, #12]
 801101c:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	6858      	ldr	r0, [r3, #4]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	3314      	adds	r3, #20
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	68b9      	ldr	r1, [r7, #8]
 8011030:	4798      	blx	r3
}
 8011032:	bf00      	nop
 8011034:	3710      	adds	r7, #16
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}

0801103a <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 801103a:	b580      	push	{r7, lr}
 801103c:	b084      	sub	sp, #16
 801103e:	af00      	add	r7, sp, #0
 8011040:	60f8      	str	r0, [r7, #12]
 8011042:	60b9      	str	r1, [r7, #8]
 8011044:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6858      	ldr	r0, [r3, #4]
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	3318      	adds	r3, #24
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	68b9      	ldr	r1, [r7, #8]
 8011058:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	7c1b      	ldrb	r3, [r3, #16]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d007      	beq.n	8011072 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	330c      	adds	r3, #12
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	687a      	ldr	r2, [r7, #4]
 801106c:	68b9      	ldr	r1, [r7, #8]
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	4798      	blx	r3
}
 8011072:	bf00      	nop
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 801107a:	b590      	push	{r4, r7, lr}
 801107c:	b085      	sub	sp, #20
 801107e:	af00      	add	r7, sp, #0
 8011080:	60f8      	str	r0, [r7, #12]
 8011082:	60b9      	str	r1, [r7, #8]
 8011084:	607a      	str	r2, [r7, #4]
 8011086:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	331c      	adds	r3, #28
 801108e:	681c      	ldr	r4, [r3, #0]
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	68b9      	ldr	r1, [r7, #8]
 8011096:	68f8      	ldr	r0, [r7, #12]
 8011098:	47a0      	blx	r4
 801109a:	4603      	mov	r3, r0
}
 801109c:	4618      	mov	r0, r3
 801109e:	3714      	adds	r7, #20
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd90      	pop	{r4, r7, pc}

080110a4 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 80110a4:	b590      	push	{r4, r7, lr}
 80110a6:	b085      	sub	sp, #20
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	607a      	str	r2, [r7, #4]
 80110b0:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	3310      	adds	r3, #16
 80110b8:	681c      	ldr	r4, [r3, #0]
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	687a      	ldr	r2, [r7, #4]
 80110be:	68b9      	ldr	r1, [r7, #8]
 80110c0:	68f8      	ldr	r0, [r7, #12]
 80110c2:	47a0      	blx	r4
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d001      	beq.n	80110ce <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 80110ca:	2301      	movs	r3, #1
 80110cc:	e011      	b.n	80110f2 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d00c      	beq.n	80110f0 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6858      	ldr	r0, [r3, #4]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	331c      	adds	r3, #28
 80110e2:	681c      	ldr	r4, [r3, #0]
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	687a      	ldr	r2, [r7, #4]
 80110e8:	68b9      	ldr	r1, [r7, #8]
 80110ea:	47a0      	blx	r4
 80110ec:	4603      	mov	r3, r0
 80110ee:	e000      	b.n	80110f2 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 80110f0:	2300      	movs	r3, #0
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3714      	adds	r7, #20
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd90      	pop	{r4, r7, pc}

080110fa <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 80110fa:	b480      	push	{r7}
 80110fc:	b083      	sub	sp, #12
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
    return name_;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	3308      	adds	r3, #8
}
 8011106:	4618      	mov	r0, r3
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr

08011112 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 8011112:	b580      	push	{r7, lr}
 8011114:	b082      	sub	sp, #8
 8011116:	af00      	add	r7, sp, #0
 8011118:	6078      	str	r0, [r7, #4]
 801111a:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	3308      	adds	r3, #8
 8011120:	4619      	mov	r1, r3
 8011122:	6838      	ldr	r0, [r7, #0]
 8011124:	f7fb fdc3 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8011128:	4603      	mov	r3, r0
 801112a:	2b00      	cmp	r3, #0
 801112c:	d001      	beq.n	8011132 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	e00d      	b.n	801114e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d007      	beq.n	801114a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	6839      	ldr	r1, [r7, #0]
 8011140:	4618      	mov	r0, r3
 8011142:	f7ff ffe6 	bl	8011112 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8011146:	4603      	mov	r3, r0
 8011148:	e001      	b.n	801114e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	685b      	ldr	r3, [r3, #4]
}
 801114e:	4618      	mov	r0, r3
 8011150:	3708      	adds	r7, #8
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}

08011156 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8011156:	b480      	push	{r7}
 8011158:	b083      	sub	sp, #12
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
    return next_;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	685b      	ldr	r3, [r3, #4]
}
 8011162:	4618      	mov	r0, r3
 8011164:	370c      	adds	r7, #12
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr

0801116e <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 801116e:	b580      	push	{r7, lr}
 8011170:	b084      	sub	sp, #16
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
 8011176:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8011178:	2300      	movs	r3, #0
 801117a:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	685b      	ldr	r3, [r3, #4]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d00e      	beq.n	80111a2 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	4618      	mov	r0, r3
 801118a:	f7ff ffb6 	bl	80110fa <_ZN10TestPlugin7getNameEv>
 801118e:	4603      	mov	r3, r0
 8011190:	6839      	ldr	r1, [r7, #0]
 8011192:	4618      	mov	r0, r3
 8011194:	f7fb fd8b 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d001      	beq.n	80111a2 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 801119e:	2301      	movs	r3, #1
 80111a0:	e000      	b.n	80111a4 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 80111a2:	2300      	movs	r3, #0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d007      	beq.n	80111b8 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	685a      	ldr	r2, [r3, #4]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	605a      	str	r2, [r3, #4]
    }
    return removed;
 80111b8:	68fb      	ldr	r3, [r7, #12]
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3710      	adds	r7, #16
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}

080111c2 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 80111c2:	b480      	push	{r7}
 80111c4:	b083      	sub	sp, #12
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2200      	movs	r2, #0
 80111ce:	741a      	strb	r2, [r3, #16]
}
 80111d0:	bf00      	nop
 80111d2:	370c      	adds	r7, #12
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2201      	movs	r2, #1
 80111e8:	741a      	strb	r2, [r3, #16]
}
 80111ea:	bf00      	nop
 80111ec:	370c      	adds	r7, #12
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr

080111f6 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 80111f6:	b480      	push	{r7}
 80111f8:	b083      	sub	sp, #12
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
    return enabled_;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	7c1b      	ldrb	r3, [r3, #16]
}
 8011202:	4618      	mov	r0, r3
 8011204:	370c      	adds	r7, #12
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr
	...

08011210 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 8011210:	b580      	push	{r7, lr}
 8011212:	b082      	sub	sp, #8
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6839      	ldr	r1, [r7, #0]
 801121e:	4618      	mov	r0, r3
 8011220:	f7ff fe7c 	bl	8010f1c <_ZN10TestPluginC1ERK12SimpleString>
 8011224:	4a05      	ldr	r2, [pc, #20]	; (801123c <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 801122a:	4b05      	ldr	r3, [pc, #20]	; (8011240 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 801122c:	2200      	movs	r2, #0
 801122e:	601a      	str	r2, [r3, #0]
}
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	4618      	mov	r0, r3
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	08027d50 	.word	0x08027d50
 8011240:	200008ac 	.word	0x200008ac

08011244 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8011244:	b480      	push	{r7}
 8011246:	b087      	sub	sp, #28
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011250:	4b0e      	ldr	r3, [pc, #56]	; (801128c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	3b01      	subs	r3, #1
 8011256:	617b      	str	r3, [r7, #20]
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	2b00      	cmp	r3, #0
 801125c:	db0d      	blt.n	801127a <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 801125e:	4a0c      	ldr	r2, [pc, #48]	; (8011290 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011266:	490a      	ldr	r1, [pc, #40]	; (8011290 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	00db      	lsls	r3, r3, #3
 801126c:	440b      	add	r3, r1
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	3b01      	subs	r3, #1
 8011276:	617b      	str	r3, [r7, #20]
 8011278:	e7ee      	b.n	8011258 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 801127a:	4b04      	ldr	r3, [pc, #16]	; (801128c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 801127c:	2200      	movs	r2, #0
 801127e:	601a      	str	r2, [r3, #0]
}
 8011280:	bf00      	nop
 8011282:	371c      	adds	r7, #28
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr
 801128c:	200008ac 	.word	0x200008ac
 8011290:	200008b0 	.word	0x200008b0

08011294 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2100      	movs	r1, #0
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7ff fe59 	bl	8010f58 <_ZN10TestPluginC1EPS_>
 80112a6:	4a04      	ldr	r2, [pc, #16]	; (80112b8 <_ZN14NullTestPluginC1Ev+0x24>)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	601a      	str	r2, [r3, #0]
{
}
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	4618      	mov	r0, r3
 80112b0:	3708      	adds	r7, #8
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	08027d0c 	.word	0x08027d0c

080112bc <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 80112bc:	b580      	push	{r7, lr}
 80112be:	af00      	add	r7, sp, #0
 80112c0:	4801      	ldr	r0, [pc, #4]	; (80112c8 <__tcf_0+0xc>)
 80112c2:	f000 f849 	bl	8011358 <_ZN14NullTestPluginD1Ev>
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	200009b0 	.word	0x200009b0

080112cc <_ZN14NullTestPlugin8instanceEv>:
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 80112d0:	4b12      	ldr	r3, [pc, #72]	; (801131c <_ZN14NullTestPlugin8instanceEv+0x50>)
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	f3bf 8f5b 	dmb	ish
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	f003 0301 	and.w	r3, r3, #1
 80112de:	2b00      	cmp	r3, #0
 80112e0:	bf0c      	ite	eq
 80112e2:	2301      	moveq	r3, #1
 80112e4:	2300      	movne	r3, #0
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d013      	beq.n	8011314 <_ZN14NullTestPlugin8instanceEv+0x48>
 80112ec:	480b      	ldr	r0, [pc, #44]	; (801131c <_ZN14NullTestPlugin8instanceEv+0x50>)
 80112ee:	f00d ffdb 	bl	801f2a8 <__cxa_guard_acquire>
 80112f2:	4603      	mov	r3, r0
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	bf14      	ite	ne
 80112f8:	2301      	movne	r3, #1
 80112fa:	2300      	moveq	r3, #0
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d008      	beq.n	8011314 <_ZN14NullTestPlugin8instanceEv+0x48>
 8011302:	4807      	ldr	r0, [pc, #28]	; (8011320 <_ZN14NullTestPlugin8instanceEv+0x54>)
 8011304:	f7ff ffc6 	bl	8011294 <_ZN14NullTestPluginC1Ev>
 8011308:	4804      	ldr	r0, [pc, #16]	; (801131c <_ZN14NullTestPlugin8instanceEv+0x50>)
 801130a:	f00d ffd9 	bl	801f2c0 <__cxa_guard_release>
 801130e:	4805      	ldr	r0, [pc, #20]	; (8011324 <_ZN14NullTestPlugin8instanceEv+0x58>)
 8011310:	f00d fffd 	bl	801f30e <atexit>
    return &_instance;
 8011314:	4b02      	ldr	r3, [pc, #8]	; (8011320 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8011316:	4618      	mov	r0, r3
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	200009c4 	.word	0x200009c4
 8011320:	200009b0 	.word	0x200009b0
 8011324:	080112bd 	.word	0x080112bd

08011328 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8011328:	b480      	push	{r7}
 801132a:	b085      	sub	sp, #20
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	607a      	str	r2, [r7, #4]
}
 8011334:	bf00      	nop
 8011336:	3714      	adds	r7, #20
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr

08011340 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8011340:	b480      	push	{r7}
 8011342:	b085      	sub	sp, #20
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	607a      	str	r2, [r7, #4]
}
 801134c:	bf00      	nop
 801134e:	3714      	adds	r7, #20
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr

08011358 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
 8011360:	4a05      	ldr	r2, [pc, #20]	; (8011378 <_ZN14NullTestPluginD1Ev+0x20>)
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	601a      	str	r2, [r3, #0]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4618      	mov	r0, r3
 801136a:	f7ff fe13 	bl	8010f94 <_ZN10TestPluginD1Ev>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4618      	mov	r0, r3
 8011372:	3708      	adds	r7, #8
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	08027d0c 	.word	0x08027d0c

0801137c <_ZN14NullTestPluginD0Ev>:
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6878      	ldr	r0, [r7, #4]
 8011386:	f7ff ffe7 	bl	8011358 <_ZN14NullTestPluginD1Ev>
 801138a:	2114      	movs	r1, #20
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7f8 fd1b 	bl	8009dc8 <_ZdlPvj>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4618      	mov	r0, r3
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 80113a4:	4a0f      	ldr	r2, [pc, #60]	; (80113e4 <_ZN12TestRegistryC1Ev+0x48>)
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	601a      	str	r2, [r3, #0]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2200      	movs	r2, #0
 80113ae:	605a      	str	r2, [r3, #4]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	609a      	str	r2, [r3, #8]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2200      	movs	r2, #0
 80113ba:	60da      	str	r2, [r3, #12]
 80113bc:	f7ff ff86 	bl	80112cc <_ZN14NullTestPlugin8instanceEv>
 80113c0:	4602      	mov	r2, r0
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	611a      	str	r2, [r3, #16]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2200      	movs	r2, #0
 80113ca:	751a      	strb	r2, [r3, #20]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2200      	movs	r2, #0
 80113d0:	619a      	str	r2, [r3, #24]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2200      	movs	r2, #0
 80113d6:	771a      	strb	r2, [r3, #28]
{
}
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	4618      	mov	r0, r3
 80113dc:	3708      	adds	r7, #8
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop
 80113e4:	08027dd8 	.word	0x08027dd8

080113e8 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 80113e8:	b480      	push	{r7}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	4a04      	ldr	r2, [pc, #16]	; (8011404 <_ZN12TestRegistryD1Ev+0x1c>)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	601a      	str	r2, [r3, #0]
{
}
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	4618      	mov	r0, r3
 80113fa:	370c      	adds	r7, #12
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr
 8011404:	08027dd8 	.word	0x08027dd8

08011408 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
}
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f7ff ffe9 	bl	80113e8 <_ZN12TestRegistryD1Ev>
 8011416:	2120      	movs	r1, #32
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7f8 fcd5 	bl	8009dc8 <_ZdlPvj>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	4618      	mov	r0, r3
 8011422:	3708      	adds	r7, #8
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	3308      	adds	r3, #8
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	687a      	ldr	r2, [r7, #4]
 801143c:	6852      	ldr	r2, [r2, #4]
 801143e:	4611      	mov	r1, r2
 8011440:	6838      	ldr	r0, [r7, #0]
 8011442:	4798      	blx	r3
 8011444:	4602      	mov	r2, r0
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	605a      	str	r2, [r3, #4]
}
 801144a:	bf00      	nop
 801144c:	3708      	adds	r7, #8
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}

08011452 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8011452:	b580      	push	{r7, lr}
 8011454:	b084      	sub	sp, #16
 8011456:	af00      	add	r7, sp, #0
 8011458:	6078      	str	r0, [r7, #4]
 801145a:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 801145c:	2301      	movs	r3, #1
 801145e:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	3308      	adds	r3, #8
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	6838      	ldr	r0, [r7, #0]
 801146a:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	60bb      	str	r3, [r7, #8]
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d05c      	beq.n	8011532 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	7d1b      	ldrb	r3, [r3, #20]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d005      	beq.n	801148c <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	3380      	adds	r3, #128	; 0x80
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	68b8      	ldr	r0, [r7, #8]
 801148a:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	7f1b      	ldrb	r3, [r3, #28]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d005      	beq.n	80114a0 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	3384      	adds	r3, #132	; 0x84
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	68b8      	ldr	r0, [r7, #8]
 801149e:	4798      	blx	r3

        if (groupStart) {
 80114a0:	7bfb      	ldrb	r3, [r7, #15]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d008      	beq.n	80114b8 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	3310      	adds	r3, #16
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	68b9      	ldr	r1, [r7, #8]
 80114b0:	6838      	ldr	r0, [r7, #0]
 80114b2:	4798      	blx	r3
            groupStart = false;
 80114b4:	2300      	movs	r3, #0
 80114b6:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3320      	adds	r3, #32
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	6838      	ldr	r0, [r7, #0]
 80114c2:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 80114c4:	683a      	ldr	r2, [r7, #0]
 80114c6:	68b9      	ldr	r1, [r7, #8]
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f000 fb79 	bl	8011bc0 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 80114ce:	4603      	mov	r3, r0
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d016      	beq.n	8011502 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	3318      	adds	r3, #24
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	68b9      	ldr	r1, [r7, #8]
 80114de:	6838      	ldr	r0, [r7, #0]
 80114e0:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	3390      	adds	r3, #144	; 0x90
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	6911      	ldr	r1, [r2, #16]
 80114ee:	683a      	ldr	r2, [r7, #0]
 80114f0:	68b8      	ldr	r0, [r7, #8]
 80114f2:	4798      	blx	r3
            result.currentTestEnded(test);
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	331c      	adds	r3, #28
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	68b9      	ldr	r1, [r7, #8]
 80114fe:	6838      	ldr	r0, [r7, #0]
 8011500:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 8011502:	68b9      	ldr	r1, [r7, #8]
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f000 fa5b 	bl	80119c0 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d008      	beq.n	8011522 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8011510:	2301      	movs	r3, #1
 8011512:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	3314      	adds	r3, #20
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	68b9      	ldr	r1, [r7, #8]
 801151e:	6838      	ldr	r0, [r7, #0]
 8011520:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	330c      	adds	r3, #12
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	68b8      	ldr	r0, [r7, #8]
 801152c:	4798      	blx	r3
 801152e:	60b8      	str	r0, [r7, #8]
 8011530:	e79f      	b.n	8011472 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	330c      	adds	r3, #12
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	6838      	ldr	r0, [r7, #0]
 801153c:	4798      	blx	r3
    currentRepetition_++;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	699b      	ldr	r3, [r3, #24]
 8011542:	1c5a      	adds	r2, r3, #1
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	619a      	str	r2, [r3, #24]
}
 8011548:	bf00      	nop
 801154a:	3710      	adds	r7, #16
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}

08011550 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8011550:	b590      	push	{r4, r7, lr}
 8011552:	b08f      	sub	sp, #60	; 0x3c
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 801155a:	f107 0314 	add.w	r3, r7, #20
 801155e:	4953      	ldr	r1, [pc, #332]	; (80116ac <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011560:	4618      	mov	r0, r3
 8011562:	f7fa ffe0 	bl	800c526 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	637b      	str	r3, [r7, #52]	; 0x34
 801156c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801156e:	2b00      	cmp	r3, #0
 8011570:	d04d      	beq.n	801160e <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 8011572:	f107 030c 	add.w	r3, r7, #12
 8011576:	494d      	ldr	r1, [pc, #308]	; (80116ac <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011578:	4618      	mov	r0, r3
 801157a:	f7fa ffd4 	bl	800c526 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 801157e:	f107 030c 	add.w	r3, r7, #12
 8011582:	494b      	ldr	r1, [pc, #300]	; (80116b0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011584:	4618      	mov	r0, r3
 8011586:	f7fb fc15 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 801158a:	f107 031c 	add.w	r3, r7, #28
 801158e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011590:	4618      	mov	r0, r3
 8011592:	f001 f9d2 	bl	801293a <_ZNK10UtestShell8getGroupEv>
 8011596:	f107 021c 	add.w	r2, r7, #28
 801159a:	f107 030c 	add.w	r3, r7, #12
 801159e:	4611      	mov	r1, r2
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7fb fbf5 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 80115a6:	f107 031c 	add.w	r3, r7, #28
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7fb fb73 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        gname += "#";
 80115b0:	f107 030c 	add.w	r3, r7, #12
 80115b4:	493e      	ldr	r1, [pc, #248]	; (80116b0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fb fbfc 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 80115bc:	f107 020c 	add.w	r2, r7, #12
 80115c0:	f107 0314 	add.w	r3, r7, #20
 80115c4:	4611      	mov	r1, r2
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fb f82b 	bl	800c622 <_ZNK12SimpleString8containsERKS_>
 80115cc:	4603      	mov	r3, r0
 80115ce:	f083 0301 	eor.w	r3, r3, #1
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d00d      	beq.n	80115f4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 80115d8:	f107 020c 	add.w	r2, r7, #12
 80115dc:	f107 0314 	add.w	r3, r7, #20
 80115e0:	4611      	mov	r1, r2
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7fb fbd4 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 80115e8:	f107 0314 	add.w	r3, r7, #20
 80115ec:	4931      	ldr	r1, [pc, #196]	; (80116b4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fb fbe0 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 80115f4:	f107 030c 	add.w	r3, r7, #12
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fb fb4c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80115fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	330c      	adds	r3, #12
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011608:	4798      	blx	r3
 801160a:	6378      	str	r0, [r7, #52]	; 0x34
 801160c:	e7ae      	b.n	801156c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 801160e:	f107 0314 	add.w	r3, r7, #20
 8011612:	4a26      	ldr	r2, [pc, #152]	; (80116ac <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011614:	4926      	ldr	r1, [pc, #152]	; (80116b0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011616:	4618      	mov	r0, r3
 8011618:	f7fb f99a 	bl	800c950 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 801161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011620:	4924      	ldr	r1, [pc, #144]	; (80116b4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8011622:	4618      	mov	r0, r3
 8011624:	f7fa ff7f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8011628:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801162c:	f107 0314 	add.w	r3, r7, #20
 8011630:	4611      	mov	r1, r2
 8011632:	4618      	mov	r0, r3
 8011634:	f7fb f874 	bl	800c720 <_ZNK12SimpleString8endsWithERKS_>
 8011638:	4603      	mov	r3, r0
 801163a:	461c      	mov	r4, r3
 801163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011640:	4618      	mov	r0, r3
 8011642:	f7fb fb28 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8011646:	2c00      	cmp	r4, #0
 8011648:	d01a      	beq.n	8011680 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 801164a:	f107 0314 	add.w	r3, r7, #20
 801164e:	4618      	mov	r0, r3
 8011650:	f7fb fb00 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 8011654:	4603      	mov	r3, r0
 8011656:	3b01      	subs	r3, #1
 8011658:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801165c:	f107 0114 	add.w	r1, r7, #20
 8011660:	2200      	movs	r2, #0
 8011662:	f7fb fc21 	bl	800cea8 <_ZNK12SimpleString9subStringEjj>
 8011666:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801166a:	f107 0314 	add.w	r3, r7, #20
 801166e:	4611      	mov	r1, r2
 8011670:	4618      	mov	r0, r3
 8011672:	f7fa ffc4 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 8011676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801167a:	4618      	mov	r0, r3
 801167c:	f7fb fb0b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	3338      	adds	r3, #56	; 0x38
 8011686:	681c      	ldr	r4, [r3, #0]
 8011688:	f107 0314 	add.w	r3, r7, #20
 801168c:	4618      	mov	r0, r3
 801168e:	f7fb fad5 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8011692:	4603      	mov	r3, r0
 8011694:	4619      	mov	r1, r3
 8011696:	6838      	ldr	r0, [r7, #0]
 8011698:	47a0      	blx	r4
    SimpleString groupList;
 801169a:	f107 0314 	add.w	r3, r7, #20
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fb faf9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80116a4:	bf00      	nop
 80116a6:	373c      	adds	r7, #60	; 0x3c
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd90      	pop	{r4, r7, pc}
 80116ac:	080246b0 	.word	0x080246b0
 80116b0:	080246b4 	.word	0x080246b4
 80116b4:	080246b8 	.word	0x080246b8

080116b8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 80116b8:	b590      	push	{r4, r7, lr}
 80116ba:	b091      	sub	sp, #68	; 0x44
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 80116c2:	f107 0314 	add.w	r3, r7, #20
 80116c6:	4964      	ldr	r1, [pc, #400]	; (8011858 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fa ff2c 	bl	800c526 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80116d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d06e      	beq.n	80117b8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 80116da:	683a      	ldr	r2, [r7, #0]
 80116dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f000 fa6e 	bl	8011bc0 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d05e      	beq.n	80117a8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 80116ea:	f107 030c 	add.w	r3, r7, #12
 80116ee:	495a      	ldr	r1, [pc, #360]	; (8011858 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7fa ff18 	bl	800c526 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 80116f6:	f107 030c 	add.w	r3, r7, #12
 80116fa:	4958      	ldr	r1, [pc, #352]	; (801185c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7fb fb59 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 8011702:	f107 031c 	add.w	r3, r7, #28
 8011706:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011708:	4618      	mov	r0, r3
 801170a:	f001 f916 	bl	801293a <_ZNK10UtestShell8getGroupEv>
 801170e:	f107 021c 	add.w	r2, r7, #28
 8011712:	f107 030c 	add.w	r3, r7, #12
 8011716:	4611      	mov	r1, r2
 8011718:	4618      	mov	r0, r3
 801171a:	f7fb fb39 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801171e:	f107 031c 	add.w	r3, r7, #28
 8011722:	4618      	mov	r0, r3
 8011724:	f7fb fab7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8011728:	f107 030c 	add.w	r3, r7, #12
 801172c:	494c      	ldr	r1, [pc, #304]	; (8011860 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 801172e:	4618      	mov	r0, r3
 8011730:	f7fb fb40 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 8011734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801173a:	4618      	mov	r0, r3
 801173c:	f001 f8ee 	bl	801291c <_ZNK10UtestShell7getNameEv>
 8011740:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011744:	f107 030c 	add.w	r3, r7, #12
 8011748:	4611      	mov	r1, r2
 801174a:	4618      	mov	r0, r3
 801174c:	f7fb fb20 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8011750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011754:	4618      	mov	r0, r3
 8011756:	f7fb fa9e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 801175a:	f107 030c 	add.w	r3, r7, #12
 801175e:	493f      	ldr	r1, [pc, #252]	; (801185c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8011760:	4618      	mov	r0, r3
 8011762:	f7fb fb27 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 8011766:	f107 020c 	add.w	r2, r7, #12
 801176a:	f107 0314 	add.w	r3, r7, #20
 801176e:	4611      	mov	r1, r2
 8011770:	4618      	mov	r0, r3
 8011772:	f7fa ff56 	bl	800c622 <_ZNK12SimpleString8containsERKS_>
 8011776:	4603      	mov	r3, r0
 8011778:	f083 0301 	eor.w	r3, r3, #1
 801177c:	b2db      	uxtb	r3, r3
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00d      	beq.n	801179e <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8011782:	f107 020c 	add.w	r2, r7, #12
 8011786:	f107 0314 	add.w	r3, r7, #20
 801178a:	4611      	mov	r1, r2
 801178c:	4618      	mov	r0, r3
 801178e:	f7fb faff 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8011792:	f107 0314 	add.w	r3, r7, #20
 8011796:	4933      	ldr	r1, [pc, #204]	; (8011864 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8011798:	4618      	mov	r0, r3
 801179a:	f7fb fb0b 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 801179e:	f107 030c 	add.w	r3, r7, #12
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fb fa77 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80117a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	330c      	adds	r3, #12
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80117b2:	4798      	blx	r3
 80117b4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80117b6:	e78d      	b.n	80116d4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 80117b8:	f107 0314 	add.w	r3, r7, #20
 80117bc:	4a26      	ldr	r2, [pc, #152]	; (8011858 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 80117be:	4927      	ldr	r1, [pc, #156]	; (801185c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7fb f8c5 	bl	800c950 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 80117c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80117ca:	4926      	ldr	r1, [pc, #152]	; (8011864 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7fa feaa 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80117d2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80117d6:	f107 0314 	add.w	r3, r7, #20
 80117da:	4611      	mov	r1, r2
 80117dc:	4618      	mov	r0, r3
 80117de:	f7fa ff9f 	bl	800c720 <_ZNK12SimpleString8endsWithERKS_>
 80117e2:	4603      	mov	r3, r0
 80117e4:	461c      	mov	r4, r3
 80117e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7fb fa53 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80117f0:	2c00      	cmp	r4, #0
 80117f2:	d01a      	beq.n	801182a <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 80117f4:	f107 0314 	add.w	r3, r7, #20
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7fb fa2b 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 80117fe:	4603      	mov	r3, r0
 8011800:	3b01      	subs	r3, #1
 8011802:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8011806:	f107 0114 	add.w	r1, r7, #20
 801180a:	2200      	movs	r2, #0
 801180c:	f7fb fb4c 	bl	800cea8 <_ZNK12SimpleString9subStringEjj>
 8011810:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011814:	f107 0314 	add.w	r3, r7, #20
 8011818:	4611      	mov	r1, r2
 801181a:	4618      	mov	r0, r3
 801181c:	f7fa feef 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 8011820:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011824:	4618      	mov	r0, r3
 8011826:	f7fb fa36 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	3338      	adds	r3, #56	; 0x38
 8011830:	681c      	ldr	r4, [r3, #0]
 8011832:	f107 0314 	add.w	r3, r7, #20
 8011836:	4618      	mov	r0, r3
 8011838:	f7fb fa00 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801183c:	4603      	mov	r3, r0
 801183e:	4619      	mov	r1, r3
 8011840:	6838      	ldr	r0, [r7, #0]
 8011842:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8011844:	f107 0314 	add.w	r3, r7, #20
 8011848:	4618      	mov	r0, r3
 801184a:	f7fb fa24 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801184e:	bf00      	nop
 8011850:	3744      	adds	r7, #68	; 0x44
 8011852:	46bd      	mov	sp, r7
 8011854:	bd90      	pop	{r4, r7, pc}
 8011856:	bf00      	nop
 8011858:	080246b0 	.word	0x080246b0
 801185c:	080246b4 	.word	0x080246b4
 8011860:	080246bc 	.word	0x080246bc
 8011864:	080246b8 	.word	0x080246b8

08011868 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 8011868:	b590      	push	{r4, r7, lr}
 801186a:	b091      	sub	sp, #68	; 0x44
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
 8011870:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 8011872:	f107 0314 	add.w	r3, r7, #20
 8011876:	494f      	ldr	r1, [pc, #316]	; (80119b4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8011878:	4618      	mov	r0, r3
 801187a:	f7fa fe54 	bl	800c526 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011886:	2b00      	cmp	r3, #0
 8011888:	d07d      	beq.n	8011986 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 801188a:	f107 030c 	add.w	r3, r7, #12
 801188e:	4949      	ldr	r1, [pc, #292]	; (80119b4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8011890:	4618      	mov	r0, r3
 8011892:	f7fa fe48 	bl	800c526 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 8011896:	f107 031c 	add.w	r3, r7, #28
 801189a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801189c:	4618      	mov	r0, r3
 801189e:	f001 f84c 	bl	801293a <_ZNK10UtestShell8getGroupEv>
 80118a2:	f107 021c 	add.w	r2, r7, #28
 80118a6:	f107 030c 	add.w	r3, r7, #12
 80118aa:	4611      	mov	r1, r2
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7fb fa6f 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 80118b2:	f107 031c 	add.w	r3, r7, #28
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fb f9ed 	bl	800cc96 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80118bc:	f107 030c 	add.w	r3, r7, #12
 80118c0:	493d      	ldr	r1, [pc, #244]	; (80119b8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fb fa76 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 80118c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118ce:	4618      	mov	r0, r3
 80118d0:	f001 f824 	bl	801291c <_ZNK10UtestShell7getNameEv>
 80118d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80118d8:	f107 030c 	add.w	r3, r7, #12
 80118dc:	4611      	mov	r1, r2
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fb fa56 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 80118e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7fb f9d4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80118ee:	f107 030c 	add.w	r3, r7, #12
 80118f2:	4931      	ldr	r1, [pc, #196]	; (80119b8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fb fa5d 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 80118fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80118fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011900:	4618      	mov	r0, r3
 8011902:	f001 f8dc 	bl	8012abe <_ZNK10UtestShell7getFileEv>
 8011906:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801190a:	f107 030c 	add.w	r3, r7, #12
 801190e:	4611      	mov	r1, r2
 8011910:	4618      	mov	r0, r3
 8011912:	f7fb fa3d 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8011916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801191a:	4618      	mov	r0, r3
 801191c:	f7fb f9bb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8011920:	f107 030c 	add.w	r3, r7, #12
 8011924:	4924      	ldr	r1, [pc, #144]	; (80119b8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8011926:	4618      	mov	r0, r3
 8011928:	f7fb fa44 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 801192c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801192e:	f001 f8d5 	bl	8012adc <_ZNK10UtestShell13getLineNumberEv>
 8011932:	4603      	mov	r3, r0
 8011934:	461a      	mov	r2, r3
 8011936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801193a:	4920      	ldr	r1, [pc, #128]	; (80119bc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 801193c:	4618      	mov	r0, r3
 801193e:	f7fb feb1 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 8011942:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011946:	f107 030c 	add.w	r3, r7, #12
 801194a:	4611      	mov	r1, r2
 801194c:	4618      	mov	r0, r3
 801194e:	f7fb fa1f 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8011952:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011956:	4618      	mov	r0, r3
 8011958:	f7fb f99d 	bl	800cc96 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 801195c:	f107 020c 	add.w	r2, r7, #12
 8011960:	f107 0314 	add.w	r3, r7, #20
 8011964:	4611      	mov	r1, r2
 8011966:	4618      	mov	r0, r3
 8011968:	f7fb fa12 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 801196c:	f107 030c 	add.w	r3, r7, #12
 8011970:	4618      	mov	r0, r3
 8011972:	f7fb f990 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	330c      	adds	r3, #12
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011980:	4798      	blx	r3
 8011982:	63f8      	str	r0, [r7, #60]	; 0x3c
 8011984:	e77e      	b.n	8011884 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	3338      	adds	r3, #56	; 0x38
 801198c:	681c      	ldr	r4, [r3, #0]
 801198e:	f107 0314 	add.w	r3, r7, #20
 8011992:	4618      	mov	r0, r3
 8011994:	f7fb f952 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8011998:	4603      	mov	r3, r0
 801199a:	4619      	mov	r1, r3
 801199c:	6838      	ldr	r0, [r7, #0]
 801199e:	47a0      	blx	r4
    SimpleString testLocations;
 80119a0:	f107 0314 	add.w	r3, r7, #20
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7fb f976 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80119aa:	bf00      	nop
 80119ac:	3744      	adds	r7, #68	; 0x44
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd90      	pop	{r4, r7, pc}
 80119b2:	bf00      	nop
 80119b4:	080246b0 	.word	0x080246b0
 80119b8:	080246bc 	.word	0x080246bc
 80119bc:	080246c0 	.word	0x080246c0

080119c0 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 80119c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119c2:	b087      	sub	sp, #28
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 80119ca:	2400      	movs	r4, #0
 80119cc:	2500      	movs	r5, #0
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d028      	beq.n	8011a26 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	330c      	adds	r3, #12
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	6838      	ldr	r0, [r7, #0]
 80119de:	4798      	blx	r3
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d01f      	beq.n	8011a26 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80119e6:	f107 0308 	add.w	r3, r7, #8
 80119ea:	6839      	ldr	r1, [r7, #0]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f000 ffa4 	bl	801293a <_ZNK10UtestShell8getGroupEv>
 80119f2:	2401      	movs	r4, #1
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	330c      	adds	r3, #12
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	6838      	ldr	r0, [r7, #0]
 80119fe:	4798      	blx	r3
 8011a00:	4602      	mov	r2, r0
 8011a02:	f107 0310 	add.w	r3, r7, #16
 8011a06:	4611      	mov	r1, r2
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f000 ff96 	bl	801293a <_ZNK10UtestShell8getGroupEv>
 8011a0e:	2501      	movs	r5, #1
 8011a10:	f107 0210 	add.w	r2, r7, #16
 8011a14:	f107 0308 	add.w	r3, r7, #8
 8011a18:	4611      	mov	r1, r2
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fb f98c 	bl	800cd38 <_ZneRK12SimpleStringS1_>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d001      	beq.n	8011a2a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 8011a26:	2601      	movs	r6, #1
 8011a28:	e000      	b.n	8011a2c <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8011a2a:	2600      	movs	r6, #0
 8011a2c:	2d00      	cmp	r5, #0
 8011a2e:	d004      	beq.n	8011a3a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8011a30:	f107 0310 	add.w	r3, r7, #16
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7fb f92e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8011a3a:	2c00      	cmp	r4, #0
 8011a3c:	d004      	beq.n	8011a48 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8011a3e:	f107 0308 	add.w	r3, r7, #8
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fb f927 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8011a48:	4633      	mov	r3, r6
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	371c      	adds	r7, #28
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011a52 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b082      	sub	sp, #8
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	685b      	ldr	r3, [r3, #4]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d00a      	beq.n	8011a78 <_ZN12TestRegistry10countTestsEv+0x26>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	685a      	ldr	r2, [r3, #4]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	3310      	adds	r3, #16
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	4610      	mov	r0, r2
 8011a72:	4798      	blx	r3
 8011a74:	4603      	mov	r3, r0
 8011a76:	e000      	b.n	8011a7a <_ZN12TestRegistry10countTestsEv+0x28>
 8011a78:	2300      	movs	r3, #0
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3708      	adds	r7, #8
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
	...

08011a84 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8011a84:	b580      	push	{r7, lr}
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	4801      	ldr	r0, [pc, #4]	; (8011a90 <__tcf_0+0xc>)
 8011a8a:	f7ff fcad 	bl	80113e8 <_ZN12TestRegistryD1Ev>
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	200009cc 	.word	0x200009cc

08011a94 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8011a98:	4b15      	ldr	r3, [pc, #84]	; (8011af0 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	f3bf 8f5b 	dmb	ish
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	f003 0301 	and.w	r3, r3, #1
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	bf0c      	ite	eq
 8011aaa:	2301      	moveq	r3, #1
 8011aac:	2300      	movne	r3, #0
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d013      	beq.n	8011adc <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8011ab4:	480e      	ldr	r0, [pc, #56]	; (8011af0 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011ab6:	f00d fbf7 	bl	801f2a8 <__cxa_guard_acquire>
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	bf14      	ite	ne
 8011ac0:	2301      	movne	r3, #1
 8011ac2:	2300      	moveq	r3, #0
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d008      	beq.n	8011adc <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8011aca:	480a      	ldr	r0, [pc, #40]	; (8011af4 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8011acc:	f7ff fc66 	bl	801139c <_ZN12TestRegistryC1Ev>
 8011ad0:	4807      	ldr	r0, [pc, #28]	; (8011af0 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8011ad2:	f00d fbf5 	bl	801f2c0 <__cxa_guard_release>
 8011ad6:	4808      	ldr	r0, [pc, #32]	; (8011af8 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8011ad8:	f00d fc19 	bl	801f30e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8011adc:	4b07      	ldr	r3, [pc, #28]	; (8011afc <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d002      	beq.n	8011aea <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8011ae4:	4b05      	ldr	r3, [pc, #20]	; (8011afc <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	e000      	b.n	8011aec <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8011aea:	4b02      	ldr	r3, [pc, #8]	; (8011af4 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	bd80      	pop	{r7, pc}
 8011af0:	200009ec 	.word	0x200009ec
 8011af4:	200009cc 	.word	0x200009cc
 8011af8:	08011a85 	.word	0x08011a85
 8011afc:	200009c8 	.word	0x200009c8

08011b00 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b083      	sub	sp, #12
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8011b0a:	4a04      	ldr	r2, [pc, #16]	; (8011b1c <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	6013      	str	r3, [r2, #0]
}
 8011b10:	bf00      	nop
 8011b12:	370c      	adds	r7, #12
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr
 8011b1c:	200009c8 	.word	0x200009c8

08011b20 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d00a      	beq.n	8011b46 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	685a      	ldr	r2, [r3, #4]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	330c      	adds	r3, #12
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4610      	mov	r0, r2
 8011b40:	4798      	blx	r3
 8011b42:	4603      	mov	r3, r0
 8011b44:	e000      	b.n	8011b48 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 8011b46:	2300      	movs	r3, #0
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	6053      	str	r3, [r2, #4]

}
 8011b4c:	bf00      	nop
 8011b4e:	3708      	adds	r7, #8
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	683a      	ldr	r2, [r7, #0]
 8011b62:	609a      	str	r2, [r3, #8]
}
 8011b64:	bf00      	nop
 8011b66:	370c      	adds	r7, #12
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr

08011b70 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b083      	sub	sp, #12
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	683a      	ldr	r2, [r7, #0]
 8011b7e:	60da      	str	r2, [r3, #12]
}
 8011b80:	bf00      	nop
 8011b82:	370c      	adds	r7, #12
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr

08011b8c <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2201      	movs	r2, #1
 8011b98:	771a      	strb	r2, [r3, #28]
}
 8011b9a:	bf00      	nop
 8011b9c:	370c      	adds	r7, #12
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba4:	4770      	bx	lr

08011ba6 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8011ba6:	b480      	push	{r7}
 8011ba8:	b083      	sub	sp, #12
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	751a      	strb	r2, [r3, #20]
}
 8011bb4:	bf00      	nop
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	60f8      	str	r0, [r7, #12]
 8011bc8:	60b9      	str	r1, [r7, #8]
 8011bca:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	68d9      	ldr	r1, [r3, #12]
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	689b      	ldr	r3, [r3, #8]
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	68b8      	ldr	r0, [r7, #8]
 8011bd8:	f000 ffbb 	bl	8012b52 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d001      	beq.n	8011be6 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8011be2:	2301      	movs	r3, #1
 8011be4:	e006      	b.n	8011bf4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	332c      	adds	r3, #44	; 0x2c
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	4798      	blx	r3
        return false;
 8011bf2:	2300      	movs	r3, #0
    }
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3710      	adds	r7, #16
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}

08011bfc <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8011c04:	f7ff fb62 	bl	80112cc <_ZN14NullTestPlugin8instanceEv>
 8011c08:	4602      	mov	r2, r0
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	611a      	str	r2, [r3, #16]
}
 8011c0e:	bf00      	nop
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}

08011c16 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8011c16:	b580      	push	{r7, lr}
 8011c18:	b082      	sub	sp, #8
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
 8011c1e:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	3324      	adds	r3, #36	; 0x24
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	6912      	ldr	r2, [r2, #16]
 8011c2c:	4611      	mov	r1, r2
 8011c2e:	6838      	ldr	r0, [r7, #0]
 8011c30:	4798      	blx	r3
 8011c32:	4602      	mov	r2, r0
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	611a      	str	r2, [r3, #16]
}
 8011c38:	bf00      	nop
 8011c3a:	3708      	adds	r7, #8
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8011c40:	b480      	push	{r7}
 8011c42:	b083      	sub	sp, #12
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	691b      	ldr	r3, [r3, #16]
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	370c      	adds	r7, #12
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	691b      	ldr	r3, [r3, #16]
 8011c66:	6839      	ldr	r1, [r7, #0]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7ff fa52 	bl	8011112 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8011c6e:	4603      	mov	r3, r0
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3708      	adds	r7, #8
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	691a      	ldr	r2, [r3, #16]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	691b      	ldr	r3, [r3, #16]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	3328      	adds	r3, #40	; 0x28
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	4610      	mov	r0, r2
 8011c94:	4798      	blx	r3
 8011c96:	4602      	mov	r2, r0
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	691b      	ldr	r3, [r3, #16]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	bf0c      	ite	eq
 8011ca0:	2301      	moveq	r3, #1
 8011ca2:	2300      	movne	r3, #0
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d00b      	beq.n	8011cc2 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	691a      	ldr	r2, [r3, #16]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	691b      	ldr	r3, [r3, #16]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	332c      	adds	r3, #44	; 0x2c
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	4610      	mov	r0, r2
 8011cba:	4798      	blx	r3
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	691b      	ldr	r3, [r3, #16]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7ff fa17 	bl	80110fa <_ZN10TestPlugin7getNameEv>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	6839      	ldr	r1, [r7, #0]
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7fa ffec 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d00b      	beq.n	8011cf4 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	691a      	ldr	r2, [r3, #16]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	691b      	ldr	r3, [r3, #16]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	332c      	adds	r3, #44	; 0x2c
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	4610      	mov	r0, r2
 8011cec:	4798      	blx	r3
 8011cee:	4602      	mov	r2, r0
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	691a      	ldr	r2, [r3, #16]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	691b      	ldr	r3, [r3, #16]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	3328      	adds	r3, #40	; 0x28
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	6839      	ldr	r1, [r7, #0]
 8011d04:	4610      	mov	r0, r2
 8011d06:	4798      	blx	r3
}
 8011d08:	bf00      	nop
 8011d0a:	3708      	adds	r7, #8
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}

08011d10 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
    int count = 0;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	691b      	ldr	r3, [r3, #16]
 8011d20:	60bb      	str	r3, [r7, #8]
 8011d22:	f7ff fad3 	bl	80112cc <_ZN14NullTestPlugin8instanceEv>
 8011d26:	4602      	mov	r2, r0
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	bf14      	ite	ne
 8011d2e:	2301      	movne	r3, #1
 8011d30:	2300      	moveq	r3, #0
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d00a      	beq.n	8011d4e <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	332c      	adds	r3, #44	; 0x2c
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	68b8      	ldr	r0, [r7, #8]
 8011d48:	4798      	blx	r3
 8011d4a:	60b8      	str	r0, [r7, #8]
 8011d4c:	e7e9      	b.n	8011d22 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3710      	adds	r7, #16
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b083      	sub	sp, #12
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
    return tests_;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	685b      	ldr	r3, [r3, #4]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	370c      	adds	r7, #12
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr

08011d70 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	334c      	adds	r3, #76	; 0x4c
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	4798      	blx	r3
 8011d86:	4602      	mov	r2, r0
 8011d88:	f107 0308 	add.w	r3, r7, #8
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f002 f8f8 	bl	8013f84 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8011d94:	f107 0308 	add.w	r3, r7, #8
 8011d98:	6839      	ldr	r1, [r7, #0]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f002 f980 	bl	80140a0 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8011da0:	f107 0308 	add.w	r3, r7, #8
 8011da4:	4618      	mov	r0, r3
 8011da6:	f002 fa13 	bl	80141d0 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8011daa:	4602      	mov	r2, r0
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8011db0:	f107 0308 	add.w	r3, r7, #8
 8011db4:	4618      	mov	r0, r3
 8011db6:	f002 f939 	bl	801402c <_ZN22UtestShellPointerArrayD1Ev>
}
 8011dba:	bf00      	nop
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}

08011dc2 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8011dc2:	b580      	push	{r7, lr}
 8011dc4:	b084      	sub	sp, #16
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	334c      	adds	r3, #76	; 0x4c
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	4798      	blx	r3
 8011dd6:	4602      	mov	r2, r0
 8011dd8:	f107 0308 	add.w	r3, r7, #8
 8011ddc:	4611      	mov	r1, r2
 8011dde:	4618      	mov	r0, r3
 8011de0:	f002 f8d0 	bl	8013f84 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8011de4:	f107 0308 	add.w	r3, r7, #8
 8011de8:	4618      	mov	r0, r3
 8011dea:	f002 f995 	bl	8014118 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8011dee:	f107 0308 	add.w	r3, r7, #8
 8011df2:	4618      	mov	r0, r3
 8011df4:	f002 f9ec 	bl	80141d0 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8011df8:	4602      	mov	r2, r0
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8011dfe:	f107 0308 	add.w	r3, r7, #8
 8011e02:	4618      	mov	r0, r3
 8011e04:	f002 f912 	bl	801402c <_ZN22UtestShellPointerArrayD1Ev>
}
 8011e08:	bf00      	nop
 8011e0a:	3710      	adds	r7, #16
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00b      	beq.n	8011e3e <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	330c      	adds	r3, #12
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	4798      	blx	r3
 8011e32:	4602      	mov	r2, r0
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d001      	beq.n	8011e3e <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	e000      	b.n	8011e40 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8011e3e:	2300      	movs	r3, #0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d007      	beq.n	8011e54 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	330c      	adds	r3, #12
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	68f8      	ldr	r0, [r7, #12]
 8011e4e:	4798      	blx	r3
 8011e50:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8011e52:	e7e5      	b.n	8011e20 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8011e54:	68fb      	ldr	r3, [r7, #12]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 8011e5e:	b590      	push	{r4, r7, lr}
 8011e60:	b087      	sub	sp, #28
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
 8011e66:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	617b      	str	r3, [r7, #20]
    while (current) {
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d01e      	beq.n	8011eb2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8011e74:	f107 030c 	add.w	r3, r7, #12
 8011e78:	6979      	ldr	r1, [r7, #20]
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f000 fd4e 	bl	801291c <_ZNK10UtestShell7getNameEv>
 8011e80:	f107 030c 	add.w	r3, r7, #12
 8011e84:	6839      	ldr	r1, [r7, #0]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7fa ff11 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	461c      	mov	r4, r3
 8011e90:	f107 030c 	add.w	r3, r7, #12
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7fa fefe 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8011e9a:	2c00      	cmp	r4, #0
 8011e9c:	d001      	beq.n	8011ea2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	e008      	b.n	8011eb4 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	330c      	adds	r3, #12
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	6978      	ldr	r0, [r7, #20]
 8011eac:	4798      	blx	r3
 8011eae:	6178      	str	r0, [r7, #20]
    while (current) {
 8011eb0:	e7dd      	b.n	8011e6e <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8011eb2:	2300      	movs	r3, #0
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	371c      	adds	r7, #28
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd90      	pop	{r4, r7, pc}

08011ebc <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8011ebc:	b590      	push	{r4, r7, lr}
 8011ebe:	b087      	sub	sp, #28
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	617b      	str	r3, [r7, #20]
    while (current) {
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d01e      	beq.n	8011f10 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8011ed2:	f107 030c 	add.w	r3, r7, #12
 8011ed6:	6979      	ldr	r1, [r7, #20]
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f000 fd2e 	bl	801293a <_ZNK10UtestShell8getGroupEv>
 8011ede:	f107 030c 	add.w	r3, r7, #12
 8011ee2:	6839      	ldr	r1, [r7, #0]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7fa fee2 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8011eea:	4603      	mov	r3, r0
 8011eec:	461c      	mov	r4, r3
 8011eee:	f107 030c 	add.w	r3, r7, #12
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7fa fecf 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8011ef8:	2c00      	cmp	r4, #0
 8011efa:	d001      	beq.n	8011f00 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8011efc:	697b      	ldr	r3, [r7, #20]
 8011efe:	e008      	b.n	8011f12 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	330c      	adds	r3, #12
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	6978      	ldr	r0, [r7, #20]
 8011f0a:	4798      	blx	r3
 8011f0c:	6178      	str	r0, [r7, #20]
    while (current) {
 8011f0e:	e7dd      	b.n	8011ecc <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8011f10:	2300      	movs	r3, #0
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	371c      	adds	r7, #28
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd90      	pop	{r4, r7, pc}
	...

08011f1c <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8011f26:	4a18      	ldr	r2, [pc, #96]	; (8011f88 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	601a      	str	r2, [r3, #0]
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	683a      	ldr	r2, [r7, #0]
 8011f30:	605a      	str	r2, [r3, #4]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2200      	movs	r2, #0
 8011f36:	609a      	str	r2, [r3, #8]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	60da      	str	r2, [r3, #12]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2200      	movs	r2, #0
 8011f42:	611a      	str	r2, [r3, #16]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2200      	movs	r2, #0
 8011f48:	615a      	str	r2, [r3, #20]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	619a      	str	r2, [r3, #24]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2200      	movs	r2, #0
 8011f54:	61da      	str	r2, [r3, #28]
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	621a      	str	r2, [r3, #32]
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	625a      	str	r2, [r3, #36]	; 0x24
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2200      	movs	r2, #0
 8011f66:	629a      	str	r2, [r3, #40]	; 0x28
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2200      	movs	r2, #0
 8011f72:	631a      	str	r2, [r3, #48]	; 0x30
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2200      	movs	r2, #0
 8011f78:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	370c      	adds	r7, #12
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr
 8011f88:	08027e44 	.word	0x08027e44

08011f8c <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8011f8c:	b480      	push	{r7}
 8011f8e:	b083      	sub	sp, #12
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	4a04      	ldr	r2, [pc, #16]	; (8011fa8 <_ZN10TestResultD1Ev+0x1c>)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	601a      	str	r2, [r3, #0]
{
}
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr
 8011fa8:	08027e44 	.word	0x08027e44

08011fac <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
}
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f7ff ffe9 	bl	8011f8c <_ZN10TestResultD1Ev>
 8011fba:	2138      	movs	r1, #56	; 0x38
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f7f7 ff03 	bl	8009dc8 <_ZdlPvj>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	3708      	adds	r7, #8
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	685a      	ldr	r2, [r3, #4]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	3318      	adds	r3, #24
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	6839      	ldr	r1, [r7, #0]
 8011fe6:	4610      	mov	r0, r2
 8011fe8:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8011fea:	4b05      	ldr	r3, [pc, #20]	; (8012000 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	4798      	blx	r3
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011ff8:	bf00      	nop
 8011ffa:	3708      	adds	r7, #8
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}
 8012000:	200000a8 	.word	0x200000a8

08012004 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 801200e:	4b0c      	ldr	r3, [pc, #48]	; (8012040 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	4798      	blx	r3
 8012014:	4603      	mov	r3, r0
 8012016:	461a      	mov	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801201c:	1ad2      	subs	r2, r2, r3
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	685a      	ldr	r2, [r3, #4]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	331c      	adds	r3, #28
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	6879      	ldr	r1, [r7, #4]
 8012032:	4610      	mov	r0, r2
 8012034:	4798      	blx	r3
}
 8012036:	bf00      	nop
 8012038:	3708      	adds	r7, #8
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	bf00      	nop
 8012040:	200000a8 	.word	0x200000a8

08012044 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	685a      	ldr	r2, [r3, #4]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	3310      	adds	r3, #16
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	6839      	ldr	r1, [r7, #0]
 801205e:	4610      	mov	r0, r2
 8012060:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012062:	4b05      	ldr	r3, [pc, #20]	; (8012078 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4798      	blx	r3
 8012068:	4603      	mov	r3, r0
 801206a:	461a      	mov	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012070:	bf00      	nop
 8012072:	3708      	adds	r7, #8
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	200000a8 	.word	0x200000a8

0801207c <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b082      	sub	sp, #8
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	685a      	ldr	r2, [r3, #4]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	332c      	adds	r3, #44	; 0x2c
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	6839      	ldr	r1, [r7, #0]
 8012096:	4610      	mov	r0, r2
 8012098:	4798      	blx	r3
}
 801209a:	bf00      	nop
 801209c:	3708      	adds	r7, #8
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 80120a2:	b580      	push	{r7, lr}
 80120a4:	b082      	sub	sp, #8
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
 80120aa:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	685a      	ldr	r2, [r3, #4]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	3348      	adds	r3, #72	; 0x48
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	6839      	ldr	r1, [r7, #0]
 80120bc:	4610      	mov	r0, r2
 80120be:	4798      	blx	r3
}
 80120c0:	bf00      	nop
 80120c2:	3708      	adds	r7, #8
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 80120d2:	4b0c      	ldr	r3, [pc, #48]	; (8012104 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	4798      	blx	r3
 80120d8:	4603      	mov	r3, r0
 80120da:	461a      	mov	r2, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120e0:	1ad2      	subs	r2, r2, r3
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	685a      	ldr	r2, [r3, #4]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	3314      	adds	r3, #20
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	6879      	ldr	r1, [r7, #4]
 80120f6:	4610      	mov	r0, r2
 80120f8:	4798      	blx	r3

}
 80120fa:	bf00      	nop
 80120fc:	3708      	adds	r7, #8
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop
 8012104:	200000a8 	.word	0x200000a8

08012108 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	685a      	ldr	r2, [r3, #4]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	333c      	adds	r3, #60	; 0x3c
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	6839      	ldr	r1, [r7, #0]
 8012122:	4610      	mov	r0, r2
 8012124:	4798      	blx	r3
    failureCount_++;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	695b      	ldr	r3, [r3, #20]
 801212a:	1c5a      	adds	r2, r3, #1
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	615a      	str	r2, [r3, #20]
}
 8012130:	bf00      	nop
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
    testCount_++;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	689b      	ldr	r3, [r3, #8]
 8012144:	1c5a      	adds	r2, r3, #1
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	609a      	str	r2, [r3, #8]
}
 801214a:	bf00      	nop
 801214c:	370c      	adds	r7, #12
 801214e:	46bd      	mov	sp, r7
 8012150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012154:	4770      	bx	lr

08012156 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8012156:	b480      	push	{r7}
 8012158:	b083      	sub	sp, #12
 801215a:	af00      	add	r7, sp, #0
 801215c:	6078      	str	r0, [r7, #4]
    runCount_++;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	1c5a      	adds	r2, r3, #1
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	60da      	str	r2, [r3, #12]
}
 8012168:	bf00      	nop
 801216a:	370c      	adds	r7, #12
 801216c:	46bd      	mov	sp, r7
 801216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012172:	4770      	bx	lr

08012174 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8012174:	b480      	push	{r7}
 8012176:	b083      	sub	sp, #12
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
    checkCount_++;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	691b      	ldr	r3, [r3, #16]
 8012180:	1c5a      	adds	r2, r3, #1
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	611a      	str	r2, [r3, #16]
}
 8012186:	bf00      	nop
 8012188:	370c      	adds	r7, #12
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr

08012192 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8012192:	b480      	push	{r7}
 8012194:	b083      	sub	sp, #12
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	699b      	ldr	r3, [r3, #24]
 801219e:	1c5a      	adds	r2, r3, #1
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	619a      	str	r2, [r3, #24]
}
 80121a4:	bf00      	nop
 80121a6:	370c      	adds	r7, #12
 80121a8:	46bd      	mov	sp, r7
 80121aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ae:	4770      	bx	lr

080121b0 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 80121b0:	b480      	push	{r7}
 80121b2:	b083      	sub	sp, #12
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	69db      	ldr	r3, [r3, #28]
 80121bc:	1c5a      	adds	r2, r3, #1
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	61da      	str	r2, [r3, #28]
}
 80121c2:	bf00      	nop
 80121c4:	370c      	adds	r7, #12
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr
	...

080121d0 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80121d8:	4b09      	ldr	r3, [pc, #36]	; (8012200 <_ZN10TestResult12testsStartedEv+0x30>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	4798      	blx	r3
 80121de:	4603      	mov	r3, r0
 80121e0:	461a      	mov	r2, r3
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	685a      	ldr	r2, [r3, #4]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	3308      	adds	r3, #8
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	4610      	mov	r0, r2
 80121f6:	4798      	blx	r3
}
 80121f8:	bf00      	nop
 80121fa:	3708      	adds	r7, #8
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	200000a8 	.word	0x200000a8

08012204 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b084      	sub	sp, #16
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 801220c:	4b0c      	ldr	r3, [pc, #48]	; (8012240 <_ZN10TestResult10testsEndedEv+0x3c>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	4798      	blx	r3
 8012212:	4603      	mov	r3, r0
 8012214:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	1ad2      	subs	r2, r2, r3
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	685a      	ldr	r2, [r3, #4]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	330c      	adds	r3, #12
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	6879      	ldr	r1, [r7, #4]
 8012232:	4610      	mov	r0, r2
 8012234:	4798      	blx	r3
}
 8012236:	bf00      	nop
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	200000a8 	.word	0x200000a8

08012244 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6a1b      	ldr	r3, [r3, #32]
}
 8012250:	4618      	mov	r0, r3
 8012252:	370c      	adds	r7, #12
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr

0801225c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 801225c:	b480      	push	{r7}
 801225e:	b083      	sub	sp, #12
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8012268:	4618      	mov	r0, r3
 801226a:	370c      	adds	r7, #12
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr

08012274 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8012280:	4618      	mov	r0, r3
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228a:	4770      	bx	lr

0801228c <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 801228c:	b590      	push	{r4, r7, lr}
 801228e:	b087      	sub	sp, #28
 8012290:	af00      	add	r7, sp, #0
 8012292:	ed87 0b04 	vstr	d0, [r7, #16]
 8012296:	ed87 1b02 	vstr	d1, [r7, #8]
 801229a:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 801229e:	4b2c      	ldr	r3, [pc, #176]	; (8012350 <_Z13doubles_equalddd+0xc4>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	ed97 0b04 	vldr	d0, [r7, #16]
 80122a6:	4798      	blx	r3
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d10f      	bne.n	80122ce <_Z13doubles_equalddd+0x42>
 80122ae:	4b28      	ldr	r3, [pc, #160]	; (8012350 <_Z13doubles_equalddd+0xc4>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	ed97 0b02 	vldr	d0, [r7, #8]
 80122b6:	4798      	blx	r3
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d107      	bne.n	80122ce <_Z13doubles_equalddd+0x42>
 80122be:	4b24      	ldr	r3, [pc, #144]	; (8012350 <_Z13doubles_equalddd+0xc4>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	ed97 0b00 	vldr	d0, [r7]
 80122c6:	4798      	blx	r3
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d001      	beq.n	80122d2 <_Z13doubles_equalddd+0x46>
 80122ce:	2301      	movs	r3, #1
 80122d0:	e000      	b.n	80122d4 <_Z13doubles_equalddd+0x48>
 80122d2:	2300      	movs	r3, #0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d001      	beq.n	80122dc <_Z13doubles_equalddd+0x50>
        return false;
 80122d8:	2300      	movs	r3, #0
 80122da:	e035      	b.n	8012348 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 80122dc:	4b1d      	ldr	r3, [pc, #116]	; (8012354 <_Z13doubles_equalddd+0xc8>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	ed97 0b04 	vldr	d0, [r7, #16]
 80122e4:	4798      	blx	r3
 80122e6:	4603      	mov	r3, r0
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d009      	beq.n	8012300 <_Z13doubles_equalddd+0x74>
 80122ec:	4b19      	ldr	r3, [pc, #100]	; (8012354 <_Z13doubles_equalddd+0xc8>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	ed97 0b02 	vldr	d0, [r7, #8]
 80122f4:	4798      	blx	r3
 80122f6:	4603      	mov	r3, r0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d001      	beq.n	8012300 <_Z13doubles_equalddd+0x74>
 80122fc:	2301      	movs	r3, #1
 80122fe:	e000      	b.n	8012302 <_Z13doubles_equalddd+0x76>
 8012300:	2300      	movs	r3, #0
 8012302:	2b00      	cmp	r3, #0
 8012304:	d001      	beq.n	801230a <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8012306:	2301      	movs	r3, #1
 8012308:	e01e      	b.n	8012348 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 801230a:	4b13      	ldr	r3, [pc, #76]	; (8012358 <_Z13doubles_equalddd+0xcc>)
 801230c:	681c      	ldr	r4, [r3, #0]
 801230e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012312:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012316:	f7ed fff7 	bl	8000308 <__aeabi_dsub>
 801231a:	4602      	mov	r2, r0
 801231c:	460b      	mov	r3, r1
 801231e:	ec43 2b17 	vmov	d7, r2, r3
 8012322:	eeb0 0a47 	vmov.f32	s0, s14
 8012326:	eef0 0a67 	vmov.f32	s1, s15
 801232a:	47a0      	blx	r4
 801232c:	ec53 2b10 	vmov	r2, r3, d0
 8012330:	2101      	movs	r1, #1
 8012332:	460c      	mov	r4, r1
 8012334:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012338:	f7ee fa12 	bl	8000760 <__aeabi_dcmpge>
 801233c:	4603      	mov	r3, r0
 801233e:	2b00      	cmp	r3, #0
 8012340:	d101      	bne.n	8012346 <_Z13doubles_equalddd+0xba>
 8012342:	2300      	movs	r3, #0
 8012344:	461c      	mov	r4, r3
 8012346:	b2e3      	uxtb	r3, r4
}
 8012348:	4618      	mov	r0, r3
 801234a:	371c      	adds	r7, #28
 801234c:	46bd      	mov	sp, r7
 801234e:	bd90      	pop	{r4, r7, pc}
 8012350:	200000e8 	.word	0x200000e8
 8012354:	200000ec 	.word	0x200000ec
 8012358:	200000dc 	.word	0x200000dc

0801235c <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 801235c:	b480      	push	{r7}
 801235e:	b083      	sub	sp, #12
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	332c      	adds	r3, #44	; 0x2c
    }
 8012368:	4618      	mov	r0, r3
 801236a:	370c      	adds	r7, #12
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
    {
 801237c:	4a0a      	ldr	r2, [pc, #40]	; (80123a8 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	601a      	str	r2, [r3, #0]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	332c      	adds	r3, #44	; 0x2c
 8012386:	4618      	mov	r0, r3
 8012388:	f7ff fe00 	bl	8011f8c <_ZN10TestResultD1Ev>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	331c      	adds	r3, #28
 8012390:	4618      	mov	r0, r3
 8012392:	f7f6 f815 	bl	80083c0 <_ZN17ConsoleTestOutputD1Ev>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	4618      	mov	r0, r3
 801239a:	f000 f943 	bl	8012624 <_ZN10UtestShellD1Ev>
    }
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4618      	mov	r0, r3
 80123a2:	3708      	adds	r7, #8
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	08027e8c 	.word	0x08027e8c

080123ac <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
    }
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f7ff ffdd 	bl	8012374 <_ZN22OutsideTestRunnerUTestD1Ev>
 80123ba:	2164      	movs	r1, #100	; 0x64
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f7f7 fd03 	bl	8009dc8 <_ZdlPvj>
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	4618      	mov	r0, r3
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b084      	sub	sp, #16
 80123d0:	af02      	add	r7, sp, #8
 80123d2:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	2300      	movs	r3, #0
 80123d8:	9300      	str	r3, [sp, #0]
 80123da:	4b0d      	ldr	r3, [pc, #52]	; (8012410 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 80123dc:	4a0d      	ldr	r2, [pc, #52]	; (8012414 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 80123de:	490e      	ldr	r1, [pc, #56]	; (8012418 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 80123e0:	f000 f8f8 	bl	80125d4 <_ZN10UtestShellC1EPKcS1_S1_j>
 80123e4:	4a0d      	ldr	r2, [pc, #52]	; (801241c <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	601a      	str	r2, [r3, #0]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	331c      	adds	r3, #28
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7f5 ffd4 	bl	800839c <_ZN17ConsoleTestOutputC1Ev>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	331c      	adds	r3, #28
 80123fe:	4619      	mov	r1, r3
 8012400:	4610      	mov	r0, r2
 8012402:	f7ff fd8b 	bl	8011f1c <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	4618      	mov	r0, r3
 801240a:	3708      	adds	r7, #8
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	080246c4 	.word	0x080246c4
 8012414:	080246d4 	.word	0x080246d4
 8012418:	08024714 	.word	0x08024714
 801241c:	08027e8c 	.word	0x08027e8c

08012420 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8012420:	b580      	push	{r7, lr}
 8012422:	af00      	add	r7, sp, #0
 8012424:	4801      	ldr	r0, [pc, #4]	; (801242c <__tcf_0+0xc>)
 8012426:	f7ff ffa5 	bl	8012374 <_ZN22OutsideTestRunnerUTestD1Ev>
 801242a:	bd80      	pop	{r7, pc}
 801242c:	200009f0 	.word	0x200009f0

08012430 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8012430:	b580      	push	{r7, lr}
 8012432:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8012434:	4b12      	ldr	r3, [pc, #72]	; (8012480 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	f3bf 8f5b 	dmb	ish
 801243c:	b2db      	uxtb	r3, r3
 801243e:	f003 0301 	and.w	r3, r3, #1
 8012442:	2b00      	cmp	r3, #0
 8012444:	bf0c      	ite	eq
 8012446:	2301      	moveq	r3, #1
 8012448:	2300      	movne	r3, #0
 801244a:	b2db      	uxtb	r3, r3
 801244c:	2b00      	cmp	r3, #0
 801244e:	d013      	beq.n	8012478 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012450:	480b      	ldr	r0, [pc, #44]	; (8012480 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012452:	f00c ff29 	bl	801f2a8 <__cxa_guard_acquire>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	bf14      	ite	ne
 801245c:	2301      	movne	r3, #1
 801245e:	2300      	moveq	r3, #0
 8012460:	b2db      	uxtb	r3, r3
 8012462:	2b00      	cmp	r3, #0
 8012464:	d008      	beq.n	8012478 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012466:	4807      	ldr	r0, [pc, #28]	; (8012484 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8012468:	f7ff ffb0 	bl	80123cc <_ZN22OutsideTestRunnerUTestC1Ev>
 801246c:	4804      	ldr	r0, [pc, #16]	; (8012480 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 801246e:	f00c ff27 	bl	801f2c0 <__cxa_guard_release>
 8012472:	4805      	ldr	r0, [pc, #20]	; (8012488 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8012474:	f00c ff4b 	bl	801f30e <atexit>
    return instance_;
 8012478:	4b02      	ldr	r3, [pc, #8]	; (8012484 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 801247a:	4618      	mov	r0, r3
 801247c:	bd80      	pop	{r7, pc}
 801247e:	bf00      	nop
 8012480:	20000a54 	.word	0x20000a54
 8012484:	200009f0 	.word	0x200009f0
 8012488:	08012421 	.word	0x08012421

0801248c <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	330c      	adds	r3, #12
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	4798      	blx	r3
    }
 80124a0:	bf00      	nop
 80124a2:	3708      	adds	r7, #8
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}

080124a8 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	3314      	adds	r3, #20
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	4798      	blx	r3
    }
 80124bc:	bf00      	nop
 80124be:	3708      	adds	r7, #8
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}

080124c4 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	3310      	adds	r3, #16
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	4798      	blx	r3
    }
 80124d8:	bf00      	nop
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 80124e0:	b480      	push	{r7}
 80124e2:	b085      	sub	sp, #20
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
 80124ec:	603b      	str	r3, [r7, #0]
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	68ba      	ldr	r2, [r7, #8]
 80124f2:	601a      	str	r2, [r3, #0]
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	687a      	ldr	r2, [r7, #4]
 80124f8:	605a      	str	r2, [r3, #4]
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	683a      	ldr	r2, [r7, #0]
 80124fe:	609a      	str	r2, [r3, #8]
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	4618      	mov	r0, r3
 8012504:	3714      	adds	r7, #20
 8012506:	46bd      	mov	sp, r7
 8012508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250c:	4770      	bx	lr

0801250e <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 801250e:	b580      	push	{r7, lr}
 8012510:	b086      	sub	sp, #24
 8012512:	af00      	add	r7, sp, #0
 8012514:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	689b      	ldr	r3, [r3, #8]
 801252a:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	3394      	adds	r3, #148	; 0x94
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	68ba      	ldr	r2, [r7, #8]
 8012536:	68f9      	ldr	r1, [r7, #12]
 8012538:	6938      	ldr	r0, [r7, #16]
 801253a:	4798      	blx	r3
    }
 801253c:	bf00      	nop
 801253e:	3718      	adds	r7, #24
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	689b      	ldr	r3, [r3, #8]
 8012560:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8012562:	4b05      	ldr	r3, [pc, #20]	; (8012578 <helperDoRunOneTestSeperateProcess+0x34>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	68ba      	ldr	r2, [r7, #8]
 8012568:	68f9      	ldr	r1, [r7, #12]
 801256a:	6938      	ldr	r0, [r7, #16]
 801256c:	4798      	blx	r3
    }
 801256e:	bf00      	nop
 8012570:	3718      	adds	r7, #24
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	2000009c 	.word	0x2000009c

0801257c <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8012584:	4a0f      	ldr	r2, [pc, #60]	; (80125c4 <_ZN10UtestShellC1Ev+0x48>)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	601a      	str	r2, [r3, #0]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	4a0e      	ldr	r2, [pc, #56]	; (80125c8 <_ZN10UtestShellC1Ev+0x4c>)
 801258e:	605a      	str	r2, [r3, #4]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	4a0e      	ldr	r2, [pc, #56]	; (80125cc <_ZN10UtestShellC1Ev+0x50>)
 8012594:	609a      	str	r2, [r3, #8]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4a0d      	ldr	r2, [pc, #52]	; (80125d0 <_ZN10UtestShellC1Ev+0x54>)
 801259a:	60da      	str	r2, [r3, #12]
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2200      	movs	r2, #0
 80125a0:	611a      	str	r2, [r3, #16]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2200      	movs	r2, #0
 80125a6:	615a      	str	r2, [r3, #20]
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2200      	movs	r2, #0
 80125ac:	761a      	strb	r2, [r3, #24]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2200      	movs	r2, #0
 80125b2:	765a      	strb	r2, [r3, #25]
{
}
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	4618      	mov	r0, r3
 80125b8:	370c      	adds	r7, #12
 80125ba:	46bd      	mov	sp, r7
 80125bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c0:	4770      	bx	lr
 80125c2:	bf00      	nop
 80125c4:	08027f4c 	.word	0x08027f4c
 80125c8:	08024760 	.word	0x08024760
 80125cc:	08024774 	.word	0x08024774
 80125d0:	08024784 	.word	0x08024784

080125d4 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 80125d4:	b480      	push	{r7}
 80125d6:	b085      	sub	sp, #20
 80125d8:	af00      	add	r7, sp, #0
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
 80125e0:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 80125e2:	4a0f      	ldr	r2, [pc, #60]	; (8012620 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	601a      	str	r2, [r3, #0]
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	68ba      	ldr	r2, [r7, #8]
 80125ec:	605a      	str	r2, [r3, #4]
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	687a      	ldr	r2, [r7, #4]
 80125f2:	609a      	str	r2, [r3, #8]
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	683a      	ldr	r2, [r7, #0]
 80125f8:	60da      	str	r2, [r3, #12]
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	69ba      	ldr	r2, [r7, #24]
 80125fe:	611a      	str	r2, [r3, #16]
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2200      	movs	r2, #0
 8012604:	615a      	str	r2, [r3, #20]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2200      	movs	r2, #0
 801260a:	761a      	strb	r2, [r3, #24]
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	2200      	movs	r2, #0
 8012610:	765a      	strb	r2, [r3, #25]
{
}
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	4618      	mov	r0, r3
 8012616:	3714      	adds	r7, #20
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr
 8012620:	08027f4c 	.word	0x08027f4c

08012624 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8012624:	b480      	push	{r7}
 8012626:	b083      	sub	sp, #12
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	4a04      	ldr	r2, [pc, #16]	; (8012640 <_ZN10UtestShellD1Ev+0x1c>)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	601a      	str	r2, [r3, #0]
{
}
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4618      	mov	r0, r3
 8012636:	370c      	adds	r7, #12
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr
 8012640:	08027f4c 	.word	0x08027f4c

08012644 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
}
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f7ff ffe9 	bl	8012624 <_ZN10UtestShellD1Ev>
 8012652:	211c      	movs	r1, #28
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f7f7 fbb7 	bl	8009dc8 <_ZdlPvj>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	4618      	mov	r0, r3
 801265e:	3708      	adds	r7, #8
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 801266a:	2300      	movs	r3, #0
 801266c:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	3310      	adds	r3, #16
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	4798      	blx	r3
}
 801267a:	bf00      	nop
 801267c:	3708      	adds	r7, #8
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
	...

08012684 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8012684:	b580      	push	{r7, lr}
 8012686:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 8012688:	4b02      	ldr	r3, [pc, #8]	; (8012694 <_ZN10UtestShell5crashEv+0x10>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	4798      	blx	r3
}
 801268e:	bf00      	nop
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	20000098 	.word	0x20000098

08012698 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b088      	sub	sp, #32
 801269c:	af00      	add	r7, sp, #0
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	60b9      	str	r1, [r7, #8]
 80126a2:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2200      	movs	r2, #0
 80126a8:	765a      	strb	r2, [r3, #25]
    result.countRun();
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	3324      	adds	r3, #36	; 0x24
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 80126b6:	f107 0014 	add.w	r0, r7, #20
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	68ba      	ldr	r2, [r7, #8]
 80126be:	68f9      	ldr	r1, [r7, #12]
 80126c0:	f7ff ff0e 	bl	80124e0 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	337c      	adds	r3, #124	; 0x7c
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	68f8      	ldr	r0, [r7, #12]
 80126ce:	4798      	blx	r3
 80126d0:	4603      	mov	r3, r0
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d007      	beq.n	80126e6 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 80126d6:	4b09      	ldr	r3, [pc, #36]	; (80126fc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	f107 0214 	add.w	r2, r7, #20
 80126de:	4611      	mov	r1, r2
 80126e0:	4807      	ldr	r0, [pc, #28]	; (8012700 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 80126e2:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 80126e4:	e006      	b.n	80126f4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 80126e6:	4b05      	ldr	r3, [pc, #20]	; (80126fc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f107 0214 	add.w	r2, r7, #20
 80126ee:	4611      	mov	r1, r2
 80126f0:	4804      	ldr	r0, [pc, #16]	; (8012704 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 80126f2:	4798      	blx	r3
}
 80126f4:	bf00      	nop
 80126f6:	3720      	adds	r7, #32
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	200000a4 	.word	0x200000a4
 8012700:	08012545 	.word	0x08012545
 8012704:	0801250f 	.word	0x0801250f

08012708 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8012708:	b590      	push	{r4, r7, lr}
 801270a:	b083      	sub	sp, #12
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
    return new Utest();
 8012710:	22d3      	movs	r2, #211	; 0xd3
 8012712:	4906      	ldr	r1, [pc, #24]	; (801272c <_ZN10UtestShell10createTestEv+0x24>)
 8012714:	2004      	movs	r0, #4
 8012716:	f7f7 fb43 	bl	8009da0 <_ZnwjPKci>
 801271a:	4604      	mov	r4, r0
 801271c:	4620      	mov	r0, r4
 801271e:	f001 fb0f 	bl	8013d40 <_ZN5UtestC1Ev>
 8012722:	4623      	mov	r3, r4
}
 8012724:	4618      	mov	r0, r3
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	bd90      	pop	{r4, r7, pc}
 801272c:	08024794 	.word	0x08024794

08012730 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
    delete test;
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d004      	beq.n	801274a <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	3204      	adds	r2, #4
 8012744:	6812      	ldr	r2, [r2, #0]
 8012746:	4618      	mov	r0, r3
 8012748:	4790      	blx	r2
}
 801274a:	bf00      	nop
 801274c:	3708      	adds	r7, #8
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}
	...

08012754 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b088      	sub	sp, #32
 8012758:	af00      	add	r7, sp, #0
 801275a:	60f8      	str	r0, [r7, #12]
 801275c:	60b9      	str	r1, [r7, #8]
 801275e:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	333c      	adds	r3, #60	; 0x3c
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	4940      	ldr	r1, [pc, #256]	; (801286c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	3314      	adds	r3, #20
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	68f9      	ldr	r1, [r7, #12]
 801277a:	68b8      	ldr	r0, [r7, #8]
 801277c:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	333c      	adds	r3, #60	; 0x3c
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	493a      	ldr	r1, [pc, #232]	; (8012870 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 801278c:	f001 faae 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8012790:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8012792:	68f8      	ldr	r0, [r7, #12]
 8012794:	f001 fa90 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8012798:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 801279a:	6879      	ldr	r1, [r7, #4]
 801279c:	68f8      	ldr	r0, [r7, #12]
 801279e:	f001 fa6b 	bl	8013c78 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 80127a2:	68f9      	ldr	r1, [r7, #12]
 80127a4:	68f8      	ldr	r0, [r7, #12]
 80127a6:	f001 fa77 	bl	8013c98 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	333c      	adds	r3, #60	; 0x3c
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	4930      	ldr	r1, [pc, #192]	; (8012874 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	4798      	blx	r3
    Utest* testToRun = createTest();
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	3388      	adds	r3, #136	; 0x88
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	68f8      	ldr	r0, [r7, #12]
 80127c2:	4798      	blx	r3
 80127c4:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	333c      	adds	r3, #60	; 0x3c
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	492a      	ldr	r1, [pc, #168]	; (8012878 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	333c      	adds	r3, #60	; 0x3c
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	4927      	ldr	r1, [pc, #156]	; (801287c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	4798      	blx	r3
    testToRun->run();
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	3308      	adds	r3, #8
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	6978      	ldr	r0, [r7, #20]
 80127ec:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	333c      	adds	r3, #60	; 0x3c
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4922      	ldr	r1, [pc, #136]	; (8012880 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 80127fc:	69f9      	ldr	r1, [r7, #28]
 80127fe:	68f8      	ldr	r0, [r7, #12]
 8012800:	f001 fa4a 	bl	8013c98 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8012804:	69b9      	ldr	r1, [r7, #24]
 8012806:	68f8      	ldr	r0, [r7, #12]
 8012808:	f001 fa36 	bl	8013c78 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	333c      	adds	r3, #60	; 0x3c
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	491b      	ldr	r1, [pc, #108]	; (8012884 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	4798      	blx	r3
    destroyTest(testToRun);
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	338c      	adds	r3, #140	; 0x8c
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	6979      	ldr	r1, [r7, #20]
 8012824:	68f8      	ldr	r0, [r7, #12]
 8012826:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	333c      	adds	r3, #60	; 0x3c
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	4915      	ldr	r1, [pc, #84]	; (8012888 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	333c      	adds	r3, #60	; 0x3c
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4913      	ldr	r1, [pc, #76]	; (801288c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	3318      	adds	r3, #24
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	68f9      	ldr	r1, [r7, #12]
 8012850:	68b8      	ldr	r0, [r7, #8]
 8012852:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	333c      	adds	r3, #60	; 0x3c
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	490c      	ldr	r1, [pc, #48]	; (8012890 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	4798      	blx	r3
}
 8012862:	bf00      	nop
 8012864:	3720      	adds	r7, #32
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
 801286a:	bf00      	nop
 801286c:	080247a8 	.word	0x080247a8
 8012870:	080247cc 	.word	0x080247cc
 8012874:	080247ec 	.word	0x080247ec
 8012878:	08024808 	.word	0x08024808
 801287c:	08024824 	.word	0x08024824
 8012880:	08024840 	.word	0x08024840
 8012884:	08024858 	.word	0x08024858
 8012888:	08024874 	.word	0x08024874
 801288c:	08024890 	.word	0x08024890
 8012890:	080248b4 	.word	0x080248b4

08012894 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8012894:	b480      	push	{r7}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
    return next_;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	695b      	ldr	r3, [r3, #20]
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	370c      	adds	r7, #12
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr

080128ac <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
    next_ = test;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	683a      	ldr	r2, [r7, #0]
 80128ba:	615a      	str	r2, [r3, #20]
    return this;
 80128bc:	687b      	ldr	r3, [r7, #4]
}
 80128be:	4618      	mov	r0, r3
 80128c0:	370c      	adds	r7, #12
 80128c2:	46bd      	mov	sp, r7
 80128c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c8:	4770      	bx	lr

080128ca <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 80128ca:	b580      	push	{r7, lr}
 80128cc:	b082      	sub	sp, #8
 80128ce:	af00      	add	r7, sp, #0
 80128d0:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	695b      	ldr	r3, [r3, #20]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d00b      	beq.n	80128f2 <_ZN10UtestShell10countTestsEv+0x28>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	695a      	ldr	r2, [r3, #20]
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	695b      	ldr	r3, [r3, #20]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	3310      	adds	r3, #16
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	4610      	mov	r0, r2
 80128ea:	4798      	blx	r3
 80128ec:	4603      	mov	r3, r0
 80128ee:	3301      	adds	r3, #1
 80128f0:	e000      	b.n	80128f4 <_ZN10UtestShell10countTestsEv+0x2a>
 80128f2:	2301      	movs	r3, #1
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3708      	adds	r7, #8
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
    return "TEST";
 8012906:	4904      	ldr	r1, [pc, #16]	; (8012918 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f7f9 fe0c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
}
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	3708      	adds	r7, #8
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	080248d8 	.word	0x080248d8

0801291c <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	689b      	ldr	r3, [r3, #8]
 801292a:	4619      	mov	r1, r3
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f7f9 fdfa 	bl	800c526 <_ZN12SimpleStringC1EPKc>
}
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	3708      	adds	r7, #8
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}

0801293a <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 801293a:	b580      	push	{r7, lr}
 801293c:	b082      	sub	sp, #8
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
 8012942:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	685b      	ldr	r3, [r3, #4]
 8012948:	4619      	mov	r1, r3
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f7f9 fdeb 	bl	800c526 <_ZN12SimpleStringC1EPKc>
}
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	33a0      	adds	r3, #160	; 0xa0
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	687a      	ldr	r2, [r7, #4]
 801296c:	6839      	ldr	r1, [r7, #0]
 801296e:	4610      	mov	r0, r2
 8012970:	4798      	blx	r3
    formattedName += "(";
 8012972:	490e      	ldr	r1, [pc, #56]	; (80129ac <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f7fa fa1d 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	4619      	mov	r1, r3
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f7fa fa17 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 8012986:	490a      	ldr	r1, [pc, #40]	; (80129b0 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f7fa fa13 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	689b      	ldr	r3, [r3, #8]
 8012992:	4619      	mov	r1, r3
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f7fa fa0d 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 801299a:	4906      	ldr	r1, [pc, #24]	; (80129b4 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f7fa fa09 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 80129a2:	bf00      	nop
}
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	3708      	adds	r7, #8
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}
 80129ac:	080248e0 	.word	0x080248e0
 80129b0:	080248e4 	.word	0x080248e4
 80129b4:	080248e8 	.word	0x080248e8

080129b8 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	7e5b      	ldrb	r3, [r3, #25]
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	370c      	adds	r7, #12
 80129c8:	46bd      	mov	sp, r7
 80129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ce:	4770      	bx	lr

080129d0 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f001 f96d 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 80129de:	4603      	mov	r3, r0
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	3228      	adds	r2, #40	; 0x28
 80129e4:	6812      	ldr	r2, [r2, #0]
 80129e6:	4618      	mov	r0, r3
 80129e8:	4790      	blx	r2
}
 80129ea:	bf00      	nop
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}

080129f2 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 80129f2:	b480      	push	{r7}
 80129f4:	b083      	sub	sp, #12
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
    return true;
 80129fa:	2301      	movs	r3, #1
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	370c      	adds	r7, #12
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	7e1b      	ldrb	r3, [r3, #24]
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	370c      	adds	r7, #12
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr

08012a20 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8012a20:	b480      	push	{r7}
 8012a22:	b083      	sub	sp, #12
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	761a      	strb	r2, [r3, #24]
}
 8012a2e:	bf00      	nop
 8012a30:	370c      	adds	r7, #12
 8012a32:	46bd      	mov	sp, r7
 8012a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a38:	4770      	bx	lr

08012a3a <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8012a3a:	b480      	push	{r7}
 8012a3c:	b083      	sub	sp, #12
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]

}
 8012a42:	bf00      	nop
 8012a44:	370c      	adds	r7, #12
 8012a46:	46bd      	mov	sp, r7
 8012a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4c:	4770      	bx	lr

08012a4e <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8012a4e:	b480      	push	{r7}
 8012a50:	b083      	sub	sp, #12
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	6078      	str	r0, [r7, #4]
 8012a56:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	683a      	ldr	r2, [r7, #0]
 8012a5c:	60da      	str	r2, [r3, #12]
}
 8012a5e:	bf00      	nop
 8012a60:	370c      	adds	r7, #12
 8012a62:	46bd      	mov	sp, r7
 8012a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a68:	4770      	bx	lr

08012a6a <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8012a6a:	b480      	push	{r7}
 8012a6c:	b083      	sub	sp, #12
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	6078      	str	r0, [r7, #4]
 8012a72:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	683a      	ldr	r2, [r7, #0]
 8012a78:	611a      	str	r2, [r3, #16]
}
 8012a7a:	bf00      	nop
 8012a7c:	370c      	adds	r7, #12
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a84:	4770      	bx	lr

08012a86 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 8012a86:	b480      	push	{r7}
 8012a88:	b083      	sub	sp, #12
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
 8012a8e:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	683a      	ldr	r2, [r7, #0]
 8012a94:	605a      	str	r2, [r3, #4]
}
 8012a96:	bf00      	nop
 8012a98:	370c      	adds	r7, #12
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr

08012aa2 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8012aa2:	b480      	push	{r7}
 8012aa4:	b083      	sub	sp, #12
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6078      	str	r0, [r7, #4]
 8012aaa:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	683a      	ldr	r2, [r7, #0]
 8012ab0:	609a      	str	r2, [r3, #8]
}
 8012ab2:	bf00      	nop
 8012ab4:	370c      	adds	r7, #12
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abc:	4770      	bx	lr

08012abe <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8012abe:	b580      	push	{r7, lr}
 8012ac0:	b082      	sub	sp, #8
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	6078      	str	r0, [r7, #4]
 8012ac6:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	68db      	ldr	r3, [r3, #12]
 8012acc:	4619      	mov	r1, r3
 8012ace:	6878      	ldr	r0, [r7, #4]
 8012ad0:	f7f9 fd29 	bl	800c526 <_ZN12SimpleStringC1EPKc>
}
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	3708      	adds	r7, #8
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	691b      	ldr	r3, [r3, #16]
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	370c      	adds	r7, #12
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr

08012af4 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8012af4:	b590      	push	{r4, r7, lr}
 8012af6:	b087      	sub	sp, #28
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d101      	bne.n	8012b0a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8012b06:	2301      	movs	r3, #1
 8012b08:	e01f      	b.n	8012b4a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d01b      	beq.n	8012b48 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8012b10:	f107 0310 	add.w	r3, r7, #16
 8012b14:	68b9      	ldr	r1, [r7, #8]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7f9 fd05 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012b1c:	f107 0310 	add.w	r3, r7, #16
 8012b20:	4619      	mov	r1, r3
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f00c fb93 	bl	801f24e <_ZNK10TestFilter5matchERK12SimpleString>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	461c      	mov	r4, r3
 8012b2c:	f107 0310 	add.w	r3, r7, #16
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7fa f8b0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8012b36:	2c00      	cmp	r4, #0
 8012b38:	d001      	beq.n	8012b3e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	e005      	b.n	8012b4a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f00c fb5f 	bl	801f202 <_ZNK10TestFilter7getNextEv>
 8012b44:	6078      	str	r0, [r7, #4]
 8012b46:	e7e0      	b.n	8012b0a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8012b48:	2300      	movs	r3, #0
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	371c      	adds	r7, #28
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd90      	pop	{r4, r7, pc}

08012b52 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b084      	sub	sp, #16
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	60f8      	str	r0, [r7, #12]
 8012b5a:	60b9      	str	r1, [r7, #8]
 8012b5c:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	685b      	ldr	r3, [r3, #4]
 8012b62:	68ba      	ldr	r2, [r7, #8]
 8012b64:	4619      	mov	r1, r3
 8012b66:	68f8      	ldr	r0, [r7, #12]
 8012b68:	f7ff ffc4 	bl	8012af4 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d00b      	beq.n	8012b8a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	689b      	ldr	r3, [r3, #8]
 8012b76:	687a      	ldr	r2, [r7, #4]
 8012b78:	4619      	mov	r1, r3
 8012b7a:	68f8      	ldr	r0, [r7, #12]
 8012b7c:	f7ff ffba 	bl	8012af4 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8012b80:	4603      	mov	r3, r0
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d001      	beq.n	8012b8a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8012b86:	2301      	movs	r3, #1
 8012b88:	e000      	b.n	8012b8c <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8012b8a:	2300      	movs	r3, #0
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3710      	adds	r7, #16
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8012b94:	b590      	push	{r4, r7, lr}
 8012b96:	b083      	sub	sp, #12
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	339c      	adds	r3, #156	; 0x9c
 8012ba4:	681c      	ldr	r4, [r3, #0]
 8012ba6:	f001 f8b1 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8012baa:	4603      	mov	r3, r0
 8012bac:	461a      	mov	r2, r3
 8012bae:	6839      	ldr	r1, [r7, #0]
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8012bb4:	bf00      	nop
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd90      	pop	{r4, r7, pc}

08012bbc <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	60f8      	str	r0, [r7, #12]
 8012bc4:	60b9      	str	r1, [r7, #8]
 8012bc6:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	2201      	movs	r2, #1
 8012bcc:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8012bce:	68f8      	ldr	r0, [r7, #12]
 8012bd0:	f001 f872 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	681a      	ldr	r2, [r3, #0]
 8012bd8:	3234      	adds	r2, #52	; 0x34
 8012bda:	6812      	ldr	r2, [r2, #0]
 8012bdc:	68b9      	ldr	r1, [r7, #8]
 8012bde:	4618      	mov	r0, r3
 8012be0:	4790      	blx	r2
    terminator.exitCurrentTest();
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8012bec:	bf00      	nop
 8012bee:	3710      	adds	r7, #16
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	6838      	ldr	r0, [r7, #0]
 8012c06:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8012c08:	bf00      	nop
 8012c0a:	3708      	adds	r7, #8
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}

08012c10 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012c10:	b590      	push	{r4, r7, lr}
 8012c12:	b09d      	sub	sp, #116	; 0x74
 8012c14:	af04      	add	r7, sp, #16
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	607a      	str	r2, [r7, #4]
 8012c1a:	603b      	str	r3, [r7, #0]
 8012c1c:	460b      	mov	r3, r1
 8012c1e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012c20:	68f8      	ldr	r0, [r7, #12]
 8012c22:	f001 f849 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8012c26:	4603      	mov	r3, r0
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	3228      	adds	r2, #40	; 0x28
 8012c2c:	6812      	ldr	r2, [r2, #0]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	4790      	blx	r2
    if (!condition)
 8012c32:	7afb      	ldrb	r3, [r7, #11]
 8012c34:	f083 0301 	eor.w	r3, r3, #1
 8012c38:	b2db      	uxtb	r3, r3
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d03f      	beq.n	8012cbe <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	339c      	adds	r3, #156	; 0x9c
 8012c44:	681c      	ldr	r4, [r3, #0]
 8012c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c4a:	6879      	ldr	r1, [r7, #4]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7f9 fc6a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012c52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012c56:	6839      	ldr	r1, [r7, #0]
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7f9 fc64 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012c5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012c62:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7f9 fc5e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012c6a:	f107 0014 	add.w	r0, r7, #20
 8012c6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012c72:	9302      	str	r3, [sp, #8]
 8012c74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012c78:	9301      	str	r3, [sp, #4]
 8012c7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012c84:	68f9      	ldr	r1, [r7, #12]
 8012c86:	f7fb ff6b 	bl	800eb60 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012c8a:	f107 0314 	add.w	r3, r7, #20
 8012c8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012c90:	4619      	mov	r1, r3
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	47a0      	blx	r4
 8012c96:	f107 0314 	add.w	r3, r7, #20
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7fc fdce 	bl	800f83c <_ZN12CheckFailureD1Ev>
 8012ca0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7f9 fff6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8012caa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7f9 fff1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8012cb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7f9 ffec 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8012cbe:	bf00      	nop
 8012cc0:	3764      	adds	r7, #100	; 0x64
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd90      	pop	{r4, r7, pc}

08012cc6 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012cc6:	b590      	push	{r4, r7, lr}
 8012cc8:	b097      	sub	sp, #92	; 0x5c
 8012cca:	af02      	add	r7, sp, #8
 8012ccc:	60f8      	str	r0, [r7, #12]
 8012cce:	60b9      	str	r1, [r7, #8]
 8012cd0:	607a      	str	r2, [r7, #4]
 8012cd2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012cd4:	68f8      	ldr	r0, [r7, #12]
 8012cd6:	f000 ffef 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	3228      	adds	r2, #40	; 0x28
 8012ce0:	6812      	ldr	r2, [r2, #0]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	339c      	adds	r3, #156	; 0x9c
 8012cec:	681c      	ldr	r4, [r3, #0]
 8012cee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012cf2:	68b9      	ldr	r1, [r7, #8]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7f9 fc16 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012cfa:	f107 0014 	add.w	r0, r7, #20
 8012cfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012d02:	9300      	str	r3, [sp, #0]
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	687a      	ldr	r2, [r7, #4]
 8012d08:	68f9      	ldr	r1, [r7, #12]
 8012d0a:	f7fb ff71 	bl	800ebf0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8012d0e:	f107 0314 	add.w	r3, r7, #20
 8012d12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012d14:	4619      	mov	r1, r3
 8012d16:	68f8      	ldr	r0, [r7, #12]
 8012d18:	47a0      	blx	r4
 8012d1a:	f107 0314 	add.w	r3, r7, #20
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7f7 fc16 	bl	800a550 <_ZN11FailFailureD1Ev>
 8012d24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7f9 ffb4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8012d2e:	bf00      	nop
 8012d30:	3754      	adds	r7, #84	; 0x54
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd90      	pop	{r4, r7, pc}

08012d36 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012d36:	b590      	push	{r4, r7, lr}
 8012d38:	b0a7      	sub	sp, #156	; 0x9c
 8012d3a:	af04      	add	r7, sp, #16
 8012d3c:	60f8      	str	r0, [r7, #12]
 8012d3e:	60b9      	str	r1, [r7, #8]
 8012d40:	607a      	str	r2, [r7, #4]
 8012d42:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012d44:	68f8      	ldr	r0, [r7, #12]
 8012d46:	f000 ffb7 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	3228      	adds	r2, #40	; 0x28
 8012d50:	6812      	ldr	r2, [r2, #0]
 8012d52:	4618      	mov	r0, r3
 8012d54:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d102      	bne.n	8012d62 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d068      	beq.n	8012e34 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d002      	beq.n	8012d6e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d12a      	bne.n	8012dc4 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	339c      	adds	r3, #156	; 0x9c
 8012d74:	681c      	ldr	r4, [r3, #0]
 8012d76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012d7a:	6839      	ldr	r1, [r7, #0]
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7f9 fbd2 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012d82:	f107 0010 	add.w	r0, r7, #16
 8012d86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012d8a:	9302      	str	r3, [sp, #8]
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	9301      	str	r3, [sp, #4]
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	9300      	str	r3, [sp, #0]
 8012d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012d98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012d9c:	68f9      	ldr	r1, [r7, #12]
 8012d9e:	f7fc f9ad 	bl	800f0fc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012da2:	f107 0310 	add.w	r3, r7, #16
 8012da6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012daa:	4619      	mov	r1, r3
 8012dac:	68f8      	ldr	r0, [r7, #12]
 8012dae:	47a0      	blx	r4
 8012db0:	f107 0310 	add.w	r3, r7, #16
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7fc fcb9 	bl	800f72c <_ZN18StringEqualFailureD1Ev>
 8012dba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7f9 ff69 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8012dc4:	6879      	ldr	r1, [r7, #4]
 8012dc6:	68b8      	ldr	r0, [r7, #8]
 8012dc8:	f7f9 f9ea 	bl	800c1a0 <_ZN12SimpleString6StrCmpEPKcS1_>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	bf14      	ite	ne
 8012dd2:	2301      	movne	r3, #1
 8012dd4:	2300      	moveq	r3, #0
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d02c      	beq.n	8012e36 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	339c      	adds	r3, #156	; 0x9c
 8012de2:	681c      	ldr	r4, [r3, #0]
 8012de4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012de8:	6839      	ldr	r1, [r7, #0]
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7f9 fb9b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012df0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012df4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012df8:	9302      	str	r3, [sp, #8]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	9301      	str	r3, [sp, #4]
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	9300      	str	r3, [sp, #0]
 8012e02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012e06:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012e0a:	68f9      	ldr	r1, [r7, #12]
 8012e0c:	f7fc f976 	bl	800f0fc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012e10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012e14:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012e18:	4619      	mov	r1, r3
 8012e1a:	68f8      	ldr	r0, [r7, #12]
 8012e1c:	47a0      	blx	r4
 8012e1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7fc fc82 	bl	800f72c <_ZN18StringEqualFailureD1Ev>
 8012e28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7f9 ff32 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8012e32:	e000      	b.n	8012e36 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012e34:	bf00      	nop
}
 8012e36:	378c      	adds	r7, #140	; 0x8c
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd90      	pop	{r4, r7, pc}

08012e3c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012e3c:	b590      	push	{r4, r7, lr}
 8012e3e:	b0a7      	sub	sp, #156	; 0x9c
 8012e40:	af04      	add	r7, sp, #16
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012e4a:	68f8      	ldr	r0, [r7, #12]
 8012e4c:	f000 ff34 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8012e50:	4603      	mov	r3, r0
 8012e52:	681a      	ldr	r2, [r3, #0]
 8012e54:	3228      	adds	r2, #40	; 0x28
 8012e56:	6812      	ldr	r2, [r2, #0]
 8012e58:	4618      	mov	r0, r3
 8012e5a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d102      	bne.n	8012e68 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d06b      	beq.n	8012f40 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d002      	beq.n	8012e74 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d12b      	bne.n	8012ecc <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	339c      	adds	r3, #156	; 0x9c
 8012e7a:	681c      	ldr	r4, [r3, #0]
 8012e7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012e80:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7f9 fb4e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012e8a:	f107 0010 	add.w	r0, r7, #16
 8012e8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012e92:	9302      	str	r3, [sp, #8]
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	9301      	str	r3, [sp, #4]
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	9300      	str	r3, [sp, #0]
 8012e9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012ea0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012ea4:	68f9      	ldr	r1, [r7, #12]
 8012ea6:	f7fc f929 	bl	800f0fc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012eaa:	f107 0310 	add.w	r3, r7, #16
 8012eae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012eb2:	4619      	mov	r1, r3
 8012eb4:	68f8      	ldr	r0, [r7, #12]
 8012eb6:	47a0      	blx	r4
 8012eb8:	f107 0310 	add.w	r3, r7, #16
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7fc fc35 	bl	800f72c <_ZN18StringEqualFailureD1Ev>
 8012ec2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7f9 fee5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8012ecc:	683a      	ldr	r2, [r7, #0]
 8012ece:	6879      	ldr	r1, [r7, #4]
 8012ed0:	68b8      	ldr	r0, [r7, #8]
 8012ed2:	f7f9 f9a4 	bl	800c21e <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	bf14      	ite	ne
 8012edc:	2301      	movne	r3, #1
 8012ede:	2300      	moveq	r3, #0
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d02d      	beq.n	8012f42 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	339c      	adds	r3, #156	; 0x9c
 8012eec:	681c      	ldr	r4, [r3, #0]
 8012eee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012ef2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7f9 fb15 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012efc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012f00:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f04:	9302      	str	r3, [sp, #8]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	9301      	str	r3, [sp, #4]
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	9300      	str	r3, [sp, #0]
 8012f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012f12:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012f16:	68f9      	ldr	r1, [r7, #12]
 8012f18:	f7fc f8f0 	bl	800f0fc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012f1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012f20:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012f24:	4619      	mov	r1, r3
 8012f26:	68f8      	ldr	r0, [r7, #12]
 8012f28:	47a0      	blx	r4
 8012f2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fc fbfc 	bl	800f72c <_ZN18StringEqualFailureD1Ev>
 8012f34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f7f9 feac 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8012f3e:	e000      	b.n	8012f42 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012f40:	bf00      	nop
}
 8012f42:	378c      	adds	r7, #140	; 0x8c
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd90      	pop	{r4, r7, pc}

08012f48 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8012f48:	b590      	push	{r4, r7, lr}
 8012f4a:	b0ab      	sub	sp, #172	; 0xac
 8012f4c:	af04      	add	r7, sp, #16
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	60b9      	str	r1, [r7, #8]
 8012f52:	607a      	str	r2, [r7, #4]
 8012f54:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012f56:	68f8      	ldr	r0, [r7, #12]
 8012f58:	f000 feae 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	681a      	ldr	r2, [r3, #0]
 8012f60:	3228      	adds	r2, #40	; 0x28
 8012f62:	6812      	ldr	r2, [r2, #0]
 8012f64:	4618      	mov	r0, r3
 8012f66:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d102      	bne.n	8012f74 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d07c      	beq.n	801306e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d002      	beq.n	8012f80 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d128      	bne.n	8012fd2 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	3398      	adds	r3, #152	; 0x98
 8012f86:	681c      	ldr	r4, [r3, #0]
 8012f88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012f8c:	6839      	ldr	r1, [r7, #0]
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7f9 fac9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012f94:	f107 0010 	add.w	r0, r7, #16
 8012f98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012f9c:	9302      	str	r3, [sp, #8]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	9301      	str	r3, [sp, #4]
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	9300      	str	r3, [sp, #0]
 8012fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012fae:	68f9      	ldr	r1, [r7, #12]
 8012fb0:	f7fc f948 	bl	800f244 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012fb4:	f107 0310 	add.w	r3, r7, #16
 8012fb8:	4619      	mov	r1, r3
 8012fba:	68f8      	ldr	r0, [r7, #12]
 8012fbc:	47a0      	blx	r4
 8012fbe:	f107 0310 	add.w	r3, r7, #16
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7fc fb90 	bl	800f6e8 <_ZN24StringEqualNoCaseFailureD1Ev>
 8012fc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7f9 fe62 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8012fd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012fd6:	68b9      	ldr	r1, [r7, #8]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7f9 faa4 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012fde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012fe2:	6879      	ldr	r1, [r7, #4]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7f9 fa9e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8012fea:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012fee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012ff2:	4611      	mov	r1, r2
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7f9 fe75 	bl	800cce4 <_ZNK12SimpleString12equalsNoCaseERKS_>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	f083 0301 	eor.w	r3, r3, #1
 8013000:	b2dc      	uxtb	r4, r3
 8013002:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013006:	4618      	mov	r0, r3
 8013008:	f7f9 fe45 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801300c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013010:	4618      	mov	r0, r3
 8013012:	f7f9 fe40 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013016:	2c00      	cmp	r4, #0
 8013018:	d02a      	beq.n	8013070 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	3398      	adds	r3, #152	; 0x98
 8013020:	681c      	ldr	r4, [r3, #0]
 8013022:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013026:	6839      	ldr	r1, [r7, #0]
 8013028:	4618      	mov	r0, r3
 801302a:	f7f9 fa7c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801302e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8013032:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013036:	9302      	str	r3, [sp, #8]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	9301      	str	r3, [sp, #4]
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	9300      	str	r3, [sp, #0]
 8013040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013044:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013048:	68f9      	ldr	r1, [r7, #12]
 801304a:	f7fc f8fb 	bl	800f244 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801304e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013052:	4619      	mov	r1, r3
 8013054:	68f8      	ldr	r0, [r7, #12]
 8013056:	47a0      	blx	r4
 8013058:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801305c:	4618      	mov	r0, r3
 801305e:	f7fc fb43 	bl	800f6e8 <_ZN24StringEqualNoCaseFailureD1Ev>
 8013062:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013066:	4618      	mov	r0, r3
 8013068:	f7f9 fe15 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801306c:	e000      	b.n	8013070 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801306e:	bf00      	nop
}
 8013070:	379c      	adds	r7, #156	; 0x9c
 8013072:	46bd      	mov	sp, r7
 8013074:	bd90      	pop	{r4, r7, pc}

08013076 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013076:	b590      	push	{r4, r7, lr}
 8013078:	b0b3      	sub	sp, #204	; 0xcc
 801307a:	af04      	add	r7, sp, #16
 801307c:	60f8      	str	r0, [r7, #12]
 801307e:	60b9      	str	r1, [r7, #8]
 8013080:	607a      	str	r2, [r7, #4]
 8013082:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013084:	68f8      	ldr	r0, [r7, #12]
 8013086:	f000 fe17 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 801308a:	4603      	mov	r3, r0
 801308c:	681a      	ldr	r2, [r3, #0]
 801308e:	3228      	adds	r2, #40	; 0x28
 8013090:	6812      	ldr	r2, [r2, #0]
 8013092:	4618      	mov	r0, r3
 8013094:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d103      	bne.n	80130a4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	f000 80ad 	beq.w	80131fe <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d002      	beq.n	80130b0 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d140      	bne.n	8013132 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	3398      	adds	r3, #152	; 0x98
 80130b6:	681c      	ldr	r4, [r3, #0]
 80130b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80130bc:	68b9      	ldr	r1, [r7, #8]
 80130be:	4618      	mov	r0, r3
 80130c0:	f7f9 fa31 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80130c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80130c8:	6879      	ldr	r1, [r7, #4]
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7f9 fa2b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80130d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80130d4:	6839      	ldr	r1, [r7, #0]
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7f9 fa25 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80130dc:	f107 0010 	add.w	r0, r7, #16
 80130e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80130e4:	9302      	str	r3, [sp, #8]
 80130e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80130ea:	9301      	str	r3, [sp, #4]
 80130ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80130f0:	9300      	str	r3, [sp, #0]
 80130f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80130f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80130fa:	68f9      	ldr	r1, [r7, #12]
 80130fc:	f7fb fce6 	bl	800eacc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013100:	f107 0310 	add.w	r3, r7, #16
 8013104:	4619      	mov	r1, r3
 8013106:	68f8      	ldr	r0, [r7, #12]
 8013108:	47a0      	blx	r4
 801310a:	f107 0310 	add.w	r3, r7, #16
 801310e:	4618      	mov	r0, r3
 8013110:	f7fc fbb6 	bl	800f880 <_ZN15ContainsFailureD1Ev>
 8013114:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013118:	4618      	mov	r0, r3
 801311a:	f7f9 fdbc 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801311e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013122:	4618      	mov	r0, r3
 8013124:	f7f9 fdb7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013128:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801312c:	4618      	mov	r0, r3
 801312e:	f7f9 fdb2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8013132:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013136:	6879      	ldr	r1, [r7, #4]
 8013138:	4618      	mov	r0, r3
 801313a:	f7f9 f9f4 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801313e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013142:	68b9      	ldr	r1, [r7, #8]
 8013144:	4618      	mov	r0, r3
 8013146:	f7f9 f9ee 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801314a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801314e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013152:	4611      	mov	r1, r2
 8013154:	4618      	mov	r0, r3
 8013156:	f7f9 fa64 	bl	800c622 <_ZNK12SimpleString8containsERKS_>
 801315a:	4603      	mov	r3, r0
 801315c:	f083 0301 	eor.w	r3, r3, #1
 8013160:	b2dc      	uxtb	r4, r3
 8013162:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013166:	4618      	mov	r0, r3
 8013168:	f7f9 fd95 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801316c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013170:	4618      	mov	r0, r3
 8013172:	f7f9 fd90 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013176:	2c00      	cmp	r4, #0
 8013178:	d042      	beq.n	8013200 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	3398      	adds	r3, #152	; 0x98
 8013180:	681c      	ldr	r4, [r3, #0]
 8013182:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013186:	68b9      	ldr	r1, [r7, #8]
 8013188:	4618      	mov	r0, r3
 801318a:	f7f9 f9cc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801318e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013192:	6879      	ldr	r1, [r7, #4]
 8013194:	4618      	mov	r0, r3
 8013196:	f7f9 f9c6 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801319a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801319e:	6839      	ldr	r1, [r7, #0]
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7f9 f9c0 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80131a6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80131aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80131ae:	9302      	str	r3, [sp, #8]
 80131b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80131b4:	9301      	str	r3, [sp, #4]
 80131b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80131ba:	9300      	str	r3, [sp, #0]
 80131bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80131c0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80131c4:	68f9      	ldr	r1, [r7, #12]
 80131c6:	f7fb fc81 	bl	800eacc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80131ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80131ce:	4619      	mov	r1, r3
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	47a0      	blx	r4
 80131d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fc fb51 	bl	800f880 <_ZN15ContainsFailureD1Ev>
 80131de:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7f9 fd57 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80131e8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7f9 fd52 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80131f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7f9 fd4d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80131fc:	e000      	b.n	8013200 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80131fe:	bf00      	nop
}
 8013200:	37bc      	adds	r7, #188	; 0xbc
 8013202:	46bd      	mov	sp, r7
 8013204:	bd90      	pop	{r4, r7, pc}

08013206 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013206:	b590      	push	{r4, r7, lr}
 8013208:	b0b3      	sub	sp, #204	; 0xcc
 801320a:	af04      	add	r7, sp, #16
 801320c:	60f8      	str	r0, [r7, #12]
 801320e:	60b9      	str	r1, [r7, #8]
 8013210:	607a      	str	r2, [r7, #4]
 8013212:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013214:	68f8      	ldr	r0, [r7, #12]
 8013216:	f000 fd4f 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 801321a:	4603      	mov	r3, r0
 801321c:	681a      	ldr	r2, [r3, #0]
 801321e:	3228      	adds	r2, #40	; 0x28
 8013220:	6812      	ldr	r2, [r2, #0]
 8013222:	4618      	mov	r0, r3
 8013224:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d103      	bne.n	8013234 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	2b00      	cmp	r3, #0
 8013230:	f000 80ad 	beq.w	801338e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d002      	beq.n	8013240 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d140      	bne.n	80132c2 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	3398      	adds	r3, #152	; 0x98
 8013246:	681c      	ldr	r4, [r3, #0]
 8013248:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801324c:	68b9      	ldr	r1, [r7, #8]
 801324e:	4618      	mov	r0, r3
 8013250:	f7f9 f969 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013254:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013258:	6879      	ldr	r1, [r7, #4]
 801325a:	4618      	mov	r0, r3
 801325c:	f7f9 f963 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013260:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013264:	6839      	ldr	r1, [r7, #0]
 8013266:	4618      	mov	r0, r3
 8013268:	f7f9 f95d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801326c:	f107 0010 	add.w	r0, r7, #16
 8013270:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013274:	9302      	str	r3, [sp, #8]
 8013276:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801327a:	9301      	str	r3, [sp, #4]
 801327c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013280:	9300      	str	r3, [sp, #0]
 8013282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013286:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801328a:	68f9      	ldr	r1, [r7, #12]
 801328c:	f7fb fc1e 	bl	800eacc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013290:	f107 0310 	add.w	r3, r7, #16
 8013294:	4619      	mov	r1, r3
 8013296:	68f8      	ldr	r0, [r7, #12]
 8013298:	47a0      	blx	r4
 801329a:	f107 0310 	add.w	r3, r7, #16
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fc faee 	bl	800f880 <_ZN15ContainsFailureD1Ev>
 80132a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7f9 fcf4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80132ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80132b2:	4618      	mov	r0, r3
 80132b4:	f7f9 fcef 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80132b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80132bc:	4618      	mov	r0, r3
 80132be:	f7f9 fcea 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 80132c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80132c6:	6879      	ldr	r1, [r7, #4]
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7f9 f92c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80132ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80132d2:	68b9      	ldr	r1, [r7, #8]
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7f9 f926 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80132da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80132de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80132e2:	4611      	mov	r1, r2
 80132e4:	4618      	mov	r0, r3
 80132e6:	f7f9 f9b7 	bl	800c658 <_ZNK12SimpleString14containsNoCaseERKS_>
 80132ea:	4603      	mov	r3, r0
 80132ec:	f083 0301 	eor.w	r3, r3, #1
 80132f0:	b2dc      	uxtb	r4, r3
 80132f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7f9 fccd 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80132fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013300:	4618      	mov	r0, r3
 8013302:	f7f9 fcc8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013306:	2c00      	cmp	r4, #0
 8013308:	d042      	beq.n	8013390 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	3398      	adds	r3, #152	; 0x98
 8013310:	681c      	ldr	r4, [r3, #0]
 8013312:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013316:	68b9      	ldr	r1, [r7, #8]
 8013318:	4618      	mov	r0, r3
 801331a:	f7f9 f904 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801331e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013322:	6879      	ldr	r1, [r7, #4]
 8013324:	4618      	mov	r0, r3
 8013326:	f7f9 f8fe 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801332a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801332e:	6839      	ldr	r1, [r7, #0]
 8013330:	4618      	mov	r0, r3
 8013332:	f7f9 f8f8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013336:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801333a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801333e:	9302      	str	r3, [sp, #8]
 8013340:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013344:	9301      	str	r3, [sp, #4]
 8013346:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801334a:	9300      	str	r3, [sp, #0]
 801334c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013350:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013354:	68f9      	ldr	r1, [r7, #12]
 8013356:	f7fb fbb9 	bl	800eacc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801335a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801335e:	4619      	mov	r1, r3
 8013360:	68f8      	ldr	r0, [r7, #12]
 8013362:	47a0      	blx	r4
 8013364:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013368:	4618      	mov	r0, r3
 801336a:	f7fc fa89 	bl	800f880 <_ZN15ContainsFailureD1Ev>
 801336e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013372:	4618      	mov	r0, r3
 8013374:	f7f9 fc8f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013378:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801337c:	4618      	mov	r0, r3
 801337e:	f7f9 fc8a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013382:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013386:	4618      	mov	r0, r3
 8013388:	f7f9 fc85 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801338c:	e000      	b.n	8013390 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801338e:	bf00      	nop
}
 8013390:	37bc      	adds	r7, #188	; 0xbc
 8013392:	46bd      	mov	sp, r7
 8013394:	bd90      	pop	{r4, r7, pc}

08013396 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013396:	b590      	push	{r4, r7, lr}
 8013398:	b099      	sub	sp, #100	; 0x64
 801339a:	af04      	add	r7, sp, #16
 801339c:	60f8      	str	r0, [r7, #12]
 801339e:	60b9      	str	r1, [r7, #8]
 80133a0:	607a      	str	r2, [r7, #4]
 80133a2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80133a4:	68f8      	ldr	r0, [r7, #12]
 80133a6:	f000 fc87 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 80133aa:	4603      	mov	r3, r0
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	3228      	adds	r2, #40	; 0x28
 80133b0:	6812      	ldr	r2, [r2, #0]
 80133b2:	4618      	mov	r0, r3
 80133b4:	4790      	blx	r2
    if (expected != actual)
 80133b6:	68ba      	ldr	r2, [r7, #8]
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d027      	beq.n	801340e <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	339c      	adds	r3, #156	; 0x9c
 80133c4:	681c      	ldr	r4, [r3, #0]
 80133c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133ca:	6839      	ldr	r1, [r7, #0]
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7f9 f8aa 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80133d2:	f107 0014 	add.w	r0, r7, #20
 80133d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80133da:	9302      	str	r3, [sp, #8]
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	9301      	str	r3, [sp, #4]
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	9300      	str	r3, [sp, #0]
 80133e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80133e8:	68f9      	ldr	r1, [r7, #12]
 80133ea:	f7fb fc1f 	bl	800ec2c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 80133ee:	f107 0314 	add.w	r3, r7, #20
 80133f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80133f4:	4619      	mov	r1, r3
 80133f6:	68f8      	ldr	r0, [r7, #12]
 80133f8:	47a0      	blx	r4
 80133fa:	f107 0314 	add.w	r3, r7, #20
 80133fe:	4618      	mov	r0, r3
 8013400:	f7fc f9fa 	bl	800f7f8 <_ZN17LongsEqualFailureD1Ev>
 8013404:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013408:	4618      	mov	r0, r3
 801340a:	f7f9 fc44 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801340e:	bf00      	nop
 8013410:	3754      	adds	r7, #84	; 0x54
 8013412:	46bd      	mov	sp, r7
 8013414:	bd90      	pop	{r4, r7, pc}

08013416 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013416:	b590      	push	{r4, r7, lr}
 8013418:	b099      	sub	sp, #100	; 0x64
 801341a:	af04      	add	r7, sp, #16
 801341c:	60f8      	str	r0, [r7, #12]
 801341e:	60b9      	str	r1, [r7, #8]
 8013420:	607a      	str	r2, [r7, #4]
 8013422:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013424:	68f8      	ldr	r0, [r7, #12]
 8013426:	f000 fc47 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 801342a:	4603      	mov	r3, r0
 801342c:	681a      	ldr	r2, [r3, #0]
 801342e:	3228      	adds	r2, #40	; 0x28
 8013430:	6812      	ldr	r2, [r2, #0]
 8013432:	4618      	mov	r0, r3
 8013434:	4790      	blx	r2
    if (expected != actual)
 8013436:	68ba      	ldr	r2, [r7, #8]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	429a      	cmp	r2, r3
 801343c:	d027      	beq.n	801348e <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	339c      	adds	r3, #156	; 0x9c
 8013444:	681c      	ldr	r4, [r3, #0]
 8013446:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801344a:	6839      	ldr	r1, [r7, #0]
 801344c:	4618      	mov	r0, r3
 801344e:	f7f9 f86a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013452:	f107 0014 	add.w	r0, r7, #20
 8013456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801345a:	9302      	str	r3, [sp, #8]
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	9301      	str	r3, [sp, #4]
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	9300      	str	r3, [sp, #0]
 8013464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013466:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013468:	68f9      	ldr	r1, [r7, #12]
 801346a:	f7fb fcab 	bl	800edc4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 801346e:	f107 0314 	add.w	r3, r7, #20
 8013472:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013474:	4619      	mov	r1, r3
 8013476:	68f8      	ldr	r0, [r7, #12]
 8013478:	47a0      	blx	r4
 801347a:	f107 0314 	add.w	r3, r7, #20
 801347e:	4618      	mov	r0, r3
 8013480:	f7fc f998 	bl	800f7b4 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8013484:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013488:	4618      	mov	r0, r3
 801348a:	f7f9 fc04 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801348e:	bf00      	nop
 8013490:	3754      	adds	r7, #84	; 0x54
 8013492:	46bd      	mov	sp, r7
 8013494:	bd90      	pop	{r4, r7, pc}
	...

08013498 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013498:	b082      	sub	sp, #8
 801349a:	b590      	push	{r4, r7, lr}
 801349c:	b099      	sub	sp, #100	; 0x64
 801349e:	af02      	add	r7, sp, #8
 80134a0:	60f8      	str	r0, [r7, #12]
 80134a2:	1d38      	adds	r0, r7, #4
 80134a4:	e880 0006 	stmia.w	r0, {r1, r2}
 80134a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80134aa:	68f8      	ldr	r0, [r7, #12]
 80134ac:	f000 fc04 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 80134b0:	4603      	mov	r3, r0
 80134b2:	681a      	ldr	r2, [r3, #0]
 80134b4:	3228      	adds	r2, #40	; 0x28
 80134b6:	6812      	ldr	r2, [r2, #0]
 80134b8:	4618      	mov	r0, r3
 80134ba:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	339c      	adds	r3, #156	; 0x9c
 80134c2:	681c      	ldr	r4, [r3, #0]
 80134c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134c8:	4919      	ldr	r1, [pc, #100]	; (8013530 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7f9 f82b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80134d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80134d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7f9 f825 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80134dc:	f107 0014 	add.w	r0, r7, #20
 80134e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80134e4:	9301      	str	r3, [sp, #4]
 80134e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134ea:	9300      	str	r3, [sp, #0]
 80134ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80134ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80134f0:	68f9      	ldr	r1, [r7, #12]
 80134f2:	f7fc f84d 	bl	800f590 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 80134f6:	f107 0314 	add.w	r3, r7, #20
 80134fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80134fe:	4619      	mov	r1, r3
 8013500:	68f8      	ldr	r0, [r7, #12]
 8013502:	47a0      	blx	r4
 8013504:	f107 0314 	add.w	r3, r7, #20
 8013508:	4618      	mov	r0, r3
 801350a:	f7fc f887 	bl	800f61c <_ZN25FeatureUnsupportedFailureD1Ev>
 801350e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013512:	4618      	mov	r0, r3
 8013514:	f7f9 fbbf 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013518:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801351c:	4618      	mov	r0, r3
 801351e:	f7f9 fbba 	bl	800cc96 <_ZN12SimpleStringD1Ev>
#endif
}
 8013522:	bf00      	nop
 8013524:	375c      	adds	r7, #92	; 0x5c
 8013526:	46bd      	mov	sp, r7
 8013528:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801352c:	b002      	add	sp, #8
 801352e:	4770      	bx	lr
 8013530:	080248ec 	.word	0x080248ec

08013534 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013534:	b082      	sub	sp, #8
 8013536:	b590      	push	{r4, r7, lr}
 8013538:	b099      	sub	sp, #100	; 0x64
 801353a:	af02      	add	r7, sp, #8
 801353c:	60f8      	str	r0, [r7, #12]
 801353e:	1d38      	adds	r0, r7, #4
 8013540:	e880 0006 	stmia.w	r0, {r1, r2}
 8013544:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013546:	68f8      	ldr	r0, [r7, #12]
 8013548:	f000 fbb6 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 801354c:	4603      	mov	r3, r0
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	3228      	adds	r2, #40	; 0x28
 8013552:	6812      	ldr	r2, [r2, #0]
 8013554:	4618      	mov	r0, r3
 8013556:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	339c      	adds	r3, #156	; 0x9c
 801355e:	681c      	ldr	r4, [r3, #0]
 8013560:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013564:	4919      	ldr	r1, [pc, #100]	; (80135cc <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013566:	4618      	mov	r0, r3
 8013568:	f7f8 ffdd 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801356c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013570:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013572:	4618      	mov	r0, r3
 8013574:	f7f8 ffd7 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013578:	f107 0014 	add.w	r0, r7, #20
 801357c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013580:	9301      	str	r3, [sp, #4]
 8013582:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013586:	9300      	str	r3, [sp, #0]
 8013588:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801358a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801358c:	68f9      	ldr	r1, [r7, #12]
 801358e:	f7fb ffff 	bl	800f590 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013592:	f107 0314 	add.w	r3, r7, #20
 8013596:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801359a:	4619      	mov	r1, r3
 801359c:	68f8      	ldr	r0, [r7, #12]
 801359e:	47a0      	blx	r4
 80135a0:	f107 0314 	add.w	r3, r7, #20
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7fc f839 	bl	800f61c <_ZN25FeatureUnsupportedFailureD1Ev>
 80135aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7f9 fb71 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80135b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7f9 fb6c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
#endif
}
 80135be:	bf00      	nop
 80135c0:	375c      	adds	r7, #92	; 0x5c
 80135c2:	46bd      	mov	sp, r7
 80135c4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80135c8:	b002      	add	sp, #8
 80135ca:	4770      	bx	lr
 80135cc:	080248ec 	.word	0x080248ec

080135d0 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80135d0:	b590      	push	{r4, r7, lr}
 80135d2:	b099      	sub	sp, #100	; 0x64
 80135d4:	af04      	add	r7, sp, #16
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	607b      	str	r3, [r7, #4]
 80135da:	460b      	mov	r3, r1
 80135dc:	72fb      	strb	r3, [r7, #11]
 80135de:	4613      	mov	r3, r2
 80135e0:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 80135e2:	68f8      	ldr	r0, [r7, #12]
 80135e4:	f000 fb68 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 80135e8:	4603      	mov	r3, r0
 80135ea:	681a      	ldr	r2, [r3, #0]
 80135ec:	3228      	adds	r2, #40	; 0x28
 80135ee:	6812      	ldr	r2, [r2, #0]
 80135f0:	4618      	mov	r0, r3
 80135f2:	4790      	blx	r2
    if (expected != actual)
 80135f4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80135f8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d029      	beq.n	8013654 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	339c      	adds	r3, #156	; 0x9c
 8013606:	681c      	ldr	r4, [r3, #0]
 8013608:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801360c:	6879      	ldr	r1, [r7, #4]
 801360e:	4618      	mov	r0, r3
 8013610:	f7f8 ff89 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013614:	f107 0014 	add.w	r0, r7, #20
 8013618:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801361c:	9302      	str	r3, [sp, #8]
 801361e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8013622:	9301      	str	r3, [sp, #4]
 8013624:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013628:	9300      	str	r3, [sp, #0]
 801362a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801362c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801362e:	68f9      	ldr	r1, [r7, #12]
 8013630:	f7fb fc94 	bl	800ef5c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8013634:	f107 0314 	add.w	r3, r7, #20
 8013638:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801363a:	4619      	mov	r1, r3
 801363c:	68f8      	ldr	r0, [r7, #12]
 801363e:	47a0      	blx	r4
 8013640:	f107 0314 	add.w	r3, r7, #20
 8013644:	4618      	mov	r0, r3
 8013646:	f7fc f893 	bl	800f770 <_ZN23SignedBytesEqualFailureD1Ev>
 801364a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801364e:	4618      	mov	r0, r3
 8013650:	f7f9 fb21 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8013654:	bf00      	nop
 8013656:	3754      	adds	r7, #84	; 0x54
 8013658:	46bd      	mov	sp, r7
 801365a:	bd90      	pop	{r4, r7, pc}

0801365c <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801365c:	b590      	push	{r4, r7, lr}
 801365e:	b09d      	sub	sp, #116	; 0x74
 8013660:	af04      	add	r7, sp, #16
 8013662:	60f8      	str	r0, [r7, #12]
 8013664:	60b9      	str	r1, [r7, #8]
 8013666:	607a      	str	r2, [r7, #4]
 8013668:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801366a:	68f8      	ldr	r0, [r7, #12]
 801366c:	f000 fb24 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8013670:	4603      	mov	r3, r0
 8013672:	681a      	ldr	r2, [r3, #0]
 8013674:	3228      	adds	r2, #40	; 0x28
 8013676:	6812      	ldr	r2, [r2, #0]
 8013678:	4618      	mov	r0, r3
 801367a:	4790      	blx	r2
    if (expected != actual)
 801367c:	68ba      	ldr	r2, [r7, #8]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	429a      	cmp	r2, r3
 8013682:	d03f      	beq.n	8013704 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	339c      	adds	r3, #156	; 0x9c
 801368a:	681c      	ldr	r4, [r3, #0]
 801368c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013690:	68b9      	ldr	r1, [r7, #8]
 8013692:	4618      	mov	r0, r3
 8013694:	f7f9 fdea 	bl	800d26c <_Z10StringFromPKv>
 8013698:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801369c:	6879      	ldr	r1, [r7, #4]
 801369e:	4618      	mov	r0, r3
 80136a0:	f7f9 fde4 	bl	800d26c <_Z10StringFromPKv>
 80136a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80136a8:	6839      	ldr	r1, [r7, #0]
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7f8 ff3b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80136b0:	f107 0014 	add.w	r0, r7, #20
 80136b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80136b8:	9302      	str	r3, [sp, #8]
 80136ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80136be:	9301      	str	r3, [sp, #4]
 80136c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136c4:	9300      	str	r3, [sp, #0]
 80136c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80136c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80136ca:	68f9      	ldr	r1, [r7, #12]
 80136cc:	f7fb f814 	bl	800e6f8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80136d0:	f107 0314 	add.w	r3, r7, #20
 80136d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80136d6:	4619      	mov	r1, r3
 80136d8:	68f8      	ldr	r0, [r7, #12]
 80136da:	47a0      	blx	r4
 80136dc:	f107 0314 	add.w	r3, r7, #20
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7fc f955 	bl	800f990 <_ZN13EqualsFailureD1Ev>
 80136e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7f9 fad3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80136f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7f9 face 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80136fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136fe:	4618      	mov	r0, r3
 8013700:	f7f9 fac9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8013704:	bf00      	nop
 8013706:	3764      	adds	r7, #100	; 0x64
 8013708:	46bd      	mov	sp, r7
 801370a:	bd90      	pop	{r4, r7, pc}

0801370c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801370c:	b590      	push	{r4, r7, lr}
 801370e:	b09d      	sub	sp, #116	; 0x74
 8013710:	af04      	add	r7, sp, #16
 8013712:	60f8      	str	r0, [r7, #12]
 8013714:	60b9      	str	r1, [r7, #8]
 8013716:	607a      	str	r2, [r7, #4]
 8013718:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801371a:	68f8      	ldr	r0, [r7, #12]
 801371c:	f000 facc 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8013720:	4603      	mov	r3, r0
 8013722:	681a      	ldr	r2, [r3, #0]
 8013724:	3228      	adds	r2, #40	; 0x28
 8013726:	6812      	ldr	r2, [r2, #0]
 8013728:	4618      	mov	r0, r3
 801372a:	4790      	blx	r2
    if (expected != actual)
 801372c:	68ba      	ldr	r2, [r7, #8]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	429a      	cmp	r2, r3
 8013732:	d03f      	beq.n	80137b4 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	339c      	adds	r3, #156	; 0x9c
 801373a:	681c      	ldr	r4, [r3, #0]
 801373c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013740:	68b9      	ldr	r1, [r7, #8]
 8013742:	4618      	mov	r0, r3
 8013744:	f7f9 fdbc 	bl	800d2c0 <_Z10StringFromPFvvE>
 8013748:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801374c:	6879      	ldr	r1, [r7, #4]
 801374e:	4618      	mov	r0, r3
 8013750:	f7f9 fdb6 	bl	800d2c0 <_Z10StringFromPFvvE>
 8013754:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013758:	6839      	ldr	r1, [r7, #0]
 801375a:	4618      	mov	r0, r3
 801375c:	f7f8 fee3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013760:	f107 0014 	add.w	r0, r7, #20
 8013764:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013768:	9302      	str	r3, [sp, #8]
 801376a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801376e:	9301      	str	r3, [sp, #4]
 8013770:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013774:	9300      	str	r3, [sp, #0]
 8013776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013778:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801377a:	68f9      	ldr	r1, [r7, #12]
 801377c:	f7fa ffbc 	bl	800e6f8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013780:	f107 0314 	add.w	r3, r7, #20
 8013784:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013786:	4619      	mov	r1, r3
 8013788:	68f8      	ldr	r0, [r7, #12]
 801378a:	47a0      	blx	r4
 801378c:	f107 0314 	add.w	r3, r7, #20
 8013790:	4618      	mov	r0, r3
 8013792:	f7fc f8fd 	bl	800f990 <_ZN13EqualsFailureD1Ev>
 8013796:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801379a:	4618      	mov	r0, r3
 801379c:	f7f9 fa7b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80137a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80137a4:	4618      	mov	r0, r3
 80137a6:	f7f9 fa76 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80137aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7f9 fa71 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80137b4:	bf00      	nop
 80137b6:	3764      	adds	r7, #100	; 0x64
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd90      	pop	{r4, r7, pc}

080137bc <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80137bc:	b590      	push	{r4, r7, lr}
 80137be:	b09d      	sub	sp, #116	; 0x74
 80137c0:	af02      	add	r7, sp, #8
 80137c2:	6278      	str	r0, [r7, #36]	; 0x24
 80137c4:	ed87 0b06 	vstr	d0, [r7, #24]
 80137c8:	ed87 1b04 	vstr	d1, [r7, #16]
 80137cc:	ed87 2b02 	vstr	d2, [r7, #8]
 80137d0:	6239      	str	r1, [r7, #32]
 80137d2:	607a      	str	r2, [r7, #4]
 80137d4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80137d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137d8:	f000 fa6e 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 80137dc:	4603      	mov	r3, r0
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	3228      	adds	r2, #40	; 0x28
 80137e2:	6812      	ldr	r2, [r2, #0]
 80137e4:	4618      	mov	r0, r3
 80137e6:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 80137e8:	ed97 2b02 	vldr	d2, [r7, #8]
 80137ec:	ed97 1b04 	vldr	d1, [r7, #16]
 80137f0:	ed97 0b06 	vldr	d0, [r7, #24]
 80137f4:	f7fe fd4a 	bl	801228c <_Z13doubles_equalddd>
 80137f8:	4603      	mov	r3, r0
 80137fa:	f083 0301 	eor.w	r3, r3, #1
 80137fe:	b2db      	uxtb	r3, r3
 8013800:	2b00      	cmp	r3, #0
 8013802:	d029      	beq.n	8013858 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8013804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	339c      	adds	r3, #156	; 0x9c
 801380a:	681c      	ldr	r4, [r3, #0]
 801380c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013810:	6a39      	ldr	r1, [r7, #32]
 8013812:	4618      	mov	r0, r3
 8013814:	f7f8 fe87 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013818:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801381c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013820:	9300      	str	r3, [sp, #0]
 8013822:	ed97 2b02 	vldr	d2, [r7, #8]
 8013826:	ed97 1b04 	vldr	d1, [r7, #16]
 801382a:	ed97 0b06 	vldr	d0, [r7, #24]
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013834:	f7fa ffa2 	bl	800e77c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8013838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801383c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801383e:	4619      	mov	r1, r3
 8013840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013842:	47a0      	blx	r4
 8013844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013848:	4618      	mov	r0, r3
 801384a:	f7fc f87f 	bl	800f94c <_ZN19DoublesEqualFailureD1Ev>
 801384e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013852:	4618      	mov	r0, r3
 8013854:	f7f9 fa1f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8013858:	bf00      	nop
 801385a:	376c      	adds	r7, #108	; 0x6c
 801385c:	46bd      	mov	sp, r7
 801385e:	bd90      	pop	{r4, r7, pc}

08013860 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013860:	b590      	push	{r4, r7, lr}
 8013862:	b0a7      	sub	sp, #156	; 0x9c
 8013864:	af04      	add	r7, sp, #16
 8013866:	60f8      	str	r0, [r7, #12]
 8013868:	60b9      	str	r1, [r7, #8]
 801386a:	607a      	str	r2, [r7, #4]
 801386c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801386e:	68f8      	ldr	r0, [r7, #12]
 8013870:	f000 fa22 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8013874:	4603      	mov	r3, r0
 8013876:	681a      	ldr	r2, [r3, #0]
 8013878:	3228      	adds	r2, #40	; 0x28
 801387a:	6812      	ldr	r2, [r2, #0]
 801387c:	4618      	mov	r0, r3
 801387e:	4790      	blx	r2
	if (length == 0) return;
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d075      	beq.n	8013972 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d102      	bne.n	8013892 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d071      	beq.n	8013976 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d002      	beq.n	801389e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d12d      	bne.n	80138fa <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	339c      	adds	r3, #156	; 0x9c
 80138a4:	681c      	ldr	r4, [r3, #0]
 80138a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138aa:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7f8 fe39 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80138b4:	f107 0010 	add.w	r0, r7, #16
 80138b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138bc:	9303      	str	r3, [sp, #12]
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	9302      	str	r3, [sp, #8]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	9301      	str	r3, [sp, #4]
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	9300      	str	r3, [sp, #0]
 80138ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80138ce:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80138d2:	68f9      	ldr	r1, [r7, #12]
 80138d4:	f7fb fd70 	bl	800f3b8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80138d8:	f107 0310 	add.w	r3, r7, #16
 80138dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80138e0:	4619      	mov	r1, r3
 80138e2:	68f8      	ldr	r0, [r7, #12]
 80138e4:	47a0      	blx	r4
 80138e6:	f107 0310 	add.w	r3, r7, #16
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7fb feda 	bl	800f6a4 <_ZN18BinaryEqualFailureD1Ev>
 80138f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138f4:	4618      	mov	r0, r3
 80138f6:	f7f9 f9ce 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 80138fa:	683a      	ldr	r2, [r7, #0]
 80138fc:	6879      	ldr	r1, [r7, #4]
 80138fe:	68b8      	ldr	r0, [r7, #8]
 8013900:	f7f8 fd30 	bl	800c364 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8013904:	4603      	mov	r3, r0
 8013906:	2b00      	cmp	r3, #0
 8013908:	bf14      	ite	ne
 801390a:	2301      	movne	r3, #1
 801390c:	2300      	moveq	r3, #0
 801390e:	b2db      	uxtb	r3, r3
 8013910:	2b00      	cmp	r3, #0
 8013912:	d031      	beq.n	8013978 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	339c      	adds	r3, #156	; 0x9c
 801391a:	681c      	ldr	r4, [r3, #0]
 801391c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013920:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013924:	4618      	mov	r0, r3
 8013926:	f7f8 fdfe 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801392a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801392e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013932:	9303      	str	r3, [sp, #12]
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	9302      	str	r3, [sp, #8]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	9301      	str	r3, [sp, #4]
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	9300      	str	r3, [sp, #0]
 8013940:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013944:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013948:	68f9      	ldr	r1, [r7, #12]
 801394a:	f7fb fd35 	bl	800f3b8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 801394e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013952:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013956:	4619      	mov	r1, r3
 8013958:	68f8      	ldr	r0, [r7, #12]
 801395a:	47a0      	blx	r4
 801395c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013960:	4618      	mov	r0, r3
 8013962:	f7fb fe9f 	bl	800f6a4 <_ZN18BinaryEqualFailureD1Ev>
 8013966:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801396a:	4618      	mov	r0, r3
 801396c:	f7f9 f993 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013970:	e002      	b.n	8013978 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8013972:	bf00      	nop
 8013974:	e000      	b.n	8013978 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013976:	bf00      	nop
}
 8013978:	378c      	adds	r7, #140	; 0x8c
 801397a:	46bd      	mov	sp, r7
 801397c:	bd90      	pop	{r4, r7, pc}

0801397e <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801397e:	b590      	push	{r4, r7, lr}
 8013980:	b09b      	sub	sp, #108	; 0x6c
 8013982:	af06      	add	r7, sp, #24
 8013984:	60f8      	str	r0, [r7, #12]
 8013986:	60b9      	str	r1, [r7, #8]
 8013988:	607a      	str	r2, [r7, #4]
 801398a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801398c:	68f8      	ldr	r0, [r7, #12]
 801398e:	f000 f993 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8013992:	4603      	mov	r3, r0
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	3228      	adds	r2, #40	; 0x28
 8013998:	6812      	ldr	r2, [r2, #0]
 801399a:	4618      	mov	r0, r3
 801399c:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 801399e:	68ba      	ldr	r2, [r7, #8]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	405a      	eors	r2, r3
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	4013      	ands	r3, r2
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d02b      	beq.n	8013a04 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	339c      	adds	r3, #156	; 0x9c
 80139b2:	681c      	ldr	r4, [r3, #0]
 80139b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7f8 fdb3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80139c0:	f107 0014 	add.w	r0, r7, #20
 80139c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139c8:	9304      	str	r3, [sp, #16]
 80139ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80139cc:	9303      	str	r3, [sp, #12]
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	9302      	str	r3, [sp, #8]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	9301      	str	r3, [sp, #4]
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	9300      	str	r3, [sp, #0]
 80139da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80139de:	68f9      	ldr	r1, [r7, #12]
 80139e0:	f7fb fd7a 	bl	800f4d8 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 80139e4:	f107 0314 	add.w	r3, r7, #20
 80139e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80139ea:	4619      	mov	r1, r3
 80139ec:	68f8      	ldr	r0, [r7, #12]
 80139ee:	47a0      	blx	r4
 80139f0:	f107 0314 	add.w	r3, r7, #20
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7fb fe33 	bl	800f660 <_ZN16BitsEqualFailureD1Ev>
 80139fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7f9 f949 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8013a04:	bf00      	nop
 8013a06:	3754      	adds	r7, #84	; 0x54
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd90      	pop	{r4, r7, pc}

08013a0c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8013a0c:	b590      	push	{r4, r7, lr}
 8013a0e:	b09d      	sub	sp, #116	; 0x74
 8013a10:	af04      	add	r7, sp, #16
 8013a12:	60f8      	str	r0, [r7, #12]
 8013a14:	607a      	str	r2, [r7, #4]
 8013a16:	603b      	str	r3, [r7, #0]
 8013a18:	460b      	mov	r3, r1
 8013a1a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8013a1c:	68f8      	ldr	r0, [r7, #12]
 8013a1e:	f000 f94b 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8013a22:	4603      	mov	r3, r0
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	3228      	adds	r2, #40	; 0x28
 8013a28:	6812      	ldr	r2, [r2, #0]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	4790      	blx	r2
    if (failed)
 8013a2e:	7afb      	ldrb	r3, [r7, #11]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d03f      	beq.n	8013ab4 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	339c      	adds	r3, #156	; 0x9c
 8013a3a:	681c      	ldr	r4, [r3, #0]
 8013a3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a40:	6879      	ldr	r1, [r7, #4]
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7f8 fd6f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013a48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a4c:	6839      	ldr	r1, [r7, #0]
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7f8 fd69 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013a54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a58:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7f8 fd63 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013a60:	f107 0014 	add.w	r0, r7, #20
 8013a64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a68:	9302      	str	r3, [sp, #8]
 8013a6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a6e:	9301      	str	r3, [sp, #4]
 8013a70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013a74:	9300      	str	r3, [sp, #0]
 8013a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013a7a:	68f9      	ldr	r1, [r7, #12]
 8013a7c:	f7fa ff30 	bl	800e8e0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013a80:	f107 0314 	add.w	r3, r7, #20
 8013a84:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013a86:	4619      	mov	r1, r3
 8013a88:	68f8      	ldr	r0, [r7, #12]
 8013a8a:	47a0      	blx	r4
 8013a8c:	f107 0314 	add.w	r3, r7, #20
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7fb ff39 	bl	800f908 <_ZN17CheckEqualFailureD1Ev>
 8013a96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7f9 f8fb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013aa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7f9 f8f6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013aaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7f9 f8f1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8013ab4:	bf00      	nop
 8013ab6:	3764      	adds	r7, #100	; 0x64
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd90      	pop	{r4, r7, pc}

08013abc <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8013abc:	b590      	push	{r4, r7, lr}
 8013abe:	b09d      	sub	sp, #116	; 0x74
 8013ac0:	af04      	add	r7, sp, #16
 8013ac2:	60f8      	str	r0, [r7, #12]
 8013ac4:	607a      	str	r2, [r7, #4]
 8013ac6:	603b      	str	r3, [r7, #0]
 8013ac8:	460b      	mov	r3, r1
 8013aca:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8013acc:	68f8      	ldr	r0, [r7, #12]
 8013ace:	f000 f8f3 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	3228      	adds	r2, #40	; 0x28
 8013ad8:	6812      	ldr	r2, [r2, #0]
 8013ada:	4618      	mov	r0, r3
 8013adc:	4790      	blx	r2
    if (!comparison)
 8013ade:	7afb      	ldrb	r3, [r7, #11]
 8013ae0:	f083 0301 	eor.w	r3, r3, #1
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d03f      	beq.n	8013b6a <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	339c      	adds	r3, #156	; 0x9c
 8013af0:	681c      	ldr	r4, [r3, #0]
 8013af2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013af6:	6879      	ldr	r1, [r7, #4]
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7f8 fd14 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013afe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013b02:	6839      	ldr	r1, [r7, #0]
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7f8 fd0e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013b0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b0e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7f8 fd08 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8013b16:	f107 0014 	add.w	r0, r7, #20
 8013b1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b1e:	9302      	str	r3, [sp, #8]
 8013b20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013b24:	9301      	str	r3, [sp, #4]
 8013b26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b2a:	9300      	str	r3, [sp, #0]
 8013b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013b30:	68f9      	ldr	r1, [r7, #12]
 8013b32:	f7fa ff83 	bl	800ea3c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013b36:	f107 0314 	add.w	r3, r7, #20
 8013b3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013b3c:	4619      	mov	r1, r3
 8013b3e:	68f8      	ldr	r0, [r7, #12]
 8013b40:	47a0      	blx	r4
 8013b42:	f107 0314 	add.w	r3, r7, #20
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7fb febc 	bl	800f8c4 <_ZN17ComparisonFailureD1Ev>
 8013b4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7f9 f8a0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013b56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7f9 f89b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8013b60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7f9 f896 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8013b6a:	bf00      	nop
 8013b6c:	3764      	adds	r7, #100	; 0x64
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd90      	pop	{r4, r7, pc}
	...

08013b74 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8013b74:	b5b0      	push	{r4, r5, r7, lr}
 8013b76:	b088      	sub	sp, #32
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	60b9      	str	r1, [r7, #8]
 8013b7e:	607a      	str	r2, [r7, #4]
 8013b80:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8013b82:	f107 0310 	add.w	r3, r7, #16
 8013b86:	4924      	ldr	r1, [pc, #144]	; (8013c18 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7f8 fccc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8013b8e:	f107 0310 	add.w	r3, r7, #16
 8013b92:	6879      	ldr	r1, [r7, #4]
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7f9 f90d 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8013b9a:	f107 0310 	add.w	r3, r7, #16
 8013b9e:	491f      	ldr	r1, [pc, #124]	; (8013c1c <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7f9 f907 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8013ba6:	f107 0318 	add.w	r3, r7, #24
 8013baa:	6839      	ldr	r1, [r7, #0]
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7f9 fda1 	bl	800d6f4 <_Z10StringFromj>
 8013bb2:	f107 0218 	add.w	r2, r7, #24
 8013bb6:	f107 0310 	add.w	r3, r7, #16
 8013bba:	4611      	mov	r1, r2
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7f9 f8e7 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8013bc2:	f107 0318 	add.w	r3, r7, #24
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7f9 f865 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8013bcc:	f107 0310 	add.w	r3, r7, #16
 8013bd0:	4913      	ldr	r1, [pc, #76]	; (8013c20 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7f9 f8ee 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8013bd8:	f107 0310 	add.w	r3, r7, #16
 8013bdc:	68b9      	ldr	r1, [r7, #8]
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7f9 f8e8 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8013be4:	68f8      	ldr	r0, [r7, #12]
 8013be6:	f000 f867 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8013bea:	4604      	mov	r4, r0
 8013bec:	6823      	ldr	r3, [r4, #0]
 8013bee:	3338      	adds	r3, #56	; 0x38
 8013bf0:	681d      	ldr	r5, [r3, #0]
 8013bf2:	f107 0310 	add.w	r3, r7, #16
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7f9 f820 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	4619      	mov	r1, r3
 8013c00:	4620      	mov	r0, r4
 8013c02:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8013c04:	f107 0310 	add.w	r3, r7, #16
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7f9 f844 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 8013c0e:	bf00      	nop
 8013c10:	3720      	adds	r7, #32
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bdb0      	pop	{r4, r5, r7, pc}
 8013c16:	bf00      	nop
 8013c18:	08024904 	.word	0x08024904
 8013c1c:	08024908 	.word	0x08024908
 8013c20:	0802490c 	.word	0x0802490c

08013c24 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8013c24:	b590      	push	{r4, r7, lr}
 8013c26:	b085      	sub	sp, #20
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	60f8      	str	r0, [r7, #12]
 8013c2c:	60b9      	str	r1, [r7, #8]
 8013c2e:	607a      	str	r2, [r7, #4]
 8013c30:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	3370      	adds	r3, #112	; 0x70
 8013c38:	681c      	ldr	r4, [r3, #0]
 8013c3a:	68b8      	ldr	r0, [r7, #8]
 8013c3c:	f7f8 fffe 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 8013c40:	4601      	mov	r1, r0
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	47a0      	blx	r4
}
 8013c4a:	bf00      	nop
 8013c4c:	3714      	adds	r7, #20
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd90      	pop	{r4, r7, pc}

08013c52 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8013c52:	b580      	push	{r7, lr}
 8013c54:	b082      	sub	sp, #8
 8013c56:	af00      	add	r7, sp, #0
 8013c58:	6078      	str	r0, [r7, #4]
 8013c5a:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f000 f82b 	bl	8013cb8 <_ZN10UtestShell13getTestResultEv>
 8013c62:	4603      	mov	r3, r0
 8013c64:	681a      	ldr	r2, [r3, #0]
 8013c66:	323c      	adds	r2, #60	; 0x3c
 8013c68:	6812      	ldr	r2, [r2, #0]
 8013c6a:	6839      	ldr	r1, [r7, #0]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	4790      	blx	r2
}
 8013c70:	bf00      	nop
 8013c72:	3708      	adds	r7, #8
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}

08013c78 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b083      	sub	sp, #12
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
 8013c80:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8013c82:	4a04      	ldr	r2, [pc, #16]	; (8013c94 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	6013      	str	r3, [r2, #0]
}
 8013c88:	bf00      	nop
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr
 8013c94:	20000a58 	.word	0x20000a58

08013c98 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8013c98:	b480      	push	{r7}
 8013c9a:	b083      	sub	sp, #12
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
 8013ca0:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8013ca2:	4a04      	ldr	r2, [pc, #16]	; (8013cb4 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	6013      	str	r3, [r2, #0]
}
 8013ca8:	bf00      	nop
 8013caa:	370c      	adds	r7, #12
 8013cac:	46bd      	mov	sp, r7
 8013cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb2:	4770      	bx	lr
 8013cb4:	20000a5c 	.word	0x20000a5c

08013cb8 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b082      	sub	sp, #8
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8013cc0:	4b09      	ldr	r3, [pc, #36]	; (8013ce8 <_ZN10UtestShell13getTestResultEv+0x30>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d109      	bne.n	8013cdc <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8013cc8:	f7fe fbb2 	bl	8012430 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	32a4      	adds	r2, #164	; 0xa4
 8013cd2:	6812      	ldr	r2, [r2, #0]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	4790      	blx	r2
 8013cd8:	4603      	mov	r3, r0
 8013cda:	e001      	b.n	8013ce0 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8013cdc:	4b02      	ldr	r3, [pc, #8]	; (8013ce8 <_ZN10UtestShell13getTestResultEv+0x30>)
 8013cde:	681b      	ldr	r3, [r3, #0]
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	20000a58 	.word	0x20000a58

08013cec <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8013cf0:	4b05      	ldr	r3, [pc, #20]	; (8013d08 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d103      	bne.n	8013d00 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8013cf8:	f7fe fb9a 	bl	8012430 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	e001      	b.n	8013d04 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8013d00:	4b01      	ldr	r3, [pc, #4]	; (8013d08 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8013d02:	681b      	ldr	r3, [r3, #0]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	bd80      	pop	{r7, pc}
 8013d08:	20000a5c 	.word	0x20000a5c

08013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8013d10:	4b03      	ldr	r3, [pc, #12]	; (8013d20 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8013d12:	681b      	ldr	r3, [r3, #0]
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	46bd      	mov	sp, r7
 8013d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1c:	4770      	bx	lr
 8013d1e:	bf00      	nop
 8013d20:	20000094 	.word	0x20000094

08013d24 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8013d24:	b480      	push	{r7}
 8013d26:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8013d28:	4b03      	ldr	r3, [pc, #12]	; (8013d38 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8013d2a:	4a04      	ldr	r2, [pc, #16]	; (8013d3c <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8013d2c:	601a      	str	r2, [r3, #0]
}
 8013d2e:	bf00      	nop
 8013d30:	46bd      	mov	sp, r7
 8013d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d36:	4770      	bx	lr
 8013d38:	20000094 	.word	0x20000094
 8013d3c:	20000090 	.word	0x20000090

08013d40 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	4a04      	ldr	r2, [pc, #16]	; (8013d5c <_ZN5UtestC1Ev+0x1c>)
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	601a      	str	r2, [r3, #0]
{
}
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4618      	mov	r0, r3
 8013d52:	370c      	adds	r7, #12
 8013d54:	46bd      	mov	sp, r7
 8013d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5a:	4770      	bx	lr
 8013d5c:	08028048 	.word	0x08028048

08013d60 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	4a04      	ldr	r2, [pc, #16]	; (8013d7c <_ZN5UtestD1Ev+0x1c>)
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	601a      	str	r2, [r3, #0]
{
}
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	4618      	mov	r0, r3
 8013d72:	370c      	adds	r7, #12
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr
 8013d7c:	08028048 	.word	0x08028048

08013d80 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b082      	sub	sp, #8
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
}
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f7ff ffe9 	bl	8013d60 <_ZN5UtestD1Ev>
 8013d8e:	2104      	movs	r1, #4
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7f6 f819 	bl	8009dc8 <_ZdlPvj>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3708      	adds	r7, #8
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8013da8:	4b0d      	ldr	r3, [pc, #52]	; (8013de0 <_ZN5Utest3runEv+0x40>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	6879      	ldr	r1, [r7, #4]
 8013dae:	480d      	ldr	r0, [pc, #52]	; (8013de4 <_ZN5Utest3runEv+0x44>)
 8013db0:	4798      	blx	r3
 8013db2:	4603      	mov	r3, r0
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	bf14      	ite	ne
 8013db8:	2301      	movne	r3, #1
 8013dba:	2300      	moveq	r3, #0
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d004      	beq.n	8013dcc <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8013dc2:	4b07      	ldr	r3, [pc, #28]	; (8013de0 <_ZN5Utest3runEv+0x40>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	6879      	ldr	r1, [r7, #4]
 8013dc8:	4807      	ldr	r0, [pc, #28]	; (8013de8 <_ZN5Utest3runEv+0x48>)
 8013dca:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8013dcc:	4b04      	ldr	r3, [pc, #16]	; (8013de0 <_ZN5Utest3runEv+0x40>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	6879      	ldr	r1, [r7, #4]
 8013dd2:	4806      	ldr	r0, [pc, #24]	; (8013dec <_ZN5Utest3runEv+0x4c>)
 8013dd4:	4798      	blx	r3
}
 8013dd6:	bf00      	nop
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
 8013dde:	bf00      	nop
 8013de0:	200000a4 	.word	0x200000a4
 8013de4:	0801248d 	.word	0x0801248d
 8013de8:	080124a9 	.word	0x080124a9
 8013dec:	080124c5 	.word	0x080124c5

08013df0 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8013df0:	b480      	push	{r7}
 8013df2:	b083      	sub	sp, #12
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
}
 8013df8:	bf00      	nop
 8013dfa:	370c      	adds	r7, #12
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e02:	4770      	bx	lr

08013e04 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8013e04:	b480      	push	{r7}
 8013e06:	b083      	sub	sp, #12
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
}
 8013e0c:	bf00      	nop
 8013e0e:	370c      	adds	r7, #12
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr

08013e18 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
}
 8013e20:	bf00      	nop
 8013e22:	370c      	adds	r7, #12
 8013e24:	46bd      	mov	sp, r7
 8013e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2a:	4770      	bx	lr

08013e2c <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8013e2c:	b480      	push	{r7}
 8013e2e:	b083      	sub	sp, #12
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
 8013e34:	4a04      	ldr	r2, [pc, #16]	; (8013e48 <_ZN14TestTerminatorD1Ev+0x1c>)
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	601a      	str	r2, [r3, #0]
{
}
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	370c      	adds	r7, #12
 8013e40:	46bd      	mov	sp, r7
 8013e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e46:	4770      	bx	lr
 8013e48:	08028034 	.word	0x08028034

08013e4c <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8013e54:	2300      	movs	r3, #0
 8013e56:	60fb      	str	r3, [r7, #12]
 8013e58:	f107 030c 	add.w	r3, r7, #12
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7f6 f975 	bl	800a14c <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8013e62:	f107 030c 	add.w	r3, r7, #12
 8013e66:	4618      	mov	r0, r3
 8013e68:	f000 f82c 	bl	8013ec4 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8013e6c:	f107 030c 	add.w	r3, r7, #12
 8013e70:	4618      	mov	r0, r3
 8013e72:	f000 f835 	bl	8013ee0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8013e76:	bf00      	nop
 8013e78:	3710      	adds	r7, #16
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}
	...

08013e80 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	4a05      	ldr	r2, [pc, #20]	; (8013ea0 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	601a      	str	r2, [r3, #0]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7ff ffcb 	bl	8013e2c <_ZN14TestTerminatorD1Ev>
{
}
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3708      	adds	r7, #8
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	08028020 	.word	0x08028020

08013ea4 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b082      	sub	sp, #8
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
}
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f7ff ffe7 	bl	8013e80 <_ZN20NormalTestTerminatorD1Ev>
 8013eb2:	2104      	movs	r1, #4
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f7f5 ff87 	bl	8009dc8 <_ZdlPvj>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3708      	adds	r7, #8
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8013ecc:	4b03      	ldr	r3, [pc, #12]	; (8013edc <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8013ed2:	bf00      	nop
 8013ed4:	3708      	adds	r7, #8
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}
 8013eda:	bf00      	nop
 8013edc:	200000a0 	.word	0x200000a0

08013ee0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	4a05      	ldr	r2, [pc, #20]	; (8013f00 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	601a      	str	r2, [r3, #0]
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7ff ff9b 	bl	8013e2c <_ZN14TestTerminatorD1Ev>
{
}
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3708      	adds	r7, #8
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	0802800c 	.word	0x0802800c

08013f04 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
}
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f7ff ffe7 	bl	8013ee0 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8013f12:	2104      	movs	r1, #4
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f7f5 ff57 	bl	8009dc8 <_ZdlPvj>
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3708      	adds	r7, #8
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}

08013f24 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8013f2c:	f7fe fbaa 	bl	8012684 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7ff ff8a 	bl	8013e4c <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8013f38:	bf00      	nop
 8013f3a:	3708      	adds	r7, #8
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	4a05      	ldr	r2, [pc, #20]	; (8013f60 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	601a      	str	r2, [r3, #0]
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7ff ff95 	bl	8013e80 <_ZN20NormalTestTerminatorD1Ev>
{
}
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3708      	adds	r7, #8
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}
 8013f60:	08027ff8 	.word	0x08027ff8

08013f64 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
}
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	f7ff ffe7 	bl	8013f40 <_ZN22CrashingTestTerminatorD1Ev>
 8013f72:	2104      	movs	r1, #4
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f7f5 ff27 	bl	8009dc8 <_ZdlPvj>
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	3708      	adds	r7, #8
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd80      	pop	{r7, pc}

08013f84 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b084      	sub	sp, #16
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2200      	movs	r2, #0
 8013f92:	601a      	str	r2, [r3, #0]
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	2200      	movs	r2, #0
 8013f98:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d007      	beq.n	8013fb0 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	3310      	adds	r3, #16
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	6838      	ldr	r0, [r7, #0]
 8013faa:	4798      	blx	r3
 8013fac:	4603      	mov	r3, r0
 8013fae:	e000      	b.n	8013fb2 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	687a      	ldr	r2, [r7, #4]
 8013fb4:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d02d      	beq.n	801401a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	d201      	bcs.n	8013fce <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8013fca:	009b      	lsls	r3, r3, #2
 8013fcc:	e001      	b.n	8013fd2 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8013fce:	f04f 33ff 	mov.w	r3, #4294967295
 8013fd2:	f240 3237 	movw	r2, #823	; 0x337
 8013fd6:	4914      	ldr	r1, [pc, #80]	; (8014028 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7f5 ff05 	bl	8009de8 <_ZnajPKci>
 8013fde:	4602      	mov	r2, r0
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8013fe8:	2300      	movs	r3, #0
 8013fea:	60bb      	str	r3, [r7, #8]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	68ba      	ldr	r2, [r7, #8]
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d212      	bcs.n	801401c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681a      	ldr	r2, [r3, #0]
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	009b      	lsls	r3, r3, #2
 8013ffe:	4413      	add	r3, r2
 8014000:	68fa      	ldr	r2, [r7, #12]
 8014002:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	330c      	adds	r3, #12
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	68f8      	ldr	r0, [r7, #12]
 801400e:	4798      	blx	r3
 8014010:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	3301      	adds	r3, #1
 8014016:	60bb      	str	r3, [r7, #8]
 8014018:	e7e8      	b.n	8013fec <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 801401a:	bf00      	nop
    }
}
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	4618      	mov	r0, r3
 8014020:	3710      	adds	r7, #16
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
 8014026:	bf00      	nop
 8014028:	08024794 	.word	0x08024794

0801402c <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 801402c:	b580      	push	{r7, lr}
 801402e:	b082      	sub	sp, #8
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d004      	beq.n	8014046 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4618      	mov	r0, r3
 8014042:	f7f5 fee5 	bl	8009e10 <_ZdaPv>
}
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	4618      	mov	r0, r3
 801404a:	3708      	adds	r7, #8
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}

08014050 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8014050:	b480      	push	{r7}
 8014052:	b087      	sub	sp, #28
 8014054:	af00      	add	r7, sp, #0
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	60b9      	str	r1, [r7, #8]
 801405a:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	009b      	lsls	r3, r3, #2
 8014064:	4413      	add	r3, r2
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	4413      	add	r3, r2
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	681a      	ldr	r2, [r3, #0]
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	009b      	lsls	r3, r3, #2
 8014080:	4413      	add	r3, r2
 8014082:	697a      	ldr	r2, [r7, #20]
 8014084:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	009b      	lsls	r3, r3, #2
 801408e:	4413      	add	r3, r2
 8014090:	693a      	ldr	r2, [r7, #16]
 8014092:	601a      	str	r2, [r3, #0]
}
 8014094:	bf00      	nop
 8014096:	371c      	adds	r7, #28
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr

080140a0 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b084      	sub	sp, #16
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d028      	beq.n	8014104 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 80140b2:	4b17      	ldr	r3, [pc, #92]	; (8014110 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	6838      	ldr	r0, [r7, #0]
 80140b8:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	3b01      	subs	r3, #1
 80140c0:	60fb      	str	r3, [r7, #12]
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d019      	beq.n	80140fc <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	685b      	ldr	r3, [r3, #4]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d01b      	beq.n	8014108 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 80140d0:	4b10      	ldr	r3, [pc, #64]	; (8014114 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	4798      	blx	r3
 80140d6:	4603      	mov	r3, r0
 80140d8:	461a      	mov	r2, r3
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	3301      	adds	r3, #1
 80140de:	fbb2 f1f3 	udiv	r1, r2, r3
 80140e2:	fb03 f301 	mul.w	r3, r3, r1
 80140e6:	1ad3      	subs	r3, r2, r3
 80140e8:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 80140ea:	68ba      	ldr	r2, [r7, #8]
 80140ec:	68f9      	ldr	r1, [r7, #12]
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f7ff ffae 	bl	8014050 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	3b01      	subs	r3, #1
 80140f8:	60fb      	str	r3, [r7, #12]
 80140fa:	e7e2      	b.n	80140c2 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f000 f834 	bl	801416a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8014102:	e002      	b.n	801410a <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8014104:	bf00      	nop
 8014106:	e000      	b.n	801410a <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8014108:	bf00      	nop
}
 801410a:	3710      	adds	r7, #16
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	200000e0 	.word	0x200000e0
 8014114:	200000e4 	.word	0x200000e4

08014118 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b086      	sub	sp, #24
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	685b      	ldr	r3, [r3, #4]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d01c      	beq.n	8014162 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	085b      	lsrs	r3, r3, #1
 801412e:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8014130:	2300      	movs	r3, #0
 8014132:	617b      	str	r3, [r7, #20]
 8014134:	697a      	ldr	r2, [r7, #20]
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	429a      	cmp	r2, r3
 801413a:	d20e      	bcs.n	801415a <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	685a      	ldr	r2, [r3, #4]
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	1ad3      	subs	r3, r2, r3
 8014144:	3b01      	subs	r3, #1
 8014146:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8014148:	68fa      	ldr	r2, [r7, #12]
 801414a:	6979      	ldr	r1, [r7, #20]
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f7ff ff7f 	bl	8014050 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	3301      	adds	r3, #1
 8014156:	617b      	str	r3, [r7, #20]
 8014158:	e7ec      	b.n	8014134 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f000 f805 	bl	801416a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8014160:	e000      	b.n	8014164 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8014162:	bf00      	nop
}
 8014164:	3718      	adds	r7, #24
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}

0801416a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 801416a:	b580      	push	{r7, lr}
 801416c:	b084      	sub	sp, #16
 801416e:	af00      	add	r7, sp, #0
 8014170:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8014172:	2300      	movs	r3, #0
 8014174:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014176:	2300      	movs	r3, #0
 8014178:	60bb      	str	r3, [r7, #8]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	685b      	ldr	r3, [r3, #4]
 801417e:	68ba      	ldr	r2, [r7, #8]
 8014180:	429a      	cmp	r2, r3
 8014182:	d221      	bcs.n	80141c8 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681a      	ldr	r2, [r3, #0]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6859      	ldr	r1, [r3, #4]
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	1acb      	subs	r3, r1, r3
 8014190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014194:	3b01      	subs	r3, #1
 8014196:	009b      	lsls	r3, r3, #2
 8014198:	4413      	add	r3, r2
 801419a:	6818      	ldr	r0, [r3, #0]
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	681a      	ldr	r2, [r3, #0]
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6859      	ldr	r1, [r3, #4]
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	1acb      	subs	r3, r1, r3
 80141a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80141ac:	3b01      	subs	r3, #1
 80141ae:	009b      	lsls	r3, r3, #2
 80141b0:	4413      	add	r3, r2
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	3308      	adds	r3, #8
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	68f9      	ldr	r1, [r7, #12]
 80141bc:	4798      	blx	r3
 80141be:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	3301      	adds	r3, #1
 80141c4:	60bb      	str	r3, [r7, #8]
 80141c6:	e7d8      	b.n	801417a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 80141c8:	bf00      	nop
 80141ca:	3710      	adds	r7, #16
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
    return get(0);
 80141d8:	2100      	movs	r1, #0
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f000 f805 	bl	80141ea <_ZNK22UtestShellPointerArray3getEj>
 80141e0:	4603      	mov	r3, r0
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3708      	adds	r7, #8
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}

080141ea <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 80141ea:	b480      	push	{r7}
 80141ec:	b083      	sub	sp, #12
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	6078      	str	r0, [r7, #4]
 80141f2:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	683a      	ldr	r2, [r7, #0]
 80141fa:	429a      	cmp	r2, r3
 80141fc:	d301      	bcc.n	8014202 <_ZNK22UtestShellPointerArray3getEj+0x18>
 80141fe:	2300      	movs	r3, #0
 8014200:	e005      	b.n	801420e <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681a      	ldr	r2, [r3, #0]
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	009b      	lsls	r3, r3, #2
 801420a:	4413      	add	r3, r2
 801420c:	681b      	ldr	r3, [r3, #0]
}
 801420e:	4618      	mov	r0, r3
 8014210:	370c      	adds	r7, #12
 8014212:	46bd      	mov	sp, r7
 8014214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014218:	4770      	bx	lr
	...

0801421c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 801421c:	b580      	push	{r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af00      	add	r7, sp, #0
 8014222:	60f8      	str	r0, [r7, #12]
 8014224:	60b9      	str	r1, [r7, #8]
 8014226:	607a      	str	r2, [r7, #4]
 8014228:	603b      	str	r3, [r7, #0]
 801422a:	4a10      	ldr	r2, [pc, #64]	; (801426c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8014230:	6879      	ldr	r1, [r7, #4]
 8014232:	68b8      	ldr	r0, [r7, #8]
 8014234:	f7fe fc27 	bl	8012a86 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8014238:	6839      	ldr	r1, [r7, #0]
 801423a:	68b8      	ldr	r0, [r7, #8]
 801423c:	f7fe fc31 	bl	8012aa2 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8014240:	69b9      	ldr	r1, [r7, #24]
 8014242:	68b8      	ldr	r0, [r7, #8]
 8014244:	f7fe fc03 	bl	8012a4e <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8014248:	69f9      	ldr	r1, [r7, #28]
 801424a:	68b8      	ldr	r0, [r7, #8]
 801424c:	f7fe fc0d 	bl	8012a6a <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8014250:	f7fd fc20 	bl	8011a94 <_ZN12TestRegistry18getCurrentRegistryEv>
 8014254:	4603      	mov	r3, r0
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	3208      	adds	r2, #8
 801425a:	6812      	ldr	r2, [r2, #0]
 801425c:	68b9      	ldr	r1, [r7, #8]
 801425e:	4618      	mov	r0, r3
 8014260:	4790      	blx	r2
}
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	4618      	mov	r0, r3
 8014266:	3710      	adds	r7, #16
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}
 801426c:	08027f3c 	.word	0x08027f3c

08014270 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8014270:	b480      	push	{r7}
 8014272:	b083      	sub	sp, #12
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
 8014278:	4a04      	ldr	r2, [pc, #16]	; (801428c <_ZN13TestInstallerD1Ev+0x1c>)
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	601a      	str	r2, [r3, #0]
{
}
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	4618      	mov	r0, r3
 8014282:	370c      	adds	r7, #12
 8014284:	46bd      	mov	sp, r7
 8014286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428a:	4770      	bx	lr
 801428c:	08027f3c 	.word	0x08027f3c

08014290 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
}
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f7ff ffe9 	bl	8014270 <_ZN13TestInstallerD1Ev>
 801429e:	2104      	movs	r1, #4
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f7f5 fd91 	bl	8009dc8 <_ZdlPvj>
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	4618      	mov	r0, r3
 80142aa:	3708      	adds	r7, #8
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d10a      	bne.n	80142d6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142c6:	4293      	cmp	r3, r2
 80142c8:	d105      	bne.n	80142d6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80142ca:	4805      	ldr	r0, [pc, #20]	; (80142e0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80142cc:	f7ff fe38 	bl	8013f40 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 80142d0:	4804      	ldr	r0, [pc, #16]	; (80142e4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80142d2:	f7ff fdd5 	bl	8013e80 <_ZN20NormalTestTerminatorD1Ev>
}
 80142d6:	bf00      	nop
 80142d8:	3708      	adds	r7, #8
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
 80142de:	bf00      	nop
 80142e0:	20000090 	.word	0x20000090
 80142e4:	2000008c 	.word	0x2000008c

080142e8 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 80142e8:	b580      	push	{r7, lr}
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80142f0:	2001      	movs	r0, #1
 80142f2:	f7ff ffdd 	bl	80142b0 <_Z41__static_initialization_and_destruction_0ii>
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 80142f8:	b580      	push	{r7, lr}
 80142fa:	af00      	add	r7, sp, #0
 80142fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014300:	2000      	movs	r0, #0
 8014302:	f7ff ffd5 	bl	80142b0 <_Z41__static_initialization_and_destruction_0ii>
 8014306:	bd80      	pop	{r7, pc}

08014308 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8014308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
 801430e:	ed87 0b00 	vstr	d0, [r7]
 8014312:	683c      	ldr	r4, [r7, #0]
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801431a:	2301      	movs	r3, #1
 801431c:	461e      	mov	r6, r3
 801431e:	f04f 32ff 	mov.w	r2, #4294967295
 8014322:	4b10      	ldr	r3, [pc, #64]	; (8014364 <_ZSt5isinfd+0x5c>)
 8014324:	4620      	mov	r0, r4
 8014326:	4629      	mov	r1, r5
 8014328:	f7ec fa2e 	bl	8000788 <__aeabi_dcmpun>
 801432c:	4603      	mov	r3, r0
 801432e:	2b00      	cmp	r3, #0
 8014330:	d10b      	bne.n	801434a <_ZSt5isinfd+0x42>
 8014332:	f04f 32ff 	mov.w	r2, #4294967295
 8014336:	4b0b      	ldr	r3, [pc, #44]	; (8014364 <_ZSt5isinfd+0x5c>)
 8014338:	4620      	mov	r0, r4
 801433a:	4629      	mov	r1, r5
 801433c:	f7ec fa06 	bl	800074c <__aeabi_dcmple>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d101      	bne.n	801434a <_ZSt5isinfd+0x42>
 8014346:	2300      	movs	r3, #0
 8014348:	461e      	mov	r6, r3
 801434a:	b2f3      	uxtb	r3, r6
 801434c:	f083 0301 	eor.w	r3, r3, #1
 8014350:	b2db      	uxtb	r3, r3
 8014352:	2b00      	cmp	r3, #0
 8014354:	bf14      	ite	ne
 8014356:	2301      	movne	r3, #1
 8014358:	2300      	moveq	r3, #0
 801435a:	b2db      	uxtb	r3, r3
 801435c:	4618      	mov	r0, r3
 801435e:	370c      	adds	r7, #12
 8014360:	46bd      	mov	sp, r7
 8014362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014364:	7fefffff 	.word	0x7fefffff

08014368 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8014368:	b590      	push	{r4, r7, lr}
 801436a:	b083      	sub	sp, #12
 801436c:	af00      	add	r7, sp, #0
 801436e:	ed87 0b00 	vstr	d0, [r7]
 8014372:	2301      	movs	r3, #1
 8014374:	461c      	mov	r4, r3
 8014376:	e9d7 2300 	ldrd	r2, r3, [r7]
 801437a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801437e:	f7ec fa03 	bl	8000788 <__aeabi_dcmpun>
 8014382:	4603      	mov	r3, r0
 8014384:	2b00      	cmp	r3, #0
 8014386:	d101      	bne.n	801438c <_ZSt5isnand+0x24>
 8014388:	2300      	movs	r3, #0
 801438a:	461c      	mov	r4, r3
 801438c:	b2e3      	uxtb	r3, r4
 801438e:	2b00      	cmp	r3, #0
 8014390:	bf14      	ite	ne
 8014392:	2301      	movne	r3, #1
 8014394:	2300      	moveq	r3, #0
 8014396:	b2db      	uxtb	r3, r3
 8014398:	4618      	mov	r0, r3
 801439a:	370c      	adds	r7, #12
 801439c:	46bd      	mov	sp, r7
 801439e:	bd90      	pop	{r4, r7, pc}

080143a0 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 80143a0:	b590      	push	{r4, r7, lr}
 80143a2:	b095      	sub	sp, #84	; 0x54
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	60f8      	str	r0, [r7, #12]
 80143a8:	60b9      	str	r1, [r7, #8]
 80143aa:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	3334      	adds	r3, #52	; 0x34
 80143b2:	681c      	ldr	r4, [r3, #0]
 80143b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80143b8:	490f      	ldr	r1, [pc, #60]	; (80143f8 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 80143ba:	4618      	mov	r0, r3
 80143bc:	f7f8 f8b3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80143c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80143c4:	f107 0314 	add.w	r3, r7, #20
 80143c8:	68f9      	ldr	r1, [r7, #12]
 80143ca:	4618      	mov	r0, r3
 80143cc:	f7f9 ff0a 	bl	800e1e4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 80143d0:	f107 0314 	add.w	r3, r7, #20
 80143d4:	4619      	mov	r1, r3
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	47a0      	blx	r4
 80143da:	f107 0314 	add.w	r3, r7, #20
 80143de:	4618      	mov	r0, r3
 80143e0:	f7f9 ffc0 	bl	800e364 <_ZN11TestFailureD1Ev>
 80143e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7f8 fc54 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80143ee:	bf00      	nop
 80143f0:	3754      	adds	r7, #84	; 0x54
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd90      	pop	{r4, r7, pc}
 80143f6:	bf00      	nop
 80143f8:	0802491c 	.word	0x0802491c

080143fc <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 80143fc:	b480      	push	{r7}
 80143fe:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8014400:	2301      	movs	r3, #1
}
 8014402:	4618      	mov	r0, r3
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr

0801440c <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b082      	sub	sp, #8
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8014416:	4b13      	ldr	r3, [pc, #76]	; (8014464 <PlatformSpecificSetJmpImplementation+0x58>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	225c      	movs	r2, #92	; 0x5c
 801441c:	fb02 f303 	mul.w	r3, r2, r3
 8014420:	4a11      	ldr	r2, [pc, #68]	; (8014468 <PlatformSpecificSetJmpImplementation+0x5c>)
 8014422:	4413      	add	r3, r2
 8014424:	4618      	mov	r0, r3
 8014426:	f7eb fefb 	bl	8000220 <setjmp>
 801442a:	4603      	mov	r3, r0
 801442c:	2b00      	cmp	r3, #0
 801442e:	bf0c      	ite	eq
 8014430:	2301      	moveq	r3, #1
 8014432:	2300      	movne	r3, #0
 8014434:	b2db      	uxtb	r3, r3
 8014436:	2b00      	cmp	r3, #0
 8014438:	d00e      	beq.n	8014458 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 801443a:	4b0a      	ldr	r3, [pc, #40]	; (8014464 <PlatformSpecificSetJmpImplementation+0x58>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	3301      	adds	r3, #1
 8014440:	4a08      	ldr	r2, [pc, #32]	; (8014464 <PlatformSpecificSetJmpImplementation+0x58>)
 8014442:	6013      	str	r3, [r2, #0]
        function(data);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6838      	ldr	r0, [r7, #0]
 8014448:	4798      	blx	r3
        jmp_buf_index--;
 801444a:	4b06      	ldr	r3, [pc, #24]	; (8014464 <PlatformSpecificSetJmpImplementation+0x58>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	3b01      	subs	r3, #1
 8014450:	4a04      	ldr	r2, [pc, #16]	; (8014464 <PlatformSpecificSetJmpImplementation+0x58>)
 8014452:	6013      	str	r3, [r2, #0]
        return 1;
 8014454:	2301      	movs	r3, #1
 8014456:	e000      	b.n	801445a <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8014458:	2300      	movs	r3, #0
}
 801445a:	4618      	mov	r0, r3
 801445c:	3708      	adds	r7, #8
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	20000df8 	.word	0x20000df8
 8014468:	20000a60 	.word	0x20000a60

0801446c <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 801446c:	b580      	push	{r7, lr}
 801446e:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8014470:	4b07      	ldr	r3, [pc, #28]	; (8014490 <PlatformSpecificLongJmpImplementation+0x24>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	3b01      	subs	r3, #1
 8014476:	4a06      	ldr	r2, [pc, #24]	; (8014490 <PlatformSpecificLongJmpImplementation+0x24>)
 8014478:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 801447a:	4b05      	ldr	r3, [pc, #20]	; (8014490 <PlatformSpecificLongJmpImplementation+0x24>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	225c      	movs	r2, #92	; 0x5c
 8014480:	fb02 f303 	mul.w	r3, r2, r3
 8014484:	4a03      	ldr	r2, [pc, #12]	; (8014494 <PlatformSpecificLongJmpImplementation+0x28>)
 8014486:	4413      	add	r3, r2
 8014488:	2101      	movs	r1, #1
 801448a:	4618      	mov	r0, r3
 801448c:	f7eb fece 	bl	800022c <longjmp>
 8014490:	20000df8 	.word	0x20000df8
 8014494:	20000a60 	.word	0x20000a60

08014498 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8014498:	b480      	push	{r7}
 801449a:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 801449c:	2300      	movs	r3, #0
#endif
}
 801449e:	4618      	mov	r0, r3
 80144a0:	46bd      	mov	sp, r7
 80144a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a6:	4770      	bx	lr

080144a8 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b084      	sub	sp, #16
 80144ac:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 80144ae:	2000      	movs	r0, #0
 80144b0:	f00e ec3e 	blx	8022d30 <__time_veneer>
 80144b4:	4602      	mov	r2, r0
 80144b6:	460b      	mov	r3, r1
 80144b8:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 80144bc:	463b      	mov	r3, r7
 80144be:	4618      	mov	r0, r3
 80144c0:	f00b fb76 	bl	801fbb0 <localtime>
 80144c4:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	4a04      	ldr	r2, [pc, #16]	; (80144dc <TimeStringImplementation+0x34>)
 80144ca:	2150      	movs	r1, #80	; 0x50
 80144cc:	4804      	ldr	r0, [pc, #16]	; (80144e0 <TimeStringImplementation+0x38>)
 80144ce:	f00c fc77 	bl	8020dc0 <strftime>
    return dateTime;
 80144d2:	4b03      	ldr	r3, [pc, #12]	; (80144e0 <TimeStringImplementation+0x38>)
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	3710      	adds	r7, #16
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}
 80144dc:	08024958 	.word	0x08024958
 80144e0:	20000dfc 	.word	0x20000dfc

080144e4 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b082      	sub	sp, #8
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 80144ee:	6839      	ldr	r1, [r7, #0]
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f00b f993 	bl	801f81c <fopen>
 80144f6:	4603      	mov	r3, r0
#endif
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 801450a:	6839      	ldr	r1, [r7, #0]
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f00b f9f3 	bl	801f8f8 <fputs>
}
 8014512:	bf00      	nop
 8014514:	3708      	adds	r7, #8
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}

0801451a <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 801451a:	b580      	push	{r7, lr}
 801451c:	b082      	sub	sp, #8
 801451e:	af00      	add	r7, sp, #0
 8014520:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f00a ff74 	bl	801f410 <fclose>
}
 8014528:	bf00      	nop
 801452a:	3708      	adds	r7, #8
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8014530:	b580      	push	{r7, lr}
 8014532:	af00      	add	r7, sp, #0
  fflush(stdout);
 8014534:	4b03      	ldr	r3, [pc, #12]	; (8014544 <PlatformSpecificFlushImplementation+0x14>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	689b      	ldr	r3, [r3, #8]
 801453a:	4618      	mov	r0, r3
 801453c:	f00b f832 	bl	801f5a4 <fflush>
}
 8014540:	bf00      	nop
 8014542:	bd80      	pop	{r7, pc}
 8014544:	20000108 	.word	0x20000108

08014548 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8014552:	ed97 0b00 	vldr	d0, [r7]
 8014556:	f7ff ff07 	bl	8014368 <_ZSt5isnand>
 801455a:	4603      	mov	r3, r0
}
 801455c:	4618      	mov	r0, r3
 801455e:	3708      	adds	r7, #8
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b082      	sub	sp, #8
 8014568:	af00      	add	r7, sp, #0
 801456a:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 801456e:	ed97 0b00 	vldr	d0, [r7]
 8014572:	f7ff fec9 	bl	8014308 <_ZSt5isinfd>
 8014576:	4603      	mov	r3, r0
}
 8014578:	4618      	mov	r0, r3
 801457a:	3708      	adds	r7, #8
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}

08014580 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8014580:	b480      	push	{r7}
 8014582:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8014584:	2300      	movs	r3, #0
#endif

}
 8014586:	4618      	mov	r0, r3
 8014588:	46bd      	mov	sp, r7
 801458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458e:	4770      	bx	lr

08014590 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8014590:	b480      	push	{r7}
 8014592:	b083      	sub	sp, #12
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
}
 8014598:	bf00      	nop
 801459a:	370c      	adds	r7, #12
 801459c:	46bd      	mov	sp, r7
 801459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a2:	4770      	bx	lr

080145a4 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 80145a4:	b480      	push	{r7}
 80145a6:	b083      	sub	sp, #12
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
}
 80145ac:	bf00      	nop
 80145ae:	370c      	adds	r7, #12
 80145b0:	46bd      	mov	sp, r7
 80145b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b6:	4770      	bx	lr

080145b8 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 80145b8:	b480      	push	{r7}
 80145ba:	b083      	sub	sp, #12
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
}
 80145c0:	bf00      	nop
 80145c2:	370c      	adds	r7, #12
 80145c4:	46bd      	mov	sp, r7
 80145c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ca:	4770      	bx	lr

080145cc <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b084      	sub	sp, #16
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 80145d8:	4a25      	ldr	r2, [pc, #148]	; (8014670 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	601a      	str	r2, [r3, #0]
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	68ba      	ldr	r2, [r7, #8]
 80145e2:	605a      	str	r2, [r3, #4]
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	687a      	ldr	r2, [r7, #4]
 80145e8:	609a      	str	r2, [r3, #8]
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	2200      	movs	r2, #0
 80145ee:	731a      	strb	r2, [r3, #12]
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	2200      	movs	r2, #0
 80145f4:	735a      	strb	r2, [r3, #13]
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	2200      	movs	r2, #0
 80145fa:	739a      	strb	r2, [r3, #14]
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	2200      	movs	r2, #0
 8014600:	73da      	strb	r2, [r3, #15]
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	2200      	movs	r2, #0
 8014606:	741a      	strb	r2, [r3, #16]
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	2200      	movs	r2, #0
 801460c:	745a      	strb	r2, [r3, #17]
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	2200      	movs	r2, #0
 8014612:	749a      	strb	r2, [r3, #18]
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	2200      	movs	r2, #0
 8014618:	74da      	strb	r2, [r3, #19]
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	2200      	movs	r2, #0
 801461e:	751a      	strb	r2, [r3, #20]
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	2200      	movs	r2, #0
 8014624:	755a      	strb	r2, [r3, #21]
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	2200      	movs	r2, #0
 801462a:	759a      	strb	r2, [r3, #22]
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	2200      	movs	r2, #0
 8014630:	75da      	strb	r2, [r3, #23]
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2200      	movs	r2, #0
 8014636:	761a      	strb	r2, [r3, #24]
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	2201      	movs	r2, #1
 801463c:	61da      	str	r2, [r3, #28]
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	2200      	movs	r2, #0
 8014642:	621a      	str	r2, [r3, #32]
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	2200      	movs	r2, #0
 8014648:	625a      	str	r2, [r3, #36]	; 0x24
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	2200      	movs	r2, #0
 801464e:	629a      	str	r2, [r3, #40]	; 0x28
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	2200      	movs	r2, #0
 8014654:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	3330      	adds	r3, #48	; 0x30
 801465c:	4905      	ldr	r1, [pc, #20]	; (8014674 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 801465e:	4618      	mov	r0, r3
 8014660:	f7f7 ff61 	bl	800c526 <_ZN12SimpleStringC1EPKc>
{
}
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	4618      	mov	r0, r3
 8014668:	3710      	adds	r7, #16
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
 801466e:	bf00      	nop
 8014670:	08028068 	.word	0x08028068
 8014674:	0802496c 	.word	0x0802496c

08014678 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	4618      	mov	r0, r3
 8014684:	f7f8 fb07 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	4618      	mov	r0, r3
 801468c:	3708      	adds	r7, #8
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}
	...

08014694 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8014694:	b590      	push	{r4, r7, lr}
 8014696:	b085      	sub	sp, #20
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
 801469c:	4a20      	ldr	r2, [pc, #128]	; (8014720 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d015      	beq.n	80146d6 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ae:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146b4:	4618      	mov	r0, r3
 80146b6:	f00a fda4 	bl	801f202 <_ZNK10TestFilter7getNextEv>
 80146ba:	4602      	mov	r2, r0
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 80146c0:	68fc      	ldr	r4, [r7, #12]
 80146c2:	2c00      	cmp	r4, #0
 80146c4:	d0ed      	beq.n	80146a2 <_ZN20CommandLineArgumentsD1Ev+0xe>
 80146c6:	4620      	mov	r0, r4
 80146c8:	f7ff ffd6 	bl	8014678 <_ZN10TestFilterD1Ev>
 80146cc:	2110      	movs	r1, #16
 80146ce:	4620      	mov	r0, r4
 80146d0:	f7f5 fb7a 	bl	8009dc8 <_ZdlPvj>
    while(groupFilters_) {
 80146d4:	e7e5      	b.n	80146a2 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d015      	beq.n	801470a <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146e2:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146e8:	4618      	mov	r0, r3
 80146ea:	f00a fd8a 	bl	801f202 <_ZNK10TestFilter7getNextEv>
 80146ee:	4602      	mov	r2, r0
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 80146f4:	68bc      	ldr	r4, [r7, #8]
 80146f6:	2c00      	cmp	r4, #0
 80146f8:	d0ed      	beq.n	80146d6 <_ZN20CommandLineArgumentsD1Ev+0x42>
 80146fa:	4620      	mov	r0, r4
 80146fc:	f7ff ffbc 	bl	8014678 <_ZN10TestFilterD1Ev>
 8014700:	2110      	movs	r1, #16
 8014702:	4620      	mov	r0, r4
 8014704:	f7f5 fb60 	bl	8009dc8 <_ZdlPvj>
    while(nameFilters_) {
 8014708:	e7e5      	b.n	80146d6 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	3330      	adds	r3, #48	; 0x30
 801470e:	4618      	mov	r0, r3
 8014710:	f7f8 fac1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    }
}
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	4618      	mov	r0, r3
 8014718:	3714      	adds	r7, #20
 801471a:	46bd      	mov	sp, r7
 801471c:	bd90      	pop	{r4, r7, pc}
 801471e:	bf00      	nop
 8014720:	08028068 	.word	0x08028068

08014724 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8014724:	b580      	push	{r7, lr}
 8014726:	b082      	sub	sp, #8
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
}
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f7ff ffb1 	bl	8014694 <_ZN20CommandLineArgumentsD1Ev>
 8014732:	2138      	movs	r1, #56	; 0x38
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	f7f5 fb47 	bl	8009dc8 <_ZdlPvj>
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	4618      	mov	r0, r3
 801473e:	3708      	adds	r7, #8
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}

08014744 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8014744:	b5b0      	push	{r4, r5, r7, lr}
 8014746:	b0be      	sub	sp, #248	; 0xf8
 8014748:	af02      	add	r7, sp, #8
 801474a:	6078      	str	r0, [r7, #4]
 801474c:	6039      	str	r1, [r7, #0]
 801474e:	2400      	movs	r4, #0
    bool correctParameters = true;
 8014750:	2301      	movs	r3, #1
 8014752:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 8014756:	2301      	movs	r3, #1
 8014758:	613b      	str	r3, [r7, #16]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	685a      	ldr	r2, [r3, #4]
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	429a      	cmp	r2, r3
 8014762:	f340 83a4 	ble.w	8014eae <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	689a      	ldr	r2, [r3, #8]
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	009b      	lsls	r3, r3, #2
 801476e:	4413      	add	r3, r2
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	f107 0308 	add.w	r3, r7, #8
 8014776:	4611      	mov	r1, r2
 8014778:	4618      	mov	r0, r3
 801477a:	f7f7 fed4 	bl	800c526 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 801477e:	f107 0314 	add.w	r3, r7, #20
 8014782:	49c8      	ldr	r1, [pc, #800]	; (8014aa4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8014784:	4618      	mov	r0, r3
 8014786:	f7f7 fece 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801478a:	f107 0214 	add.w	r2, r7, #20
 801478e:	f107 0308 	add.w	r3, r7, #8
 8014792:	4611      	mov	r1, r2
 8014794:	4618      	mov	r0, r3
 8014796:	f7f8 fa8a 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801479a:	4603      	mov	r3, r0
 801479c:	461d      	mov	r5, r3
 801479e:	f107 0314 	add.w	r3, r7, #20
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7f8 fa77 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80147a8:	2d00      	cmp	r5, #0
 80147aa:	d006      	beq.n	80147ba <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2201      	movs	r2, #1
 80147b0:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 80147b2:	2300      	movs	r3, #0
 80147b4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80147b8:	e366      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 80147ba:	f107 031c 	add.w	r3, r7, #28
 80147be:	49ba      	ldr	r1, [pc, #744]	; (8014aa8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7f7 feb0 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80147c6:	f107 021c 	add.w	r2, r7, #28
 80147ca:	f107 0308 	add.w	r3, r7, #8
 80147ce:	4611      	mov	r1, r2
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7f8 fa6c 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 80147d6:	4603      	mov	r3, r0
 80147d8:	461d      	mov	r5, r3
 80147da:	f107 031c 	add.w	r3, r7, #28
 80147de:	4618      	mov	r0, r3
 80147e0:	f7f8 fa59 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80147e4:	2d00      	cmp	r5, #0
 80147e6:	d003      	beq.n	80147f0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2201      	movs	r2, #1
 80147ec:	735a      	strb	r2, [r3, #13]
 80147ee:	e34b      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 80147f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147f4:	49ad      	ldr	r1, [pc, #692]	; (8014aac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 80147f6:	4618      	mov	r0, r3
 80147f8:	f7f7 fe95 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80147fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014800:	f107 0308 	add.w	r3, r7, #8
 8014804:	4611      	mov	r1, r2
 8014806:	4618      	mov	r0, r3
 8014808:	f7f8 fa51 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801480c:	4603      	mov	r3, r0
 801480e:	461d      	mov	r5, r3
 8014810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014814:	4618      	mov	r0, r3
 8014816:	f7f8 fa3e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801481a:	2d00      	cmp	r5, #0
 801481c:	d003      	beq.n	8014826 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2201      	movs	r2, #1
 8014822:	739a      	strb	r2, [r3, #14]
 8014824:	e330      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8014826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801482a:	49a1      	ldr	r1, [pc, #644]	; (8014ab0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 801482c:	4618      	mov	r0, r3
 801482e:	f7f7 fe7a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014832:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014836:	f107 0308 	add.w	r3, r7, #8
 801483a:	4611      	mov	r1, r2
 801483c:	4618      	mov	r0, r3
 801483e:	f7f8 fa36 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8014842:	4603      	mov	r3, r0
 8014844:	461d      	mov	r5, r3
 8014846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801484a:	4618      	mov	r0, r3
 801484c:	f7f8 fa23 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014850:	2d00      	cmp	r5, #0
 8014852:	d003      	beq.n	801485c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2201      	movs	r2, #1
 8014858:	73da      	strb	r2, [r3, #15]
 801485a:	e315      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 801485c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014860:	4994      	ldr	r1, [pc, #592]	; (8014ab4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8014862:	4618      	mov	r0, r3
 8014864:	f7f7 fe5f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014868:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801486c:	f107 0308 	add.w	r3, r7, #8
 8014870:	4611      	mov	r1, r2
 8014872:	4618      	mov	r0, r3
 8014874:	f7f8 fa1b 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8014878:	4603      	mov	r3, r0
 801487a:	461d      	mov	r5, r3
 801487c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014880:	4618      	mov	r0, r3
 8014882:	f7f8 fa08 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014886:	2d00      	cmp	r5, #0
 8014888:	d003      	beq.n	8014892 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2201      	movs	r2, #1
 801488e:	741a      	strb	r2, [r3, #16]
 8014890:	e2fa      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8014892:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014896:	4988      	ldr	r1, [pc, #544]	; (8014ab8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8014898:	4618      	mov	r0, r3
 801489a:	f7f7 fe44 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801489e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80148a2:	f107 0308 	add.w	r3, r7, #8
 80148a6:	4611      	mov	r1, r2
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7f8 fa00 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 80148ae:	4603      	mov	r3, r0
 80148b0:	461d      	mov	r5, r3
 80148b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7f8 f9ed 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80148bc:	2d00      	cmp	r5, #0
 80148be:	d003      	beq.n	80148c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	2201      	movs	r2, #1
 80148c4:	755a      	strb	r2, [r3, #21]
 80148c6:	e2df      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 80148c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80148cc:	497b      	ldr	r1, [pc, #492]	; (8014abc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 80148ce:	4618      	mov	r0, r3
 80148d0:	f7f7 fe29 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80148d4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80148d8:	f107 0308 	add.w	r3, r7, #8
 80148dc:	4611      	mov	r1, r2
 80148de:	4618      	mov	r0, r3
 80148e0:	f7f8 f9e5 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 80148e4:	4603      	mov	r3, r0
 80148e6:	461d      	mov	r5, r3
 80148e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7f8 f9d2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80148f2:	2d00      	cmp	r5, #0
 80148f4:	d003      	beq.n	80148fe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2201      	movs	r2, #1
 80148fa:	745a      	strb	r2, [r3, #17]
 80148fc:	e2c4      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 80148fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014902:	496f      	ldr	r1, [pc, #444]	; (8014ac0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8014904:	4618      	mov	r0, r3
 8014906:	f7f7 fe0e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801490a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801490e:	f107 0308 	add.w	r3, r7, #8
 8014912:	4611      	mov	r1, r2
 8014914:	4618      	mov	r0, r3
 8014916:	f7f8 f9ca 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801491a:	4603      	mov	r3, r0
 801491c:	461d      	mov	r5, r3
 801491e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014922:	4618      	mov	r0, r3
 8014924:	f7f8 f9b7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014928:	2d00      	cmp	r5, #0
 801492a:	d003      	beq.n	8014934 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2201      	movs	r2, #1
 8014930:	749a      	strb	r2, [r3, #18]
 8014932:	e2a9      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8014934:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014938:	4962      	ldr	r1, [pc, #392]	; (8014ac4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 801493a:	4618      	mov	r0, r3
 801493c:	f7f7 fdf3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014940:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8014944:	f107 0308 	add.w	r3, r7, #8
 8014948:	4611      	mov	r1, r2
 801494a:	4618      	mov	r0, r3
 801494c:	f7f8 f9af 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8014950:	4603      	mov	r3, r0
 8014952:	461d      	mov	r5, r3
 8014954:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014958:	4618      	mov	r0, r3
 801495a:	f7f8 f99c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801495e:	2d00      	cmp	r5, #0
 8014960:	d003      	beq.n	801496a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2201      	movs	r2, #1
 8014966:	74da      	strb	r2, [r3, #19]
 8014968:	e28e      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 801496a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801496e:	4956      	ldr	r1, [pc, #344]	; (8014ac8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8014970:	4618      	mov	r0, r3
 8014972:	f7f7 fdd8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014976:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801497a:	f107 0308 	add.w	r3, r7, #8
 801497e:	4611      	mov	r1, r2
 8014980:	4618      	mov	r0, r3
 8014982:	f7f8 f994 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8014986:	4603      	mov	r3, r0
 8014988:	461d      	mov	r5, r3
 801498a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801498e:	4618      	mov	r0, r3
 8014990:	f7f8 f981 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014994:	2d00      	cmp	r5, #0
 8014996:	d003      	beq.n	80149a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2201      	movs	r2, #1
 801499c:	751a      	strb	r2, [r3, #20]
 801499e:	e273      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 80149a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80149a4:	4949      	ldr	r1, [pc, #292]	; (8014acc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7f7 fdbd 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80149ac:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80149b0:	f107 0308 	add.w	r3, r7, #8
 80149b4:	4611      	mov	r1, r2
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7f8 f979 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 80149bc:	4603      	mov	r3, r0
 80149be:	461d      	mov	r5, r3
 80149c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7f8 f966 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80149ca:	2d00      	cmp	r5, #0
 80149cc:	d003      	beq.n	80149d6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2201      	movs	r2, #1
 80149d2:	759a      	strb	r2, [r3, #22]
 80149d4:	e258      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 80149d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80149da:	493d      	ldr	r1, [pc, #244]	; (8014ad0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 80149dc:	4618      	mov	r0, r3
 80149de:	f7f7 fda2 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80149e2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80149e6:	f107 0308 	add.w	r3, r7, #8
 80149ea:	4611      	mov	r1, r2
 80149ec:	4618      	mov	r0, r3
 80149ee:	f7f7 fe5e 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 80149f2:	4603      	mov	r3, r0
 80149f4:	461d      	mov	r5, r3
 80149f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7f8 f94b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014a00:	2d00      	cmp	r5, #0
 8014a02:	d009      	beq.n	8014a18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6859      	ldr	r1, [r3, #4]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	689a      	ldr	r2, [r3, #8]
 8014a0c:	f107 0310 	add.w	r3, r7, #16
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f000 fb33 	bl	801507c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8014a16:	e237      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8014a18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014a1c:	492d      	ldr	r1, [pc, #180]	; (8014ad4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7f7 fd81 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014a24:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8014a28:	f107 0308 	add.w	r3, r7, #8
 8014a2c:	4611      	mov	r1, r2
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7f7 fe3d 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014a34:	4603      	mov	r3, r0
 8014a36:	461d      	mov	r5, r3
 8014a38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7f8 f92a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014a42:	2d00      	cmp	r5, #0
 8014a44:	d009      	beq.n	8014a5a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	6859      	ldr	r1, [r3, #4]
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	689a      	ldr	r2, [r3, #8]
 8014a4e:	f107 0310 	add.w	r3, r7, #16
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f000 fc40 	bl	80152d8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8014a58:	e216      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8014a5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014a5e:	491e      	ldr	r1, [pc, #120]	; (8014ad8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8014a60:	4618      	mov	r0, r3
 8014a62:	f7f7 fd60 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014a66:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8014a6a:	f107 0308 	add.w	r3, r7, #8
 8014a6e:	4611      	mov	r1, r2
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7f7 fe1c 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014a76:	4603      	mov	r3, r0
 8014a78:	461d      	mov	r5, r3
 8014a7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7f8 f909 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014a84:	2d00      	cmp	r5, #0
 8014a86:	d029      	beq.n	8014adc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6859      	ldr	r1, [r3, #4]
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	689a      	ldr	r2, [r3, #8]
 8014a90:	f107 0310 	add.w	r3, r7, #16
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f000 fc61 	bl	801535c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014aa0:	e1f2      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8014aa2:	bf00      	nop
 8014aa4:	08024970 	.word	0x08024970
 8014aa8:	08024974 	.word	0x08024974
 8014aac:	08024978 	.word	0x08024978
 8014ab0:	0802497c 	.word	0x0802497c
 8014ab4:	08024980 	.word	0x08024980
 8014ab8:	08024984 	.word	0x08024984
 8014abc:	08024988 	.word	0x08024988
 8014ac0:	0802498c 	.word	0x0802498c
 8014ac4:	08024990 	.word	0x08024990
 8014ac8:	08024994 	.word	0x08024994
 8014acc:	08024998 	.word	0x08024998
 8014ad0:	0802499c 	.word	0x0802499c
 8014ad4:	080249a0 	.word	0x080249a0
 8014ad8:	080249a4 	.word	0x080249a4
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8014adc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014ae0:	49b9      	ldr	r1, [pc, #740]	; (8014dc8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7f7 fd1f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014ae8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014aec:	f107 0308 	add.w	r3, r7, #8
 8014af0:	4611      	mov	r1, r2
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7f7 fddb 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014af8:	4603      	mov	r3, r0
 8014afa:	461d      	mov	r5, r3
 8014afc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7f8 f8c8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014b06:	2d00      	cmp	r5, #0
 8014b08:	d009      	beq.n	8014b1e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6859      	ldr	r1, [r3, #4]
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	689a      	ldr	r2, [r3, #8]
 8014b12:	f107 0310 	add.w	r3, r7, #16
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f000 fccc 	bl	80154b4 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8014b1c:	e1b4      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8014b1e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014b22:	49aa      	ldr	r1, [pc, #680]	; (8014dcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7f7 fcfe 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014b2a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8014b2e:	f107 0308 	add.w	r3, r7, #8
 8014b32:	4611      	mov	r1, r2
 8014b34:	4618      	mov	r0, r3
 8014b36:	f7f7 fdba 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	461d      	mov	r5, r3
 8014b3e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7f8 f8a7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014b48:	2d00      	cmp	r5, #0
 8014b4a:	d009      	beq.n	8014b60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6859      	ldr	r1, [r3, #4]
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	689a      	ldr	r2, [r3, #8]
 8014b54:	f107 0310 	add.w	r3, r7, #16
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f000 fcf1 	bl	8015540 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8014b5e:	e193      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8014b60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014b64:	499a      	ldr	r1, [pc, #616]	; (8014dd0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7f7 fcdd 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014b6c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8014b70:	f107 0308 	add.w	r3, r7, #8
 8014b74:	4611      	mov	r1, r2
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7f7 fd99 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	461d      	mov	r5, r3
 8014b80:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014b84:	4618      	mov	r0, r3
 8014b86:	f7f8 f886 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014b8a:	2d00      	cmp	r5, #0
 8014b8c:	d009      	beq.n	8014ba2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	6859      	ldr	r1, [r3, #4]
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	689a      	ldr	r2, [r3, #8]
 8014b96:	f107 0310 	add.w	r3, r7, #16
 8014b9a:	6878      	ldr	r0, [r7, #4]
 8014b9c:	f000 fd16 	bl	80155cc <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8014ba0:	e172      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8014ba2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014ba6:	498b      	ldr	r1, [pc, #556]	; (8014dd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7f7 fcbc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014bae:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8014bb2:	f107 0308 	add.w	r3, r7, #8
 8014bb6:	4611      	mov	r1, r2
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7f7 fd78 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	461d      	mov	r5, r3
 8014bc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7f8 f865 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014bcc:	2d00      	cmp	r5, #0
 8014bce:	d009      	beq.n	8014be4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6859      	ldr	r1, [r3, #4]
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	689a      	ldr	r2, [r3, #8]
 8014bd8:	f107 0310 	add.w	r3, r7, #16
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f000 fd3d 	bl	801565c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8014be2:	e151      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8014be4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014be8:	497b      	ldr	r1, [pc, #492]	; (8014dd8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7f7 fc9b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014bf0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014bf4:	f107 0308 	add.w	r3, r7, #8
 8014bf8:	4611      	mov	r1, r2
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7f7 fd57 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014c00:	4603      	mov	r3, r0
 8014c02:	461d      	mov	r5, r3
 8014c04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7f8 f844 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014c0e:	2d00      	cmp	r5, #0
 8014c10:	d009      	beq.n	8014c26 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	6859      	ldr	r1, [r3, #4]
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	689a      	ldr	r2, [r3, #8]
 8014c1a:	f107 0310 	add.w	r3, r7, #16
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f000 fd5e 	bl	80156e0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8014c24:	e130      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8014c26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014c2a:	496c      	ldr	r1, [pc, #432]	; (8014ddc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7f7 fc7a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014c32:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8014c36:	f107 0308 	add.w	r3, r7, #8
 8014c3a:	4611      	mov	r1, r2
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7f7 fd36 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014c42:	4603      	mov	r3, r0
 8014c44:	461d      	mov	r5, r3
 8014c46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f7f8 f823 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014c50:	2d00      	cmp	r5, #0
 8014c52:	d009      	beq.n	8014c68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	6859      	ldr	r1, [r3, #4]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	689a      	ldr	r2, [r3, #8]
 8014c5c:	f107 0310 	add.w	r3, r7, #16
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f000 fd83 	bl	801576c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8014c66:	e10f      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8014c68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014c6c:	495c      	ldr	r1, [pc, #368]	; (8014de0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7f7 fc59 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014c74:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8014c78:	f107 0308 	add.w	r3, r7, #8
 8014c7c:	4611      	mov	r1, r2
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f7f7 fd15 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014c84:	4603      	mov	r3, r0
 8014c86:	461d      	mov	r5, r3
 8014c88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7f8 f802 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014c92:	2d00      	cmp	r5, #0
 8014c94:	d009      	beq.n	8014caa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	6859      	ldr	r1, [r3, #4]
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	689a      	ldr	r2, [r3, #8]
 8014c9e:	f107 0310 	add.w	r3, r7, #16
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f000 fda8 	bl	80157f8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8014ca8:	e0ee      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8014caa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014cae:	494d      	ldr	r1, [pc, #308]	; (8014de4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7f7 fc38 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014cb6:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8014cba:	f107 0308 	add.w	r3, r7, #8
 8014cbe:	4611      	mov	r1, r2
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7f7 fcf4 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	461d      	mov	r5, r3
 8014cca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7f7 ffe1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014cd4:	2d00      	cmp	r5, #0
 8014cd6:	d00c      	beq.n	8014cf2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	6859      	ldr	r1, [r3, #4]
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	689a      	ldr	r2, [r3, #8]
 8014ce0:	f107 0310 	add.w	r3, r7, #16
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f000 fa29 	bl	801513c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8014cea:	4603      	mov	r3, r0
 8014cec:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014cf0:	e0ca      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8014cf2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014cf6:	493c      	ldr	r1, [pc, #240]	; (8014de8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	f7f7 fc14 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014cfe:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8014d02:	f107 0308 	add.w	r3, r7, #8
 8014d06:	4611      	mov	r1, r2
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7f7 fcd0 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	461d      	mov	r5, r3
 8014d12:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7f7 ffbd 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014d1c:	2d00      	cmp	r5, #0
 8014d1e:	d00b      	beq.n	8014d38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6859      	ldr	r1, [r3, #4]
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	689a      	ldr	r2, [r3, #8]
 8014d28:	f107 0310 	add.w	r3, r7, #16
 8014d2c:	482e      	ldr	r0, [pc, #184]	; (8014de8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8014d2e:	9000      	str	r0, [sp, #0]
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	f000 fda9 	bl	8015888 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8014d36:	e0a7      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8014d38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014d3c:	492b      	ldr	r1, [pc, #172]	; (8014dec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7f7 fbf1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014d44:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8014d48:	f107 0308 	add.w	r3, r7, #8
 8014d4c:	4611      	mov	r1, r2
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7f7 fcad 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014d54:	4603      	mov	r3, r0
 8014d56:	461d      	mov	r5, r3
 8014d58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7f7 ff9a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014d62:	2d00      	cmp	r5, #0
 8014d64:	d00b      	beq.n	8014d7e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6859      	ldr	r1, [r3, #4]
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	689a      	ldr	r2, [r3, #8]
 8014d6e:	f107 0310 	add.w	r3, r7, #16
 8014d72:	481e      	ldr	r0, [pc, #120]	; (8014dec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8014d74:	9000      	str	r0, [sp, #0]
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f000 fd86 	bl	8015888 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8014d7c:	e084      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8014d7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014d82:	491b      	ldr	r1, [pc, #108]	; (8014df0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7f7 fbce 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014d8a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8014d8e:	f107 0308 	add.w	r3, r7, #8
 8014d92:	4611      	mov	r1, r2
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7f7 fc8a 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	461d      	mov	r5, r3
 8014d9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014da2:	4618      	mov	r0, r3
 8014da4:	f7f7 ff77 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014da8:	2d00      	cmp	r5, #0
 8014daa:	d023      	beq.n	8014df4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	6859      	ldr	r1, [r3, #4]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	689a      	ldr	r2, [r3, #8]
 8014db4:	f107 0310 	add.w	r3, r7, #16
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f000 fe3b 	bl	8015a34 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014dc4:	e060      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8014dc6:	bf00      	nop
 8014dc8:	080249a8 	.word	0x080249a8
 8014dcc:	080249ac 	.word	0x080249ac
 8014dd0:	080249b0 	.word	0x080249b0
 8014dd4:	080249b8 	.word	0x080249b8
 8014dd8:	080249bc 	.word	0x080249bc
 8014ddc:	080249c0 	.word	0x080249c0
 8014de0:	080249c4 	.word	0x080249c4
 8014de4:	080249cc 	.word	0x080249cc
 8014de8:	080249d0 	.word	0x080249d0
 8014dec:	080249d8 	.word	0x080249d8
 8014df0:	080249e8 	.word	0x080249e8
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8014df4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014df8:	4930      	ldr	r1, [pc, #192]	; (8014ebc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f7f7 fb93 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014e00:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8014e04:	f107 0308 	add.w	r3, r7, #8
 8014e08:	4611      	mov	r1, r2
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7f7 fc4f 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014e10:	4603      	mov	r3, r0
 8014e12:	461d      	mov	r5, r3
 8014e14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f7f7 ff3c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014e1e:	2d00      	cmp	r5, #0
 8014e20:	d00e      	beq.n	8014e40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	331c      	adds	r3, #28
 8014e28:	681d      	ldr	r5, [r3, #0]
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	6859      	ldr	r1, [r3, #4]
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	689a      	ldr	r2, [r3, #8]
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	6838      	ldr	r0, [r7, #0]
 8014e36:	47a8      	blx	r5
 8014e38:	4603      	mov	r3, r0
 8014e3a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014e3e:	e023      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8014e40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014e44:	491e      	ldr	r1, [pc, #120]	; (8014ec0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7f7 fb6d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8014e4c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8014e50:	f107 0308 	add.w	r3, r7, #8
 8014e54:	4611      	mov	r1, r2
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7f7 fc29 	bl	800c6ae <_ZNK12SimpleString10startsWithERKS_>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	461d      	mov	r5, r3
 8014e60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7f7 ff16 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014e6a:	2d00      	cmp	r5, #0
 8014e6c:	d009      	beq.n	8014e82 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6859      	ldr	r1, [r3, #4]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	689a      	ldr	r2, [r3, #8]
 8014e76:	f107 0310 	add.w	r3, r7, #16
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f000 fd98 	bl	80159b0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8014e80:	e002      	b.n	8014e88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8014e82:	2300      	movs	r3, #0
 8014e84:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8014e88:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d102      	bne.n	8014e96 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8014e90:	2400      	movs	r4, #0
 8014e92:	2500      	movs	r5, #0
 8014e94:	e000      	b.n	8014e98 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8014e96:	2501      	movs	r5, #1
 8014e98:	f107 0308 	add.w	r3, r7, #8
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7f7 fefa 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8014ea2:	2d01      	cmp	r5, #1
 8014ea4:	d104      	bne.n	8014eb0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	613b      	str	r3, [r7, #16]
 8014eac:	e455      	b.n	801475a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8014eae:	2401      	movs	r4, #1
 8014eb0:	4623      	mov	r3, r4
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	37f0      	adds	r7, #240	; 0xf0
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	08024980 	.word	0x08024980
 8014ec0:	080249ec 	.word	0x080249ec

08014ec4 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8014ec4:	b480      	push	{r7}
 8014ec6:	b083      	sub	sp, #12
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8014ecc:	4b03      	ldr	r3, [pc, #12]	; (8014edc <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	370c      	adds	r7, #12
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed8:	4770      	bx	lr
 8014eda:	bf00      	nop
 8014edc:	080249f0 	.word	0x080249f0

08014ee0 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	b083      	sub	sp, #12
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8014ee8:	4b03      	ldr	r3, [pc, #12]	; (8014ef8 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8014eea:	4618      	mov	r0, r3
 8014eec:	370c      	adds	r7, #12
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef4:	4770      	bx	lr
 8014ef6:	bf00      	nop
 8014ef8:	08024b20 	.word	0x08024b20

08014efc <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8014efc:	b480      	push	{r7}
 8014efe:	b083      	sub	sp, #12
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	7b1b      	ldrb	r3, [r3, #12]
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	370c      	adds	r7, #12
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f12:	4770      	bx	lr

08014f14 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8014f14:	b480      	push	{r7}
 8014f16:	b083      	sub	sp, #12
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
    return verbose_;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	7b5b      	ldrb	r3, [r3, #13]
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	370c      	adds	r7, #12
 8014f24:	46bd      	mov	sp, r7
 8014f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2a:	4770      	bx	lr

08014f2c <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b083      	sub	sp, #12
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	7b9b      	ldrb	r3, [r3, #14]
}
 8014f38:	4618      	mov	r0, r3
 8014f3a:	370c      	adds	r7, #12
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f42:	4770      	bx	lr

08014f44 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8014f44:	b480      	push	{r7}
 8014f46:	b083      	sub	sp, #12
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
    return color_;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	7bdb      	ldrb	r3, [r3, #15]
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	370c      	adds	r7, #12
 8014f54:	46bd      	mov	sp, r7
 8014f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5a:	4770      	bx	lr

08014f5c <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8014f5c:	b480      	push	{r7}
 8014f5e:	b083      	sub	sp, #12
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	7c5b      	ldrb	r3, [r3, #17]
}
 8014f68:	4618      	mov	r0, r3
 8014f6a:	370c      	adds	r7, #12
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f72:	4770      	bx	lr

08014f74 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8014f74:	b480      	push	{r7}
 8014f76:	b083      	sub	sp, #12
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	7c9b      	ldrb	r3, [r3, #18]
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	370c      	adds	r7, #12
 8014f84:	46bd      	mov	sp, r7
 8014f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8a:	4770      	bx	lr

08014f8c <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8014f8c:	b480      	push	{r7}
 8014f8e:	b083      	sub	sp, #12
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	7cdb      	ldrb	r3, [r3, #19]
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	370c      	adds	r7, #12
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa2:	4770      	bx	lr

08014fa4 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8014fa4:	b480      	push	{r7}
 8014fa6:	b083      	sub	sp, #12
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	7d1b      	ldrb	r3, [r3, #20]
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	370c      	adds	r7, #12
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr

08014fbc <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8014fbc:	b480      	push	{r7}
 8014fbe:	b083      	sub	sp, #12
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	7c1b      	ldrb	r3, [r3, #16]
}
 8014fc8:	4618      	mov	r0, r3
 8014fca:	370c      	adds	r7, #12
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd2:	4770      	bx	lr

08014fd4 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
    return repeat_;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	69db      	ldr	r3, [r3, #28]
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	370c      	adds	r7, #12
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fea:	4770      	bx	lr

08014fec <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8014fec:	b480      	push	{r7}
 8014fee:	b083      	sub	sp, #12
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
    return reversing_;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	7d5b      	ldrb	r3, [r3, #21]
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	370c      	adds	r7, #12
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr

08015004 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8015004:	b480      	push	{r7}
 8015006:	b083      	sub	sp, #12
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	7d9b      	ldrb	r3, [r3, #22]
}
 8015010:	4618      	mov	r0, r3
 8015012:	370c      	adds	r7, #12
 8015014:	46bd      	mov	sp, r7
 8015016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501a:	4770      	bx	lr

0801501c <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 801501c:	b480      	push	{r7}
 801501e:	b083      	sub	sp, #12
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	7ddb      	ldrb	r3, [r3, #23]
}
 8015028:	4618      	mov	r0, r3
 801502a:	370c      	adds	r7, #12
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr

08015034 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8015034:	b480      	push	{r7}
 8015036:	b083      	sub	sp, #12
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	6a1b      	ldr	r3, [r3, #32]
}
 8015040:	4618      	mov	r0, r3
 8015042:	370c      	adds	r7, #12
 8015044:	46bd      	mov	sp, r7
 8015046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801504a:	4770      	bx	lr

0801504c <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 801504c:	b480      	push	{r7}
 801504e:	b083      	sub	sp, #12
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8015058:	4618      	mov	r0, r3
 801505a:	370c      	adds	r7, #12
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr

08015064 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8015064:	b480      	push	{r7}
 8015066:	b083      	sub	sp, #12
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015070:	4618      	mov	r0, r3
 8015072:	370c      	adds	r7, #12
 8015074:	46bd      	mov	sp, r7
 8015076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507a:	4770      	bx	lr

0801507c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b086      	sub	sp, #24
 8015080:	af00      	add	r7, sp, #0
 8015082:	60f8      	str	r0, [r7, #12]
 8015084:	60b9      	str	r1, [r7, #8]
 8015086:	607a      	str	r2, [r7, #4]
 8015088:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	2200      	movs	r2, #0
 801508e:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	009b      	lsls	r3, r3, #2
 8015096:	687a      	ldr	r2, [r7, #4]
 8015098:	4413      	add	r3, r2
 801509a:	681a      	ldr	r2, [r3, #0]
 801509c:	f107 0310 	add.w	r3, r7, #16
 80150a0:	4611      	mov	r1, r2
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7f7 fa3f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 80150a8:	f107 0310 	add.w	r3, r7, #16
 80150ac:	4618      	mov	r0, r3
 80150ae:	f7f7 fdd1 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 80150b2:	4603      	mov	r3, r0
 80150b4:	2b02      	cmp	r3, #2
 80150b6:	bf8c      	ite	hi
 80150b8:	2301      	movhi	r3, #1
 80150ba:	2300      	movls	r3, #0
 80150bc:	b2db      	uxtb	r3, r3
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d00e      	beq.n	80150e0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	009b      	lsls	r3, r3, #2
 80150c8:	687a      	ldr	r2, [r7, #4]
 80150ca:	4413      	add	r3, r2
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	3302      	adds	r3, #2
 80150d0:	4618      	mov	r0, r3
 80150d2:	f7f7 f824 	bl	800c11e <_ZN12SimpleString4AtoIEPKc>
 80150d6:	4603      	mov	r3, r0
 80150d8:	461a      	mov	r2, r3
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	61da      	str	r2, [r3, #28]
 80150de:	e01c      	b.n	801511a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	3301      	adds	r3, #1
 80150e6:	68ba      	ldr	r2, [r7, #8]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	dd16      	ble.n	801511a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	3301      	adds	r3, #1
 80150f2:	009b      	lsls	r3, r3, #2
 80150f4:	687a      	ldr	r2, [r7, #4]
 80150f6:	4413      	add	r3, r2
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7f7 f80f 	bl	800c11e <_ZN12SimpleString4AtoIEPKc>
 8015100:	4603      	mov	r3, r0
 8015102:	461a      	mov	r2, r3
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	69db      	ldr	r3, [r3, #28]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d004      	beq.n	801511a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8015110:	683b      	ldr	r3, [r7, #0]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	1c5a      	adds	r2, r3, #1
 8015116:	683b      	ldr	r3, [r7, #0]
 8015118:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	69db      	ldr	r3, [r3, #28]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d102      	bne.n	8015128 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	2202      	movs	r2, #2
 8015126:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8015128:	f107 0310 	add.w	r3, r7, #16
 801512c:	4618      	mov	r0, r3
 801512e:	f7f7 fdb2 	bl	800cc96 <_ZN12SimpleStringD1Ev>

}
 8015132:	bf00      	nop
 8015134:	3718      	adds	r7, #24
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}
	...

0801513c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 801513c:	b590      	push	{r4, r7, lr}
 801513e:	b089      	sub	sp, #36	; 0x24
 8015140:	af00      	add	r7, sp, #0
 8015142:	60f8      	str	r0, [r7, #12]
 8015144:	60b9      	str	r1, [r7, #8]
 8015146:	607a      	str	r2, [r7, #4]
 8015148:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	2201      	movs	r2, #1
 801514e:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8015150:	4b34      	ldr	r3, [pc, #208]	; (8015224 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	4798      	blx	r3
 8015156:	4603      	mov	r3, r0
 8015158:	461a      	mov	r2, r3
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	6a1b      	ldr	r3, [r3, #32]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d104      	bne.n	8015170 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	6a1b      	ldr	r3, [r3, #32]
 801516a:	1c5a      	adds	r2, r3, #1
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	009b      	lsls	r3, r3, #2
 8015176:	687a      	ldr	r2, [r7, #4]
 8015178:	4413      	add	r3, r2
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	f107 0314 	add.w	r3, r7, #20
 8015180:	4611      	mov	r1, r2
 8015182:	4618      	mov	r0, r3
 8015184:	f7f7 f9cf 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8015188:	f107 0314 	add.w	r3, r7, #20
 801518c:	4618      	mov	r0, r3
 801518e:	f7f7 fd61 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 8015192:	4603      	mov	r3, r0
 8015194:	2b02      	cmp	r3, #2
 8015196:	bf8c      	ite	hi
 8015198:	2301      	movhi	r3, #1
 801519a:	2300      	movls	r3, #0
 801519c:	b2db      	uxtb	r3, r3
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d010      	beq.n	80151c4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	2201      	movs	r2, #1
 80151a6:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	009b      	lsls	r3, r3, #2
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	4413      	add	r3, r2
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	3302      	adds	r3, #2
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7f6 ff78 	bl	800c0ac <_ZN12SimpleString4AtoUEPKc>
 80151bc:	4602      	mov	r2, r0
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	621a      	str	r2, [r3, #32]
 80151c2:	e01e      	b.n	8015202 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	3301      	adds	r3, #1
 80151ca:	68ba      	ldr	r2, [r7, #8]
 80151cc:	429a      	cmp	r2, r3
 80151ce:	dd18      	ble.n	8015202 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	3301      	adds	r3, #1
 80151d6:	009b      	lsls	r3, r3, #2
 80151d8:	687a      	ldr	r2, [r7, #4]
 80151da:	4413      	add	r3, r2
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	4618      	mov	r0, r3
 80151e0:	f7f6 ff64 	bl	800c0ac <_ZN12SimpleString4AtoUEPKc>
 80151e4:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d00a      	beq.n	8015202 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	2201      	movs	r2, #1
 80151f0:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	69fa      	ldr	r2, [r7, #28]
 80151f6:	621a      	str	r2, [r3, #32]
            i++;
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	1c5a      	adds	r2, r3, #1
 80151fe:	683b      	ldr	r3, [r7, #0]
 8015200:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	6a1b      	ldr	r3, [r3, #32]
 8015206:	2b00      	cmp	r3, #0
 8015208:	bf14      	ite	ne
 801520a:	2301      	movne	r3, #1
 801520c:	2300      	moveq	r3, #0
 801520e:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8015210:	f107 0314 	add.w	r3, r7, #20
 8015214:	4618      	mov	r0, r3
 8015216:	f7f7 fd3e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 801521a:	4623      	mov	r3, r4
}
 801521c:	4618      	mov	r0, r3
 801521e:	3724      	adds	r7, #36	; 0x24
 8015220:	46bd      	mov	sp, r7
 8015222:	bd90      	pop	{r4, r7, pc}
 8015224:	200000a8 	.word	0x200000a8

08015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b088      	sub	sp, #32
 801522c:	af00      	add	r7, sp, #0
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	607a      	str	r2, [r7, #4]
 8015234:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8015236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015238:	f7f7 fd0c 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 801523c:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 801523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	009b      	lsls	r3, r3, #2
 8015244:	683a      	ldr	r2, [r7, #0]
 8015246:	4413      	add	r3, r2
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	f107 0314 	add.w	r3, r7, #20
 801524e:	4611      	mov	r1, r2
 8015250:	4618      	mov	r0, r3
 8015252:	f7f7 f968 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8015256:	f107 0314 	add.w	r3, r7, #20
 801525a:	4618      	mov	r0, r3
 801525c:	f7f7 fcfa 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 8015260:	4602      	mov	r2, r0
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	4293      	cmp	r3, r2
 8015266:	bf34      	ite	cc
 8015268:	2301      	movcc	r3, #1
 801526a:	2300      	movcs	r3, #0
 801526c:	b2db      	uxtb	r3, r3
 801526e:	2b00      	cmp	r3, #0
 8015270:	d00c      	beq.n	801528c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8015272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	009b      	lsls	r3, r3, #2
 8015278:	683a      	ldr	r2, [r7, #0]
 801527a:	4413      	add	r3, r2
 801527c:	681a      	ldr	r2, [r3, #0]
 801527e:	69fb      	ldr	r3, [r7, #28]
 8015280:	4413      	add	r3, r2
 8015282:	4619      	mov	r1, r3
 8015284:	68f8      	ldr	r0, [r7, #12]
 8015286:	f7f7 f94e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801528a:	e019      	b.n	80152c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 801528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	3301      	adds	r3, #1
 8015292:	687a      	ldr	r2, [r7, #4]
 8015294:	429a      	cmp	r2, r3
 8015296:	dd0f      	ble.n	80152b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8015298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	1c5a      	adds	r2, r3, #1
 801529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a0:	601a      	str	r2, [r3, #0]
 80152a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	009b      	lsls	r3, r3, #2
 80152a8:	683a      	ldr	r2, [r7, #0]
 80152aa:	4413      	add	r3, r2
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	4619      	mov	r1, r3
 80152b0:	68f8      	ldr	r0, [r7, #12]
 80152b2:	f7f7 f938 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80152b6:	e003      	b.n	80152c0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 80152b8:	4906      	ldr	r1, [pc, #24]	; (80152d4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 80152ba:	68f8      	ldr	r0, [r7, #12]
 80152bc:	f7f7 f933 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 80152c0:	f107 0314 	add.w	r3, r7, #20
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7f7 fce6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80152ca:	68f8      	ldr	r0, [r7, #12]
 80152cc:	3720      	adds	r7, #32
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}
 80152d2:	bf00      	nop
 80152d4:	0802496c 	.word	0x0802496c

080152d8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 80152d8:	b5b0      	push	{r4, r5, r7, lr}
 80152da:	b08c      	sub	sp, #48	; 0x30
 80152dc:	af02      	add	r7, sp, #8
 80152de:	60f8      	str	r0, [r7, #12]
 80152e0:	60b9      	str	r1, [r7, #8]
 80152e2:	607a      	str	r2, [r7, #4]
 80152e4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 80152e6:	f107 031c 	add.w	r3, r7, #28
 80152ea:	491a      	ldr	r1, [pc, #104]	; (8015354 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7f7 f91a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80152f2:	f107 0014 	add.w	r0, r7, #20
 80152f6:	f107 031c 	add.w	r3, r7, #28
 80152fa:	9301      	str	r3, [sp, #4]
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	9300      	str	r3, [sp, #0]
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	68ba      	ldr	r2, [r7, #8]
 8015304:	68f9      	ldr	r1, [r7, #12]
 8015306:	f7ff ff8f 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801530a:	f107 0514 	add.w	r5, r7, #20
 801530e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015312:	4911      	ldr	r1, [pc, #68]	; (8015358 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8015314:	2010      	movs	r0, #16
 8015316:	f7f4 fd43 	bl	8009da0 <_ZnwjPKci>
 801531a:	4604      	mov	r4, r0
 801531c:	4629      	mov	r1, r5
 801531e:	4620      	mov	r0, r4
 8015320:	f009 ff40 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 8015324:	627c      	str	r4, [r7, #36]	; 0x24
 8015326:	f107 0314 	add.w	r3, r7, #20
 801532a:	4618      	mov	r0, r3
 801532c:	f7f7 fcb3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015330:	f107 031c 	add.w	r3, r7, #28
 8015334:	4618      	mov	r0, r3
 8015336:	f7f7 fcae 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801533e:	4619      	mov	r1, r3
 8015340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015342:	f009 ff4f 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 8015346:	4602      	mov	r2, r0
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801534c:	bf00      	nop
 801534e:	3728      	adds	r7, #40	; 0x28
 8015350:	46bd      	mov	sp, r7
 8015352:	bdb0      	pop	{r4, r5, r7, pc}
 8015354:	080249a0 	.word	0x080249a0
 8015358:	08025334 	.word	0x08025334

0801535c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 801535c:	b5b0      	push	{r4, r5, r7, lr}
 801535e:	b092      	sub	sp, #72	; 0x48
 8015360:	af02      	add	r7, sp, #8
 8015362:	60f8      	str	r0, [r7, #12]
 8015364:	60b9      	str	r1, [r7, #8]
 8015366:	607a      	str	r2, [r7, #4]
 8015368:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 801536a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801536e:	494e      	ldr	r1, [pc, #312]	; (80154a8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8015370:	4618      	mov	r0, r3
 8015372:	f7f7 f8d8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8015376:	f107 0020 	add.w	r0, r7, #32
 801537a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801537e:	9301      	str	r3, [sp, #4]
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	9300      	str	r3, [sp, #0]
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	68ba      	ldr	r2, [r7, #8]
 8015388:	68f9      	ldr	r1, [r7, #12]
 801538a:	f7ff ff4d 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801538e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015392:	4618      	mov	r0, r3
 8015394:	f7f7 fc7f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8015398:	f107 0310 	add.w	r3, r7, #16
 801539c:	4618      	mov	r0, r3
 801539e:	f7f8 fb8f 	bl	800dac0 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 80153a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80153a6:	4941      	ldr	r1, [pc, #260]	; (80154ac <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7f7 f8bc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80153ae:	f107 0210 	add.w	r2, r7, #16
 80153b2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80153b6:	f107 0320 	add.w	r3, r7, #32
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7f7 fa1f 	bl	800c7fe <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 80153c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7f7 fc66 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 80153ca:	f107 0310 	add.w	r3, r7, #16
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7f8 fc1b 	bl	800dc0a <_ZNK22SimpleStringCollection4sizeEv>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2b02      	cmp	r3, #2
 80153d8:	bf14      	ite	ne
 80153da:	2301      	movne	r3, #1
 80153dc:	2300      	moveq	r3, #0
 80153de:	b2db      	uxtb	r3, r3
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d001      	beq.n	80153e8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 80153e4:	2400      	movs	r4, #0
 80153e6:	e04f      	b.n	8015488 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 80153e8:	f107 0310 	add.w	r3, r7, #16
 80153ec:	2100      	movs	r1, #0
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7f8 fc18 	bl	800dc24 <_ZN22SimpleStringCollectionixEj>
 80153f4:	4604      	mov	r4, r0
 80153f6:	f107 0310 	add.w	r3, r7, #16
 80153fa:	2100      	movs	r1, #0
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7f8 fc11 	bl	800dc24 <_ZN22SimpleStringCollectionixEj>
 8015402:	4603      	mov	r3, r0
 8015404:	4618      	mov	r0, r3
 8015406:	f7f7 fc25 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 801540a:	4603      	mov	r3, r0
 801540c:	3b01      	subs	r3, #1
 801540e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8015412:	2200      	movs	r2, #0
 8015414:	4621      	mov	r1, r4
 8015416:	f7f7 fd47 	bl	800cea8 <_ZNK12SimpleString9subStringEjj>
 801541a:	f107 0538 	add.w	r5, r7, #56	; 0x38
 801541e:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8015422:	4923      	ldr	r1, [pc, #140]	; (80154b0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015424:	2010      	movs	r0, #16
 8015426:	f7f4 fcbb 	bl	8009da0 <_ZnwjPKci>
 801542a:	4604      	mov	r4, r0
 801542c:	4629      	mov	r1, r5
 801542e:	4620      	mov	r0, r4
 8015430:	f009 feb8 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015438:	4619      	mov	r1, r3
 801543a:	4620      	mov	r0, r4
 801543c:	f009 fed2 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 8015440:	4602      	mov	r2, r0
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	625a      	str	r2, [r3, #36]	; 0x24
 8015446:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801544a:	4618      	mov	r0, r3
 801544c:	f7f7 fc23 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8015450:	f107 0310 	add.w	r3, r7, #16
 8015454:	2101      	movs	r1, #1
 8015456:	4618      	mov	r0, r3
 8015458:	f7f8 fbe4 	bl	800dc24 <_ZN22SimpleStringCollectionixEj>
 801545c:	4605      	mov	r5, r0
 801545e:	f240 121f 	movw	r2, #287	; 0x11f
 8015462:	4913      	ldr	r1, [pc, #76]	; (80154b0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015464:	2010      	movs	r0, #16
 8015466:	f7f4 fc9b 	bl	8009da0 <_ZnwjPKci>
 801546a:	4604      	mov	r4, r0
 801546c:	4629      	mov	r1, r5
 801546e:	4620      	mov	r0, r4
 8015470:	f009 fe98 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015478:	4619      	mov	r1, r3
 801547a:	4620      	mov	r0, r4
 801547c:	f009 feb2 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 8015480:	4602      	mov	r2, r0
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8015486:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8015488:	f107 0310 	add.w	r3, r7, #16
 801548c:	4618      	mov	r0, r3
 801548e:	f7f8 fb8b 	bl	800dba8 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015492:	f107 0320 	add.w	r3, r7, #32
 8015496:	4618      	mov	r0, r3
 8015498:	f7f7 fbfd 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801549c:	4623      	mov	r3, r4
}
 801549e:	4618      	mov	r0, r3
 80154a0:	3740      	adds	r7, #64	; 0x40
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bdb0      	pop	{r4, r5, r7, pc}
 80154a6:	bf00      	nop
 80154a8:	080249a4 	.word	0x080249a4
 80154ac:	08025354 	.word	0x08025354
 80154b0:	08025334 	.word	0x08025334

080154b4 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80154b4:	b5b0      	push	{r4, r5, r7, lr}
 80154b6:	b08c      	sub	sp, #48	; 0x30
 80154b8:	af02      	add	r7, sp, #8
 80154ba:	60f8      	str	r0, [r7, #12]
 80154bc:	60b9      	str	r1, [r7, #8]
 80154be:	607a      	str	r2, [r7, #4]
 80154c0:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 80154c2:	f107 031c 	add.w	r3, r7, #28
 80154c6:	491c      	ldr	r1, [pc, #112]	; (8015538 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7f7 f82c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80154ce:	f107 0014 	add.w	r0, r7, #20
 80154d2:	f107 031c 	add.w	r3, r7, #28
 80154d6:	9301      	str	r3, [sp, #4]
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	9300      	str	r3, [sp, #0]
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	68ba      	ldr	r2, [r7, #8]
 80154e0:	68f9      	ldr	r1, [r7, #12]
 80154e2:	f7ff fea1 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80154e6:	f107 0514 	add.w	r5, r7, #20
 80154ea:	f240 1225 	movw	r2, #293	; 0x125
 80154ee:	4913      	ldr	r1, [pc, #76]	; (801553c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 80154f0:	2010      	movs	r0, #16
 80154f2:	f7f4 fc55 	bl	8009da0 <_ZnwjPKci>
 80154f6:	4604      	mov	r4, r0
 80154f8:	4629      	mov	r1, r5
 80154fa:	4620      	mov	r0, r4
 80154fc:	f009 fe52 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 8015500:	627c      	str	r4, [r7, #36]	; 0x24
 8015502:	f107 0314 	add.w	r3, r7, #20
 8015506:	4618      	mov	r0, r3
 8015508:	f7f7 fbc5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801550c:	f107 031c 	add.w	r3, r7, #28
 8015510:	4618      	mov	r0, r3
 8015512:	f7f7 fbc0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015518:	f009 fe7f 	bl	801f21a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015520:	4619      	mov	r1, r3
 8015522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015524:	f009 fe5e 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 8015528:	4602      	mov	r2, r0
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801552e:	bf00      	nop
 8015530:	3728      	adds	r7, #40	; 0x28
 8015532:	46bd      	mov	sp, r7
 8015534:	bdb0      	pop	{r4, r5, r7, pc}
 8015536:	bf00      	nop
 8015538:	080249a8 	.word	0x080249a8
 801553c:	08025334 	.word	0x08025334

08015540 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8015540:	b5b0      	push	{r4, r5, r7, lr}
 8015542:	b08c      	sub	sp, #48	; 0x30
 8015544:	af02      	add	r7, sp, #8
 8015546:	60f8      	str	r0, [r7, #12]
 8015548:	60b9      	str	r1, [r7, #8]
 801554a:	607a      	str	r2, [r7, #4]
 801554c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 801554e:	f107 031c 	add.w	r3, r7, #28
 8015552:	491c      	ldr	r1, [pc, #112]	; (80155c4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8015554:	4618      	mov	r0, r3
 8015556:	f7f6 ffe6 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801555a:	f107 0014 	add.w	r0, r7, #20
 801555e:	f107 031c 	add.w	r3, r7, #28
 8015562:	9301      	str	r3, [sp, #4]
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	9300      	str	r3, [sp, #0]
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	68ba      	ldr	r2, [r7, #8]
 801556c:	68f9      	ldr	r1, [r7, #12]
 801556e:	f7ff fe5b 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015572:	f107 0514 	add.w	r5, r7, #20
 8015576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801557a:	4913      	ldr	r1, [pc, #76]	; (80155c8 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 801557c:	2010      	movs	r0, #16
 801557e:	f7f4 fc0f 	bl	8009da0 <_ZnwjPKci>
 8015582:	4604      	mov	r4, r0
 8015584:	4629      	mov	r1, r5
 8015586:	4620      	mov	r0, r4
 8015588:	f009 fe0c 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 801558c:	627c      	str	r4, [r7, #36]	; 0x24
 801558e:	f107 0314 	add.w	r3, r7, #20
 8015592:	4618      	mov	r0, r3
 8015594:	f7f7 fb7f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015598:	f107 031c 	add.w	r3, r7, #28
 801559c:	4618      	mov	r0, r3
 801559e:	f7f7 fb7a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 80155a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155a4:	f009 fe46 	bl	801f234 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ac:	4619      	mov	r1, r3
 80155ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155b0:	f009 fe18 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 80155b4:	4602      	mov	r2, r0
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80155ba:	bf00      	nop
 80155bc:	3728      	adds	r7, #40	; 0x28
 80155be:	46bd      	mov	sp, r7
 80155c0:	bdb0      	pop	{r4, r5, r7, pc}
 80155c2:	bf00      	nop
 80155c4:	080249ac 	.word	0x080249ac
 80155c8:	08025334 	.word	0x08025334

080155cc <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80155cc:	b5b0      	push	{r4, r5, r7, lr}
 80155ce:	b08c      	sub	sp, #48	; 0x30
 80155d0:	af02      	add	r7, sp, #8
 80155d2:	60f8      	str	r0, [r7, #12]
 80155d4:	60b9      	str	r1, [r7, #8]
 80155d6:	607a      	str	r2, [r7, #4]
 80155d8:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 80155da:	f107 031c 	add.w	r3, r7, #28
 80155de:	491d      	ldr	r1, [pc, #116]	; (8015654 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 80155e0:	4618      	mov	r0, r3
 80155e2:	f7f6 ffa0 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80155e6:	f107 0014 	add.w	r0, r7, #20
 80155ea:	f107 031c 	add.w	r3, r7, #28
 80155ee:	9301      	str	r3, [sp, #4]
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	9300      	str	r3, [sp, #0]
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	68ba      	ldr	r2, [r7, #8]
 80155f8:	68f9      	ldr	r1, [r7, #12]
 80155fa:	f7ff fe15 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80155fe:	f107 0514 	add.w	r5, r7, #20
 8015602:	f240 1233 	movw	r2, #307	; 0x133
 8015606:	4914      	ldr	r1, [pc, #80]	; (8015658 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8015608:	2010      	movs	r0, #16
 801560a:	f7f4 fbc9 	bl	8009da0 <_ZnwjPKci>
 801560e:	4604      	mov	r4, r0
 8015610:	4629      	mov	r1, r5
 8015612:	4620      	mov	r0, r4
 8015614:	f009 fdc6 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 8015618:	627c      	str	r4, [r7, #36]	; 0x24
 801561a:	f107 0314 	add.w	r3, r7, #20
 801561e:	4618      	mov	r0, r3
 8015620:	f7f7 fb39 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015624:	f107 031c 	add.w	r3, r7, #28
 8015628:	4618      	mov	r0, r3
 801562a:	f7f7 fb34 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801562e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015630:	f009 fdf3 	bl	801f21a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8015634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015636:	f009 fdfd 	bl	801f234 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801563e:	4619      	mov	r1, r3
 8015640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015642:	f009 fdcf 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 8015646:	4602      	mov	r2, r0
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801564c:	bf00      	nop
 801564e:	3728      	adds	r7, #40	; 0x28
 8015650:	46bd      	mov	sp, r7
 8015652:	bdb0      	pop	{r4, r5, r7, pc}
 8015654:	080249b0 	.word	0x080249b0
 8015658:	08025334 	.word	0x08025334

0801565c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 801565c:	b5b0      	push	{r4, r5, r7, lr}
 801565e:	b08c      	sub	sp, #48	; 0x30
 8015660:	af02      	add	r7, sp, #8
 8015662:	60f8      	str	r0, [r7, #12]
 8015664:	60b9      	str	r1, [r7, #8]
 8015666:	607a      	str	r2, [r7, #4]
 8015668:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 801566a:	f107 031c 	add.w	r3, r7, #28
 801566e:	491a      	ldr	r1, [pc, #104]	; (80156d8 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8015670:	4618      	mov	r0, r3
 8015672:	f7f6 ff58 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8015676:	f107 0014 	add.w	r0, r7, #20
 801567a:	f107 031c 	add.w	r3, r7, #28
 801567e:	9301      	str	r3, [sp, #4]
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	9300      	str	r3, [sp, #0]
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	68ba      	ldr	r2, [r7, #8]
 8015688:	68f9      	ldr	r1, [r7, #12]
 801568a:	f7ff fdcd 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801568e:	f107 0514 	add.w	r5, r7, #20
 8015692:	f240 123b 	movw	r2, #315	; 0x13b
 8015696:	4911      	ldr	r1, [pc, #68]	; (80156dc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8015698:	2010      	movs	r0, #16
 801569a:	f7f4 fb81 	bl	8009da0 <_ZnwjPKci>
 801569e:	4604      	mov	r4, r0
 80156a0:	4629      	mov	r1, r5
 80156a2:	4620      	mov	r0, r4
 80156a4:	f009 fd7e 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 80156a8:	627c      	str	r4, [r7, #36]	; 0x24
 80156aa:	f107 0314 	add.w	r3, r7, #20
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7f7 faf1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80156b4:	f107 031c 	add.w	r3, r7, #28
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7f7 faec 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156c2:	4619      	mov	r1, r3
 80156c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80156c6:	f009 fd8d 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 80156ca:	4602      	mov	r2, r0
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80156d0:	bf00      	nop
 80156d2:	3728      	adds	r7, #40	; 0x28
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bdb0      	pop	{r4, r5, r7, pc}
 80156d8:	080249b8 	.word	0x080249b8
 80156dc:	08025334 	.word	0x08025334

080156e0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 80156e0:	b5b0      	push	{r4, r5, r7, lr}
 80156e2:	b08c      	sub	sp, #48	; 0x30
 80156e4:	af02      	add	r7, sp, #8
 80156e6:	60f8      	str	r0, [r7, #12]
 80156e8:	60b9      	str	r1, [r7, #8]
 80156ea:	607a      	str	r2, [r7, #4]
 80156ec:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 80156ee:	f107 031c 	add.w	r3, r7, #28
 80156f2:	491c      	ldr	r1, [pc, #112]	; (8015764 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7f6 ff16 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80156fa:	f107 0014 	add.w	r0, r7, #20
 80156fe:	f107 031c 	add.w	r3, r7, #28
 8015702:	9301      	str	r3, [sp, #4]
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	9300      	str	r3, [sp, #0]
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	68ba      	ldr	r2, [r7, #8]
 801570c:	68f9      	ldr	r1, [r7, #12]
 801570e:	f7ff fd8b 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015712:	f107 0514 	add.w	r5, r7, #20
 8015716:	f240 1241 	movw	r2, #321	; 0x141
 801571a:	4913      	ldr	r1, [pc, #76]	; (8015768 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 801571c:	2010      	movs	r0, #16
 801571e:	f7f4 fb3f 	bl	8009da0 <_ZnwjPKci>
 8015722:	4604      	mov	r4, r0
 8015724:	4629      	mov	r1, r5
 8015726:	4620      	mov	r0, r4
 8015728:	f009 fd3c 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 801572c:	627c      	str	r4, [r7, #36]	; 0x24
 801572e:	f107 0314 	add.w	r3, r7, #20
 8015732:	4618      	mov	r0, r3
 8015734:	f7f7 faaf 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015738:	f107 031c 	add.w	r3, r7, #28
 801573c:	4618      	mov	r0, r3
 801573e:	f7f7 faaa 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8015742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015744:	f009 fd69 	bl	801f21a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801574c:	4619      	mov	r1, r3
 801574e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015750:	f009 fd48 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 8015754:	4602      	mov	r2, r0
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	629a      	str	r2, [r3, #40]	; 0x28
}
 801575a:	bf00      	nop
 801575c:	3728      	adds	r7, #40	; 0x28
 801575e:	46bd      	mov	sp, r7
 8015760:	bdb0      	pop	{r4, r5, r7, pc}
 8015762:	bf00      	nop
 8015764:	080249bc 	.word	0x080249bc
 8015768:	08025334 	.word	0x08025334

0801576c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 801576c:	b5b0      	push	{r4, r5, r7, lr}
 801576e:	b08c      	sub	sp, #48	; 0x30
 8015770:	af02      	add	r7, sp, #8
 8015772:	60f8      	str	r0, [r7, #12]
 8015774:	60b9      	str	r1, [r7, #8]
 8015776:	607a      	str	r2, [r7, #4]
 8015778:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 801577a:	f107 031c 	add.w	r3, r7, #28
 801577e:	491c      	ldr	r1, [pc, #112]	; (80157f0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8015780:	4618      	mov	r0, r3
 8015782:	f7f6 fed0 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8015786:	f107 0014 	add.w	r0, r7, #20
 801578a:	f107 031c 	add.w	r3, r7, #28
 801578e:	9301      	str	r3, [sp, #4]
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	9300      	str	r3, [sp, #0]
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	68ba      	ldr	r2, [r7, #8]
 8015798:	68f9      	ldr	r1, [r7, #12]
 801579a:	f7ff fd45 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801579e:	f107 0514 	add.w	r5, r7, #20
 80157a2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80157a6:	4913      	ldr	r1, [pc, #76]	; (80157f4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 80157a8:	2010      	movs	r0, #16
 80157aa:	f7f4 faf9 	bl	8009da0 <_ZnwjPKci>
 80157ae:	4604      	mov	r4, r0
 80157b0:	4629      	mov	r1, r5
 80157b2:	4620      	mov	r0, r4
 80157b4:	f009 fcf6 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 80157b8:	627c      	str	r4, [r7, #36]	; 0x24
 80157ba:	f107 0314 	add.w	r3, r7, #20
 80157be:	4618      	mov	r0, r3
 80157c0:	f7f7 fa69 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80157c4:	f107 031c 	add.w	r3, r7, #28
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7f7 fa64 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80157ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157d0:	f009 fd30 	bl	801f234 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157d8:	4619      	mov	r1, r3
 80157da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157dc:	f009 fd02 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 80157e0:	4602      	mov	r2, r0
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80157e6:	bf00      	nop
 80157e8:	3728      	adds	r7, #40	; 0x28
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bdb0      	pop	{r4, r5, r7, pc}
 80157ee:	bf00      	nop
 80157f0:	080249c0 	.word	0x080249c0
 80157f4:	08025334 	.word	0x08025334

080157f8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 80157f8:	b5b0      	push	{r4, r5, r7, lr}
 80157fa:	b08c      	sub	sp, #48	; 0x30
 80157fc:	af02      	add	r7, sp, #8
 80157fe:	60f8      	str	r0, [r7, #12]
 8015800:	60b9      	str	r1, [r7, #8]
 8015802:	607a      	str	r2, [r7, #4]
 8015804:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8015806:	f107 031c 	add.w	r3, r7, #28
 801580a:	491d      	ldr	r1, [pc, #116]	; (8015880 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 801580c:	4618      	mov	r0, r3
 801580e:	f7f6 fe8a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8015812:	f107 0014 	add.w	r0, r7, #20
 8015816:	f107 031c 	add.w	r3, r7, #28
 801581a:	9301      	str	r3, [sp, #4]
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	9300      	str	r3, [sp, #0]
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	68ba      	ldr	r2, [r7, #8]
 8015824:	68f9      	ldr	r1, [r7, #12]
 8015826:	f7ff fcff 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801582a:	f107 0514 	add.w	r5, r7, #20
 801582e:	f240 124f 	movw	r2, #335	; 0x14f
 8015832:	4914      	ldr	r1, [pc, #80]	; (8015884 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8015834:	2010      	movs	r0, #16
 8015836:	f7f4 fab3 	bl	8009da0 <_ZnwjPKci>
 801583a:	4604      	mov	r4, r0
 801583c:	4629      	mov	r1, r5
 801583e:	4620      	mov	r0, r4
 8015840:	f009 fcb0 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 8015844:	627c      	str	r4, [r7, #36]	; 0x24
 8015846:	f107 0314 	add.w	r3, r7, #20
 801584a:	4618      	mov	r0, r3
 801584c:	f7f7 fa23 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015850:	f107 031c 	add.w	r3, r7, #28
 8015854:	4618      	mov	r0, r3
 8015856:	f7f7 fa1e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 801585a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801585c:	f009 fcea 	bl	801f234 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8015860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015862:	f009 fcda 	bl	801f21a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801586a:	4619      	mov	r1, r3
 801586c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801586e:	f009 fcb9 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 8015872:	4602      	mov	r2, r0
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015878:	bf00      	nop
 801587a:	3728      	adds	r7, #40	; 0x28
 801587c:	46bd      	mov	sp, r7
 801587e:	bdb0      	pop	{r4, r5, r7, pc}
 8015880:	080249c4 	.word	0x080249c4
 8015884:	08025334 	.word	0x08025334

08015888 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8015888:	b5b0      	push	{r4, r5, r7, lr}
 801588a:	b092      	sub	sp, #72	; 0x48
 801588c:	af02      	add	r7, sp, #8
 801588e:	60f8      	str	r0, [r7, #12]
 8015890:	60b9      	str	r1, [r7, #8]
 8015892:	607a      	str	r2, [r7, #4]
 8015894:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8015896:	f107 0320 	add.w	r3, r7, #32
 801589a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801589c:	4618      	mov	r0, r3
 801589e:	f7f6 fe42 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80158a2:	f107 0018 	add.w	r0, r7, #24
 80158a6:	f107 0320 	add.w	r3, r7, #32
 80158aa:	9301      	str	r3, [sp, #4]
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	9300      	str	r3, [sp, #0]
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	68ba      	ldr	r2, [r7, #8]
 80158b4:	68f9      	ldr	r1, [r7, #12]
 80158b6:	f7ff fcb7 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80158ba:	f107 0320 	add.w	r3, r7, #32
 80158be:	4618      	mov	r0, r3
 80158c0:	f7f7 f9e9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80158c4:	f107 0010 	add.w	r0, r7, #16
 80158c8:	f107 0118 	add.w	r1, r7, #24
 80158cc:	2329      	movs	r3, #41	; 0x29
 80158ce:	222c      	movs	r2, #44	; 0x2c
 80158d0:	f7f7 fb92 	bl	800cff8 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 80158d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80158d8:	f107 0110 	add.w	r1, r7, #16
 80158dc:	2202      	movs	r2, #2
 80158de:	4618      	mov	r0, r3
 80158e0:	f7f7 fb2c 	bl	800cf3c <_ZNK12SimpleString9subStringEj>
 80158e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80158e8:	f107 0310 	add.w	r3, r7, #16
 80158ec:	4611      	mov	r1, r2
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7f6 fe85 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 80158f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7f7 f9cc 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 80158fe:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8015902:	492a      	ldr	r1, [pc, #168]	; (80159ac <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8015904:	2010      	movs	r0, #16
 8015906:	f7f4 fa4b 	bl	8009da0 <_ZnwjPKci>
 801590a:	4604      	mov	r4, r0
 801590c:	f107 0310 	add.w	r3, r7, #16
 8015910:	4619      	mov	r1, r3
 8015912:	4620      	mov	r0, r4
 8015914:	f009 fc46 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 8015918:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 801591a:	f107 0318 	add.w	r3, r7, #24
 801591e:	2100      	movs	r1, #0
 8015920:	4618      	mov	r0, r3
 8015922:	f7f7 fb1c 	bl	800cf5e <_ZNK12SimpleString2atEj>
 8015926:	4603      	mov	r3, r0
 8015928:	461a      	mov	r2, r3
 801592a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801592e:	f107 0118 	add.w	r1, r7, #24
 8015932:	232c      	movs	r3, #44	; 0x2c
 8015934:	f7f7 fb60 	bl	800cff8 <_ZNK12SimpleString17subStringFromTillEcc>
 8015938:	f107 0530 	add.w	r5, r7, #48	; 0x30
 801593c:	f240 125b 	movw	r2, #347	; 0x15b
 8015940:	491a      	ldr	r1, [pc, #104]	; (80159ac <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8015942:	2010      	movs	r0, #16
 8015944:	f7f4 fa2c 	bl	8009da0 <_ZnwjPKci>
 8015948:	4604      	mov	r4, r0
 801594a:	4629      	mov	r1, r5
 801594c:	4620      	mov	r0, r4
 801594e:	f009 fc29 	bl	801f1a4 <_ZN10TestFilterC1ERK12SimpleString>
 8015952:	63bc      	str	r4, [r7, #56]	; 0x38
 8015954:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015958:	4618      	mov	r0, r3
 801595a:	f7f7 f99c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 801595e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015960:	f009 fc5b 	bl	801f21a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8015964:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015966:	f009 fc58 	bl	801f21a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801596e:	4619      	mov	r1, r3
 8015970:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015972:	f009 fc37 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 8015976:	4602      	mov	r2, r0
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015980:	4619      	mov	r1, r3
 8015982:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015984:	f009 fc2e 	bl	801f1e4 <_ZN10TestFilter3addEPS_>
 8015988:	4602      	mov	r2, r0
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 801598e:	f107 0310 	add.w	r3, r7, #16
 8015992:	4618      	mov	r0, r3
 8015994:	f7f7 f97f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8015998:	f107 0318 	add.w	r3, r7, #24
 801599c:	4618      	mov	r0, r3
 801599e:	f7f7 f97a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 80159a2:	bf00      	nop
 80159a4:	3740      	adds	r7, #64	; 0x40
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bdb0      	pop	{r4, r5, r7, pc}
 80159aa:	bf00      	nop
 80159ac:	08025334 	.word	0x08025334

080159b0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 80159b0:	b590      	push	{r4, r7, lr}
 80159b2:	b08b      	sub	sp, #44	; 0x2c
 80159b4:	af02      	add	r7, sp, #8
 80159b6:	60f8      	str	r0, [r7, #12]
 80159b8:	60b9      	str	r1, [r7, #8]
 80159ba:	607a      	str	r2, [r7, #4]
 80159bc:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80159be:	f107 0318 	add.w	r3, r7, #24
 80159c2:	491b      	ldr	r1, [pc, #108]	; (8015a30 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7f6 fdae 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80159ca:	f107 0010 	add.w	r0, r7, #16
 80159ce:	f107 0318 	add.w	r3, r7, #24
 80159d2:	9301      	str	r3, [sp, #4]
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	9300      	str	r3, [sp, #0]
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	68ba      	ldr	r2, [r7, #8]
 80159dc:	68f9      	ldr	r1, [r7, #12]
 80159de:	f7ff fc23 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80159e2:	f107 0318 	add.w	r3, r7, #24
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7f7 f955 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 80159ec:	f107 0310 	add.w	r3, r7, #16
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7f7 f92f 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 80159f6:	4603      	mov	r3, r0
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	bf0c      	ite	eq
 80159fc:	2301      	moveq	r3, #1
 80159fe:	2300      	movne	r3, #0
 8015a00:	b2db      	uxtb	r3, r3
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d001      	beq.n	8015a0a <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8015a06:	2400      	movs	r4, #0
 8015a08:	e008      	b.n	8015a1c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	3330      	adds	r3, #48	; 0x30
 8015a0e:	f107 0210 	add.w	r2, r7, #16
 8015a12:	4611      	mov	r1, r2
 8015a14:	4618      	mov	r0, r3
 8015a16:	f7f6 fdf2 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8015a1a:	2401      	movs	r4, #1
 8015a1c:	f107 0310 	add.w	r3, r7, #16
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7f7 f938 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015a26:	2c01      	cmp	r4, #1
}
 8015a28:	3724      	adds	r7, #36	; 0x24
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd90      	pop	{r4, r7, pc}
 8015a2e:	bf00      	nop
 8015a30:	080249ec 	.word	0x080249ec

08015a34 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8015a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a36:	b093      	sub	sp, #76	; 0x4c
 8015a38:	af02      	add	r7, sp, #8
 8015a3a:	60f8      	str	r0, [r7, #12]
 8015a3c:	60b9      	str	r1, [r7, #8]
 8015a3e:	607a      	str	r2, [r7, #4]
 8015a40:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8015a42:	f107 0318 	add.w	r3, r7, #24
 8015a46:	4953      	ldr	r1, [pc, #332]	; (8015b94 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7f6 fd6c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8015a4e:	f107 0010 	add.w	r0, r7, #16
 8015a52:	f107 0318 	add.w	r3, r7, #24
 8015a56:	9301      	str	r3, [sp, #4]
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	9300      	str	r3, [sp, #0]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	68ba      	ldr	r2, [r7, #8]
 8015a60:	68f9      	ldr	r1, [r7, #12]
 8015a62:	f7ff fbe1 	bl	8015228 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015a66:	f107 0318 	add.w	r3, r7, #24
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7f7 f913 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8015a70:	f107 0310 	add.w	r3, r7, #16
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7f7 f8ed 	bl	800cc54 <_ZNK12SimpleString4sizeEv>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	bf0c      	ite	eq
 8015a80:	2301      	moveq	r3, #1
 8015a82:	2300      	movne	r3, #0
 8015a84:	b2db      	uxtb	r3, r3
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d001      	beq.n	8015a8e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8015a8a:	2400      	movs	r4, #0
 8015a8c:	e078      	b.n	8015b80 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8015a8e:	2500      	movs	r5, #0
 8015a90:	f107 0320 	add.w	r3, r7, #32
 8015a94:	4940      	ldr	r1, [pc, #256]	; (8015b98 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7f6 fd45 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8015a9c:	2601      	movs	r6, #1
 8015a9e:	f107 0220 	add.w	r2, r7, #32
 8015aa2:	f107 0310 	add.w	r3, r7, #16
 8015aa6:	4611      	mov	r1, r2
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7f7 f900 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d111      	bne.n	8015ad8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8015ab4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015ab8:	4938      	ldr	r1, [pc, #224]	; (8015b9c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7f6 fd33 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8015ac0:	2501      	movs	r5, #1
 8015ac2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015ac6:	f107 0310 	add.w	r3, r7, #16
 8015aca:	4611      	mov	r1, r2
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f7 f8ee 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d001      	beq.n	8015adc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8015ad8:	2401      	movs	r4, #1
 8015ada:	e000      	b.n	8015ade <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8015adc:	2400      	movs	r4, #0
 8015ade:	2d00      	cmp	r5, #0
 8015ae0:	d004      	beq.n	8015aec <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8015ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7f7 f8d5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015aec:	2e00      	cmp	r6, #0
 8015aee:	d004      	beq.n	8015afa <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8015af0:	f107 0320 	add.w	r3, r7, #32
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7f7 f8ce 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015afa:	2c00      	cmp	r4, #0
 8015afc:	d005      	beq.n	8015b0a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	2200      	movs	r2, #0
 8015b02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015b06:	2401      	movs	r4, #1
 8015b08:	e03a      	b.n	8015b80 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8015b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015b0e:	4924      	ldr	r1, [pc, #144]	; (8015ba0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8015b10:	4618      	mov	r0, r3
 8015b12:	f7f6 fd08 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8015b16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015b1a:	f107 0310 	add.w	r3, r7, #16
 8015b1e:	4611      	mov	r1, r2
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7f7 f8c4 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8015b26:	4603      	mov	r3, r0
 8015b28:	461c      	mov	r4, r3
 8015b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f7f7 f8b1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015b34:	2c00      	cmp	r4, #0
 8015b36:	d005      	beq.n	8015b44 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	2201      	movs	r2, #1
 8015b3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015b40:	2401      	movs	r4, #1
 8015b42:	e01d      	b.n	8015b80 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8015b44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015b48:	4916      	ldr	r1, [pc, #88]	; (8015ba4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7f6 fceb 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8015b50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8015b54:	f107 0310 	add.w	r3, r7, #16
 8015b58:	4611      	mov	r1, r2
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f7f7 f8a7 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8015b60:	4603      	mov	r3, r0
 8015b62:	461c      	mov	r4, r3
 8015b64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7f7 f894 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015b6e:	2c00      	cmp	r4, #0
 8015b70:	d005      	beq.n	8015b7e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	2202      	movs	r2, #2
 8015b76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8015b7a:	2401      	movs	r4, #1
 8015b7c:	e000      	b.n	8015b80 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8015b7e:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8015b80:	f107 0310 	add.w	r3, r7, #16
 8015b84:	4618      	mov	r0, r3
 8015b86:	f7f7 f886 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8015b8a:	4623      	mov	r3, r4
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3744      	adds	r7, #68	; 0x44
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b94:	080249e8 	.word	0x080249e8
 8015b98:	08025358 	.word	0x08025358
 8015b9c:	08025360 	.word	0x08025360
 8015ba0:	08025368 	.word	0x08025368
 8015ba4:	08025370 	.word	0x08025370

08015ba8 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8015ba8:	b480      	push	{r7}
 8015baa:	b083      	sub	sp, #12
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015bb6:	2b01      	cmp	r3, #1
 8015bb8:	bf0c      	ite	eq
 8015bba:	2301      	moveq	r3, #1
 8015bbc:	2300      	movne	r3, #0
 8015bbe:	b2db      	uxtb	r3, r3
}
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	370c      	adds	r7, #12
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bca:	4770      	bx	lr

08015bcc <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8015bcc:	b480      	push	{r7}
 8015bce:	b083      	sub	sp, #12
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015bda:	2b02      	cmp	r3, #2
 8015bdc:	bf0c      	ite	eq
 8015bde:	2301      	moveq	r3, #1
 8015be0:	2300      	movne	r3, #0
 8015be2:	b2db      	uxtb	r3, r3
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	370c      	adds	r7, #12
 8015be8:	46bd      	mov	sp, r7
 8015bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bee:	4770      	bx	lr

08015bf0 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b083      	sub	sp, #12
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
    return packageName_;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	3330      	adds	r3, #48	; 0x30
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c06:	4770      	bx	lr

08015c08 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8015c08:	b480      	push	{r7}
 8015c0a:	b083      	sub	sp, #12
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	2200      	movs	r2, #0
 8015c14:	601a      	str	r2, [r3, #0]
    {}
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	4618      	mov	r0, r3
 8015c1a:	370c      	adds	r7, #12
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr

08015c24 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8015c24:	b480      	push	{r7}
 8015c26:	b083      	sub	sp, #12
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c32:	2200      	movs	r2, #0
 8015c34:	601a      	str	r2, [r3, #0]
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c3c:	3304      	adds	r3, #4
 8015c3e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015c42:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2200      	movs	r2, #0
 8015c48:	701a      	strb	r2, [r3, #0]
}
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	370c      	adds	r7, #12
 8015c50:	46bd      	mov	sp, r7
 8015c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c56:	4770      	bx	lr

08015c58 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8015c58:	b480      	push	{r7}
 8015c5a:	b083      	sub	sp, #12
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c66:	2200      	movs	r2, #0
 8015c68:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	701a      	strb	r2, [r3, #0]
}
 8015c70:	bf00      	nop
 8015c72:	370c      	adds	r7, #12
 8015c74:	46bd      	mov	sp, r7
 8015c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7a:	4770      	bx	lr

08015c7c <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8015c7c:	b40e      	push	{r1, r2, r3}
 8015c7e:	b590      	push	{r4, r7, lr}
 8015c80:	b086      	sub	sp, #24
 8015c82:	af00      	add	r7, sp, #0
 8015c84:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c8c:	3304      	adds	r3, #4
 8015c8e:	681a      	ldr	r2, [r3, #0]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	1ad3      	subs	r3, r2, r3
 8015c9a:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8015c9c:	697b      	ldr	r3, [r7, #20]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d032      	beq.n	8015d08 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8015ca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015ca6:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8015ca8:	4b1b      	ldr	r3, [pc, #108]	; (8015d18 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8015caa:	681c      	ldr	r4, [r3, #0]
 8015cac:	687a      	ldr	r2, [r7, #4]
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	18d0      	adds	r0, r2, r3
 8015cb8:	697b      	ldr	r3, [r7, #20]
 8015cba:	1c59      	adds	r1, r3, #1
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cc0:	47a0      	blx	r4
 8015cc2:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	dd09      	ble.n	8015cde <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015cd0:	681a      	ldr	r2, [r3, #0]
 8015cd2:	693b      	ldr	r3, [r7, #16]
 8015cd4:	441a      	add	r2, r3
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015cdc:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ce4:	681a      	ldr	r2, [r3, #0]
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015cec:	3304      	adds	r3, #4
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	d90a      	bls.n	8015d0a <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015cfa:	3304      	adds	r3, #4
 8015cfc:	681a      	ldr	r2, [r3, #0]
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d04:	601a      	str	r2, [r3, #0]
 8015d06:	e000      	b.n	8015d0a <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8015d08:	bf00      	nop
    va_end(arguments);
}
 8015d0a:	3718      	adds	r7, #24
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8015d12:	b003      	add	sp, #12
 8015d14:	4770      	bx	lr
 8015d16:	bf00      	nop
 8015d18:	200000b0 	.word	0x200000b0

08015d1c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b08c      	sub	sp, #48	; 0x30
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	60f8      	str	r0, [r7, #12]
 8015d24:	60b9      	str	r1, [r7, #8]
 8015d26:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8015d28:	68bb      	ldr	r3, [r7, #8]
 8015d2a:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8015d2c:	2310      	movs	r3, #16
 8015d2e:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8015d30:	2300      	movs	r3, #0
 8015d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8015d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	d273      	bcs.n	8015e24 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8015d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d3e:	493b      	ldr	r1, [pc, #236]	; (8015e2c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8015d40:	68f8      	ldr	r0, [r7, #12]
 8015d42:	f7ff ff9b 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8015d46:	687a      	ldr	r2, [r7, #4]
 8015d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4a:	1ad3      	subs	r3, r2, r3
 8015d4c:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8015d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d50:	2b10      	cmp	r3, #16
 8015d52:	d901      	bls.n	8015d58 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8015d54:	2310      	movs	r3, #16
 8015d56:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8015d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d5a:	f1c3 0310 	rsb	r3, r3, #16
 8015d5e:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8015d60:	2300      	movs	r3, #0
 8015d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d215      	bcs.n	8015d98 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8015d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d70:	4413      	add	r3, r2
 8015d72:	69fa      	ldr	r2, [r7, #28]
 8015d74:	4413      	add	r3, r2
 8015d76:	781b      	ldrb	r3, [r3, #0]
 8015d78:	461a      	mov	r2, r3
 8015d7a:	492d      	ldr	r1, [pc, #180]	; (8015e30 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8015d7c:	68f8      	ldr	r0, [r7, #12]
 8015d7e:	f7ff ff7d 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8015d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d84:	2b07      	cmp	r3, #7
 8015d86:	d103      	bne.n	8015d90 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8015d88:	492a      	ldr	r1, [pc, #168]	; (8015e34 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8015d8a:	68f8      	ldr	r0, [r7, #12]
 8015d8c:	f7ff ff76 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d92:	3301      	adds	r3, #1
 8015d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d96:	e7e5      	b.n	8015d64 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8015d98:	2300      	movs	r3, #0
 8015d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	429a      	cmp	r2, r3
 8015da2:	d207      	bcs.n	8015db4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8015da4:	4924      	ldr	r1, [pc, #144]	; (8015e38 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8015da6:	68f8      	ldr	r0, [r7, #12]
 8015da8:	f7ff ff68 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8015dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dae:	3301      	adds	r3, #1
 8015db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8015db2:	e7f3      	b.n	8015d9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	2b08      	cmp	r3, #8
 8015db8:	d903      	bls.n	8015dc2 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8015dba:	491e      	ldr	r1, [pc, #120]	; (8015e34 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8015dbc:	68f8      	ldr	r0, [r7, #12]
 8015dbe:	f7ff ff5d 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8015dc2:	491e      	ldr	r1, [pc, #120]	; (8015e3c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8015dc4:	68f8      	ldr	r0, [r7, #12]
 8015dc6:	f7ff ff59 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015dca:	2300      	movs	r3, #0
 8015dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8015dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d21d      	bcs.n	8015e12 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8015dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dda:	4413      	add	r3, r2
 8015ddc:	69fa      	ldr	r2, [r7, #28]
 8015dde:	4413      	add	r3, r2
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8015de6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015dea:	2b1f      	cmp	r3, #31
 8015dec:	d903      	bls.n	8015df6 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8015dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015df2:	2b7e      	cmp	r3, #126	; 0x7e
 8015df4:	d902      	bls.n	8015dfc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8015df6:	232e      	movs	r3, #46	; 0x2e
 8015df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8015dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e00:	461a      	mov	r2, r3
 8015e02:	490f      	ldr	r1, [pc, #60]	; (8015e40 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8015e04:	68f8      	ldr	r0, [r7, #12]
 8015e06:	f7ff ff39 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e10:	e7dd      	b.n	8015dce <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8015e12:	490c      	ldr	r1, [pc, #48]	; (8015e44 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8015e14:	68f8      	ldr	r0, [r7, #12]
 8015e16:	f7ff ff31 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8015e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e1e:	4413      	add	r3, r2
 8015e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8015e22:	e787      	b.n	8015d34 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8015e24:	bf00      	nop
 8015e26:	3730      	adds	r7, #48	; 0x30
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	08025388 	.word	0x08025388
 8015e30:	08025394 	.word	0x08025394
 8015e34:	0802539c 	.word	0x0802539c
 8015e38:	080253a0 	.word	0x080253a0
 8015e3c:	080253a4 	.word	0x080253a4
 8015e40:	080253a8 	.word	0x080253a8
 8015e44:	080253ac 	.word	0x080253ac

08015e48 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8015e48:	b480      	push	{r7}
 8015e4a:	b083      	sub	sp, #12
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
    return buffer_;
 8015e50:	687b      	ldr	r3, [r7, #4]
}
 8015e52:	4618      	mov	r0, r3
 8015e54:	370c      	adds	r7, #12
 8015e56:	46bd      	mov	sp, r7
 8015e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5c:	4770      	bx	lr

08015e5e <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8015e5e:	b480      	push	{r7}
 8015e60:	b083      	sub	sp, #12
 8015e62:	af00      	add	r7, sp, #0
 8015e64:	6078      	str	r0, [r7, #4]
 8015e66:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e6e:	3304      	adds	r3, #4
 8015e70:	683a      	ldr	r2, [r7, #0]
 8015e72:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e7a:	3304      	adds	r3, #4
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015e82:	d306      	bcc.n	8015e92 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e8a:	3304      	adds	r3, #4
 8015e8c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015e90:	601a      	str	r2, [r3, #0]
}
 8015e92:	bf00      	nop
 8015e94:	370c      	adds	r7, #12
 8015e96:	46bd      	mov	sp, r7
 8015e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9c:	4770      	bx	lr

08015e9e <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8015e9e:	b480      	push	{r7}
 8015ea0:	b083      	sub	sp, #12
 8015ea2:	af00      	add	r7, sp, #0
 8015ea4:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015eac:	3304      	adds	r3, #4
 8015eae:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015eb2:	601a      	str	r2, [r3, #0]
}
 8015eb4:	bf00      	nop
 8015eb6:	370c      	adds	r7, #12
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebe:	4770      	bx	lr

08015ec0 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8015ec0:	b480      	push	{r7}
 8015ec2:	b083      	sub	sp, #12
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ece:	681a      	ldr	r2, [r3, #0]
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ed6:	3304      	adds	r3, #4
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	bf2c      	ite	cs
 8015ede:	2301      	movcs	r3, #1
 8015ee0:	2300      	movcc	r3, #0
 8015ee2:	b2db      	uxtb	r3, r3
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	370c      	adds	r7, #12
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eee:	4770      	bx	lr

08015ef0 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b082      	sub	sp, #8
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2200      	movs	r2, #0
 8015efc:	601a      	str	r2, [r3, #0]
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2200      	movs	r2, #0
 8015f02:	711a      	strb	r2, [r3, #4]
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	3308      	adds	r3, #8
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7ff fe8b 	bl	8015c24 <_ZN18SimpleStringBufferC1Ev>
{
}
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	4618      	mov	r0, r3
 8015f12:	3708      	adds	r7, #8
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bd80      	pop	{r7, pc}

08015f18 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8015f18:	b5b0      	push	{r4, r5, r7, lr}
 8015f1a:	b086      	sub	sp, #24
 8015f1c:	af02      	add	r7, sp, #8
 8015f1e:	60f8      	str	r0, [r7, #12]
 8015f20:	60b9      	str	r1, [r7, #8]
 8015f22:	607a      	str	r2, [r7, #4]
 8015f24:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	f103 0408 	add.w	r4, r3, #8
 8015f2c:	687d      	ldr	r5, [r7, #4]
 8015f2e:	6a3b      	ldr	r3, [r7, #32]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	3314      	adds	r3, #20
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	6a38      	ldr	r0, [r7, #32]
 8015f38:	4798      	blx	r3
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	9301      	str	r3, [sp, #4]
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	9300      	str	r3, [sp, #0]
 8015f42:	462b      	mov	r3, r5
 8015f44:	68ba      	ldr	r2, [r7, #8]
 8015f46:	4904      	ldr	r1, [pc, #16]	; (8015f58 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8015f48:	4620      	mov	r0, r4
 8015f4a:	f7ff fe97 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015f4e:	bf00      	nop
 8015f50:	3710      	adds	r7, #16
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bdb0      	pop	{r4, r5, r7, pc}
 8015f56:	bf00      	nop
 8015f58:	080253b0 	.word	0x080253b0

08015f5c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8015f5c:	b5b0      	push	{r4, r5, r7, lr}
 8015f5e:	b086      	sub	sp, #24
 8015f60:	af02      	add	r7, sp, #8
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
 8015f68:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	f103 0408 	add.w	r4, r3, #8
 8015f70:	687d      	ldr	r5, [r7, #4]
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	3318      	adds	r3, #24
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	6838      	ldr	r0, [r7, #0]
 8015f7c:	4798      	blx	r3
 8015f7e:	4603      	mov	r3, r0
 8015f80:	9300      	str	r3, [sp, #0]
 8015f82:	462b      	mov	r3, r5
 8015f84:	68ba      	ldr	r2, [r7, #8]
 8015f86:	4904      	ldr	r1, [pc, #16]	; (8015f98 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8015f88:	4620      	mov	r0, r4
 8015f8a:	f7ff fe77 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015f8e:	bf00      	nop
 8015f90:	3710      	adds	r7, #16
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bdb0      	pop	{r4, r5, r7, pc}
 8015f96:	bf00      	nop
 8015f98:	080253e8 	.word	0x080253e8

08015f9c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	3308      	adds	r3, #8
 8015fa8:	4903      	ldr	r1, [pc, #12]	; (8015fb8 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8015faa:	4618      	mov	r0, r3
 8015fac:	f7ff fe66 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015fb0:	bf00      	nop
 8015fb2:	3708      	adds	r7, #8
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}
 8015fb8:	08025418 	.word	0x08025418

08015fbc <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b084      	sub	sp, #16
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	2200      	movs	r2, #0
 8015fce:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8015fd0:	2367      	movs	r3, #103	; 0x67
 8015fd2:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	f203 1311 	addw	r3, r3, #273	; 0x111
 8015fda:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f103 0208 	add.w	r2, r3, #8
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8015fe8:	4619      	mov	r1, r3
 8015fea:	4610      	mov	r0, r2
 8015fec:	f7ff ff37 	bl	8015e5e <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8015ff0:	bf00      	nop
 8015ff2:	3710      	adds	r7, #16
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8015ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ffa:	b089      	sub	sp, #36	; 0x24
 8015ffc:	af04      	add	r7, sp, #16
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d102      	bne.n	8016010 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 801600a:	68f8      	ldr	r0, [r7, #12]
 801600c:	f000 f882 	bl	8016114 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	1c5a      	adds	r2, r3, #1
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	f103 0508 	add.w	r5, r3, #8
 8016020:	68bb      	ldr	r3, [r7, #8]
 8016022:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016032:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016034:	68bb      	ldr	r3, [r7, #8]
 8016036:	695a      	ldr	r2, [r3, #20]
 8016038:	68bb      	ldr	r3, [r7, #8]
 801603a:	695b      	ldr	r3, [r3, #20]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	3314      	adds	r3, #20
 8016040:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016042:	4610      	mov	r0, r2
 8016044:	4798      	blx	r3
 8016046:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801604c:	9303      	str	r3, [sp, #12]
 801604e:	9202      	str	r2, [sp, #8]
 8016050:	683a      	ldr	r2, [r7, #0]
 8016052:	9201      	str	r2, [sp, #4]
 8016054:	9400      	str	r4, [sp, #0]
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	4632      	mov	r2, r6
 801605a:	4915      	ldr	r1, [pc, #84]	; (80160b0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 801605c:	4628      	mov	r0, r5
 801605e:	f7ff fe0d 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	f103 0008 	add.w	r0, r3, #8
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	6899      	ldr	r1, [r3, #8]
 801606c:	68bb      	ldr	r3, [r7, #8]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	461a      	mov	r2, r3
 8016072:	f7ff fe53 	bl	8015d1c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	695a      	ldr	r2, [r3, #20]
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	695b      	ldr	r3, [r3, #20]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	3314      	adds	r3, #20
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	4610      	mov	r0, r2
 8016086:	4798      	blx	r3
 8016088:	4603      	mov	r3, r0
 801608a:	490a      	ldr	r1, [pc, #40]	; (80160b4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 801608c:	4618      	mov	r0, r3
 801608e:	f7f6 f887 	bl	800c1a0 <_ZN12SimpleString6StrCmpEPKcS1_>
 8016092:	4603      	mov	r3, r0
 8016094:	2b00      	cmp	r3, #0
 8016096:	bf0c      	ite	eq
 8016098:	2301      	moveq	r3, #1
 801609a:	2300      	movne	r3, #0
 801609c:	b2db      	uxtb	r3, r3
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d002      	beq.n	80160a8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	2201      	movs	r2, #1
 80160a6:	711a      	strb	r2, [r3, #4]
}
 80160a8:	bf00      	nop
 80160aa:	3714      	adds	r7, #20
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160b0:	08025438 	.word	0x08025438
 80160b4:	08025498 	.word	0x08025498

080160b8 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b084      	sub	sp, #16
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d103      	bne.n	80160d0 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f7ff ff67 	bl	8015f9c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 80160ce:	e01e      	b.n	801610e <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	3308      	adds	r3, #8
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7ff fef3 	bl	8015ec0 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 80160da:	4603      	mov	r3, r0
 80160dc:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	3308      	adds	r3, #8
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7ff fedb 	bl	8015e9e <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 80160e8:	7bfb      	ldrb	r3, [r7, #15]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d002      	beq.n	80160f4 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f000 f820 	bl	8016134 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	4619      	mov	r1, r3
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f000 f82a 	bl	8016154 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	791b      	ldrb	r3, [r3, #4]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d002      	beq.n	801610e <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f000 f839 	bl	8016180 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 801610e:	3710      	adds	r7, #16
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}

08016114 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b082      	sub	sp, #8
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	3308      	adds	r3, #8
 8016120:	4903      	ldr	r1, [pc, #12]	; (8016130 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8016122:	4618      	mov	r0, r3
 8016124:	f7ff fdaa 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016128:	bf00      	nop
 801612a:	3708      	adds	r7, #8
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}
 8016130:	080254a0 	.word	0x080254a0

08016134 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b082      	sub	sp, #8
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	3308      	adds	r3, #8
 8016140:	4903      	ldr	r1, [pc, #12]	; (8016150 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8016142:	4618      	mov	r0, r3
 8016144:	f7ff fd9a 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016148:	bf00      	nop
 801614a:	3708      	adds	r7, #8
 801614c:	46bd      	mov	sp, r7
 801614e:	bd80      	pop	{r7, pc}
 8016150:	080254b8 	.word	0x080254b8

08016154 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b082      	sub	sp, #8
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
 801615c:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	f103 0008 	add.w	r0, r3, #8
 8016164:	683b      	ldr	r3, [r7, #0]
 8016166:	4a04      	ldr	r2, [pc, #16]	; (8016178 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8016168:	4904      	ldr	r1, [pc, #16]	; (801617c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 801616a:	f7ff fd87 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
}
 801616e:	bf00      	nop
 8016170:	3708      	adds	r7, #8
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}
 8016176:	bf00      	nop
 8016178:	08025500 	.word	0x08025500
 801617c:	08025518 	.word	0x08025518

08016180 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b082      	sub	sp, #8
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	3308      	adds	r3, #8
 801618c:	4903      	ldr	r1, [pc, #12]	; (801619c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 801618e:	4618      	mov	r0, r3
 8016190:	f7ff fd74 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016194:	bf00      	nop
 8016196:	3708      	adds	r7, #8
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}
 801619c:	08025520 	.word	0x08025520

080161a0 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b08a      	sub	sp, #40	; 0x28
 80161a4:	af06      	add	r7, sp, #24
 80161a6:	60f8      	str	r0, [r7, #12]
 80161a8:	60b9      	str	r1, [r7, #8]
 80161aa:	607a      	str	r2, [r7, #4]
 80161ac:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 80161ae:	f7f9 fe8d 	bl	800fecc <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 80161b2:	4602      	mov	r2, r0
 80161b4:	69bb      	ldr	r3, [r7, #24]
 80161b6:	9305      	str	r3, [sp, #20]
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	9304      	str	r3, [sp, #16]
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	9303      	str	r3, [sp, #12]
 80161c0:	68bb      	ldr	r3, [r7, #8]
 80161c2:	9302      	str	r3, [sp, #8]
 80161c4:	9201      	str	r2, [sp, #4]
 80161c6:	2300      	movs	r3, #0
 80161c8:	9300      	str	r3, [sp, #0]
 80161ca:	2300      	movs	r3, #0
 80161cc:	4a04      	ldr	r2, [pc, #16]	; (80161e0 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 80161ce:	4905      	ldr	r1, [pc, #20]	; (80161e4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 80161d0:	68f8      	ldr	r0, [r7, #12]
 80161d2:	f000 f855 	bl	8016280 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80161d6:	bf00      	nop
 80161d8:	3710      	adds	r7, #16
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop
 80161e0:	0802537c 	.word	0x0802537c
 80161e4:	08025634 	.word	0x08025634

080161e8 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80161e8:	b590      	push	{r4, r7, lr}
 80161ea:	b08b      	sub	sp, #44	; 0x2c
 80161ec:	af06      	add	r7, sp, #24
 80161ee:	60f8      	str	r0, [r7, #12]
 80161f0:	60b9      	str	r1, [r7, #8]
 80161f2:	607a      	str	r2, [r7, #4]
 80161f4:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80161f6:	68bb      	ldr	r3, [r7, #8]
 80161f8:	68d8      	ldr	r0, [r3, #12]
 80161fa:	68bb      	ldr	r3, [r7, #8]
 80161fc:	691c      	ldr	r4, [r3, #16]
 80161fe:	68bb      	ldr	r3, [r7, #8]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	68ba      	ldr	r2, [r7, #8]
 8016204:	6952      	ldr	r2, [r2, #20]
 8016206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016208:	9105      	str	r1, [sp, #20]
 801620a:	6a39      	ldr	r1, [r7, #32]
 801620c:	9104      	str	r1, [sp, #16]
 801620e:	6839      	ldr	r1, [r7, #0]
 8016210:	9103      	str	r1, [sp, #12]
 8016212:	6879      	ldr	r1, [r7, #4]
 8016214:	9102      	str	r1, [sp, #8]
 8016216:	9201      	str	r2, [sp, #4]
 8016218:	9300      	str	r3, [sp, #0]
 801621a:	4623      	mov	r3, r4
 801621c:	4602      	mov	r2, r0
 801621e:	4904      	ldr	r1, [pc, #16]	; (8016230 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8016220:	68f8      	ldr	r0, [r7, #12]
 8016222:	f000 f82d 	bl	8016280 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016226:	bf00      	nop
 8016228:	3714      	adds	r7, #20
 801622a:	46bd      	mov	sp, r7
 801622c:	bd90      	pop	{r4, r7, pc}
 801622e:	bf00      	nop
 8016230:	08025658 	.word	0x08025658

08016234 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016234:	b590      	push	{r4, r7, lr}
 8016236:	b08b      	sub	sp, #44	; 0x2c
 8016238:	af06      	add	r7, sp, #24
 801623a:	60f8      	str	r0, [r7, #12]
 801623c:	60b9      	str	r1, [r7, #8]
 801623e:	607a      	str	r2, [r7, #4]
 8016240:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8016242:	68bb      	ldr	r3, [r7, #8]
 8016244:	68d8      	ldr	r0, [r3, #12]
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	691c      	ldr	r4, [r3, #16]
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	68ba      	ldr	r2, [r7, #8]
 8016250:	6952      	ldr	r2, [r2, #20]
 8016252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016254:	9105      	str	r1, [sp, #20]
 8016256:	6a39      	ldr	r1, [r7, #32]
 8016258:	9104      	str	r1, [sp, #16]
 801625a:	6839      	ldr	r1, [r7, #0]
 801625c:	9103      	str	r1, [sp, #12]
 801625e:	6879      	ldr	r1, [r7, #4]
 8016260:	9102      	str	r1, [sp, #8]
 8016262:	9201      	str	r2, [sp, #4]
 8016264:	9300      	str	r3, [sp, #0]
 8016266:	4623      	mov	r3, r4
 8016268:	4602      	mov	r2, r0
 801626a:	4904      	ldr	r1, [pc, #16]	; (801627c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 801626c:	68f8      	ldr	r0, [r7, #12]
 801626e:	f000 f807 	bl	8016280 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016272:	bf00      	nop
 8016274:	3714      	adds	r7, #20
 8016276:	46bd      	mov	sp, r7
 8016278:	bd90      	pop	{r4, r7, pc}
 801627a:	bf00      	nop
 801627c:	08025680 	.word	0x08025680

08016280 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016280:	b590      	push	{r4, r7, lr}
 8016282:	b087      	sub	sp, #28
 8016284:	af02      	add	r7, sp, #8
 8016286:	60f8      	str	r0, [r7, #12]
 8016288:	60b9      	str	r1, [r7, #8]
 801628a:	607a      	str	r2, [r7, #4]
 801628c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	3308      	adds	r3, #8
 8016292:	68ba      	ldr	r2, [r7, #8]
 8016294:	4910      	ldr	r1, [pc, #64]	; (80162d8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8016296:	4618      	mov	r0, r3
 8016298:	f7ff fcf0 	bl	8015c7c <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 801629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629e:	9300      	str	r3, [sp, #0]
 80162a0:	6a3b      	ldr	r3, [r7, #32]
 80162a2:	683a      	ldr	r2, [r7, #0]
 80162a4:	6879      	ldr	r1, [r7, #4]
 80162a6:	68f8      	ldr	r0, [r7, #12]
 80162a8:	f7ff fe36 	bl	8015f18 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 80162ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80162b2:	68f8      	ldr	r0, [r7, #12]
 80162b4:	f7ff fe52 	bl	8015f5c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 80162b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	3308      	adds	r3, #8
 80162be:	681c      	ldr	r4, [r3, #0]
 80162c0:	68f8      	ldr	r0, [r7, #12]
 80162c2:	f000 f80b 	bl	80162dc <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80162c6:	4603      	mov	r3, r0
 80162c8:	4619      	mov	r1, r3
 80162ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80162cc:	47a0      	blx	r4
}
 80162ce:	bf00      	nop
 80162d0:	3714      	adds	r7, #20
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd90      	pop	{r4, r7, pc}
 80162d6:	bf00      	nop
 80162d8:	080256ac 	.word	0x080256ac

080162dc <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b082      	sub	sp, #8
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	3308      	adds	r3, #8
 80162e8:	4618      	mov	r0, r3
 80162ea:	f7ff fdad 	bl	8015e48 <_ZN18SimpleStringBuffer8toStringEv>
 80162ee:	4603      	mov	r3, r0
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3708      	adds	r7, #8
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}

080162f8 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b082      	sub	sp, #8
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	3308      	adds	r3, #8
 8016304:	4618      	mov	r0, r3
 8016306:	f7ff fca7 	bl	8015c58 <_ZN18SimpleStringBuffer5clearEv>
}
 801630a:	bf00      	nop
 801630c:	3708      	adds	r7, #8
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}

08016312 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8016312:	b480      	push	{r7}
 8016314:	b085      	sub	sp, #20
 8016316:	af00      	add	r7, sp, #0
 8016318:	60f8      	str	r0, [r7, #12]
 801631a:	60b9      	str	r1, [r7, #8]
 801631c:	607a      	str	r2, [r7, #4]
 801631e:	603b      	str	r3, [r7, #0]
    number_ = number;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	687a      	ldr	r2, [r7, #4]
 8016324:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	68ba      	ldr	r2, [r7, #8]
 801632a:	609a      	str	r2, [r3, #8]
    size_ = size;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	683a      	ldr	r2, [r7, #0]
 8016330:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	69ba      	ldr	r2, [r7, #24]
 8016336:	615a      	str	r2, [r3, #20]
    period_ = period;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	7f3a      	ldrb	r2, [r7, #28]
 801633c:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016344:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801634a:	60da      	str	r2, [r3, #12]
    line_ = line;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016350:	611a      	str	r2, [r3, #16]
}
 8016352:	bf00      	nop
 8016354:	3714      	adds	r7, #20
 8016356:	46bd      	mov	sp, r7
 8016358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635c:	4770      	bx	lr

0801635e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801635e:	b480      	push	{r7}
 8016360:	b085      	sub	sp, #20
 8016362:	af00      	add	r7, sp, #0
 8016364:	60f8      	str	r0, [r7, #12]
 8016366:	60b9      	str	r1, [r7, #8]
 8016368:	4613      	mov	r3, r2
 801636a:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 801636c:	79fb      	ldrb	r3, [r7, #7]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d00b      	beq.n	801638a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	7e1b      	ldrb	r3, [r3, #24]
 8016376:	79fa      	ldrb	r2, [r7, #7]
 8016378:	429a      	cmp	r2, r3
 801637a:	d006      	beq.n	801638a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	7e1b      	ldrb	r3, [r3, #24]
 8016380:	2b01      	cmp	r3, #1
 8016382:	d004      	beq.n	801638e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8016384:	79fb      	ldrb	r3, [r7, #7]
 8016386:	2b02      	cmp	r3, #2
 8016388:	d101      	bne.n	801638e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 801638a:	2301      	movs	r3, #1
 801638c:	e000      	b.n	8016390 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 801638e:	2300      	movs	r3, #0
}
 8016390:	4618      	mov	r0, r3
 8016392:	3714      	adds	r7, #20
 8016394:	46bd      	mov	sp, r7
 8016396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639a:	4770      	bx	lr

0801639c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 801639c:	b480      	push	{r7}
 801639e:	b083      	sub	sp, #12
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
 80163a4:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	683b      	ldr	r3, [r7, #0]
 80163ac:	61da      	str	r2, [r3, #28]
    head_ = node;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	683a      	ldr	r2, [r7, #0]
 80163b2:	601a      	str	r2, [r3, #0]
}
 80163b4:	bf00      	nop
 80163b6:	370c      	adds	r7, #12
 80163b8:	46bd      	mov	sp, r7
 80163ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163be:	4770      	bx	lr

080163c0 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 80163c0:	b480      	push	{r7}
 80163c2:	b085      	sub	sp, #20
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 80163d0:	2300      	movs	r3, #0
 80163d2:	60bb      	str	r3, [r7, #8]
    while (cur) {
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d019      	beq.n	801640e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	689b      	ldr	r3, [r3, #8]
 80163de:	683a      	ldr	r2, [r7, #0]
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d10e      	bne.n	8016402 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 80163e4:	68bb      	ldr	r3, [r7, #8]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d005      	beq.n	80163f6 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	69da      	ldr	r2, [r3, #28]
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	61da      	str	r2, [r3, #28]
                return cur;
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	e00c      	b.n	8016410 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	69da      	ldr	r2, [r3, #28]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	601a      	str	r2, [r3, #0]
                return cur;
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	e006      	b.n	8016410 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	69db      	ldr	r3, [r3, #28]
 801640a:	60fb      	str	r3, [r7, #12]
    while (cur) {
 801640c:	e7e2      	b.n	80163d4 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 801640e:	2300      	movs	r3, #0
}
 8016410:	4618      	mov	r0, r3
 8016412:	3714      	adds	r7, #20
 8016414:	46bd      	mov	sp, r7
 8016416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641a:	4770      	bx	lr

0801641c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 801641c:	b480      	push	{r7}
 801641e:	b085      	sub	sp, #20
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
 8016424:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	60fb      	str	r3, [r7, #12]
  while (cur) {
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d00a      	beq.n	8016448 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	689b      	ldr	r3, [r3, #8]
 8016436:	683a      	ldr	r2, [r7, #0]
 8016438:	429a      	cmp	r2, r3
 801643a:	d101      	bne.n	8016440 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	e004      	b.n	801644a <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	69db      	ldr	r3, [r3, #28]
 8016444:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016446:	e7f1      	b.n	801642c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8016448:	2300      	movs	r3, #0
}
 801644a:	4618      	mov	r0, r3
 801644c:	3714      	adds	r7, #20
 801644e:	46bd      	mov	sp, r7
 8016450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016454:	4770      	bx	lr

08016456 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016456:	b580      	push	{r7, lr}
 8016458:	b086      	sub	sp, #24
 801645a:	af00      	add	r7, sp, #0
 801645c:	60f8      	str	r0, [r7, #12]
 801645e:	60b9      	str	r1, [r7, #8]
 8016460:	4613      	mov	r3, r2
 8016462:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	617b      	str	r3, [r7, #20]
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d00e      	beq.n	801648c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 801646e:	79fb      	ldrb	r3, [r7, #7]
 8016470:	461a      	mov	r2, r3
 8016472:	6979      	ldr	r1, [r7, #20]
 8016474:	68f8      	ldr	r0, [r7, #12]
 8016476:	f7ff ff72 	bl	801635e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801647a:	4603      	mov	r3, r0
 801647c:	2b00      	cmp	r3, #0
 801647e:	d001      	beq.n	8016484 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8016480:	697b      	ldr	r3, [r7, #20]
 8016482:	e004      	b.n	801648e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	69db      	ldr	r3, [r3, #28]
 8016488:	617b      	str	r3, [r7, #20]
 801648a:	e7ed      	b.n	8016468 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 801648c:	2300      	movs	r3, #0
}
 801648e:	4618      	mov	r0, r3
 8016490:	3718      	adds	r7, #24
 8016492:	46bd      	mov	sp, r7
 8016494:	bd80      	pop	{r7, pc}

08016496 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8016496:	b580      	push	{r7, lr}
 8016498:	b082      	sub	sp, #8
 801649a:	af00      	add	r7, sp, #0
 801649c:	6078      	str	r0, [r7, #4]
 801649e:	460b      	mov	r3, r1
 80164a0:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	78fa      	ldrb	r2, [r7, #3]
 80164a8:	4619      	mov	r1, r3
 80164aa:	6878      	ldr	r0, [r7, #4]
 80164ac:	f7ff ffd3 	bl	8016456 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80164b0:	4603      	mov	r3, r0
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	3708      	adds	r7, #8
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bd80      	pop	{r7, pc}

080164ba <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80164ba:	b580      	push	{r7, lr}
 80164bc:	b084      	sub	sp, #16
 80164be:	af00      	add	r7, sp, #0
 80164c0:	60f8      	str	r0, [r7, #12]
 80164c2:	60b9      	str	r1, [r7, #8]
 80164c4:	4613      	mov	r3, r2
 80164c6:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	69db      	ldr	r3, [r3, #28]
 80164cc:	79fa      	ldrb	r2, [r7, #7]
 80164ce:	4619      	mov	r1, r3
 80164d0:	68f8      	ldr	r0, [r7, #12]
 80164d2:	f7ff ffc0 	bl	8016456 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80164d6:	4603      	mov	r3, r0
}
 80164d8:	4618      	mov	r0, r3
 80164da:	3710      	adds	r7, #16
 80164dc:	46bd      	mov	sp, r7
 80164de:	bd80      	pop	{r7, pc}

080164e0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b084      	sub	sp, #16
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
 80164e8:	460b      	mov	r3, r1
 80164ea:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 80164ec:	2300      	movs	r3, #0
 80164ee:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	60bb      	str	r3, [r7, #8]
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d00f      	beq.n	801651c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 80164fc:	78fb      	ldrb	r3, [r7, #3]
 80164fe:	461a      	mov	r2, r3
 8016500:	68b9      	ldr	r1, [r7, #8]
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f7ff ff2b 	bl	801635e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016508:	4603      	mov	r3, r0
 801650a:	2b00      	cmp	r3, #0
 801650c:	d002      	beq.n	8016514 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	3301      	adds	r3, #1
 8016512:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016514:	68bb      	ldr	r3, [r7, #8]
 8016516:	69db      	ldr	r3, [r3, #28]
 8016518:	60bb      	str	r3, [r7, #8]
 801651a:	e7ec      	b.n	80164f6 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 801651c:	68fb      	ldr	r3, [r7, #12]
}
 801651e:	4618      	mov	r0, r3
 8016520:	3710      	adds	r7, #16
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}
	...

08016528 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8016528:	b480      	push	{r7}
 801652a:	b083      	sub	sp, #12
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8016532:	6839      	ldr	r1, [r7, #0]
 8016534:	4b09      	ldr	r3, [pc, #36]	; (801655c <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8016536:	fba3 2301 	umull	r2, r3, r3, r1
 801653a:	1aca      	subs	r2, r1, r3
 801653c:	0852      	lsrs	r2, r2, #1
 801653e:	4413      	add	r3, r2
 8016540:	099a      	lsrs	r2, r3, #6
 8016542:	4613      	mov	r3, r2
 8016544:	00db      	lsls	r3, r3, #3
 8016546:	4413      	add	r3, r2
 8016548:	00db      	lsls	r3, r3, #3
 801654a:	4413      	add	r3, r2
 801654c:	1aca      	subs	r2, r1, r3
 801654e:	4613      	mov	r3, r2
}
 8016550:	4618      	mov	r0, r3
 8016552:	370c      	adds	r7, #12
 8016554:	46bd      	mov	sp, r7
 8016556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655a:	4770      	bx	lr
 801655c:	c0e07039 	.word	0xc0e07039

08016560 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b082      	sub	sp, #8
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
 8016568:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 801656a:	683b      	ldr	r3, [r7, #0]
 801656c:	689b      	ldr	r3, [r3, #8]
 801656e:	4619      	mov	r1, r3
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f7ff ffd9 	bl	8016528 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016576:	4603      	mov	r3, r0
 8016578:	009b      	lsls	r3, r3, #2
 801657a:	687a      	ldr	r2, [r7, #4]
 801657c:	4413      	add	r3, r2
 801657e:	6839      	ldr	r1, [r7, #0]
 8016580:	4618      	mov	r0, r3
 8016582:	f7ff ff0b 	bl	801639c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8016586:	bf00      	nop
 8016588:	3708      	adds	r7, #8
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}

0801658e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 801658e:	b580      	push	{r7, lr}
 8016590:	b082      	sub	sp, #8
 8016592:	af00      	add	r7, sp, #0
 8016594:	6078      	str	r0, [r7, #4]
 8016596:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8016598:	6839      	ldr	r1, [r7, #0]
 801659a:	6878      	ldr	r0, [r7, #4]
 801659c:	f7ff ffc4 	bl	8016528 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80165a0:	4603      	mov	r3, r0
 80165a2:	009b      	lsls	r3, r3, #2
 80165a4:	687a      	ldr	r2, [r7, #4]
 80165a6:	4413      	add	r3, r2
 80165a8:	6839      	ldr	r1, [r7, #0]
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7ff ff08 	bl	80163c0 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 80165b0:	4603      	mov	r3, r0
}
 80165b2:	4618      	mov	r0, r3
 80165b4:	3708      	adds	r7, #8
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd80      	pop	{r7, pc}

080165ba <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 80165ba:	b580      	push	{r7, lr}
 80165bc:	b082      	sub	sp, #8
 80165be:	af00      	add	r7, sp, #0
 80165c0:	6078      	str	r0, [r7, #4]
 80165c2:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 80165c4:	6839      	ldr	r1, [r7, #0]
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f7ff ffae 	bl	8016528 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80165cc:	4603      	mov	r3, r0
 80165ce:	009b      	lsls	r3, r3, #2
 80165d0:	687a      	ldr	r2, [r7, #4]
 80165d2:	4413      	add	r3, r2
 80165d4:	6839      	ldr	r1, [r7, #0]
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7ff ff20 	bl	801641c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 80165dc:	4603      	mov	r3, r0
}
 80165de:	4618      	mov	r0, r3
 80165e0:	3708      	adds	r7, #8
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}

080165e6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 80165e6:	b580      	push	{r7, lr}
 80165e8:	b084      	sub	sp, #16
 80165ea:	af00      	add	r7, sp, #0
 80165ec:	6078      	str	r0, [r7, #4]
 80165ee:	460b      	mov	r3, r1
 80165f0:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 80165f2:	2300      	movs	r3, #0
 80165f4:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 80165f6:	2300      	movs	r3, #0
 80165f8:	60bb      	str	r3, [r7, #8]
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	2b48      	cmp	r3, #72	; 0x48
 80165fe:	dc10      	bgt.n	8016622 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	009b      	lsls	r3, r3, #2
 8016604:	687a      	ldr	r2, [r7, #4]
 8016606:	4413      	add	r3, r2
 8016608:	78fa      	ldrb	r2, [r7, #3]
 801660a:	4611      	mov	r1, r2
 801660c:	4618      	mov	r0, r3
 801660e:	f7ff ff67 	bl	80164e0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8016612:	4602      	mov	r2, r0
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	4413      	add	r3, r2
 8016618:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	3301      	adds	r3, #1
 801661e:	60bb      	str	r3, [r7, #8]
 8016620:	e7eb      	b.n	80165fa <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8016622:	68fb      	ldr	r3, [r7, #12]
}
 8016624:	4618      	mov	r0, r3
 8016626:	3710      	adds	r7, #16
 8016628:	46bd      	mov	sp, r7
 801662a:	bd80      	pop	{r7, pc}

0801662c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 801662c:	b580      	push	{r7, lr}
 801662e:	b084      	sub	sp, #16
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
 8016634:	460b      	mov	r3, r1
 8016636:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8016638:	2300      	movs	r3, #0
 801663a:	60fb      	str	r3, [r7, #12]
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	2b48      	cmp	r3, #72	; 0x48
 8016640:	dc12      	bgt.n	8016668 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	009b      	lsls	r3, r3, #2
 8016646:	687a      	ldr	r2, [r7, #4]
 8016648:	4413      	add	r3, r2
 801664a:	78fa      	ldrb	r2, [r7, #3]
 801664c:	4611      	mov	r1, r2
 801664e:	4618      	mov	r0, r3
 8016650:	f7ff ff21 	bl	8016496 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8016654:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d001      	beq.n	8016660 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	e004      	b.n	801666a <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	3301      	adds	r3, #1
 8016664:	60fb      	str	r3, [r7, #12]
 8016666:	e7e9      	b.n	801663c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8016668:	2300      	movs	r3, #0
}
 801666a:	4618      	mov	r0, r3
 801666c:	3710      	adds	r7, #16
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}

08016672 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8016672:	b580      	push	{r7, lr}
 8016674:	b086      	sub	sp, #24
 8016676:	af00      	add	r7, sp, #0
 8016678:	60f8      	str	r0, [r7, #12]
 801667a:	60b9      	str	r1, [r7, #8]
 801667c:	4613      	mov	r3, r2
 801667e:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8016680:	68bb      	ldr	r3, [r7, #8]
 8016682:	689b      	ldr	r3, [r3, #8]
 8016684:	4619      	mov	r1, r3
 8016686:	68f8      	ldr	r0, [r7, #12]
 8016688:	f7ff ff4e 	bl	8016528 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801668c:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 801668e:	697b      	ldr	r3, [r7, #20]
 8016690:	009b      	lsls	r3, r3, #2
 8016692:	68fa      	ldr	r2, [r7, #12]
 8016694:	4413      	add	r3, r2
 8016696:	79fa      	ldrb	r2, [r7, #7]
 8016698:	68b9      	ldr	r1, [r7, #8]
 801669a:	4618      	mov	r0, r3
 801669c:	f7ff ff0d 	bl	80164ba <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80166a0:	6138      	str	r0, [r7, #16]
    if (node) return node;
 80166a2:	693b      	ldr	r3, [r7, #16]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d001      	beq.n	80166ac <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 80166a8:	693b      	ldr	r3, [r7, #16]
 80166aa:	e019      	b.n	80166e0 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	3301      	adds	r3, #1
 80166b0:	617b      	str	r3, [r7, #20]
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	2b48      	cmp	r3, #72	; 0x48
 80166b6:	d812      	bhi.n	80166de <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 80166b8:	697b      	ldr	r3, [r7, #20]
 80166ba:	009b      	lsls	r3, r3, #2
 80166bc:	68fa      	ldr	r2, [r7, #12]
 80166be:	4413      	add	r3, r2
 80166c0:	79fa      	ldrb	r2, [r7, #7]
 80166c2:	4611      	mov	r1, r2
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7ff fee6 	bl	8016496 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80166ca:	6138      	str	r0, [r7, #16]
        if (node) return node;
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d001      	beq.n	80166d6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 80166d2:	693b      	ldr	r3, [r7, #16]
 80166d4:	e004      	b.n	80166e0 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 80166d6:	697b      	ldr	r3, [r7, #20]
 80166d8:	3301      	adds	r3, #1
 80166da:	617b      	str	r3, [r7, #20]
 80166dc:	e7e9      	b.n	80166b2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 80166de:	2300      	movs	r3, #0
}
 80166e0:	4618      	mov	r0, r3
 80166e2:	3718      	adds	r7, #24
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}

080166e8 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 80166e8:	b5b0      	push	{r4, r5, r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2448      	movs	r4, #72	; 0x48
 80166f4:	461d      	mov	r5, r3
 80166f6:	2c00      	cmp	r4, #0
 80166f8:	db05      	blt.n	8016706 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 80166fa:	4628      	mov	r0, r5
 80166fc:	f7ff fa84 	bl	8015c08 <_ZN22MemoryLeakDetectorListC1Ev>
 8016700:	3504      	adds	r5, #4
 8016702:	3c01      	subs	r4, #1
 8016704:	e7f7      	b.n	80166f6 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	4618      	mov	r0, r3
 801670a:	3708      	adds	r7, #8
 801670c:	46bd      	mov	sp, r7
 801670e:	bdb0      	pop	{r4, r5, r7, pc}

08016710 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8016710:	b590      	push	{r4, r7, lr}
 8016712:	b083      	sub	sp, #12
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	6039      	str	r1, [r7, #0]
 801671a:	4a1d      	ldr	r2, [pc, #116]	; (8016790 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	601a      	str	r2, [r3, #0]
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	330c      	adds	r3, #12
 8016724:	4618      	mov	r0, r3
 8016726:	f7ff fbe3 	bl	8015ef0 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016730:	331c      	adds	r3, #28
 8016732:	4618      	mov	r0, r3
 8016734:	f7ff ffd8 	bl	80166e8 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801673e:	2201      	movs	r2, #1
 8016740:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016748:	3304      	adds	r3, #4
 801674a:	2201      	movs	r2, #1
 801674c:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	2201      	movs	r2, #1
 8016752:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801675a:	3308      	adds	r3, #8
 801675c:	2200      	movs	r2, #0
 801675e:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	683a      	ldr	r2, [r7, #0]
 8016764:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8016766:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 801676a:	490a      	ldr	r1, [pc, #40]	; (8016794 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 801676c:	2004      	movs	r0, #4
 801676e:	f7f3 fb17 	bl	8009da0 <_ZnwjPKci>
 8016772:	4604      	mov	r4, r0
 8016774:	4620      	mov	r0, r4
 8016776:	f7f5 fbe7 	bl	800bf48 <_ZN11SimpleMutexC1Ev>
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016780:	330c      	adds	r3, #12
 8016782:	601c      	str	r4, [r3, #0]
}
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	4618      	mov	r0, r3
 8016788:	370c      	adds	r7, #12
 801678a:	46bd      	mov	sp, r7
 801678c:	bd90      	pop	{r4, r7, pc}
 801678e:	bf00      	nop
 8016790:	0802807c 	.word	0x0802807c
 8016794:	080256b0 	.word	0x080256b0

08016798 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8016798:	b590      	push	{r4, r7, lr}
 801679a:	b083      	sub	sp, #12
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	4a0e      	ldr	r2, [pc, #56]	; (80167dc <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80167ac:	330c      	adds	r3, #12
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d00d      	beq.n	80167d0 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80167ba:	330c      	adds	r3, #12
 80167bc:	681c      	ldr	r4, [r3, #0]
 80167be:	2c00      	cmp	r4, #0
 80167c0:	d006      	beq.n	80167d0 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 80167c2:	4620      	mov	r0, r4
 80167c4:	f7f5 fbd2 	bl	800bf6c <_ZN11SimpleMutexD1Ev>
 80167c8:	2104      	movs	r1, #4
 80167ca:	4620      	mov	r0, r4
 80167cc:	f7f3 fafc 	bl	8009dc8 <_ZdlPvj>
    }
}
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	4618      	mov	r0, r3
 80167d4:	370c      	adds	r7, #12
 80167d6:	46bd      	mov	sp, r7
 80167d8:	bd90      	pop	{r4, r7, pc}
 80167da:	bf00      	nop
 80167dc:	0802807c 	.word	0x0802807c

080167e0 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b082      	sub	sp, #8
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
}
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f7ff ffd5 	bl	8016798 <_ZN18MemoryLeakDetectorD1Ev>
 80167ee:	f241 1150 	movw	r1, #4432	; 0x1150
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f7f3 fae8 	bl	8009dc8 <_ZdlPvj>
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	4618      	mov	r0, r3
 80167fc:	3708      	adds	r7, #8
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}

08016802 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8016802:	b580      	push	{r7, lr}
 8016804:	b082      	sub	sp, #8
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	330c      	adds	r3, #12
 801680e:	4618      	mov	r0, r3
 8016810:	f7ff fd72 	bl	80162f8 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2203      	movs	r2, #3
 8016818:	721a      	strb	r2, [r3, #8]
}
 801681a:	bf00      	nop
 801681c:	3708      	adds	r7, #8
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}

08016822 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8016822:	b480      	push	{r7}
 8016824:	b083      	sub	sp, #12
 8016826:	af00      	add	r7, sp, #0
 8016828:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2202      	movs	r2, #2
 801682e:	721a      	strb	r2, [r3, #8]
}
 8016830:	bf00      	nop
 8016832:	370c      	adds	r7, #12
 8016834:	46bd      	mov	sp, r7
 8016836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683a:	4770      	bx	lr

0801683c <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 801683c:	b480      	push	{r7}
 801683e:	b083      	sub	sp, #12
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	2202      	movs	r2, #2
 8016848:	721a      	strb	r2, [r3, #8]
}
 801684a:	bf00      	nop
 801684c:	370c      	adds	r7, #12
 801684e:	46bd      	mov	sp, r7
 8016850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016854:	4770      	bx	lr

08016856 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8016856:	b480      	push	{r7}
 8016858:	b083      	sub	sp, #12
 801685a:	af00      	add	r7, sp, #0
 801685c:	6078      	str	r0, [r7, #4]
    return mutex_;
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016864:	330c      	adds	r3, #12
 8016866:	681b      	ldr	r3, [r3, #0]
}
 8016868:	4618      	mov	r0, r3
 801686a:	370c      	adds	r7, #12
 801686c:	46bd      	mov	sp, r7
 801686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016872:	4770      	bx	lr

08016874 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8016874:	b480      	push	{r7}
 8016876:	b083      	sub	sp, #12
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	f023 0303 	bic.w	r3, r3, #3
 8016882:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8016884:	4618      	mov	r0, r3
 8016886:	370c      	adds	r7, #12
 8016888:	46bd      	mov	sp, r7
 801688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688e:	4770      	bx	lr

08016890 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b082      	sub	sp, #8
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
 8016898:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	3303      	adds	r3, #3
 801689e:	4618      	mov	r0, r3
 80168a0:	f7ff ffe8 	bl	8016874 <_ZL31calculateVoidPointerAlignedSizej>
 80168a4:	4603      	mov	r3, r0
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	3708      	adds	r7, #8
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}

080168ae <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 80168ae:	b580      	push	{r7, lr}
 80168b0:	b084      	sub	sp, #16
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	60f8      	str	r0, [r7, #12]
 80168b6:	60b9      	str	r1, [r7, #8]
 80168b8:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 80168ba:	6879      	ldr	r1, [r7, #4]
 80168bc:	68f8      	ldr	r0, [r7, #12]
 80168be:	f7ff ffe7 	bl	8016890 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80168c2:	4602      	mov	r2, r0
 80168c4:	68bb      	ldr	r3, [r7, #8]
 80168c6:	4413      	add	r3, r2
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	3710      	adds	r7, #16
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}

080168d0 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b08a      	sub	sp, #40	; 0x28
 80168d4:	af06      	add	r7, sp, #24
 80168d6:	60f8      	str	r0, [r7, #12]
 80168d8:	60b9      	str	r1, [r7, #8]
 80168da:	607a      	str	r2, [r7, #4]
 80168dc:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80168e4:	3304      	adds	r3, #4
 80168e6:	681a      	ldr	r2, [r3, #0]
 80168e8:	1c51      	adds	r1, r2, #1
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80168f0:	3304      	adds	r3, #4
 80168f2:	6019      	str	r1, [r3, #0]
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	7a19      	ldrb	r1, [r3, #8]
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80168fe:	3308      	adds	r3, #8
 8016900:	781b      	ldrb	r3, [r3, #0]
 8016902:	6a38      	ldr	r0, [r7, #32]
 8016904:	9004      	str	r0, [sp, #16]
 8016906:	69f8      	ldr	r0, [r7, #28]
 8016908:	9003      	str	r0, [sp, #12]
 801690a:	9302      	str	r3, [sp, #8]
 801690c:	9101      	str	r1, [sp, #4]
 801690e:	69bb      	ldr	r3, [r7, #24]
 8016910:	9300      	str	r3, [sp, #0]
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	6879      	ldr	r1, [r7, #4]
 8016916:	68b8      	ldr	r0, [r7, #8]
 8016918:	f7ff fcfb 	bl	8016312 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 801691c:	68bb      	ldr	r3, [r7, #8]
 801691e:	689a      	ldr	r2, [r3, #8]
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	4413      	add	r3, r2
 8016926:	4619      	mov	r1, r3
 8016928:	68f8      	ldr	r0, [r7, #12]
 801692a:	f000 f861 	bl	80169f0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016934:	331c      	adds	r3, #28
 8016936:	68b9      	ldr	r1, [r7, #8]
 8016938:	4618      	mov	r0, r3
 801693a:	f7ff fe11 	bl	8016560 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 801693e:	bf00      	nop
 8016940:	3710      	adds	r7, #16
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b08a      	sub	sp, #40	; 0x28
 801694a:	af04      	add	r7, sp, #16
 801694c:	60f8      	str	r0, [r7, #12]
 801694e:	60b9      	str	r1, [r7, #8]
 8016950:	607a      	str	r2, [r7, #4]
 8016952:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8016954:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016958:	9302      	str	r3, [sp, #8]
 801695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801695c:	9301      	str	r3, [sp, #4]
 801695e:	6a3b      	ldr	r3, [r7, #32]
 8016960:	9300      	str	r3, [sp, #0]
 8016962:	683b      	ldr	r3, [r7, #0]
 8016964:	687a      	ldr	r2, [r7, #4]
 8016966:	68b9      	ldr	r1, [r7, #8]
 8016968:	68f8      	ldr	r0, [r7, #12]
 801696a:	f000 f96f 	bl	8016c4c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 801696e:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d101      	bne.n	801697a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8016976:	2300      	movs	r3, #0
 8016978:	e017      	b.n	80169aa <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 801697a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801697e:	9300      	str	r3, [sp, #0]
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	683a      	ldr	r2, [r7, #0]
 8016984:	68b9      	ldr	r1, [r7, #8]
 8016986:	68f8      	ldr	r0, [r7, #12]
 8016988:	f000 f98a 	bl	8016ca0 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 801698c:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 801698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016990:	9302      	str	r3, [sp, #8]
 8016992:	6a3b      	ldr	r3, [r7, #32]
 8016994:	9301      	str	r3, [sp, #4]
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	9300      	str	r3, [sp, #0]
 801699a:	683b      	ldr	r3, [r7, #0]
 801699c:	697a      	ldr	r2, [r7, #20]
 801699e:	6939      	ldr	r1, [r7, #16]
 80169a0:	68f8      	ldr	r0, [r7, #12]
 80169a2:	f7ff ff95 	bl	80168d0 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80169a6:	693b      	ldr	r3, [r7, #16]
 80169a8:	689b      	ldr	r3, [r3, #8]
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	3718      	adds	r7, #24
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
	...

080169b4 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b084      	sub	sp, #16
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80169c4:	331c      	adds	r3, #28
 80169c6:	6839      	ldr	r1, [r7, #0]
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7ff fdf6 	bl	80165ba <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 80169ce:	60f8      	str	r0, [r7, #12]
  if (node)
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d006      	beq.n	80169e4 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 80169d6:	4b05      	ldr	r3, [pc, #20]	; (80169ec <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	68fa      	ldr	r2, [r7, #12]
 80169dc:	6812      	ldr	r2, [r2, #0]
 80169de:	21cd      	movs	r1, #205	; 0xcd
 80169e0:	6838      	ldr	r0, [r7, #0]
 80169e2:	4798      	blx	r3
#endif
}
 80169e4:	bf00      	nop
 80169e6:	3710      	adds	r7, #16
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd80      	pop	{r7, pc}
 80169ec:	200000d8 	.word	0x200000d8

080169f0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 80169f0:	b480      	push	{r7}
 80169f2:	b085      	sub	sp, #20
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
 80169f8:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80169fa:	2300      	movs	r3, #0
 80169fc:	60fb      	str	r3, [r7, #12]
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	2b02      	cmp	r3, #2
 8016a02:	d812      	bhi.n	8016a2a <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8016a04:	68f9      	ldr	r1, [r7, #12]
 8016a06:	4b0c      	ldr	r3, [pc, #48]	; (8016a38 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8016a08:	fba3 2301 	umull	r2, r3, r3, r1
 8016a0c:	085a      	lsrs	r2, r3, #1
 8016a0e:	4613      	mov	r3, r2
 8016a10:	005b      	lsls	r3, r3, #1
 8016a12:	4413      	add	r3, r2
 8016a14:	1aca      	subs	r2, r1, r3
 8016a16:	6839      	ldr	r1, [r7, #0]
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	440b      	add	r3, r1
 8016a1c:	4907      	ldr	r1, [pc, #28]	; (8016a3c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8016a1e:	5c8a      	ldrb	r2, [r1, r2]
 8016a20:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	3301      	adds	r3, #1
 8016a26:	60fb      	str	r3, [r7, #12]
 8016a28:	e7e9      	b.n	80169fe <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8016a2a:	bf00      	nop
 8016a2c:	3714      	adds	r7, #20
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a34:	4770      	bx	lr
 8016a36:	bf00      	nop
 8016a38:	aaaaaaab 	.word	0xaaaaaaab
 8016a3c:	08028070 	.word	0x08028070

08016a40 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8016a40:	b480      	push	{r7}
 8016a42:	b085      	sub	sp, #20
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
 8016a48:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	60fb      	str	r3, [r7, #12]
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	2b02      	cmp	r3, #2
 8016a52:	d816      	bhi.n	8016a82 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8016a54:	683a      	ldr	r2, [r7, #0]
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	4413      	add	r3, r2
 8016a5a:	7818      	ldrb	r0, [r3, #0]
 8016a5c:	68f9      	ldr	r1, [r7, #12]
 8016a5e:	4b0c      	ldr	r3, [pc, #48]	; (8016a90 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8016a60:	fba3 2301 	umull	r2, r3, r3, r1
 8016a64:	085a      	lsrs	r2, r3, #1
 8016a66:	4613      	mov	r3, r2
 8016a68:	005b      	lsls	r3, r3, #1
 8016a6a:	4413      	add	r3, r2
 8016a6c:	1aca      	subs	r2, r1, r3
 8016a6e:	4b09      	ldr	r3, [pc, #36]	; (8016a94 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8016a70:	5c9b      	ldrb	r3, [r3, r2]
 8016a72:	4298      	cmp	r0, r3
 8016a74:	d001      	beq.n	8016a7a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8016a76:	2300      	movs	r3, #0
 8016a78:	e004      	b.n	8016a84 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	3301      	adds	r3, #1
 8016a7e:	60fb      	str	r3, [r7, #12]
 8016a80:	e7e5      	b.n	8016a4e <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8016a82:	2301      	movs	r3, #1
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	3714      	adds	r7, #20
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8e:	4770      	bx	lr
 8016a90:	aaaaaaab 	.word	0xaaaaaaab
 8016a94:	08028070 	.word	0x08028070

08016a98 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b084      	sub	sp, #16
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	60f8      	str	r0, [r7, #12]
 8016aa0:	60b9      	str	r1, [r7, #8]
 8016aa2:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8016aa4:	68ba      	ldr	r2, [r7, #8]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d101      	bne.n	8016ab0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8016aac:	2301      	movs	r3, #1
 8016aae:	e013      	b.n	8016ad8 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8016ab6:	781b      	ldrb	r3, [r3, #0]
 8016ab8:	f083 0301 	eor.w	r3, r3, #1
 8016abc:	b2db      	uxtb	r3, r3
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d001      	beq.n	8016ac6 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	e008      	b.n	8016ad8 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	331c      	adds	r3, #28
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	68b9      	ldr	r1, [r7, #8]
 8016ad0:	6878      	ldr	r0, [r7, #4]
 8016ad2:	4798      	blx	r3
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	bf00      	nop
}
 8016ad8:	4618      	mov	r0, r3
 8016ada:	3710      	adds	r7, #16
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}

08016ae0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8016ae0:	b590      	push	{r4, r7, lr}
 8016ae2:	b087      	sub	sp, #28
 8016ae4:	af02      	add	r7, sp, #8
 8016ae6:	60f8      	str	r0, [r7, #12]
 8016ae8:	60b9      	str	r1, [r7, #8]
 8016aea:	607a      	str	r2, [r7, #4]
 8016aec:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	695a      	ldr	r2, [r3, #20]
 8016af2:	68bb      	ldr	r3, [r7, #8]
 8016af4:	695b      	ldr	r3, [r3, #20]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	3328      	adds	r3, #40	; 0x28
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	4610      	mov	r0, r2
 8016afe:	4798      	blx	r3
 8016b00:	4604      	mov	r4, r0
 8016b02:	6a3b      	ldr	r3, [r7, #32]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	3328      	adds	r3, #40	; 0x28
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	6a38      	ldr	r0, [r7, #32]
 8016b0c:	4798      	blx	r3
 8016b0e:	4603      	mov	r3, r0
 8016b10:	461a      	mov	r2, r3
 8016b12:	4621      	mov	r1, r4
 8016b14:	68f8      	ldr	r0, [r7, #12]
 8016b16:	f7ff ffbf 	bl	8016a98 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	f083 0301 	eor.w	r3, r3, #1
 8016b20:	b2db      	uxtb	r3, r3
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d014      	beq.n	8016b50 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	f103 040c 	add.w	r4, r3, #12
 8016b2c:	6a3b      	ldr	r3, [r7, #32]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	3328      	adds	r3, #40	; 0x28
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	6a38      	ldr	r0, [r7, #32]
 8016b36:	4798      	blx	r3
 8016b38:	4602      	mov	r2, r0
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	685b      	ldr	r3, [r3, #4]
 8016b3e:	9301      	str	r3, [sp, #4]
 8016b40:	9200      	str	r2, [sp, #0]
 8016b42:	683b      	ldr	r3, [r7, #0]
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	68b9      	ldr	r1, [r7, #8]
 8016b48:	4620      	mov	r0, r4
 8016b4a:	f7ff fb4d 	bl	80161e8 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8016b4e:	e02e      	b.n	8016bae <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	689a      	ldr	r2, [r3, #8]
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	4413      	add	r3, r2
 8016b5a:	4619      	mov	r1, r3
 8016b5c:	68f8      	ldr	r0, [r7, #12]
 8016b5e:	f7ff ff6f 	bl	8016a40 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8016b62:	4603      	mov	r3, r0
 8016b64:	f083 0301 	eor.w	r3, r3, #1
 8016b68:	b2db      	uxtb	r3, r3
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d014      	beq.n	8016b98 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	f103 040c 	add.w	r4, r3, #12
 8016b74:	6a3b      	ldr	r3, [r7, #32]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	3328      	adds	r3, #40	; 0x28
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	6a38      	ldr	r0, [r7, #32]
 8016b7e:	4798      	blx	r3
 8016b80:	4602      	mov	r2, r0
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	685b      	ldr	r3, [r3, #4]
 8016b86:	9301      	str	r3, [sp, #4]
 8016b88:	9200      	str	r2, [sp, #0]
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	687a      	ldr	r2, [r7, #4]
 8016b8e:	68b9      	ldr	r1, [r7, #8]
 8016b90:	4620      	mov	r0, r4
 8016b92:	f7ff fb4f 	bl	8016234 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8016b96:	e00a      	b.n	8016bae <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8016b98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d006      	beq.n	8016bae <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8016ba0:	6a3b      	ldr	r3, [r7, #32]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	3324      	adds	r3, #36	; 0x24
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	68b9      	ldr	r1, [r7, #8]
 8016baa:	6a38      	ldr	r0, [r7, #32]
 8016bac:	4798      	blx	r3
}
 8016bae:	bf00      	nop
 8016bb0:	3714      	adds	r7, #20
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd90      	pop	{r4, r7, pc}
	...

08016bb8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b086      	sub	sp, #24
 8016bbc:	af02      	add	r7, sp, #8
 8016bbe:	60f8      	str	r0, [r7, #12]
 8016bc0:	60b9      	str	r1, [r7, #8]
 8016bc2:	607a      	str	r2, [r7, #4]
 8016bc4:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8016bc6:	4b08      	ldr	r3, [pc, #32]	; (8016be8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8016bc8:	681a      	ldr	r2, [r3, #0]
 8016bca:	78fb      	ldrb	r3, [r7, #3]
 8016bcc:	9301      	str	r3, [sp, #4]
 8016bce:	2300      	movs	r3, #0
 8016bd0:	9300      	str	r3, [sp, #0]
 8016bd2:	4613      	mov	r3, r2
 8016bd4:	687a      	ldr	r2, [r7, #4]
 8016bd6:	68b9      	ldr	r1, [r7, #8]
 8016bd8:	68f8      	ldr	r0, [r7, #12]
 8016bda:	f000 f87f 	bl	8016cdc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8016bde:	4603      	mov	r3, r0
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	3710      	adds	r7, #16
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}
 8016be8:	20000100 	.word	0x20000100

08016bec <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016bec:	b590      	push	{r4, r7, lr}
 8016bee:	b085      	sub	sp, #20
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	60f8      	str	r0, [r7, #12]
 8016bf4:	60b9      	str	r1, [r7, #8]
 8016bf6:	607a      	str	r2, [r7, #4]
 8016bf8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8016bfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d00e      	beq.n	8016c20 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	3308      	adds	r3, #8
 8016c08:	681c      	ldr	r4, [r3, #0]
 8016c0a:	6879      	ldr	r1, [r7, #4]
 8016c0c:	68f8      	ldr	r0, [r7, #12]
 8016c0e:	f7ff fe3f 	bl	8016890 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016c12:	4601      	mov	r1, r0
 8016c14:	6a3b      	ldr	r3, [r7, #32]
 8016c16:	683a      	ldr	r2, [r7, #0]
 8016c18:	68b8      	ldr	r0, [r7, #8]
 8016c1a:	47a0      	blx	r4
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	e010      	b.n	8016c42 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	3308      	adds	r3, #8
 8016c26:	681c      	ldr	r4, [r3, #0]
 8016c28:	6879      	ldr	r1, [r7, #4]
 8016c2a:	68f8      	ldr	r0, [r7, #12]
 8016c2c:	f7ff fe30 	bl	8016890 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016c30:	4603      	mov	r3, r0
 8016c32:	f103 0120 	add.w	r1, r3, #32
 8016c36:	6a3b      	ldr	r3, [r7, #32]
 8016c38:	683a      	ldr	r2, [r7, #0]
 8016c3a:	68b8      	ldr	r0, [r7, #8]
 8016c3c:	47a0      	blx	r4
 8016c3e:	4603      	mov	r3, r0
 8016c40:	bf00      	nop
}
 8016c42:	4618      	mov	r0, r3
 8016c44:	3714      	adds	r7, #20
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd90      	pop	{r4, r7, pc}
	...

08016c4c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8016c4c:	b590      	push	{r4, r7, lr}
 8016c4e:	b085      	sub	sp, #20
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	60f8      	str	r0, [r7, #12]
 8016c54:	60b9      	str	r1, [r7, #8]
 8016c56:	607a      	str	r2, [r7, #4]
 8016c58:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8016c5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d00b      	beq.n	8016c7a <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8016c62:	4b0e      	ldr	r3, [pc, #56]	; (8016c9c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8016c64:	681c      	ldr	r4, [r3, #0]
 8016c66:	6839      	ldr	r1, [r7, #0]
 8016c68:	68f8      	ldr	r0, [r7, #12]
 8016c6a:	f7ff fe11 	bl	8016890 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	4619      	mov	r1, r3
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	47a0      	blx	r4
 8016c76:	4603      	mov	r3, r0
 8016c78:	e00c      	b.n	8016c94 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8016c7a:	4b08      	ldr	r3, [pc, #32]	; (8016c9c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8016c7c:	681c      	ldr	r4, [r3, #0]
 8016c7e:	6839      	ldr	r1, [r7, #0]
 8016c80:	68f8      	ldr	r0, [r7, #12]
 8016c82:	f7ff fe05 	bl	8016890 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8016c86:	4603      	mov	r3, r0
 8016c88:	3320      	adds	r3, #32
 8016c8a:	4619      	mov	r1, r3
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	47a0      	blx	r4
 8016c90:	4603      	mov	r3, r0
 8016c92:	bf00      	nop
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	3714      	adds	r7, #20
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	bd90      	pop	{r4, r7, pc}
 8016c9c:	200000cc 	.word	0x200000cc

08016ca0 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b084      	sub	sp, #16
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	60f8      	str	r0, [r7, #12]
 8016ca8:	60b9      	str	r1, [r7, #8]
 8016caa:	607a      	str	r2, [r7, #4]
 8016cac:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8016cae:	7e3b      	ldrb	r3, [r7, #24]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d008      	beq.n	8016cc6 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8016cb4:	68bb      	ldr	r3, [r7, #8]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	3320      	adds	r3, #32
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	2120      	movs	r1, #32
 8016cbe:	68b8      	ldr	r0, [r7, #8]
 8016cc0:	4798      	blx	r3
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	e006      	b.n	8016cd4 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8016cc6:	687a      	ldr	r2, [r7, #4]
 8016cc8:	6839      	ldr	r1, [r7, #0]
 8016cca:	68f8      	ldr	r0, [r7, #12]
 8016ccc:	f7ff fdef 	bl	80168ae <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	bf00      	nop
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3710      	adds	r7, #16
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b08a      	sub	sp, #40	; 0x28
 8016ce0:	af04      	add	r7, sp, #16
 8016ce2:	60f8      	str	r0, [r7, #12]
 8016ce4:	60b9      	str	r1, [r7, #8]
 8016ce6:	607a      	str	r2, [r7, #4]
 8016ce8:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8016cea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016cee:	9301      	str	r3, [sp, #4]
 8016cf0:	6a3b      	ldr	r3, [r7, #32]
 8016cf2:	9300      	str	r3, [sp, #0]
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	687a      	ldr	r2, [r7, #4]
 8016cf8:	68b9      	ldr	r1, [r7, #8]
 8016cfa:	68f8      	ldr	r0, [r7, #12]
 8016cfc:	f7ff ff76 	bl	8016bec <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8016d00:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8016d02:	697b      	ldr	r3, [r7, #20]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d101      	bne.n	8016d0c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8016d08:	2300      	movs	r3, #0
 8016d0a:	e017      	b.n	8016d3c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8016d0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d10:	9300      	str	r3, [sp, #0]
 8016d12:	697b      	ldr	r3, [r7, #20]
 8016d14:	687a      	ldr	r2, [r7, #4]
 8016d16:	68b9      	ldr	r1, [r7, #8]
 8016d18:	68f8      	ldr	r0, [r7, #12]
 8016d1a:	f7ff ffc1 	bl	8016ca0 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8016d1e:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8016d20:	6a3b      	ldr	r3, [r7, #32]
 8016d22:	9302      	str	r3, [sp, #8]
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	9301      	str	r3, [sp, #4]
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	9300      	str	r3, [sp, #0]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	697a      	ldr	r2, [r7, #20]
 8016d30:	6939      	ldr	r1, [r7, #16]
 8016d32:	68f8      	ldr	r0, [r7, #12]
 8016d34:	f7ff fdcc 	bl	80168d0 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8016d38:	693b      	ldr	r3, [r7, #16]
 8016d3a:	689b      	ldr	r3, [r3, #8]
}
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	3718      	adds	r7, #24
 8016d40:	46bd      	mov	sp, r7
 8016d42:	bd80      	pop	{r7, pc}

08016d44 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016d44:	b590      	push	{r4, r7, lr}
 8016d46:	b089      	sub	sp, #36	; 0x24
 8016d48:	af02      	add	r7, sp, #8
 8016d4a:	60f8      	str	r0, [r7, #12]
 8016d4c:	60b9      	str	r1, [r7, #8]
 8016d4e:	607a      	str	r2, [r7, #4]
 8016d50:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d03a      	beq.n	8016dce <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d5e:	331c      	adds	r3, #28
 8016d60:	6879      	ldr	r1, [r7, #4]
 8016d62:	4618      	mov	r0, r3
 8016d64:	f7ff fc13 	bl	801658e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8016d68:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d10b      	bne.n	8016d88 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	f103 000c 	add.w	r0, r3, #12
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	685b      	ldr	r3, [r3, #4]
 8016d7a:	9300      	str	r3, [sp, #0]
 8016d7c:	68bb      	ldr	r3, [r7, #8]
 8016d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d80:	6839      	ldr	r1, [r7, #0]
 8016d82:	f7ff fa0d 	bl	80161a0 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8016d86:	e023      	b.n	8016dd0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8016d88:	68b8      	ldr	r0, [r7, #8]
 8016d8a:	f7f8 ff95 	bl	800fcb8 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	f083 0301 	eor.w	r3, r3, #1
 8016d94:	b2db      	uxtb	r3, r3
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d01a      	beq.n	8016dd0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8016da0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016da4:	9301      	str	r3, [sp, #4]
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	9300      	str	r3, [sp, #0]
 8016daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dac:	683a      	ldr	r2, [r7, #0]
 8016dae:	6979      	ldr	r1, [r7, #20]
 8016db0:	68f8      	ldr	r0, [r7, #12]
 8016db2:	f7ff fe95 	bl	8016ae0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8016db6:	68bb      	ldr	r3, [r7, #8]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	330c      	adds	r3, #12
 8016dbc:	681c      	ldr	r4, [r3, #0]
 8016dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc0:	9300      	str	r3, [sp, #0]
 8016dc2:	683b      	ldr	r3, [r7, #0]
 8016dc4:	693a      	ldr	r2, [r7, #16]
 8016dc6:	6879      	ldr	r1, [r7, #4]
 8016dc8:	68b8      	ldr	r0, [r7, #8]
 8016dca:	47a0      	blx	r4
 8016dcc:	e000      	b.n	8016dd0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8016dce:	bf00      	nop
    }
}
 8016dd0:	371c      	adds	r7, #28
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd90      	pop	{r4, r7, pc}
	...

08016dd8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b086      	sub	sp, #24
 8016ddc:	af02      	add	r7, sp, #8
 8016dde:	60f8      	str	r0, [r7, #12]
 8016de0:	60b9      	str	r1, [r7, #8]
 8016de2:	607a      	str	r2, [r7, #4]
 8016de4:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8016de6:	4b08      	ldr	r3, [pc, #32]	; (8016e08 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8016de8:	681a      	ldr	r2, [r3, #0]
 8016dea:	78fb      	ldrb	r3, [r7, #3]
 8016dec:	9301      	str	r3, [sp, #4]
 8016dee:	2300      	movs	r3, #0
 8016df0:	9300      	str	r3, [sp, #0]
 8016df2:	4613      	mov	r3, r2
 8016df4:	687a      	ldr	r2, [r7, #4]
 8016df6:	68b9      	ldr	r1, [r7, #8]
 8016df8:	68f8      	ldr	r0, [r7, #12]
 8016dfa:	f7ff ffa3 	bl	8016d44 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8016dfe:	bf00      	nop
 8016e00:	3710      	adds	r7, #16
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	bf00      	nop
 8016e08:	20000100 	.word	0x20000100

08016e0c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b08a      	sub	sp, #40	; 0x28
 8016e10:	af04      	add	r7, sp, #16
 8016e12:	60f8      	str	r0, [r7, #12]
 8016e14:	60b9      	str	r1, [r7, #8]
 8016e16:	607a      	str	r2, [r7, #4]
 8016e18:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d023      	beq.n	8016e68 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e26:	331c      	adds	r3, #28
 8016e28:	6879      	ldr	r1, [r7, #4]
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f7ff fbaf 	bl	801658e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8016e30:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8016e32:	697b      	ldr	r3, [r7, #20]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d10c      	bne.n	8016e52 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	f103 000c 	add.w	r0, r3, #12
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	685b      	ldr	r3, [r3, #4]
 8016e42:	9300      	str	r3, [sp, #0]
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e48:	6a39      	ldr	r1, [r7, #32]
 8016e4a:	f7ff f9a9 	bl	80161a0 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8016e4e:	2300      	movs	r3, #0
 8016e50:	e019      	b.n	8016e86 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8016e52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016e56:	9301      	str	r3, [sp, #4]
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	9300      	str	r3, [sp, #0]
 8016e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e5e:	6a3a      	ldr	r2, [r7, #32]
 8016e60:	6979      	ldr	r1, [r7, #20]
 8016e62:	68f8      	ldr	r0, [r7, #12]
 8016e64:	f7ff fe3c 	bl	8016ae0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8016e68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016e6c:	9302      	str	r3, [sp, #8]
 8016e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e70:	9301      	str	r3, [sp, #4]
 8016e72:	6a3b      	ldr	r3, [r7, #32]
 8016e74:	9300      	str	r3, [sp, #0]
 8016e76:	683b      	ldr	r3, [r7, #0]
 8016e78:	687a      	ldr	r2, [r7, #4]
 8016e7a:	68b9      	ldr	r1, [r7, #8]
 8016e7c:	68f8      	ldr	r0, [r7, #12]
 8016e7e:	f7ff fd62 	bl	8016946 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8016e82:	4603      	mov	r3, r0
 8016e84:	bf00      	nop
}
 8016e86:	4618      	mov	r0, r3
 8016e88:	3718      	adds	r7, #24
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}

08016e8e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8016e8e:	b580      	push	{r7, lr}
 8016e90:	b084      	sub	sp, #16
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
 8016e96:	460b      	mov	r3, r1
 8016e98:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ea0:	331c      	adds	r3, #28
 8016ea2:	78fa      	ldrb	r2, [r7, #3]
 8016ea4:	4611      	mov	r1, r2
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7ff fbc0 	bl	801662c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8016eac:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	330c      	adds	r3, #12
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7ff f882 	bl	8015fbc <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d010      	beq.n	8016ee0 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	330c      	adds	r3, #12
 8016ec2:	68f9      	ldr	r1, [r7, #12]
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f7ff f897 	bl	8015ff8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ed0:	331c      	adds	r3, #28
 8016ed2:	78fa      	ldrb	r2, [r7, #3]
 8016ed4:	68f9      	ldr	r1, [r7, #12]
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7ff fbcb 	bl	8016672 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016edc:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8016ede:	e7eb      	b.n	8016eb8 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	330c      	adds	r3, #12
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f7ff f8e7 	bl	80160b8 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8016eea:	bf00      	nop
 8016eec:	3710      	adds	r7, #16
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd80      	pop	{r7, pc}

08016ef2 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8016ef2:	b580      	push	{r7, lr}
 8016ef4:	b082      	sub	sp, #8
 8016ef6:	af00      	add	r7, sp, #0
 8016ef8:	6078      	str	r0, [r7, #4]
 8016efa:	460b      	mov	r3, r1
 8016efc:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8016efe:	78fb      	ldrb	r3, [r7, #3]
 8016f00:	4619      	mov	r1, r3
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f7ff ffc3 	bl	8016e8e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	330c      	adds	r3, #12
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f7ff f9e5 	bl	80162dc <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8016f12:	4603      	mov	r3, r0
}
 8016f14:	4618      	mov	r0, r3
 8016f16:	3708      	adds	r7, #8
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}

08016f1c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b084      	sub	sp, #16
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016f2a:	331c      	adds	r3, #28
 8016f2c:	2103      	movs	r1, #3
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7ff fb7c 	bl	801662c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8016f34:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d011      	beq.n	8016f60 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	7e1b      	ldrb	r3, [r3, #24]
 8016f40:	2b03      	cmp	r3, #3
 8016f42:	d102      	bne.n	8016f4a <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	2202      	movs	r2, #2
 8016f48:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016f50:	331c      	adds	r3, #28
 8016f52:	2203      	movs	r2, #3
 8016f54:	68f9      	ldr	r1, [r7, #12]
 8016f56:	4618      	mov	r0, r3
 8016f58:	f7ff fb8b 	bl	8016672 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016f5c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8016f5e:	e7ea      	b.n	8016f36 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8016f60:	bf00      	nop
 8016f62:	3710      	adds	r7, #16
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}

08016f68 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b082      	sub	sp, #8
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
 8016f70:	460b      	mov	r3, r1
 8016f72:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016f7a:	331c      	adds	r3, #28
 8016f7c:	78fa      	ldrb	r2, [r7, #3]
 8016f7e:	4611      	mov	r1, r2
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7ff fb30 	bl	80165e6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8016f86:	4603      	mov	r3, r0
}
 8016f88:	4618      	mov	r0, r3
 8016f8a:	3708      	adds	r7, #8
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}

08016f90 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b084      	sub	sp, #16
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	60f8      	str	r0, [r7, #12]
 8016f98:	60b9      	str	r1, [r7, #8]
 8016f9a:	607a      	str	r2, [r7, #4]
 8016f9c:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	68b9      	ldr	r1, [r7, #8]
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f7f5 fb13 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	3308      	adds	r3, #8
 8016fac:	6879      	ldr	r1, [r7, #4]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7f5 fb0d 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	683a      	ldr	r2, [r7, #0]
 8016fb8:	611a      	str	r2, [r3, #16]
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	615a      	str	r2, [r3, #20]
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	3710      	adds	r7, #16
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}

08016fca <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8016fca:	b480      	push	{r7}
 8016fcc:	b083      	sub	sp, #12
 8016fce:	af00      	add	r7, sp, #0
 8016fd0:	6078      	str	r0, [r7, #4]
 8016fd2:	6039      	str	r1, [r7, #0]
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	370c      	adds	r7, #12
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe0:	4770      	bx	lr

08016fe2 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8016fe2:	b480      	push	{r7}
 8016fe4:	b083      	sub	sp, #12
 8016fe6:	af00      	add	r7, sp, #0
 8016fe8:	6078      	str	r0, [r7, #4]
 8016fea:	6039      	str	r1, [r7, #0]
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	4618      	mov	r0, r3
 8016ff0:	370c      	adds	r7, #12
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff8:	4770      	bx	lr

08016ffa <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8016ffa:	b480      	push	{r7}
 8016ffc:	b085      	sub	sp, #20
 8016ffe:	af00      	add	r7, sp, #0
 8017000:	60f8      	str	r0, [r7, #12]
 8017002:	60b9      	str	r1, [r7, #8]
 8017004:	4613      	mov	r3, r2
 8017006:	71fb      	strb	r3, [r7, #7]
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	4618      	mov	r0, r3
 801700c:	3714      	adds	r7, #20
 801700e:	46bd      	mov	sp, r7
 8017010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017014:	4770      	bx	lr

08017016 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8017016:	b480      	push	{r7}
 8017018:	b085      	sub	sp, #20
 801701a:	af00      	add	r7, sp, #0
 801701c:	60f8      	str	r0, [r7, #12]
 801701e:	60b9      	str	r1, [r7, #8]
 8017020:	607a      	str	r2, [r7, #4]
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	4618      	mov	r0, r3
 8017026:	3714      	adds	r7, #20
 8017028:	46bd      	mov	sp, r7
 801702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702e:	4770      	bx	lr

08017030 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8017030:	b480      	push	{r7}
 8017032:	b085      	sub	sp, #20
 8017034:	af00      	add	r7, sp, #0
 8017036:	60f8      	str	r0, [r7, #12]
 8017038:	60b9      	str	r1, [r7, #8]
 801703a:	607a      	str	r2, [r7, #4]
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	4618      	mov	r0, r3
 8017040:	3714      	adds	r7, #20
 8017042:	46bd      	mov	sp, r7
 8017044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017048:	4770      	bx	lr

0801704a <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801704a:	b480      	push	{r7}
 801704c:	b085      	sub	sp, #20
 801704e:	af00      	add	r7, sp, #0
 8017050:	60f8      	str	r0, [r7, #12]
 8017052:	60b9      	str	r1, [r7, #8]
 8017054:	607a      	str	r2, [r7, #4]
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	4618      	mov	r0, r3
 801705a:	3714      	adds	r7, #20
 801705c:	46bd      	mov	sp, r7
 801705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017062:	4770      	bx	lr

08017064 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8017064:	b480      	push	{r7}
 8017066:	b085      	sub	sp, #20
 8017068:	af00      	add	r7, sp, #0
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	607a      	str	r2, [r7, #4]
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	4618      	mov	r0, r3
 8017074:	3714      	adds	r7, #20
 8017076:	46bd      	mov	sp, r7
 8017078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707c:	4770      	bx	lr

0801707e <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801707e:	b480      	push	{r7}
 8017080:	b085      	sub	sp, #20
 8017082:	af00      	add	r7, sp, #0
 8017084:	60f8      	str	r0, [r7, #12]
 8017086:	60b9      	str	r1, [r7, #8]
 8017088:	4639      	mov	r1, r7
 801708a:	e881 000c 	stmia.w	r1, {r2, r3}
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	4618      	mov	r0, r3
 8017092:	3714      	adds	r7, #20
 8017094:	46bd      	mov	sp, r7
 8017096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709a:	4770      	bx	lr

0801709c <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801709c:	b480      	push	{r7}
 801709e:	b085      	sub	sp, #20
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	60f8      	str	r0, [r7, #12]
 80170a4:	60b9      	str	r1, [r7, #8]
 80170a6:	4639      	mov	r1, r7
 80170a8:	e881 000c 	stmia.w	r1, {r2, r3}
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	4618      	mov	r0, r3
 80170b0:	3714      	adds	r7, #20
 80170b2:	46bd      	mov	sp, r7
 80170b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b8:	4770      	bx	lr

080170ba <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 80170ba:	b480      	push	{r7}
 80170bc:	b085      	sub	sp, #20
 80170be:	af00      	add	r7, sp, #0
 80170c0:	60f8      	str	r0, [r7, #12]
 80170c2:	60b9      	str	r1, [r7, #8]
 80170c4:	ed87 0b00 	vstr	d0, [r7]
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	4618      	mov	r0, r3
 80170cc:	3714      	adds	r7, #20
 80170ce:	46bd      	mov	sp, r7
 80170d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d4:	4770      	bx	lr

080170d6 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 80170d6:	b480      	push	{r7}
 80170d8:	b085      	sub	sp, #20
 80170da:	af00      	add	r7, sp, #0
 80170dc:	60f8      	str	r0, [r7, #12]
 80170de:	60b9      	str	r1, [r7, #8]
 80170e0:	607a      	str	r2, [r7, #4]
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	4618      	mov	r0, r3
 80170e6:	3714      	adds	r7, #20
 80170e8:	46bd      	mov	sp, r7
 80170ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ee:	4770      	bx	lr

080170f0 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 80170f0:	b480      	push	{r7}
 80170f2:	b085      	sub	sp, #20
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	60f8      	str	r0, [r7, #12]
 80170f8:	60b9      	str	r1, [r7, #8]
 80170fa:	607a      	str	r2, [r7, #4]
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	4618      	mov	r0, r3
 8017100:	3714      	adds	r7, #20
 8017102:	46bd      	mov	sp, r7
 8017104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017108:	4770      	bx	lr

0801710a <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801710a:	b480      	push	{r7}
 801710c:	b085      	sub	sp, #20
 801710e:	af00      	add	r7, sp, #0
 8017110:	60f8      	str	r0, [r7, #12]
 8017112:	60b9      	str	r1, [r7, #8]
 8017114:	607a      	str	r2, [r7, #4]
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	4618      	mov	r0, r3
 801711a:	3714      	adds	r7, #20
 801711c:	46bd      	mov	sp, r7
 801711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017122:	4770      	bx	lr

08017124 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8017124:	b480      	push	{r7}
 8017126:	b085      	sub	sp, #20
 8017128:	af00      	add	r7, sp, #0
 801712a:	60f8      	str	r0, [r7, #12]
 801712c:	60b9      	str	r1, [r7, #8]
 801712e:	607a      	str	r2, [r7, #4]
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	4618      	mov	r0, r3
 8017134:	3714      	adds	r7, #20
 8017136:	46bd      	mov	sp, r7
 8017138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713c:	4770      	bx	lr

0801713e <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 801713e:	b480      	push	{r7}
 8017140:	b085      	sub	sp, #20
 8017142:	af00      	add	r7, sp, #0
 8017144:	60f8      	str	r0, [r7, #12]
 8017146:	60b9      	str	r1, [r7, #8]
 8017148:	607a      	str	r2, [r7, #4]
 801714a:	603b      	str	r3, [r7, #0]
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	4618      	mov	r0, r3
 8017150:	3714      	adds	r7, #20
 8017152:	46bd      	mov	sp, r7
 8017154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017158:	4770      	bx	lr

0801715a <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801715a:	b480      	push	{r7}
 801715c:	b085      	sub	sp, #20
 801715e:	af00      	add	r7, sp, #0
 8017160:	60f8      	str	r0, [r7, #12]
 8017162:	60b9      	str	r1, [r7, #8]
 8017164:	607a      	str	r2, [r7, #4]
 8017166:	603b      	str	r3, [r7, #0]
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	4618      	mov	r0, r3
 801716c:	3714      	adds	r7, #20
 801716e:	46bd      	mov	sp, r7
 8017170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017174:	4770      	bx	lr

08017176 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8017176:	b480      	push	{r7}
 8017178:	b085      	sub	sp, #20
 801717a:	af00      	add	r7, sp, #0
 801717c:	60f8      	str	r0, [r7, #12]
 801717e:	60b9      	str	r1, [r7, #8]
 8017180:	607a      	str	r2, [r7, #4]
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	4618      	mov	r0, r3
 8017186:	3714      	adds	r7, #20
 8017188:	46bd      	mov	sp, r7
 801718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718e:	4770      	bx	lr

08017190 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8017190:	b480      	push	{r7}
 8017192:	b085      	sub	sp, #20
 8017194:	af00      	add	r7, sp, #0
 8017196:	60f8      	str	r0, [r7, #12]
 8017198:	60b9      	str	r1, [r7, #8]
 801719a:	607a      	str	r2, [r7, #4]
 801719c:	603b      	str	r3, [r7, #0]
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	4618      	mov	r0, r3
 80171a2:	3714      	adds	r7, #20
 80171a4:	46bd      	mov	sp, r7
 80171a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171aa:	4770      	bx	lr

080171ac <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 80171ac:	b480      	push	{r7}
 80171ae:	b083      	sub	sp, #12
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	6078      	str	r0, [r7, #4]
 80171b4:	2300      	movs	r3, #0
 80171b6:	4618      	mov	r0, r3
 80171b8:	370c      	adds	r7, #12
 80171ba:	46bd      	mov	sp, r7
 80171bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c0:	4770      	bx	lr
	...

080171c4 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b084      	sub	sp, #16
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	6078      	str	r0, [r7, #4]
 80171cc:	6039      	str	r1, [r7, #0]
 80171ce:	f107 0308 	add.w	r3, r7, #8
 80171d2:	4909      	ldr	r1, [pc, #36]	; (80171f8 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 80171d4:	4618      	mov	r0, r3
 80171d6:	f7f5 f9a6 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80171da:	f107 0308 	add.w	r3, r7, #8
 80171de:	4619      	mov	r1, r3
 80171e0:	6878      	ldr	r0, [r7, #4]
 80171e2:	f005 fec5 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
 80171e6:	f107 0308 	add.w	r3, r7, #8
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7f5 fd53 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	3710      	adds	r7, #16
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}
 80171f8:	080256d0 	.word	0x080256d0

080171fc <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 80171fc:	b480      	push	{r7}
 80171fe:	b083      	sub	sp, #12
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
 8017204:	460b      	mov	r3, r1
 8017206:	70fb      	strb	r3, [r7, #3]
 8017208:	78fb      	ldrb	r3, [r7, #3]
 801720a:	4618      	mov	r0, r3
 801720c:	370c      	adds	r7, #12
 801720e:	46bd      	mov	sp, r7
 8017210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017214:	4770      	bx	lr

08017216 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8017216:	b480      	push	{r7}
 8017218:	b083      	sub	sp, #12
 801721a:	af00      	add	r7, sp, #0
 801721c:	6078      	str	r0, [r7, #4]
 801721e:	2300      	movs	r3, #0
 8017220:	4618      	mov	r0, r3
 8017222:	370c      	adds	r7, #12
 8017224:	46bd      	mov	sp, r7
 8017226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722a:	4770      	bx	lr

0801722c <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 801722c:	b480      	push	{r7}
 801722e:	b083      	sub	sp, #12
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
 8017234:	2300      	movs	r3, #0
 8017236:	4618      	mov	r0, r3
 8017238:	370c      	adds	r7, #12
 801723a:	46bd      	mov	sp, r7
 801723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017240:	4770      	bx	lr

08017242 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8017242:	b480      	push	{r7}
 8017244:	b083      	sub	sp, #12
 8017246:	af00      	add	r7, sp, #0
 8017248:	6078      	str	r0, [r7, #4]
 801724a:	6039      	str	r1, [r7, #0]
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	4618      	mov	r0, r3
 8017250:	370c      	adds	r7, #12
 8017252:	46bd      	mov	sp, r7
 8017254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017258:	4770      	bx	lr

0801725a <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 801725a:	b480      	push	{r7}
 801725c:	b083      	sub	sp, #12
 801725e:	af00      	add	r7, sp, #0
 8017260:	6078      	str	r0, [r7, #4]
 8017262:	2300      	movs	r3, #0
 8017264:	4618      	mov	r0, r3
 8017266:	370c      	adds	r7, #12
 8017268:	46bd      	mov	sp, r7
 801726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726e:	4770      	bx	lr

08017270 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8017270:	b480      	push	{r7}
 8017272:	b083      	sub	sp, #12
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
 8017278:	6039      	str	r1, [r7, #0]
 801727a:	683b      	ldr	r3, [r7, #0]
 801727c:	4618      	mov	r0, r3
 801727e:	370c      	adds	r7, #12
 8017280:	46bd      	mov	sp, r7
 8017282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017286:	4770      	bx	lr

08017288 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8017288:	b480      	push	{r7}
 801728a:	b083      	sub	sp, #12
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	2300      	movs	r3, #0
 8017292:	4618      	mov	r0, r3
 8017294:	370c      	adds	r7, #12
 8017296:	46bd      	mov	sp, r7
 8017298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729c:	4770      	bx	lr

0801729e <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 801729e:	b480      	push	{r7}
 80172a0:	b083      	sub	sp, #12
 80172a2:	af00      	add	r7, sp, #0
 80172a4:	6078      	str	r0, [r7, #4]
 80172a6:	6039      	str	r1, [r7, #0]
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	4618      	mov	r0, r3
 80172ac:	370c      	adds	r7, #12
 80172ae:	46bd      	mov	sp, r7
 80172b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b4:	4770      	bx	lr

080172b6 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 80172b6:	b580      	push	{r7, lr}
 80172b8:	b082      	sub	sp, #8
 80172ba:	af00      	add	r7, sp, #0
 80172bc:	6078      	str	r0, [r7, #4]
 80172be:	6039      	str	r1, [r7, #0]
 80172c0:	2100      	movs	r1, #0
 80172c2:	6878      	ldr	r0, [r7, #4]
 80172c4:	f7f3 f972 	bl	800a5ac <_ZN18cpputest_ulonglongC1Ei>
 80172c8:	6878      	ldr	r0, [r7, #4]
 80172ca:	3708      	adds	r7, #8
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}

080172d0 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 80172d0:	b480      	push	{r7}
 80172d2:	b085      	sub	sp, #20
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	60f8      	str	r0, [r7, #12]
 80172d8:	60b9      	str	r1, [r7, #8]
 80172da:	4639      	mov	r1, r7
 80172dc:	e881 000c 	stmia.w	r1, {r2, r3}
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	461a      	mov	r2, r3
 80172e4:	463b      	mov	r3, r7
 80172e6:	cb03      	ldmia	r3!, {r0, r1}
 80172e8:	6010      	str	r0, [r2, #0]
 80172ea:	6051      	str	r1, [r2, #4]
 80172ec:	68f8      	ldr	r0, [r7, #12]
 80172ee:	3714      	adds	r7, #20
 80172f0:	46bd      	mov	sp, r7
 80172f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f6:	4770      	bx	lr

080172f8 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b082      	sub	sp, #8
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	6078      	str	r0, [r7, #4]
 8017300:	6039      	str	r1, [r7, #0]
 8017302:	2100      	movs	r1, #0
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f7f3 f945 	bl	800a594 <_ZN17cpputest_longlongC1Ei>
 801730a:	6878      	ldr	r0, [r7, #4]
 801730c:	3708      	adds	r7, #8
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}

08017312 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8017312:	b480      	push	{r7}
 8017314:	b085      	sub	sp, #20
 8017316:	af00      	add	r7, sp, #0
 8017318:	60f8      	str	r0, [r7, #12]
 801731a:	60b9      	str	r1, [r7, #8]
 801731c:	4639      	mov	r1, r7
 801731e:	e881 000c 	stmia.w	r1, {r2, r3}
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	461a      	mov	r2, r3
 8017326:	463b      	mov	r3, r7
 8017328:	cb03      	ldmia	r3!, {r0, r1}
 801732a:	6010      	str	r0, [r2, #0]
 801732c:	6051      	str	r1, [r2, #4]
 801732e:	68f8      	ldr	r0, [r7, #12]
 8017330:	3714      	adds	r7, #20
 8017332:	46bd      	mov	sp, r7
 8017334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017338:	4770      	bx	lr

0801733a <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 801733a:	b480      	push	{r7}
 801733c:	b083      	sub	sp, #12
 801733e:	af00      	add	r7, sp, #0
 8017340:	6078      	str	r0, [r7, #4]
 8017342:	2300      	movs	r3, #0
 8017344:	4618      	mov	r0, r3
 8017346:	370c      	adds	r7, #12
 8017348:	46bd      	mov	sp, r7
 801734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734e:	4770      	bx	lr

08017350 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8017350:	b480      	push	{r7}
 8017352:	b083      	sub	sp, #12
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	6039      	str	r1, [r7, #0]
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	4618      	mov	r0, r3
 801735e:	370c      	adds	r7, #12
 8017360:	46bd      	mov	sp, r7
 8017362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017366:	4770      	bx	lr

08017368 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8017368:	b480      	push	{r7}
 801736a:	b083      	sub	sp, #12
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
 8017370:	f04f 0200 	mov.w	r2, #0
 8017374:	f04f 0300 	mov.w	r3, #0
 8017378:	ec43 2b17 	vmov	d7, r2, r3
 801737c:	eeb0 0a47 	vmov.f32	s0, s14
 8017380:	eef0 0a67 	vmov.f32	s1, s15
 8017384:	370c      	adds	r7, #12
 8017386:	46bd      	mov	sp, r7
 8017388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738c:	4770      	bx	lr

0801738e <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 801738e:	b480      	push	{r7}
 8017390:	b085      	sub	sp, #20
 8017392:	af00      	add	r7, sp, #0
 8017394:	60f8      	str	r0, [r7, #12]
 8017396:	ed87 0b00 	vstr	d0, [r7]
 801739a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801739e:	ec43 2b17 	vmov	d7, r2, r3
 80173a2:	eeb0 0a47 	vmov.f32	s0, s14
 80173a6:	eef0 0a67 	vmov.f32	s1, s15
 80173aa:	3714      	adds	r7, #20
 80173ac:	46bd      	mov	sp, r7
 80173ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b2:	4770      	bx	lr

080173b4 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 80173b4:	b480      	push	{r7}
 80173b6:	b083      	sub	sp, #12
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	4b03      	ldr	r3, [pc, #12]	; (80173cc <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 80173be:	4618      	mov	r0, r3
 80173c0:	370c      	adds	r7, #12
 80173c2:	46bd      	mov	sp, r7
 80173c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c8:	4770      	bx	lr
 80173ca:	bf00      	nop
 80173cc:	080256d0 	.word	0x080256d0

080173d0 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 80173d0:	b480      	push	{r7}
 80173d2:	b083      	sub	sp, #12
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	6039      	str	r1, [r7, #0]
 80173da:	683b      	ldr	r3, [r7, #0]
 80173dc:	4618      	mov	r0, r3
 80173de:	370c      	adds	r7, #12
 80173e0:	46bd      	mov	sp, r7
 80173e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e6:	4770      	bx	lr

080173e8 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 80173e8:	b480      	push	{r7}
 80173ea:	b083      	sub	sp, #12
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
 80173f0:	2300      	movs	r3, #0
 80173f2:	4618      	mov	r0, r3
 80173f4:	370c      	adds	r7, #12
 80173f6:	46bd      	mov	sp, r7
 80173f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fc:	4770      	bx	lr

080173fe <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 80173fe:	b480      	push	{r7}
 8017400:	b083      	sub	sp, #12
 8017402:	af00      	add	r7, sp, #0
 8017404:	6078      	str	r0, [r7, #4]
 8017406:	6039      	str	r1, [r7, #0]
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	4618      	mov	r0, r3
 801740c:	370c      	adds	r7, #12
 801740e:	46bd      	mov	sp, r7
 8017410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017414:	4770      	bx	lr

08017416 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8017416:	b480      	push	{r7}
 8017418:	b083      	sub	sp, #12
 801741a:	af00      	add	r7, sp, #0
 801741c:	6078      	str	r0, [r7, #4]
 801741e:	2300      	movs	r3, #0
 8017420:	4618      	mov	r0, r3
 8017422:	370c      	adds	r7, #12
 8017424:	46bd      	mov	sp, r7
 8017426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742a:	4770      	bx	lr

0801742c <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 801742c:	b480      	push	{r7}
 801742e:	b083      	sub	sp, #12
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
 8017434:	6039      	str	r1, [r7, #0]
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	4618      	mov	r0, r3
 801743a:	370c      	adds	r7, #12
 801743c:	46bd      	mov	sp, r7
 801743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017442:	4770      	bx	lr

08017444 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8017444:	b480      	push	{r7}
 8017446:	b083      	sub	sp, #12
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
 801744c:	2300      	movs	r3, #0
 801744e:	4618      	mov	r0, r3
 8017450:	370c      	adds	r7, #12
 8017452:	46bd      	mov	sp, r7
 8017454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017458:	4770      	bx	lr

0801745a <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 801745a:	b480      	push	{r7}
 801745c:	b083      	sub	sp, #12
 801745e:	af00      	add	r7, sp, #0
 8017460:	6078      	str	r0, [r7, #4]
 8017462:	6039      	str	r1, [r7, #0]
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	4618      	mov	r0, r3
 8017468:	370c      	adds	r7, #12
 801746a:	46bd      	mov	sp, r7
 801746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017470:	4770      	bx	lr

08017472 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8017472:	b480      	push	{r7}
 8017474:	b083      	sub	sp, #12
 8017476:	af00      	add	r7, sp, #0
 8017478:	6078      	str	r0, [r7, #4]
 801747a:	6039      	str	r1, [r7, #0]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	4618      	mov	r0, r3
 8017480:	370c      	adds	r7, #12
 8017482:	46bd      	mov	sp, r7
 8017484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017488:	4770      	bx	lr
	...

0801748c <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 801748c:	b480      	push	{r7}
 801748e:	b083      	sub	sp, #12
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
 8017494:	4a04      	ldr	r2, [pc, #16]	; (80174a8 <_ZN14MockActualCallC1Ev+0x1c>)
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	601a      	str	r2, [r3, #0]
{
}
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	4618      	mov	r0, r3
 801749e:	370c      	adds	r7, #12
 80174a0:	46bd      	mov	sp, r7
 80174a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a6:	4770      	bx	lr
 80174a8:	08028474 	.word	0x08028474

080174ac <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 80174ac:	b480      	push	{r7}
 80174ae:	b083      	sub	sp, #12
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	4a04      	ldr	r2, [pc, #16]	; (80174c8 <_ZN14MockActualCallD1Ev+0x1c>)
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	601a      	str	r2, [r3, #0]
{
}
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	4618      	mov	r0, r3
 80174be:	370c      	adds	r7, #12
 80174c0:	46bd      	mov	sp, r7
 80174c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c6:	4770      	bx	lr
 80174c8:	08028474 	.word	0x08028474

080174cc <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b082      	sub	sp, #8
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
 80174d4:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	3304      	adds	r3, #4
 80174da:	6839      	ldr	r1, [r7, #0]
 80174dc:	4618      	mov	r0, r3
 80174de:	f7f5 f88e 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
}
 80174e2:	bf00      	nop
 80174e4:	3708      	adds	r7, #8
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}

080174ea <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 80174ea:	b580      	push	{r7, lr}
 80174ec:	b082      	sub	sp, #8
 80174ee:	af00      	add	r7, sp, #0
 80174f0:	6078      	str	r0, [r7, #4]
 80174f2:	6039      	str	r1, [r7, #0]
    return functionName_;
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	3304      	adds	r3, #4
 80174f8:	4619      	mov	r1, r3
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f7f5 f867 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
}
 8017500:	6878      	ldr	r0, [r7, #4]
 8017502:	3708      	adds	r7, #8
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}

08017508 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8017508:	b580      	push	{r7, lr}
 801750a:	b084      	sub	sp, #16
 801750c:	af00      	add	r7, sp, #0
 801750e:	60f8      	str	r0, [r7, #12]
 8017510:	60b9      	str	r1, [r7, #8]
 8017512:	607a      	str	r2, [r7, #4]
 8017514:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	4618      	mov	r0, r3
 801751a:	f7ff ffb7 	bl	801748c <_ZN14MockActualCallC1Ev>
 801751e:	4a17      	ldr	r2, [pc, #92]	; (801757c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	601a      	str	r2, [r3, #0]
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	3304      	adds	r3, #4
 8017528:	4915      	ldr	r1, [pc, #84]	; (8017580 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 801752a:	4618      	mov	r0, r3
 801752c:	f7f4 fffb 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	68ba      	ldr	r2, [r7, #8]
 8017534:	60da      	str	r2, [r3, #12]
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	687a      	ldr	r2, [r7, #4]
 801753a:	611a      	str	r2, [r3, #16]
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	2202      	movs	r2, #2
 8017540:	751a      	strb	r2, [r3, #20]
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	2200      	movs	r2, #0
 8017546:	755a      	strb	r2, [r3, #21]
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	2200      	movs	r2, #0
 801754c:	619a      	str	r2, [r3, #24]
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	331c      	adds	r3, #28
 8017552:	4618      	mov	r0, r3
 8017554:	f004 f814 	bl	801b580 <_ZN21MockExpectedCallsListC1Ev>
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	683a      	ldr	r2, [r7, #0]
 801755c:	625a      	str	r2, [r3, #36]	; 0x24
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	2200      	movs	r2, #0
 8017562:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	331c      	adds	r3, #28
 8017568:	6839      	ldr	r1, [r7, #0]
 801756a:	4618      	mov	r0, r3
 801756c:	f004 f986 	bl	801b87c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	4618      	mov	r0, r3
 8017574:	3710      	adds	r7, #16
 8017576:	46bd      	mov	sp, r7
 8017578:	bd80      	pop	{r7, pc}
 801757a:	bf00      	nop
 801757c:	08028374 	.word	0x08028374
 8017580:	080256d0 	.word	0x080256d0

08017584 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8017584:	b580      	push	{r7, lr}
 8017586:	b082      	sub	sp, #8
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
 801758c:	4a0c      	ldr	r2, [pc, #48]	; (80175c0 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f001 fae4 	bl	8018b60 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	331c      	adds	r3, #28
 801759c:	4618      	mov	r0, r3
 801759e:	f004 f803 	bl	801b5a8 <_ZN21MockExpectedCallsListD1Ev>
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	3304      	adds	r3, #4
 80175a6:	4618      	mov	r0, r3
 80175a8:	f7f5 fb75 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	4618      	mov	r0, r3
 80175b0:	f7ff ff7c 	bl	80174ac <_ZN14MockActualCallD1Ev>
}
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	4618      	mov	r0, r3
 80175b8:	3708      	adds	r7, #8
 80175ba:	46bd      	mov	sp, r7
 80175bc:	bd80      	pop	{r7, pc}
 80175be:	bf00      	nop
 80175c0:	08028374 	.word	0x08028374

080175c4 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b082      	sub	sp, #8
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
}
 80175cc:	6878      	ldr	r0, [r7, #4]
 80175ce:	f7ff ffd9 	bl	8017584 <_ZN21MockCheckedActualCallD1Ev>
 80175d2:	212c      	movs	r1, #44	; 0x2c
 80175d4:	6878      	ldr	r0, [r7, #4]
 80175d6:	f7f2 fbf7 	bl	8009dc8 <_ZdlPvj>
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	4618      	mov	r0, r3
 80175de:	3708      	adds	r7, #8
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}

080175e4 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 80175e4:	b480      	push	{r7}
 80175e6:	b083      	sub	sp, #12
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
 80175ec:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	683a      	ldr	r2, [r7, #0]
 80175f2:	611a      	str	r2, [r3, #16]
}
 80175f4:	bf00      	nop
 80175f6:	370c      	adds	r7, #12
 80175f8:	46bd      	mov	sp, r7
 80175fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fe:	4770      	bx	lr

08017600 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b082      	sub	sp, #8
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	691a      	ldr	r2, [r3, #16]
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	691b      	ldr	r3, [r3, #16]
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	330c      	adds	r3, #12
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	4610      	mov	r0, r2
 8017618:	4798      	blx	r3
 801761a:	4603      	mov	r3, r0
}
 801761c:	4618      	mov	r0, r3
 801761e:	3708      	adds	r7, #8
 8017620:	46bd      	mov	sp, r7
 8017622:	bd80      	pop	{r7, pc}

08017624 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	33c0      	adds	r3, #192	; 0xc0
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	6878      	ldr	r0, [r7, #4]
 8017638:	4798      	blx	r3
 801763a:	4603      	mov	r3, r0
 801763c:	f083 0301 	eor.w	r3, r3, #1
 8017640:	b2db      	uxtb	r3, r3
 8017642:	2b00      	cmp	r3, #0
 8017644:	d010      	beq.n	8017668 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	33ec      	adds	r3, #236	; 0xec
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	2101      	movs	r1, #1
 8017650:	6878      	ldr	r0, [r7, #4]
 8017652:	4798      	blx	r3
        reporter_->failTest(failure);
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	691a      	ldr	r2, [r3, #16]
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	691b      	ldr	r3, [r3, #16]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	3308      	adds	r3, #8
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	6839      	ldr	r1, [r7, #0]
 8017664:	4610      	mov	r0, r2
 8017666:	4798      	blx	r3
    }
}
 8017668:	bf00      	nop
 801766a:	3708      	adds	r7, #8
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}

08017670 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8017670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017674:	b0bc      	sub	sp, #240	; 0xf0
 8017676:	af00      	add	r7, sp, #0
 8017678:	6078      	str	r0, [r7, #4]
 801767a:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017680:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017684:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017688:	2b00      	cmp	r3, #0
 801768a:	f000 80f5 	beq.w	8017878 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	339c      	adds	r3, #156	; 0x9c
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801769a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801769e:	6839      	ldr	r1, [r7, #0]
 80176a0:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 80176a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80176a6:	4618      	mov	r0, r3
 80176a8:	f006 fa6e 	bl	801db88 <_ZNK14MockNamedValue9getCopierEv>
 80176ac:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 80176b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d013      	beq.n	80176e0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 80176b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	3308      	adds	r3, #8
 80176c0:	681c      	ldr	r4, [r3, #0]
 80176c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80176c6:	691d      	ldr	r5, [r3, #16]
 80176c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80176cc:	4618      	mov	r0, r3
 80176ce:	f006 fa2b 	bl	801db28 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 80176d2:	4603      	mov	r3, r0
 80176d4:	461a      	mov	r2, r3
 80176d6:	4629      	mov	r1, r5
 80176d8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80176dc:	47a0      	blx	r4
 80176de:	e0c0      	b.n	8017862 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 80176e0:	2500      	movs	r5, #0
 80176e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80176e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80176ea:	4611      	mov	r1, r2
 80176ec:	4618      	mov	r0, r3
 80176ee:	f005 ff0e 	bl	801d50e <_ZNK14MockNamedValue7getTypeEv>
 80176f2:	2601      	movs	r6, #1
 80176f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80176f8:	4962      	ldr	r1, [pc, #392]	; (8017884 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7f4 ff13 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8017700:	f04f 0801 	mov.w	r8, #1
 8017704:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8017708:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801770c:	4611      	mov	r1, r2
 801770e:	4618      	mov	r0, r3
 8017710:	f7f5 facd 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 8017714:	4603      	mov	r3, r0
 8017716:	2b00      	cmp	r3, #0
 8017718:	d015      	beq.n	8017746 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801771a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801771e:	f103 0408 	add.w	r4, r3, #8
 8017722:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017726:	4958      	ldr	r1, [pc, #352]	; (8017888 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8017728:	4618      	mov	r0, r3
 801772a:	f7f4 fefc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801772e:	2501      	movs	r5, #1
 8017730:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017734:	4619      	mov	r1, r3
 8017736:	4620      	mov	r0, r4
 8017738:	f7f5 fab9 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801773c:	4603      	mov	r3, r0
 801773e:	2b00      	cmp	r3, #0
 8017740:	d001      	beq.n	8017746 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8017742:	2401      	movs	r4, #1
 8017744:	e000      	b.n	8017748 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8017746:	2400      	movs	r4, #0
 8017748:	2d00      	cmp	r5, #0
 801774a:	d004      	beq.n	8017756 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 801774c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8017750:	4618      	mov	r0, r3
 8017752:	f7f5 faa0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8017756:	f1b8 0f00 	cmp.w	r8, #0
 801775a:	d004      	beq.n	8017766 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 801775c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8017760:	4618      	mov	r0, r3
 8017762:	f7f5 fa98 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8017766:	2e00      	cmp	r6, #0
 8017768:	d004      	beq.n	8017774 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 801776a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801776e:	4618      	mov	r0, r3
 8017770:	f7f5 fa91 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8017774:	2c00      	cmp	r4, #0
 8017776:	d018      	beq.n	80177aa <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8017778:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801777c:	4618      	mov	r0, r3
 801777e:	f006 f95b 	bl	801da38 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8017782:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8017786:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801778a:	4618      	mov	r0, r3
 801778c:	f006 f9e4 	bl	801db58 <_ZNK14MockNamedValue7getSizeEv>
 8017790:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8017794:	4b3d      	ldr	r3, [pc, #244]	; (801788c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801779c:	6910      	ldr	r0, [r2, #16]
 801779e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80177a2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80177a6:	4798      	blx	r3
 80177a8:	e05b      	b.n	8017862 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 80177aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80177ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80177b2:	4611      	mov	r1, r2
 80177b4:	4618      	mov	r0, r3
 80177b6:	f005 fe9b 	bl	801d4f0 <_ZNK14MockNamedValue7getNameEv>
 80177ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80177be:	4934      	ldr	r1, [pc, #208]	; (8017890 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7f4 feb0 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 80177c6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80177ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80177ce:	4611      	mov	r1, r2
 80177d0:	4618      	mov	r0, r3
 80177d2:	f7f5 fab1 	bl	800cd38 <_ZneRK12SimpleStringS1_>
 80177d6:	4603      	mov	r3, r0
 80177d8:	461c      	mov	r4, r3
 80177da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80177de:	4618      	mov	r0, r3
 80177e0:	f7f5 fa59 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80177e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7f5 fa54 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80177ee:	2c00      	cmp	r4, #0
 80177f0:	d037      	beq.n	8017862 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80177f2:	683b      	ldr	r3, [r7, #0]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	339c      	adds	r3, #156	; 0x9c
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80177fe:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8017802:	6839      	ldr	r1, [r7, #0]
 8017804:	4798      	blx	r3
 8017806:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801780a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801780e:	4611      	mov	r1, r2
 8017810:	4618      	mov	r0, r3
 8017812:	f005 fe7c 	bl	801d50e <_ZNK14MockNamedValue7getTypeEv>
 8017816:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801781a:	4618      	mov	r0, r3
 801781c:	f005 fbd2 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	33cc      	adds	r3, #204	; 0xcc
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	6878      	ldr	r0, [r7, #4]
 801782a:	4798      	blx	r3
 801782c:	4601      	mov	r1, r0
 801782e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8017832:	f107 030c 	add.w	r3, r7, #12
 8017836:	4618      	mov	r0, r3
 8017838:	f005 faee 	bl	801ce18 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	33dc      	adds	r3, #220	; 0xdc
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	f107 020c 	add.w	r2, r7, #12
 8017848:	4611      	mov	r1, r2
 801784a:	6878      	ldr	r0, [r7, #4]
 801784c:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 801784e:	f107 030c 	add.w	r3, r7, #12
 8017852:	4618      	mov	r0, r3
 8017854:	f001 ffe2 	bl	801981c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8017858:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801785c:	4618      	mov	r0, r3
 801785e:	f7f5 fa1a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8017862:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017866:	4618      	mov	r0, r3
 8017868:	f005 fbac 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 801786c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017870:	695b      	ldr	r3, [r3, #20]
 8017872:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8017876:	e705      	b.n	8017684 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8017878:	bf00      	nop
 801787a:	37f0      	adds	r7, #240	; 0xf0
 801787c:	46bd      	mov	sp, r7
 801787e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017882:	bf00      	nop
 8017884:	080256d4 	.word	0x080256d4
 8017888:	080256e0 	.word	0x080256e0
 801788c:	200000d4 	.word	0x200000d4
 8017890:	080256d0 	.word	0x080256d0

08017894 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b084      	sub	sp, #16
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	331c      	adds	r3, #28
 80178a0:	4618      	mov	r0, r3
 80178a2:	f004 f9bb 	bl	801bc1c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 80178a6:	4602      	mov	r2, r0
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	699b      	ldr	r3, [r3, #24]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d00f      	beq.n	80178d4 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	33d4      	adds	r3, #212	; 0xd4
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	687a      	ldr	r2, [r7, #4]
 80178be:	6992      	ldr	r2, [r2, #24]
 80178c0:	4611      	mov	r1, r2
 80178c2:	6878      	ldr	r0, [r7, #4]
 80178c4:	4798      	blx	r3
        callHasSucceeded();
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	33d0      	adds	r3, #208	; 0xd0
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 80178d2:	e00f      	b.n	80178f4 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	331c      	adds	r3, #28
 80178d8:	4618      	mov	r0, r3
 80178da:	f004 f9cc 	bl	801bc76 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 80178de:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d006      	beq.n	80178f4 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	33d4      	adds	r3, #212	; 0xd4
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	68f9      	ldr	r1, [r7, #12]
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	4798      	blx	r3
}
 80178f4:	bf00      	nop
 80178f6:	3710      	adds	r7, #16
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}

080178fc <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	33ec      	adds	r3, #236	; 0xec
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	2102      	movs	r1, #2
 801790e:	6878      	ldr	r0, [r7, #4]
 8017910:	4798      	blx	r3
}
 8017912:	bf00      	nop
 8017914:	3708      	adds	r7, #8
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}

0801791a <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 801791a:	b580      	push	{r7, lr}
 801791c:	b082      	sub	sp, #8
 801791e:	af00      	add	r7, sp, #0
 8017920:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	699b      	ldr	r3, [r3, #24]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d00b      	beq.n	8017942 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	699a      	ldr	r2, [r3, #24]
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	699b      	ldr	r3, [r3, #24]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	33ec      	adds	r3, #236	; 0xec
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	4610      	mov	r0, r2
 801793a:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	2200      	movs	r2, #0
 8017940:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	331c      	adds	r3, #28
 8017946:	4618      	mov	r0, r3
 8017948:	f004 f85c 	bl	801ba04 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 801794c:	bf00      	nop
 801794e:	3708      	adds	r7, #8
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}

08017954 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8017954:	b590      	push	{r4, r7, lr}
 8017956:	b091      	sub	sp, #68	; 0x44
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]
    setName(name);
 801795e:	6839      	ldr	r1, [r7, #0]
 8017960:	6878      	ldr	r0, [r7, #4]
 8017962:	f7ff fdb3 	bl	80174cc <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	33ec      	adds	r3, #236	; 0xec
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	2100      	movs	r1, #0
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	331c      	adds	r3, #28
 8017978:	6839      	ldr	r1, [r7, #0]
 801797a:	4618      	mov	r0, r3
 801797c:	f003 ffec 	bl	801b958 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	331c      	adds	r3, #28
 8017984:	4618      	mov	r0, r3
 8017986:	f003 fe7c 	bl	801b682 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801798a:	4603      	mov	r3, r0
 801798c:	2b00      	cmp	r3, #0
 801798e:	d01d      	beq.n	80179cc <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	33cc      	adds	r3, #204	; 0xcc
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	6878      	ldr	r0, [r7, #4]
 801799a:	4798      	blx	r3
 801799c:	4601      	mov	r1, r0
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179a2:	f107 000c 	add.w	r0, r7, #12
 80179a6:	683a      	ldr	r2, [r7, #0]
 80179a8:	f004 fe24 	bl	801c5f4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	33dc      	adds	r3, #220	; 0xdc
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	f107 020c 	add.w	r2, r7, #12
 80179b8:	4611      	mov	r1, r2
 80179ba:	6878      	ldr	r0, [r7, #4]
 80179bc:	4798      	blx	r3
        return *this;
 80179be:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80179c0:	f107 030c 	add.w	r3, r7, #12
 80179c4:	4618      	mov	r0, r3
 80179c6:	f001 ff4b 	bl	8019860 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 80179ca:	e006      	b.n	80179da <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	33d8      	adds	r3, #216	; 0xd8
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	6878      	ldr	r0, [r7, #4]
 80179d6:	4798      	blx	r3

    return *this;
 80179d8:	687c      	ldr	r4, [r7, #4]
 80179da:	4623      	mov	r3, r4
}
 80179dc:	4618      	mov	r0, r3
 80179de:	3744      	adds	r7, #68	; 0x44
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd90      	pop	{r4, r7, pc}

080179e4 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 80179e4:	b480      	push	{r7}
 80179e6:	b083      	sub	sp, #12
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
 80179ec:	6039      	str	r1, [r7, #0]
    return *this;
 80179ee:	687b      	ldr	r3, [r7, #4]
}
 80179f0:	4618      	mov	r0, r3
 80179f2:	370c      	adds	r7, #12
 80179f4:	46bd      	mov	sp, r7
 80179f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fa:	4770      	bx	lr

080179fc <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 80179fc:	b590      	push	{r4, r7, lr}
 80179fe:	b097      	sub	sp, #92	; 0x5c
 8017a00:	af02      	add	r7, sp, #8
 8017a02:	6078      	str	r0, [r7, #4]
 8017a04:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	33c0      	adds	r3, #192	; 0xc0
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	6878      	ldr	r0, [r7, #4]
 8017a10:	4798      	blx	r3
 8017a12:	4603      	mov	r3, r0
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d164      	bne.n	8017ae2 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	33ec      	adds	r3, #236	; 0xec
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	2100      	movs	r1, #0
 8017a22:	6878      	ldr	r0, [r7, #4]
 8017a24:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	33e8      	adds	r3, #232	; 0xe8
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	6878      	ldr	r0, [r7, #4]
 8017a30:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	331c      	adds	r3, #28
 8017a36:	6839      	ldr	r1, [r7, #0]
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f004 f86b 	bl	801bb14 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	331c      	adds	r3, #28
 8017a42:	4618      	mov	r0, r3
 8017a44:	f003 fe1d 	bl	801b682 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d02b      	beq.n	8017aa6 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	33cc      	adds	r3, #204	; 0xcc
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	6878      	ldr	r0, [r7, #4]
 8017a58:	4798      	blx	r3
 8017a5a:	4604      	mov	r4, r0
 8017a5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017a60:	6879      	ldr	r1, [r7, #4]
 8017a62:	4618      	mov	r0, r3
 8017a64:	f7ff fd41 	bl	80174ea <_ZNK21MockCheckedActualCall7getNameEv>
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017a70:	f107 000c 	add.w	r0, r7, #12
 8017a74:	9300      	str	r3, [sp, #0]
 8017a76:	683b      	ldr	r3, [r7, #0]
 8017a78:	4621      	mov	r1, r4
 8017a7a:	f004 fe7f 	bl	801c77c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8017a7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017a82:	4618      	mov	r0, r3
 8017a84:	f7f5 f907 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	33dc      	adds	r3, #220	; 0xdc
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	f107 020c 	add.w	r2, r7, #12
 8017a94:	4611      	mov	r1, r2
 8017a96:	6878      	ldr	r0, [r7, #4]
 8017a98:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8017a9a:	f107 030c 	add.w	r3, r7, #12
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f001 ff00 	bl	80198a4 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8017aa4:	e01e      	b.n	8017ae4 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	f103 041c 	add.w	r4, r3, #28
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	335c      	adds	r3, #92	; 0x5c
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017ab8:	6839      	ldr	r1, [r7, #0]
 8017aba:	4610      	mov	r0, r2
 8017abc:	4798      	blx	r3
 8017abe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017ac2:	4619      	mov	r1, r3
 8017ac4:	4620      	mov	r0, r4
 8017ac6:	f004 f9b8 	bl	801be3a <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8017aca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f7f5 f8e1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	33d8      	adds	r3, #216	; 0xd8
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	6878      	ldr	r0, [r7, #4]
 8017ade:	4798      	blx	r3
 8017ae0:	e000      	b.n	8017ae4 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8017ae2:	bf00      	nop
}
 8017ae4:	3754      	adds	r7, #84	; 0x54
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	bd90      	pop	{r4, r7, pc}

08017aea <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8017aea:	b590      	push	{r4, r7, lr}
 8017aec:	b097      	sub	sp, #92	; 0x5c
 8017aee:	af02      	add	r7, sp, #8
 8017af0:	6078      	str	r0, [r7, #4]
 8017af2:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	33c0      	adds	r3, #192	; 0xc0
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	6878      	ldr	r0, [r7, #4]
 8017afe:	4798      	blx	r3
 8017b00:	4603      	mov	r3, r0
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d164      	bne.n	8017bd0 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	33ec      	adds	r3, #236	; 0xec
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	2100      	movs	r1, #0
 8017b10:	6878      	ldr	r0, [r7, #4]
 8017b12:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	33e8      	adds	r3, #232	; 0xe8
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	6878      	ldr	r0, [r7, #4]
 8017b1e:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	331c      	adds	r3, #28
 8017b24:	6839      	ldr	r1, [r7, #0]
 8017b26:	4618      	mov	r0, r3
 8017b28:	f004 f820 	bl	801bb6c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	331c      	adds	r3, #28
 8017b30:	4618      	mov	r0, r3
 8017b32:	f003 fda6 	bl	801b682 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017b36:	4603      	mov	r3, r0
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d02b      	beq.n	8017b94 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	33cc      	adds	r3, #204	; 0xcc
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	6878      	ldr	r0, [r7, #4]
 8017b46:	4798      	blx	r3
 8017b48:	4604      	mov	r4, r0
 8017b4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017b4e:	6879      	ldr	r1, [r7, #4]
 8017b50:	4618      	mov	r0, r3
 8017b52:	f7ff fcca 	bl	80174ea <_ZNK21MockCheckedActualCall7getNameEv>
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b5a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017b5e:	f107 000c 	add.w	r0, r7, #12
 8017b62:	9300      	str	r3, [sp, #0]
 8017b64:	683b      	ldr	r3, [r7, #0]
 8017b66:	4621      	mov	r1, r4
 8017b68:	f004 ff6a 	bl	801ca40 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8017b6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017b70:	4618      	mov	r0, r3
 8017b72:	f7f5 f890 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	33dc      	adds	r3, #220	; 0xdc
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	f107 020c 	add.w	r2, r7, #12
 8017b82:	4611      	mov	r1, r2
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8017b88:	f107 030c 	add.w	r3, r7, #12
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f001 feab 	bl	80198e8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8017b92:	e01e      	b.n	8017bd2 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f103 041c 	add.w	r4, r3, #28
 8017b9a:	683b      	ldr	r3, [r7, #0]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	335c      	adds	r3, #92	; 0x5c
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017ba6:	6839      	ldr	r1, [r7, #0]
 8017ba8:	4610      	mov	r0, r2
 8017baa:	4798      	blx	r3
 8017bac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017bb0:	4619      	mov	r1, r3
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	f004 f95e 	bl	801be74 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8017bb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7f5 f86a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	33d8      	adds	r3, #216	; 0xd8
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	6878      	ldr	r0, [r7, #4]
 8017bcc:	4798      	blx	r3
 8017bce:	e000      	b.n	8017bd2 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8017bd0:	bf00      	nop
}
 8017bd2:	3754      	adds	r7, #84	; 0x54
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd90      	pop	{r4, r7, pc}

08017bd8 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8017bd8:	b590      	push	{r4, r7, lr}
 8017bda:	b093      	sub	sp, #76	; 0x4c
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	60f8      	str	r0, [r7, #12]
 8017be0:	60b9      	str	r1, [r7, #8]
 8017be2:	4613      	mov	r3, r2
 8017be4:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8017be6:	f107 0310 	add.w	r3, r7, #16
 8017bea:	68b9      	ldr	r1, [r7, #8]
 8017bec:	4618      	mov	r0, r3
 8017bee:	f005 f9bf 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017bf2:	79fa      	ldrb	r2, [r7, #7]
 8017bf4:	f107 0310 	add.w	r3, r7, #16
 8017bf8:	4611      	mov	r1, r2
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f005 fa0a 	bl	801d014 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	33e0      	adds	r3, #224	; 0xe0
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	f107 0210 	add.w	r2, r7, #16
 8017c0c:	4611      	mov	r1, r2
 8017c0e:	68f8      	ldr	r0, [r7, #12]
 8017c10:	4798      	blx	r3
    return *this;
 8017c12:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017c14:	f107 0310 	add.w	r3, r7, #16
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f005 f9d3 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017c1e:	4623      	mov	r3, r4
}
 8017c20:	4618      	mov	r0, r3
 8017c22:	374c      	adds	r7, #76	; 0x4c
 8017c24:	46bd      	mov	sp, r7
 8017c26:	bd90      	pop	{r4, r7, pc}

08017c28 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8017c28:	b590      	push	{r4, r7, lr}
 8017c2a:	b093      	sub	sp, #76	; 0x4c
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	60f8      	str	r0, [r7, #12]
 8017c30:	60b9      	str	r1, [r7, #8]
 8017c32:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017c34:	f107 0310 	add.w	r3, r7, #16
 8017c38:	68b9      	ldr	r1, [r7, #8]
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f005 f998 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017c40:	f107 0310 	add.w	r3, r7, #16
 8017c44:	6879      	ldr	r1, [r7, #4]
 8017c46:	4618      	mov	r0, r3
 8017c48:	f005 fa08 	bl	801d05c <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	33e0      	adds	r3, #224	; 0xe0
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	f107 0210 	add.w	r2, r7, #16
 8017c58:	4611      	mov	r1, r2
 8017c5a:	68f8      	ldr	r0, [r7, #12]
 8017c5c:	4798      	blx	r3
    return *this;
 8017c5e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017c60:	f107 0310 	add.w	r3, r7, #16
 8017c64:	4618      	mov	r0, r3
 8017c66:	f005 f9ad 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017c6a:	4623      	mov	r3, r4
}
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	374c      	adds	r7, #76	; 0x4c
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bd90      	pop	{r4, r7, pc}

08017c74 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8017c74:	b590      	push	{r4, r7, lr}
 8017c76:	b093      	sub	sp, #76	; 0x4c
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	60f8      	str	r0, [r7, #12]
 8017c7c:	60b9      	str	r1, [r7, #8]
 8017c7e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017c80:	f107 0310 	add.w	r3, r7, #16
 8017c84:	68b9      	ldr	r1, [r7, #8]
 8017c86:	4618      	mov	r0, r3
 8017c88:	f005 f972 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017c8c:	f107 0310 	add.w	r3, r7, #16
 8017c90:	6879      	ldr	r1, [r7, #4]
 8017c92:	4618      	mov	r0, r3
 8017c94:	f005 fa04 	bl	801d0a0 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	33e0      	adds	r3, #224	; 0xe0
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	f107 0210 	add.w	r2, r7, #16
 8017ca4:	4611      	mov	r1, r2
 8017ca6:	68f8      	ldr	r0, [r7, #12]
 8017ca8:	4798      	blx	r3
    return *this;
 8017caa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017cac:	f107 0310 	add.w	r3, r7, #16
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	f005 f987 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017cb6:	4623      	mov	r3, r4
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	374c      	adds	r7, #76	; 0x4c
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd90      	pop	{r4, r7, pc}

08017cc0 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8017cc0:	b590      	push	{r4, r7, lr}
 8017cc2:	b093      	sub	sp, #76	; 0x4c
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	60f8      	str	r0, [r7, #12]
 8017cc8:	60b9      	str	r1, [r7, #8]
 8017cca:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017ccc:	f107 0310 	add.w	r3, r7, #16
 8017cd0:	68b9      	ldr	r1, [r7, #8]
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	f005 f94c 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017cd8:	f107 0310 	add.w	r3, r7, #16
 8017cdc:	6879      	ldr	r1, [r7, #4]
 8017cde:	4618      	mov	r0, r3
 8017ce0:	f005 fa22 	bl	801d128 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	33e0      	adds	r3, #224	; 0xe0
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	f107 0210 	add.w	r2, r7, #16
 8017cf0:	4611      	mov	r1, r2
 8017cf2:	68f8      	ldr	r0, [r7, #12]
 8017cf4:	4798      	blx	r3
    return *this;
 8017cf6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017cf8:	f107 0310 	add.w	r3, r7, #16
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f005 f961 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017d02:	4623      	mov	r3, r4
}
 8017d04:	4618      	mov	r0, r3
 8017d06:	374c      	adds	r7, #76	; 0x4c
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	bd90      	pop	{r4, r7, pc}

08017d0c <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8017d0c:	b590      	push	{r4, r7, lr}
 8017d0e:	b093      	sub	sp, #76	; 0x4c
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	60f8      	str	r0, [r7, #12]
 8017d14:	60b9      	str	r1, [r7, #8]
 8017d16:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017d18:	f107 0310 	add.w	r3, r7, #16
 8017d1c:	68b9      	ldr	r1, [r7, #8]
 8017d1e:	4618      	mov	r0, r3
 8017d20:	f005 f926 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017d24:	f107 0310 	add.w	r3, r7, #16
 8017d28:	6879      	ldr	r1, [r7, #4]
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f005 f9da 	bl	801d0e4 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	33e0      	adds	r3, #224	; 0xe0
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	f107 0210 	add.w	r2, r7, #16
 8017d3c:	4611      	mov	r1, r2
 8017d3e:	68f8      	ldr	r0, [r7, #12]
 8017d40:	4798      	blx	r3
    return *this;
 8017d42:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017d44:	f107 0310 	add.w	r3, r7, #16
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f005 f93b 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017d4e:	4623      	mov	r3, r4
}
 8017d50:	4618      	mov	r0, r3
 8017d52:	374c      	adds	r7, #76	; 0x4c
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd90      	pop	{r4, r7, pc}

08017d58 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017d58:	b5b0      	push	{r4, r5, r7, lr}
 8017d5a:	b086      	sub	sp, #24
 8017d5c:	af02      	add	r7, sp, #8
 8017d5e:	60f8      	str	r0, [r7, #12]
 8017d60:	60b9      	str	r1, [r7, #8]
 8017d62:	4639      	mov	r1, r7
 8017d64:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017d68:	f7fb ffc0 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8017d6c:	4604      	mov	r4, r0
 8017d6e:	6823      	ldr	r3, [r4, #0]
 8017d70:	3368      	adds	r3, #104	; 0x68
 8017d72:	681d      	ldr	r5, [r3, #0]
 8017d74:	f7fb ffca 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017d78:	4603      	mov	r3, r0
 8017d7a:	9300      	str	r3, [sp, #0]
 8017d7c:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8017d80:	4a04      	ldr	r2, [pc, #16]	; (8017d94 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8017d82:	4905      	ldr	r1, [pc, #20]	; (8017d98 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8017d84:	4620      	mov	r0, r4
 8017d86:	47a8      	blx	r5
    return *this;
 8017d88:	68fb      	ldr	r3, [r7, #12]
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	3710      	adds	r7, #16
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bdb0      	pop	{r4, r5, r7, pc}
 8017d92:	bf00      	nop
 8017d94:	080256e8 	.word	0x080256e8
 8017d98:	08025704 	.word	0x08025704

08017d9c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8017d9c:	b5b0      	push	{r4, r5, r7, lr}
 8017d9e:	b086      	sub	sp, #24
 8017da0:	af02      	add	r7, sp, #8
 8017da2:	60f8      	str	r0, [r7, #12]
 8017da4:	60b9      	str	r1, [r7, #8]
 8017da6:	4639      	mov	r1, r7
 8017da8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017dac:	f7fb ff9e 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8017db0:	4604      	mov	r4, r0
 8017db2:	6823      	ldr	r3, [r4, #0]
 8017db4:	3368      	adds	r3, #104	; 0x68
 8017db6:	681d      	ldr	r5, [r3, #0]
 8017db8:	f7fb ffa8 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	9300      	str	r3, [sp, #0]
 8017dc0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017dc4:	4a04      	ldr	r2, [pc, #16]	; (8017dd8 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8017dc6:	4905      	ldr	r1, [pc, #20]	; (8017ddc <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8017dc8:	4620      	mov	r0, r4
 8017dca:	47a8      	blx	r5
    return *this;
 8017dcc:	68fb      	ldr	r3, [r7, #12]
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3710      	adds	r7, #16
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8017dd6:	bf00      	nop
 8017dd8:	080256e8 	.word	0x080256e8
 8017ddc:	08025730 	.word	0x08025730

08017de0 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8017de0:	b590      	push	{r4, r7, lr}
 8017de2:	b093      	sub	sp, #76	; 0x4c
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	60f8      	str	r0, [r7, #12]
 8017de8:	60b9      	str	r1, [r7, #8]
 8017dea:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8017dee:	f107 0310 	add.w	r3, r7, #16
 8017df2:	68b9      	ldr	r1, [r7, #8]
 8017df4:	4618      	mov	r0, r3
 8017df6:	f005 f8bb 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017dfa:	f107 0310 	add.w	r3, r7, #16
 8017dfe:	ed97 0b00 	vldr	d0, [r7]
 8017e02:	4618      	mov	r0, r3
 8017e04:	f005 f9f0 	bl	801d1e8 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	33e0      	adds	r3, #224	; 0xe0
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	f107 0210 	add.w	r2, r7, #16
 8017e14:	4611      	mov	r1, r2
 8017e16:	68f8      	ldr	r0, [r7, #12]
 8017e18:	4798      	blx	r3
    return *this;
 8017e1a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017e1c:	f107 0310 	add.w	r3, r7, #16
 8017e20:	4618      	mov	r0, r3
 8017e22:	f005 f8cf 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017e26:	4623      	mov	r3, r4
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	374c      	adds	r7, #76	; 0x4c
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd90      	pop	{r4, r7, pc}

08017e30 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8017e30:	b590      	push	{r4, r7, lr}
 8017e32:	b093      	sub	sp, #76	; 0x4c
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	60f8      	str	r0, [r7, #12]
 8017e38:	60b9      	str	r1, [r7, #8]
 8017e3a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017e3c:	f107 0310 	add.w	r3, r7, #16
 8017e40:	68b9      	ldr	r1, [r7, #8]
 8017e42:	4618      	mov	r0, r3
 8017e44:	f005 f894 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017e48:	f107 0310 	add.w	r3, r7, #16
 8017e4c:	6879      	ldr	r1, [r7, #4]
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f005 fa74 	bl	801d33c <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	33e0      	adds	r3, #224	; 0xe0
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	f107 0210 	add.w	r2, r7, #16
 8017e60:	4611      	mov	r1, r2
 8017e62:	68f8      	ldr	r0, [r7, #12]
 8017e64:	4798      	blx	r3
    return *this;
 8017e66:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017e68:	f107 0310 	add.w	r3, r7, #16
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	f005 f8a9 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017e72:	4623      	mov	r3, r4
}
 8017e74:	4618      	mov	r0, r3
 8017e76:	374c      	adds	r7, #76	; 0x4c
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd90      	pop	{r4, r7, pc}

08017e7c <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8017e7c:	b590      	push	{r4, r7, lr}
 8017e7e:	b093      	sub	sp, #76	; 0x4c
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017e88:	f107 0310 	add.w	r3, r7, #16
 8017e8c:	68b9      	ldr	r1, [r7, #8]
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f005 f86e 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017e94:	f107 0310 	add.w	r3, r7, #16
 8017e98:	6879      	ldr	r1, [r7, #4]
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f005 f9e8 	bl	801d270 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	33e0      	adds	r3, #224	; 0xe0
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	f107 0210 	add.w	r2, r7, #16
 8017eac:	4611      	mov	r1, r2
 8017eae:	68f8      	ldr	r0, [r7, #12]
 8017eb0:	4798      	blx	r3
    return *this;
 8017eb2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017eb4:	f107 0310 	add.w	r3, r7, #16
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f005 f883 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017ebe:	4623      	mov	r3, r4
}
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	374c      	adds	r7, #76	; 0x4c
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	bd90      	pop	{r4, r7, pc}

08017ec8 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8017ec8:	b590      	push	{r4, r7, lr}
 8017eca:	b093      	sub	sp, #76	; 0x4c
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	60f8      	str	r0, [r7, #12]
 8017ed0:	60b9      	str	r1, [r7, #8]
 8017ed2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017ed4:	f107 0310 	add.w	r3, r7, #16
 8017ed8:	68b9      	ldr	r1, [r7, #8]
 8017eda:	4618      	mov	r0, r3
 8017edc:	f005 f848 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017ee0:	f107 0310 	add.w	r3, r7, #16
 8017ee4:	6879      	ldr	r1, [r7, #4]
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f005 f9e4 	bl	801d2b4 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	33e0      	adds	r3, #224	; 0xe0
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	f107 0210 	add.w	r2, r7, #16
 8017ef8:	4611      	mov	r1, r2
 8017efa:	68f8      	ldr	r0, [r7, #12]
 8017efc:	4798      	blx	r3
    return *this;
 8017efe:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017f00:	f107 0310 	add.w	r3, r7, #16
 8017f04:	4618      	mov	r0, r3
 8017f06:	f005 f85d 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017f0a:	4623      	mov	r3, r4
}
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	374c      	adds	r7, #76	; 0x4c
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd90      	pop	{r4, r7, pc}

08017f14 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8017f14:	b590      	push	{r4, r7, lr}
 8017f16:	b093      	sub	sp, #76	; 0x4c
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	60f8      	str	r0, [r7, #12]
 8017f1c:	60b9      	str	r1, [r7, #8]
 8017f1e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017f20:	f107 0310 	add.w	r3, r7, #16
 8017f24:	68b9      	ldr	r1, [r7, #8]
 8017f26:	4618      	mov	r0, r3
 8017f28:	f005 f822 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017f2c:	f107 0310 	add.w	r3, r7, #16
 8017f30:	6879      	ldr	r1, [r7, #4]
 8017f32:	4618      	mov	r0, r3
 8017f34:	f005 f9e0 	bl	801d2f8 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	33e0      	adds	r3, #224	; 0xe0
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	f107 0210 	add.w	r2, r7, #16
 8017f44:	4611      	mov	r1, r2
 8017f46:	68f8      	ldr	r0, [r7, #12]
 8017f48:	4798      	blx	r3
    return *this;
 8017f4a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017f4c:	f107 0310 	add.w	r3, r7, #16
 8017f50:	4618      	mov	r0, r3
 8017f52:	f005 f837 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017f56:	4623      	mov	r3, r4
}
 8017f58:	4618      	mov	r0, r3
 8017f5a:	374c      	adds	r7, #76	; 0x4c
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd90      	pop	{r4, r7, pc}

08017f60 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8017f60:	b590      	push	{r4, r7, lr}
 8017f62:	b093      	sub	sp, #76	; 0x4c
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	60f8      	str	r0, [r7, #12]
 8017f68:	60b9      	str	r1, [r7, #8]
 8017f6a:	607a      	str	r2, [r7, #4]
 8017f6c:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8017f6e:	f107 0310 	add.w	r3, r7, #16
 8017f72:	68b9      	ldr	r1, [r7, #8]
 8017f74:	4618      	mov	r0, r3
 8017f76:	f004 fffb 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8017f7a:	f107 0310 	add.w	r3, r7, #16
 8017f7e:	683a      	ldr	r2, [r7, #0]
 8017f80:	6879      	ldr	r1, [r7, #4]
 8017f82:	4618      	mov	r0, r3
 8017f84:	f005 f9fc 	bl	801d380 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	33e0      	adds	r3, #224	; 0xe0
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	f107 0210 	add.w	r2, r7, #16
 8017f94:	4611      	mov	r1, r2
 8017f96:	68f8      	ldr	r0, [r7, #12]
 8017f98:	4798      	blx	r3
    return *this;
 8017f9a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017f9c:	f107 0310 	add.w	r3, r7, #16
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f005 f80f 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017fa6:	4623      	mov	r3, r4
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	374c      	adds	r7, #76	; 0x4c
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd90      	pop	{r4, r7, pc}

08017fb0 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8017fb0:	b590      	push	{r4, r7, lr}
 8017fb2:	b0a1      	sub	sp, #132	; 0x84
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	60f8      	str	r0, [r7, #12]
 8017fb8:	60b9      	str	r1, [r7, #8]
 8017fba:	607a      	str	r2, [r7, #4]
 8017fbc:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8017fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017fc2:	6879      	ldr	r1, [r7, #4]
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	f004 ffd3 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8017fca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017fce:	683a      	ldr	r2, [r7, #0]
 8017fd0:	68b9      	ldr	r1, [r7, #8]
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f005 f9fa 	bl	801d3cc <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8017fd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f005 fdc7 	bl	801db70 <_ZNK14MockNamedValue13getComparatorEv>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	bf0c      	ite	eq
 8017fe8:	2301      	moveq	r3, #1
 8017fea:	2300      	movne	r3, #0
 8017fec:	b2db      	uxtb	r3, r3
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d01c      	beq.n	801802c <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	33cc      	adds	r3, #204	; 0xcc
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	68f8      	ldr	r0, [r7, #12]
 8017ffc:	4798      	blx	r3
 8017ffe:	4601      	mov	r1, r0
 8018000:	f107 0314 	add.w	r3, r7, #20
 8018004:	68ba      	ldr	r2, [r7, #8]
 8018006:	4618      	mov	r0, r3
 8018008:	f004 fed6 	bl	801cdb8 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	33dc      	adds	r3, #220	; 0xdc
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	f107 0214 	add.w	r2, r7, #20
 8018018:	4611      	mov	r1, r2
 801801a:	68f8      	ldr	r0, [r7, #12]
 801801c:	4798      	blx	r3
        return *this;
 801801e:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8018020:	f107 0314 	add.w	r3, r7, #20
 8018024:	4618      	mov	r0, r3
 8018026:	f001 fc81 	bl	801992c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801802a:	e009      	b.n	8018040 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	33e0      	adds	r3, #224	; 0xe0
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018038:	4611      	mov	r1, r2
 801803a:	68f8      	ldr	r0, [r7, #12]
 801803c:	4798      	blx	r3
    return *this;
 801803e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018040:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018044:	4618      	mov	r0, r3
 8018046:	f004 ffbd 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 801804a:	4623      	mov	r3, r4
}
 801804c:	4618      	mov	r0, r3
 801804e:	3784      	adds	r7, #132	; 0x84
 8018050:	46bd      	mov	sp, r7
 8018052:	bd90      	pop	{r4, r7, pc}

08018054 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8018054:	b590      	push	{r4, r7, lr}
 8018056:	b095      	sub	sp, #84	; 0x54
 8018058:	af00      	add	r7, sp, #0
 801805a:	60f8      	str	r0, [r7, #12]
 801805c:	60b9      	str	r1, [r7, #8]
 801805e:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	33f0      	adds	r3, #240	; 0xf0
 8018066:	681c      	ldr	r4, [r3, #0]
 8018068:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801806c:	4917      	ldr	r1, [pc, #92]	; (80180cc <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 801806e:	4618      	mov	r0, r3
 8018070:	f7f4 fa59 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8018074:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	68b9      	ldr	r1, [r7, #8]
 801807c:	68f8      	ldr	r0, [r7, #12]
 801807e:	47a0      	blx	r4
 8018080:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018084:	4618      	mov	r0, r3
 8018086:	f7f4 fe06 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 801808a:	f107 0310 	add.w	r3, r7, #16
 801808e:	68b9      	ldr	r1, [r7, #8]
 8018090:	4618      	mov	r0, r3
 8018092:	f004 ff6d 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8018096:	f107 0310 	add.w	r3, r7, #16
 801809a:	6879      	ldr	r1, [r7, #4]
 801809c:	4618      	mov	r0, r3
 801809e:	f005 f8e7 	bl	801d270 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	33e4      	adds	r3, #228	; 0xe4
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	f107 0210 	add.w	r2, r7, #16
 80180ae:	4611      	mov	r1, r2
 80180b0:	68f8      	ldr	r0, [r7, #12]
 80180b2:	4798      	blx	r3

    return *this;
 80180b4:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80180b6:	f107 0310 	add.w	r3, r7, #16
 80180ba:	4618      	mov	r0, r3
 80180bc:	f004 ff82 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 80180c0:	4623      	mov	r3, r4
}
 80180c2:	4618      	mov	r0, r3
 80180c4:	3754      	adds	r7, #84	; 0x54
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd90      	pop	{r4, r7, pc}
 80180ca:	bf00      	nop
 80180cc:	080256e0 	.word	0x080256e0

080180d0 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 80180d0:	b590      	push	{r4, r7, lr}
 80180d2:	b093      	sub	sp, #76	; 0x4c
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	60f8      	str	r0, [r7, #12]
 80180d8:	60b9      	str	r1, [r7, #8]
 80180da:	607a      	str	r2, [r7, #4]
 80180dc:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	33f0      	adds	r3, #240	; 0xf0
 80180e4:	681c      	ldr	r4, [r3, #0]
 80180e6:	683b      	ldr	r3, [r7, #0]
 80180e8:	68ba      	ldr	r2, [r7, #8]
 80180ea:	6879      	ldr	r1, [r7, #4]
 80180ec:	68f8      	ldr	r0, [r7, #12]
 80180ee:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 80180f0:	f107 0310 	add.w	r3, r7, #16
 80180f4:	6879      	ldr	r1, [r7, #4]
 80180f6:	4618      	mov	r0, r3
 80180f8:	f004 ff3a 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 80180fc:	f107 0310 	add.w	r3, r7, #16
 8018100:	683a      	ldr	r2, [r7, #0]
 8018102:	68b9      	ldr	r1, [r7, #8]
 8018104:	4618      	mov	r0, r3
 8018106:	f005 f961 	bl	801d3cc <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	33e4      	adds	r3, #228	; 0xe4
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	f107 0210 	add.w	r2, r7, #16
 8018116:	4611      	mov	r1, r2
 8018118:	68f8      	ldr	r0, [r7, #12]
 801811a:	4798      	blx	r3

    return *this;
 801811c:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801811e:	f107 0310 	add.w	r3, r7, #16
 8018122:	4618      	mov	r0, r3
 8018124:	f004 ff4e 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018128:	4623      	mov	r3, r4
}
 801812a:	4618      	mov	r0, r3
 801812c:	374c      	adds	r7, #76	; 0x4c
 801812e:	46bd      	mov	sp, r7
 8018130:	bd90      	pop	{r4, r7, pc}

08018132 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8018132:	b480      	push	{r7}
 8018134:	b083      	sub	sp, #12
 8018136:	af00      	add	r7, sp, #0
 8018138:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	7d1b      	ldrb	r3, [r3, #20]
 801813e:	2b02      	cmp	r3, #2
 8018140:	bf0c      	ite	eq
 8018142:	2301      	moveq	r3, #1
 8018144:	2300      	movne	r3, #0
 8018146:	b2db      	uxtb	r3, r3
}
 8018148:	4618      	mov	r0, r3
 801814a:	370c      	adds	r7, #12
 801814c:	46bd      	mov	sp, r7
 801814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018152:	4770      	bx	lr

08018154 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8018154:	b480      	push	{r7}
 8018156:	b083      	sub	sp, #12
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	7d1b      	ldrb	r3, [r3, #20]
 8018160:	2b01      	cmp	r3, #1
 8018162:	bf0c      	ite	eq
 8018164:	2301      	moveq	r3, #1
 8018166:	2300      	movne	r3, #0
 8018168:	b2db      	uxtb	r3, r3
}
 801816a:	4618      	mov	r0, r3
 801816c:	370c      	adds	r7, #12
 801816e:	46bd      	mov	sp, r7
 8018170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018174:	4770      	bx	lr
	...

08018178 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8018178:	b5b0      	push	{r4, r5, r7, lr}
 801817a:	b096      	sub	sp, #88	; 0x58
 801817c:	af02      	add	r7, sp, #8
 801817e:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	7d5b      	ldrb	r3, [r3, #21]
 8018184:	2b00      	cmp	r3, #0
 8018186:	f040 80bc 	bne.w	8018302 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	2201      	movs	r2, #1
 801818e:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	7d1b      	ldrb	r3, [r3, #20]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d014      	beq.n	80181c2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	7d1b      	ldrb	r3, [r3, #20]
 801819c:	2b02      	cmp	r3, #2
 801819e:	d10a      	bne.n	80181b6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	6998      	ldr	r0, [r3, #24]
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	699b      	ldr	r3, [r3, #24]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	33d8      	adds	r3, #216	; 0xd8
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	687a      	ldr	r2, [r7, #4]
 80181b0:	68d2      	ldr	r2, [r2, #12]
 80181b2:	4611      	mov	r1, r2
 80181b4:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	331c      	adds	r3, #28
 80181ba:	4618      	mov	r0, r3
 80181bc:	f003 fe07 	bl	801bdce <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 80181c0:	e0a0      	b.n	8018304 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	331c      	adds	r3, #28
 80181c6:	4618      	mov	r0, r3
 80181c8:	f003 fac3 	bl	801b752 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 80181cc:	4603      	mov	r3, r0
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d00f      	beq.n	80181f2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 80181d2:	f7fb fd8b 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80181d6:	4604      	mov	r4, r0
 80181d8:	6823      	ldr	r3, [r4, #0]
 80181da:	3368      	adds	r3, #104	; 0x68
 80181dc:	681d      	ldr	r5, [r3, #0]
 80181de:	f7fb fd95 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80181e2:	4603      	mov	r3, r0
 80181e4:	9300      	str	r3, [sp, #0]
 80181e6:	f240 1385 	movw	r3, #389	; 0x185
 80181ea:	4a48      	ldr	r2, [pc, #288]	; (801830c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 80181ec:	4948      	ldr	r1, [pc, #288]	; (8018310 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 80181ee:	4620      	mov	r0, r4
 80181f0:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	331c      	adds	r3, #28
 80181f6:	4618      	mov	r0, r3
 80181f8:	f003 fd5f 	bl	801bcba <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 80181fc:	4602      	mov	r2, r0
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	699b      	ldr	r3, [r3, #24]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d01f      	beq.n	801824a <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	699a      	ldr	r2, [r3, #24]
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	699b      	ldr	r3, [r3, #24]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	33e4      	adds	r3, #228	; 0xe4
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	4610      	mov	r0, r2
 801821a:	4798      	blx	r3
        callHasSucceeded();
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	33d0      	adds	r3, #208	; 0xd0
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	6878      	ldr	r0, [r7, #4]
 8018226:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6998      	ldr	r0, [r3, #24]
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	699b      	ldr	r3, [r3, #24]
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	33d8      	adds	r3, #216	; 0xd8
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	687a      	ldr	r2, [r7, #4]
 8018238:	68d2      	ldr	r2, [r2, #12]
 801823a:	4611      	mov	r1, r2
 801823c:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	331c      	adds	r3, #28
 8018242:	4618      	mov	r0, r3
 8018244:	f003 fdc3 	bl	801bdce <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018248:	e05c      	b.n	8018304 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	331c      	adds	r3, #28
 801824e:	4618      	mov	r0, r3
 8018250:	f003 ffc4 	bl	801c1dc <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8018254:	4603      	mov	r3, r0
 8018256:	2b00      	cmp	r3, #0
 8018258:	d029      	beq.n	80182ae <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	33cc      	adds	r3, #204	; 0xcc
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	6878      	ldr	r0, [r7, #4]
 8018264:	4798      	blx	r3
 8018266:	4604      	mov	r4, r0
 8018268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801826c:	6879      	ldr	r1, [r7, #4]
 801826e:	4618      	mov	r0, r3
 8018270:	f7ff f93b 	bl	80174ea <_ZNK21MockCheckedActualCall7getNameEv>
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018278:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801827c:	f107 000c 	add.w	r0, r7, #12
 8018280:	4621      	mov	r1, r4
 8018282:	f004 fd21 	bl	801ccc8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8018286:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801828a:	4618      	mov	r0, r3
 801828c:	f7f4 fd03 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	33dc      	adds	r3, #220	; 0xdc
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	f107 020c 	add.w	r2, r7, #12
 801829c:	4611      	mov	r1, r2
 801829e:	6878      	ldr	r0, [r7, #4]
 80182a0:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80182a2:	f107 030c 	add.w	r3, r7, #12
 80182a6:	4618      	mov	r0, r3
 80182a8:	f001 fb62 	bl	8019970 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 80182ac:	e02a      	b.n	8018304 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	33cc      	adds	r3, #204	; 0xcc
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	6878      	ldr	r0, [r7, #4]
 80182b8:	4798      	blx	r3
 80182ba:	4604      	mov	r4, r0
 80182bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182c0:	6879      	ldr	r1, [r7, #4]
 80182c2:	4618      	mov	r0, r3
 80182c4:	f7ff f911 	bl	80174ea <_ZNK21MockCheckedActualCall7getNameEv>
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80182d0:	f107 000c 	add.w	r0, r7, #12
 80182d4:	4621      	mov	r1, r4
 80182d6:	f004 fe05 	bl	801cee4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 80182da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80182de:	4618      	mov	r0, r3
 80182e0:	f7f4 fcd9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	33dc      	adds	r3, #220	; 0xdc
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	f107 020c 	add.w	r2, r7, #12
 80182f0:	4611      	mov	r1, r2
 80182f2:	6878      	ldr	r0, [r7, #4]
 80182f4:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80182f6:	f107 030c 	add.w	r3, r7, #12
 80182fa:	4618      	mov	r0, r3
 80182fc:	f001 fb5a 	bl	80199b4 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8018300:	e000      	b.n	8018304 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8018302:	bf00      	nop
    }
}
 8018304:	3750      	adds	r7, #80	; 0x50
 8018306:	46bd      	mov	sp, r7
 8018308:	bdb0      	pop	{r4, r5, r7, pc}
 801830a:	bf00      	nop
 801830c:	080256e8 	.word	0x080256e8
 8018310:	08025750 	.word	0x08025750

08018314 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8018314:	b480      	push	{r7}
 8018316:	b083      	sub	sp, #12
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
 801831c:	460b      	mov	r3, r1
 801831e:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	78fa      	ldrb	r2, [r7, #3]
 8018324:	751a      	strb	r2, [r3, #20]
}
 8018326:	bf00      	nop
 8018328:	370c      	adds	r7, #12
 801832a:	46bd      	mov	sp, r7
 801832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018330:	4770      	bx	lr
	...

08018334 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b084      	sub	sp, #16
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
 801833c:	6039      	str	r1, [r7, #0]
    checkExpectations();
 801833e:	683b      	ldr	r3, [r7, #0]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	33c4      	adds	r3, #196	; 0xc4
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	6838      	ldr	r0, [r7, #0]
 8018348:	4798      	blx	r3
    if (matchingExpectation_)
 801834a:	683b      	ldr	r3, [r7, #0]
 801834c:	699b      	ldr	r3, [r3, #24]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d00a      	beq.n	8018368 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	6999      	ldr	r1, [r3, #24]
 8018356:	683b      	ldr	r3, [r7, #0]
 8018358:	699b      	ldr	r3, [r3, #24]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	3394      	adds	r3, #148	; 0x94
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	687a      	ldr	r2, [r7, #4]
 8018362:	4610      	mov	r0, r2
 8018364:	4798      	blx	r3
 8018366:	e010      	b.n	801838a <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8018368:	f107 0308 	add.w	r3, r7, #8
 801836c:	4909      	ldr	r1, [pc, #36]	; (8018394 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 801836e:	4618      	mov	r0, r3
 8018370:	f7f4 f8d9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8018374:	f107 0308 	add.w	r3, r7, #8
 8018378:	4619      	mov	r1, r3
 801837a:	6878      	ldr	r0, [r7, #4]
 801837c:	f004 fdf8 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018380:	f107 0308 	add.w	r3, r7, #8
 8018384:	4618      	mov	r0, r3
 8018386:	f7f4 fc86 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801838a:	6878      	ldr	r0, [r7, #4]
 801838c:	3710      	adds	r7, #16
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	080257cc 	.word	0x080257cc

08018398 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b082      	sub	sp, #8
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
 80183a0:	460b      	mov	r3, r1
 80183a2:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	3350      	adds	r3, #80	; 0x50
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	6878      	ldr	r0, [r7, #4]
 80183ae:	4798      	blx	r3
 80183b0:	4603      	mov	r3, r0
 80183b2:	f083 0301 	eor.w	r3, r3, #1
 80183b6:	b2db      	uxtb	r3, r3
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d001      	beq.n	80183c0 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 80183bc:	78fb      	ldrb	r3, [r7, #3]
 80183be:	e007      	b.n	80183d0 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	335c      	adds	r3, #92	; 0x5c
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	6878      	ldr	r0, [r7, #4]
 80183ca:	4798      	blx	r3
 80183cc:	4603      	mov	r3, r0
 80183ce:	bf00      	nop
}
 80183d0:	4618      	mov	r0, r3
 80183d2:	3708      	adds	r7, #8
 80183d4:	46bd      	mov	sp, r7
 80183d6:	bd80      	pop	{r7, pc}

080183d8 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 80183d8:	b590      	push	{r4, r7, lr}
 80183da:	b091      	sub	sp, #68	; 0x44
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	3354      	adds	r3, #84	; 0x54
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	f107 0208 	add.w	r2, r7, #8
 80183ec:	6879      	ldr	r1, [r7, #4]
 80183ee:	4610      	mov	r0, r2
 80183f0:	4798      	blx	r3
 80183f2:	f107 0308 	add.w	r3, r7, #8
 80183f6:	4618      	mov	r0, r3
 80183f8:	f005 f898 	bl	801d52c <_ZNK14MockNamedValue12getBoolValueEv>
 80183fc:	4603      	mov	r3, r0
 80183fe:	461c      	mov	r4, r3
 8018400:	bf00      	nop
 8018402:	f107 0308 	add.w	r3, r7, #8
 8018406:	4618      	mov	r0, r3
 8018408:	f004 fddc 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 801840c:	4623      	mov	r3, r4
}
 801840e:	4618      	mov	r0, r3
 8018410:	3744      	adds	r7, #68	; 0x44
 8018412:	46bd      	mov	sp, r7
 8018414:	bd90      	pop	{r4, r7, pc}

08018416 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8018416:	b580      	push	{r7, lr}
 8018418:	b082      	sub	sp, #8
 801841a:	af00      	add	r7, sp, #0
 801841c:	6078      	str	r0, [r7, #4]
 801841e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	3350      	adds	r3, #80	; 0x50
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	6878      	ldr	r0, [r7, #4]
 801842a:	4798      	blx	r3
 801842c:	4603      	mov	r3, r0
 801842e:	f083 0301 	eor.w	r3, r3, #1
 8018432:	b2db      	uxtb	r3, r3
 8018434:	2b00      	cmp	r3, #0
 8018436:	d001      	beq.n	801843c <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8018438:	683b      	ldr	r3, [r7, #0]
 801843a:	e007      	b.n	801844c <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	3364      	adds	r3, #100	; 0x64
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	4798      	blx	r3
 8018448:	4603      	mov	r3, r0
 801844a:	bf00      	nop
}
 801844c:	4618      	mov	r0, r3
 801844e:	3708      	adds	r7, #8
 8018450:	46bd      	mov	sp, r7
 8018452:	bd80      	pop	{r7, pc}

08018454 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8018454:	b590      	push	{r4, r7, lr}
 8018456:	b091      	sub	sp, #68	; 0x44
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	3354      	adds	r3, #84	; 0x54
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	f107 0208 	add.w	r2, r7, #8
 8018468:	6879      	ldr	r1, [r7, #4]
 801846a:	4610      	mov	r0, r2
 801846c:	4798      	blx	r3
 801846e:	f107 0308 	add.w	r3, r7, #8
 8018472:	4618      	mov	r0, r3
 8018474:	f005 f8d2 	bl	801d61c <_ZNK14MockNamedValue11getIntValueEv>
 8018478:	4604      	mov	r4, r0
 801847a:	bf00      	nop
 801847c:	f107 0308 	add.w	r3, r7, #8
 8018480:	4618      	mov	r0, r3
 8018482:	f004 fd9f 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 8018486:	4623      	mov	r3, r4
}
 8018488:	4618      	mov	r0, r3
 801848a:	3744      	adds	r7, #68	; 0x44
 801848c:	46bd      	mov	sp, r7
 801848e:	bd90      	pop	{r4, r7, pc}

08018490 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8018490:	b590      	push	{r4, r7, lr}
 8018492:	b091      	sub	sp, #68	; 0x44
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	3354      	adds	r3, #84	; 0x54
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	f107 0208 	add.w	r2, r7, #8
 80184a4:	6879      	ldr	r1, [r7, #4]
 80184a6:	4610      	mov	r0, r2
 80184a8:	4798      	blx	r3
 80184aa:	f107 0308 	add.w	r3, r7, #8
 80184ae:	4618      	mov	r0, r3
 80184b0:	f005 f93e 	bl	801d730 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 80184b4:	4604      	mov	r4, r0
 80184b6:	bf00      	nop
 80184b8:	f107 0308 	add.w	r3, r7, #8
 80184bc:	4618      	mov	r0, r3
 80184be:	f004 fd81 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 80184c2:	4623      	mov	r3, r4
}
 80184c4:	4618      	mov	r0, r3
 80184c6:	3744      	adds	r7, #68	; 0x44
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd90      	pop	{r4, r7, pc}

080184cc <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b082      	sub	sp, #8
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
 80184d4:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	3350      	adds	r3, #80	; 0x50
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	6878      	ldr	r0, [r7, #4]
 80184e0:	4798      	blx	r3
 80184e2:	4603      	mov	r3, r0
 80184e4:	f083 0301 	eor.w	r3, r3, #1
 80184e8:	b2db      	uxtb	r3, r3
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d001      	beq.n	80184f2 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	e007      	b.n	8018502 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	3368      	adds	r3, #104	; 0x68
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	4798      	blx	r3
 80184fe:	4603      	mov	r3, r0
 8018500:	bf00      	nop
}
 8018502:	4618      	mov	r0, r3
 8018504:	3708      	adds	r7, #8
 8018506:	46bd      	mov	sp, r7
 8018508:	bd80      	pop	{r7, pc}

0801850a <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 801850a:	b590      	push	{r4, r7, lr}
 801850c:	b091      	sub	sp, #68	; 0x44
 801850e:	af00      	add	r7, sp, #0
 8018510:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	3354      	adds	r3, #84	; 0x54
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	f107 0208 	add.w	r2, r7, #8
 801851e:	6879      	ldr	r1, [r7, #4]
 8018520:	4610      	mov	r0, r2
 8018522:	4798      	blx	r3
 8018524:	f107 0308 	add.w	r3, r7, #8
 8018528:	4618      	mov	r0, r3
 801852a:	f005 f89f 	bl	801d66c <_ZNK14MockNamedValue15getLongIntValueEv>
 801852e:	4604      	mov	r4, r0
 8018530:	bf00      	nop
 8018532:	f107 0308 	add.w	r3, r7, #8
 8018536:	4618      	mov	r0, r3
 8018538:	f004 fd44 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 801853c:	4623      	mov	r3, r4
}
 801853e:	4618      	mov	r0, r3
 8018540:	3744      	adds	r7, #68	; 0x44
 8018542:	46bd      	mov	sp, r7
 8018544:	bd90      	pop	{r4, r7, pc}

08018546 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8018546:	b580      	push	{r7, lr}
 8018548:	b082      	sub	sp, #8
 801854a:	af00      	add	r7, sp, #0
 801854c:	6078      	str	r0, [r7, #4]
 801854e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	3350      	adds	r3, #80	; 0x50
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	6878      	ldr	r0, [r7, #4]
 801855a:	4798      	blx	r3
 801855c:	4603      	mov	r3, r0
 801855e:	f083 0301 	eor.w	r3, r3, #1
 8018562:	b2db      	uxtb	r3, r3
 8018564:	2b00      	cmp	r3, #0
 8018566:	d001      	beq.n	801856c <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8018568:	683b      	ldr	r3, [r7, #0]
 801856a:	e007      	b.n	801857c <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	3370      	adds	r3, #112	; 0x70
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	6878      	ldr	r0, [r7, #4]
 8018576:	4798      	blx	r3
 8018578:	4603      	mov	r3, r0
 801857a:	bf00      	nop
}
 801857c:	4618      	mov	r0, r3
 801857e:	3708      	adds	r7, #8
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}

08018584 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8018584:	b5b0      	push	{r4, r5, r7, lr}
 8018586:	b084      	sub	sp, #16
 8018588:	af02      	add	r7, sp, #8
 801858a:	6078      	str	r0, [r7, #4]
 801858c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801858e:	f7fb fbad 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8018592:	4604      	mov	r4, r0
 8018594:	6823      	ldr	r3, [r4, #0]
 8018596:	3368      	adds	r3, #104	; 0x68
 8018598:	681d      	ldr	r5, [r3, #0]
 801859a:	f7fb fbb7 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801859e:	4603      	mov	r3, r0
 80185a0:	9300      	str	r3, [sp, #0]
 80185a2:	f240 13fb 	movw	r3, #507	; 0x1fb
 80185a6:	4a06      	ldr	r2, [pc, #24]	; (80185c0 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 80185a8:	4906      	ldr	r1, [pc, #24]	; (80185c4 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 80185aa:	4620      	mov	r0, r4
 80185ac:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80185ae:	2100      	movs	r1, #0
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f7f1 fffb 	bl	800a5ac <_ZN18cpputest_ulonglongC1Ei>
}
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	3708      	adds	r7, #8
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bdb0      	pop	{r4, r5, r7, pc}
 80185be:	bf00      	nop
 80185c0:	080256e8 	.word	0x080256e8
 80185c4:	08025704 	.word	0x08025704

080185c8 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 80185c8:	b5b0      	push	{r4, r5, r7, lr}
 80185ca:	b086      	sub	sp, #24
 80185cc:	af02      	add	r7, sp, #8
 80185ce:	60f8      	str	r0, [r7, #12]
 80185d0:	60b9      	str	r1, [r7, #8]
 80185d2:	4639      	mov	r1, r7
 80185d4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80185d8:	f7fb fb88 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80185dc:	4604      	mov	r4, r0
 80185de:	6823      	ldr	r3, [r4, #0]
 80185e0:	3368      	adds	r3, #104	; 0x68
 80185e2:	681d      	ldr	r5, [r3, #0]
 80185e4:	f7fb fb92 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80185e8:	4603      	mov	r3, r0
 80185ea:	9300      	str	r3, [sp, #0]
 80185ec:	f240 2301 	movw	r3, #513	; 0x201
 80185f0:	4a06      	ldr	r2, [pc, #24]	; (801860c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 80185f2:	4907      	ldr	r1, [pc, #28]	; (8018610 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 80185f4:	4620      	mov	r0, r4
 80185f6:	47a8      	blx	r5
    return default_value;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	461a      	mov	r2, r3
 80185fc:	463b      	mov	r3, r7
 80185fe:	cb03      	ldmia	r3!, {r0, r1}
 8018600:	6010      	str	r0, [r2, #0]
 8018602:	6051      	str	r1, [r2, #4]
}
 8018604:	68f8      	ldr	r0, [r7, #12]
 8018606:	3710      	adds	r7, #16
 8018608:	46bd      	mov	sp, r7
 801860a:	bdb0      	pop	{r4, r5, r7, pc}
 801860c:	080256e8 	.word	0x080256e8
 8018610:	08025704 	.word	0x08025704

08018614 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8018614:	b5b0      	push	{r4, r5, r7, lr}
 8018616:	b084      	sub	sp, #16
 8018618:	af02      	add	r7, sp, #8
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801861e:	f7fb fb65 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8018622:	4604      	mov	r4, r0
 8018624:	6823      	ldr	r3, [r4, #0]
 8018626:	3368      	adds	r3, #104	; 0x68
 8018628:	681d      	ldr	r5, [r3, #0]
 801862a:	f7fb fb6f 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801862e:	4603      	mov	r3, r0
 8018630:	9300      	str	r3, [sp, #0]
 8018632:	f240 2307 	movw	r3, #519	; 0x207
 8018636:	4a06      	ldr	r2, [pc, #24]	; (8018650 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8018638:	4906      	ldr	r1, [pc, #24]	; (8018654 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 801863a:	4620      	mov	r0, r4
 801863c:	47a8      	blx	r5
    return cpputest_longlong(0);
 801863e:	2100      	movs	r1, #0
 8018640:	6878      	ldr	r0, [r7, #4]
 8018642:	f7f1 ffa7 	bl	800a594 <_ZN17cpputest_longlongC1Ei>
}
 8018646:	6878      	ldr	r0, [r7, #4]
 8018648:	3708      	adds	r7, #8
 801864a:	46bd      	mov	sp, r7
 801864c:	bdb0      	pop	{r4, r5, r7, pc}
 801864e:	bf00      	nop
 8018650:	080256e8 	.word	0x080256e8
 8018654:	08025730 	.word	0x08025730

08018658 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8018658:	b5b0      	push	{r4, r5, r7, lr}
 801865a:	b086      	sub	sp, #24
 801865c:	af02      	add	r7, sp, #8
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	4639      	mov	r1, r7
 8018664:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018668:	f7fb fb40 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801866c:	4604      	mov	r4, r0
 801866e:	6823      	ldr	r3, [r4, #0]
 8018670:	3368      	adds	r3, #104	; 0x68
 8018672:	681d      	ldr	r5, [r3, #0]
 8018674:	f7fb fb4a 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018678:	4603      	mov	r3, r0
 801867a:	9300      	str	r3, [sp, #0]
 801867c:	f240 230d 	movw	r3, #525	; 0x20d
 8018680:	4a06      	ldr	r2, [pc, #24]	; (801869c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8018682:	4907      	ldr	r1, [pc, #28]	; (80186a0 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8018684:	4620      	mov	r0, r4
 8018686:	47a8      	blx	r5
    return default_value;
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	461a      	mov	r2, r3
 801868c:	463b      	mov	r3, r7
 801868e:	cb03      	ldmia	r3!, {r0, r1}
 8018690:	6010      	str	r0, [r2, #0]
 8018692:	6051      	str	r1, [r2, #4]
}
 8018694:	68f8      	ldr	r0, [r7, #12]
 8018696:	3710      	adds	r7, #16
 8018698:	46bd      	mov	sp, r7
 801869a:	bdb0      	pop	{r4, r5, r7, pc}
 801869c:	080256e8 	.word	0x080256e8
 80186a0:	08025730 	.word	0x08025730

080186a4 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	ed2d 8b02 	vpush	{d8}
 80186aa:	b090      	sub	sp, #64	; 0x40
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	3354      	adds	r3, #84	; 0x54
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	f107 0208 	add.w	r2, r7, #8
 80186bc:	6879      	ldr	r1, [r7, #4]
 80186be:	4610      	mov	r0, r2
 80186c0:	4798      	blx	r3
 80186c2:	f107 0308 	add.w	r3, r7, #8
 80186c6:	4618      	mov	r0, r3
 80186c8:	f005 f90a 	bl	801d8e0 <_ZNK14MockNamedValue14getDoubleValueEv>
 80186cc:	eeb0 8a40 	vmov.f32	s16, s0
 80186d0:	eef0 8a60 	vmov.f32	s17, s1
 80186d4:	bf00      	nop
 80186d6:	f107 0308 	add.w	r3, r7, #8
 80186da:	4618      	mov	r0, r3
 80186dc:	f004 fc72 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 80186e0:	eeb0 7a48 	vmov.f32	s14, s16
 80186e4:	eef0 7a68 	vmov.f32	s15, s17
}
 80186e8:	eeb0 0a47 	vmov.f32	s0, s14
 80186ec:	eef0 0a67 	vmov.f32	s1, s15
 80186f0:	3740      	adds	r7, #64	; 0x40
 80186f2:	46bd      	mov	sp, r7
 80186f4:	ecbd 8b02 	vpop	{d8}
 80186f8:	bd80      	pop	{r7, pc}

080186fa <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 80186fa:	b580      	push	{r7, lr}
 80186fc:	b084      	sub	sp, #16
 80186fe:	af00      	add	r7, sp, #0
 8018700:	60f8      	str	r0, [r7, #12]
 8018702:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	3350      	adds	r3, #80	; 0x50
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	68f8      	ldr	r0, [r7, #12]
 8018710:	4798      	blx	r3
 8018712:	4603      	mov	r3, r0
 8018714:	f083 0301 	eor.w	r3, r3, #1
 8018718:	b2db      	uxtb	r3, r3
 801871a:	2b00      	cmp	r3, #0
 801871c:	d002      	beq.n	8018724 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 801871e:	ed97 7b00 	vldr	d7, [r7]
 8018722:	e00a      	b.n	801873a <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	3398      	adds	r3, #152	; 0x98
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	68f8      	ldr	r0, [r7, #12]
 801872e:	4798      	blx	r3
 8018730:	eeb0 7a40 	vmov.f32	s14, s0
 8018734:	eef0 7a60 	vmov.f32	s15, s1
 8018738:	bf00      	nop
}
 801873a:	eeb0 0a47 	vmov.f32	s0, s14
 801873e:	eef0 0a67 	vmov.f32	s1, s15
 8018742:	3710      	adds	r7, #16
 8018744:	46bd      	mov	sp, r7
 8018746:	bd80      	pop	{r7, pc}

08018748 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 8018748:	b590      	push	{r4, r7, lr}
 801874a:	b091      	sub	sp, #68	; 0x44
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	3354      	adds	r3, #84	; 0x54
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	f107 0208 	add.w	r2, r7, #8
 801875c:	6879      	ldr	r1, [r7, #4]
 801875e:	4610      	mov	r0, r2
 8018760:	4798      	blx	r3
 8018762:	f107 0308 	add.w	r3, r7, #8
 8018766:	4618      	mov	r0, r3
 8018768:	f004 ff08 	bl	801d57c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 801876c:	4604      	mov	r4, r0
 801876e:	bf00      	nop
 8018770:	f107 0308 	add.w	r3, r7, #8
 8018774:	4618      	mov	r0, r3
 8018776:	f004 fc25 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 801877a:	4623      	mov	r3, r4
}
 801877c:	4618      	mov	r0, r3
 801877e:	3744      	adds	r7, #68	; 0x44
 8018780:	46bd      	mov	sp, r7
 8018782:	bd90      	pop	{r4, r7, pc}

08018784 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b082      	sub	sp, #8
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
 801878c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	3350      	adds	r3, #80	; 0x50
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	6878      	ldr	r0, [r7, #4]
 8018798:	4798      	blx	r3
 801879a:	4603      	mov	r3, r0
 801879c:	f083 0301 	eor.w	r3, r3, #1
 80187a0:	b2db      	uxtb	r3, r3
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d001      	beq.n	80187aa <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 80187a6:	683b      	ldr	r3, [r7, #0]
 80187a8:	e007      	b.n	80187ba <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	3388      	adds	r3, #136	; 0x88
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	4798      	blx	r3
 80187b6:	4603      	mov	r3, r0
 80187b8:	bf00      	nop
}
 80187ba:	4618      	mov	r0, r3
 80187bc:	3708      	adds	r7, #8
 80187be:	46bd      	mov	sp, r7
 80187c0:	bd80      	pop	{r7, pc}

080187c2 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 80187c2:	b580      	push	{r7, lr}
 80187c4:	b082      	sub	sp, #8
 80187c6:	af00      	add	r7, sp, #0
 80187c8:	6078      	str	r0, [r7, #4]
 80187ca:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	3350      	adds	r3, #80	; 0x50
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	6878      	ldr	r0, [r7, #4]
 80187d6:	4798      	blx	r3
 80187d8:	4603      	mov	r3, r0
 80187da:	f083 0301 	eor.w	r3, r3, #1
 80187de:	b2db      	uxtb	r3, r3
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d001      	beq.n	80187e8 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	e007      	b.n	80187f8 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	33a0      	adds	r3, #160	; 0xa0
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	6878      	ldr	r0, [r7, #4]
 80187f2:	4798      	blx	r3
 80187f4:	4603      	mov	r3, r0
 80187f6:	bf00      	nop
}
 80187f8:	4618      	mov	r0, r3
 80187fa:	3708      	adds	r7, #8
 80187fc:	46bd      	mov	sp, r7
 80187fe:	bd80      	pop	{r7, pc}

08018800 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8018800:	b590      	push	{r4, r7, lr}
 8018802:	b091      	sub	sp, #68	; 0x44
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	3354      	adds	r3, #84	; 0x54
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	f107 0208 	add.w	r2, r7, #8
 8018814:	6879      	ldr	r1, [r7, #4]
 8018816:	4610      	mov	r0, r2
 8018818:	4798      	blx	r3
 801881a:	f107 0308 	add.w	r3, r7, #8
 801881e:	4618      	mov	r0, r3
 8018820:	f005 f8e2 	bl	801d9e8 <_ZNK14MockNamedValue15getPointerValueEv>
 8018824:	4604      	mov	r4, r0
 8018826:	bf00      	nop
 8018828:	f107 0308 	add.w	r3, r7, #8
 801882c:	4618      	mov	r0, r3
 801882e:	f004 fbc9 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 8018832:	4623      	mov	r3, r4
}
 8018834:	4618      	mov	r0, r3
 8018836:	3744      	adds	r7, #68	; 0x44
 8018838:	46bd      	mov	sp, r7
 801883a:	bd90      	pop	{r4, r7, pc}

0801883c <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 801883c:	b590      	push	{r4, r7, lr}
 801883e:	b091      	sub	sp, #68	; 0x44
 8018840:	af00      	add	r7, sp, #0
 8018842:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	3354      	adds	r3, #84	; 0x54
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	f107 0208 	add.w	r2, r7, #8
 8018850:	6879      	ldr	r1, [r7, #4]
 8018852:	4610      	mov	r0, r2
 8018854:	4798      	blx	r3
 8018856:	f107 0308 	add.w	r3, r7, #8
 801885a:	4618      	mov	r0, r3
 801885c:	f005 f8ec 	bl	801da38 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8018860:	4604      	mov	r4, r0
 8018862:	bf00      	nop
 8018864:	f107 0308 	add.w	r3, r7, #8
 8018868:	4618      	mov	r0, r3
 801886a:	f004 fbab 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 801886e:	4623      	mov	r3, r4
}
 8018870:	4618      	mov	r0, r3
 8018872:	3744      	adds	r7, #68	; 0x44
 8018874:	46bd      	mov	sp, r7
 8018876:	bd90      	pop	{r4, r7, pc}

08018878 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b082      	sub	sp, #8
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
 8018880:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	3350      	adds	r3, #80	; 0x50
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	6878      	ldr	r0, [r7, #4]
 801888c:	4798      	blx	r3
 801888e:	4603      	mov	r3, r0
 8018890:	f083 0301 	eor.w	r3, r3, #1
 8018894:	b2db      	uxtb	r3, r3
 8018896:	2b00      	cmp	r3, #0
 8018898:	d001      	beq.n	801889e <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	e007      	b.n	80188ae <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	33a8      	adds	r3, #168	; 0xa8
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	6878      	ldr	r0, [r7, #4]
 80188a8:	4798      	blx	r3
 80188aa:	4603      	mov	r3, r0
 80188ac:	bf00      	nop
}
 80188ae:	4618      	mov	r0, r3
 80188b0:	3708      	adds	r7, #8
 80188b2:	46bd      	mov	sp, r7
 80188b4:	bd80      	pop	{r7, pc}

080188b6 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 80188b6:	b590      	push	{r4, r7, lr}
 80188b8:	b091      	sub	sp, #68	; 0x44
 80188ba:	af00      	add	r7, sp, #0
 80188bc:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	3354      	adds	r3, #84	; 0x54
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	f107 0208 	add.w	r2, r7, #8
 80188ca:	6879      	ldr	r1, [r7, #4]
 80188cc:	4610      	mov	r0, r2
 80188ce:	4798      	blx	r3
 80188d0:	f107 0308 	add.w	r3, r7, #8
 80188d4:	4618      	mov	r0, r3
 80188d6:	f005 f8d7 	bl	801da88 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 80188da:	4604      	mov	r4, r0
 80188dc:	bf00      	nop
 80188de:	f107 0308 	add.w	r3, r7, #8
 80188e2:	4618      	mov	r0, r3
 80188e4:	f004 fb6e 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 80188e8:	4623      	mov	r3, r4
}
 80188ea:	4618      	mov	r0, r3
 80188ec:	3744      	adds	r7, #68	; 0x44
 80188ee:	46bd      	mov	sp, r7
 80188f0:	bd90      	pop	{r4, r7, pc}

080188f2 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 80188f2:	b580      	push	{r7, lr}
 80188f4:	b082      	sub	sp, #8
 80188f6:	af00      	add	r7, sp, #0
 80188f8:	6078      	str	r0, [r7, #4]
 80188fa:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	3350      	adds	r3, #80	; 0x50
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	6878      	ldr	r0, [r7, #4]
 8018906:	4798      	blx	r3
 8018908:	4603      	mov	r3, r0
 801890a:	f083 0301 	eor.w	r3, r3, #1
 801890e:	b2db      	uxtb	r3, r3
 8018910:	2b00      	cmp	r3, #0
 8018912:	d001      	beq.n	8018918 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8018914:	683b      	ldr	r3, [r7, #0]
 8018916:	e007      	b.n	8018928 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	33b0      	adds	r3, #176	; 0xb0
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	6878      	ldr	r0, [r7, #4]
 8018922:	4798      	blx	r3
 8018924:	4603      	mov	r3, r0
 8018926:	bf00      	nop
}
 8018928:	4618      	mov	r0, r3
 801892a:	3708      	adds	r7, #8
 801892c:	46bd      	mov	sp, r7
 801892e:	bd80      	pop	{r7, pc}

08018930 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b082      	sub	sp, #8
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
 8018938:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	3350      	adds	r3, #80	; 0x50
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	6878      	ldr	r0, [r7, #4]
 8018944:	4798      	blx	r3
 8018946:	4603      	mov	r3, r0
 8018948:	f083 0301 	eor.w	r3, r3, #1
 801894c:	b2db      	uxtb	r3, r3
 801894e:	2b00      	cmp	r3, #0
 8018950:	d001      	beq.n	8018956 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	e007      	b.n	8018966 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	3394      	adds	r3, #148	; 0x94
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	6878      	ldr	r0, [r7, #4]
 8018960:	4798      	blx	r3
 8018962:	4603      	mov	r3, r0
 8018964:	bf00      	nop
}
 8018966:	4618      	mov	r0, r3
 8018968:	3708      	adds	r7, #8
 801896a:	46bd      	mov	sp, r7
 801896c:	bd80      	pop	{r7, pc}

0801896e <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 801896e:	b590      	push	{r4, r7, lr}
 8018970:	b091      	sub	sp, #68	; 0x44
 8018972:	af00      	add	r7, sp, #0
 8018974:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	3354      	adds	r3, #84	; 0x54
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	f107 0208 	add.w	r2, r7, #8
 8018982:	6879      	ldr	r1, [r7, #4]
 8018984:	4610      	mov	r0, r2
 8018986:	4798      	blx	r3
 8018988:	f107 0308 	add.w	r3, r7, #8
 801898c:	4618      	mov	r0, r3
 801898e:	f005 f803 	bl	801d998 <_ZNK14MockNamedValue14getStringValueEv>
 8018992:	4604      	mov	r4, r0
 8018994:	bf00      	nop
 8018996:	f107 0308 	add.w	r3, r7, #8
 801899a:	4618      	mov	r0, r3
 801899c:	f004 fb12 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 80189a0:	4623      	mov	r3, r4
}
 80189a2:	4618      	mov	r0, r3
 80189a4:	3744      	adds	r7, #68	; 0x44
 80189a6:	46bd      	mov	sp, r7
 80189a8:	bd90      	pop	{r4, r7, pc}

080189aa <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 80189aa:	b590      	push	{r4, r7, lr}
 80189ac:	b093      	sub	sp, #76	; 0x4c
 80189ae:	af00      	add	r7, sp, #0
 80189b0:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	3354      	adds	r3, #84	; 0x54
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	f107 0210 	add.w	r2, r7, #16
 80189be:	6879      	ldr	r1, [r7, #4]
 80189c0:	4610      	mov	r0, r2
 80189c2:	4798      	blx	r3
 80189c4:	f107 0308 	add.w	r3, r7, #8
 80189c8:	f107 0210 	add.w	r2, r7, #16
 80189cc:	4611      	mov	r1, r2
 80189ce:	4618      	mov	r0, r3
 80189d0:	f004 fd8e 	bl	801d4f0 <_ZNK14MockNamedValue7getNameEv>
 80189d4:	f107 0308 	add.w	r3, r7, #8
 80189d8:	4618      	mov	r0, r3
 80189da:	f7f4 f94b 	bl	800cc74 <_ZNK12SimpleString7isEmptyEv>
 80189de:	4603      	mov	r3, r0
 80189e0:	f083 0301 	eor.w	r3, r3, #1
 80189e4:	b2dc      	uxtb	r4, r3
 80189e6:	f107 0308 	add.w	r3, r7, #8
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7f4 f953 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 80189f0:	f107 0310 	add.w	r3, r7, #16
 80189f4:	4618      	mov	r0, r3
 80189f6:	f004 fae5 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 80189fa:	4623      	mov	r3, r4
}
 80189fc:	4618      	mov	r0, r3
 80189fe:	374c      	adds	r7, #76	; 0x4c
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd90      	pop	{r4, r7, pc}

08018a04 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8018a04:	b590      	push	{r4, r7, lr}
 8018a06:	b095      	sub	sp, #84	; 0x54
 8018a08:	af02      	add	r7, sp, #8
 8018a0a:	6078      	str	r0, [r7, #4]
 8018a0c:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	33c0      	adds	r3, #192	; 0xc0
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	6878      	ldr	r0, [r7, #4]
 8018a18:	4798      	blx	r3
 8018a1a:	4603      	mov	r3, r0
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d001      	beq.n	8018a24 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8018a20:	687c      	ldr	r4, [r7, #4]
 8018a22:	e053      	b.n	8018acc <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	331c      	adds	r3, #28
 8018a28:	6839      	ldr	r1, [r7, #0]
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	f003 f8ca 	bl	801bbc4 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	699b      	ldr	r3, [r3, #24]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d109      	bne.n	8018a4c <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	331c      	adds	r3, #28
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	f002 fe20 	bl	801b682 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018a42:	4603      	mov	r3, r0
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d001      	beq.n	8018a4c <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8018a48:	2301      	movs	r3, #1
 8018a4a:	e000      	b.n	8018a4e <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d02c      	beq.n	8018aac <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	33cc      	adds	r3, #204	; 0xcc
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	6878      	ldr	r0, [r7, #4]
 8018a5c:	4798      	blx	r3
 8018a5e:	4604      	mov	r4, r0
 8018a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a64:	6879      	ldr	r1, [r7, #4]
 8018a66:	4618      	mov	r0, r3
 8018a68:	f7fe fd3f 	bl	80174ea <_ZNK21MockCheckedActualCall7getNameEv>
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a70:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018a74:	f107 000c 	add.w	r0, r7, #12
 8018a78:	9300      	str	r3, [sp, #0]
 8018a7a:	683b      	ldr	r3, [r7, #0]
 8018a7c:	4621      	mov	r1, r4
 8018a7e:	f004 f9fb 	bl	801ce78 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8018a82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018a86:	4618      	mov	r0, r3
 8018a88:	f7f4 f905 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	33dc      	adds	r3, #220	; 0xdc
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	f107 020c 	add.w	r2, r7, #12
 8018a98:	4611      	mov	r1, r2
 8018a9a:	6878      	ldr	r0, [r7, #4]
 8018a9c:	4798      	blx	r3
        return *this;
 8018a9e:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8018aa0:	f107 030c 	add.w	r3, r7, #12
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f000 ffa7 	bl	80199f8 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8018aaa:	e00f      	b.n	8018acc <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	331c      	adds	r3, #28
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	f003 f9a7 	bl	801be04 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	699b      	ldr	r3, [r3, #24]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d105      	bne.n	8018aca <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	33d8      	adds	r3, #216	; 0xd8
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	6878      	ldr	r0, [r7, #4]
 8018ac8:	4798      	blx	r3
    }

    return *this;
 8018aca:	687c      	ldr	r4, [r7, #4]
 8018acc:	4623      	mov	r3, r4
}
 8018ace:	4618      	mov	r0, r3
 8018ad0:	374c      	adds	r7, #76	; 0x4c
 8018ad2:	46bd      	mov	sp, r7
 8018ad4:	bd90      	pop	{r4, r7, pc}
	...

08018ad8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8018ad8:	b590      	push	{r4, r7, lr}
 8018ada:	b087      	sub	sp, #28
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	60f8      	str	r0, [r7, #12]
 8018ae0:	60b9      	str	r1, [r7, #8]
 8018ae2:	607a      	str	r2, [r7, #4]
 8018ae4:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 8018ae6:	f240 2282 	movw	r2, #642	; 0x282
 8018aea:	4913      	ldr	r1, [pc, #76]	; (8018b38 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8018aec:	2018      	movs	r0, #24
 8018aee:	f7f1 f957 	bl	8009da0 <_ZnwjPKci>
 8018af2:	4604      	mov	r4, r0
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	687a      	ldr	r2, [r7, #4]
 8018af8:	68b9      	ldr	r1, [r7, #8]
 8018afa:	4620      	mov	r0, r4
 8018afc:	f7fe fa48 	bl	8016f90 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8018b00:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d103      	bne.n	8018b12 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	693a      	ldr	r2, [r7, #16]
 8018b0e:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8018b10:	e00d      	b.n	8018b2e <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b16:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8018b18:	697b      	ldr	r3, [r7, #20]
 8018b1a:	695b      	ldr	r3, [r3, #20]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d003      	beq.n	8018b28 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8018b20:	697b      	ldr	r3, [r7, #20]
 8018b22:	695b      	ldr	r3, [r3, #20]
 8018b24:	617b      	str	r3, [r7, #20]
 8018b26:	e7f7      	b.n	8018b18 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8018b28:	697b      	ldr	r3, [r7, #20]
 8018b2a:	693a      	ldr	r2, [r7, #16]
 8018b2c:	615a      	str	r2, [r3, #20]
}
 8018b2e:	bf00      	nop
 8018b30:	371c      	adds	r7, #28
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bd90      	pop	{r4, r7, pc}
 8018b36:	bf00      	nop
 8018b38:	080256e8 	.word	0x080256e8

08018b3c <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b082      	sub	sp, #8
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6078      	str	r0, [r7, #4]
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	3308      	adds	r3, #8
 8018b48:	4618      	mov	r0, r3
 8018b4a:	f7f4 f8a4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	4618      	mov	r0, r3
 8018b52:	f7f4 f8a0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	3708      	adds	r7, #8
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	bd80      	pop	{r7, pc}

08018b60 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8018b60:	b590      	push	{r4, r7, lr}
 8018b62:	b085      	sub	sp, #20
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b6c:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	60bb      	str	r3, [r7, #8]

    while (current) {
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d012      	beq.n	8018b9e <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	695b      	ldr	r3, [r3, #20]
 8018b80:	60fb      	str	r3, [r7, #12]
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	68fa      	ldr	r2, [r7, #12]
 8018b86:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8018b88:	68bc      	ldr	r4, [r7, #8]
 8018b8a:	2c00      	cmp	r4, #0
 8018b8c:	d0f1      	beq.n	8018b72 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8018b8e:	4620      	mov	r0, r4
 8018b90:	f7ff ffd4 	bl	8018b3c <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8018b94:	2118      	movs	r1, #24
 8018b96:	4620      	mov	r0, r4
 8018b98:	f7f1 f916 	bl	8009dc8 <_ZdlPvj>
    while (current) {
 8018b9c:	e7e9      	b.n	8018b72 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8018b9e:	bf00      	nop
 8018ba0:	3714      	adds	r7, #20
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	bd90      	pop	{r4, r7, pc}
	...

08018ba8 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b082      	sub	sp, #8
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f7fe fc6a 	bl	801748c <_ZN14MockActualCallC1Ev>
 8018bb8:	4a06      	ldr	r2, [pc, #24]	; (8018bd4 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	601a      	str	r2, [r3, #0]
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	3304      	adds	r3, #4
 8018bc2:	4905      	ldr	r1, [pc, #20]	; (8018bd8 <_ZN19MockActualCallTraceC1Ev+0x30>)
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	f7f3 fcae 	bl	800c526 <_ZN12SimpleStringC1EPKc>
{
}
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	4618      	mov	r0, r3
 8018bce:	3708      	adds	r7, #8
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	bd80      	pop	{r7, pc}
 8018bd4:	080282b0 	.word	0x080282b0
 8018bd8:	080256d0 	.word	0x080256d0

08018bdc <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b082      	sub	sp, #8
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
 8018be4:	4a08      	ldr	r2, [pc, #32]	; (8018c08 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	601a      	str	r2, [r3, #0]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	3304      	adds	r3, #4
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f7f4 f851 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	f7fe fc58 	bl	80174ac <_ZN14MockActualCallD1Ev>
{
}
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	4618      	mov	r0, r3
 8018c00:	3708      	adds	r7, #8
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}
 8018c06:	bf00      	nop
 8018c08:	080282b0 	.word	0x080282b0

08018c0c <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b082      	sub	sp, #8
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
}
 8018c14:	6878      	ldr	r0, [r7, #4]
 8018c16:	f7ff ffe1 	bl	8018bdc <_ZN19MockActualCallTraceD1Ev>
 8018c1a:	210c      	movs	r1, #12
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f7f1 f8d3 	bl	8009dc8 <_ZdlPvj>
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	4618      	mov	r0, r3
 8018c26:	3708      	adds	r7, #8
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}

08018c2c <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	3304      	adds	r3, #4
 8018c3a:	4907      	ldr	r1, [pc, #28]	; (8018c58 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f7f4 f8b9 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	3304      	adds	r3, #4
 8018c46:	6839      	ldr	r1, [r7, #0]
 8018c48:	4618      	mov	r0, r3
 8018c4a:	f7f4 f8a1 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    return *this;
 8018c4e:	687b      	ldr	r3, [r7, #4]
}
 8018c50:	4618      	mov	r0, r3
 8018c52:	3708      	adds	r7, #8
 8018c54:	46bd      	mov	sp, r7
 8018c56:	bd80      	pop	{r7, pc}
 8018c58:	080257dc 	.word	0x080257dc

08018c5c <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8018c5c:	b590      	push	{r4, r7, lr}
 8018c5e:	b085      	sub	sp, #20
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
 8018c64:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	3304      	adds	r3, #4
 8018c6a:	490e      	ldr	r1, [pc, #56]	; (8018ca4 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f7f4 f8a1 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	1d1c      	adds	r4, r3, #4
 8018c76:	f107 0308 	add.w	r3, r7, #8
 8018c7a:	6839      	ldr	r1, [r7, #0]
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f7f4 fd39 	bl	800d6f4 <_Z10StringFromj>
 8018c82:	f107 0308 	add.w	r3, r7, #8
 8018c86:	4619      	mov	r1, r3
 8018c88:	4620      	mov	r0, r4
 8018c8a:	f7f4 f881 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8018c8e:	f107 0308 	add.w	r3, r7, #8
 8018c92:	4618      	mov	r0, r3
 8018c94:	f7f3 ffff 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8018c98:	687b      	ldr	r3, [r7, #4]
}
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	3714      	adds	r7, #20
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	bd90      	pop	{r4, r7, pc}
 8018ca2:	bf00      	nop
 8018ca4:	080257ec 	.word	0x080257ec

08018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b082      	sub	sp, #8
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
 8018cb0:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	3304      	adds	r3, #4
 8018cb6:	490a      	ldr	r1, [pc, #40]	; (8018ce0 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f7f4 f87b 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	3304      	adds	r3, #4
 8018cc2:	6839      	ldr	r1, [r7, #0]
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f7f4 f863 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	3304      	adds	r3, #4
 8018cce:	4905      	ldr	r1, [pc, #20]	; (8018ce4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f7f4 f86f 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
}
 8018cd6:	bf00      	nop
 8018cd8:	3708      	adds	r7, #8
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	bd80      	pop	{r7, pc}
 8018cde:	bf00      	nop
 8018ce0:	080257fc 	.word	0x080257fc
 8018ce4:	08025800 	.word	0x08025800

08018ce8 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8018ce8:	b590      	push	{r4, r7, lr}
 8018cea:	b087      	sub	sp, #28
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	60f8      	str	r0, [r7, #12]
 8018cf0:	60b9      	str	r1, [r7, #8]
 8018cf2:	4613      	mov	r3, r2
 8018cf4:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8018cf6:	68b9      	ldr	r1, [r7, #8]
 8018cf8:	68f8      	ldr	r0, [r7, #12]
 8018cfa:	f7ff ffd5 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	1d1c      	adds	r4, r3, #4
 8018d02:	f107 0310 	add.w	r3, r7, #16
 8018d06:	79fa      	ldrb	r2, [r7, #7]
 8018d08:	4611      	mov	r1, r2
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7f4 fa34 	bl	800d178 <_Z10StringFromb>
 8018d10:	f107 0310 	add.w	r3, r7, #16
 8018d14:	4619      	mov	r1, r3
 8018d16:	4620      	mov	r0, r4
 8018d18:	f7f4 f83a 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8018d1c:	f107 0310 	add.w	r3, r7, #16
 8018d20:	4618      	mov	r0, r3
 8018d22:	f7f3 ffb8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8018d26:	68fb      	ldr	r3, [r7, #12]
}
 8018d28:	4618      	mov	r0, r3
 8018d2a:	371c      	adds	r7, #28
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd90      	pop	{r4, r7, pc}

08018d30 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8018d30:	b590      	push	{r4, r7, lr}
 8018d32:	b08f      	sub	sp, #60	; 0x3c
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	60f8      	str	r0, [r7, #12]
 8018d38:	60b9      	str	r1, [r7, #8]
 8018d3a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018d3c:	68b9      	ldr	r1, [r7, #8]
 8018d3e:	68f8      	ldr	r0, [r7, #12]
 8018d40:	f7ff ffb2 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	1d1c      	adds	r4, r3, #4
 8018d48:	f107 0320 	add.w	r3, r7, #32
 8018d4c:	6879      	ldr	r1, [r7, #4]
 8018d4e:	4618      	mov	r0, r3
 8018d50:	f7f4 fcd0 	bl	800d6f4 <_Z10StringFromj>
 8018d54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018d58:	491f      	ldr	r1, [pc, #124]	; (8018dd8 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f7f3 fbe3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8018d60:	f107 0318 	add.w	r3, r7, #24
 8018d64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018d68:	f107 0120 	add.w	r1, r7, #32
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	f7f3 fff4 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 8018d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018d76:	6879      	ldr	r1, [r7, #4]
 8018d78:	4618      	mov	r0, r3
 8018d7a:	f7f4 fb5f 	bl	800d43c <_Z30BracketsFormattedHexStringFromj>
 8018d7e:	f107 0310 	add.w	r3, r7, #16
 8018d82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018d86:	f107 0118 	add.w	r1, r7, #24
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	f7f3 ffe5 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 8018d90:	f107 0310 	add.w	r3, r7, #16
 8018d94:	4619      	mov	r1, r3
 8018d96:	4620      	mov	r0, r4
 8018d98:	f7f3 fffa 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8018d9c:	f107 0310 	add.w	r3, r7, #16
 8018da0:	4618      	mov	r0, r3
 8018da2:	f7f3 ff78 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018da6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7f3 ff73 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018db0:	f107 0318 	add.w	r3, r7, #24
 8018db4:	4618      	mov	r0, r3
 8018db6:	f7f3 ff6e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f7f3 ff69 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018dc4:	f107 0320 	add.w	r3, r7, #32
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f7f3 ff64 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8018dce:	68fb      	ldr	r3, [r7, #12]
}
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	373c      	adds	r7, #60	; 0x3c
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd90      	pop	{r4, r7, pc}
 8018dd8:	080257fc 	.word	0x080257fc

08018ddc <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8018ddc:	b590      	push	{r4, r7, lr}
 8018dde:	b08f      	sub	sp, #60	; 0x3c
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	60f8      	str	r0, [r7, #12]
 8018de4:	60b9      	str	r1, [r7, #8]
 8018de6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018de8:	68b9      	ldr	r1, [r7, #8]
 8018dea:	68f8      	ldr	r0, [r7, #12]
 8018dec:	f7ff ff5c 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	1d1c      	adds	r4, r3, #4
 8018df4:	f107 0320 	add.w	r3, r7, #32
 8018df8:	6879      	ldr	r1, [r7, #4]
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7f4 fa12 	bl	800d224 <_Z10StringFromi>
 8018e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018e04:	491f      	ldr	r1, [pc, #124]	; (8018e84 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8018e06:	4618      	mov	r0, r3
 8018e08:	f7f3 fb8d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8018e0c:	f107 0318 	add.w	r3, r7, #24
 8018e10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018e14:	f107 0120 	add.w	r1, r7, #32
 8018e18:	4618      	mov	r0, r3
 8018e1a:	f7f3 ff9e 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 8018e1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e22:	6879      	ldr	r1, [r7, #4]
 8018e24:	4618      	mov	r0, r3
 8018e26:	f7f4 faed 	bl	800d404 <_Z30BracketsFormattedHexStringFromi>
 8018e2a:	f107 0310 	add.w	r3, r7, #16
 8018e2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018e32:	f107 0118 	add.w	r1, r7, #24
 8018e36:	4618      	mov	r0, r3
 8018e38:	f7f3 ff8f 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 8018e3c:	f107 0310 	add.w	r3, r7, #16
 8018e40:	4619      	mov	r1, r3
 8018e42:	4620      	mov	r0, r4
 8018e44:	f7f3 ffa4 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8018e48:	f107 0310 	add.w	r3, r7, #16
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7f3 ff22 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e56:	4618      	mov	r0, r3
 8018e58:	f7f3 ff1d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018e5c:	f107 0318 	add.w	r3, r7, #24
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7f3 ff18 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f7f3 ff13 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018e70:	f107 0320 	add.w	r3, r7, #32
 8018e74:	4618      	mov	r0, r3
 8018e76:	f7f3 ff0e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8018e7a:	68fb      	ldr	r3, [r7, #12]
}
 8018e7c:	4618      	mov	r0, r3
 8018e7e:	373c      	adds	r7, #60	; 0x3c
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd90      	pop	{r4, r7, pc}
 8018e84:	080257fc 	.word	0x080257fc

08018e88 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018e88:	b590      	push	{r4, r7, lr}
 8018e8a:	b08f      	sub	sp, #60	; 0x3c
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	60f8      	str	r0, [r7, #12]
 8018e90:	60b9      	str	r1, [r7, #8]
 8018e92:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018e94:	68b9      	ldr	r1, [r7, #8]
 8018e96:	68f8      	ldr	r0, [r7, #12]
 8018e98:	f7ff ff06 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	1d1c      	adds	r4, r3, #4
 8018ea0:	f107 0320 	add.w	r3, r7, #32
 8018ea4:	6879      	ldr	r1, [r7, #4]
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	f7f4 fc36 	bl	800d718 <_Z10StringFromm>
 8018eac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018eb0:	491f      	ldr	r1, [pc, #124]	; (8018f30 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	f7f3 fb37 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8018eb8:	f107 0318 	add.w	r3, r7, #24
 8018ebc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018ec0:	f107 0120 	add.w	r1, r7, #32
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	f7f3 ff48 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 8018eca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018ece:	6879      	ldr	r1, [r7, #4]
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	f7f4 faeb 	bl	800d4ac <_Z30BracketsFormattedHexStringFromm>
 8018ed6:	f107 0310 	add.w	r3, r7, #16
 8018eda:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018ede:	f107 0118 	add.w	r1, r7, #24
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	f7f3 ff39 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 8018ee8:	f107 0310 	add.w	r3, r7, #16
 8018eec:	4619      	mov	r1, r3
 8018eee:	4620      	mov	r0, r4
 8018ef0:	f7f3 ff4e 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8018ef4:	f107 0310 	add.w	r3, r7, #16
 8018ef8:	4618      	mov	r0, r3
 8018efa:	f7f3 fecc 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018efe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7f3 fec7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018f08:	f107 0318 	add.w	r3, r7, #24
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	f7f3 fec2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018f16:	4618      	mov	r0, r3
 8018f18:	f7f3 febd 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018f1c:	f107 0320 	add.w	r3, r7, #32
 8018f20:	4618      	mov	r0, r3
 8018f22:	f7f3 feb8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8018f26:	68fb      	ldr	r3, [r7, #12]
}
 8018f28:	4618      	mov	r0, r3
 8018f2a:	373c      	adds	r7, #60	; 0x3c
 8018f2c:	46bd      	mov	sp, r7
 8018f2e:	bd90      	pop	{r4, r7, pc}
 8018f30:	080257fc 	.word	0x080257fc

08018f34 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8018f34:	b590      	push	{r4, r7, lr}
 8018f36:	b08f      	sub	sp, #60	; 0x3c
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	60f8      	str	r0, [r7, #12]
 8018f3c:	60b9      	str	r1, [r7, #8]
 8018f3e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018f40:	68b9      	ldr	r1, [r7, #8]
 8018f42:	68f8      	ldr	r0, [r7, #12]
 8018f44:	f7ff feb0 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	1d1c      	adds	r4, r3, #4
 8018f4c:	f107 0320 	add.w	r3, r7, #32
 8018f50:	6879      	ldr	r1, [r7, #4]
 8018f52:	4618      	mov	r0, r3
 8018f54:	f7f4 f978 	bl	800d248 <_Z10StringFroml>
 8018f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018f5c:	491f      	ldr	r1, [pc, #124]	; (8018fdc <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7f3 fae1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8018f64:	f107 0318 	add.w	r3, r7, #24
 8018f68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018f6c:	f107 0120 	add.w	r1, r7, #32
 8018f70:	4618      	mov	r0, r3
 8018f72:	f7f3 fef2 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 8018f76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018f7a:	6879      	ldr	r1, [r7, #4]
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	f7f4 fa79 	bl	800d474 <_Z30BracketsFormattedHexStringFroml>
 8018f82:	f107 0310 	add.w	r3, r7, #16
 8018f86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018f8a:	f107 0118 	add.w	r1, r7, #24
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f7f3 fee3 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 8018f94:	f107 0310 	add.w	r3, r7, #16
 8018f98:	4619      	mov	r1, r3
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	f7f3 fef8 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8018fa0:	f107 0310 	add.w	r3, r7, #16
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	f7f3 fe76 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018faa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018fae:	4618      	mov	r0, r3
 8018fb0:	f7f3 fe71 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018fb4:	f107 0318 	add.w	r3, r7, #24
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f7f3 fe6c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f7f3 fe67 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8018fc8:	f107 0320 	add.w	r3, r7, #32
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f7f3 fe62 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8018fd2:	68fb      	ldr	r3, [r7, #12]
}
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	373c      	adds	r7, #60	; 0x3c
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bd90      	pop	{r4, r7, pc}
 8018fdc:	080257fc 	.word	0x080257fc

08018fe0 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018fe0:	b5b0      	push	{r4, r5, r7, lr}
 8018fe2:	b086      	sub	sp, #24
 8018fe4:	af02      	add	r7, sp, #8
 8018fe6:	60f8      	str	r0, [r7, #12]
 8018fe8:	60b9      	str	r1, [r7, #8]
 8018fea:	4639      	mov	r1, r7
 8018fec:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018ff0:	f7fa fe7c 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8018ff4:	4604      	mov	r4, r0
 8018ff6:	6823      	ldr	r3, [r4, #0]
 8018ff8:	3368      	adds	r3, #104	; 0x68
 8018ffa:	681d      	ldr	r5, [r3, #0]
 8018ffc:	f7fa fe86 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019000:	4603      	mov	r3, r0
 8019002:	9300      	str	r3, [sp, #0]
 8019004:	f240 23ee 	movw	r3, #750	; 0x2ee
 8019008:	4a04      	ldr	r2, [pc, #16]	; (801901c <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801900a:	4905      	ldr	r1, [pc, #20]	; (8019020 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801900c:	4620      	mov	r0, r4
 801900e:	47a8      	blx	r5
    return *this;
 8019010:	68fb      	ldr	r3, [r7, #12]
}
 8019012:	4618      	mov	r0, r3
 8019014:	3710      	adds	r7, #16
 8019016:	46bd      	mov	sp, r7
 8019018:	bdb0      	pop	{r4, r5, r7, pc}
 801901a:	bf00      	nop
 801901c:	080256e8 	.word	0x080256e8
 8019020:	08025704 	.word	0x08025704

08019024 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8019024:	b5b0      	push	{r4, r5, r7, lr}
 8019026:	b086      	sub	sp, #24
 8019028:	af02      	add	r7, sp, #8
 801902a:	60f8      	str	r0, [r7, #12]
 801902c:	60b9      	str	r1, [r7, #8]
 801902e:	4639      	mov	r1, r7
 8019030:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019034:	f7fa fe5a 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8019038:	4604      	mov	r4, r0
 801903a:	6823      	ldr	r3, [r4, #0]
 801903c:	3368      	adds	r3, #104	; 0x68
 801903e:	681d      	ldr	r5, [r3, #0]
 8019040:	f7fa fe64 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019044:	4603      	mov	r3, r0
 8019046:	9300      	str	r3, [sp, #0]
 8019048:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801904c:	4a04      	ldr	r2, [pc, #16]	; (8019060 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801904e:	4905      	ldr	r1, [pc, #20]	; (8019064 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8019050:	4620      	mov	r0, r4
 8019052:	47a8      	blx	r5
    return *this;
 8019054:	68fb      	ldr	r3, [r7, #12]
}
 8019056:	4618      	mov	r0, r3
 8019058:	3710      	adds	r7, #16
 801905a:	46bd      	mov	sp, r7
 801905c:	bdb0      	pop	{r4, r5, r7, pc}
 801905e:	bf00      	nop
 8019060:	080256e8 	.word	0x080256e8
 8019064:	08025730 	.word	0x08025730

08019068 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8019068:	b590      	push	{r4, r7, lr}
 801906a:	b087      	sub	sp, #28
 801906c:	af00      	add	r7, sp, #0
 801906e:	60f8      	str	r0, [r7, #12]
 8019070:	60b9      	str	r1, [r7, #8]
 8019072:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8019076:	68b9      	ldr	r1, [r7, #8]
 8019078:	68f8      	ldr	r0, [r7, #12]
 801907a:	f7ff fe15 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	1d1c      	adds	r4, r3, #4
 8019082:	f107 0310 	add.w	r3, r7, #16
 8019086:	2106      	movs	r1, #6
 8019088:	ed97 0b00 	vldr	d0, [r7]
 801908c:	4618      	mov	r0, r3
 801908e:	f7f4 fac7 	bl	800d620 <_Z10StringFromdi>
 8019092:	f107 0310 	add.w	r3, r7, #16
 8019096:	4619      	mov	r1, r3
 8019098:	4620      	mov	r0, r4
 801909a:	f7f3 fe79 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801909e:	f107 0310 	add.w	r3, r7, #16
 80190a2:	4618      	mov	r0, r3
 80190a4:	f7f3 fdf7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 80190a8:	68fb      	ldr	r3, [r7, #12]
}
 80190aa:	4618      	mov	r0, r3
 80190ac:	371c      	adds	r7, #28
 80190ae:	46bd      	mov	sp, r7
 80190b0:	bd90      	pop	{r4, r7, pc}

080190b2 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 80190b2:	b590      	push	{r4, r7, lr}
 80190b4:	b087      	sub	sp, #28
 80190b6:	af00      	add	r7, sp, #0
 80190b8:	60f8      	str	r0, [r7, #12]
 80190ba:	60b9      	str	r1, [r7, #8]
 80190bc:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80190be:	68b9      	ldr	r1, [r7, #8]
 80190c0:	68f8      	ldr	r0, [r7, #12]
 80190c2:	f7ff fdf1 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	1d1c      	adds	r4, r3, #4
 80190ca:	f107 0310 	add.w	r3, r7, #16
 80190ce:	6879      	ldr	r1, [r7, #4]
 80190d0:	4618      	mov	r0, r3
 80190d2:	f7f4 f86d 	bl	800d1b0 <_Z10StringFromPKc>
 80190d6:	f107 0310 	add.w	r3, r7, #16
 80190da:	4619      	mov	r1, r3
 80190dc:	4620      	mov	r0, r4
 80190de:	f7f3 fe57 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 80190e2:	f107 0310 	add.w	r3, r7, #16
 80190e6:	4618      	mov	r0, r3
 80190e8:	f7f3 fdd5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 80190ec:	68fb      	ldr	r3, [r7, #12]
}
 80190ee:	4618      	mov	r0, r3
 80190f0:	371c      	adds	r7, #28
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bd90      	pop	{r4, r7, pc}

080190f6 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 80190f6:	b590      	push	{r4, r7, lr}
 80190f8:	b087      	sub	sp, #28
 80190fa:	af00      	add	r7, sp, #0
 80190fc:	60f8      	str	r0, [r7, #12]
 80190fe:	60b9      	str	r1, [r7, #8]
 8019100:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019102:	68b9      	ldr	r1, [r7, #8]
 8019104:	68f8      	ldr	r0, [r7, #12]
 8019106:	f7ff fdcf 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	1d1c      	adds	r4, r3, #4
 801910e:	f107 0310 	add.w	r3, r7, #16
 8019112:	6879      	ldr	r1, [r7, #4]
 8019114:	4618      	mov	r0, r3
 8019116:	f7f4 f8a9 	bl	800d26c <_Z10StringFromPKv>
 801911a:	f107 0310 	add.w	r3, r7, #16
 801911e:	4619      	mov	r1, r3
 8019120:	4620      	mov	r0, r4
 8019122:	f7f3 fe35 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8019126:	f107 0310 	add.w	r3, r7, #16
 801912a:	4618      	mov	r0, r3
 801912c:	f7f3 fdb3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8019130:	68fb      	ldr	r3, [r7, #12]
}
 8019132:	4618      	mov	r0, r3
 8019134:	371c      	adds	r7, #28
 8019136:	46bd      	mov	sp, r7
 8019138:	bd90      	pop	{r4, r7, pc}

0801913a <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801913a:	b590      	push	{r4, r7, lr}
 801913c:	b087      	sub	sp, #28
 801913e:	af00      	add	r7, sp, #0
 8019140:	60f8      	str	r0, [r7, #12]
 8019142:	60b9      	str	r1, [r7, #8]
 8019144:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019146:	68b9      	ldr	r1, [r7, #8]
 8019148:	68f8      	ldr	r0, [r7, #12]
 801914a:	f7ff fdad 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	1d1c      	adds	r4, r3, #4
 8019152:	f107 0310 	add.w	r3, r7, #16
 8019156:	6879      	ldr	r1, [r7, #4]
 8019158:	4618      	mov	r0, r3
 801915a:	f7f4 f887 	bl	800d26c <_Z10StringFromPKv>
 801915e:	f107 0310 	add.w	r3, r7, #16
 8019162:	4619      	mov	r1, r3
 8019164:	4620      	mov	r0, r4
 8019166:	f7f3 fe13 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801916a:	f107 0310 	add.w	r3, r7, #16
 801916e:	4618      	mov	r0, r3
 8019170:	f7f3 fd91 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8019174:	68fb      	ldr	r3, [r7, #12]
}
 8019176:	4618      	mov	r0, r3
 8019178:	371c      	adds	r7, #28
 801917a:	46bd      	mov	sp, r7
 801917c:	bd90      	pop	{r4, r7, pc}

0801917e <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801917e:	b590      	push	{r4, r7, lr}
 8019180:	b087      	sub	sp, #28
 8019182:	af00      	add	r7, sp, #0
 8019184:	60f8      	str	r0, [r7, #12]
 8019186:	60b9      	str	r1, [r7, #8]
 8019188:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801918a:	68b9      	ldr	r1, [r7, #8]
 801918c:	68f8      	ldr	r0, [r7, #12]
 801918e:	f7ff fd8b 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	1d1c      	adds	r4, r3, #4
 8019196:	f107 0310 	add.w	r3, r7, #16
 801919a:	6879      	ldr	r1, [r7, #4]
 801919c:	4618      	mov	r0, r3
 801919e:	f7f4 f88f 	bl	800d2c0 <_Z10StringFromPFvvE>
 80191a2:	f107 0310 	add.w	r3, r7, #16
 80191a6:	4619      	mov	r1, r3
 80191a8:	4620      	mov	r0, r4
 80191aa:	f7f3 fdf1 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 80191ae:	f107 0310 	add.w	r3, r7, #16
 80191b2:	4618      	mov	r0, r3
 80191b4:	f7f3 fd6f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 80191b8:	68fb      	ldr	r3, [r7, #12]
}
 80191ba:	4618      	mov	r0, r3
 80191bc:	371c      	adds	r7, #28
 80191be:	46bd      	mov	sp, r7
 80191c0:	bd90      	pop	{r4, r7, pc}

080191c2 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80191c2:	b590      	push	{r4, r7, lr}
 80191c4:	b087      	sub	sp, #28
 80191c6:	af00      	add	r7, sp, #0
 80191c8:	60f8      	str	r0, [r7, #12]
 80191ca:	60b9      	str	r1, [r7, #8]
 80191cc:	607a      	str	r2, [r7, #4]
 80191ce:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 80191d0:	68b9      	ldr	r1, [r7, #8]
 80191d2:	68f8      	ldr	r0, [r7, #12]
 80191d4:	f7ff fd68 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	1d1c      	adds	r4, r3, #4
 80191dc:	f107 0310 	add.w	r3, r7, #16
 80191e0:	683a      	ldr	r2, [r7, #0]
 80191e2:	6879      	ldr	r1, [r7, #4]
 80191e4:	4618      	mov	r0, r3
 80191e6:	f7f4 fbaf 	bl	800d948 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 80191ea:	f107 0310 	add.w	r3, r7, #16
 80191ee:	4619      	mov	r1, r3
 80191f0:	4620      	mov	r0, r4
 80191f2:	f7f3 fdcd 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 80191f6:	f107 0310 	add.w	r3, r7, #16
 80191fa:	4618      	mov	r0, r3
 80191fc:	f7f3 fd4b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8019200:	68fb      	ldr	r3, [r7, #12]
}
 8019202:	4618      	mov	r0, r3
 8019204:	371c      	adds	r7, #28
 8019206:	46bd      	mov	sp, r7
 8019208:	bd90      	pop	{r4, r7, pc}
	...

0801920c <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 801920c:	b590      	push	{r4, r7, lr}
 801920e:	b087      	sub	sp, #28
 8019210:	af00      	add	r7, sp, #0
 8019212:	60f8      	str	r0, [r7, #12]
 8019214:	60b9      	str	r1, [r7, #8]
 8019216:	607a      	str	r2, [r7, #4]
 8019218:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	3304      	adds	r3, #4
 801921e:	4913      	ldr	r1, [pc, #76]	; (801926c <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8019220:	4618      	mov	r0, r3
 8019222:	f7f3 fdc7 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	3304      	adds	r3, #4
 801922a:	68b9      	ldr	r1, [r7, #8]
 801922c:	4618      	mov	r0, r3
 801922e:	f7f3 fdaf 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8019232:	6879      	ldr	r1, [r7, #4]
 8019234:	68f8      	ldr	r0, [r7, #12]
 8019236:	f7ff fd37 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	1d1c      	adds	r4, r3, #4
 801923e:	f107 0310 	add.w	r3, r7, #16
 8019242:	6839      	ldr	r1, [r7, #0]
 8019244:	4618      	mov	r0, r3
 8019246:	f7f4 f811 	bl	800d26c <_Z10StringFromPKv>
 801924a:	f107 0310 	add.w	r3, r7, #16
 801924e:	4619      	mov	r1, r3
 8019250:	4620      	mov	r0, r4
 8019252:	f7f3 fd9d 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 8019256:	f107 0310 	add.w	r3, r7, #16
 801925a:	4618      	mov	r0, r3
 801925c:	f7f3 fd1b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8019260:	68fb      	ldr	r3, [r7, #12]
}
 8019262:	4618      	mov	r0, r3
 8019264:	371c      	adds	r7, #28
 8019266:	46bd      	mov	sp, r7
 8019268:	bd90      	pop	{r4, r7, pc}
 801926a:	bf00      	nop
 801926c:	080257fc 	.word	0x080257fc

08019270 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8019270:	b590      	push	{r4, r7, lr}
 8019272:	b087      	sub	sp, #28
 8019274:	af00      	add	r7, sp, #0
 8019276:	60f8      	str	r0, [r7, #12]
 8019278:	60b9      	str	r1, [r7, #8]
 801927a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801927c:	68b9      	ldr	r1, [r7, #8]
 801927e:	68f8      	ldr	r0, [r7, #12]
 8019280:	f7ff fd12 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	1d1c      	adds	r4, r3, #4
 8019288:	f107 0310 	add.w	r3, r7, #16
 801928c:	6879      	ldr	r1, [r7, #4]
 801928e:	4618      	mov	r0, r3
 8019290:	f7f3 ffec 	bl	800d26c <_Z10StringFromPKv>
 8019294:	f107 0310 	add.w	r3, r7, #16
 8019298:	4619      	mov	r1, r3
 801929a:	4620      	mov	r0, r4
 801929c:	f7f3 fd78 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 80192a0:	f107 0310 	add.w	r3, r7, #16
 80192a4:	4618      	mov	r0, r3
 80192a6:	f7f3 fcf6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 80192aa:	68fb      	ldr	r3, [r7, #12]
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	371c      	adds	r7, #28
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd90      	pop	{r4, r7, pc}

080192b4 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 80192b4:	b590      	push	{r4, r7, lr}
 80192b6:	b087      	sub	sp, #28
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	60f8      	str	r0, [r7, #12]
 80192bc:	60b9      	str	r1, [r7, #8]
 80192be:	607a      	str	r2, [r7, #4]
 80192c0:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	3304      	adds	r3, #4
 80192c6:	4913      	ldr	r1, [pc, #76]	; (8019314 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 80192c8:	4618      	mov	r0, r3
 80192ca:	f7f3 fd73 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	3304      	adds	r3, #4
 80192d2:	68b9      	ldr	r1, [r7, #8]
 80192d4:	4618      	mov	r0, r3
 80192d6:	f7f3 fd5b 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 80192da:	6879      	ldr	r1, [r7, #4]
 80192dc:	68f8      	ldr	r0, [r7, #12]
 80192de:	f7ff fce3 	bl	8018ca8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	1d1c      	adds	r4, r3, #4
 80192e6:	f107 0310 	add.w	r3, r7, #16
 80192ea:	6839      	ldr	r1, [r7, #0]
 80192ec:	4618      	mov	r0, r3
 80192ee:	f7f3 ffbd 	bl	800d26c <_Z10StringFromPKv>
 80192f2:	f107 0310 	add.w	r3, r7, #16
 80192f6:	4619      	mov	r1, r3
 80192f8:	4620      	mov	r0, r4
 80192fa:	f7f3 fd49 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 80192fe:	f107 0310 	add.w	r3, r7, #16
 8019302:	4618      	mov	r0, r3
 8019304:	f7f3 fcc7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 8019308:	68fb      	ldr	r3, [r7, #12]
}
 801930a:	4618      	mov	r0, r3
 801930c:	371c      	adds	r7, #28
 801930e:	46bd      	mov	sp, r7
 8019310:	bd90      	pop	{r4, r7, pc}
 8019312:	bf00      	nop
 8019314:	080257fc 	.word	0x080257fc

08019318 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8019318:	b480      	push	{r7}
 801931a:	b083      	sub	sp, #12
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
    return false;
 8019320:	2300      	movs	r3, #0
}
 8019322:	4618      	mov	r0, r3
 8019324:	370c      	adds	r7, #12
 8019326:	46bd      	mov	sp, r7
 8019328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932c:	4770      	bx	lr
	...

08019330 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b084      	sub	sp, #16
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
 8019338:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 801933a:	f107 0308 	add.w	r3, r7, #8
 801933e:	4909      	ldr	r1, [pc, #36]	; (8019364 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8019340:	4618      	mov	r0, r3
 8019342:	f7f3 f8f0 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8019346:	f107 0308 	add.w	r3, r7, #8
 801934a:	4619      	mov	r1, r3
 801934c:	6878      	ldr	r0, [r7, #4]
 801934e:	f003 fe0f 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019352:	f107 0308 	add.w	r3, r7, #8
 8019356:	4618      	mov	r0, r3
 8019358:	f7f3 fc9d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801935c:	6878      	ldr	r0, [r7, #4]
 801935e:	3710      	adds	r7, #16
 8019360:	46bd      	mov	sp, r7
 8019362:	bd80      	pop	{r7, pc}
 8019364:	080256d0 	.word	0x080256d0

08019368 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8019368:	b480      	push	{r7}
 801936a:	b083      	sub	sp, #12
 801936c:	af00      	add	r7, sp, #0
 801936e:	6078      	str	r0, [r7, #4]
    return 0;
 8019370:	2300      	movs	r3, #0
}
 8019372:	4618      	mov	r0, r3
 8019374:	370c      	adds	r7, #12
 8019376:	46bd      	mov	sp, r7
 8019378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937c:	4770      	bx	lr

0801937e <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 801937e:	b480      	push	{r7}
 8019380:	b083      	sub	sp, #12
 8019382:	af00      	add	r7, sp, #0
 8019384:	6078      	str	r0, [r7, #4]
    return 0;
 8019386:	2300      	movs	r3, #0
}
 8019388:	4618      	mov	r0, r3
 801938a:	370c      	adds	r7, #12
 801938c:	46bd      	mov	sp, r7
 801938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019392:	4770      	bx	lr

08019394 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8019394:	b480      	push	{r7}
 8019396:	b083      	sub	sp, #12
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
 801939c:	6039      	str	r1, [r7, #0]
    return 0;
 801939e:	2300      	movs	r3, #0
}
 80193a0:	4618      	mov	r0, r3
 80193a2:	370c      	adds	r7, #12
 80193a4:	46bd      	mov	sp, r7
 80193a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193aa:	4770      	bx	lr

080193ac <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 80193ac:	b480      	push	{r7}
 80193ae:	b083      	sub	sp, #12
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]
 80193b4:	6039      	str	r1, [r7, #0]
    return 0;
 80193b6:	2300      	movs	r3, #0
}
 80193b8:	4618      	mov	r0, r3
 80193ba:	370c      	adds	r7, #12
 80193bc:	46bd      	mov	sp, r7
 80193be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c2:	4770      	bx	lr

080193c4 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 80193c4:	b5b0      	push	{r4, r5, r7, lr}
 80193c6:	b084      	sub	sp, #16
 80193c8:	af02      	add	r7, sp, #8
 80193ca:	6078      	str	r0, [r7, #4]
 80193cc:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80193ce:	f7fa fc8d 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80193d2:	4604      	mov	r4, r0
 80193d4:	6823      	ldr	r3, [r4, #0]
 80193d6:	3368      	adds	r3, #104	; 0x68
 80193d8:	681d      	ldr	r5, [r3, #0]
 80193da:	f7fa fc97 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80193de:	4603      	mov	r3, r0
 80193e0:	9300      	str	r3, [sp, #0]
 80193e2:	f240 3375 	movw	r3, #885	; 0x375
 80193e6:	4a06      	ldr	r2, [pc, #24]	; (8019400 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 80193e8:	4906      	ldr	r1, [pc, #24]	; (8019404 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 80193ea:	4620      	mov	r0, r4
 80193ec:	47a8      	blx	r5
    return cpputest_longlong(0);
 80193ee:	2100      	movs	r1, #0
 80193f0:	6878      	ldr	r0, [r7, #4]
 80193f2:	f7f1 f8cf 	bl	800a594 <_ZN17cpputest_longlongC1Ei>
}
 80193f6:	6878      	ldr	r0, [r7, #4]
 80193f8:	3708      	adds	r7, #8
 80193fa:	46bd      	mov	sp, r7
 80193fc:	bdb0      	pop	{r4, r5, r7, pc}
 80193fe:	bf00      	nop
 8019400:	080256e8 	.word	0x080256e8
 8019404:	08025730 	.word	0x08025730

08019408 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8019408:	b5b0      	push	{r4, r5, r7, lr}
 801940a:	b084      	sub	sp, #16
 801940c:	af02      	add	r7, sp, #8
 801940e:	6078      	str	r0, [r7, #4]
 8019410:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8019412:	f7fa fc6b 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8019416:	4604      	mov	r4, r0
 8019418:	6823      	ldr	r3, [r4, #0]
 801941a:	3368      	adds	r3, #104	; 0x68
 801941c:	681d      	ldr	r5, [r3, #0]
 801941e:	f7fa fc75 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019422:	4603      	mov	r3, r0
 8019424:	9300      	str	r3, [sp, #0]
 8019426:	f240 337b 	movw	r3, #891	; 0x37b
 801942a:	4a06      	ldr	r2, [pc, #24]	; (8019444 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 801942c:	4906      	ldr	r1, [pc, #24]	; (8019448 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801942e:	4620      	mov	r0, r4
 8019430:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019432:	2100      	movs	r1, #0
 8019434:	6878      	ldr	r0, [r7, #4]
 8019436:	f7f1 f8b9 	bl	800a5ac <_ZN18cpputest_ulonglongC1Ei>
}
 801943a:	6878      	ldr	r0, [r7, #4]
 801943c:	3708      	adds	r7, #8
 801943e:	46bd      	mov	sp, r7
 8019440:	bdb0      	pop	{r4, r5, r7, pc}
 8019442:	bf00      	nop
 8019444:	080256e8 	.word	0x080256e8
 8019448:	08025704 	.word	0x08025704

0801944c <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 801944c:	b5b0      	push	{r4, r5, r7, lr}
 801944e:	b086      	sub	sp, #24
 8019450:	af02      	add	r7, sp, #8
 8019452:	60f8      	str	r0, [r7, #12]
 8019454:	60b9      	str	r1, [r7, #8]
 8019456:	4639      	mov	r1, r7
 8019458:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801945c:	f7fa fc46 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 8019460:	4604      	mov	r4, r0
 8019462:	6823      	ldr	r3, [r4, #0]
 8019464:	3368      	adds	r3, #104	; 0x68
 8019466:	681d      	ldr	r5, [r3, #0]
 8019468:	f7fa fc50 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801946c:	4603      	mov	r3, r0
 801946e:	9300      	str	r3, [sp, #0]
 8019470:	f240 3381 	movw	r3, #897	; 0x381
 8019474:	4a05      	ldr	r2, [pc, #20]	; (801948c <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8019476:	4906      	ldr	r1, [pc, #24]	; (8019490 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8019478:	4620      	mov	r0, r4
 801947a:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801947c:	2100      	movs	r1, #0
 801947e:	68f8      	ldr	r0, [r7, #12]
 8019480:	f7f1 f894 	bl	800a5ac <_ZN18cpputest_ulonglongC1Ei>
}
 8019484:	68f8      	ldr	r0, [r7, #12]
 8019486:	3710      	adds	r7, #16
 8019488:	46bd      	mov	sp, r7
 801948a:	bdb0      	pop	{r4, r5, r7, pc}
 801948c:	080256e8 	.word	0x080256e8
 8019490:	08025704 	.word	0x08025704

08019494 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8019494:	b5b0      	push	{r4, r5, r7, lr}
 8019496:	b086      	sub	sp, #24
 8019498:	af02      	add	r7, sp, #8
 801949a:	60f8      	str	r0, [r7, #12]
 801949c:	60b9      	str	r1, [r7, #8]
 801949e:	4639      	mov	r1, r7
 80194a0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80194a4:	f7fa fc22 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 80194a8:	4604      	mov	r4, r0
 80194aa:	6823      	ldr	r3, [r4, #0]
 80194ac:	3368      	adds	r3, #104	; 0x68
 80194ae:	681d      	ldr	r5, [r3, #0]
 80194b0:	f7fa fc2c 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80194b4:	4603      	mov	r3, r0
 80194b6:	9300      	str	r3, [sp, #0]
 80194b8:	f240 3387 	movw	r3, #903	; 0x387
 80194bc:	4a05      	ldr	r2, [pc, #20]	; (80194d4 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 80194be:	4906      	ldr	r1, [pc, #24]	; (80194d8 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80194c0:	4620      	mov	r0, r4
 80194c2:	47a8      	blx	r5
    return cpputest_longlong(0);
 80194c4:	2100      	movs	r1, #0
 80194c6:	68f8      	ldr	r0, [r7, #12]
 80194c8:	f7f1 f864 	bl	800a594 <_ZN17cpputest_longlongC1Ei>
}
 80194cc:	68f8      	ldr	r0, [r7, #12]
 80194ce:	3710      	adds	r7, #16
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bdb0      	pop	{r4, r5, r7, pc}
 80194d4:	080256e8 	.word	0x080256e8
 80194d8:	08025730 	.word	0x08025730

080194dc <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 80194dc:	b480      	push	{r7}
 80194de:	b083      	sub	sp, #12
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	6078      	str	r0, [r7, #4]
    return false;
 80194e4:	2300      	movs	r3, #0
}
 80194e6:	4618      	mov	r0, r3
 80194e8:	370c      	adds	r7, #12
 80194ea:	46bd      	mov	sp, r7
 80194ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f0:	4770      	bx	lr

080194f2 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 80194f2:	b480      	push	{r7}
 80194f4:	b083      	sub	sp, #12
 80194f6:	af00      	add	r7, sp, #0
 80194f8:	6078      	str	r0, [r7, #4]
 80194fa:	460b      	mov	r3, r1
 80194fc:	70fb      	strb	r3, [r7, #3]
    return false;
 80194fe:	2300      	movs	r3, #0
}
 8019500:	4618      	mov	r0, r3
 8019502:	370c      	adds	r7, #12
 8019504:	46bd      	mov	sp, r7
 8019506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801950a:	4770      	bx	lr

0801950c <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 801950c:	b480      	push	{r7}
 801950e:	b083      	sub	sp, #12
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
    return 0;
 8019514:	2300      	movs	r3, #0
}
 8019516:	4618      	mov	r0, r3
 8019518:	370c      	adds	r7, #12
 801951a:	46bd      	mov	sp, r7
 801951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019520:	4770      	bx	lr

08019522 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8019522:	b480      	push	{r7}
 8019524:	b083      	sub	sp, #12
 8019526:	af00      	add	r7, sp, #0
 8019528:	6078      	str	r0, [r7, #4]
    return 0.0;
 801952a:	f04f 0200 	mov.w	r2, #0
 801952e:	f04f 0300 	mov.w	r3, #0
 8019532:	ec43 2b17 	vmov	d7, r2, r3
}
 8019536:	eeb0 0a47 	vmov.f32	s0, s14
 801953a:	eef0 0a67 	vmov.f32	s1, s15
 801953e:	370c      	adds	r7, #12
 8019540:	46bd      	mov	sp, r7
 8019542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019546:	4770      	bx	lr

08019548 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b084      	sub	sp, #16
 801954c:	af00      	add	r7, sp, #0
 801954e:	60f8      	str	r0, [r7, #12]
 8019550:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	3398      	adds	r3, #152	; 0x98
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	68f8      	ldr	r0, [r7, #12]
 801955e:	4798      	blx	r3
 8019560:	eeb0 7a40 	vmov.f32	s14, s0
 8019564:	eef0 7a60 	vmov.f32	s15, s1
}
 8019568:	eeb0 0a47 	vmov.f32	s0, s14
 801956c:	eef0 0a67 	vmov.f32	s1, s15
 8019570:	3710      	adds	r7, #16
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}

08019576 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8019576:	b480      	push	{r7}
 8019578:	b083      	sub	sp, #12
 801957a:	af00      	add	r7, sp, #0
 801957c:	6078      	str	r0, [r7, #4]
    return 0;
 801957e:	2300      	movs	r3, #0
}
 8019580:	4618      	mov	r0, r3
 8019582:	370c      	adds	r7, #12
 8019584:	46bd      	mov	sp, r7
 8019586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801958a:	4770      	bx	lr

0801958c <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 801958c:	b480      	push	{r7}
 801958e:	b083      	sub	sp, #12
 8019590:	af00      	add	r7, sp, #0
 8019592:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019594:	2300      	movs	r3, #0
}
 8019596:	4618      	mov	r0, r3
 8019598:	370c      	adds	r7, #12
 801959a:	46bd      	mov	sp, r7
 801959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a0:	4770      	bx	lr

080195a2 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 80195a2:	b480      	push	{r7}
 80195a4:	b083      	sub	sp, #12
 80195a6:	af00      	add	r7, sp, #0
 80195a8:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 80195aa:	2300      	movs	r3, #0
}
 80195ac:	4618      	mov	r0, r3
 80195ae:	370c      	adds	r7, #12
 80195b0:	46bd      	mov	sp, r7
 80195b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b6:	4770      	bx	lr

080195b8 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 80195b8:	b480      	push	{r7}
 80195ba:	b083      	sub	sp, #12
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 80195c0:	2300      	movs	r3, #0
}
 80195c2:	4618      	mov	r0, r3
 80195c4:	370c      	adds	r7, #12
 80195c6:	46bd      	mov	sp, r7
 80195c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195cc:	4770      	bx	lr

080195ce <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 80195ce:	b580      	push	{r7, lr}
 80195d0:	b082      	sub	sp, #8
 80195d2:	af00      	add	r7, sp, #0
 80195d4:	6078      	str	r0, [r7, #4]
 80195d6:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	33a8      	adds	r3, #168	; 0xa8
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	6878      	ldr	r0, [r7, #4]
 80195e2:	4798      	blx	r3
 80195e4:	4603      	mov	r3, r0
}
 80195e6:	4618      	mov	r0, r3
 80195e8:	3708      	adds	r7, #8
 80195ea:	46bd      	mov	sp, r7
 80195ec:	bd80      	pop	{r7, pc}

080195ee <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 80195ee:	b580      	push	{r7, lr}
 80195f0:	b082      	sub	sp, #8
 80195f2:	af00      	add	r7, sp, #0
 80195f4:	6078      	str	r0, [r7, #4]
 80195f6:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	33a0      	adds	r3, #160	; 0xa0
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	6878      	ldr	r0, [r7, #4]
 8019602:	4798      	blx	r3
 8019604:	4603      	mov	r3, r0
}
 8019606:	4618      	mov	r0, r3
 8019608:	3708      	adds	r7, #8
 801960a:	46bd      	mov	sp, r7
 801960c:	bd80      	pop	{r7, pc}

0801960e <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801960e:	b580      	push	{r7, lr}
 8019610:	b082      	sub	sp, #8
 8019612:	af00      	add	r7, sp, #0
 8019614:	6078      	str	r0, [r7, #4]
 8019616:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	33b0      	adds	r3, #176	; 0xb0
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	6878      	ldr	r0, [r7, #4]
 8019622:	4798      	blx	r3
 8019624:	4603      	mov	r3, r0
}
 8019626:	4618      	mov	r0, r3
 8019628:	3708      	adds	r7, #8
 801962a:	46bd      	mov	sp, r7
 801962c:	bd80      	pop	{r7, pc}
	...

08019630 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8019630:	b480      	push	{r7}
 8019632:	b083      	sub	sp, #12
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
    return "";
 8019638:	4b03      	ldr	r3, [pc, #12]	; (8019648 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801963a:	4618      	mov	r0, r3
 801963c:	370c      	adds	r7, #12
 801963e:	46bd      	mov	sp, r7
 8019640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019644:	4770      	bx	lr
 8019646:	bf00      	nop
 8019648:	080256d0 	.word	0x080256d0

0801964c <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b082      	sub	sp, #8
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
 8019654:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	3394      	adds	r3, #148	; 0x94
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	6878      	ldr	r0, [r7, #4]
 8019660:	4798      	blx	r3
 8019662:	4603      	mov	r3, r0
}
 8019664:	4618      	mov	r0, r3
 8019666:	3708      	adds	r7, #8
 8019668:	46bd      	mov	sp, r7
 801966a:	bd80      	pop	{r7, pc}

0801966c <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 801966c:	b480      	push	{r7}
 801966e:	b083      	sub	sp, #12
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
 8019674:	6039      	str	r1, [r7, #0]
    return 0;
 8019676:	2300      	movs	r3, #0
}
 8019678:	4618      	mov	r0, r3
 801967a:	370c      	adds	r7, #12
 801967c:	46bd      	mov	sp, r7
 801967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019682:	4770      	bx	lr

08019684 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b082      	sub	sp, #8
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
 801968c:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	3388      	adds	r3, #136	; 0x88
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	6878      	ldr	r0, [r7, #4]
 8019698:	4798      	blx	r3
 801969a:	4603      	mov	r3, r0
}
 801969c:	4618      	mov	r0, r3
 801969e:	3708      	adds	r7, #8
 80196a0:	46bd      	mov	sp, r7
 80196a2:	bd80      	pop	{r7, pc}

080196a4 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 80196a4:	b590      	push	{r4, r7, lr}
 80196a6:	b085      	sub	sp, #20
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	6078      	str	r0, [r7, #4]
 80196ac:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	3304      	adds	r3, #4
 80196b2:	490e      	ldr	r1, [pc, #56]	; (80196ec <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 80196b4:	4618      	mov	r0, r3
 80196b6:	f7f3 fb7d 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	1d1c      	adds	r4, r3, #4
 80196be:	f107 0308 	add.w	r3, r7, #8
 80196c2:	6839      	ldr	r1, [r7, #0]
 80196c4:	4618      	mov	r0, r3
 80196c6:	f7f3 fdd1 	bl	800d26c <_Z10StringFromPKv>
 80196ca:	f107 0308 	add.w	r3, r7, #8
 80196ce:	4619      	mov	r1, r3
 80196d0:	4620      	mov	r0, r4
 80196d2:	f7f3 fb5d 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 80196d6:	f107 0308 	add.w	r3, r7, #8
 80196da:	4618      	mov	r0, r3
 80196dc:	f7f3 fadb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return *this;
 80196e0:	687b      	ldr	r3, [r7, #4]
}
 80196e2:	4618      	mov	r0, r3
 80196e4:	3714      	adds	r7, #20
 80196e6:	46bd      	mov	sp, r7
 80196e8:	bd90      	pop	{r4, r7, pc}
 80196ea:	bf00      	nop
 80196ec:	08025804 	.word	0x08025804

080196f0 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 80196f0:	b598      	push	{r3, r4, r7, lr}
 80196f2:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 80196f4:	4b09      	ldr	r3, [pc, #36]	; (801971c <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d10b      	bne.n	8019714 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 80196fc:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8019700:	4907      	ldr	r1, [pc, #28]	; (8019720 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8019702:	200c      	movs	r0, #12
 8019704:	f7f0 fb4c 	bl	8009da0 <_ZnwjPKci>
 8019708:	4604      	mov	r4, r0
 801970a:	4620      	mov	r0, r4
 801970c:	f7ff fa4c 	bl	8018ba8 <_ZN19MockActualCallTraceC1Ev>
 8019710:	4b02      	ldr	r3, [pc, #8]	; (801971c <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019712:	601c      	str	r4, [r3, #0]
    return *instance_;
 8019714:	4b01      	ldr	r3, [pc, #4]	; (801971c <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8019716:	681b      	ldr	r3, [r3, #0]
}
 8019718:	4618      	mov	r0, r3
 801971a:	bd98      	pop	{r3, r4, r7, pc}
 801971c:	20000e4c 	.word	0x20000e4c
 8019720:	080256e8 	.word	0x080256e8

08019724 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8019724:	b580      	push	{r7, lr}
 8019726:	af00      	add	r7, sp, #0
    delete instance_;
 8019728:	4b06      	ldr	r3, [pc, #24]	; (8019744 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d004      	beq.n	801973a <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8019730:	681a      	ldr	r2, [r3, #0]
 8019732:	3204      	adds	r2, #4
 8019734:	6812      	ldr	r2, [r2, #0]
 8019736:	4618      	mov	r0, r3
 8019738:	4790      	blx	r2
    instance_ = NULLPTR;
 801973a:	4b02      	ldr	r3, [pc, #8]	; (8019744 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801973c:	2200      	movs	r2, #0
 801973e:	601a      	str	r2, [r3, #0]
}
 8019740:	bf00      	nop
 8019742:	bd80      	pop	{r7, pc}
 8019744:	20000e4c 	.word	0x20000e4c

08019748 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 8019748:	b580      	push	{r7, lr}
 801974a:	b082      	sub	sp, #8
 801974c:	af00      	add	r7, sp, #0
 801974e:	6078      	str	r0, [r7, #4]
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	4618      	mov	r0, r3
 8019754:	f7fd fe9a 	bl	801748c <_ZN14MockActualCallC1Ev>
 8019758:	4a03      	ldr	r2, [pc, #12]	; (8019768 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	601a      	str	r2, [r3, #0]
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	4618      	mov	r0, r3
 8019762:	3708      	adds	r7, #8
 8019764:	46bd      	mov	sp, r7
 8019766:	bd80      	pop	{r7, pc}
 8019768:	080281ec 	.word	0x080281ec

0801976c <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 801976c:	b580      	push	{r7, lr}
 801976e:	af00      	add	r7, sp, #0
 8019770:	4801      	ldr	r0, [pc, #4]	; (8019778 <__tcf_0+0xc>)
 8019772:	f000 f831 	bl	80197d8 <_ZN21MockIgnoredActualCallD1Ev>
 8019776:	bd80      	pop	{r7, pc}
 8019778:	20000e50 	.word	0x20000e50

0801977c <_ZN21MockIgnoredActualCall8instanceEv>:
{
 801977c:	b580      	push	{r7, lr}
 801977e:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8019780:	4b12      	ldr	r3, [pc, #72]	; (80197cc <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8019782:	781b      	ldrb	r3, [r3, #0]
 8019784:	f3bf 8f5b 	dmb	ish
 8019788:	b2db      	uxtb	r3, r3
 801978a:	f003 0301 	and.w	r3, r3, #1
 801978e:	2b00      	cmp	r3, #0
 8019790:	bf0c      	ite	eq
 8019792:	2301      	moveq	r3, #1
 8019794:	2300      	movne	r3, #0
 8019796:	b2db      	uxtb	r3, r3
 8019798:	2b00      	cmp	r3, #0
 801979a:	d013      	beq.n	80197c4 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801979c:	480b      	ldr	r0, [pc, #44]	; (80197cc <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801979e:	f005 fd83 	bl	801f2a8 <__cxa_guard_acquire>
 80197a2:	4603      	mov	r3, r0
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	bf14      	ite	ne
 80197a8:	2301      	movne	r3, #1
 80197aa:	2300      	moveq	r3, #0
 80197ac:	b2db      	uxtb	r3, r3
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d008      	beq.n	80197c4 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 80197b2:	4807      	ldr	r0, [pc, #28]	; (80197d0 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 80197b4:	f7ff ffc8 	bl	8019748 <_ZN21MockIgnoredActualCallC1Ev>
 80197b8:	4804      	ldr	r0, [pc, #16]	; (80197cc <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 80197ba:	f005 fd81 	bl	801f2c0 <__cxa_guard_release>
 80197be:	4805      	ldr	r0, [pc, #20]	; (80197d4 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 80197c0:	f005 fda5 	bl	801f30e <atexit>
    return call;
 80197c4:	4b02      	ldr	r3, [pc, #8]	; (80197d0 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 80197c6:	4618      	mov	r0, r3
 80197c8:	bd80      	pop	{r7, pc}
 80197ca:	bf00      	nop
 80197cc:	20000e54 	.word	0x20000e54
 80197d0:	20000e50 	.word	0x20000e50
 80197d4:	0801976d 	.word	0x0801976d

080197d8 <_ZN21MockIgnoredActualCallD1Ev>:
 80197d8:	b580      	push	{r7, lr}
 80197da:	b082      	sub	sp, #8
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
 80197e0:	4a05      	ldr	r2, [pc, #20]	; (80197f8 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	601a      	str	r2, [r3, #0]
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	4618      	mov	r0, r3
 80197ea:	f7fd fe5f 	bl	80174ac <_ZN14MockActualCallD1Ev>
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	4618      	mov	r0, r3
 80197f2:	3708      	adds	r7, #8
 80197f4:	46bd      	mov	sp, r7
 80197f6:	bd80      	pop	{r7, pc}
 80197f8:	080281ec 	.word	0x080281ec

080197fc <_ZN21MockIgnoredActualCallD0Ev>:
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b082      	sub	sp, #8
 8019800:	af00      	add	r7, sp, #0
 8019802:	6078      	str	r0, [r7, #4]
 8019804:	6878      	ldr	r0, [r7, #4]
 8019806:	f7ff ffe7 	bl	80197d8 <_ZN21MockIgnoredActualCallD1Ev>
 801980a:	2104      	movs	r1, #4
 801980c:	6878      	ldr	r0, [r7, #4]
 801980e:	f7f0 fadb 	bl	8009dc8 <_ZdlPvj>
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	4618      	mov	r0, r3
 8019816:	3708      	adds	r7, #8
 8019818:	46bd      	mov	sp, r7
 801981a:	bd80      	pop	{r7, pc}

0801981c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 801981c:	b580      	push	{r7, lr}
 801981e:	b082      	sub	sp, #8
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
 8019824:	4a05      	ldr	r2, [pc, #20]	; (801983c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	601a      	str	r2, [r3, #0]
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	4618      	mov	r0, r3
 801982e:	f7f0 fefd 	bl	800a62c <_ZN11MockFailureD1Ev>
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	4618      	mov	r0, r3
 8019836:	3708      	adds	r7, #8
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}
 801983c:	080280e4 	.word	0x080280e4

08019840 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8019840:	b580      	push	{r7, lr}
 8019842:	b082      	sub	sp, #8
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	f7ff ffe7 	bl	801981c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801984e:	2134      	movs	r1, #52	; 0x34
 8019850:	6878      	ldr	r0, [r7, #4]
 8019852:	f7f0 fab9 	bl	8009dc8 <_ZdlPvj>
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	4618      	mov	r0, r3
 801985a:	3708      	adds	r7, #8
 801985c:	46bd      	mov	sp, r7
 801985e:	bd80      	pop	{r7, pc}

08019860 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 8019860:	b580      	push	{r7, lr}
 8019862:	b082      	sub	sp, #8
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
 8019868:	4a05      	ldr	r2, [pc, #20]	; (8019880 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	601a      	str	r2, [r3, #0]
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	4618      	mov	r0, r3
 8019872:	f7f0 fedb 	bl	800a62c <_ZN11MockFailureD1Ev>
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	4618      	mov	r0, r3
 801987a:	3708      	adds	r7, #8
 801987c:	46bd      	mov	sp, r7
 801987e:	bd80      	pop	{r7, pc}
 8019880:	080281c0 	.word	0x080281c0

08019884 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8019884:	b580      	push	{r7, lr}
 8019886:	b082      	sub	sp, #8
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
 801988c:	6878      	ldr	r0, [r7, #4]
 801988e:	f7ff ffe7 	bl	8019860 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8019892:	2134      	movs	r1, #52	; 0x34
 8019894:	6878      	ldr	r0, [r7, #4]
 8019896:	f7f0 fa97 	bl	8009dc8 <_ZdlPvj>
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	4618      	mov	r0, r3
 801989e:	3708      	adds	r7, #8
 80198a0:	46bd      	mov	sp, r7
 80198a2:	bd80      	pop	{r7, pc}

080198a4 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b082      	sub	sp, #8
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
 80198ac:	4a05      	ldr	r2, [pc, #20]	; (80198c4 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	601a      	str	r2, [r3, #0]
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	4618      	mov	r0, r3
 80198b6:	f7f0 feb9 	bl	800a62c <_ZN11MockFailureD1Ev>
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	4618      	mov	r0, r3
 80198be:	3708      	adds	r7, #8
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}
 80198c4:	08028194 	.word	0x08028194

080198c8 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 80198c8:	b580      	push	{r7, lr}
 80198ca:	b082      	sub	sp, #8
 80198cc:	af00      	add	r7, sp, #0
 80198ce:	6078      	str	r0, [r7, #4]
 80198d0:	6878      	ldr	r0, [r7, #4]
 80198d2:	f7ff ffe7 	bl	80198a4 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 80198d6:	2134      	movs	r1, #52	; 0x34
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	f7f0 fa75 	bl	8009dc8 <_ZdlPvj>
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	4618      	mov	r0, r3
 80198e2:	3708      	adds	r7, #8
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bd80      	pop	{r7, pc}

080198e8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b082      	sub	sp, #8
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	6078      	str	r0, [r7, #4]
 80198f0:	4a05      	ldr	r2, [pc, #20]	; (8019908 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	601a      	str	r2, [r3, #0]
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	4618      	mov	r0, r3
 80198fa:	f7f0 fe97 	bl	800a62c <_ZN11MockFailureD1Ev>
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	4618      	mov	r0, r3
 8019902:	3708      	adds	r7, #8
 8019904:	46bd      	mov	sp, r7
 8019906:	bd80      	pop	{r7, pc}
 8019908:	08028168 	.word	0x08028168

0801990c <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801990c:	b580      	push	{r7, lr}
 801990e:	b082      	sub	sp, #8
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f7ff ffe7 	bl	80198e8 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801991a:	2134      	movs	r1, #52	; 0x34
 801991c:	6878      	ldr	r0, [r7, #4]
 801991e:	f7f0 fa53 	bl	8009dc8 <_ZdlPvj>
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	4618      	mov	r0, r3
 8019926:	3708      	adds	r7, #8
 8019928:	46bd      	mov	sp, r7
 801992a:	bd80      	pop	{r7, pc}

0801992c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801992c:	b580      	push	{r7, lr}
 801992e:	b082      	sub	sp, #8
 8019930:	af00      	add	r7, sp, #0
 8019932:	6078      	str	r0, [r7, #4]
 8019934:	4a05      	ldr	r2, [pc, #20]	; (801994c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	601a      	str	r2, [r3, #0]
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	4618      	mov	r0, r3
 801993e:	f7f0 fe75 	bl	800a62c <_ZN11MockFailureD1Ev>
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	4618      	mov	r0, r3
 8019946:	3708      	adds	r7, #8
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}
 801994c:	08028110 	.word	0x08028110

08019950 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 8019950:	b580      	push	{r7, lr}
 8019952:	b082      	sub	sp, #8
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
 8019958:	6878      	ldr	r0, [r7, #4]
 801995a:	f7ff ffe7 	bl	801992c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801995e:	2134      	movs	r1, #52	; 0x34
 8019960:	6878      	ldr	r0, [r7, #4]
 8019962:	f7f0 fa31 	bl	8009dc8 <_ZdlPvj>
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	4618      	mov	r0, r3
 801996a:	3708      	adds	r7, #8
 801996c:	46bd      	mov	sp, r7
 801996e:	bd80      	pop	{r7, pc}

08019970 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 8019970:	b580      	push	{r7, lr}
 8019972:	b082      	sub	sp, #8
 8019974:	af00      	add	r7, sp, #0
 8019976:	6078      	str	r0, [r7, #4]
 8019978:	4a05      	ldr	r2, [pc, #20]	; (8019990 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	601a      	str	r2, [r3, #0]
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	4618      	mov	r0, r3
 8019982:	f7f0 fe53 	bl	800a62c <_ZN11MockFailureD1Ev>
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	4618      	mov	r0, r3
 801998a:	3708      	adds	r7, #8
 801998c:	46bd      	mov	sp, r7
 801998e:	bd80      	pop	{r7, pc}
 8019990:	0802813c 	.word	0x0802813c

08019994 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8019994:	b580      	push	{r7, lr}
 8019996:	b082      	sub	sp, #8
 8019998:	af00      	add	r7, sp, #0
 801999a:	6078      	str	r0, [r7, #4]
 801999c:	6878      	ldr	r0, [r7, #4]
 801999e:	f7ff ffe7 	bl	8019970 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 80199a2:	2134      	movs	r1, #52	; 0x34
 80199a4:	6878      	ldr	r0, [r7, #4]
 80199a6:	f7f0 fa0f 	bl	8009dc8 <_ZdlPvj>
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	4618      	mov	r0, r3
 80199ae:	3708      	adds	r7, #8
 80199b0:	46bd      	mov	sp, r7
 80199b2:	bd80      	pop	{r7, pc}

080199b4 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b082      	sub	sp, #8
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	6078      	str	r0, [r7, #4]
 80199bc:	4a05      	ldr	r2, [pc, #20]	; (80199d4 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	601a      	str	r2, [r3, #0]
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	4618      	mov	r0, r3
 80199c6:	f7f0 fe31 	bl	800a62c <_ZN11MockFailureD1Ev>
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	4618      	mov	r0, r3
 80199ce:	3708      	adds	r7, #8
 80199d0:	46bd      	mov	sp, r7
 80199d2:	bd80      	pop	{r7, pc}
 80199d4:	0802808c 	.word	0x0802808c

080199d8 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 80199d8:	b580      	push	{r7, lr}
 80199da:	b082      	sub	sp, #8
 80199dc:	af00      	add	r7, sp, #0
 80199de:	6078      	str	r0, [r7, #4]
 80199e0:	6878      	ldr	r0, [r7, #4]
 80199e2:	f7ff ffe7 	bl	80199b4 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 80199e6:	2134      	movs	r1, #52	; 0x34
 80199e8:	6878      	ldr	r0, [r7, #4]
 80199ea:	f7f0 f9ed 	bl	8009dc8 <_ZdlPvj>
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	4618      	mov	r0, r3
 80199f2:	3708      	adds	r7, #8
 80199f4:	46bd      	mov	sp, r7
 80199f6:	bd80      	pop	{r7, pc}

080199f8 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b082      	sub	sp, #8
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
 8019a00:	4a05      	ldr	r2, [pc, #20]	; (8019a18 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	601a      	str	r2, [r3, #0]
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	4618      	mov	r0, r3
 8019a0a:	f7f0 fe0f 	bl	800a62c <_ZN11MockFailureD1Ev>
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	4618      	mov	r0, r3
 8019a12:	3708      	adds	r7, #8
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}
 8019a18:	080280b8 	.word	0x080280b8

08019a1c <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b082      	sub	sp, #8
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
 8019a24:	6878      	ldr	r0, [r7, #4]
 8019a26:	f7ff ffe7 	bl	80199f8 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8019a2a:	2134      	movs	r1, #52	; 0x34
 8019a2c:	6878      	ldr	r0, [r7, #4]
 8019a2e:	f7f0 f9cb 	bl	8009dc8 <_ZdlPvj>
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	4618      	mov	r0, r3
 8019a36:	3708      	adds	r7, #8
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	bd80      	pop	{r7, pc}

08019a3c <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b082      	sub	sp, #8
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	6078      	str	r0, [r7, #4]
 8019a44:	6039      	str	r1, [r7, #0]
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	3310      	adds	r3, #16
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	683a      	ldr	r2, [r7, #0]
 8019a50:	6839      	ldr	r1, [r7, #0]
 8019a52:	6878      	ldr	r0, [r7, #4]
 8019a54:	4798      	blx	r3
 8019a56:	4603      	mov	r3, r0
 8019a58:	4618      	mov	r0, r3
 8019a5a:	3708      	adds	r7, #8
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	bd80      	pop	{r7, pc}

08019a60 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 8019a60:	b480      	push	{r7}
 8019a62:	b083      	sub	sp, #12
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
 8019a68:	6039      	str	r1, [r7, #0]
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	370c      	adds	r7, #12
 8019a70:	46bd      	mov	sp, r7
 8019a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a76:	4770      	bx	lr

08019a78 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 8019a78:	b480      	push	{r7}
 8019a7a:	b083      	sub	sp, #12
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	6078      	str	r0, [r7, #4]
 8019a80:	6039      	str	r1, [r7, #0]
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	4618      	mov	r0, r3
 8019a86:	370c      	adds	r7, #12
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8e:	4770      	bx	lr

08019a90 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8019a90:	b480      	push	{r7}
 8019a92:	b085      	sub	sp, #20
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	60f8      	str	r0, [r7, #12]
 8019a98:	60b9      	str	r1, [r7, #8]
 8019a9a:	607a      	str	r2, [r7, #4]
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	3714      	adds	r7, #20
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa8:	4770      	bx	lr

08019aaa <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8019aaa:	b480      	push	{r7}
 8019aac:	b085      	sub	sp, #20
 8019aae:	af00      	add	r7, sp, #0
 8019ab0:	60f8      	str	r0, [r7, #12]
 8019ab2:	60b9      	str	r1, [r7, #8]
 8019ab4:	4613      	mov	r3, r2
 8019ab6:	71fb      	strb	r3, [r7, #7]
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	4618      	mov	r0, r3
 8019abc:	3714      	adds	r7, #20
 8019abe:	46bd      	mov	sp, r7
 8019ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac4:	4770      	bx	lr

08019ac6 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8019ac6:	b480      	push	{r7}
 8019ac8:	b085      	sub	sp, #20
 8019aca:	af00      	add	r7, sp, #0
 8019acc:	60f8      	str	r0, [r7, #12]
 8019ace:	60b9      	str	r1, [r7, #8]
 8019ad0:	607a      	str	r2, [r7, #4]
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	3714      	adds	r7, #20
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ade:	4770      	bx	lr

08019ae0 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8019ae0:	b480      	push	{r7}
 8019ae2:	b085      	sub	sp, #20
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	60f8      	str	r0, [r7, #12]
 8019ae8:	60b9      	str	r1, [r7, #8]
 8019aea:	607a      	str	r2, [r7, #4]
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	4618      	mov	r0, r3
 8019af0:	3714      	adds	r7, #20
 8019af2:	46bd      	mov	sp, r7
 8019af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af8:	4770      	bx	lr

08019afa <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8019afa:	b480      	push	{r7}
 8019afc:	b085      	sub	sp, #20
 8019afe:	af00      	add	r7, sp, #0
 8019b00:	60f8      	str	r0, [r7, #12]
 8019b02:	60b9      	str	r1, [r7, #8]
 8019b04:	607a      	str	r2, [r7, #4]
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	4618      	mov	r0, r3
 8019b0a:	3714      	adds	r7, #20
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b12:	4770      	bx	lr

08019b14 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8019b14:	b480      	push	{r7}
 8019b16:	b085      	sub	sp, #20
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	60f8      	str	r0, [r7, #12]
 8019b1c:	60b9      	str	r1, [r7, #8]
 8019b1e:	607a      	str	r2, [r7, #4]
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	4618      	mov	r0, r3
 8019b24:	3714      	adds	r7, #20
 8019b26:	46bd      	mov	sp, r7
 8019b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b2c:	4770      	bx	lr

08019b2e <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8019b2e:	b480      	push	{r7}
 8019b30:	b085      	sub	sp, #20
 8019b32:	af00      	add	r7, sp, #0
 8019b34:	60f8      	str	r0, [r7, #12]
 8019b36:	60b9      	str	r1, [r7, #8]
 8019b38:	4639      	mov	r1, r7
 8019b3a:	e881 000c 	stmia.w	r1, {r2, r3}
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	4618      	mov	r0, r3
 8019b42:	3714      	adds	r7, #20
 8019b44:	46bd      	mov	sp, r7
 8019b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4a:	4770      	bx	lr

08019b4c <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8019b4c:	b480      	push	{r7}
 8019b4e:	b085      	sub	sp, #20
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	60f8      	str	r0, [r7, #12]
 8019b54:	60b9      	str	r1, [r7, #8]
 8019b56:	4639      	mov	r1, r7
 8019b58:	e881 000c 	stmia.w	r1, {r2, r3}
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	4618      	mov	r0, r3
 8019b60:	3714      	adds	r7, #20
 8019b62:	46bd      	mov	sp, r7
 8019b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b68:	4770      	bx	lr

08019b6a <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8019b6a:	b480      	push	{r7}
 8019b6c:	b085      	sub	sp, #20
 8019b6e:	af00      	add	r7, sp, #0
 8019b70:	60f8      	str	r0, [r7, #12]
 8019b72:	60b9      	str	r1, [r7, #8]
 8019b74:	ed87 0b00 	vstr	d0, [r7]
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	3714      	adds	r7, #20
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b84:	4770      	bx	lr

08019b86 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 8019b86:	b480      	push	{r7}
 8019b88:	b087      	sub	sp, #28
 8019b8a:	af00      	add	r7, sp, #0
 8019b8c:	6178      	str	r0, [r7, #20]
 8019b8e:	6139      	str	r1, [r7, #16]
 8019b90:	ed87 0b02 	vstr	d0, [r7, #8]
 8019b94:	ed87 1b00 	vstr	d1, [r7]
 8019b98:	697b      	ldr	r3, [r7, #20]
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	371c      	adds	r7, #28
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba4:	4770      	bx	lr

08019ba6 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8019ba6:	b480      	push	{r7}
 8019ba8:	b085      	sub	sp, #20
 8019baa:	af00      	add	r7, sp, #0
 8019bac:	60f8      	str	r0, [r7, #12]
 8019bae:	60b9      	str	r1, [r7, #8]
 8019bb0:	607a      	str	r2, [r7, #4]
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	3714      	adds	r7, #20
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bbe:	4770      	bx	lr

08019bc0 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8019bc0:	b480      	push	{r7}
 8019bc2:	b085      	sub	sp, #20
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	60f8      	str	r0, [r7, #12]
 8019bc8:	60b9      	str	r1, [r7, #8]
 8019bca:	607a      	str	r2, [r7, #4]
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	4618      	mov	r0, r3
 8019bd0:	3714      	adds	r7, #20
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd8:	4770      	bx	lr

08019bda <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8019bda:	b480      	push	{r7}
 8019bdc:	b085      	sub	sp, #20
 8019bde:	af00      	add	r7, sp, #0
 8019be0:	60f8      	str	r0, [r7, #12]
 8019be2:	60b9      	str	r1, [r7, #8]
 8019be4:	607a      	str	r2, [r7, #4]
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	4618      	mov	r0, r3
 8019bea:	3714      	adds	r7, #20
 8019bec:	46bd      	mov	sp, r7
 8019bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf2:	4770      	bx	lr

08019bf4 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8019bf4:	b480      	push	{r7}
 8019bf6:	b085      	sub	sp, #20
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	60f8      	str	r0, [r7, #12]
 8019bfc:	60b9      	str	r1, [r7, #8]
 8019bfe:	607a      	str	r2, [r7, #4]
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	4618      	mov	r0, r3
 8019c04:	3714      	adds	r7, #20
 8019c06:	46bd      	mov	sp, r7
 8019c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0c:	4770      	bx	lr

08019c0e <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8019c0e:	b480      	push	{r7}
 8019c10:	b085      	sub	sp, #20
 8019c12:	af00      	add	r7, sp, #0
 8019c14:	60f8      	str	r0, [r7, #12]
 8019c16:	60b9      	str	r1, [r7, #8]
 8019c18:	607a      	str	r2, [r7, #4]
 8019c1a:	603b      	str	r3, [r7, #0]
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	4618      	mov	r0, r3
 8019c20:	3714      	adds	r7, #20
 8019c22:	46bd      	mov	sp, r7
 8019c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c28:	4770      	bx	lr

08019c2a <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8019c2a:	b480      	push	{r7}
 8019c2c:	b085      	sub	sp, #20
 8019c2e:	af00      	add	r7, sp, #0
 8019c30:	60f8      	str	r0, [r7, #12]
 8019c32:	60b9      	str	r1, [r7, #8]
 8019c34:	607a      	str	r2, [r7, #4]
 8019c36:	603b      	str	r3, [r7, #0]
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	3714      	adds	r7, #20
 8019c3e:	46bd      	mov	sp, r7
 8019c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c44:	4770      	bx	lr

08019c46 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 8019c46:	b480      	push	{r7}
 8019c48:	b085      	sub	sp, #20
 8019c4a:	af00      	add	r7, sp, #0
 8019c4c:	60f8      	str	r0, [r7, #12]
 8019c4e:	60b9      	str	r1, [r7, #8]
 8019c50:	607a      	str	r2, [r7, #4]
 8019c52:	603b      	str	r3, [r7, #0]
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	4618      	mov	r0, r3
 8019c58:	3714      	adds	r7, #20
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c60:	4770      	bx	lr

08019c62 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8019c62:	b480      	push	{r7}
 8019c64:	b085      	sub	sp, #20
 8019c66:	af00      	add	r7, sp, #0
 8019c68:	60f8      	str	r0, [r7, #12]
 8019c6a:	60b9      	str	r1, [r7, #8]
 8019c6c:	607a      	str	r2, [r7, #4]
 8019c6e:	603b      	str	r3, [r7, #0]
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	4618      	mov	r0, r3
 8019c74:	3714      	adds	r7, #20
 8019c76:	46bd      	mov	sp, r7
 8019c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7c:	4770      	bx	lr

08019c7e <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8019c7e:	b480      	push	{r7}
 8019c80:	b083      	sub	sp, #12
 8019c82:	af00      	add	r7, sp, #0
 8019c84:	6078      	str	r0, [r7, #4]
 8019c86:	6039      	str	r1, [r7, #0]
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	370c      	adds	r7, #12
 8019c8e:	46bd      	mov	sp, r7
 8019c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c94:	4770      	bx	lr

08019c96 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 8019c96:	b480      	push	{r7}
 8019c98:	b083      	sub	sp, #12
 8019c9a:	af00      	add	r7, sp, #0
 8019c9c:	6078      	str	r0, [r7, #4]
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	4618      	mov	r0, r3
 8019ca2:	370c      	adds	r7, #12
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019caa:	4770      	bx	lr

08019cac <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8019cac:	b480      	push	{r7}
 8019cae:	b083      	sub	sp, #12
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
 8019cb4:	460b      	mov	r3, r1
 8019cb6:	70fb      	strb	r3, [r7, #3]
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	4618      	mov	r0, r3
 8019cbc:	370c      	adds	r7, #12
 8019cbe:	46bd      	mov	sp, r7
 8019cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cc4:	4770      	bx	lr

08019cc6 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 8019cc6:	b480      	push	{r7}
 8019cc8:	b083      	sub	sp, #12
 8019cca:	af00      	add	r7, sp, #0
 8019ccc:	6078      	str	r0, [r7, #4]
 8019cce:	6039      	str	r1, [r7, #0]
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	370c      	adds	r7, #12
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cdc:	4770      	bx	lr

08019cde <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8019cde:	b480      	push	{r7}
 8019ce0:	b083      	sub	sp, #12
 8019ce2:	af00      	add	r7, sp, #0
 8019ce4:	6078      	str	r0, [r7, #4]
 8019ce6:	6039      	str	r1, [r7, #0]
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	4618      	mov	r0, r3
 8019cec:	370c      	adds	r7, #12
 8019cee:	46bd      	mov	sp, r7
 8019cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf4:	4770      	bx	lr

08019cf6 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 8019cf6:	b480      	push	{r7}
 8019cf8:	b083      	sub	sp, #12
 8019cfa:	af00      	add	r7, sp, #0
 8019cfc:	6078      	str	r0, [r7, #4]
 8019cfe:	6039      	str	r1, [r7, #0]
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	4618      	mov	r0, r3
 8019d04:	370c      	adds	r7, #12
 8019d06:	46bd      	mov	sp, r7
 8019d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0c:	4770      	bx	lr

08019d0e <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 8019d0e:	b480      	push	{r7}
 8019d10:	b083      	sub	sp, #12
 8019d12:	af00      	add	r7, sp, #0
 8019d14:	6078      	str	r0, [r7, #4]
 8019d16:	6039      	str	r1, [r7, #0]
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	370c      	adds	r7, #12
 8019d1e:	46bd      	mov	sp, r7
 8019d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d24:	4770      	bx	lr

08019d26 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 8019d26:	b480      	push	{r7}
 8019d28:	b085      	sub	sp, #20
 8019d2a:	af00      	add	r7, sp, #0
 8019d2c:	60f8      	str	r0, [r7, #12]
 8019d2e:	1d3b      	adds	r3, r7, #4
 8019d30:	e883 0006 	stmia.w	r3, {r1, r2}
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	4618      	mov	r0, r3
 8019d38:	3714      	adds	r7, #20
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d40:	4770      	bx	lr

08019d42 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 8019d42:	b480      	push	{r7}
 8019d44:	b085      	sub	sp, #20
 8019d46:	af00      	add	r7, sp, #0
 8019d48:	60f8      	str	r0, [r7, #12]
 8019d4a:	1d3b      	adds	r3, r7, #4
 8019d4c:	e883 0006 	stmia.w	r3, {r1, r2}
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	4618      	mov	r0, r3
 8019d54:	3714      	adds	r7, #20
 8019d56:	46bd      	mov	sp, r7
 8019d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5c:	4770      	bx	lr

08019d5e <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 8019d5e:	b480      	push	{r7}
 8019d60:	b085      	sub	sp, #20
 8019d62:	af00      	add	r7, sp, #0
 8019d64:	60f8      	str	r0, [r7, #12]
 8019d66:	ed87 0b00 	vstr	d0, [r7]
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	3714      	adds	r7, #20
 8019d70:	46bd      	mov	sp, r7
 8019d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d76:	4770      	bx	lr

08019d78 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 8019d78:	b480      	push	{r7}
 8019d7a:	b083      	sub	sp, #12
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	6078      	str	r0, [r7, #4]
 8019d80:	6039      	str	r1, [r7, #0]
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	4618      	mov	r0, r3
 8019d86:	370c      	adds	r7, #12
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d8e:	4770      	bx	lr

08019d90 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8019d90:	b480      	push	{r7}
 8019d92:	b083      	sub	sp, #12
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
 8019d98:	6039      	str	r1, [r7, #0]
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	370c      	adds	r7, #12
 8019da0:	46bd      	mov	sp, r7
 8019da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019da6:	4770      	bx	lr

08019da8 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 8019da8:	b480      	push	{r7}
 8019daa:	b083      	sub	sp, #12
 8019dac:	af00      	add	r7, sp, #0
 8019dae:	6078      	str	r0, [r7, #4]
 8019db0:	6039      	str	r1, [r7, #0]
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	4618      	mov	r0, r3
 8019db6:	370c      	adds	r7, #12
 8019db8:	46bd      	mov	sp, r7
 8019dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dbe:	4770      	bx	lr

08019dc0 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8019dc0:	b480      	push	{r7}
 8019dc2:	b083      	sub	sp, #12
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
 8019dc8:	6039      	str	r1, [r7, #0]
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	4618      	mov	r0, r3
 8019dce:	370c      	adds	r7, #12
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd6:	4770      	bx	lr

08019dd8 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8019dd8:	b480      	push	{r7}
 8019dda:	b083      	sub	sp, #12
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
 8019de0:	6039      	str	r1, [r7, #0]
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	4618      	mov	r0, r3
 8019de6:	370c      	adds	r7, #12
 8019de8:	46bd      	mov	sp, r7
 8019dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dee:	4770      	bx	lr

08019df0 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8019df0:	b480      	push	{r7}
 8019df2:	b083      	sub	sp, #12
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
 8019df8:	4a04      	ldr	r2, [pc, #16]	; (8019e0c <_ZN16MockExpectedCallC1Ev+0x1c>)
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	601a      	str	r2, [r3, #0]
{
}
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	4618      	mov	r0, r3
 8019e02:	370c      	adds	r7, #12
 8019e04:	46bd      	mov	sp, r7
 8019e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0a:	4770      	bx	lr
 8019e0c:	08028790 	.word	0x08028790

08019e10 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 8019e10:	b480      	push	{r7}
 8019e12:	b083      	sub	sp, #12
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	6078      	str	r0, [r7, #4]
 8019e18:	4a04      	ldr	r2, [pc, #16]	; (8019e2c <_ZN16MockExpectedCallD1Ev+0x1c>)
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	601a      	str	r2, [r3, #0]
{
}
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	4618      	mov	r0, r3
 8019e22:	370c      	adds	r7, #12
 8019e24:	46bd      	mov	sp, r7
 8019e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e2a:	4770      	bx	lr
 8019e2c:	08028790 	.word	0x08028790

08019e30 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 8019e30:	b580      	push	{r7, lr}
 8019e32:	b082      	sub	sp, #8
 8019e34:	af00      	add	r7, sp, #0
 8019e36:	6078      	str	r0, [r7, #4]
 8019e38:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 8019e3a:	683b      	ldr	r3, [r7, #0]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	3358      	adds	r3, #88	; 0x58
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	687a      	ldr	r2, [r7, #4]
 8019e44:	6839      	ldr	r1, [r7, #0]
 8019e46:	4610      	mov	r0, r2
 8019e48:	4798      	blx	r3
}
 8019e4a:	6878      	ldr	r0, [r7, #4]
 8019e4c:	3708      	adds	r7, #8
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}

08019e52 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 8019e52:	b580      	push	{r7, lr}
 8019e54:	b082      	sub	sp, #8
 8019e56:	af00      	add	r7, sp, #0
 8019e58:	6078      	str	r0, [r7, #4]
 8019e5a:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	3304      	adds	r3, #4
 8019e60:	6839      	ldr	r1, [r7, #0]
 8019e62:	4618      	mov	r0, r3
 8019e64:	f7f2 fbcb 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
}
 8019e68:	bf00      	nop
 8019e6a:	3708      	adds	r7, #8
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}

08019e70 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b082      	sub	sp, #8
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
 8019e78:	6039      	str	r1, [r7, #0]
    return functionName_;
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	3304      	adds	r3, #4
 8019e7e:	4619      	mov	r1, r3
 8019e80:	6878      	ldr	r0, [r7, #4]
 8019e82:	f7f2 fba4 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
}
 8019e86:	6878      	ldr	r0, [r7, #4]
 8019e88:	3708      	adds	r7, #8
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	bd80      	pop	{r7, pc}
	...

08019e90 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8019e90:	b590      	push	{r4, r7, lr}
 8019e92:	b085      	sub	sp, #20
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
 8019e98:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f7ff ffa7 	bl	8019df0 <_ZN16MockExpectedCallC1Ev>
 8019ea2:	4a2c      	ldr	r2, [pc, #176]	; (8019f54 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	601a      	str	r2, [r3, #0]
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	3304      	adds	r3, #4
 8019eac:	492a      	ldr	r1, [pc, #168]	; (8019f58 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8019eae:	4618      	mov	r0, r3
 8019eb0:	f7f2 fb39 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	731a      	strb	r2, [r3, #12]
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	735a      	strb	r2, [r3, #13]
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	611a      	str	r2, [r3, #16]
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2200      	movs	r2, #0
 8019eca:	615a      	str	r2, [r3, #20]
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2200      	movs	r2, #0
 8019ed0:	761a      	strb	r2, [r3, #24]
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8019ed8:	f107 0308 	add.w	r3, r7, #8
 8019edc:	491e      	ldr	r1, [pc, #120]	; (8019f58 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f7f2 fb21 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 8019ee4:	f107 0308 	add.w	r3, r7, #8
 8019ee8:	4619      	mov	r1, r3
 8019eea:	4620      	mov	r0, r4
 8019eec:	f003 f840 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019ef0:	f107 0308 	add.w	r3, r7, #8
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f7f2 fece 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	2200      	movs	r2, #0
 8019efe:	661a      	str	r2, [r3, #96]	; 0x60
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	2200      	movs	r2, #0
 8019f04:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	2201      	movs	r2, #1
 8019f0c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	2200      	movs	r2, #0
 8019f14:	669a      	str	r2, [r3, #104]	; 0x68
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	683a      	ldr	r2, [r7, #0]
 8019f1a:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 8019f1c:	2246      	movs	r2, #70	; 0x46
 8019f1e:	490f      	ldr	r1, [pc, #60]	; (8019f5c <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8019f20:	2004      	movs	r0, #4
 8019f22:	f7ef ff3d 	bl	8009da0 <_ZnwjPKci>
 8019f26:	4604      	mov	r4, r0
 8019f28:	4620      	mov	r0, r4
 8019f2a:	f004 ff36 	bl	801ed9a <_ZN18MockNamedValueListC1Ev>
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 8019f32:	2247      	movs	r2, #71	; 0x47
 8019f34:	4909      	ldr	r1, [pc, #36]	; (8019f5c <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8019f36:	2004      	movs	r0, #4
 8019f38:	f7ef ff32 	bl	8009da0 <_ZnwjPKci>
 8019f3c:	4604      	mov	r4, r0
 8019f3e:	4620      	mov	r0, r4
 8019f40:	f004 ff2b 	bl	801ed9a <_ZN18MockNamedValueListC1Ev>
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	621c      	str	r4, [r3, #32]
}
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	3714      	adds	r7, #20
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	bd90      	pop	{r4, r7, pc}
 8019f52:	bf00      	nop
 8019f54:	080285d4 	.word	0x080285d4
 8019f58:	08025810 	.word	0x08025810
 8019f5c:	08025814 	.word	0x08025814

08019f60 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b082      	sub	sp, #8
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
 8019f68:	4a17      	ldr	r2, [pc, #92]	; (8019fc8 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	69db      	ldr	r3, [r3, #28]
 8019f72:	4618      	mov	r0, r3
 8019f74:	f004 ff1f 	bl	801edb6 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	69db      	ldr	r3, [r3, #28]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d003      	beq.n	8019f88 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8019f80:	2104      	movs	r1, #4
 8019f82:	4618      	mov	r0, r3
 8019f84:	f7ef ff20 	bl	8009dc8 <_ZdlPvj>
    outputParameters_->clear();
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	6a1b      	ldr	r3, [r3, #32]
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	f004 ff12 	bl	801edb6 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	6a1b      	ldr	r3, [r3, #32]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d003      	beq.n	8019fa2 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 8019f9a:	2104      	movs	r1, #4
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f7ef ff13 	bl	8009dc8 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	3328      	adds	r3, #40	; 0x28
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f003 f80c 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	3304      	adds	r3, #4
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	f7f2 fe70 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f7ff ff29 	bl	8019e10 <_ZN16MockExpectedCallD1Ev>
}
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	3708      	adds	r7, #8
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	bd80      	pop	{r7, pc}
 8019fc8:	080285d4 	.word	0x080285d4

08019fcc <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b082      	sub	sp, #8
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
}
 8019fd4:	6878      	ldr	r0, [r7, #4]
 8019fd6:	f7ff ffc3 	bl	8019f60 <_ZN23MockCheckedExpectedCallD1Ev>
 8019fda:	2170      	movs	r1, #112	; 0x70
 8019fdc:	6878      	ldr	r0, [r7, #4]
 8019fde:	f7ef fef3 	bl	8009dc8 <_ZdlPvj>
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	3708      	adds	r7, #8
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}

08019fec <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b082      	sub	sp, #8
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
 8019ff4:	6039      	str	r1, [r7, #0]
    setName(name);
 8019ff6:	6839      	ldr	r1, [r7, #0]
 8019ff8:	6878      	ldr	r0, [r7, #4]
 8019ffa:	f7ff ff2a 	bl	8019e52 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8019ffe:	687b      	ldr	r3, [r7, #4]
}
 801a000:	4618      	mov	r0, r3
 801a002:	3708      	adds	r7, #8
 801a004:	46bd      	mov	sp, r7
 801a006:	bd80      	pop	{r7, pc}

0801a008 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801a008:	b590      	push	{r4, r7, lr}
 801a00a:	b087      	sub	sp, #28
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	60f8      	str	r0, [r7, #12]
 801a010:	60b9      	str	r1, [r7, #8]
 801a012:	4613      	mov	r3, r2
 801a014:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a016:	225a      	movs	r2, #90	; 0x5a
 801a018:	490e      	ldr	r1, [pc, #56]	; (801a054 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801a01a:	2038      	movs	r0, #56	; 0x38
 801a01c:	f7ef fec0 	bl	8009da0 <_ZnwjPKci>
 801a020:	4604      	mov	r4, r0
 801a022:	68b9      	ldr	r1, [r7, #8]
 801a024:	4620      	mov	r0, r4
 801a026:	f001 f851 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a02a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	69db      	ldr	r3, [r3, #28]
 801a030:	6979      	ldr	r1, [r7, #20]
 801a032:	4618      	mov	r0, r3
 801a034:	f004 fee2 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a038:	697b      	ldr	r3, [r7, #20]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	3308      	adds	r3, #8
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	79fa      	ldrb	r2, [r7, #7]
 801a042:	4611      	mov	r1, r2
 801a044:	6978      	ldr	r0, [r7, #20]
 801a046:	4798      	blx	r3
    return *this;
 801a048:	68fb      	ldr	r3, [r7, #12]
}
 801a04a:	4618      	mov	r0, r3
 801a04c:	371c      	adds	r7, #28
 801a04e:	46bd      	mov	sp, r7
 801a050:	bd90      	pop	{r4, r7, pc}
 801a052:	bf00      	nop
 801a054:	08025814 	.word	0x08025814

0801a058 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801a058:	b590      	push	{r4, r7, lr}
 801a05a:	b087      	sub	sp, #28
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	60f8      	str	r0, [r7, #12]
 801a060:	60b9      	str	r1, [r7, #8]
 801a062:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a064:	2262      	movs	r2, #98	; 0x62
 801a066:	490e      	ldr	r1, [pc, #56]	; (801a0a0 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801a068:	2038      	movs	r0, #56	; 0x38
 801a06a:	f7ef fe99 	bl	8009da0 <_ZnwjPKci>
 801a06e:	4604      	mov	r4, r0
 801a070:	68b9      	ldr	r1, [r7, #8]
 801a072:	4620      	mov	r0, r4
 801a074:	f001 f82a 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a078:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	69db      	ldr	r3, [r3, #28]
 801a07e:	6979      	ldr	r1, [r7, #20]
 801a080:	4618      	mov	r0, r3
 801a082:	f004 febb 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	3310      	adds	r3, #16
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	6879      	ldr	r1, [r7, #4]
 801a090:	6978      	ldr	r0, [r7, #20]
 801a092:	4798      	blx	r3
    return *this;
 801a094:	68fb      	ldr	r3, [r7, #12]
}
 801a096:	4618      	mov	r0, r3
 801a098:	371c      	adds	r7, #28
 801a09a:	46bd      	mov	sp, r7
 801a09c:	bd90      	pop	{r4, r7, pc}
 801a09e:	bf00      	nop
 801a0a0:	08025814 	.word	0x08025814

0801a0a4 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801a0a4:	b590      	push	{r4, r7, lr}
 801a0a6:	b087      	sub	sp, #28
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	60f8      	str	r0, [r7, #12]
 801a0ac:	60b9      	str	r1, [r7, #8]
 801a0ae:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a0b0:	226a      	movs	r2, #106	; 0x6a
 801a0b2:	490e      	ldr	r1, [pc, #56]	; (801a0ec <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801a0b4:	2038      	movs	r0, #56	; 0x38
 801a0b6:	f7ef fe73 	bl	8009da0 <_ZnwjPKci>
 801a0ba:	4604      	mov	r4, r0
 801a0bc:	68b9      	ldr	r1, [r7, #8]
 801a0be:	4620      	mov	r0, r4
 801a0c0:	f001 f804 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a0c4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	69db      	ldr	r3, [r3, #28]
 801a0ca:	6979      	ldr	r1, [r7, #20]
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	f004 fe95 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a0d2:	697b      	ldr	r3, [r7, #20]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	330c      	adds	r3, #12
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	6879      	ldr	r1, [r7, #4]
 801a0dc:	6978      	ldr	r0, [r7, #20]
 801a0de:	4798      	blx	r3
    return *this;
 801a0e0:	68fb      	ldr	r3, [r7, #12]
}
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	371c      	adds	r7, #28
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	bd90      	pop	{r4, r7, pc}
 801a0ea:	bf00      	nop
 801a0ec:	08025814 	.word	0x08025814

0801a0f0 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801a0f0:	b590      	push	{r4, r7, lr}
 801a0f2:	b087      	sub	sp, #28
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	60f8      	str	r0, [r7, #12]
 801a0f8:	60b9      	str	r1, [r7, #8]
 801a0fa:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a0fc:	2272      	movs	r2, #114	; 0x72
 801a0fe:	490e      	ldr	r1, [pc, #56]	; (801a138 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801a100:	2038      	movs	r0, #56	; 0x38
 801a102:	f7ef fe4d 	bl	8009da0 <_ZnwjPKci>
 801a106:	4604      	mov	r4, r0
 801a108:	68b9      	ldr	r1, [r7, #8]
 801a10a:	4620      	mov	r0, r4
 801a10c:	f000 ffde 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a110:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	69db      	ldr	r3, [r3, #28]
 801a116:	6979      	ldr	r1, [r7, #20]
 801a118:	4618      	mov	r0, r3
 801a11a:	f004 fe6f 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a11e:	697b      	ldr	r3, [r7, #20]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	3314      	adds	r3, #20
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	6879      	ldr	r1, [r7, #4]
 801a128:	6978      	ldr	r0, [r7, #20]
 801a12a:	4798      	blx	r3
    return *this;
 801a12c:	68fb      	ldr	r3, [r7, #12]
}
 801a12e:	4618      	mov	r0, r3
 801a130:	371c      	adds	r7, #28
 801a132:	46bd      	mov	sp, r7
 801a134:	bd90      	pop	{r4, r7, pc}
 801a136:	bf00      	nop
 801a138:	08025814 	.word	0x08025814

0801a13c <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801a13c:	b590      	push	{r4, r7, lr}
 801a13e:	b087      	sub	sp, #28
 801a140:	af00      	add	r7, sp, #0
 801a142:	60f8      	str	r0, [r7, #12]
 801a144:	60b9      	str	r1, [r7, #8]
 801a146:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a148:	227a      	movs	r2, #122	; 0x7a
 801a14a:	490e      	ldr	r1, [pc, #56]	; (801a184 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801a14c:	2038      	movs	r0, #56	; 0x38
 801a14e:	f7ef fe27 	bl	8009da0 <_ZnwjPKci>
 801a152:	4604      	mov	r4, r0
 801a154:	68b9      	ldr	r1, [r7, #8]
 801a156:	4620      	mov	r0, r4
 801a158:	f000 ffb8 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a15c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	69db      	ldr	r3, [r3, #28]
 801a162:	6979      	ldr	r1, [r7, #20]
 801a164:	4618      	mov	r0, r3
 801a166:	f004 fe49 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a16a:	697b      	ldr	r3, [r7, #20]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	3318      	adds	r3, #24
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	6879      	ldr	r1, [r7, #4]
 801a174:	6978      	ldr	r0, [r7, #20]
 801a176:	4798      	blx	r3
    return *this;
 801a178:	68fb      	ldr	r3, [r7, #12]
}
 801a17a:	4618      	mov	r0, r3
 801a17c:	371c      	adds	r7, #28
 801a17e:	46bd      	mov	sp, r7
 801a180:	bd90      	pop	{r4, r7, pc}
 801a182:	bf00      	nop
 801a184:	08025814 	.word	0x08025814

0801a188 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a188:	b5b0      	push	{r4, r5, r7, lr}
 801a18a:	b086      	sub	sp, #24
 801a18c:	af02      	add	r7, sp, #8
 801a18e:	60f8      	str	r0, [r7, #12]
 801a190:	60b9      	str	r1, [r7, #8]
 801a192:	4639      	mov	r1, r7
 801a194:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a198:	f7f9 fda8 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801a19c:	4604      	mov	r4, r0
 801a19e:	6823      	ldr	r3, [r4, #0]
 801a1a0:	3368      	adds	r3, #104	; 0x68
 801a1a2:	681d      	ldr	r5, [r3, #0]
 801a1a4:	f7f9 fdb2 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	9300      	str	r3, [sp, #0]
 801a1ac:	2396      	movs	r3, #150	; 0x96
 801a1ae:	4a04      	ldr	r2, [pc, #16]	; (801a1c0 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801a1b0:	4904      	ldr	r1, [pc, #16]	; (801a1c4 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a1b2:	4620      	mov	r0, r4
 801a1b4:	47a8      	blx	r5
    return *this;
 801a1b6:	68fb      	ldr	r3, [r7, #12]
}
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	3710      	adds	r7, #16
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bdb0      	pop	{r4, r5, r7, pc}
 801a1c0:	08025814 	.word	0x08025814
 801a1c4:	08025830 	.word	0x08025830

0801a1c8 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a1c8:	b5b0      	push	{r4, r5, r7, lr}
 801a1ca:	b086      	sub	sp, #24
 801a1cc:	af02      	add	r7, sp, #8
 801a1ce:	60f8      	str	r0, [r7, #12]
 801a1d0:	60b9      	str	r1, [r7, #8]
 801a1d2:	4639      	mov	r1, r7
 801a1d4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a1d8:	f7f9 fd88 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801a1dc:	4604      	mov	r4, r0
 801a1de:	6823      	ldr	r3, [r4, #0]
 801a1e0:	3368      	adds	r3, #104	; 0x68
 801a1e2:	681d      	ldr	r5, [r3, #0]
 801a1e4:	f7f9 fd92 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	9300      	str	r3, [sp, #0]
 801a1ec:	239c      	movs	r3, #156	; 0x9c
 801a1ee:	4a04      	ldr	r2, [pc, #16]	; (801a200 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801a1f0:	4904      	ldr	r1, [pc, #16]	; (801a204 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a1f2:	4620      	mov	r0, r4
 801a1f4:	47a8      	blx	r5
    return *this;
 801a1f6:	68fb      	ldr	r3, [r7, #12]
}
 801a1f8:	4618      	mov	r0, r3
 801a1fa:	3710      	adds	r7, #16
 801a1fc:	46bd      	mov	sp, r7
 801a1fe:	bdb0      	pop	{r4, r5, r7, pc}
 801a200:	08025814 	.word	0x08025814
 801a204:	08025850 	.word	0x08025850

0801a208 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801a208:	b590      	push	{r4, r7, lr}
 801a20a:	b087      	sub	sp, #28
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	60f8      	str	r0, [r7, #12]
 801a210:	60b9      	str	r1, [r7, #8]
 801a212:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a216:	22a4      	movs	r2, #164	; 0xa4
 801a218:	490e      	ldr	r1, [pc, #56]	; (801a254 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801a21a:	2038      	movs	r0, #56	; 0x38
 801a21c:	f7ef fdc0 	bl	8009da0 <_ZnwjPKci>
 801a220:	4604      	mov	r4, r0
 801a222:	68b9      	ldr	r1, [r7, #8]
 801a224:	4620      	mov	r0, r4
 801a226:	f000 ff51 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a22a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	69db      	ldr	r3, [r3, #28]
 801a230:	6979      	ldr	r1, [r7, #20]
 801a232:	4618      	mov	r0, r3
 801a234:	f004 fde2 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a238:	697b      	ldr	r3, [r7, #20]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	3324      	adds	r3, #36	; 0x24
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	ed97 0b00 	vldr	d0, [r7]
 801a244:	6978      	ldr	r0, [r7, #20]
 801a246:	4798      	blx	r3
    return *this;
 801a248:	68fb      	ldr	r3, [r7, #12]
}
 801a24a:	4618      	mov	r0, r3
 801a24c:	371c      	adds	r7, #28
 801a24e:	46bd      	mov	sp, r7
 801a250:	bd90      	pop	{r4, r7, pc}
 801a252:	bf00      	nop
 801a254:	08025814 	.word	0x08025814

0801a258 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801a258:	b590      	push	{r4, r7, lr}
 801a25a:	b089      	sub	sp, #36	; 0x24
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	6178      	str	r0, [r7, #20]
 801a260:	6139      	str	r1, [r7, #16]
 801a262:	ed87 0b02 	vstr	d0, [r7, #8]
 801a266:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a26a:	22ac      	movs	r2, #172	; 0xac
 801a26c:	490f      	ldr	r1, [pc, #60]	; (801a2ac <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801a26e:	2038      	movs	r0, #56	; 0x38
 801a270:	f7ef fd96 	bl	8009da0 <_ZnwjPKci>
 801a274:	4604      	mov	r4, r0
 801a276:	6939      	ldr	r1, [r7, #16]
 801a278:	4620      	mov	r0, r4
 801a27a:	f000 ff27 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a27e:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801a280:	697b      	ldr	r3, [r7, #20]
 801a282:	69db      	ldr	r3, [r3, #28]
 801a284:	69f9      	ldr	r1, [r7, #28]
 801a286:	4618      	mov	r0, r3
 801a288:	f004 fdb8 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801a28c:	69fb      	ldr	r3, [r7, #28]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	3328      	adds	r3, #40	; 0x28
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	ed97 1b00 	vldr	d1, [r7]
 801a298:	ed97 0b02 	vldr	d0, [r7, #8]
 801a29c:	69f8      	ldr	r0, [r7, #28]
 801a29e:	4798      	blx	r3
    return *this;
 801a2a0:	697b      	ldr	r3, [r7, #20]
}
 801a2a2:	4618      	mov	r0, r3
 801a2a4:	3724      	adds	r7, #36	; 0x24
 801a2a6:	46bd      	mov	sp, r7
 801a2a8:	bd90      	pop	{r4, r7, pc}
 801a2aa:	bf00      	nop
 801a2ac:	08025814 	.word	0x08025814

0801a2b0 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801a2b0:	b590      	push	{r4, r7, lr}
 801a2b2:	b087      	sub	sp, #28
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	60f8      	str	r0, [r7, #12]
 801a2b8:	60b9      	str	r1, [r7, #8]
 801a2ba:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a2bc:	22b4      	movs	r2, #180	; 0xb4
 801a2be:	490e      	ldr	r1, [pc, #56]	; (801a2f8 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801a2c0:	2038      	movs	r0, #56	; 0x38
 801a2c2:	f7ef fd6d 	bl	8009da0 <_ZnwjPKci>
 801a2c6:	4604      	mov	r4, r0
 801a2c8:	68b9      	ldr	r1, [r7, #8]
 801a2ca:	4620      	mov	r0, r4
 801a2cc:	f000 fefe 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a2d0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	69db      	ldr	r3, [r3, #28]
 801a2d6:	6979      	ldr	r1, [r7, #20]
 801a2d8:	4618      	mov	r0, r3
 801a2da:	f004 fd8f 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a2de:	697b      	ldr	r3, [r7, #20]
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	3338      	adds	r3, #56	; 0x38
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	6879      	ldr	r1, [r7, #4]
 801a2e8:	6978      	ldr	r0, [r7, #20]
 801a2ea:	4798      	blx	r3
    return *this;
 801a2ec:	68fb      	ldr	r3, [r7, #12]
}
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	371c      	adds	r7, #28
 801a2f2:	46bd      	mov	sp, r7
 801a2f4:	bd90      	pop	{r4, r7, pc}
 801a2f6:	bf00      	nop
 801a2f8:	08025814 	.word	0x08025814

0801a2fc <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801a2fc:	b590      	push	{r4, r7, lr}
 801a2fe:	b087      	sub	sp, #28
 801a300:	af00      	add	r7, sp, #0
 801a302:	60f8      	str	r0, [r7, #12]
 801a304:	60b9      	str	r1, [r7, #8]
 801a306:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a308:	22bc      	movs	r2, #188	; 0xbc
 801a30a:	490e      	ldr	r1, [pc, #56]	; (801a344 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801a30c:	2038      	movs	r0, #56	; 0x38
 801a30e:	f7ef fd47 	bl	8009da0 <_ZnwjPKci>
 801a312:	4604      	mov	r4, r0
 801a314:	68b9      	ldr	r1, [r7, #8]
 801a316:	4620      	mov	r0, r4
 801a318:	f000 fed8 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a31c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	69db      	ldr	r3, [r3, #28]
 801a322:	6979      	ldr	r1, [r7, #20]
 801a324:	4618      	mov	r0, r3
 801a326:	f004 fd69 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a32a:	697b      	ldr	r3, [r7, #20]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	332c      	adds	r3, #44	; 0x2c
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	6879      	ldr	r1, [r7, #4]
 801a334:	6978      	ldr	r0, [r7, #20]
 801a336:	4798      	blx	r3
    return *this;
 801a338:	68fb      	ldr	r3, [r7, #12]
}
 801a33a:	4618      	mov	r0, r3
 801a33c:	371c      	adds	r7, #28
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd90      	pop	{r4, r7, pc}
 801a342:	bf00      	nop
 801a344:	08025814 	.word	0x08025814

0801a348 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801a348:	b590      	push	{r4, r7, lr}
 801a34a:	b087      	sub	sp, #28
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	60f8      	str	r0, [r7, #12]
 801a350:	60b9      	str	r1, [r7, #8]
 801a352:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a354:	22c4      	movs	r2, #196	; 0xc4
 801a356:	490e      	ldr	r1, [pc, #56]	; (801a390 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801a358:	2038      	movs	r0, #56	; 0x38
 801a35a:	f7ef fd21 	bl	8009da0 <_ZnwjPKci>
 801a35e:	4604      	mov	r4, r0
 801a360:	68b9      	ldr	r1, [r7, #8]
 801a362:	4620      	mov	r0, r4
 801a364:	f000 feb2 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a368:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	69db      	ldr	r3, [r3, #28]
 801a36e:	6979      	ldr	r1, [r7, #20]
 801a370:	4618      	mov	r0, r3
 801a372:	f004 fd43 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a376:	697b      	ldr	r3, [r7, #20]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	3330      	adds	r3, #48	; 0x30
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	6879      	ldr	r1, [r7, #4]
 801a380:	6978      	ldr	r0, [r7, #20]
 801a382:	4798      	blx	r3
    return *this;
 801a384:	68fb      	ldr	r3, [r7, #12]
}
 801a386:	4618      	mov	r0, r3
 801a388:	371c      	adds	r7, #28
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bd90      	pop	{r4, r7, pc}
 801a38e:	bf00      	nop
 801a390:	08025814 	.word	0x08025814

0801a394 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801a394:	b590      	push	{r4, r7, lr}
 801a396:	b087      	sub	sp, #28
 801a398:	af00      	add	r7, sp, #0
 801a39a:	60f8      	str	r0, [r7, #12]
 801a39c:	60b9      	str	r1, [r7, #8]
 801a39e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a3a0:	22cc      	movs	r2, #204	; 0xcc
 801a3a2:	490e      	ldr	r1, [pc, #56]	; (801a3dc <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801a3a4:	2038      	movs	r0, #56	; 0x38
 801a3a6:	f7ef fcfb 	bl	8009da0 <_ZnwjPKci>
 801a3aa:	4604      	mov	r4, r0
 801a3ac:	68b9      	ldr	r1, [r7, #8]
 801a3ae:	4620      	mov	r0, r4
 801a3b0:	f000 fe8c 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a3b4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	69db      	ldr	r3, [r3, #28]
 801a3ba:	6979      	ldr	r1, [r7, #20]
 801a3bc:	4618      	mov	r0, r3
 801a3be:	f004 fd1d 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a3c2:	697b      	ldr	r3, [r7, #20]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	3334      	adds	r3, #52	; 0x34
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	6879      	ldr	r1, [r7, #4]
 801a3cc:	6978      	ldr	r0, [r7, #20]
 801a3ce:	4798      	blx	r3
    return *this;
 801a3d0:	68fb      	ldr	r3, [r7, #12]
}
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	371c      	adds	r7, #28
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bd90      	pop	{r4, r7, pc}
 801a3da:	bf00      	nop
 801a3dc:	08025814 	.word	0x08025814

0801a3e0 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801a3e0:	b590      	push	{r4, r7, lr}
 801a3e2:	b087      	sub	sp, #28
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	60f8      	str	r0, [r7, #12]
 801a3e8:	60b9      	str	r1, [r7, #8]
 801a3ea:	607a      	str	r2, [r7, #4]
 801a3ec:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a3ee:	22d4      	movs	r2, #212	; 0xd4
 801a3f0:	490e      	ldr	r1, [pc, #56]	; (801a42c <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801a3f2:	2038      	movs	r0, #56	; 0x38
 801a3f4:	f7ef fcd4 	bl	8009da0 <_ZnwjPKci>
 801a3f8:	4604      	mov	r4, r0
 801a3fa:	68b9      	ldr	r1, [r7, #8]
 801a3fc:	4620      	mov	r0, r4
 801a3fe:	f000 fe65 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a402:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	69db      	ldr	r3, [r3, #28]
 801a408:	6979      	ldr	r1, [r7, #20]
 801a40a:	4618      	mov	r0, r3
 801a40c:	f004 fcf6 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801a410:	697b      	ldr	r3, [r7, #20]
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	333c      	adds	r3, #60	; 0x3c
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	683a      	ldr	r2, [r7, #0]
 801a41a:	6879      	ldr	r1, [r7, #4]
 801a41c:	6978      	ldr	r0, [r7, #20]
 801a41e:	4798      	blx	r3
    return *this;
 801a420:	68fb      	ldr	r3, [r7, #12]
}
 801a422:	4618      	mov	r0, r3
 801a424:	371c      	adds	r7, #28
 801a426:	46bd      	mov	sp, r7
 801a428:	bd90      	pop	{r4, r7, pc}
 801a42a:	bf00      	nop
 801a42c:	08025814 	.word	0x08025814

0801a430 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801a430:	b590      	push	{r4, r7, lr}
 801a432:	b087      	sub	sp, #28
 801a434:	af00      	add	r7, sp, #0
 801a436:	60f8      	str	r0, [r7, #12]
 801a438:	60b9      	str	r1, [r7, #8]
 801a43a:	607a      	str	r2, [r7, #4]
 801a43c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a43e:	22dc      	movs	r2, #220	; 0xdc
 801a440:	490e      	ldr	r1, [pc, #56]	; (801a47c <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801a442:	2038      	movs	r0, #56	; 0x38
 801a444:	f7ef fcac 	bl	8009da0 <_ZnwjPKci>
 801a448:	4604      	mov	r4, r0
 801a44a:	6879      	ldr	r1, [r7, #4]
 801a44c:	4620      	mov	r0, r4
 801a44e:	f000 fe3d 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a452:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	69db      	ldr	r3, [r3, #28]
 801a458:	6979      	ldr	r1, [r7, #20]
 801a45a:	4618      	mov	r0, r3
 801a45c:	f004 fcce 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801a460:	697b      	ldr	r3, [r7, #20]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	3340      	adds	r3, #64	; 0x40
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	683a      	ldr	r2, [r7, #0]
 801a46a:	68b9      	ldr	r1, [r7, #8]
 801a46c:	6978      	ldr	r0, [r7, #20]
 801a46e:	4798      	blx	r3
    return *this;
 801a470:	68fb      	ldr	r3, [r7, #12]
}
 801a472:	4618      	mov	r0, r3
 801a474:	371c      	adds	r7, #28
 801a476:	46bd      	mov	sp, r7
 801a478:	bd90      	pop	{r4, r7, pc}
 801a47a:	bf00      	nop
 801a47c:	08025814 	.word	0x08025814

0801a480 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801a480:	b590      	push	{r4, r7, lr}
 801a482:	b087      	sub	sp, #28
 801a484:	af00      	add	r7, sp, #0
 801a486:	60f8      	str	r0, [r7, #12]
 801a488:	60b9      	str	r1, [r7, #8]
 801a48a:	607a      	str	r2, [r7, #4]
 801a48c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a48e:	22e4      	movs	r2, #228	; 0xe4
 801a490:	4911      	ldr	r1, [pc, #68]	; (801a4d8 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801a492:	2038      	movs	r0, #56	; 0x38
 801a494:	f7ef fc84 	bl	8009da0 <_ZnwjPKci>
 801a498:	4604      	mov	r4, r0
 801a49a:	68b9      	ldr	r1, [r7, #8]
 801a49c:	4620      	mov	r0, r4
 801a49e:	f000 fe15 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a4a2:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	6a1b      	ldr	r3, [r3, #32]
 801a4a8:	6979      	ldr	r1, [r7, #20]
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	f004 fca6 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801a4b0:	697b      	ldr	r3, [r7, #20]
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	3330      	adds	r3, #48	; 0x30
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	6879      	ldr	r1, [r7, #4]
 801a4ba:	6978      	ldr	r0, [r7, #20]
 801a4bc:	4798      	blx	r3
    newParameter->setSize(size);
 801a4be:	697b      	ldr	r3, [r7, #20]
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	3348      	adds	r3, #72	; 0x48
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	6839      	ldr	r1, [r7, #0]
 801a4c8:	6978      	ldr	r0, [r7, #20]
 801a4ca:	4798      	blx	r3
    return *this;
 801a4cc:	68fb      	ldr	r3, [r7, #12]
}
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	371c      	adds	r7, #28
 801a4d2:	46bd      	mov	sp, r7
 801a4d4:	bd90      	pop	{r4, r7, pc}
 801a4d6:	bf00      	nop
 801a4d8:	08025814 	.word	0x08025814

0801a4dc <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801a4dc:	b590      	push	{r4, r7, lr}
 801a4de:	b087      	sub	sp, #28
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	60f8      	str	r0, [r7, #12]
 801a4e4:	60b9      	str	r1, [r7, #8]
 801a4e6:	607a      	str	r2, [r7, #4]
 801a4e8:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801a4ea:	22ed      	movs	r2, #237	; 0xed
 801a4ec:	490e      	ldr	r1, [pc, #56]	; (801a528 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801a4ee:	2038      	movs	r0, #56	; 0x38
 801a4f0:	f7ef fc56 	bl	8009da0 <_ZnwjPKci>
 801a4f4:	4604      	mov	r4, r0
 801a4f6:	6879      	ldr	r1, [r7, #4]
 801a4f8:	4620      	mov	r0, r4
 801a4fa:	f000 fde7 	bl	801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801a4fe:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	6a1b      	ldr	r3, [r3, #32]
 801a504:	6979      	ldr	r1, [r7, #20]
 801a506:	4618      	mov	r0, r3
 801a508:	f004 fc78 	bl	801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801a50c:	697b      	ldr	r3, [r7, #20]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	3340      	adds	r3, #64	; 0x40
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	683a      	ldr	r2, [r7, #0]
 801a516:	68b9      	ldr	r1, [r7, #8]
 801a518:	6978      	ldr	r0, [r7, #20]
 801a51a:	4798      	blx	r3
    return *this;
 801a51c:	68fb      	ldr	r3, [r7, #12]
}
 801a51e:	4618      	mov	r0, r3
 801a520:	371c      	adds	r7, #28
 801a522:	46bd      	mov	sp, r7
 801a524:	bd90      	pop	{r4, r7, pc}
 801a526:	bf00      	nop
 801a528:	08025814 	.word	0x08025814

0801a52c <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801a52c:	b590      	push	{r4, r7, lr}
 801a52e:	b083      	sub	sp, #12
 801a530:	af00      	add	r7, sp, #0
 801a532:	6078      	str	r0, [r7, #4]
 801a534:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	3318      	adds	r3, #24
 801a53c:	681c      	ldr	r4, [r3, #0]
 801a53e:	2300      	movs	r3, #0
 801a540:	2200      	movs	r2, #0
 801a542:	6839      	ldr	r1, [r7, #0]
 801a544:	6878      	ldr	r0, [r7, #4]
 801a546:	47a0      	blx	r4
 801a548:	4603      	mov	r3, r0
}
 801a54a:	4618      	mov	r0, r3
 801a54c:	370c      	adds	r7, #12
 801a54e:	46bd      	mov	sp, r7
 801a550:	bd90      	pop	{r4, r7, pc}
	...

0801a554 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801a554:	b580      	push	{r7, lr}
 801a556:	b086      	sub	sp, #24
 801a558:	af00      	add	r7, sp, #0
 801a55a:	60f8      	str	r0, [r7, #12]
 801a55c:	60b9      	str	r1, [r7, #8]
 801a55e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	69db      	ldr	r3, [r3, #28]
 801a564:	6879      	ldr	r1, [r7, #4]
 801a566:	4618      	mov	r0, r3
 801a568:	f004 fc7e 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a56c:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801a56e:	697b      	ldr	r3, [r7, #20]
 801a570:	2b00      	cmp	r3, #0
 801a572:	d008      	beq.n	801a586 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801a574:	697b      	ldr	r3, [r7, #20]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	3360      	adds	r3, #96	; 0x60
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	68fa      	ldr	r2, [r7, #12]
 801a57e:	6979      	ldr	r1, [r7, #20]
 801a580:	4610      	mov	r0, r2
 801a582:	4798      	blx	r3
 801a584:	e004      	b.n	801a590 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	4903      	ldr	r1, [pc, #12]	; (801a598 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801a58a:	4618      	mov	r0, r3
 801a58c:	f7f2 fe10 	bl	800d1b0 <_Z10StringFromPKc>
}
 801a590:	68f8      	ldr	r0, [r7, #12]
 801a592:	3718      	adds	r7, #24
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}
 801a598:	08025810 	.word	0x08025810

0801a59c <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b084      	sub	sp, #16
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
 801a5a4:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	69db      	ldr	r3, [r3, #28]
 801a5aa:	6839      	ldr	r1, [r7, #0]
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f004 fc5b 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a5b2:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	bf14      	ite	ne
 801a5ba:	2301      	movne	r3, #1
 801a5bc:	2300      	moveq	r3, #0
 801a5be:	b2db      	uxtb	r3, r3
}
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	3710      	adds	r7, #16
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}

0801a5c8 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b084      	sub	sp, #16
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
 801a5d0:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	6a1b      	ldr	r3, [r3, #32]
 801a5d6:	6839      	ldr	r1, [r7, #0]
 801a5d8:	4618      	mov	r0, r3
 801a5da:	f004 fc45 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a5de:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	bf14      	ite	ne
 801a5e6:	2301      	movne	r3, #1
 801a5e8:	2300      	moveq	r3, #0
 801a5ea:	b2db      	uxtb	r3, r3
}
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	3710      	adds	r7, #16
 801a5f0:	46bd      	mov	sp, r7
 801a5f2:	bd80      	pop	{r7, pc}

0801a5f4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801a5f4:	b590      	push	{r4, r7, lr}
 801a5f6:	b089      	sub	sp, #36	; 0x24
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	60f8      	str	r0, [r7, #12]
 801a5fc:	60b9      	str	r1, [r7, #8]
 801a5fe:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a600:	68bb      	ldr	r3, [r7, #8]
 801a602:	69db      	ldr	r3, [r3, #28]
 801a604:	6879      	ldr	r1, [r7, #4]
 801a606:	4618      	mov	r0, r3
 801a608:	f004 fc2e 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a60c:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801a60e:	2400      	movs	r4, #0
 801a610:	69fb      	ldr	r3, [r7, #28]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d004      	beq.n	801a620 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801a616:	69f9      	ldr	r1, [r7, #28]
 801a618:	68f8      	ldr	r0, [r7, #12]
 801a61a:	f7f0 f829 	bl	800a670 <_ZN14MockNamedValueC1ERKS_>
 801a61e:	e00c      	b.n	801a63a <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801a620:	f107 0314 	add.w	r3, r7, #20
 801a624:	490a      	ldr	r1, [pc, #40]	; (801a650 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801a626:	4618      	mov	r0, r3
 801a628:	f7f1 ff7d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801a62c:	2401      	movs	r4, #1
 801a62e:	f107 0314 	add.w	r3, r7, #20
 801a632:	4619      	mov	r1, r3
 801a634:	68f8      	ldr	r0, [r7, #12]
 801a636:	f002 fc9b 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a63a:	2c00      	cmp	r4, #0
 801a63c:	d004      	beq.n	801a648 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801a63e:	f107 0314 	add.w	r3, r7, #20
 801a642:	4618      	mov	r0, r3
 801a644:	f7f2 fb27 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801a648:	68f8      	ldr	r0, [r7, #12]
 801a64a:	3724      	adds	r7, #36	; 0x24
 801a64c:	46bd      	mov	sp, r7
 801a64e:	bd90      	pop	{r4, r7, pc}
 801a650:	08025810 	.word	0x08025810

0801a654 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801a654:	b590      	push	{r4, r7, lr}
 801a656:	b089      	sub	sp, #36	; 0x24
 801a658:	af00      	add	r7, sp, #0
 801a65a:	60f8      	str	r0, [r7, #12]
 801a65c:	60b9      	str	r1, [r7, #8]
 801a65e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801a660:	68bb      	ldr	r3, [r7, #8]
 801a662:	6a1b      	ldr	r3, [r3, #32]
 801a664:	6879      	ldr	r1, [r7, #4]
 801a666:	4618      	mov	r0, r3
 801a668:	f004 fbfe 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801a66c:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801a66e:	2400      	movs	r4, #0
 801a670:	69fb      	ldr	r3, [r7, #28]
 801a672:	2b00      	cmp	r3, #0
 801a674:	d004      	beq.n	801a680 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801a676:	69f9      	ldr	r1, [r7, #28]
 801a678:	68f8      	ldr	r0, [r7, #12]
 801a67a:	f7ef fff9 	bl	800a670 <_ZN14MockNamedValueC1ERKS_>
 801a67e:	e00c      	b.n	801a69a <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801a680:	f107 0314 	add.w	r3, r7, #20
 801a684:	490a      	ldr	r1, [pc, #40]	; (801a6b0 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801a686:	4618      	mov	r0, r3
 801a688:	f7f1 ff4d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801a68c:	2401      	movs	r4, #1
 801a68e:	f107 0314 	add.w	r3, r7, #20
 801a692:	4619      	mov	r1, r3
 801a694:	68f8      	ldr	r0, [r7, #12]
 801a696:	f002 fc6b 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a69a:	2c00      	cmp	r4, #0
 801a69c:	d004      	beq.n	801a6a8 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801a69e:	f107 0314 	add.w	r3, r7, #20
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	f7f2 faf7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801a6a8:	68f8      	ldr	r0, [r7, #12]
 801a6aa:	3724      	adds	r7, #36	; 0x24
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	bd90      	pop	{r4, r7, pc}
 801a6b0:	08025810 	.word	0x08025810

0801a6b4 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	b084      	sub	sp, #16
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	69db      	ldr	r3, [r3, #28]
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	f004 fc00 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801a6c6:	60f8      	str	r0, [r7, #12]
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d014      	beq.n	801a6f8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801a6ce:	68f9      	ldr	r1, [r7, #12]
 801a6d0:	6878      	ldr	r0, [r7, #4]
 801a6d2:	f000 fced 	bl	801b0b0 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	4618      	mov	r0, r3
 801a6da:	f000 fd1f 	bl	801b11c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801a6de:	4603      	mov	r3, r0
 801a6e0:	f083 0301 	eor.w	r3, r3, #1
 801a6e4:	b2db      	uxtb	r3, r3
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d001      	beq.n	801a6ee <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	e023      	b.n	801a736 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801a6ee:	68f8      	ldr	r0, [r7, #12]
 801a6f0:	f004 faf2 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801a6f4:	60f8      	str	r0, [r7, #12]
 801a6f6:	e7e7      	b.n	801a6c8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	6a1b      	ldr	r3, [r3, #32]
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	f004 fbe2 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801a702:	60f8      	str	r0, [r7, #12]
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d014      	beq.n	801a734 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801a70a:	68f9      	ldr	r1, [r7, #12]
 801a70c:	6878      	ldr	r0, [r7, #4]
 801a70e:	f000 fccf 	bl	801b0b0 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a712:	4603      	mov	r3, r0
 801a714:	4618      	mov	r0, r3
 801a716:	f000 fd01 	bl	801b11c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801a71a:	4603      	mov	r3, r0
 801a71c:	f083 0301 	eor.w	r3, r3, #1
 801a720:	b2db      	uxtb	r3, r3
 801a722:	2b00      	cmp	r3, #0
 801a724:	d001      	beq.n	801a72a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801a726:	2300      	movs	r3, #0
 801a728:	e005      	b.n	801a736 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a72a:	68f8      	ldr	r0, [r7, #12]
 801a72c:	f004 fad4 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801a730:	60f8      	str	r0, [r7, #12]
 801a732:	e7e7      	b.n	801a704 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801a734:	2301      	movs	r3, #1
}
 801a736:	4618      	mov	r0, r3
 801a738:	3710      	adds	r7, #16
 801a73a:	46bd      	mov	sp, r7
 801a73c:	bd80      	pop	{r7, pc}

0801a73e <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801a73e:	b480      	push	{r7}
 801a740:	b083      	sub	sp, #12
 801a742:	af00      	add	r7, sp, #0
 801a744:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	2201      	movs	r2, #1
 801a74a:	731a      	strb	r2, [r3, #12]
    return *this;
 801a74c:	687b      	ldr	r3, [r7, #4]
}
 801a74e:	4618      	mov	r0, r3
 801a750:	370c      	adds	r7, #12
 801a752:	46bd      	mov	sp, r7
 801a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a758:	4770      	bx	lr

0801a75a <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801a75a:	b480      	push	{r7}
 801a75c:	b083      	sub	sp, #12
 801a75e:	af00      	add	r7, sp, #0
 801a760:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a76a:	429a      	cmp	r2, r3
 801a76c:	bf0c      	ite	eq
 801a76e:	2301      	moveq	r3, #1
 801a770:	2300      	movne	r3, #0
 801a772:	b2db      	uxtb	r3, r3
}
 801a774:	4618      	mov	r0, r3
 801a776:	370c      	adds	r7, #12
 801a778:	46bd      	mov	sp, r7
 801a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a77e:	4770      	bx	lr

0801a780 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801a780:	b480      	push	{r7}
 801a782:	b083      	sub	sp, #12
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a790:	429a      	cmp	r2, r3
 801a792:	bf34      	ite	cc
 801a794:	2301      	movcc	r3, #1
 801a796:	2300      	movcs	r3, #0
 801a798:	b2db      	uxtb	r3, r3
}
 801a79a:	4618      	mov	r0, r3
 801a79c:	370c      	adds	r7, #12
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a4:	4770      	bx	lr

0801a7a6 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801a7a6:	b580      	push	{r7, lr}
 801a7a8:	b082      	sub	sp, #8
 801a7aa:	af00      	add	r7, sp, #0
 801a7ac:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	33cc      	adds	r3, #204	; 0xcc
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	6878      	ldr	r0, [r7, #4]
 801a7b8:	4798      	blx	r3
 801a7ba:	4603      	mov	r3, r0
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d00c      	beq.n	801a7da <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	7b1b      	ldrb	r3, [r3, #12]
 801a7c4:	f083 0301 	eor.w	r3, r3, #1
 801a7c8:	b2db      	uxtb	r3, r3
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d103      	bne.n	801a7d6 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	7b5b      	ldrb	r3, [r3, #13]
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d001      	beq.n	801a7da <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801a7d6:	2301      	movs	r3, #1
 801a7d8:	e000      	b.n	801a7dc <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801a7da:	2300      	movs	r3, #0
}
 801a7dc:	4618      	mov	r0, r3
 801a7de:	3708      	adds	r7, #8
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	bd80      	pop	{r7, pc}

0801a7e4 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b082      	sub	sp, #8
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	33d0      	adds	r3, #208	; 0xd0
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	6878      	ldr	r0, [r7, #4]
 801a7f6:	4798      	blx	r3
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d006      	beq.n	801a80c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801a804:	2b00      	cmp	r3, #0
 801a806:	d001      	beq.n	801a80c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801a808:	2301      	movs	r3, #1
 801a80a:	e000      	b.n	801a80e <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801a80c:	2300      	movs	r3, #0
}
 801a80e:	4618      	mov	r0, r3
 801a810:	3708      	adds	r7, #8
 801a812:	46bd      	mov	sp, r7
 801a814:	bd80      	pop	{r7, pc}

0801a816 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801a816:	b580      	push	{r7, lr}
 801a818:	b082      	sub	sp, #8
 801a81a:	af00      	add	r7, sp, #0
 801a81c:	6078      	str	r0, [r7, #4]
 801a81e:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a824:	1c5a      	adds	r2, r3, #1
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	691b      	ldr	r3, [r3, #16]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d00c      	beq.n	801a84c <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801a836:	683a      	ldr	r2, [r7, #0]
 801a838:	429a      	cmp	r2, r3
 801a83a:	d304      	bcc.n	801a846 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	695b      	ldr	r3, [r3, #20]
 801a840:	683a      	ldr	r2, [r7, #0]
 801a842:	429a      	cmp	r2, r3
 801a844:	d902      	bls.n	801a84c <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	2201      	movs	r2, #1
 801a84a:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	33ec      	adds	r3, #236	; 0xec
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	6878      	ldr	r0, [r7, #4]
 801a856:	4798      	blx	r3
}
 801a858:	bf00      	nop
 801a85a:	3708      	adds	r7, #8
 801a85c:	46bd      	mov	sp, r7
 801a85e:	bd80      	pop	{r7, pc}

0801a860 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801a860:	b480      	push	{r7}
 801a862:	b083      	sub	sp, #12
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	2201      	movs	r2, #1
 801a86c:	735a      	strb	r2, [r3, #13]
}
 801a86e:	bf00      	nop
 801a870:	370c      	adds	r7, #12
 801a872:	46bd      	mov	sp, r7
 801a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a878:	4770      	bx	lr

0801a87a <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801a87a:	b480      	push	{r7}
 801a87c:	b083      	sub	sp, #12
 801a87e:	af00      	add	r7, sp, #0
 801a880:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	2201      	movs	r2, #1
 801a886:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801a88a:	bf00      	nop
 801a88c:	370c      	adds	r7, #12
 801a88e:	46bd      	mov	sp, r7
 801a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a894:	4770      	bx	lr

0801a896 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801a896:	b580      	push	{r7, lr}
 801a898:	b084      	sub	sp, #16
 801a89a:	af00      	add	r7, sp, #0
 801a89c:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801a8a4:	f083 0301 	eor.w	r3, r3, #1
 801a8a8:	b2da      	uxtb	r2, r3
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	69db      	ldr	r3, [r3, #28]
 801a8ba:	4618      	mov	r0, r3
 801a8bc:	f004 fb03 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801a8c0:	60f8      	str	r0, [r7, #12]
 801a8c2:	68fb      	ldr	r3, [r7, #12]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d00d      	beq.n	801a8e4 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801a8c8:	68f9      	ldr	r1, [r7, #12]
 801a8ca:	6878      	ldr	r0, [r7, #4]
 801a8cc:	f000 fbf0 	bl	801b0b0 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a8d0:	4603      	mov	r3, r0
 801a8d2:	2100      	movs	r1, #0
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	f000 fc11 	bl	801b0fc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801a8da:	68f8      	ldr	r0, [r7, #12]
 801a8dc:	f004 f9fc 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801a8e0:	60f8      	str	r0, [r7, #12]
 801a8e2:	e7ee      	b.n	801a8c2 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	6a1b      	ldr	r3, [r3, #32]
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	f004 faec 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801a8ee:	60f8      	str	r0, [r7, #12]
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d00d      	beq.n	801a912 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801a8f6:	68f9      	ldr	r1, [r7, #12]
 801a8f8:	6878      	ldr	r0, [r7, #4]
 801a8fa:	f000 fbd9 	bl	801b0b0 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a8fe:	4603      	mov	r3, r0
 801a900:	2100      	movs	r1, #0
 801a902:	4618      	mov	r0, r3
 801a904:	f000 fbfa 	bl	801b0fc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801a908:	68f8      	ldr	r0, [r7, #12]
 801a90a:	f004 f9e5 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801a90e:	60f8      	str	r0, [r7, #12]
 801a910:	e7ee      	b.n	801a8f0 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801a912:	bf00      	nop
 801a914:	3710      	adds	r7, #16
 801a916:	46bd      	mov	sp, r7
 801a918:	bd80      	pop	{r7, pc}

0801a91a <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801a91a:	b590      	push	{r4, r7, lr}
 801a91c:	b087      	sub	sp, #28
 801a91e:	af00      	add	r7, sp, #0
 801a920:	6078      	str	r0, [r7, #4]
 801a922:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	69db      	ldr	r3, [r3, #28]
 801a928:	4618      	mov	r0, r3
 801a92a:	f004 facc 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801a92e:	6178      	str	r0, [r7, #20]
 801a930:	697b      	ldr	r3, [r7, #20]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d022      	beq.n	801a97c <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801a936:	f107 030c 	add.w	r3, r7, #12
 801a93a:	6979      	ldr	r1, [r7, #20]
 801a93c:	4618      	mov	r0, r3
 801a93e:	f004 fa06 	bl	801ed4e <_ZNK22MockNamedValueListNode7getNameEv>
 801a942:	f107 030c 	add.w	r3, r7, #12
 801a946:	6839      	ldr	r1, [r7, #0]
 801a948:	4618      	mov	r0, r3
 801a94a:	f7f2 f9b0 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801a94e:	4603      	mov	r3, r0
 801a950:	461c      	mov	r4, r3
 801a952:	f107 030c 	add.w	r3, r7, #12
 801a956:	4618      	mov	r0, r3
 801a958:	f7f2 f99d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801a95c:	2c00      	cmp	r4, #0
 801a95e:	d008      	beq.n	801a972 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801a960:	6979      	ldr	r1, [r7, #20]
 801a962:	6878      	ldr	r0, [r7, #4]
 801a964:	f000 fba4 	bl	801b0b0 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a968:	4603      	mov	r3, r0
 801a96a:	2101      	movs	r1, #1
 801a96c:	4618      	mov	r0, r3
 801a96e:	f000 fbc5 	bl	801b0fc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801a972:	6978      	ldr	r0, [r7, #20]
 801a974:	f004 f9b0 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801a978:	6178      	str	r0, [r7, #20]
 801a97a:	e7d9      	b.n	801a930 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801a97c:	bf00      	nop
 801a97e:	371c      	adds	r7, #28
 801a980:	46bd      	mov	sp, r7
 801a982:	bd90      	pop	{r4, r7, pc}

0801a984 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801a984:	b590      	push	{r4, r7, lr}
 801a986:	b087      	sub	sp, #28
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
 801a98c:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	6a1b      	ldr	r3, [r3, #32]
 801a992:	4618      	mov	r0, r3
 801a994:	f004 fa97 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801a998:	6178      	str	r0, [r7, #20]
 801a99a:	697b      	ldr	r3, [r7, #20]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d022      	beq.n	801a9e6 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801a9a0:	f107 030c 	add.w	r3, r7, #12
 801a9a4:	6979      	ldr	r1, [r7, #20]
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	f004 f9d1 	bl	801ed4e <_ZNK22MockNamedValueListNode7getNameEv>
 801a9ac:	f107 030c 	add.w	r3, r7, #12
 801a9b0:	6839      	ldr	r1, [r7, #0]
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f7f2 f97b 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	461c      	mov	r4, r3
 801a9bc:	f107 030c 	add.w	r3, r7, #12
 801a9c0:	4618      	mov	r0, r3
 801a9c2:	f7f2 f968 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801a9c6:	2c00      	cmp	r4, #0
 801a9c8:	d008      	beq.n	801a9dc <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801a9ca:	6979      	ldr	r1, [r7, #20]
 801a9cc:	6878      	ldr	r0, [r7, #4]
 801a9ce:	f000 fb6f 	bl	801b0b0 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a9d2:	4603      	mov	r3, r0
 801a9d4:	2101      	movs	r1, #1
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	f000 fb90 	bl	801b0fc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801a9dc:	6978      	ldr	r0, [r7, #20]
 801a9de:	f004 f97b 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801a9e2:	6178      	str	r0, [r7, #20]
 801a9e4:	e7d9      	b.n	801a99a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801a9e6:	bf00      	nop
 801a9e8:	371c      	adds	r7, #28
 801a9ea:	46bd      	mov	sp, r7
 801a9ec:	bd90      	pop	{r4, r7, pc}
	...

0801a9f0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b086      	sub	sp, #24
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	60f8      	str	r0, [r7, #12]
 801a9f8:	60b9      	str	r1, [r7, #8]
 801a9fa:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801a9fc:	68bb      	ldr	r3, [r7, #8]
 801a9fe:	69db      	ldr	r3, [r3, #28]
 801aa00:	6879      	ldr	r1, [r7, #4]
 801aa02:	4618      	mov	r0, r3
 801aa04:	f004 fa30 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801aa08:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801aa0a:	697b      	ldr	r3, [r7, #20]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d005      	beq.n	801aa1c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801aa10:	68fb      	ldr	r3, [r7, #12]
 801aa12:	6979      	ldr	r1, [r7, #20]
 801aa14:	4618      	mov	r0, r3
 801aa16:	f7ff fa0b 	bl	8019e30 <_Z10StringFromRK14MockNamedValue>
 801aa1a:	e003      	b.n	801aa24 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801aa1c:	4903      	ldr	r1, [pc, #12]	; (801aa2c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801aa1e:	68f8      	ldr	r0, [r7, #12]
 801aa20:	f7f1 fd81 	bl	800c526 <_ZN12SimpleStringC1EPKc>
}
 801aa24:	68f8      	ldr	r0, [r7, #12]
 801aa26:	3718      	adds	r7, #24
 801aa28:	46bd      	mov	sp, r7
 801aa2a:	bd80      	pop	{r7, pc}
 801aa2c:	0802587c 	.word	0x0802587c

0801aa30 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801aa30:	b590      	push	{r4, r7, lr}
 801aa32:	b087      	sub	sp, #28
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
 801aa38:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	69dc      	ldr	r4, [r3, #28]
 801aa3e:	683b      	ldr	r3, [r7, #0]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	335c      	adds	r3, #92	; 0x5c
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	f107 020c 	add.w	r2, r7, #12
 801aa4a:	6839      	ldr	r1, [r7, #0]
 801aa4c:	4610      	mov	r0, r2
 801aa4e:	4798      	blx	r3
 801aa50:	f107 030c 	add.w	r3, r7, #12
 801aa54:	4619      	mov	r1, r3
 801aa56:	4620      	mov	r0, r4
 801aa58:	f004 fa06 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801aa5c:	6178      	str	r0, [r7, #20]
 801aa5e:	f107 030c 	add.w	r3, r7, #12
 801aa62:	4618      	mov	r0, r3
 801aa64:	f7f2 f917 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801aa68:	697b      	ldr	r3, [r7, #20]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d00d      	beq.n	801aa8a <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801aa6e:	697b      	ldr	r3, [r7, #20]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	3350      	adds	r3, #80	; 0x50
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	6839      	ldr	r1, [r7, #0]
 801aa78:	6978      	ldr	r0, [r7, #20]
 801aa7a:	4798      	blx	r3
 801aa7c:	4603      	mov	r3, r0
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	bf14      	ite	ne
 801aa82:	2301      	movne	r3, #1
 801aa84:	2300      	moveq	r3, #0
 801aa86:	b2db      	uxtb	r3, r3
 801aa88:	e006      	b.n	801aa98 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	7b1b      	ldrb	r3, [r3, #12]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	bf14      	ite	ne
 801aa92:	2301      	movne	r3, #1
 801aa94:	2300      	moveq	r3, #0
 801aa96:	b2db      	uxtb	r3, r3
}
 801aa98:	4618      	mov	r0, r3
 801aa9a:	371c      	adds	r7, #28
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bd90      	pop	{r4, r7, pc}

0801aaa0 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801aaa0:	b590      	push	{r4, r7, lr}
 801aaa2:	b087      	sub	sp, #28
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
 801aaa8:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	6a1c      	ldr	r4, [r3, #32]
 801aaae:	683b      	ldr	r3, [r7, #0]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	335c      	adds	r3, #92	; 0x5c
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	f107 020c 	add.w	r2, r7, #12
 801aaba:	6839      	ldr	r1, [r7, #0]
 801aabc:	4610      	mov	r0, r2
 801aabe:	4798      	blx	r3
 801aac0:	f107 030c 	add.w	r3, r7, #12
 801aac4:	4619      	mov	r1, r3
 801aac6:	4620      	mov	r0, r4
 801aac8:	f004 f9ce 	bl	801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801aacc:	6178      	str	r0, [r7, #20]
 801aace:	f107 030c 	add.w	r3, r7, #12
 801aad2:	4618      	mov	r0, r3
 801aad4:	f7f2 f8df 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801aad8:	697b      	ldr	r3, [r7, #20]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d00d      	beq.n	801aafa <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801aade:	697b      	ldr	r3, [r7, #20]
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	3354      	adds	r3, #84	; 0x54
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	6839      	ldr	r1, [r7, #0]
 801aae8:	6978      	ldr	r0, [r7, #20]
 801aaea:	4798      	blx	r3
 801aaec:	4603      	mov	r3, r0
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	bf14      	ite	ne
 801aaf2:	2301      	movne	r3, #1
 801aaf4:	2300      	moveq	r3, #0
 801aaf6:	b2db      	uxtb	r3, r3
 801aaf8:	e006      	b.n	801ab08 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	7b1b      	ldrb	r3, [r3, #12]
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	bf14      	ite	ne
 801ab02:	2301      	movne	r3, #1
 801ab04:	2300      	moveq	r3, #0
 801ab06:	b2db      	uxtb	r3, r3
}
 801ab08:	4618      	mov	r0, r3
 801ab0a:	371c      	adds	r7, #28
 801ab0c:	46bd      	mov	sp, r7
 801ab0e:	bd90      	pop	{r4, r7, pc}

0801ab10 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801ab10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab12:	b0a1      	sub	sp, #132	; 0x84
 801ab14:	af02      	add	r7, sp, #8
 801ab16:	6078      	str	r0, [r7, #4]
 801ab18:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801ab1a:	49bc      	ldr	r1, [pc, #752]	; (801ae0c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801ab1c:	6878      	ldr	r0, [r7, #4]
 801ab1e:	f7f1 fd02 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801ab22:	683b      	ldr	r3, [r7, #0]
 801ab24:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d012      	beq.n	801ab52 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801ab2c:	683b      	ldr	r3, [r7, #0]
 801ab2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801ab30:	f107 030c 	add.w	r3, r7, #12
 801ab34:	49b6      	ldr	r1, [pc, #728]	; (801ae10 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801ab36:	4618      	mov	r0, r3
 801ab38:	f7f2 fdb4 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801ab3c:	f107 030c 	add.w	r3, r7, #12
 801ab40:	4619      	mov	r1, r3
 801ab42:	6878      	ldr	r0, [r7, #4]
 801ab44:	f7f1 fd5b 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801ab48:	f107 030c 	add.w	r3, r7, #12
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	f7f2 f8a2 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    str += getName();
 801ab52:	f107 0314 	add.w	r3, r7, #20
 801ab56:	6839      	ldr	r1, [r7, #0]
 801ab58:	4618      	mov	r0, r3
 801ab5a:	f7ff f989 	bl	8019e70 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801ab5e:	f107 0314 	add.w	r3, r7, #20
 801ab62:	4619      	mov	r1, r3
 801ab64:	6878      	ldr	r0, [r7, #4]
 801ab66:	f7f2 f913 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801ab6a:	f107 0314 	add.w	r3, r7, #20
 801ab6e:	4618      	mov	r0, r3
 801ab70:	f7f2 f891 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801ab74:	49a7      	ldr	r1, [pc, #668]	; (801ae14 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801ab76:	6878      	ldr	r0, [r7, #4]
 801ab78:	f7f2 f91c 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801ab7c:	683b      	ldr	r3, [r7, #0]
 801ab7e:	691b      	ldr	r3, [r3, #16]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d02d      	beq.n	801abe0 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801ab84:	683b      	ldr	r3, [r7, #0]
 801ab86:	691a      	ldr	r2, [r3, #16]
 801ab88:	683b      	ldr	r3, [r7, #0]
 801ab8a:	695b      	ldr	r3, [r3, #20]
 801ab8c:	429a      	cmp	r2, r3
 801ab8e:	d113      	bne.n	801abb8 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	691a      	ldr	r2, [r3, #16]
 801ab94:	f107 031c 	add.w	r3, r7, #28
 801ab98:	499f      	ldr	r1, [pc, #636]	; (801ae18 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	f7f2 fd82 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801aba0:	f107 031c 	add.w	r3, r7, #28
 801aba4:	4619      	mov	r1, r3
 801aba6:	6878      	ldr	r0, [r7, #4]
 801aba8:	f7f2 f8f2 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801abac:	f107 031c 	add.w	r3, r7, #28
 801abb0:	4618      	mov	r0, r3
 801abb2:	f7f2 f870 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801abb6:	e013      	b.n	801abe0 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801abb8:	683b      	ldr	r3, [r7, #0]
 801abba:	691a      	ldr	r2, [r3, #16]
 801abbc:	683b      	ldr	r3, [r7, #0]
 801abbe:	695b      	ldr	r3, [r3, #20]
 801abc0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801abc4:	4995      	ldr	r1, [pc, #596]	; (801ae1c <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801abc6:	f7f2 fd6d 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801abca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801abce:	4619      	mov	r1, r3
 801abd0:	6878      	ldr	r0, [r7, #4]
 801abd2:	f7f2 f8dd 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801abd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801abda:	4618      	mov	r0, r3
 801abdc:	f7f2 f85b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801abe0:	683b      	ldr	r3, [r7, #0]
 801abe2:	69db      	ldr	r3, [r3, #28]
 801abe4:	4618      	mov	r0, r3
 801abe6:	f004 f96e 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801abea:	4603      	mov	r3, r0
 801abec:	2b00      	cmp	r3, #0
 801abee:	d109      	bne.n	801ac04 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801abf0:	683b      	ldr	r3, [r7, #0]
 801abf2:	6a1b      	ldr	r3, [r3, #32]
 801abf4:	4618      	mov	r0, r3
 801abf6:	f004 f966 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801abfa:	4603      	mov	r3, r0
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d101      	bne.n	801ac04 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801ac00:	2301      	movs	r3, #1
 801ac02:	e000      	b.n	801ac06 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801ac04:	2300      	movs	r3, #0
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d00b      	beq.n	801ac22 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	7b1b      	ldrb	r3, [r3, #12]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d001      	beq.n	801ac16 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801ac12:	4b83      	ldr	r3, [pc, #524]	; (801ae20 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801ac14:	e000      	b.n	801ac18 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801ac16:	4b83      	ldr	r3, [pc, #524]	; (801ae24 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801ac18:	4619      	mov	r1, r3
 801ac1a:	6878      	ldr	r0, [r7, #4]
 801ac1c:	f7f2 f8ca 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
 801ac20:	e0e3      	b.n	801adea <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801ac22:	683b      	ldr	r3, [r7, #0]
 801ac24:	69db      	ldr	r3, [r3, #28]
 801ac26:	4618      	mov	r0, r3
 801ac28:	f004 f94d 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801ac2c:	6778      	str	r0, [r7, #116]	; 0x74
 801ac2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d069      	beq.n	801ad08 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801ac34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ac38:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f004 f89a 	bl	801ed74 <_ZNK22MockNamedValueListNode7getTypeEv>
 801ac40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ac44:	4618      	mov	r0, r3
 801ac46:	f7f1 fff9 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801ac4a:	4605      	mov	r5, r0
 801ac4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ac50:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801ac52:	4618      	mov	r0, r3
 801ac54:	f004 f87b 	bl	801ed4e <_ZNK22MockNamedValueListNode7getNameEv>
 801ac58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ac5c:	4618      	mov	r0, r3
 801ac5e:	f7f1 ffed 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801ac62:	4606      	mov	r6, r0
 801ac64:	683b      	ldr	r3, [r7, #0]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	33a4      	adds	r3, #164	; 0xa4
 801ac6a:	681c      	ldr	r4, [r3, #0]
 801ac6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac70:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801ac72:	4618      	mov	r0, r3
 801ac74:	f004 f86b 	bl	801ed4e <_ZNK22MockNamedValueListNode7getNameEv>
 801ac78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ac7c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801ac80:	6839      	ldr	r1, [r7, #0]
 801ac82:	4618      	mov	r0, r3
 801ac84:	47a0      	blx	r4
 801ac86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	f7f1 ffd6 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801ac90:	4603      	mov	r3, r0
 801ac92:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801ac96:	9300      	str	r3, [sp, #0]
 801ac98:	4633      	mov	r3, r6
 801ac9a:	462a      	mov	r2, r5
 801ac9c:	4962      	ldr	r1, [pc, #392]	; (801ae28 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801ac9e:	f7f2 fd01 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801aca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aca6:	4619      	mov	r1, r3
 801aca8:	6878      	ldr	r0, [r7, #4]
 801acaa:	f7f2 f871 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801acae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801acb2:	4618      	mov	r0, r3
 801acb4:	f7f1 ffef 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801acb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801acbc:	4618      	mov	r0, r3
 801acbe:	f7f1 ffea 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801acc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801acc6:	4618      	mov	r0, r3
 801acc8:	f7f1 ffe5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801accc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801acd0:	4618      	mov	r0, r3
 801acd2:	f7f1 ffe0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801acd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801acda:	4618      	mov	r0, r3
 801acdc:	f7f1 ffdb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801ace0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ace2:	f003 fff9 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801ace6:	4603      	mov	r3, r0
 801ace8:	2b00      	cmp	r3, #0
 801acea:	bf14      	ite	ne
 801acec:	2301      	movne	r3, #1
 801acee:	2300      	moveq	r3, #0
 801acf0:	b2db      	uxtb	r3, r3
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d003      	beq.n	801acfe <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801acf6:	494d      	ldr	r1, [pc, #308]	; (801ae2c <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801acf8:	6878      	ldr	r0, [r7, #4]
 801acfa:	f7f2 f85b 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801acfe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801ad00:	f003 ffea 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801ad04:	6778      	str	r0, [r7, #116]	; 0x74
 801ad06:	e792      	b.n	801ac2e <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801ad08:	683b      	ldr	r3, [r7, #0]
 801ad0a:	69db      	ldr	r3, [r3, #28]
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	f004 f8da 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801ad12:	4603      	mov	r3, r0
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d009      	beq.n	801ad2c <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	6a1b      	ldr	r3, [r3, #32]
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	f004 f8d2 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801ad22:	4603      	mov	r3, r0
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d001      	beq.n	801ad2c <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801ad28:	2301      	movs	r3, #1
 801ad2a:	e000      	b.n	801ad2e <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d003      	beq.n	801ad3a <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801ad32:	493e      	ldr	r1, [pc, #248]	; (801ae2c <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801ad34:	6878      	ldr	r0, [r7, #4]
 801ad36:	f7f2 f83d 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801ad3a:	683b      	ldr	r3, [r7, #0]
 801ad3c:	6a1b      	ldr	r3, [r3, #32]
 801ad3e:	4618      	mov	r0, r3
 801ad40:	f004 f8c1 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801ad44:	6778      	str	r0, [r7, #116]	; 0x74
 801ad46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d046      	beq.n	801adda <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801ad4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801ad50:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801ad52:	4618      	mov	r0, r3
 801ad54:	f004 f80e 	bl	801ed74 <_ZNK22MockNamedValueListNode7getTypeEv>
 801ad58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801ad5c:	4618      	mov	r0, r3
 801ad5e:	f7f1 ff6d 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801ad62:	4604      	mov	r4, r0
 801ad64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801ad68:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	f003 ffef 	bl	801ed4e <_ZNK22MockNamedValueListNode7getNameEv>
 801ad70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801ad74:	4618      	mov	r0, r3
 801ad76:	f7f1 ff61 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801ad7a:	4603      	mov	r3, r0
 801ad7c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801ad80:	4622      	mov	r2, r4
 801ad82:	492b      	ldr	r1, [pc, #172]	; (801ae30 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801ad84:	f7f2 fc8e 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801ad88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ad8c:	4619      	mov	r1, r3
 801ad8e:	6878      	ldr	r0, [r7, #4]
 801ad90:	f7f1 fffe 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801ad94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801ad98:	4618      	mov	r0, r3
 801ad9a:	f7f1 ff7c 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ad9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801ada2:	4618      	mov	r0, r3
 801ada4:	f7f1 ff77 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ada8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801adac:	4618      	mov	r0, r3
 801adae:	f7f1 ff72 	bl	800cc96 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801adb2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801adb4:	f003 ff90 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801adb8:	4603      	mov	r3, r0
 801adba:	2b00      	cmp	r3, #0
 801adbc:	bf14      	ite	ne
 801adbe:	2301      	movne	r3, #1
 801adc0:	2300      	moveq	r3, #0
 801adc2:	b2db      	uxtb	r3, r3
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d003      	beq.n	801add0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801adc8:	4918      	ldr	r1, [pc, #96]	; (801ae2c <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801adca:	6878      	ldr	r0, [r7, #4]
 801adcc:	f7f1 fff2 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801add0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801add2:	f003 ff81 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801add6:	6778      	str	r0, [r7, #116]	; 0x74
 801add8:	e7b5      	b.n	801ad46 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801adda:	683b      	ldr	r3, [r7, #0]
 801addc:	7b1b      	ldrb	r3, [r3, #12]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d003      	beq.n	801adea <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801ade2:	4914      	ldr	r1, [pc, #80]	; (801ae34 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801ade4:	6878      	ldr	r0, [r7, #4]
 801ade6:	f7f1 ffe5 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801adea:	683b      	ldr	r3, [r7, #0]
 801adec:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801adf2:	2b01      	cmp	r3, #1
 801adf4:	d101      	bne.n	801adfa <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801adf6:	4c05      	ldr	r4, [pc, #20]	; (801ae0c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801adf8:	e000      	b.n	801adfc <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801adfa:	4c0f      	ldr	r4, [pc, #60]	; (801ae38 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801adfc:	683b      	ldr	r3, [r7, #0]
 801adfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801ae00:	683a      	ldr	r2, [r7, #0]
 801ae02:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801ae04:	2a01      	cmp	r2, #1
 801ae06:	d119      	bne.n	801ae3c <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801ae08:	4a00      	ldr	r2, [pc, #0]	; (801ae0c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801ae0a:	e018      	b.n	801ae3e <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801ae0c:	08025810 	.word	0x08025810
 801ae10:	08025884 	.word	0x08025884
 801ae14:	0802589c 	.word	0x0802589c
 801ae18:	080258a4 	.word	0x080258a4
 801ae1c:	080258c4 	.word	0x080258c4
 801ae20:	080258e8 	.word	0x080258e8
 801ae24:	08025900 	.word	0x08025900
 801ae28:	08025910 	.word	0x08025910
 801ae2c:	0802591c 	.word	0x0802591c
 801ae30:	08025920 	.word	0x08025920
 801ae34:	08025930 	.word	0x08025930
 801ae38:	08025950 	.word	0x08025950
 801ae3c:	4a0c      	ldr	r2, [pc, #48]	; (801ae70 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801ae3e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801ae42:	9201      	str	r2, [sp, #4]
 801ae44:	9300      	str	r3, [sp, #0]
 801ae46:	4623      	mov	r3, r4
 801ae48:	460a      	mov	r2, r1
 801ae4a:	490a      	ldr	r1, [pc, #40]	; (801ae74 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801ae4c:	f7f2 fc2a 	bl	800d6a4 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801ae50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801ae54:	4619      	mov	r1, r3
 801ae56:	6878      	ldr	r0, [r7, #4]
 801ae58:	f7f1 ff9a 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801ae5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801ae60:	4618      	mov	r0, r3
 801ae62:	f7f1 ff18 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    return str;
 801ae66:	bf00      	nop
}
 801ae68:	6878      	ldr	r0, [r7, #4]
 801ae6a:	377c      	adds	r7, #124	; 0x7c
 801ae6c:	46bd      	mov	sp, r7
 801ae6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae70:	08025950 	.word	0x08025950
 801ae74:	08025954 	.word	0x08025954

0801ae78 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801ae78:	b590      	push	{r4, r7, lr}
 801ae7a:	b095      	sub	sp, #84	; 0x54
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
 801ae80:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801ae82:	496c      	ldr	r1, [pc, #432]	; (801b034 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801ae84:	6878      	ldr	r0, [r7, #4]
 801ae86:	f7f1 fb4e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801ae8a:	683b      	ldr	r3, [r7, #0]
 801ae8c:	69db      	ldr	r3, [r3, #28]
 801ae8e:	4618      	mov	r0, r3
 801ae90:	f004 f819 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801ae94:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ae96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d05e      	beq.n	801af5a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801ae9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ae9e:	6838      	ldr	r0, [r7, #0]
 801aea0:	f000 f906 	bl	801b0b0 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801aea4:	4603      	mov	r3, r0
 801aea6:	4618      	mov	r0, r3
 801aea8:	f000 f938 	bl	801b11c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801aeac:	4603      	mov	r3, r0
 801aeae:	f083 0301 	eor.w	r3, r3, #1
 801aeb2:	b2db      	uxtb	r3, r3
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d04b      	beq.n	801af50 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801aeb8:	f107 030c 	add.w	r3, r7, #12
 801aebc:	495d      	ldr	r1, [pc, #372]	; (801b034 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801aebe:	4618      	mov	r0, r3
 801aec0:	f7f1 fb31 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801aec4:	f107 030c 	add.w	r3, r7, #12
 801aec8:	4619      	mov	r1, r3
 801aeca:	6878      	ldr	r0, [r7, #4]
 801aecc:	f7f1 ff34 	bl	800cd38 <_ZneRK12SimpleStringS1_>
 801aed0:	4603      	mov	r3, r0
 801aed2:	461c      	mov	r4, r3
 801aed4:	f107 030c 	add.w	r3, r7, #12
 801aed8:	4618      	mov	r0, r3
 801aeda:	f7f1 fedc 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801aede:	2c00      	cmp	r4, #0
 801aee0:	d003      	beq.n	801aeea <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801aee2:	4955      	ldr	r1, [pc, #340]	; (801b038 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801aee4:	6878      	ldr	r0, [r7, #4]
 801aee6:	f7f1 ff65 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801aeea:	f107 031c 	add.w	r3, r7, #28
 801aeee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801aef0:	4618      	mov	r0, r3
 801aef2:	f003 ff3f 	bl	801ed74 <_ZNK22MockNamedValueListNode7getTypeEv>
 801aef6:	f107 031c 	add.w	r3, r7, #28
 801aefa:	4618      	mov	r0, r3
 801aefc:	f7f1 fe9e 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801af00:	4604      	mov	r4, r0
 801af02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801af06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801af08:	4618      	mov	r0, r3
 801af0a:	f003 ff20 	bl	801ed4e <_ZNK22MockNamedValueListNode7getNameEv>
 801af0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801af12:	4618      	mov	r0, r3
 801af14:	f7f1 fe92 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801af18:	4603      	mov	r3, r0
 801af1a:	f107 0014 	add.w	r0, r7, #20
 801af1e:	4622      	mov	r2, r4
 801af20:	4946      	ldr	r1, [pc, #280]	; (801b03c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801af22:	f7f2 fbbf 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801af26:	f107 0314 	add.w	r3, r7, #20
 801af2a:	4619      	mov	r1, r3
 801af2c:	6878      	ldr	r0, [r7, #4]
 801af2e:	f7f1 ff2f 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801af32:	f107 0314 	add.w	r3, r7, #20
 801af36:	4618      	mov	r0, r3
 801af38:	f7f1 fead 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801af3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801af40:	4618      	mov	r0, r3
 801af42:	f7f1 fea8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801af46:	f107 031c 	add.w	r3, r7, #28
 801af4a:	4618      	mov	r0, r3
 801af4c:	f7f1 fea3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801af50:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801af52:	f003 fec1 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801af56:	64f8      	str	r0, [r7, #76]	; 0x4c
 801af58:	e79d      	b.n	801ae96 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801af5a:	683b      	ldr	r3, [r7, #0]
 801af5c:	6a1b      	ldr	r3, [r3, #32]
 801af5e:	4618      	mov	r0, r3
 801af60:	f003 ffb1 	bl	801eec6 <_ZN18MockNamedValueList5beginEv>
 801af64:	64f8      	str	r0, [r7, #76]	; 0x4c
 801af66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d05e      	beq.n	801b02a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801af6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801af6e:	6838      	ldr	r0, [r7, #0]
 801af70:	f000 f89e 	bl	801b0b0 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801af74:	4603      	mov	r3, r0
 801af76:	4618      	mov	r0, r3
 801af78:	f000 f8d0 	bl	801b11c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801af7c:	4603      	mov	r3, r0
 801af7e:	f083 0301 	eor.w	r3, r3, #1
 801af82:	b2db      	uxtb	r3, r3
 801af84:	2b00      	cmp	r3, #0
 801af86:	d04b      	beq.n	801b020 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801af88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801af8c:	4929      	ldr	r1, [pc, #164]	; (801b034 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801af8e:	4618      	mov	r0, r3
 801af90:	f7f1 fac9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801af94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801af98:	4619      	mov	r1, r3
 801af9a:	6878      	ldr	r0, [r7, #4]
 801af9c:	f7f1 fecc 	bl	800cd38 <_ZneRK12SimpleStringS1_>
 801afa0:	4603      	mov	r3, r0
 801afa2:	461c      	mov	r4, r3
 801afa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801afa8:	4618      	mov	r0, r3
 801afaa:	f7f1 fe74 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801afae:	2c00      	cmp	r4, #0
 801afb0:	d003      	beq.n	801afba <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801afb2:	4921      	ldr	r1, [pc, #132]	; (801b038 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801afb4:	6878      	ldr	r0, [r7, #4]
 801afb6:	f7f1 fefd 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801afba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801afbe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801afc0:	4618      	mov	r0, r3
 801afc2:	f003 fed7 	bl	801ed74 <_ZNK22MockNamedValueListNode7getTypeEv>
 801afc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801afca:	4618      	mov	r0, r3
 801afcc:	f7f1 fe36 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801afd0:	4604      	mov	r4, r0
 801afd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801afd6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801afd8:	4618      	mov	r0, r3
 801afda:	f003 feb8 	bl	801ed4e <_ZNK22MockNamedValueListNode7getNameEv>
 801afde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801afe2:	4618      	mov	r0, r3
 801afe4:	f7f1 fe2a 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801afe8:	4603      	mov	r3, r0
 801afea:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801afee:	4622      	mov	r2, r4
 801aff0:	4912      	ldr	r1, [pc, #72]	; (801b03c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801aff2:	f7f2 fb57 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801aff6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801affa:	4619      	mov	r1, r3
 801affc:	6878      	ldr	r0, [r7, #4]
 801affe:	f7f1 fec7 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801b002:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b006:	4618      	mov	r0, r3
 801b008:	f7f1 fe45 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801b00c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b010:	4618      	mov	r0, r3
 801b012:	f7f1 fe40 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801b016:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b01a:	4618      	mov	r0, r3
 801b01c:	f7f1 fe3b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801b020:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b022:	f003 fe59 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801b026:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b028:	e79d      	b.n	801af66 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801b02a:	bf00      	nop
}
 801b02c:	6878      	ldr	r0, [r7, #4]
 801b02e:	3754      	adds	r7, #84	; 0x54
 801b030:	46bd      	mov	sp, r7
 801b032:	bd90      	pop	{r4, r7, pc}
 801b034:	08025810 	.word	0x08025810
 801b038:	0802591c 	.word	0x0802591c
 801b03c:	0802597c 	.word	0x0802597c

0801b040 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801b040:	b590      	push	{r4, r7, lr}
 801b042:	b085      	sub	sp, #20
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
 801b048:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801b04a:	f107 0308 	add.w	r3, r7, #8
 801b04e:	6879      	ldr	r1, [r7, #4]
 801b050:	4618      	mov	r0, r3
 801b052:	f7fe ff0d 	bl	8019e70 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801b056:	f107 0308 	add.w	r3, r7, #8
 801b05a:	4619      	mov	r1, r3
 801b05c:	6838      	ldr	r0, [r7, #0]
 801b05e:	f7f1 fe26 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801b062:	4603      	mov	r3, r0
 801b064:	461c      	mov	r4, r3
 801b066:	f107 0308 	add.w	r3, r7, #8
 801b06a:	4618      	mov	r0, r3
 801b06c:	f7f1 fe13 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801b070:	4623      	mov	r3, r4
}
 801b072:	4618      	mov	r0, r3
 801b074:	3714      	adds	r7, #20
 801b076:	46bd      	mov	sp, r7
 801b078:	bd90      	pop	{r4, r7, pc}

0801b07a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801b07a:	b480      	push	{r7}
 801b07c:	b083      	sub	sp, #12
 801b07e:	af00      	add	r7, sp, #0
 801b080:	6078      	str	r0, [r7, #4]
 801b082:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b08a:	f083 0301 	eor.w	r3, r3, #1
 801b08e:	b2db      	uxtb	r3, r3
 801b090:	2b00      	cmp	r3, #0
 801b092:	d104      	bne.n	801b09e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b098:	683a      	ldr	r2, [r7, #0]
 801b09a:	429a      	cmp	r2, r3
 801b09c:	d101      	bne.n	801b0a2 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801b09e:	2301      	movs	r3, #1
 801b0a0:	e000      	b.n	801b0a4 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801b0a2:	2300      	movs	r3, #0
}
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	370c      	adds	r7, #12
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ae:	4770      	bx	lr

0801b0b0 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b082      	sub	sp, #8
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	6078      	str	r0, [r7, #4]
 801b0b8:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801b0ba:	6838      	ldr	r0, [r7, #0]
 801b0bc:	f003 fe18 	bl	801ecf0 <_ZN22MockNamedValueListNode4itemEv>
 801b0c0:	4603      	mov	r3, r0
}
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	3708      	adds	r7, #8
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	bd80      	pop	{r7, pc}
	...

0801b0cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	b082      	sub	sp, #8
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
 801b0d4:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	6839      	ldr	r1, [r7, #0]
 801b0da:	4618      	mov	r0, r3
 801b0dc:	f001 ff48 	bl	801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b0e0:	4a05      	ldr	r2, [pc, #20]	; (801b0f8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	601a      	str	r2, [r3, #0]
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	2200      	movs	r2, #0
 801b0ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	3708      	adds	r7, #8
 801b0f4:	46bd      	mov	sp, r7
 801b0f6:	bd80      	pop	{r7, pc}
 801b0f8:	080286d8 	.word	0x080286d8

0801b0fc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801b0fc:	b480      	push	{r7}
 801b0fe:	b083      	sub	sp, #12
 801b100:	af00      	add	r7, sp, #0
 801b102:	6078      	str	r0, [r7, #4]
 801b104:	460b      	mov	r3, r1
 801b106:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	78fa      	ldrb	r2, [r7, #3]
 801b10c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801b110:	bf00      	nop
 801b112:	370c      	adds	r7, #12
 801b114:	46bd      	mov	sp, r7
 801b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b11a:	4770      	bx	lr

0801b11c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801b11c:	b480      	push	{r7}
 801b11e:	b083      	sub	sp, #12
 801b120:	af00      	add	r7, sp, #0
 801b122:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b12a:	4618      	mov	r0, r3
 801b12c:	370c      	adds	r7, #12
 801b12e:	46bd      	mov	sp, r7
 801b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b134:	4770      	bx	lr
	...

0801b138 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	b082      	sub	sp, #8
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
 801b140:	460b      	mov	r3, r1
 801b142:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	3328      	adds	r3, #40	; 0x28
 801b148:	4907      	ldr	r1, [pc, #28]	; (801b168 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801b14a:	4618      	mov	r0, r3
 801b14c:	f002 f9b4 	bl	801d4b8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	3328      	adds	r3, #40	; 0x28
 801b154:	78fa      	ldrb	r2, [r7, #3]
 801b156:	4611      	mov	r1, r2
 801b158:	4618      	mov	r0, r3
 801b15a:	f001 ff5b 	bl	801d014 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801b15e:	687b      	ldr	r3, [r7, #4]
}
 801b160:	4618      	mov	r0, r3
 801b162:	3708      	adds	r7, #8
 801b164:	46bd      	mov	sp, r7
 801b166:	bd80      	pop	{r7, pc}
 801b168:	08025984 	.word	0x08025984

0801b16c <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b082      	sub	sp, #8
 801b170:	af00      	add	r7, sp, #0
 801b172:	6078      	str	r0, [r7, #4]
 801b174:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	3328      	adds	r3, #40	; 0x28
 801b17a:	4907      	ldr	r1, [pc, #28]	; (801b198 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801b17c:	4618      	mov	r0, r3
 801b17e:	f002 f99b 	bl	801d4b8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	3328      	adds	r3, #40	; 0x28
 801b186:	6839      	ldr	r1, [r7, #0]
 801b188:	4618      	mov	r0, r3
 801b18a:	f001 ff67 	bl	801d05c <_ZN14MockNamedValue8setValueEj>
    return *this;
 801b18e:	687b      	ldr	r3, [r7, #4]
}
 801b190:	4618      	mov	r0, r3
 801b192:	3708      	adds	r7, #8
 801b194:	46bd      	mov	sp, r7
 801b196:	bd80      	pop	{r7, pc}
 801b198:	08025984 	.word	0x08025984

0801b19c <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b082      	sub	sp, #8
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	6078      	str	r0, [r7, #4]
 801b1a4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	3328      	adds	r3, #40	; 0x28
 801b1aa:	4907      	ldr	r1, [pc, #28]	; (801b1c8 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801b1ac:	4618      	mov	r0, r3
 801b1ae:	f002 f983 	bl	801d4b8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	3328      	adds	r3, #40	; 0x28
 801b1b6:	6839      	ldr	r1, [r7, #0]
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	f001 ff71 	bl	801d0a0 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801b1be:	687b      	ldr	r3, [r7, #4]
}
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	3708      	adds	r7, #8
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	bd80      	pop	{r7, pc}
 801b1c8:	08025984 	.word	0x08025984

0801b1cc <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	b082      	sub	sp, #8
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
 801b1d4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	3328      	adds	r3, #40	; 0x28
 801b1da:	4907      	ldr	r1, [pc, #28]	; (801b1f8 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801b1dc:	4618      	mov	r0, r3
 801b1de:	f002 f96b 	bl	801d4b8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	3328      	adds	r3, #40	; 0x28
 801b1e6:	6839      	ldr	r1, [r7, #0]
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	f001 ff7b 	bl	801d0e4 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801b1ee:	687b      	ldr	r3, [r7, #4]
}
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	3708      	adds	r7, #8
 801b1f4:	46bd      	mov	sp, r7
 801b1f6:	bd80      	pop	{r7, pc}
 801b1f8:	08025984 	.word	0x08025984

0801b1fc <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b082      	sub	sp, #8
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
 801b204:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	3328      	adds	r3, #40	; 0x28
 801b20a:	4907      	ldr	r1, [pc, #28]	; (801b228 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801b20c:	4618      	mov	r0, r3
 801b20e:	f002 f953 	bl	801d4b8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	3328      	adds	r3, #40	; 0x28
 801b216:	6839      	ldr	r1, [r7, #0]
 801b218:	4618      	mov	r0, r3
 801b21a:	f001 ff85 	bl	801d128 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801b21e:	687b      	ldr	r3, [r7, #4]
}
 801b220:	4618      	mov	r0, r3
 801b222:	3708      	adds	r7, #8
 801b224:	46bd      	mov	sp, r7
 801b226:	bd80      	pop	{r7, pc}
 801b228:	08025984 	.word	0x08025984

0801b22c <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801b22c:	b5b0      	push	{r4, r5, r7, lr}
 801b22e:	b086      	sub	sp, #24
 801b230:	af02      	add	r7, sp, #8
 801b232:	60f8      	str	r0, [r7, #12]
 801b234:	1d3b      	adds	r3, r7, #4
 801b236:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801b23a:	f7f8 fd57 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801b23e:	4604      	mov	r4, r0
 801b240:	6823      	ldr	r3, [r4, #0]
 801b242:	3368      	adds	r3, #104	; 0x68
 801b244:	681d      	ldr	r5, [r3, #0]
 801b246:	f7f8 fd61 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b24a:	4603      	mov	r3, r0
 801b24c:	9300      	str	r3, [sp, #0]
 801b24e:	f240 2319 	movw	r3, #537	; 0x219
 801b252:	4a04      	ldr	r2, [pc, #16]	; (801b264 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801b254:	4904      	ldr	r1, [pc, #16]	; (801b268 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801b256:	4620      	mov	r0, r4
 801b258:	47a8      	blx	r5
    return *this;
 801b25a:	68fb      	ldr	r3, [r7, #12]
}
 801b25c:	4618      	mov	r0, r3
 801b25e:	3710      	adds	r7, #16
 801b260:	46bd      	mov	sp, r7
 801b262:	bdb0      	pop	{r4, r5, r7, pc}
 801b264:	08025814 	.word	0x08025814
 801b268:	08025830 	.word	0x08025830

0801b26c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801b26c:	b5b0      	push	{r4, r5, r7, lr}
 801b26e:	b086      	sub	sp, #24
 801b270:	af02      	add	r7, sp, #8
 801b272:	60f8      	str	r0, [r7, #12]
 801b274:	1d3b      	adds	r3, r7, #4
 801b276:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801b27a:	f7f8 fd37 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801b27e:	4604      	mov	r4, r0
 801b280:	6823      	ldr	r3, [r4, #0]
 801b282:	3368      	adds	r3, #104	; 0x68
 801b284:	681d      	ldr	r5, [r3, #0]
 801b286:	f7f8 fd41 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b28a:	4603      	mov	r3, r0
 801b28c:	9300      	str	r3, [sp, #0]
 801b28e:	f240 231f 	movw	r3, #543	; 0x21f
 801b292:	4a04      	ldr	r2, [pc, #16]	; (801b2a4 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801b294:	4904      	ldr	r1, [pc, #16]	; (801b2a8 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801b296:	4620      	mov	r0, r4
 801b298:	47a8      	blx	r5
    return *this;
 801b29a:	68fb      	ldr	r3, [r7, #12]
}
 801b29c:	4618      	mov	r0, r3
 801b29e:	3710      	adds	r7, #16
 801b2a0:	46bd      	mov	sp, r7
 801b2a2:	bdb0      	pop	{r4, r5, r7, pc}
 801b2a4:	08025814 	.word	0x08025814
 801b2a8:	08025850 	.word	0x08025850

0801b2ac <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b082      	sub	sp, #8
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
 801b2b4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	3328      	adds	r3, #40	; 0x28
 801b2ba:	4907      	ldr	r1, [pc, #28]	; (801b2d8 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801b2bc:	4618      	mov	r0, r3
 801b2be:	f002 f8fb 	bl	801d4b8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	3328      	adds	r3, #40	; 0x28
 801b2c6:	6839      	ldr	r1, [r7, #0]
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	f002 f837 	bl	801d33c <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801b2ce:	687b      	ldr	r3, [r7, #4]
}
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	3708      	adds	r7, #8
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	bd80      	pop	{r7, pc}
 801b2d8:	08025984 	.word	0x08025984

0801b2dc <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801b2dc:	b580      	push	{r7, lr}
 801b2de:	b084      	sub	sp, #16
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	60f8      	str	r0, [r7, #12]
 801b2e4:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801b2e8:	68fb      	ldr	r3, [r7, #12]
 801b2ea:	3328      	adds	r3, #40	; 0x28
 801b2ec:	4907      	ldr	r1, [pc, #28]	; (801b30c <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	f002 f8e2 	bl	801d4b8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	3328      	adds	r3, #40	; 0x28
 801b2f8:	ed97 0b00 	vldr	d0, [r7]
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	f001 ff73 	bl	801d1e8 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801b302:	68fb      	ldr	r3, [r7, #12]
}
 801b304:	4618      	mov	r0, r3
 801b306:	3710      	adds	r7, #16
 801b308:	46bd      	mov	sp, r7
 801b30a:	bd80      	pop	{r7, pc}
 801b30c:	08025984 	.word	0x08025984

0801b310 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801b310:	b580      	push	{r7, lr}
 801b312:	b082      	sub	sp, #8
 801b314:	af00      	add	r7, sp, #0
 801b316:	6078      	str	r0, [r7, #4]
 801b318:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	3328      	adds	r3, #40	; 0x28
 801b31e:	4907      	ldr	r1, [pc, #28]	; (801b33c <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801b320:	4618      	mov	r0, r3
 801b322:	f002 f8c9 	bl	801d4b8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	3328      	adds	r3, #40	; 0x28
 801b32a:	6839      	ldr	r1, [r7, #0]
 801b32c:	4618      	mov	r0, r3
 801b32e:	f001 ff9f 	bl	801d270 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801b332:	687b      	ldr	r3, [r7, #4]
}
 801b334:	4618      	mov	r0, r3
 801b336:	3708      	adds	r7, #8
 801b338:	46bd      	mov	sp, r7
 801b33a:	bd80      	pop	{r7, pc}
 801b33c:	08025984 	.word	0x08025984

0801b340 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b082      	sub	sp, #8
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
 801b348:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	3328      	adds	r3, #40	; 0x28
 801b34e:	4907      	ldr	r1, [pc, #28]	; (801b36c <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801b350:	4618      	mov	r0, r3
 801b352:	f002 f8b1 	bl	801d4b8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	3328      	adds	r3, #40	; 0x28
 801b35a:	6839      	ldr	r1, [r7, #0]
 801b35c:	4618      	mov	r0, r3
 801b35e:	f001 ffa9 	bl	801d2b4 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801b362:	687b      	ldr	r3, [r7, #4]
}
 801b364:	4618      	mov	r0, r3
 801b366:	3708      	adds	r7, #8
 801b368:	46bd      	mov	sp, r7
 801b36a:	bd80      	pop	{r7, pc}
 801b36c:	08025984 	.word	0x08025984

0801b370 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801b370:	b580      	push	{r7, lr}
 801b372:	b082      	sub	sp, #8
 801b374:	af00      	add	r7, sp, #0
 801b376:	6078      	str	r0, [r7, #4]
 801b378:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	3328      	adds	r3, #40	; 0x28
 801b37e:	4907      	ldr	r1, [pc, #28]	; (801b39c <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801b380:	4618      	mov	r0, r3
 801b382:	f002 f899 	bl	801d4b8 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	3328      	adds	r3, #40	; 0x28
 801b38a:	6839      	ldr	r1, [r7, #0]
 801b38c:	4618      	mov	r0, r3
 801b38e:	f001 ffb3 	bl	801d2f8 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801b392:	687b      	ldr	r3, [r7, #4]
}
 801b394:	4618      	mov	r0, r3
 801b396:	3708      	adds	r7, #8
 801b398:	46bd      	mov	sp, r7
 801b39a:	bd80      	pop	{r7, pc}
 801b39c:	08025984 	.word	0x08025984

0801b3a0 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801b3a0:	b480      	push	{r7}
 801b3a2:	b083      	sub	sp, #12
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
 801b3a8:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	2201      	movs	r2, #1
 801b3ae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	2200      	movs	r2, #0
 801b3b6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	683a      	ldr	r2, [r7, #0]
 801b3be:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801b3c0:	687b      	ldr	r3, [r7, #4]
}
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	370c      	adds	r7, #12
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3cc:	4770      	bx	lr

0801b3ce <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801b3ce:	b580      	push	{r7, lr}
 801b3d0:	b082      	sub	sp, #8
 801b3d2:	af00      	add	r7, sp, #0
 801b3d4:	6078      	str	r0, [r7, #4]
 801b3d6:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801b3d8:	683b      	ldr	r3, [r7, #0]
 801b3da:	3328      	adds	r3, #40	; 0x28
 801b3dc:	4619      	mov	r1, r3
 801b3de:	6878      	ldr	r0, [r7, #4]
 801b3e0:	f7ef f946 	bl	800a670 <_ZN14MockNamedValueC1ERKS_>
}
 801b3e4:	6878      	ldr	r0, [r7, #4]
 801b3e6:	3708      	adds	r7, #8
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	bd80      	pop	{r7, pc}

0801b3ec <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801b3ec:	b480      	push	{r7}
 801b3ee:	b085      	sub	sp, #20
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	60f8      	str	r0, [r7, #12]
 801b3f4:	60b9      	str	r1, [r7, #8]
 801b3f6:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	68ba      	ldr	r2, [r7, #8]
 801b3fc:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	687a      	ldr	r2, [r7, #4]
 801b402:	615a      	str	r2, [r3, #20]
    return *this;
 801b404:	68fb      	ldr	r3, [r7, #12]
}
 801b406:	4618      	mov	r0, r3
 801b408:	3714      	adds	r7, #20
 801b40a:	46bd      	mov	sp, r7
 801b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b410:	4770      	bx	lr

0801b412 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801b412:	b480      	push	{r7}
 801b414:	b083      	sub	sp, #12
 801b416:	af00      	add	r7, sp, #0
 801b418:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	7e1b      	ldrb	r3, [r3, #24]
}
 801b41e:	4618      	mov	r0, r3
 801b420:	370c      	adds	r7, #12
 801b422:	46bd      	mov	sp, r7
 801b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b428:	4770      	bx	lr

0801b42a <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801b42a:	b480      	push	{r7}
 801b42c:	b083      	sub	sp, #12
 801b42e:	af00      	add	r7, sp, #0
 801b430:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801b436:	4618      	mov	r0, r3
 801b438:	370c      	adds	r7, #12
 801b43a:	46bd      	mov	sp, r7
 801b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b440:	4770      	bx	lr
	...

0801b444 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801b444:	b580      	push	{r7, lr}
 801b446:	b082      	sub	sp, #8
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	4618      	mov	r0, r3
 801b450:	f7fe fcce 	bl	8019df0 <_ZN16MockExpectedCallC1Ev>
 801b454:	4a03      	ldr	r2, [pc, #12]	; (801b464 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	601a      	str	r2, [r3, #0]
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	4618      	mov	r0, r3
 801b45e:	3708      	adds	r7, #8
 801b460:	46bd      	mov	sp, r7
 801b462:	bd80      	pop	{r7, pc}
 801b464:	08028538 	.word	0x08028538

0801b468 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801b468:	b580      	push	{r7, lr}
 801b46a:	af00      	add	r7, sp, #0
 801b46c:	4801      	ldr	r0, [pc, #4]	; (801b474 <__tcf_0+0xc>)
 801b46e:	f000 f831 	bl	801b4d4 <_ZN23MockIgnoredExpectedCallD1Ev>
 801b472:	bd80      	pop	{r7, pc}
 801b474:	20000e58 	.word	0x20000e58

0801b478 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801b478:	b580      	push	{r7, lr}
 801b47a:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801b47c:	4b12      	ldr	r3, [pc, #72]	; (801b4c8 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b47e:	781b      	ldrb	r3, [r3, #0]
 801b480:	f3bf 8f5b 	dmb	ish
 801b484:	b2db      	uxtb	r3, r3
 801b486:	f003 0301 	and.w	r3, r3, #1
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	bf0c      	ite	eq
 801b48e:	2301      	moveq	r3, #1
 801b490:	2300      	movne	r3, #0
 801b492:	b2db      	uxtb	r3, r3
 801b494:	2b00      	cmp	r3, #0
 801b496:	d013      	beq.n	801b4c0 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801b498:	480b      	ldr	r0, [pc, #44]	; (801b4c8 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b49a:	f003 ff05 	bl	801f2a8 <__cxa_guard_acquire>
 801b49e:	4603      	mov	r3, r0
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	bf14      	ite	ne
 801b4a4:	2301      	movne	r3, #1
 801b4a6:	2300      	moveq	r3, #0
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d008      	beq.n	801b4c0 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801b4ae:	4807      	ldr	r0, [pc, #28]	; (801b4cc <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801b4b0:	f7ff ffc8 	bl	801b444 <_ZN23MockIgnoredExpectedCallC1Ev>
 801b4b4:	4804      	ldr	r0, [pc, #16]	; (801b4c8 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801b4b6:	f003 ff03 	bl	801f2c0 <__cxa_guard_release>
 801b4ba:	4805      	ldr	r0, [pc, #20]	; (801b4d0 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801b4bc:	f003 ff27 	bl	801f30e <atexit>
    return call;
 801b4c0:	4b02      	ldr	r3, [pc, #8]	; (801b4cc <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	bd80      	pop	{r7, pc}
 801b4c6:	bf00      	nop
 801b4c8:	20000e5c 	.word	0x20000e5c
 801b4cc:	20000e58 	.word	0x20000e58
 801b4d0:	0801b469 	.word	0x0801b469

0801b4d4 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801b4d4:	b580      	push	{r7, lr}
 801b4d6:	b082      	sub	sp, #8
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	6078      	str	r0, [r7, #4]
 801b4dc:	4a05      	ldr	r2, [pc, #20]	; (801b4f4 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	601a      	str	r2, [r3, #0]
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	f7fe fc93 	bl	8019e10 <_ZN16MockExpectedCallD1Ev>
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	3708      	adds	r7, #8
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	bd80      	pop	{r7, pc}
 801b4f4:	08028538 	.word	0x08028538

0801b4f8 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b082      	sub	sp, #8
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	6078      	str	r0, [r7, #4]
 801b500:	6878      	ldr	r0, [r7, #4]
 801b502:	f7ff ffe7 	bl	801b4d4 <_ZN23MockIgnoredExpectedCallD1Ev>
 801b506:	2104      	movs	r1, #4
 801b508:	6878      	ldr	r0, [r7, #4]
 801b50a:	f7ee fc5d 	bl	8009dc8 <_ZdlPvj>
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	4618      	mov	r0, r3
 801b512:	3708      	adds	r7, #8
 801b514:	46bd      	mov	sp, r7
 801b516:	bd80      	pop	{r7, pc}

0801b518 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801b518:	b580      	push	{r7, lr}
 801b51a:	b082      	sub	sp, #8
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
 801b520:	4a05      	ldr	r2, [pc, #20]	; (801b538 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	601a      	str	r2, [r3, #0]
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	4618      	mov	r0, r3
 801b52a:	f001 fd4b 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	4618      	mov	r0, r3
 801b532:	3708      	adds	r7, #8
 801b534:	46bd      	mov	sp, r7
 801b536:	bd80      	pop	{r7, pc}
 801b538:	080286d8 	.word	0x080286d8

0801b53c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b082      	sub	sp, #8
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
 801b544:	6878      	ldr	r0, [r7, #4]
 801b546:	f7ff ffe7 	bl	801b518 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801b54a:	2138      	movs	r1, #56	; 0x38
 801b54c:	6878      	ldr	r0, [r7, #4]
 801b54e:	f7ee fc3b 	bl	8009dc8 <_ZdlPvj>
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	4618      	mov	r0, r3
 801b556:	3708      	adds	r7, #8
 801b558:	46bd      	mov	sp, r7
 801b55a:	bd80      	pop	{r7, pc}

0801b55c <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801b55c:	b480      	push	{r7}
 801b55e:	b083      	sub	sp, #12
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
 801b564:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	683a      	ldr	r2, [r7, #0]
 801b56a:	601a      	str	r2, [r3, #0]
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	2200      	movs	r2, #0
 801b570:	605a      	str	r2, [r3, #4]
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	4618      	mov	r0, r3
 801b576:	370c      	adds	r7, #12
 801b578:	46bd      	mov	sp, r7
 801b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b57e:	4770      	bx	lr

0801b580 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801b580:	b480      	push	{r7}
 801b582:	b083      	sub	sp, #12
 801b584:	af00      	add	r7, sp, #0
 801b586:	6078      	str	r0, [r7, #4]
 801b588:	4a06      	ldr	r2, [pc, #24]	; (801b5a4 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	601a      	str	r2, [r3, #0]
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	2200      	movs	r2, #0
 801b592:	605a      	str	r2, [r3, #4]
{
}
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	4618      	mov	r0, r3
 801b598:	370c      	adds	r7, #12
 801b59a:	46bd      	mov	sp, r7
 801b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a0:	4770      	bx	lr
 801b5a2:	bf00      	nop
 801b5a4:	0802882c 	.word	0x0802882c

0801b5a8 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801b5a8:	b580      	push	{r7, lr}
 801b5aa:	b084      	sub	sp, #16
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]
 801b5b0:	4a0d      	ldr	r2, [pc, #52]	; (801b5e8 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	685b      	ldr	r3, [r3, #4]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d00f      	beq.n	801b5de <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	685b      	ldr	r3, [r3, #4]
 801b5c2:	685b      	ldr	r3, [r3, #4]
 801b5c4:	60fb      	str	r3, [r7, #12]
        delete head_;
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	685b      	ldr	r3, [r3, #4]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d003      	beq.n	801b5d6 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801b5ce:	2108      	movs	r1, #8
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	f7ee fbf9 	bl	8009dc8 <_ZdlPvj>
        head_ = next;
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	68fa      	ldr	r2, [r7, #12]
 801b5da:	605a      	str	r2, [r3, #4]
    while (head_) {
 801b5dc:	e7eb      	b.n	801b5b6 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	3710      	adds	r7, #16
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	bd80      	pop	{r7, pc}
 801b5e8:	0802882c 	.word	0x0802882c

0801b5ec <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b082      	sub	sp, #8
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	6078      	str	r0, [r7, #4]
}
 801b5f4:	6878      	ldr	r0, [r7, #4]
 801b5f6:	f7ff ffd7 	bl	801b5a8 <_ZN21MockExpectedCallsListD1Ev>
 801b5fa:	2108      	movs	r1, #8
 801b5fc:	6878      	ldr	r0, [r7, #4]
 801b5fe:	f7ee fbe3 	bl	8009dc8 <_ZdlPvj>
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	4618      	mov	r0, r3
 801b606:	3708      	adds	r7, #8
 801b608:	46bd      	mov	sp, r7
 801b60a:	bd80      	pop	{r7, pc}

0801b60c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b084      	sub	sp, #16
 801b610:	af00      	add	r7, sp, #0
 801b612:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	685b      	ldr	r3, [r3, #4]
 801b618:	60fb      	str	r3, [r7, #12]
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d011      	beq.n	801b644 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	681a      	ldr	r2, [r3, #0]
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	33d4      	adds	r3, #212	; 0xd4
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	4610      	mov	r0, r2
 801b630:	4798      	blx	r3
 801b632:	4603      	mov	r3, r0
 801b634:	2b00      	cmp	r3, #0
 801b636:	d001      	beq.n	801b63c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801b638:	2301      	movs	r3, #1
 801b63a:	e004      	b.n	801b646 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	685b      	ldr	r3, [r3, #4]
 801b640:	60fb      	str	r3, [r7, #12]
 801b642:	e7ea      	b.n	801b61a <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801b644:	2300      	movs	r3, #0
}
 801b646:	4618      	mov	r0, r3
 801b648:	3710      	adds	r7, #16
 801b64a:	46bd      	mov	sp, r7
 801b64c:	bd80      	pop	{r7, pc}

0801b64e <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801b64e:	b480      	push	{r7}
 801b650:	b085      	sub	sp, #20
 801b652:	af00      	add	r7, sp, #0
 801b654:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801b656:	2300      	movs	r3, #0
 801b658:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	685b      	ldr	r3, [r3, #4]
 801b65e:	60bb      	str	r3, [r7, #8]
 801b660:	68bb      	ldr	r3, [r7, #8]
 801b662:	2b00      	cmp	r3, #0
 801b664:	d006      	beq.n	801b674 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	3301      	adds	r3, #1
 801b66a:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b66c:	68bb      	ldr	r3, [r7, #8]
 801b66e:	685b      	ldr	r3, [r3, #4]
 801b670:	60bb      	str	r3, [r7, #8]
 801b672:	e7f5      	b.n	801b660 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801b674:	68fb      	ldr	r3, [r7, #12]
}
 801b676:	4618      	mov	r0, r3
 801b678:	3714      	adds	r7, #20
 801b67a:	46bd      	mov	sp, r7
 801b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b680:	4770      	bx	lr

0801b682 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801b682:	b480      	push	{r7}
 801b684:	b083      	sub	sp, #12
 801b686:	af00      	add	r7, sp, #0
 801b688:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	685b      	ldr	r3, [r3, #4]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	bf0c      	ite	eq
 801b692:	2301      	moveq	r3, #1
 801b694:	2300      	movne	r3, #0
 801b696:	b2db      	uxtb	r3, r3
}
 801b698:	4618      	mov	r0, r3
 801b69a:	370c      	adds	r7, #12
 801b69c:	46bd      	mov	sp, r7
 801b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a2:	4770      	bx	lr

0801b6a4 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801b6a4:	b580      	push	{r7, lr}
 801b6a6:	b084      	sub	sp, #16
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	6078      	str	r0, [r7, #4]
 801b6ac:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801b6ae:	2300      	movs	r3, #0
 801b6b0:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	685b      	ldr	r3, [r3, #4]
 801b6b6:	60bb      	str	r3, [r7, #8]
 801b6b8:	68bb      	ldr	r3, [r7, #8]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d01d      	beq.n	801b6fa <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801b6be:	68bb      	ldr	r3, [r7, #8]
 801b6c0:	681a      	ldr	r2, [r3, #0]
 801b6c2:	68bb      	ldr	r3, [r7, #8]
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	33b8      	adds	r3, #184	; 0xb8
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	6839      	ldr	r1, [r7, #0]
 801b6ce:	4610      	mov	r0, r2
 801b6d0:	4798      	blx	r3
 801b6d2:	4603      	mov	r3, r0
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d00c      	beq.n	801b6f2 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801b6d8:	68bb      	ldr	r3, [r7, #8]
 801b6da:	681a      	ldr	r2, [r3, #0]
 801b6dc:	68bb      	ldr	r3, [r7, #8]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	33f8      	adds	r3, #248	; 0xf8
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	4610      	mov	r0, r2
 801b6e8:	4798      	blx	r3
 801b6ea:	4602      	mov	r2, r0
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	4413      	add	r3, r2
 801b6f0:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b6f2:	68bb      	ldr	r3, [r7, #8]
 801b6f4:	685b      	ldr	r3, [r3, #4]
 801b6f6:	60bb      	str	r3, [r7, #8]
 801b6f8:	e7de      	b.n	801b6b8 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801b6fa:	68fb      	ldr	r3, [r7, #12]
}
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	3710      	adds	r7, #16
 801b700:	46bd      	mov	sp, r7
 801b702:	bd80      	pop	{r7, pc}

0801b704 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801b704:	b580      	push	{r7, lr}
 801b706:	b084      	sub	sp, #16
 801b708:	af00      	add	r7, sp, #0
 801b70a:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801b70c:	2300      	movs	r3, #0
 801b70e:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	685b      	ldr	r3, [r3, #4]
 801b714:	60bb      	str	r3, [r7, #8]
 801b716:	68bb      	ldr	r3, [r7, #8]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d015      	beq.n	801b748 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	681a      	ldr	r2, [r3, #0]
 801b720:	68bb      	ldr	r3, [r7, #8]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	33c0      	adds	r3, #192	; 0xc0
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	4610      	mov	r0, r2
 801b72c:	4798      	blx	r3
 801b72e:	4603      	mov	r3, r0
 801b730:	f083 0301 	eor.w	r3, r3, #1
 801b734:	b2db      	uxtb	r3, r3
 801b736:	2b00      	cmp	r3, #0
 801b738:	d002      	beq.n	801b740 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	3301      	adds	r3, #1
 801b73e:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b740:	68bb      	ldr	r3, [r7, #8]
 801b742:	685b      	ldr	r3, [r3, #4]
 801b744:	60bb      	str	r3, [r7, #8]
 801b746:	e7e6      	b.n	801b716 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801b748:	68fb      	ldr	r3, [r7, #12]
}
 801b74a:	4618      	mov	r0, r3
 801b74c:	3710      	adds	r7, #16
 801b74e:	46bd      	mov	sp, r7
 801b750:	bd80      	pop	{r7, pc}

0801b752 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801b752:	b580      	push	{r7, lr}
 801b754:	b084      	sub	sp, #16
 801b756:	af00      	add	r7, sp, #0
 801b758:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	685b      	ldr	r3, [r3, #4]
 801b75e:	60fb      	str	r3, [r7, #12]
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	2b00      	cmp	r3, #0
 801b764:	d011      	beq.n	801b78a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	681a      	ldr	r2, [r3, #0]
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	33c8      	adds	r3, #200	; 0xc8
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	4610      	mov	r0, r2
 801b776:	4798      	blx	r3
 801b778:	4603      	mov	r3, r0
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d001      	beq.n	801b782 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801b77e:	2301      	movs	r3, #1
 801b780:	e004      	b.n	801b78c <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	685b      	ldr	r3, [r3, #4]
 801b786:	60fb      	str	r3, [r7, #12]
 801b788:	e7ea      	b.n	801b760 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801b78a:	2300      	movs	r3, #0
}
 801b78c:	4618      	mov	r0, r3
 801b78e:	3710      	adds	r7, #16
 801b790:	46bd      	mov	sp, r7
 801b792:	bd80      	pop	{r7, pc}

0801b794 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b084      	sub	sp, #16
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	685b      	ldr	r3, [r3, #4]
 801b7a0:	60fb      	str	r3, [r7, #12]
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d014      	beq.n	801b7d2 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	681a      	ldr	r2, [r3, #0]
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	681b      	ldr	r3, [r3, #0]
 801b7b2:	33c0      	adds	r3, #192	; 0xc0
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	4610      	mov	r0, r2
 801b7b8:	4798      	blx	r3
 801b7ba:	4603      	mov	r3, r0
 801b7bc:	f083 0301 	eor.w	r3, r3, #1
 801b7c0:	b2db      	uxtb	r3, r3
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d001      	beq.n	801b7ca <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801b7c6:	2301      	movs	r3, #1
 801b7c8:	e004      	b.n	801b7d4 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801b7ca:	68fb      	ldr	r3, [r7, #12]
 801b7cc:	685b      	ldr	r3, [r3, #4]
 801b7ce:	60fb      	str	r3, [r7, #12]
 801b7d0:	e7e7      	b.n	801b7a2 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801b7d2:	2300      	movs	r3, #0
}
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	3710      	adds	r7, #16
 801b7d8:	46bd      	mov	sp, r7
 801b7da:	bd80      	pop	{r7, pc}

0801b7dc <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801b7dc:	b580      	push	{r7, lr}
 801b7de:	b084      	sub	sp, #16
 801b7e0:	af00      	add	r7, sp, #0
 801b7e2:	6078      	str	r0, [r7, #4]
 801b7e4:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	685b      	ldr	r3, [r3, #4]
 801b7ea:	60fb      	str	r3, [r7, #12]
 801b7ec:	68fb      	ldr	r3, [r7, #12]
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d012      	beq.n	801b818 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801b7f2:	68fb      	ldr	r3, [r7, #12]
 801b7f4:	681a      	ldr	r2, [r3, #0]
 801b7f6:	68fb      	ldr	r3, [r7, #12]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	33b8      	adds	r3, #184	; 0xb8
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	6839      	ldr	r1, [r7, #0]
 801b802:	4610      	mov	r0, r2
 801b804:	4798      	blx	r3
 801b806:	4603      	mov	r3, r0
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d001      	beq.n	801b810 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801b80c:	2301      	movs	r3, #1
 801b80e:	e004      	b.n	801b81a <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	685b      	ldr	r3, [r3, #4]
 801b814:	60fb      	str	r3, [r7, #12]
 801b816:	e7e9      	b.n	801b7ec <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801b818:	2300      	movs	r3, #0
}
 801b81a:	4618      	mov	r0, r3
 801b81c:	3710      	adds	r7, #16
 801b81e:	46bd      	mov	sp, r7
 801b820:	bd80      	pop	{r7, pc}
	...

0801b824 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801b824:	b590      	push	{r4, r7, lr}
 801b826:	b085      	sub	sp, #20
 801b828:	af00      	add	r7, sp, #0
 801b82a:	6078      	str	r0, [r7, #4]
 801b82c:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801b82e:	2273      	movs	r2, #115	; 0x73
 801b830:	4911      	ldr	r1, [pc, #68]	; (801b878 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801b832:	2008      	movs	r0, #8
 801b834:	f7ee fab4 	bl	8009da0 <_ZnwjPKci>
 801b838:	4604      	mov	r4, r0
 801b83a:	6839      	ldr	r1, [r7, #0]
 801b83c:	4620      	mov	r0, r4
 801b83e:	f7ff fe8d 	bl	801b55c <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801b842:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	685b      	ldr	r3, [r3, #4]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d103      	bne.n	801b854 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	68ba      	ldr	r2, [r7, #8]
 801b850:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801b852:	e00d      	b.n	801b870 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	685b      	ldr	r3, [r3, #4]
 801b858:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	685b      	ldr	r3, [r3, #4]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d003      	beq.n	801b86a <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	685b      	ldr	r3, [r3, #4]
 801b866:	60fb      	str	r3, [r7, #12]
 801b868:	e7f7      	b.n	801b85a <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	68ba      	ldr	r2, [r7, #8]
 801b86e:	605a      	str	r2, [r3, #4]
}
 801b870:	bf00      	nop
 801b872:	3714      	adds	r7, #20
 801b874:	46bd      	mov	sp, r7
 801b876:	bd90      	pop	{r4, r7, pc}
 801b878:	08025990 	.word	0x08025990

0801b87c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801b87c:	b580      	push	{r7, lr}
 801b87e:	b084      	sub	sp, #16
 801b880:	af00      	add	r7, sp, #0
 801b882:	6078      	str	r0, [r7, #4]
 801b884:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b886:	683b      	ldr	r3, [r7, #0]
 801b888:	685b      	ldr	r3, [r3, #4]
 801b88a:	60fb      	str	r3, [r7, #12]
 801b88c:	68fb      	ldr	r3, [r7, #12]
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d018      	beq.n	801b8c4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801b892:	68fb      	ldr	r3, [r7, #12]
 801b894:	681a      	ldr	r2, [r3, #0]
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	33c4      	adds	r3, #196	; 0xc4
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	4610      	mov	r0, r2
 801b8a2:	4798      	blx	r3
 801b8a4:	4603      	mov	r3, r0
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d008      	beq.n	801b8bc <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	3330      	adds	r3, #48	; 0x30
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	68fa      	ldr	r2, [r7, #12]
 801b8b4:	6812      	ldr	r2, [r2, #0]
 801b8b6:	4611      	mov	r1, r2
 801b8b8:	6878      	ldr	r0, [r7, #4]
 801b8ba:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	685b      	ldr	r3, [r3, #4]
 801b8c0:	60fb      	str	r3, [r7, #12]
 801b8c2:	e7e3      	b.n	801b88c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801b8c4:	bf00      	nop
 801b8c6:	3710      	adds	r7, #16
 801b8c8:	46bd      	mov	sp, r7
 801b8ca:	bd80      	pop	{r7, pc}

0801b8cc <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b086      	sub	sp, #24
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	60f8      	str	r0, [r7, #12]
 801b8d4:	60b9      	str	r1, [r7, #8]
 801b8d6:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	685b      	ldr	r3, [r3, #4]
 801b8dc:	617b      	str	r3, [r7, #20]
 801b8de:	697b      	ldr	r3, [r7, #20]
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d019      	beq.n	801b918 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801b8e4:	697b      	ldr	r3, [r7, #20]
 801b8e6:	681a      	ldr	r2, [r3, #0]
 801b8e8:	697b      	ldr	r3, [r7, #20]
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	33b8      	adds	r3, #184	; 0xb8
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	68b9      	ldr	r1, [r7, #8]
 801b8f4:	4610      	mov	r0, r2
 801b8f6:	4798      	blx	r3
 801b8f8:	4603      	mov	r3, r0
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d008      	beq.n	801b910 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801b8fe:	68fb      	ldr	r3, [r7, #12]
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	3330      	adds	r3, #48	; 0x30
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	697a      	ldr	r2, [r7, #20]
 801b908:	6812      	ldr	r2, [r2, #0]
 801b90a:	4611      	mov	r1, r2
 801b90c:	68f8      	ldr	r0, [r7, #12]
 801b90e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b910:	697b      	ldr	r3, [r7, #20]
 801b912:	685b      	ldr	r3, [r3, #4]
 801b914:	617b      	str	r3, [r7, #20]
 801b916:	e7e2      	b.n	801b8de <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801b918:	bf00      	nop
 801b91a:	3718      	adds	r7, #24
 801b91c:	46bd      	mov	sp, r7
 801b91e:	bd80      	pop	{r7, pc}

0801b920 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b084      	sub	sp, #16
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
 801b928:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b92a:	683b      	ldr	r3, [r7, #0]
 801b92c:	685b      	ldr	r3, [r3, #4]
 801b92e:	60fb      	str	r3, [r7, #12]
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	2b00      	cmp	r3, #0
 801b934:	d00c      	beq.n	801b950 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	3330      	adds	r3, #48	; 0x30
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	68fa      	ldr	r2, [r7, #12]
 801b940:	6812      	ldr	r2, [r2, #0]
 801b942:	4611      	mov	r1, r2
 801b944:	6878      	ldr	r0, [r7, #4]
 801b946:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	685b      	ldr	r3, [r3, #4]
 801b94c:	60fb      	str	r3, [r7, #12]
 801b94e:	e7ef      	b.n	801b930 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801b950:	bf00      	nop
 801b952:	3710      	adds	r7, #16
 801b954:	46bd      	mov	sp, r7
 801b956:	bd80      	pop	{r7, pc}

0801b958 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801b958:	b580      	push	{r7, lr}
 801b95a:	b084      	sub	sp, #16
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
 801b960:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	685b      	ldr	r3, [r3, #4]
 801b966:	60fb      	str	r3, [r7, #12]
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d016      	beq.n	801b99c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	681a      	ldr	r2, [r3, #0]
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	33b8      	adds	r3, #184	; 0xb8
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	6839      	ldr	r1, [r7, #0]
 801b97e:	4610      	mov	r0, r2
 801b980:	4798      	blx	r3
 801b982:	4603      	mov	r3, r0
 801b984:	f083 0301 	eor.w	r3, r3, #1
 801b988:	b2db      	uxtb	r3, r3
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d002      	beq.n	801b994 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801b98e:	68fb      	ldr	r3, [r7, #12]
 801b990:	2200      	movs	r2, #0
 801b992:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	685b      	ldr	r3, [r3, #4]
 801b998:	60fb      	str	r3, [r7, #12]
 801b99a:	e7e5      	b.n	801b968 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	3388      	adds	r3, #136	; 0x88
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	6878      	ldr	r0, [r7, #4]
 801b9a6:	4798      	blx	r3
}
 801b9a8:	bf00      	nop
 801b9aa:	3710      	adds	r7, #16
 801b9ac:	46bd      	mov	sp, r7
 801b9ae:	bd80      	pop	{r7, pc}

0801b9b0 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801b9b0:	b580      	push	{r7, lr}
 801b9b2:	b084      	sub	sp, #16
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	685b      	ldr	r3, [r3, #4]
 801b9bc:	60fb      	str	r3, [r7, #12]
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d015      	beq.n	801b9f0 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	681a      	ldr	r2, [r3, #0]
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	33d4      	adds	r3, #212	; 0xd4
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	4610      	mov	r0, r2
 801b9d4:	4798      	blx	r3
 801b9d6:	4603      	mov	r3, r0
 801b9d8:	f083 0301 	eor.w	r3, r3, #1
 801b9dc:	b2db      	uxtb	r3, r3
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d002      	beq.n	801b9e8 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801b9e2:	68fb      	ldr	r3, [r7, #12]
 801b9e4:	2200      	movs	r2, #0
 801b9e6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	685b      	ldr	r3, [r3, #4]
 801b9ec:	60fb      	str	r3, [r7, #12]
 801b9ee:	e7e6      	b.n	801b9be <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	3388      	adds	r3, #136	; 0x88
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	6878      	ldr	r0, [r7, #4]
 801b9fa:	4798      	blx	r3
}
 801b9fc:	bf00      	nop
 801b9fe:	3710      	adds	r7, #16
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd80      	pop	{r7, pc}

0801ba04 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b084      	sub	sp, #16
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	685b      	ldr	r3, [r3, #4]
 801ba10:	60fb      	str	r3, [r7, #12]
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d01b      	beq.n	801ba50 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801ba18:	68fb      	ldr	r3, [r7, #12]
 801ba1a:	681a      	ldr	r2, [r3, #0]
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	33c8      	adds	r3, #200	; 0xc8
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	4610      	mov	r0, r2
 801ba28:	4798      	blx	r3
 801ba2a:	4603      	mov	r3, r0
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d00b      	beq.n	801ba48 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801ba30:	68fb      	ldr	r3, [r7, #12]
 801ba32:	681a      	ldr	r2, [r3, #0]
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	33ec      	adds	r3, #236	; 0xec
 801ba3c:	681b      	ldr	r3, [r3, #0]
 801ba3e:	4610      	mov	r0, r2
 801ba40:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	2200      	movs	r2, #0
 801ba46:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	685b      	ldr	r3, [r3, #4]
 801ba4c:	60fb      	str	r3, [r7, #12]
 801ba4e:	e7e0      	b.n	801ba12 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	3388      	adds	r3, #136	; 0x88
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	6878      	ldr	r0, [r7, #4]
 801ba5a:	4798      	blx	r3
}
 801ba5c:	bf00      	nop
 801ba5e:	3710      	adds	r7, #16
 801ba60:	46bd      	mov	sp, r7
 801ba62:	bd80      	pop	{r7, pc}

0801ba64 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b084      	sub	sp, #16
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	6078      	str	r0, [r7, #4]
 801ba6c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	685b      	ldr	r3, [r3, #4]
 801ba72:	60fb      	str	r3, [r7, #12]
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d016      	beq.n	801baa8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	681a      	ldr	r2, [r3, #0]
 801ba7e:	68fb      	ldr	r3, [r7, #12]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	33a8      	adds	r3, #168	; 0xa8
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	6839      	ldr	r1, [r7, #0]
 801ba8a:	4610      	mov	r0, r2
 801ba8c:	4798      	blx	r3
 801ba8e:	4603      	mov	r3, r0
 801ba90:	f083 0301 	eor.w	r3, r3, #1
 801ba94:	b2db      	uxtb	r3, r3
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d002      	beq.n	801baa0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	685b      	ldr	r3, [r3, #4]
 801baa4:	60fb      	str	r3, [r7, #12]
 801baa6:	e7e5      	b.n	801ba74 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	3388      	adds	r3, #136	; 0x88
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	6878      	ldr	r0, [r7, #4]
 801bab2:	4798      	blx	r3
}
 801bab4:	bf00      	nop
 801bab6:	3710      	adds	r7, #16
 801bab8:	46bd      	mov	sp, r7
 801baba:	bd80      	pop	{r7, pc}

0801babc <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801babc:	b580      	push	{r7, lr}
 801babe:	b084      	sub	sp, #16
 801bac0:	af00      	add	r7, sp, #0
 801bac2:	6078      	str	r0, [r7, #4]
 801bac4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	685b      	ldr	r3, [r3, #4]
 801baca:	60fb      	str	r3, [r7, #12]
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d016      	beq.n	801bb00 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	681a      	ldr	r2, [r3, #0]
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	33b0      	adds	r3, #176	; 0xb0
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	6839      	ldr	r1, [r7, #0]
 801bae2:	4610      	mov	r0, r2
 801bae4:	4798      	blx	r3
 801bae6:	4603      	mov	r3, r0
 801bae8:	f083 0301 	eor.w	r3, r3, #1
 801baec:	b2db      	uxtb	r3, r3
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d002      	beq.n	801baf8 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	2200      	movs	r2, #0
 801baf6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	685b      	ldr	r3, [r3, #4]
 801bafc:	60fb      	str	r3, [r7, #12]
 801bafe:	e7e5      	b.n	801bacc <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	681b      	ldr	r3, [r3, #0]
 801bb04:	3388      	adds	r3, #136	; 0x88
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	6878      	ldr	r0, [r7, #4]
 801bb0a:	4798      	blx	r3
}
 801bb0c:	bf00      	nop
 801bb0e:	3710      	adds	r7, #16
 801bb10:	46bd      	mov	sp, r7
 801bb12:	bd80      	pop	{r7, pc}

0801bb14 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801bb14:	b580      	push	{r7, lr}
 801bb16:	b084      	sub	sp, #16
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	6078      	str	r0, [r7, #4]
 801bb1c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	685b      	ldr	r3, [r3, #4]
 801bb22:	60fb      	str	r3, [r7, #12]
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d016      	beq.n	801bb58 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801bb2a:	68fb      	ldr	r3, [r7, #12]
 801bb2c:	681a      	ldr	r2, [r3, #0]
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	33ac      	adds	r3, #172	; 0xac
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	6839      	ldr	r1, [r7, #0]
 801bb3a:	4610      	mov	r0, r2
 801bb3c:	4798      	blx	r3
 801bb3e:	4603      	mov	r3, r0
 801bb40:	f083 0301 	eor.w	r3, r3, #1
 801bb44:	b2db      	uxtb	r3, r3
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d002      	beq.n	801bb50 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	2200      	movs	r2, #0
 801bb4e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	685b      	ldr	r3, [r3, #4]
 801bb54:	60fb      	str	r3, [r7, #12]
 801bb56:	e7e5      	b.n	801bb24 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	3388      	adds	r3, #136	; 0x88
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	6878      	ldr	r0, [r7, #4]
 801bb62:	4798      	blx	r3
}
 801bb64:	bf00      	nop
 801bb66:	3710      	adds	r7, #16
 801bb68:	46bd      	mov	sp, r7
 801bb6a:	bd80      	pop	{r7, pc}

0801bb6c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b084      	sub	sp, #16
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	6078      	str	r0, [r7, #4]
 801bb74:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	685b      	ldr	r3, [r3, #4]
 801bb7a:	60fb      	str	r3, [r7, #12]
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d016      	beq.n	801bbb0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	681a      	ldr	r2, [r3, #0]
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	33b4      	adds	r3, #180	; 0xb4
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	6839      	ldr	r1, [r7, #0]
 801bb92:	4610      	mov	r0, r2
 801bb94:	4798      	blx	r3
 801bb96:	4603      	mov	r3, r0
 801bb98:	f083 0301 	eor.w	r3, r3, #1
 801bb9c:	b2db      	uxtb	r3, r3
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d002      	beq.n	801bba8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	2200      	movs	r2, #0
 801bba6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	685b      	ldr	r3, [r3, #4]
 801bbac:	60fb      	str	r3, [r7, #12]
 801bbae:	e7e5      	b.n	801bb7c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	3388      	adds	r3, #136	; 0x88
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	6878      	ldr	r0, [r7, #4]
 801bbba:	4798      	blx	r3
}
 801bbbc:	bf00      	nop
 801bbbe:	3710      	adds	r7, #16
 801bbc0:	46bd      	mov	sp, r7
 801bbc2:	bd80      	pop	{r7, pc}

0801bbc4 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801bbc4:	b580      	push	{r7, lr}
 801bbc6:	b084      	sub	sp, #16
 801bbc8:	af00      	add	r7, sp, #0
 801bbca:	6078      	str	r0, [r7, #4]
 801bbcc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	685b      	ldr	r3, [r3, #4]
 801bbd2:	60fb      	str	r3, [r7, #12]
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d016      	beq.n	801bc08 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	681a      	ldr	r2, [r3, #0]
 801bbde:	68fb      	ldr	r3, [r7, #12]
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	33bc      	adds	r3, #188	; 0xbc
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	6839      	ldr	r1, [r7, #0]
 801bbea:	4610      	mov	r0, r2
 801bbec:	4798      	blx	r3
 801bbee:	4603      	mov	r3, r0
 801bbf0:	f083 0301 	eor.w	r3, r3, #1
 801bbf4:	b2db      	uxtb	r3, r3
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d002      	beq.n	801bc00 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	2200      	movs	r2, #0
 801bbfe:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	685b      	ldr	r3, [r3, #4]
 801bc04:	60fb      	str	r3, [r7, #12]
 801bc06:	e7e5      	b.n	801bbd4 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	681b      	ldr	r3, [r3, #0]
 801bc0c:	3388      	adds	r3, #136	; 0x88
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	6878      	ldr	r0, [r7, #4]
 801bc12:	4798      	blx	r3
}
 801bc14:	bf00      	nop
 801bc16:	3710      	adds	r7, #16
 801bc18:	46bd      	mov	sp, r7
 801bc1a:	bd80      	pop	{r7, pc}

0801bc1c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801bc1c:	b580      	push	{r7, lr}
 801bc1e:	b084      	sub	sp, #16
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	685b      	ldr	r3, [r3, #4]
 801bc28:	60fb      	str	r3, [r7, #12]
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d01d      	beq.n	801bc6c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801bc30:	68fb      	ldr	r3, [r7, #12]
 801bc32:	681a      	ldr	r2, [r3, #0]
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	681b      	ldr	r3, [r3, #0]
 801bc3a:	33c8      	adds	r3, #200	; 0xc8
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	4610      	mov	r0, r2
 801bc40:	4798      	blx	r3
 801bc42:	4603      	mov	r3, r0
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d00d      	beq.n	801bc64 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801bc48:	68fb      	ldr	r3, [r7, #12]
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	2200      	movs	r2, #0
 801bc52:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	3388      	adds	r3, #136	; 0x88
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	6878      	ldr	r0, [r7, #4]
 801bc5e:	4798      	blx	r3
            return matchingCall;
 801bc60:	68bb      	ldr	r3, [r7, #8]
 801bc62:	e004      	b.n	801bc6e <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	685b      	ldr	r3, [r3, #4]
 801bc68:	60fb      	str	r3, [r7, #12]
 801bc6a:	e7de      	b.n	801bc2a <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bc6c:	2300      	movs	r3, #0
}
 801bc6e:	4618      	mov	r0, r3
 801bc70:	3710      	adds	r7, #16
 801bc72:	46bd      	mov	sp, r7
 801bc74:	bd80      	pop	{r7, pc}

0801bc76 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801bc76:	b580      	push	{r7, lr}
 801bc78:	b084      	sub	sp, #16
 801bc7a:	af00      	add	r7, sp, #0
 801bc7c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	685b      	ldr	r3, [r3, #4]
 801bc82:	60fb      	str	r3, [r7, #12]
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d012      	beq.n	801bcb0 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	681a      	ldr	r2, [r3, #0]
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	33cc      	adds	r3, #204	; 0xcc
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	4610      	mov	r0, r2
 801bc9a:	4798      	blx	r3
 801bc9c:	4603      	mov	r3, r0
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d002      	beq.n	801bca8 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801bca2:	68fb      	ldr	r3, [r7, #12]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	e004      	b.n	801bcb2 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bca8:	68fb      	ldr	r3, [r7, #12]
 801bcaa:	685b      	ldr	r3, [r3, #4]
 801bcac:	60fb      	str	r3, [r7, #12]
 801bcae:	e7e9      	b.n	801bc84 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bcb0:	2300      	movs	r3, #0
}
 801bcb2:	4618      	mov	r0, r3
 801bcb4:	3710      	adds	r7, #16
 801bcb6:	46bd      	mov	sp, r7
 801bcb8:	bd80      	pop	{r7, pc}

0801bcba <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801bcba:	b580      	push	{r7, lr}
 801bcbc:	b084      	sub	sp, #16
 801bcbe:	af00      	add	r7, sp, #0
 801bcc0:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	685b      	ldr	r3, [r3, #4]
 801bcc6:	60fb      	str	r3, [r7, #12]
 801bcc8:	68fb      	ldr	r3, [r7, #12]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d01d      	beq.n	801bd0a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	681a      	ldr	r2, [r3, #0]
 801bcd2:	68fb      	ldr	r3, [r7, #12]
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	681b      	ldr	r3, [r3, #0]
 801bcd8:	33cc      	adds	r3, #204	; 0xcc
 801bcda:	681b      	ldr	r3, [r3, #0]
 801bcdc:	4610      	mov	r0, r2
 801bcde:	4798      	blx	r3
 801bce0:	4603      	mov	r3, r0
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d00d      	beq.n	801bd02 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801bcec:	68fb      	ldr	r3, [r7, #12]
 801bcee:	2200      	movs	r2, #0
 801bcf0:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	3388      	adds	r3, #136	; 0x88
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	6878      	ldr	r0, [r7, #4]
 801bcfc:	4798      	blx	r3
            return matchingCall;
 801bcfe:	68bb      	ldr	r3, [r7, #8]
 801bd00:	e004      	b.n	801bd0c <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801bd02:	68fb      	ldr	r3, [r7, #12]
 801bd04:	685b      	ldr	r3, [r3, #4]
 801bd06:	60fb      	str	r3, [r7, #12]
 801bd08:	e7de      	b.n	801bcc8 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801bd0a:	2300      	movs	r3, #0
}
 801bd0c:	4618      	mov	r0, r3
 801bd0e:	3710      	adds	r7, #16
 801bd10:	46bd      	mov	sp, r7
 801bd12:	bd80      	pop	{r7, pc}

0801bd14 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801bd14:	b580      	push	{r7, lr}
 801bd16:	b086      	sub	sp, #24
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	685b      	ldr	r3, [r3, #4]
 801bd20:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801bd22:	2300      	movs	r3, #0
 801bd24:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801bd26:	2300      	movs	r3, #0
 801bd28:	60fb      	str	r3, [r7, #12]

    while (current) {
 801bd2a:	697b      	ldr	r3, [r7, #20]
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d024      	beq.n	801bd7a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801bd30:	697b      	ldr	r3, [r7, #20]
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d11a      	bne.n	801bd6e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801bd38:	697b      	ldr	r3, [r7, #20]
 801bd3a:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801bd3c:	693b      	ldr	r3, [r7, #16]
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d106      	bne.n	801bd50 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801bd42:	697b      	ldr	r3, [r7, #20]
 801bd44:	685b      	ldr	r3, [r3, #4]
 801bd46:	617b      	str	r3, [r7, #20]
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	697a      	ldr	r2, [r7, #20]
 801bd4c:	605a      	str	r2, [r3, #4]
 801bd4e:	e006      	b.n	801bd5e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801bd50:	697b      	ldr	r3, [r7, #20]
 801bd52:	685a      	ldr	r2, [r3, #4]
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	605a      	str	r2, [r3, #4]
 801bd58:	693b      	ldr	r3, [r7, #16]
 801bd5a:	685b      	ldr	r3, [r3, #4]
 801bd5c:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d0e2      	beq.n	801bd2a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801bd64:	2108      	movs	r1, #8
 801bd66:	4618      	mov	r0, r3
 801bd68:	f7ee f82e 	bl	8009dc8 <_ZdlPvj>
 801bd6c:	e7dd      	b.n	801bd2a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801bd6e:	697b      	ldr	r3, [r7, #20]
 801bd70:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801bd72:	697b      	ldr	r3, [r7, #20]
 801bd74:	685b      	ldr	r3, [r3, #4]
 801bd76:	617b      	str	r3, [r7, #20]
    while (current) {
 801bd78:	e7d7      	b.n	801bd2a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801bd7a:	bf00      	nop
 801bd7c:	3718      	adds	r7, #24
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	bd80      	pop	{r7, pc}

0801bd82 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801bd82:	b580      	push	{r7, lr}
 801bd84:	b084      	sub	sp, #16
 801bd86:	af00      	add	r7, sp, #0
 801bd88:	6078      	str	r0, [r7, #4]
    while (head_) {
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	685b      	ldr	r3, [r3, #4]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d019      	beq.n	801bdc6 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	685b      	ldr	r3, [r3, #4]
 801bd96:	685b      	ldr	r3, [r3, #4]
 801bd98:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	685b      	ldr	r3, [r3, #4]
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d004      	beq.n	801bdae <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801bda4:	681a      	ldr	r2, [r3, #0]
 801bda6:	3204      	adds	r2, #4
 801bda8:	6812      	ldr	r2, [r2, #0]
 801bdaa:	4618      	mov	r0, r3
 801bdac:	4790      	blx	r2
        delete head_;
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	685b      	ldr	r3, [r3, #4]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d003      	beq.n	801bdbe <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801bdb6:	2108      	movs	r1, #8
 801bdb8:	4618      	mov	r0, r3
 801bdba:	f7ee f805 	bl	8009dc8 <_ZdlPvj>
        head_ = next;
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	68fa      	ldr	r2, [r7, #12]
 801bdc2:	605a      	str	r2, [r3, #4]
    while (head_) {
 801bdc4:	e7e1      	b.n	801bd8a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801bdc6:	bf00      	nop
 801bdc8:	3710      	adds	r7, #16
 801bdca:	46bd      	mov	sp, r7
 801bdcc:	bd80      	pop	{r7, pc}

0801bdce <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801bdce:	b580      	push	{r7, lr}
 801bdd0:	b084      	sub	sp, #16
 801bdd2:	af00      	add	r7, sp, #0
 801bdd4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	685b      	ldr	r3, [r3, #4]
 801bdda:	60fb      	str	r3, [r7, #12]
 801bddc:	68fb      	ldr	r3, [r7, #12]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d00c      	beq.n	801bdfc <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801bde2:	68fb      	ldr	r3, [r7, #12]
 801bde4:	681a      	ldr	r2, [r3, #0]
 801bde6:	68fb      	ldr	r3, [r7, #12]
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	33ec      	adds	r3, #236	; 0xec
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	4610      	mov	r0, r2
 801bdf2:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	685b      	ldr	r3, [r3, #4]
 801bdf8:	60fb      	str	r3, [r7, #12]
 801bdfa:	e7ef      	b.n	801bddc <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801bdfc:	bf00      	nop
 801bdfe:	3710      	adds	r7, #16
 801be00:	46bd      	mov	sp, r7
 801be02:	bd80      	pop	{r7, pc}

0801be04 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b084      	sub	sp, #16
 801be08:	af00      	add	r7, sp, #0
 801be0a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	685b      	ldr	r3, [r3, #4]
 801be10:	60fb      	str	r3, [r7, #12]
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	2b00      	cmp	r3, #0
 801be16:	d00c      	beq.n	801be32 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	681a      	ldr	r2, [r3, #0]
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	33e8      	adds	r3, #232	; 0xe8
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	4610      	mov	r0, r2
 801be28:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	685b      	ldr	r3, [r3, #4]
 801be2e:	60fb      	str	r3, [r7, #12]
 801be30:	e7ef      	b.n	801be12 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801be32:	bf00      	nop
 801be34:	3710      	adds	r7, #16
 801be36:	46bd      	mov	sp, r7
 801be38:	bd80      	pop	{r7, pc}

0801be3a <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801be3a:	b580      	push	{r7, lr}
 801be3c:	b084      	sub	sp, #16
 801be3e:	af00      	add	r7, sp, #0
 801be40:	6078      	str	r0, [r7, #4]
 801be42:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	685b      	ldr	r3, [r3, #4]
 801be48:	60fb      	str	r3, [r7, #12]
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d00d      	beq.n	801be6c <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	681a      	ldr	r2, [r3, #0]
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	33dc      	adds	r3, #220	; 0xdc
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	6839      	ldr	r1, [r7, #0]
 801be60:	4610      	mov	r0, r2
 801be62:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	685b      	ldr	r3, [r3, #4]
 801be68:	60fb      	str	r3, [r7, #12]
 801be6a:	e7ee      	b.n	801be4a <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801be6c:	bf00      	nop
 801be6e:	3710      	adds	r7, #16
 801be70:	46bd      	mov	sp, r7
 801be72:	bd80      	pop	{r7, pc}

0801be74 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801be74:	b580      	push	{r7, lr}
 801be76:	b084      	sub	sp, #16
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
 801be7c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	685b      	ldr	r3, [r3, #4]
 801be82:	60fb      	str	r3, [r7, #12]
 801be84:	68fb      	ldr	r3, [r7, #12]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d00d      	beq.n	801bea6 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	681a      	ldr	r2, [r3, #0]
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	33e0      	adds	r3, #224	; 0xe0
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	6839      	ldr	r1, [r7, #0]
 801be9a:	4610      	mov	r0, r2
 801be9c:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	685b      	ldr	r3, [r3, #4]
 801bea2:	60fb      	str	r3, [r7, #12]
 801bea4:	e7ee      	b.n	801be84 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801bea6:	bf00      	nop
 801bea8:	3710      	adds	r7, #16
 801beaa:	46bd      	mov	sp, r7
 801beac:	bd80      	pop	{r7, pc}
	...

0801beb0 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801beb0:	b590      	push	{r4, r7, lr}
 801beb2:	b087      	sub	sp, #28
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	60f8      	str	r0, [r7, #12]
 801beb8:	60b9      	str	r1, [r7, #8]
 801beba:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801bebc:	68b9      	ldr	r1, [r7, #8]
 801bebe:	68f8      	ldr	r0, [r7, #12]
 801bec0:	f7f0 fb85 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801bec4:	f107 0310 	add.w	r3, r7, #16
 801bec8:	490f      	ldr	r1, [pc, #60]	; (801bf08 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801beca:	4618      	mov	r0, r3
 801becc:	f7f0 fb2b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801bed0:	f107 0310 	add.w	r3, r7, #16
 801bed4:	4619      	mov	r1, r3
 801bed6:	68f8      	ldr	r0, [r7, #12]
 801bed8:	f7f0 fee9 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801bedc:	4603      	mov	r3, r0
 801bede:	461c      	mov	r4, r3
 801bee0:	f107 0310 	add.w	r3, r7, #16
 801bee4:	4618      	mov	r0, r3
 801bee6:	f7f0 fed6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801beea:	2c00      	cmp	r4, #0
 801beec:	d007      	beq.n	801befe <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801beee:	6879      	ldr	r1, [r7, #4]
 801bef0:	68f8      	ldr	r0, [r7, #12]
 801bef2:	f7f0 ff4d 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801bef6:	4905      	ldr	r1, [pc, #20]	; (801bf0c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801bef8:	68f8      	ldr	r0, [r7, #12]
 801befa:	f7f0 ff5b 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801befe:	bf00      	nop
}
 801bf00:	68f8      	ldr	r0, [r7, #12]
 801bf02:	371c      	adds	r7, #28
 801bf04:	46bd      	mov	sp, r7
 801bf06:	bd90      	pop	{r4, r7, pc}
 801bf08:	080259b4 	.word	0x080259b4
 801bf0c:	080259b8 	.word	0x080259b8

0801bf10 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801bf10:	b590      	push	{r4, r7, lr}
 801bf12:	b087      	sub	sp, #28
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	60f8      	str	r0, [r7, #12]
 801bf18:	60b9      	str	r1, [r7, #8]
 801bf1a:	607a      	str	r2, [r7, #4]
 801bf1c:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801bf1e:	68b9      	ldr	r1, [r7, #8]
 801bf20:	68f8      	ldr	r0, [r7, #12]
 801bf22:	f7f0 fb54 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801bf26:	f107 0310 	add.w	r3, r7, #16
 801bf2a:	4912      	ldr	r1, [pc, #72]	; (801bf74 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801bf2c:	4618      	mov	r0, r3
 801bf2e:	f7f0 fafa 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801bf32:	f107 0310 	add.w	r3, r7, #16
 801bf36:	4619      	mov	r1, r3
 801bf38:	68f8      	ldr	r0, [r7, #12]
 801bf3a:	f7f0 fefd 	bl	800cd38 <_ZneRK12SimpleStringS1_>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	461c      	mov	r4, r3
 801bf42:	f107 0310 	add.w	r3, r7, #16
 801bf46:	4618      	mov	r0, r3
 801bf48:	f7f0 fea5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801bf4c:	2c00      	cmp	r4, #0
 801bf4e:	d003      	beq.n	801bf58 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801bf50:	4909      	ldr	r1, [pc, #36]	; (801bf78 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801bf52:	68f8      	ldr	r0, [r7, #12]
 801bf54:	f7f0 ff2e 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801bf58:	6879      	ldr	r1, [r7, #4]
 801bf5a:	68f8      	ldr	r0, [r7, #12]
 801bf5c:	f7f0 ff18 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801bf60:	6839      	ldr	r1, [r7, #0]
 801bf62:	68f8      	ldr	r0, [r7, #12]
 801bf64:	f7f0 ff14 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    return str;
 801bf68:	bf00      	nop
}
 801bf6a:	68f8      	ldr	r0, [r7, #12]
 801bf6c:	371c      	adds	r7, #28
 801bf6e:	46bd      	mov	sp, r7
 801bf70:	bd90      	pop	{r4, r7, pc}
 801bf72:	bf00      	nop
 801bf74:	080259b4 	.word	0x080259b4
 801bf78:	080259c0 	.word	0x080259c0

0801bf7c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801bf7c:	b580      	push	{r7, lr}
 801bf7e:	b08c      	sub	sp, #48	; 0x30
 801bf80:	af00      	add	r7, sp, #0
 801bf82:	60f8      	str	r0, [r7, #12]
 801bf84:	60b9      	str	r1, [r7, #8]
 801bf86:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801bf88:	f107 0314 	add.w	r3, r7, #20
 801bf8c:	4929      	ldr	r1, [pc, #164]	; (801c034 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801bf8e:	4618      	mov	r0, r3
 801bf90:	f7f0 fac9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801bf94:	68bb      	ldr	r3, [r7, #8]
 801bf96:	685b      	ldr	r3, [r3, #4]
 801bf98:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d038      	beq.n	801c012 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfa2:	681a      	ldr	r2, [r3, #0]
 801bfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	33c0      	adds	r3, #192	; 0xc0
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	4610      	mov	r0, r2
 801bfb0:	4798      	blx	r3
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	f083 0301 	eor.w	r3, r3, #1
 801bfb8:	b2db      	uxtb	r3, r3
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d025      	beq.n	801c00a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801bfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfc0:	6819      	ldr	r1, [r3, #0]
 801bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	33f0      	adds	r3, #240	; 0xf0
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801bfd0:	4610      	mov	r0, r2
 801bfd2:	4798      	blx	r3
 801bfd4:	f107 001c 	add.w	r0, r7, #28
 801bfd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bfdc:	f107 0114 	add.w	r1, r7, #20
 801bfe0:	687a      	ldr	r2, [r7, #4]
 801bfe2:	f7ff ff95 	bl	801bf10 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801bfe6:	f107 021c 	add.w	r2, r7, #28
 801bfea:	f107 0314 	add.w	r3, r7, #20
 801bfee:	4611      	mov	r1, r2
 801bff0:	4618      	mov	r0, r3
 801bff2:	f7f0 fb04 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801bff6:	f107 031c 	add.w	r3, r7, #28
 801bffa:	4618      	mov	r0, r3
 801bffc:	f7f0 fe4b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c004:	4618      	mov	r0, r3
 801c006:	f7f0 fe46 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c00c:	685b      	ldr	r3, [r3, #4]
 801c00e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c010:	e7c3      	b.n	801bf9a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	f107 0114 	add.w	r1, r7, #20
 801c018:	687a      	ldr	r2, [r7, #4]
 801c01a:	4618      	mov	r0, r3
 801c01c:	f7ff ff48 	bl	801beb0 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c020:	f107 0314 	add.w	r3, r7, #20
 801c024:	4618      	mov	r0, r3
 801c026:	f7f0 fe36 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c02a:	bf00      	nop
}
 801c02c:	68f8      	ldr	r0, [r7, #12]
 801c02e:	3730      	adds	r7, #48	; 0x30
 801c030:	46bd      	mov	sp, r7
 801c032:	bd80      	pop	{r7, pc}
 801c034:	080259b4 	.word	0x080259b4

0801c038 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801c038:	b580      	push	{r7, lr}
 801c03a:	b08c      	sub	sp, #48	; 0x30
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	60f8      	str	r0, [r7, #12]
 801c040:	60b9      	str	r1, [r7, #8]
 801c042:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801c044:	f107 0314 	add.w	r3, r7, #20
 801c048:	4928      	ldr	r1, [pc, #160]	; (801c0ec <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801c04a:	4618      	mov	r0, r3
 801c04c:	f7f0 fa6b 	bl	800c526 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c050:	68bb      	ldr	r3, [r7, #8]
 801c052:	685b      	ldr	r3, [r3, #4]
 801c054:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d035      	beq.n	801c0c8 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801c05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c05e:	681a      	ldr	r2, [r3, #0]
 801c060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c062:	681b      	ldr	r3, [r3, #0]
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	33c0      	adds	r3, #192	; 0xc0
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	4610      	mov	r0, r2
 801c06c:	4798      	blx	r3
 801c06e:	4603      	mov	r3, r0
 801c070:	2b00      	cmp	r3, #0
 801c072:	d025      	beq.n	801c0c0 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801c074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c076:	6819      	ldr	r1, [r3, #0]
 801c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	33f0      	adds	r3, #240	; 0xf0
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c086:	4610      	mov	r0, r2
 801c088:	4798      	blx	r3
 801c08a:	f107 001c 	add.w	r0, r7, #28
 801c08e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c092:	f107 0114 	add.w	r1, r7, #20
 801c096:	687a      	ldr	r2, [r7, #4]
 801c098:	f7ff ff3a 	bl	801bf10 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c09c:	f107 021c 	add.w	r2, r7, #28
 801c0a0:	f107 0314 	add.w	r3, r7, #20
 801c0a4:	4611      	mov	r1, r2
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f7f0 faa9 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801c0ac:	f107 031c 	add.w	r3, r7, #28
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	f7f0 fdf0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c0b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	f7f0 fdeb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0c2:	685b      	ldr	r3, [r3, #4]
 801c0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c0c6:	e7c6      	b.n	801c056 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	f107 0114 	add.w	r1, r7, #20
 801c0ce:	687a      	ldr	r2, [r7, #4]
 801c0d0:	4618      	mov	r0, r3
 801c0d2:	f7ff feed 	bl	801beb0 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801c0d6:	f107 0314 	add.w	r3, r7, #20
 801c0da:	4618      	mov	r0, r3
 801c0dc:	f7f0 fddb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801c0e0:	bf00      	nop
}
 801c0e2:	68f8      	ldr	r0, [r7, #12]
 801c0e4:	3730      	adds	r7, #48	; 0x30
 801c0e6:	46bd      	mov	sp, r7
 801c0e8:	bd80      	pop	{r7, pc}
 801c0ea:	bf00      	nop
 801c0ec:	080259b4 	.word	0x080259b4

0801c0f0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	b08e      	sub	sp, #56	; 0x38
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	6078      	str	r0, [r7, #4]
 801c0f8:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c0fa:	f107 030c 	add.w	r3, r7, #12
 801c0fe:	4936      	ldr	r1, [pc, #216]	; (801c1d8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c100:	4618      	mov	r0, r3
 801c102:	f7f0 fa10 	bl	800c526 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c106:	683b      	ldr	r3, [r7, #0]
 801c108:	685b      	ldr	r3, [r3, #4]
 801c10a:	637b      	str	r3, [r7, #52]	; 0x34
 801c10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d044      	beq.n	801c19c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801c112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c114:	681a      	ldr	r2, [r3, #0]
 801c116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	33cc      	adds	r3, #204	; 0xcc
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	4610      	mov	r0, r2
 801c122:	4798      	blx	r3
 801c124:	4603      	mov	r3, r0
 801c126:	f083 0301 	eor.w	r3, r3, #1
 801c12a:	b2db      	uxtb	r3, r3
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d031      	beq.n	801c194 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801c130:	f107 031c 	add.w	r3, r7, #28
 801c134:	4928      	ldr	r1, [pc, #160]	; (801c1d8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c136:	4618      	mov	r0, r3
 801c138:	f7f0 f9f5 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c13e:	6819      	ldr	r1, [r3, #0]
 801c140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	33f4      	adds	r3, #244	; 0xf4
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c14e:	4610      	mov	r0, r2
 801c150:	4798      	blx	r3
 801c152:	f107 0014 	add.w	r0, r7, #20
 801c156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c15a:	f107 021c 	add.w	r2, r7, #28
 801c15e:	f107 010c 	add.w	r1, r7, #12
 801c162:	f7ff fed5 	bl	801bf10 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801c166:	f107 0214 	add.w	r2, r7, #20
 801c16a:	f107 030c 	add.w	r3, r7, #12
 801c16e:	4611      	mov	r1, r2
 801c170:	4618      	mov	r0, r3
 801c172:	f7f0 fa44 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801c176:	f107 0314 	add.w	r3, r7, #20
 801c17a:	4618      	mov	r0, r3
 801c17c:	f7f0 fd8b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c184:	4618      	mov	r0, r3
 801c186:	f7f0 fd86 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c18a:	f107 031c 	add.w	r3, r7, #28
 801c18e:	4618      	mov	r0, r3
 801c190:	f7f0 fd81 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c196:	685b      	ldr	r3, [r3, #4]
 801c198:	637b      	str	r3, [r7, #52]	; 0x34
 801c19a:	e7b7      	b.n	801c10c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801c19c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c1a0:	490d      	ldr	r1, [pc, #52]	; (801c1d8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	f7f0 f9bf 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c1ae:	f107 010c 	add.w	r1, r7, #12
 801c1b2:	4618      	mov	r0, r3
 801c1b4:	f7ff fe7c 	bl	801beb0 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801c1b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c1bc:	4618      	mov	r0, r3
 801c1be:	f7f0 fd6a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801c1c2:	f107 030c 	add.w	r3, r7, #12
 801c1c6:	4618      	mov	r0, r3
 801c1c8:	f7f0 fd65 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801c1cc:	bf00      	nop
}
 801c1ce:	6878      	ldr	r0, [r7, #4]
 801c1d0:	3738      	adds	r7, #56	; 0x38
 801c1d2:	46bd      	mov	sp, r7
 801c1d4:	bd80      	pop	{r7, pc}
 801c1d6:	bf00      	nop
 801c1d8:	080259b4 	.word	0x080259b4

0801c1dc <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801c1dc:	b580      	push	{r7, lr}
 801c1de:	b084      	sub	sp, #16
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	685b      	ldr	r3, [r3, #4]
 801c1e8:	60fb      	str	r3, [r7, #12]
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d014      	beq.n	801c21a <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	681a      	ldr	r2, [r3, #0]
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	33d0      	adds	r3, #208	; 0xd0
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	4610      	mov	r0, r2
 801c200:	4798      	blx	r3
 801c202:	4603      	mov	r3, r0
 801c204:	f083 0301 	eor.w	r3, r3, #1
 801c208:	b2db      	uxtb	r3, r3
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d001      	beq.n	801c212 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801c20e:	2301      	movs	r3, #1
 801c210:	e004      	b.n	801c21c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	685b      	ldr	r3, [r3, #4]
 801c216:	60fb      	str	r3, [r7, #12]
 801c218:	e7e7      	b.n	801c1ea <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801c21a:	2300      	movs	r3, #0
}
 801c21c:	4618      	mov	r0, r3
 801c21e:	3710      	adds	r7, #16
 801c220:	46bd      	mov	sp, r7
 801c222:	bd80      	pop	{r7, pc}

0801c224 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801c224:	b480      	push	{r7}
 801c226:	b083      	sub	sp, #12
 801c228:	af00      	add	r7, sp, #0
 801c22a:	6078      	str	r0, [r7, #4]
 801c22c:	460b      	mov	r3, r1
 801c22e:	70fb      	strb	r3, [r7, #3]
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	78fa      	ldrb	r2, [r7, #3]
 801c234:	711a      	strb	r2, [r3, #4]
 801c236:	bf00      	nop
 801c238:	370c      	adds	r7, #12
 801c23a:	46bd      	mov	sp, r7
 801c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c240:	4770      	bx	lr
	...

0801c244 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801c244:	b580      	push	{r7, lr}
 801c246:	b082      	sub	sp, #8
 801c248:	af00      	add	r7, sp, #0
 801c24a:	6078      	str	r0, [r7, #4]
 801c24c:	460b      	mov	r3, r1
 801c24e:	70fb      	strb	r3, [r7, #3]
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	4618      	mov	r0, r3
 801c254:	f7ed ff6a 	bl	800a12c <_ZN14TestTerminatorC1Ev>
 801c258:	4a05      	ldr	r2, [pc, #20]	; (801c270 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	601a      	str	r2, [r3, #0]
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	78fa      	ldrb	r2, [r7, #3]
 801c262:	711a      	strb	r2, [r3, #4]
    {
    }
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	4618      	mov	r0, r3
 801c268:	3708      	adds	r7, #8
 801c26a:	46bd      	mov	sp, r7
 801c26c:	bd80      	pop	{r7, pc}
 801c26e:	bf00      	nop
 801c270:	080288c0 	.word	0x080288c0

0801c274 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801c274:	b580      	push	{r7, lr}
 801c276:	b082      	sub	sp, #8
 801c278:	af00      	add	r7, sp, #0
 801c27a:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	791b      	ldrb	r3, [r3, #4]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d001      	beq.n	801c288 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801c284:	f7f6 f9fe 	bl	8012684 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801c288:	f7f7 fd40 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c28c:	4603      	mov	r3, r0
 801c28e:	681a      	ldr	r2, [r3, #0]
 801c290:	6812      	ldr	r2, [r2, #0]
 801c292:	4618      	mov	r0, r3
 801c294:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801c296:	bf00      	nop
 801c298:	3708      	adds	r7, #8
 801c29a:	46bd      	mov	sp, r7
 801c29c:	bd80      	pop	{r7, pc}
	...

0801c2a0 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801c2a0:	b580      	push	{r7, lr}
 801c2a2:	b082      	sub	sp, #8
 801c2a4:	af00      	add	r7, sp, #0
 801c2a6:	6078      	str	r0, [r7, #4]
    {
 801c2a8:	4a05      	ldr	r2, [pc, #20]	; (801c2c0 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	601a      	str	r2, [r3, #0]
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	4618      	mov	r0, r3
 801c2b2:	f7f7 fdbb 	bl	8013e2c <_ZN14TestTerminatorD1Ev>
    }
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	4618      	mov	r0, r3
 801c2ba:	3708      	adds	r7, #8
 801c2bc:	46bd      	mov	sp, r7
 801c2be:	bd80      	pop	{r7, pc}
 801c2c0:	080288c0 	.word	0x080288c0

0801c2c4 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801c2c4:	b580      	push	{r7, lr}
 801c2c6:	b082      	sub	sp, #8
 801c2c8:	af00      	add	r7, sp, #0
 801c2ca:	6078      	str	r0, [r7, #4]
    }
 801c2cc:	6878      	ldr	r0, [r7, #4]
 801c2ce:	f7ff ffe7 	bl	801c2a0 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801c2d2:	2108      	movs	r1, #8
 801c2d4:	6878      	ldr	r0, [r7, #4]
 801c2d6:	f7ed fd77 	bl	8009dc8 <_ZdlPvj>
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	4618      	mov	r0, r3
 801c2de:	3708      	adds	r7, #8
 801c2e0:	46bd      	mov	sp, r7
 801c2e2:	bd80      	pop	{r7, pc}

0801c2e4 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801c2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2e6:	b085      	sub	sp, #20
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]
 801c2ec:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	330c      	adds	r3, #12
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	6878      	ldr	r0, [r7, #4]
 801c2f8:	4798      	blx	r3
 801c2fa:	4603      	mov	r3, r0
 801c2fc:	681a      	ldr	r2, [r3, #0]
 801c2fe:	321c      	adds	r2, #28
 801c300:	6812      	ldr	r2, [r2, #0]
 801c302:	4618      	mov	r0, r3
 801c304:	4790      	blx	r2
 801c306:	4603      	mov	r3, r0
 801c308:	f083 0301 	eor.w	r3, r3, #1
 801c30c:	b2db      	uxtb	r3, r3
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d01d      	beq.n	801c34e <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	330c      	adds	r3, #12
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	6878      	ldr	r0, [r7, #4]
 801c31c:	4798      	blx	r3
 801c31e:	4604      	mov	r4, r0
 801c320:	6823      	ldr	r3, [r4, #0]
 801c322:	339c      	adds	r3, #156	; 0x9c
 801c324:	681d      	ldr	r5, [r3, #0]
 801c326:	683e      	ldr	r6, [r7, #0]
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	791a      	ldrb	r2, [r3, #4]
 801c32c:	f107 0308 	add.w	r3, r7, #8
 801c330:	4611      	mov	r1, r2
 801c332:	4618      	mov	r0, r3
 801c334:	f7ff ff86 	bl	801c244 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801c338:	f107 0308 	add.w	r3, r7, #8
 801c33c:	461a      	mov	r2, r3
 801c33e:	4631      	mov	r1, r6
 801c340:	4620      	mov	r0, r4
 801c342:	47a8      	blx	r5
 801c344:	f107 0308 	add.w	r3, r7, #8
 801c348:	4618      	mov	r0, r3
 801c34a:	f7ff ffa9 	bl	801c2a0 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801c34e:	bf00      	nop
 801c350:	3714      	adds	r7, #20
 801c352:	46bd      	mov	sp, r7
 801c354:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c356 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801c356:	b580      	push	{r7, lr}
 801c358:	b082      	sub	sp, #8
 801c35a:	af00      	add	r7, sp, #0
 801c35c:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801c35e:	f7f7 fcc5 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801c362:	4603      	mov	r3, r0
}
 801c364:	4618      	mov	r0, r3
 801c366:	3708      	adds	r7, #8
 801c368:	46bd      	mov	sp, r7
 801c36a:	bd80      	pop	{r7, pc}

0801c36c <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801c36c:	b590      	push	{r4, r7, lr}
 801c36e:	b085      	sub	sp, #20
 801c370:	af00      	add	r7, sp, #0
 801c372:	6078      	str	r0, [r7, #4]
 801c374:	6039      	str	r1, [r7, #0]
 801c376:	687c      	ldr	r4, [r7, #4]
 801c378:	f107 0308 	add.w	r3, r7, #8
 801c37c:	490b      	ldr	r1, [pc, #44]	; (801c3ac <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801c37e:	4618      	mov	r0, r3
 801c380:	f7f0 f8d1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c384:	f107 0308 	add.w	r3, r7, #8
 801c388:	461a      	mov	r2, r3
 801c38a:	6839      	ldr	r1, [r7, #0]
 801c38c:	4620      	mov	r0, r4
 801c38e:	f7f1 ff29 	bl	800e1e4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801c392:	f107 0308 	add.w	r3, r7, #8
 801c396:	4618      	mov	r0, r3
 801c398:	f7f0 fc7d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c39c:	4a04      	ldr	r2, [pc, #16]	; (801c3b0 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	601a      	str	r2, [r3, #0]
{
}
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	4618      	mov	r0, r3
 801c3a6:	3714      	adds	r7, #20
 801c3a8:	46bd      	mov	sp, r7
 801c3aa:	bd90      	pop	{r4, r7, pc}
 801c3ac:	080259c4 	.word	0x080259c4
 801c3b0:	0802784c 	.word	0x0802784c

0801c3b4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801c3b4:	b5b0      	push	{r4, r5, r7, lr}
 801c3b6:	b08a      	sub	sp, #40	; 0x28
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]
 801c3bc:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	332c      	adds	r3, #44	; 0x2c
 801c3c2:	492b      	ldr	r1, [pc, #172]	; (801c470 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801c3c4:	4618      	mov	r0, r3
 801c3c6:	f7f0 fcf5 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801c3d0:	683b      	ldr	r3, [r7, #0]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	337c      	adds	r3, #124	; 0x7c
 801c3d6:	681c      	ldr	r4, [r3, #0]
 801c3d8:	f107 0310 	add.w	r3, r7, #16
 801c3dc:	4925      	ldr	r1, [pc, #148]	; (801c474 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801c3de:	4618      	mov	r0, r3
 801c3e0:	f7f0 f8a1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c3e4:	f107 0308 	add.w	r3, r7, #8
 801c3e8:	f107 0210 	add.w	r2, r7, #16
 801c3ec:	6839      	ldr	r1, [r7, #0]
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	47a0      	blx	r4
 801c3f2:	f107 0308 	add.w	r3, r7, #8
 801c3f6:	4619      	mov	r1, r3
 801c3f8:	4628      	mov	r0, r5
 801c3fa:	f7f0 fcc9 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801c3fe:	f107 0308 	add.w	r3, r7, #8
 801c402:	4618      	mov	r0, r3
 801c404:	f7f0 fc47 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c408:	f107 0310 	add.w	r3, r7, #16
 801c40c:	4618      	mov	r0, r3
 801c40e:	f7f0 fc42 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	332c      	adds	r3, #44	; 0x2c
 801c416:	4918      	ldr	r1, [pc, #96]	; (801c478 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801c418:	4618      	mov	r0, r3
 801c41a:	f7f0 fccb 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801c424:	683b      	ldr	r3, [r7, #0]
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	3380      	adds	r3, #128	; 0x80
 801c42a:	681c      	ldr	r4, [r3, #0]
 801c42c:	f107 0320 	add.w	r3, r7, #32
 801c430:	4910      	ldr	r1, [pc, #64]	; (801c474 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801c432:	4618      	mov	r0, r3
 801c434:	f7f0 f877 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c438:	f107 0318 	add.w	r3, r7, #24
 801c43c:	f107 0220 	add.w	r2, r7, #32
 801c440:	6839      	ldr	r1, [r7, #0]
 801c442:	4618      	mov	r0, r3
 801c444:	47a0      	blx	r4
 801c446:	f107 0318 	add.w	r3, r7, #24
 801c44a:	4619      	mov	r1, r3
 801c44c:	4628      	mov	r0, r5
 801c44e:	f7f0 fc9f 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801c452:	f107 0318 	add.w	r3, r7, #24
 801c456:	4618      	mov	r0, r3
 801c458:	f7f0 fc1d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c45c:	f107 0320 	add.w	r3, r7, #32
 801c460:	4618      	mov	r0, r3
 801c462:	f7f0 fc18 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801c466:	bf00      	nop
 801c468:	3728      	adds	r7, #40	; 0x28
 801c46a:	46bd      	mov	sp, r7
 801c46c:	bdb0      	pop	{r4, r5, r7, pc}
 801c46e:	bf00      	nop
 801c470:	08025a14 	.word	0x08025a14
 801c474:	08025a40 	.word	0x08025a40
 801c478:	08025a44 	.word	0x08025a44

0801c47c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801c47c:	b590      	push	{r4, r7, lr}
 801c47e:	b08f      	sub	sp, #60	; 0x3c
 801c480:	af00      	add	r7, sp, #0
 801c482:	60f8      	str	r0, [r7, #12]
 801c484:	60b9      	str	r1, [r7, #8]
 801c486:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801c488:	f107 0310 	add.w	r3, r7, #16
 801c48c:	4618      	mov	r0, r3
 801c48e:	f7ff f877 	bl	801b580 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801c492:	f107 0310 	add.w	r3, r7, #16
 801c496:	687a      	ldr	r2, [r7, #4]
 801c498:	68b9      	ldr	r1, [r7, #8]
 801c49a:	4618      	mov	r0, r3
 801c49c:	f7ff fa16 	bl	801b8cc <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	332c      	adds	r3, #44	; 0x2c
 801c4a4:	4937      	ldr	r1, [pc, #220]	; (801c584 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	f7f0 fc84 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	332c      	adds	r3, #44	; 0x2c
 801c4b0:	68b9      	ldr	r1, [r7, #8]
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	f7f0 fc6c 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	332c      	adds	r3, #44	; 0x2c
 801c4bc:	4932      	ldr	r1, [pc, #200]	; (801c588 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801c4be:	4618      	mov	r0, r3
 801c4c0:	f7f0 fc78 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c4ca:	f107 0320 	add.w	r3, r7, #32
 801c4ce:	492f      	ldr	r1, [pc, #188]	; (801c58c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801c4d0:	4618      	mov	r0, r3
 801c4d2:	f7f0 f828 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c4d6:	f107 0318 	add.w	r3, r7, #24
 801c4da:	f107 0220 	add.w	r2, r7, #32
 801c4de:	f107 0110 	add.w	r1, r7, #16
 801c4e2:	4618      	mov	r0, r3
 801c4e4:	f7ff fd4a 	bl	801bf7c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801c4e8:	f107 0318 	add.w	r3, r7, #24
 801c4ec:	4619      	mov	r1, r3
 801c4ee:	4620      	mov	r0, r4
 801c4f0:	f7f0 fc4e 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801c4f4:	f107 0318 	add.w	r3, r7, #24
 801c4f8:	4618      	mov	r0, r3
 801c4fa:	f7f0 fbcc 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c4fe:	f107 0320 	add.w	r3, r7, #32
 801c502:	4618      	mov	r0, r3
 801c504:	f7f0 fbc7 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	332c      	adds	r3, #44	; 0x2c
 801c50c:	4920      	ldr	r1, [pc, #128]	; (801c590 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801c50e:	4618      	mov	r0, r3
 801c510:	f7f0 fc50 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	332c      	adds	r3, #44	; 0x2c
 801c518:	68b9      	ldr	r1, [r7, #8]
 801c51a:	4618      	mov	r0, r3
 801c51c:	f7f0 fc38 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	332c      	adds	r3, #44	; 0x2c
 801c524:	4918      	ldr	r1, [pc, #96]	; (801c588 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801c526:	4618      	mov	r0, r3
 801c528:	f7f0 fc44 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c536:	4915      	ldr	r1, [pc, #84]	; (801c58c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801c538:	4618      	mov	r0, r3
 801c53a:	f7ef fff4 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c53e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c542:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c546:	f107 0110 	add.w	r1, r7, #16
 801c54a:	4618      	mov	r0, r3
 801c54c:	f7ff fd74 	bl	801c038 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801c550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c554:	4619      	mov	r1, r3
 801c556:	4620      	mov	r0, r4
 801c558:	f7f0 fc1a 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801c55c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c560:	4618      	mov	r0, r3
 801c562:	f7f0 fb98 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c566:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c56a:	4618      	mov	r0, r3
 801c56c:	f7f0 fb93 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801c570:	f107 0310 	add.w	r3, r7, #16
 801c574:	4618      	mov	r0, r3
 801c576:	f7ff f817 	bl	801b5a8 <_ZN21MockExpectedCallsListD1Ev>
}
 801c57a:	bf00      	nop
 801c57c:	373c      	adds	r7, #60	; 0x3c
 801c57e:	46bd      	mov	sp, r7
 801c580:	bd90      	pop	{r4, r7, pc}
 801c582:	bf00      	nop
 801c584:	08025a6c 	.word	0x08025a6c
 801c588:	08025aac 	.word	0x08025aac
 801c58c:	08025a40 	.word	0x08025a40
 801c590:	08025ab0 	.word	0x08025ab0

0801c594 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c594:	b590      	push	{r4, r7, lr}
 801c596:	b087      	sub	sp, #28
 801c598:	af00      	add	r7, sp, #0
 801c59a:	60f8      	str	r0, [r7, #12]
 801c59c:	60b9      	str	r1, [r7, #8]
 801c59e:	607a      	str	r2, [r7, #4]
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	68b9      	ldr	r1, [r7, #8]
 801c5a4:	4618      	mov	r0, r3
 801c5a6:	f7ff fee1 	bl	801c36c <_ZN11MockFailureC1EP10UtestShell>
 801c5aa:	4a10      	ldr	r2, [pc, #64]	; (801c5ec <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c5b6:	f107 0310 	add.w	r3, r7, #16
 801c5ba:	490d      	ldr	r1, [pc, #52]	; (801c5f0 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801c5bc:	4618      	mov	r0, r3
 801c5be:	f7ef ffb2 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c5c2:	f107 0310 	add.w	r3, r7, #16
 801c5c6:	4619      	mov	r1, r3
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	f7f0 f818 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801c5ce:	f107 0310 	add.w	r3, r7, #16
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	f7f0 fb5f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801c5d8:	68fb      	ldr	r3, [r7, #12]
 801c5da:	6879      	ldr	r1, [r7, #4]
 801c5dc:	4618      	mov	r0, r3
 801c5de:	f7ff fee9 	bl	801c3b4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801c5e2:	68fb      	ldr	r3, [r7, #12]
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	371c      	adds	r7, #28
 801c5e8:	46bd      	mov	sp, r7
 801c5ea:	bd90      	pop	{r4, r7, pc}
 801c5ec:	08027820 	.word	0x08027820
 801c5f0:	08025aec 	.word	0x08025aec

0801c5f4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c5f4:	b590      	push	{r4, r7, lr}
 801c5f6:	b08d      	sub	sp, #52	; 0x34
 801c5f8:	af00      	add	r7, sp, #0
 801c5fa:	60f8      	str	r0, [r7, #12]
 801c5fc:	60b9      	str	r1, [r7, #8]
 801c5fe:	607a      	str	r2, [r7, #4]
 801c600:	603b      	str	r3, [r7, #0]
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	68b9      	ldr	r1, [r7, #8]
 801c606:	4618      	mov	r0, r3
 801c608:	f7ff feb0 	bl	801c36c <_ZN11MockFailureC1EP10UtestShell>
 801c60c:	4a2f      	ldr	r2, [pc, #188]	; (801c6cc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801c612:	683b      	ldr	r3, [r7, #0]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	3310      	adds	r3, #16
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	6879      	ldr	r1, [r7, #4]
 801c61c:	6838      	ldr	r0, [r7, #0]
 801c61e:	4798      	blx	r3
 801c620:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c624:	2b00      	cmp	r3, #0
 801c626:	d027      	beq.n	801c678 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c62a:	1c5a      	adds	r2, r3, #1
 801c62c:	f107 0314 	add.w	r3, r7, #20
 801c630:	4611      	mov	r1, r2
 801c632:	4618      	mov	r0, r3
 801c634:	f7f1 fa00 	bl	800da38 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c63e:	f107 0314 	add.w	r3, r7, #20
 801c642:	4618      	mov	r0, r3
 801c644:	f7f0 fafa 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801c648:	4602      	mov	r2, r0
 801c64a:	f107 031c 	add.w	r3, r7, #28
 801c64e:	4920      	ldr	r1, [pc, #128]	; (801c6d0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801c650:	4618      	mov	r0, r3
 801c652:	f7f1 f827 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801c656:	f107 031c 	add.w	r3, r7, #28
 801c65a:	4619      	mov	r1, r3
 801c65c:	4620      	mov	r0, r4
 801c65e:	f7ef ffce 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801c662:	f107 031c 	add.w	r3, r7, #28
 801c666:	4618      	mov	r0, r3
 801c668:	f7f0 fb15 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801c66c:	f107 0314 	add.w	r3, r7, #20
 801c670:	4618      	mov	r0, r3
 801c672:	f7f0 fb10 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c676:	e013      	b.n	801c6a0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c67e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c682:	4914      	ldr	r1, [pc, #80]	; (801c6d4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801c684:	4618      	mov	r0, r3
 801c686:	f7ef ff4e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c68a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c68e:	4619      	mov	r1, r3
 801c690:	4620      	mov	r0, r4
 801c692:	f7ef ffb4 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801c696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c69a:	4618      	mov	r0, r3
 801c69c:	f7f0 fafb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	332c      	adds	r3, #44	; 0x2c
 801c6a4:	6879      	ldr	r1, [r7, #4]
 801c6a6:	4618      	mov	r0, r3
 801c6a8:	f7f0 fb72 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	332c      	adds	r3, #44	; 0x2c
 801c6b0:	4909      	ldr	r1, [pc, #36]	; (801c6d8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f7f0 fb7e 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	6839      	ldr	r1, [r7, #0]
 801c6bc:	4618      	mov	r0, r3
 801c6be:	f7ff fe79 	bl	801c3b4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	3734      	adds	r7, #52	; 0x34
 801c6c8:	46bd      	mov	sp, r7
 801c6ca:	bd90      	pop	{r4, r7, pc}
 801c6cc:	080281c0 	.word	0x080281c0
 801c6d0:	08025b1c 	.word	0x08025b1c
 801c6d4:	08025b58 	.word	0x08025b58
 801c6d8:	08025aac 	.word	0x08025aac

0801c6dc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c6dc:	b590      	push	{r4, r7, lr}
 801c6de:	b089      	sub	sp, #36	; 0x24
 801c6e0:	af00      	add	r7, sp, #0
 801c6e2:	60f8      	str	r0, [r7, #12]
 801c6e4:	60b9      	str	r1, [r7, #8]
 801c6e6:	607a      	str	r2, [r7, #4]
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	68b9      	ldr	r1, [r7, #8]
 801c6ec:	4618      	mov	r0, r3
 801c6ee:	f7ff fe3d 	bl	801c36c <_ZN11MockFailureC1EP10UtestShell>
 801c6f2:	4a1f      	ldr	r2, [pc, #124]	; (801c770 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801c6f8:	f107 0310 	add.w	r3, r7, #16
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	f7fe ff3f 	bl	801b580 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801c702:	f107 0310 	add.w	r3, r7, #16
 801c706:	6879      	ldr	r1, [r7, #4]
 801c708:	4618      	mov	r0, r3
 801c70a:	f7ff f909 	bl	801b920 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801c70e:	f107 0310 	add.w	r3, r7, #16
 801c712:	4618      	mov	r0, r3
 801c714:	f7ff f94c 	bl	801b9b0 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c71e:	f107 0318 	add.w	r3, r7, #24
 801c722:	4914      	ldr	r1, [pc, #80]	; (801c774 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801c724:	4618      	mov	r0, r3
 801c726:	f7ef fefe 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c72a:	f107 0318 	add.w	r3, r7, #24
 801c72e:	4619      	mov	r1, r3
 801c730:	4620      	mov	r0, r4
 801c732:	f7ef ff64 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801c736:	f107 0318 	add.w	r3, r7, #24
 801c73a:	4618      	mov	r0, r3
 801c73c:	f7f0 faab 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	332c      	adds	r3, #44	; 0x2c
 801c744:	490c      	ldr	r1, [pc, #48]	; (801c778 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801c746:	4618      	mov	r0, r3
 801c748:	f7f0 fb34 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	f107 0210 	add.w	r2, r7, #16
 801c752:	4611      	mov	r1, r2
 801c754:	4618      	mov	r0, r3
 801c756:	f7ff fe2d 	bl	801c3b4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801c75a:	f107 0310 	add.w	r3, r7, #16
 801c75e:	4618      	mov	r0, r3
 801c760:	f7fe ff22 	bl	801b5a8 <_ZN21MockExpectedCallsListD1Ev>
}
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	4618      	mov	r0, r3
 801c768:	3724      	adds	r7, #36	; 0x24
 801c76a:	46bd      	mov	sp, r7
 801c76c:	bd90      	pop	{r4, r7, pc}
 801c76e:	bf00      	nop
 801c770:	080277f4 	.word	0x080277f4
 801c774:	08025b84 	.word	0x08025b84
 801c778:	08025aac 	.word	0x08025aac

0801c77c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801c77c:	b590      	push	{r4, r7, lr}
 801c77e:	b099      	sub	sp, #100	; 0x64
 801c780:	af00      	add	r7, sp, #0
 801c782:	60f8      	str	r0, [r7, #12]
 801c784:	60b9      	str	r1, [r7, #8]
 801c786:	607a      	str	r2, [r7, #4]
 801c788:	603b      	str	r3, [r7, #0]
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	68b9      	ldr	r1, [r7, #8]
 801c78e:	4618      	mov	r0, r3
 801c790:	f7ff fdec 	bl	801c36c <_ZN11MockFailureC1EP10UtestShell>
 801c794:	4a9e      	ldr	r2, [pc, #632]	; (801ca10 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801c79a:	f107 0310 	add.w	r3, r7, #16
 801c79e:	4618      	mov	r0, r3
 801c7a0:	f7fe feee 	bl	801b580 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801c7a4:	f107 0310 	add.w	r3, r7, #16
 801c7a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c7aa:	6879      	ldr	r1, [r7, #4]
 801c7ac:	4618      	mov	r0, r3
 801c7ae:	f7ff f88d 	bl	801b8cc <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801c7b2:	683b      	ldr	r3, [r7, #0]
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	335c      	adds	r3, #92	; 0x5c
 801c7b8:	681b      	ldr	r3, [r3, #0]
 801c7ba:	f107 0218 	add.w	r2, r7, #24
 801c7be:	6839      	ldr	r1, [r7, #0]
 801c7c0:	4610      	mov	r0, r2
 801c7c2:	4798      	blx	r3
 801c7c4:	f107 0218 	add.w	r2, r7, #24
 801c7c8:	f107 0310 	add.w	r3, r7, #16
 801c7cc:	4611      	mov	r1, r2
 801c7ce:	4618      	mov	r0, r3
 801c7d0:	f7ff f948 	bl	801ba64 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801c7d4:	f107 0318 	add.w	r3, r7, #24
 801c7d8:	4618      	mov	r0, r3
 801c7da:	f7f0 fa5c 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801c7de:	f107 0310 	add.w	r3, r7, #16
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	f7fe ff4d 	bl	801b682 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	d037      	beq.n	801c85e <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c7f4:	f107 0320 	add.w	r3, r7, #32
 801c7f8:	4986      	ldr	r1, [pc, #536]	; (801ca14 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	f7ef fe93 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c800:	f107 0320 	add.w	r3, r7, #32
 801c804:	4619      	mov	r1, r3
 801c806:	4620      	mov	r0, r4
 801c808:	f7ef fef9 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801c80c:	f107 0320 	add.w	r3, r7, #32
 801c810:	4618      	mov	r0, r3
 801c812:	f7f0 fa40 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	332c      	adds	r3, #44	; 0x2c
 801c81a:	6879      	ldr	r1, [r7, #4]
 801c81c:	4618      	mov	r0, r3
 801c81e:	f7f0 fab7 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	332c      	adds	r3, #44	; 0x2c
 801c826:	497c      	ldr	r1, [pc, #496]	; (801ca18 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801c828:	4618      	mov	r0, r3
 801c82a:	f7f0 fac3 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c834:	683b      	ldr	r3, [r7, #0]
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	335c      	adds	r3, #92	; 0x5c
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c840:	6839      	ldr	r1, [r7, #0]
 801c842:	4610      	mov	r0, r2
 801c844:	4798      	blx	r3
 801c846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c84a:	4619      	mov	r1, r3
 801c84c:	4620      	mov	r0, r4
 801c84e:	f7f0 fa9f 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801c852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c856:	4618      	mov	r0, r3
 801c858:	f7f0 fa1d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801c85c:	e056      	b.n	801c90c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c868:	496c      	ldr	r1, [pc, #432]	; (801ca1c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801c86a:	4618      	mov	r0, r3
 801c86c:	f7ef fe5b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801c870:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c874:	4619      	mov	r1, r3
 801c876:	4620      	mov	r0, r4
 801c878:	f7ef fec1 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801c87c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c880:	4618      	mov	r0, r3
 801c882:	f7f0 fa08 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	335c      	adds	r3, #92	; 0x5c
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c898:	6839      	ldr	r1, [r7, #0]
 801c89a:	4610      	mov	r0, r2
 801c89c:	4798      	blx	r3
 801c89e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c8a2:	4619      	mov	r1, r3
 801c8a4:	4620      	mov	r0, r4
 801c8a6:	f7f0 fa73 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801c8aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c8ae:	4618      	mov	r0, r3
 801c8b0:	f7f0 f9f1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	332c      	adds	r3, #44	; 0x2c
 801c8b8:	4959      	ldr	r1, [pc, #356]	; (801ca20 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	f7f0 fa7a 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	332c      	adds	r3, #44	; 0x2c
 801c8c4:	6879      	ldr	r1, [r7, #4]
 801c8c6:	4618      	mov	r0, r3
 801c8c8:	f7f0 fa62 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	332c      	adds	r3, #44	; 0x2c
 801c8d0:	4954      	ldr	r1, [pc, #336]	; (801ca24 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	f7f0 fa6e 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c8de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c8e2:	6839      	ldr	r1, [r7, #0]
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	f7fd faa3 	bl	8019e30 <_Z10StringFromRK14MockNamedValue>
 801c8ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c8ee:	4619      	mov	r1, r3
 801c8f0:	4620      	mov	r0, r4
 801c8f2:	f7f0 fa4d 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801c8f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c8fa:	4618      	mov	r0, r3
 801c8fc:	f7f0 f9cb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	332c      	adds	r3, #44	; 0x2c
 801c904:	4948      	ldr	r1, [pc, #288]	; (801ca28 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801c906:	4618      	mov	r0, r3
 801c908:	f7f0 fa54 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	332c      	adds	r3, #44	; 0x2c
 801c910:	4946      	ldr	r1, [pc, #280]	; (801ca2c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801c912:	4618      	mov	r0, r3
 801c914:	f7f0 fa4e 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c91c:	6879      	ldr	r1, [r7, #4]
 801c91e:	4618      	mov	r0, r3
 801c920:	f7ff fdac 	bl	801c47c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	332c      	adds	r3, #44	; 0x2c
 801c928:	4941      	ldr	r1, [pc, #260]	; (801ca30 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801c92a:	4618      	mov	r0, r3
 801c92c:	f7f0 fa42 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	332c      	adds	r3, #44	; 0x2c
 801c934:	6879      	ldr	r1, [r7, #4]
 801c936:	4618      	mov	r0, r3
 801c938:	f7f0 fa2a 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	332c      	adds	r3, #44	; 0x2c
 801c940:	493a      	ldr	r1, [pc, #232]	; (801ca2c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801c942:	4618      	mov	r0, r3
 801c944:	f7f0 fa36 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	332c      	adds	r3, #44	; 0x2c
 801c94c:	4939      	ldr	r1, [pc, #228]	; (801ca34 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801c94e:	4618      	mov	r0, r3
 801c950:	f7f0 fa30 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c95a:	683b      	ldr	r3, [r7, #0]
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	3360      	adds	r3, #96	; 0x60
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801c966:	6839      	ldr	r1, [r7, #0]
 801c968:	4610      	mov	r0, r2
 801c96a:	4798      	blx	r3
 801c96c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c970:	4619      	mov	r1, r3
 801c972:	4620      	mov	r0, r4
 801c974:	f7f0 fa0c 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801c978:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c97c:	4618      	mov	r0, r3
 801c97e:	f7f0 f98a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	332c      	adds	r3, #44	; 0x2c
 801c986:	492c      	ldr	r1, [pc, #176]	; (801ca38 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801c988:	4618      	mov	r0, r3
 801c98a:	f7f0 fa13 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c994:	683b      	ldr	r3, [r7, #0]
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	335c      	adds	r3, #92	; 0x5c
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c9a0:	6839      	ldr	r1, [r7, #0]
 801c9a2:	4610      	mov	r0, r2
 801c9a4:	4798      	blx	r3
 801c9a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c9aa:	4619      	mov	r1, r3
 801c9ac:	4620      	mov	r0, r4
 801c9ae:	f7f0 f9ef 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801c9b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c9b6:	4618      	mov	r0, r3
 801c9b8:	f7f0 f96d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801c9bc:	68fb      	ldr	r3, [r7, #12]
 801c9be:	332c      	adds	r3, #44	; 0x2c
 801c9c0:	491e      	ldr	r1, [pc, #120]	; (801ca3c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	f7f0 f9f6 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c9ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c9d2:	6839      	ldr	r1, [r7, #0]
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	f7fd fa2b 	bl	8019e30 <_Z10StringFromRK14MockNamedValue>
 801c9da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c9de:	4619      	mov	r1, r3
 801c9e0:	4620      	mov	r0, r4
 801c9e2:	f7f0 f9d5 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801c9e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c9ea:	4618      	mov	r0, r3
 801c9ec:	f7f0 f953 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801c9f0:	68fb      	ldr	r3, [r7, #12]
 801c9f2:	332c      	adds	r3, #44	; 0x2c
 801c9f4:	490c      	ldr	r1, [pc, #48]	; (801ca28 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	f7f0 f9dc 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801c9fc:	f107 0310 	add.w	r3, r7, #16
 801ca00:	4618      	mov	r0, r3
 801ca02:	f7fe fdd1 	bl	801b5a8 <_ZN21MockExpectedCallsListD1Ev>
}
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	4618      	mov	r0, r3
 801ca0a:	3764      	adds	r7, #100	; 0x64
 801ca0c:	46bd      	mov	sp, r7
 801ca0e:	bd90      	pop	{r4, r7, pc}
 801ca10:	08028194 	.word	0x08028194
 801ca14:	08025ba8 	.word	0x08025ba8
 801ca18:	08025be0 	.word	0x08025be0
 801ca1c:	08025be4 	.word	0x08025be4
 801ca20:	08025c1c 	.word	0x08025c1c
 801ca24:	08025c2c 	.word	0x08025c2c
 801ca28:	08025c34 	.word	0x08025c34
 801ca2c:	08025aac 	.word	0x08025aac
 801ca30:	08025c38 	.word	0x08025c38
 801ca34:	08025a40 	.word	0x08025a40
 801ca38:	08025c6c 	.word	0x08025c6c
 801ca3c:	08025c70 	.word	0x08025c70

0801ca40 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801ca40:	b590      	push	{r4, r7, lr}
 801ca42:	b097      	sub	sp, #92	; 0x5c
 801ca44:	af00      	add	r7, sp, #0
 801ca46:	60f8      	str	r0, [r7, #12]
 801ca48:	60b9      	str	r1, [r7, #8]
 801ca4a:	607a      	str	r2, [r7, #4]
 801ca4c:	603b      	str	r3, [r7, #0]
 801ca4e:	68fb      	ldr	r3, [r7, #12]
 801ca50:	68b9      	ldr	r1, [r7, #8]
 801ca52:	4618      	mov	r0, r3
 801ca54:	f7ff fc8a 	bl	801c36c <_ZN11MockFailureC1EP10UtestShell>
 801ca58:	4a90      	ldr	r2, [pc, #576]	; (801cc9c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ca5e:	f107 0310 	add.w	r3, r7, #16
 801ca62:	4618      	mov	r0, r3
 801ca64:	f7fe fd8c 	bl	801b580 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801ca68:	f107 0310 	add.w	r3, r7, #16
 801ca6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ca6e:	6879      	ldr	r1, [r7, #4]
 801ca70:	4618      	mov	r0, r3
 801ca72:	f7fe ff2b 	bl	801b8cc <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801ca76:	683b      	ldr	r3, [r7, #0]
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	335c      	adds	r3, #92	; 0x5c
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	f107 0218 	add.w	r2, r7, #24
 801ca82:	6839      	ldr	r1, [r7, #0]
 801ca84:	4610      	mov	r0, r2
 801ca86:	4798      	blx	r3
 801ca88:	f107 0218 	add.w	r2, r7, #24
 801ca8c:	f107 0310 	add.w	r3, r7, #16
 801ca90:	4611      	mov	r1, r2
 801ca92:	4618      	mov	r0, r3
 801ca94:	f7ff f812 	bl	801babc <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801ca98:	f107 0318 	add.w	r3, r7, #24
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	f7f0 f8fa 	bl	800cc96 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801caa2:	f107 0310 	add.w	r3, r7, #16
 801caa6:	4618      	mov	r0, r3
 801caa8:	f7fe fdeb 	bl	801b682 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801caac:	4603      	mov	r3, r0
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d037      	beq.n	801cb22 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801cab2:	68fb      	ldr	r3, [r7, #12]
 801cab4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cab8:	f107 0320 	add.w	r3, r7, #32
 801cabc:	4978      	ldr	r1, [pc, #480]	; (801cca0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801cabe:	4618      	mov	r0, r3
 801cac0:	f7ef fd31 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801cac4:	f107 0320 	add.w	r3, r7, #32
 801cac8:	4619      	mov	r1, r3
 801caca:	4620      	mov	r0, r4
 801cacc:	f7ef fd97 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801cad0:	f107 0320 	add.w	r3, r7, #32
 801cad4:	4618      	mov	r0, r3
 801cad6:	f7f0 f8de 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801cada:	68fb      	ldr	r3, [r7, #12]
 801cadc:	332c      	adds	r3, #44	; 0x2c
 801cade:	6879      	ldr	r1, [r7, #4]
 801cae0:	4618      	mov	r0, r3
 801cae2:	f7f0 f955 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	332c      	adds	r3, #44	; 0x2c
 801caea:	496e      	ldr	r1, [pc, #440]	; (801cca4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801caec:	4618      	mov	r0, r3
 801caee:	f7f0 f961 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801caf8:	683b      	ldr	r3, [r7, #0]
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	335c      	adds	r3, #92	; 0x5c
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801cb04:	6839      	ldr	r1, [r7, #0]
 801cb06:	4610      	mov	r0, r2
 801cb08:	4798      	blx	r3
 801cb0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cb0e:	4619      	mov	r1, r3
 801cb10:	4620      	mov	r0, r4
 801cb12:	f7f0 f93d 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801cb16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cb1a:	4618      	mov	r0, r3
 801cb1c:	f7f0 f8bb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801cb20:	e059      	b.n	801cbd6 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cb28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cb2c:	495e      	ldr	r1, [pc, #376]	; (801cca8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801cb2e:	4618      	mov	r0, r3
 801cb30:	f7ef fcf9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801cb34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cb38:	4619      	mov	r1, r3
 801cb3a:	4620      	mov	r0, r4
 801cb3c:	f7ef fd5f 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801cb40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cb44:	4618      	mov	r0, r3
 801cb46:	f7f0 f8a6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801cb4a:	68fb      	ldr	r3, [r7, #12]
 801cb4c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cb50:	683b      	ldr	r3, [r7, #0]
 801cb52:	681b      	ldr	r3, [r3, #0]
 801cb54:	3360      	adds	r3, #96	; 0x60
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801cb5c:	6839      	ldr	r1, [r7, #0]
 801cb5e:	4610      	mov	r0, r2
 801cb60:	4798      	blx	r3
 801cb62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cb66:	4619      	mov	r1, r3
 801cb68:	4620      	mov	r0, r4
 801cb6a:	f7f0 f911 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801cb6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cb72:	4618      	mov	r0, r3
 801cb74:	f7f0 f88f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801cb78:	68fb      	ldr	r3, [r7, #12]
 801cb7a:	332c      	adds	r3, #44	; 0x2c
 801cb7c:	494b      	ldr	r1, [pc, #300]	; (801ccac <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801cb7e:	4618      	mov	r0, r3
 801cb80:	f7f0 f918 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801cb84:	68fb      	ldr	r3, [r7, #12]
 801cb86:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cb8a:	683b      	ldr	r3, [r7, #0]
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	335c      	adds	r3, #92	; 0x5c
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801cb96:	6839      	ldr	r1, [r7, #0]
 801cb98:	4610      	mov	r0, r2
 801cb9a:	4798      	blx	r3
 801cb9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cba0:	4619      	mov	r1, r3
 801cba2:	4620      	mov	r0, r4
 801cba4:	f7f0 f8f4 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801cba8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801cbac:	4618      	mov	r0, r3
 801cbae:	f7f0 f872 	bl	800cc96 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	332c      	adds	r3, #44	; 0x2c
 801cbb6:	493e      	ldr	r1, [pc, #248]	; (801ccb0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801cbb8:	4618      	mov	r0, r3
 801cbba:	f7f0 f8fb 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	332c      	adds	r3, #44	; 0x2c
 801cbc2:	6879      	ldr	r1, [r7, #4]
 801cbc4:	4618      	mov	r0, r3
 801cbc6:	f7f0 f8e3 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801cbca:	68fb      	ldr	r3, [r7, #12]
 801cbcc:	332c      	adds	r3, #44	; 0x2c
 801cbce:	4939      	ldr	r1, [pc, #228]	; (801ccb4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801cbd0:	4618      	mov	r0, r3
 801cbd2:	f7f0 f8ef 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	332c      	adds	r3, #44	; 0x2c
 801cbda:	4937      	ldr	r1, [pc, #220]	; (801ccb8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801cbdc:	4618      	mov	r0, r3
 801cbde:	f7f0 f8e9 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801cbe2:	68fb      	ldr	r3, [r7, #12]
 801cbe4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cbe6:	6879      	ldr	r1, [r7, #4]
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f7ff fc47 	bl	801c47c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	332c      	adds	r3, #44	; 0x2c
 801cbf2:	4932      	ldr	r1, [pc, #200]	; (801ccbc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	f7f0 f8dd 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	332c      	adds	r3, #44	; 0x2c
 801cbfe:	6879      	ldr	r1, [r7, #4]
 801cc00:	4618      	mov	r0, r3
 801cc02:	f7f0 f8c5 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	332c      	adds	r3, #44	; 0x2c
 801cc0a:	492b      	ldr	r1, [pc, #172]	; (801ccb8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	f7f0 f8d1 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	332c      	adds	r3, #44	; 0x2c
 801cc16:	492a      	ldr	r1, [pc, #168]	; (801ccc0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801cc18:	4618      	mov	r0, r3
 801cc1a:	f7f0 f8cb 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cc24:	683b      	ldr	r3, [r7, #0]
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	3360      	adds	r3, #96	; 0x60
 801cc2a:	681b      	ldr	r3, [r3, #0]
 801cc2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801cc30:	6839      	ldr	r1, [r7, #0]
 801cc32:	4610      	mov	r0, r2
 801cc34:	4798      	blx	r3
 801cc36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cc3a:	4619      	mov	r1, r3
 801cc3c:	4620      	mov	r0, r4
 801cc3e:	f7f0 f8a7 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801cc42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801cc46:	4618      	mov	r0, r3
 801cc48:	f7f0 f825 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801cc4c:	68fb      	ldr	r3, [r7, #12]
 801cc4e:	332c      	adds	r3, #44	; 0x2c
 801cc50:	491c      	ldr	r1, [pc, #112]	; (801ccc4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801cc52:	4618      	mov	r0, r3
 801cc54:	f7f0 f8ae 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cc5e:	683b      	ldr	r3, [r7, #0]
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	335c      	adds	r3, #92	; 0x5c
 801cc64:	681b      	ldr	r3, [r3, #0]
 801cc66:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801cc6a:	6839      	ldr	r1, [r7, #0]
 801cc6c:	4610      	mov	r0, r2
 801cc6e:	4798      	blx	r3
 801cc70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cc74:	4619      	mov	r1, r3
 801cc76:	4620      	mov	r0, r4
 801cc78:	f7f0 f88a 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801cc7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cc80:	4618      	mov	r0, r3
 801cc82:	f7f0 f808 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801cc86:	f107 0310 	add.w	r3, r7, #16
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	f7fe fc8c 	bl	801b5a8 <_ZN21MockExpectedCallsListD1Ev>
}
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	4618      	mov	r0, r3
 801cc94:	375c      	adds	r7, #92	; 0x5c
 801cc96:	46bd      	mov	sp, r7
 801cc98:	bd90      	pop	{r4, r7, pc}
 801cc9a:	bf00      	nop
 801cc9c:	08028168 	.word	0x08028168
 801cca0:	08025c74 	.word	0x08025c74
 801cca4:	08025be0 	.word	0x08025be0
 801cca8:	08025cb4 	.word	0x08025cb4
 801ccac:	08025ce0 	.word	0x08025ce0
 801ccb0:	08025c1c 	.word	0x08025c1c
 801ccb4:	08025cf8 	.word	0x08025cf8
 801ccb8:	08025aac 	.word	0x08025aac
 801ccbc:	08025cfc 	.word	0x08025cfc
 801ccc0:	08025a40 	.word	0x08025a40
 801ccc4:	08025c6c 	.word	0x08025c6c

0801ccc8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ccc8:	b590      	push	{r4, r7, lr}
 801ccca:	b08b      	sub	sp, #44	; 0x2c
 801cccc:	af00      	add	r7, sp, #0
 801ccce:	60f8      	str	r0, [r7, #12]
 801ccd0:	60b9      	str	r1, [r7, #8]
 801ccd2:	607a      	str	r2, [r7, #4]
 801ccd4:	603b      	str	r3, [r7, #0]
 801ccd6:	68fb      	ldr	r3, [r7, #12]
 801ccd8:	68b9      	ldr	r1, [r7, #8]
 801ccda:	4618      	mov	r0, r3
 801ccdc:	f7ff fb46 	bl	801c36c <_ZN11MockFailureC1EP10UtestShell>
 801cce0:	4a30      	ldr	r2, [pc, #192]	; (801cda4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801cce6:	f107 0310 	add.w	r3, r7, #16
 801ccea:	4618      	mov	r0, r3
 801ccec:	f7fe fc48 	bl	801b580 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801ccf0:	f107 0310 	add.w	r3, r7, #16
 801ccf4:	683a      	ldr	r2, [r7, #0]
 801ccf6:	6879      	ldr	r1, [r7, #4]
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	f7fe fde7 	bl	801b8cc <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801ccfe:	68fb      	ldr	r3, [r7, #12]
 801cd00:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cd04:	f107 0318 	add.w	r3, r7, #24
 801cd08:	4927      	ldr	r1, [pc, #156]	; (801cda8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	f7ef fc0b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801cd10:	f107 0318 	add.w	r3, r7, #24
 801cd14:	4619      	mov	r1, r3
 801cd16:	4620      	mov	r0, r4
 801cd18:	f7ef fc71 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801cd1c:	f107 0318 	add.w	r3, r7, #24
 801cd20:	4618      	mov	r0, r3
 801cd22:	f7ef ffb8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	332c      	adds	r3, #44	; 0x2c
 801cd2a:	6879      	ldr	r1, [r7, #4]
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	f7f0 f82f 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801cd32:	68fb      	ldr	r3, [r7, #12]
 801cd34:	332c      	adds	r3, #44	; 0x2c
 801cd36:	491d      	ldr	r1, [pc, #116]	; (801cdac <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801cd38:	4618      	mov	r0, r3
 801cd3a:	f7f0 f83b 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801cd3e:	68fb      	ldr	r3, [r7, #12]
 801cd40:	683a      	ldr	r2, [r7, #0]
 801cd42:	6879      	ldr	r1, [r7, #4]
 801cd44:	4618      	mov	r0, r3
 801cd46:	f7ff fb99 	bl	801c47c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801cd4a:	68fb      	ldr	r3, [r7, #12]
 801cd4c:	332c      	adds	r3, #44	; 0x2c
 801cd4e:	4918      	ldr	r1, [pc, #96]	; (801cdb0 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801cd50:	4618      	mov	r0, r3
 801cd52:	f7f0 f82f 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	332c      	adds	r3, #44	; 0x2c
 801cd5a:	4916      	ldr	r1, [pc, #88]	; (801cdb4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	f7f0 f829 	bl	800cdb4 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801cd62:	68fb      	ldr	r3, [r7, #12]
 801cd64:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cd68:	f107 0320 	add.w	r3, r7, #32
 801cd6c:	f107 0210 	add.w	r2, r7, #16
 801cd70:	4611      	mov	r1, r2
 801cd72:	4618      	mov	r0, r3
 801cd74:	f7ff f9bc 	bl	801c0f0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801cd78:	f107 0320 	add.w	r3, r7, #32
 801cd7c:	4619      	mov	r1, r3
 801cd7e:	4620      	mov	r0, r4
 801cd80:	f7f0 f806 	bl	800cd90 <_ZN12SimpleStringpLERKS_>
 801cd84:	f107 0320 	add.w	r3, r7, #32
 801cd88:	4618      	mov	r0, r3
 801cd8a:	f7ef ff84 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801cd8e:	f107 0310 	add.w	r3, r7, #16
 801cd92:	4618      	mov	r0, r3
 801cd94:	f7fe fc08 	bl	801b5a8 <_ZN21MockExpectedCallsListD1Ev>
}
 801cd98:	68fb      	ldr	r3, [r7, #12]
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	372c      	adds	r7, #44	; 0x2c
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	bd90      	pop	{r4, r7, pc}
 801cda2:	bf00      	nop
 801cda4:	0802813c 	.word	0x0802813c
 801cda8:	08025d38 	.word	0x08025d38
 801cdac:	08025d68 	.word	0x08025d68
 801cdb0:	08025d7c 	.word	0x08025d7c
 801cdb4:	08025a40 	.word	0x08025a40

0801cdb8 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801cdb8:	b590      	push	{r4, r7, lr}
 801cdba:	b087      	sub	sp, #28
 801cdbc:	af00      	add	r7, sp, #0
 801cdbe:	60f8      	str	r0, [r7, #12]
 801cdc0:	60b9      	str	r1, [r7, #8]
 801cdc2:	607a      	str	r2, [r7, #4]
 801cdc4:	68fb      	ldr	r3, [r7, #12]
 801cdc6:	68b9      	ldr	r1, [r7, #8]
 801cdc8:	4618      	mov	r0, r3
 801cdca:	f7ff facf 	bl	801c36c <_ZN11MockFailureC1EP10UtestShell>
 801cdce:	4a10      	ldr	r2, [pc, #64]	; (801ce10 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801cdd0:	68fb      	ldr	r3, [r7, #12]
 801cdd2:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801cdd4:	68fb      	ldr	r3, [r7, #12]
 801cdd6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cdda:	6878      	ldr	r0, [r7, #4]
 801cddc:	f7ef ff2e 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801cde0:	4602      	mov	r2, r0
 801cde2:	f107 0310 	add.w	r3, r7, #16
 801cde6:	490b      	ldr	r1, [pc, #44]	; (801ce14 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801cde8:	4618      	mov	r0, r3
 801cdea:	f7f0 fc5b 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801cdee:	f107 0310 	add.w	r3, r7, #16
 801cdf2:	4619      	mov	r1, r3
 801cdf4:	4620      	mov	r0, r4
 801cdf6:	f7ef fc02 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801cdfa:	f107 0310 	add.w	r3, r7, #16
 801cdfe:	4618      	mov	r0, r3
 801ce00:	f7ef ff49 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	4618      	mov	r0, r3
 801ce08:	371c      	adds	r7, #28
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd90      	pop	{r4, r7, pc}
 801ce0e:	bf00      	nop
 801ce10:	08028110 	.word	0x08028110
 801ce14:	08025da8 	.word	0x08025da8

0801ce18 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801ce18:	b590      	push	{r4, r7, lr}
 801ce1a:	b087      	sub	sp, #28
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	60f8      	str	r0, [r7, #12]
 801ce20:	60b9      	str	r1, [r7, #8]
 801ce22:	607a      	str	r2, [r7, #4]
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	68b9      	ldr	r1, [r7, #8]
 801ce28:	4618      	mov	r0, r3
 801ce2a:	f7ff fa9f 	bl	801c36c <_ZN11MockFailureC1EP10UtestShell>
 801ce2e:	4a10      	ldr	r2, [pc, #64]	; (801ce70 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801ce30:	68fb      	ldr	r3, [r7, #12]
 801ce32:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801ce34:	68fb      	ldr	r3, [r7, #12]
 801ce36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ce3a:	6878      	ldr	r0, [r7, #4]
 801ce3c:	f7ef fefe 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801ce40:	4602      	mov	r2, r0
 801ce42:	f107 0310 	add.w	r3, r7, #16
 801ce46:	490b      	ldr	r1, [pc, #44]	; (801ce74 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801ce48:	4618      	mov	r0, r3
 801ce4a:	f7f0 fc2b 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801ce4e:	f107 0310 	add.w	r3, r7, #16
 801ce52:	4619      	mov	r1, r3
 801ce54:	4620      	mov	r0, r4
 801ce56:	f7ef fbd2 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801ce5a:	f107 0310 	add.w	r3, r7, #16
 801ce5e:	4618      	mov	r0, r3
 801ce60:	f7ef ff19 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	4618      	mov	r0, r3
 801ce68:	371c      	adds	r7, #28
 801ce6a:	46bd      	mov	sp, r7
 801ce6c:	bd90      	pop	{r4, r7, pc}
 801ce6e:	bf00      	nop
 801ce70:	080280e4 	.word	0x080280e4
 801ce74:	08025e00 	.word	0x08025e00

0801ce78 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ce78:	b590      	push	{r4, r7, lr}
 801ce7a:	b087      	sub	sp, #28
 801ce7c:	af00      	add	r7, sp, #0
 801ce7e:	60f8      	str	r0, [r7, #12]
 801ce80:	60b9      	str	r1, [r7, #8]
 801ce82:	607a      	str	r2, [r7, #4]
 801ce84:	603b      	str	r3, [r7, #0]
 801ce86:	68fb      	ldr	r3, [r7, #12]
 801ce88:	68b9      	ldr	r1, [r7, #8]
 801ce8a:	4618      	mov	r0, r3
 801ce8c:	f7ff fa6e 	bl	801c36c <_ZN11MockFailureC1EP10UtestShell>
 801ce90:	4a12      	ldr	r2, [pc, #72]	; (801cedc <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801ce9c:	6878      	ldr	r0, [r7, #4]
 801ce9e:	f7ef fecd 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801cea2:	4602      	mov	r2, r0
 801cea4:	f107 0010 	add.w	r0, r7, #16
 801cea8:	683b      	ldr	r3, [r7, #0]
 801ceaa:	490d      	ldr	r1, [pc, #52]	; (801cee0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801ceac:	f7f0 fbfa 	bl	800d6a4 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801ceb0:	f107 0310 	add.w	r3, r7, #16
 801ceb4:	4619      	mov	r1, r3
 801ceb6:	4620      	mov	r0, r4
 801ceb8:	f7ef fba1 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801cebc:	f107 0310 	add.w	r3, r7, #16
 801cec0:	4618      	mov	r0, r3
 801cec2:	f7ef fee8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ceca:	6879      	ldr	r1, [r7, #4]
 801cecc:	4618      	mov	r0, r3
 801cece:	f7ff fad5 	bl	801c47c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	4618      	mov	r0, r3
 801ced6:	371c      	adds	r7, #28
 801ced8:	46bd      	mov	sp, r7
 801ceda:	bd90      	pop	{r4, r7, pc}
 801cedc:	080280b8 	.word	0x080280b8
 801cee0:	08025e50 	.word	0x08025e50

0801cee4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cee4:	b590      	push	{r4, r7, lr}
 801cee6:	b087      	sub	sp, #28
 801cee8:	af00      	add	r7, sp, #0
 801ceea:	60f8      	str	r0, [r7, #12]
 801ceec:	60b9      	str	r1, [r7, #8]
 801ceee:	607a      	str	r2, [r7, #4]
 801cef0:	603b      	str	r3, [r7, #0]
 801cef2:	68fb      	ldr	r3, [r7, #12]
 801cef4:	68b9      	ldr	r1, [r7, #8]
 801cef6:	4618      	mov	r0, r3
 801cef8:	f7ff fa38 	bl	801c36c <_ZN11MockFailureC1EP10UtestShell>
 801cefc:	4a12      	ldr	r2, [pc, #72]	; (801cf48 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cf08:	6878      	ldr	r0, [r7, #4]
 801cf0a:	f7ef fe97 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801cf0e:	4602      	mov	r2, r0
 801cf10:	f107 0310 	add.w	r3, r7, #16
 801cf14:	490d      	ldr	r1, [pc, #52]	; (801cf4c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801cf16:	4618      	mov	r0, r3
 801cf18:	f7f0 fbc4 	bl	800d6a4 <_Z16StringFromFormatPKcz>
 801cf1c:	f107 0310 	add.w	r3, r7, #16
 801cf20:	4619      	mov	r1, r3
 801cf22:	4620      	mov	r0, r4
 801cf24:	f7ef fb6b 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801cf28:	f107 0310 	add.w	r3, r7, #16
 801cf2c:	4618      	mov	r0, r3
 801cf2e:	f7ef feb2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	683a      	ldr	r2, [r7, #0]
 801cf36:	6879      	ldr	r1, [r7, #4]
 801cf38:	4618      	mov	r0, r3
 801cf3a:	f7ff fa9f 	bl	801c47c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	4618      	mov	r0, r3
 801cf42:	371c      	adds	r7, #28
 801cf44:	46bd      	mov	sp, r7
 801cf46:	bd90      	pop	{r4, r7, pc}
 801cf48:	0802808c 	.word	0x0802808c
 801cf4c:	08025eb4 	.word	0x08025eb4

0801cf50 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801cf50:	b480      	push	{r7}
 801cf52:	b083      	sub	sp, #12
 801cf54:	af00      	add	r7, sp, #0
 801cf56:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801cf58:	4a04      	ldr	r2, [pc, #16]	; (801cf6c <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	6013      	str	r3, [r2, #0]
}
 801cf5e:	bf00      	nop
 801cf60:	370c      	adds	r7, #12
 801cf62:	46bd      	mov	sp, r7
 801cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf68:	4770      	bx	lr
 801cf6a:	bf00      	nop
 801cf6c:	20000e60 	.word	0x20000e60

0801cf70 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801cf70:	b580      	push	{r7, lr}
 801cf72:	b082      	sub	sp, #8
 801cf74:	af00      	add	r7, sp, #0
 801cf76:	6078      	str	r0, [r7, #4]
 801cf78:	6039      	str	r1, [r7, #0]
 801cf7a:	4a10      	ldr	r2, [pc, #64]	; (801cfbc <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	601a      	str	r2, [r3, #0]
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	3304      	adds	r3, #4
 801cf84:	6839      	ldr	r1, [r7, #0]
 801cf86:	4618      	mov	r0, r3
 801cf88:	f7ef fb21 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	330c      	adds	r3, #12
 801cf90:	490b      	ldr	r1, [pc, #44]	; (801cfc0 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801cf92:	4618      	mov	r0, r3
 801cf94:	f7ef fac7 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	2200      	movs	r2, #0
 801cf9c:	629a      	str	r2, [r3, #40]	; 0x28
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	2200      	movs	r2, #0
 801cfa2:	62da      	str	r2, [r3, #44]	; 0x2c
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	2200      	movs	r2, #0
 801cfa8:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	2200      	movs	r2, #0
 801cfae:	619a      	str	r2, [r3, #24]
}
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	3708      	adds	r7, #8
 801cfb6:	46bd      	mov	sp, r7
 801cfb8:	bd80      	pop	{r7, pc}
 801cfba:	bf00      	nop
 801cfbc:	08028914 	.word	0x08028914
 801cfc0:	08025f04 	.word	0x08025f04

0801cfc4 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801cfc4:	b580      	push	{r7, lr}
 801cfc6:	b082      	sub	sp, #8
 801cfc8:	af00      	add	r7, sp, #0
 801cfca:	6078      	str	r0, [r7, #4]
 801cfcc:	4a08      	ldr	r2, [pc, #32]	; (801cff0 <_ZN14MockNamedValueD1Ev+0x2c>)
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	601a      	str	r2, [r3, #0]
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	330c      	adds	r3, #12
 801cfd6:	4618      	mov	r0, r3
 801cfd8:	f7ef fe5d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	3304      	adds	r3, #4
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	f7ef fe58 	bl	800cc96 <_ZN12SimpleStringD1Ev>
{
}
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	4618      	mov	r0, r3
 801cfea:	3708      	adds	r7, #8
 801cfec:	46bd      	mov	sp, r7
 801cfee:	bd80      	pop	{r7, pc}
 801cff0:	08028914 	.word	0x08028914

0801cff4 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801cff4:	b580      	push	{r7, lr}
 801cff6:	b082      	sub	sp, #8
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	6078      	str	r0, [r7, #4]
}
 801cffc:	6878      	ldr	r0, [r7, #4]
 801cffe:	f7ff ffe1 	bl	801cfc4 <_ZN14MockNamedValueD1Ev>
 801d002:	2138      	movs	r1, #56	; 0x38
 801d004:	6878      	ldr	r0, [r7, #4]
 801d006:	f7ec fedf 	bl	8009dc8 <_ZdlPvj>
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	4618      	mov	r0, r3
 801d00e:	3708      	adds	r7, #8
 801d010:	46bd      	mov	sp, r7
 801d012:	bd80      	pop	{r7, pc}

0801d014 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801d014:	b590      	push	{r4, r7, lr}
 801d016:	b085      	sub	sp, #20
 801d018:	af00      	add	r7, sp, #0
 801d01a:	6078      	str	r0, [r7, #4]
 801d01c:	460b      	mov	r3, r1
 801d01e:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	f103 040c 	add.w	r4, r3, #12
 801d026:	f107 0308 	add.w	r3, r7, #8
 801d02a:	490b      	ldr	r1, [pc, #44]	; (801d058 <_ZN14MockNamedValue8setValueEb+0x44>)
 801d02c:	4618      	mov	r0, r3
 801d02e:	f7ef fa7a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d032:	f107 0308 	add.w	r3, r7, #8
 801d036:	4619      	mov	r1, r3
 801d038:	4620      	mov	r0, r4
 801d03a:	f7ef fae0 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d03e:	f107 0308 	add.w	r3, r7, #8
 801d042:	4618      	mov	r0, r3
 801d044:	f7ef fe27 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	78fa      	ldrb	r2, [r7, #3]
 801d04c:	761a      	strb	r2, [r3, #24]
}
 801d04e:	bf00      	nop
 801d050:	3714      	adds	r7, #20
 801d052:	46bd      	mov	sp, r7
 801d054:	bd90      	pop	{r4, r7, pc}
 801d056:	bf00      	nop
 801d058:	08025f08 	.word	0x08025f08

0801d05c <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801d05c:	b590      	push	{r4, r7, lr}
 801d05e:	b085      	sub	sp, #20
 801d060:	af00      	add	r7, sp, #0
 801d062:	6078      	str	r0, [r7, #4]
 801d064:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	f103 040c 	add.w	r4, r3, #12
 801d06c:	f107 0308 	add.w	r3, r7, #8
 801d070:	490a      	ldr	r1, [pc, #40]	; (801d09c <_ZN14MockNamedValue8setValueEj+0x40>)
 801d072:	4618      	mov	r0, r3
 801d074:	f7ef fa57 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d078:	f107 0308 	add.w	r3, r7, #8
 801d07c:	4619      	mov	r1, r3
 801d07e:	4620      	mov	r0, r4
 801d080:	f7ef fabd 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d084:	f107 0308 	add.w	r3, r7, #8
 801d088:	4618      	mov	r0, r3
 801d08a:	f7ef fe04 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	683a      	ldr	r2, [r7, #0]
 801d092:	619a      	str	r2, [r3, #24]
}
 801d094:	bf00      	nop
 801d096:	3714      	adds	r7, #20
 801d098:	46bd      	mov	sp, r7
 801d09a:	bd90      	pop	{r4, r7, pc}
 801d09c:	08025f10 	.word	0x08025f10

0801d0a0 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801d0a0:	b590      	push	{r4, r7, lr}
 801d0a2:	b085      	sub	sp, #20
 801d0a4:	af00      	add	r7, sp, #0
 801d0a6:	6078      	str	r0, [r7, #4]
 801d0a8:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	f103 040c 	add.w	r4, r3, #12
 801d0b0:	f107 0308 	add.w	r3, r7, #8
 801d0b4:	490a      	ldr	r1, [pc, #40]	; (801d0e0 <_ZN14MockNamedValue8setValueEi+0x40>)
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	f7ef fa35 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d0bc:	f107 0308 	add.w	r3, r7, #8
 801d0c0:	4619      	mov	r1, r3
 801d0c2:	4620      	mov	r0, r4
 801d0c4:	f7ef fa9b 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d0c8:	f107 0308 	add.w	r3, r7, #8
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	f7ef fde2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	683a      	ldr	r2, [r7, #0]
 801d0d6:	619a      	str	r2, [r3, #24]
}
 801d0d8:	bf00      	nop
 801d0da:	3714      	adds	r7, #20
 801d0dc:	46bd      	mov	sp, r7
 801d0de:	bd90      	pop	{r4, r7, pc}
 801d0e0:	08025f04 	.word	0x08025f04

0801d0e4 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801d0e4:	b590      	push	{r4, r7, lr}
 801d0e6:	b085      	sub	sp, #20
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
 801d0ec:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	f103 040c 	add.w	r4, r3, #12
 801d0f4:	f107 0308 	add.w	r3, r7, #8
 801d0f8:	490a      	ldr	r1, [pc, #40]	; (801d124 <_ZN14MockNamedValue8setValueEl+0x40>)
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	f7ef fa13 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d100:	f107 0308 	add.w	r3, r7, #8
 801d104:	4619      	mov	r1, r3
 801d106:	4620      	mov	r0, r4
 801d108:	f7ef fa79 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d10c:	f107 0308 	add.w	r3, r7, #8
 801d110:	4618      	mov	r0, r3
 801d112:	f7ef fdc0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	683a      	ldr	r2, [r7, #0]
 801d11a:	619a      	str	r2, [r3, #24]
}
 801d11c:	bf00      	nop
 801d11e:	3714      	adds	r7, #20
 801d120:	46bd      	mov	sp, r7
 801d122:	bd90      	pop	{r4, r7, pc}
 801d124:	08025f20 	.word	0x08025f20

0801d128 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801d128:	b590      	push	{r4, r7, lr}
 801d12a:	b085      	sub	sp, #20
 801d12c:	af00      	add	r7, sp, #0
 801d12e:	6078      	str	r0, [r7, #4]
 801d130:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	f103 040c 	add.w	r4, r3, #12
 801d138:	f107 0308 	add.w	r3, r7, #8
 801d13c:	490a      	ldr	r1, [pc, #40]	; (801d168 <_ZN14MockNamedValue8setValueEm+0x40>)
 801d13e:	4618      	mov	r0, r3
 801d140:	f7ef f9f1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d144:	f107 0308 	add.w	r3, r7, #8
 801d148:	4619      	mov	r1, r3
 801d14a:	4620      	mov	r0, r4
 801d14c:	f7ef fa57 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d150:	f107 0308 	add.w	r3, r7, #8
 801d154:	4618      	mov	r0, r3
 801d156:	f7ef fd9e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	683a      	ldr	r2, [r7, #0]
 801d15e:	619a      	str	r2, [r3, #24]
}
 801d160:	bf00      	nop
 801d162:	3714      	adds	r7, #20
 801d164:	46bd      	mov	sp, r7
 801d166:	bd90      	pop	{r4, r7, pc}
 801d168:	08025f2c 	.word	0x08025f2c

0801d16c <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801d16c:	b5b0      	push	{r4, r5, r7, lr}
 801d16e:	b086      	sub	sp, #24
 801d170:	af02      	add	r7, sp, #8
 801d172:	60f8      	str	r0, [r7, #12]
 801d174:	1d3b      	adds	r3, r7, #4
 801d176:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801d17a:	f7f6 fdb7 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d17e:	4604      	mov	r4, r0
 801d180:	6823      	ldr	r3, [r4, #0]
 801d182:	3368      	adds	r3, #104	; 0x68
 801d184:	681d      	ldr	r5, [r3, #0]
 801d186:	f7f6 fdc1 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d18a:	4603      	mov	r3, r0
 801d18c:	9300      	str	r3, [sp, #0]
 801d18e:	2367      	movs	r3, #103	; 0x67
 801d190:	4a03      	ldr	r2, [pc, #12]	; (801d1a0 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801d192:	4904      	ldr	r1, [pc, #16]	; (801d1a4 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801d194:	4620      	mov	r0, r4
 801d196:	47a8      	blx	r5
}
 801d198:	bf00      	nop
 801d19a:	3710      	adds	r7, #16
 801d19c:	46bd      	mov	sp, r7
 801d19e:	bdb0      	pop	{r4, r5, r7, pc}
 801d1a0:	08025f40 	.word	0x08025f40
 801d1a4:	08025f5c 	.word	0x08025f5c

0801d1a8 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801d1a8:	b5b0      	push	{r4, r5, r7, lr}
 801d1aa:	b086      	sub	sp, #24
 801d1ac:	af02      	add	r7, sp, #8
 801d1ae:	60f8      	str	r0, [r7, #12]
 801d1b0:	1d3b      	adds	r3, r7, #4
 801d1b2:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801d1b6:	f7f6 fd99 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d1ba:	4604      	mov	r4, r0
 801d1bc:	6823      	ldr	r3, [r4, #0]
 801d1be:	3368      	adds	r3, #104	; 0x68
 801d1c0:	681d      	ldr	r5, [r3, #0]
 801d1c2:	f7f6 fda3 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d1c6:	4603      	mov	r3, r0
 801d1c8:	9300      	str	r3, [sp, #0]
 801d1ca:	236c      	movs	r3, #108	; 0x6c
 801d1cc:	4a03      	ldr	r2, [pc, #12]	; (801d1dc <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801d1ce:	4904      	ldr	r1, [pc, #16]	; (801d1e0 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801d1d0:	4620      	mov	r0, r4
 801d1d2:	47a8      	blx	r5
}
 801d1d4:	bf00      	nop
 801d1d6:	3710      	adds	r7, #16
 801d1d8:	46bd      	mov	sp, r7
 801d1da:	bdb0      	pop	{r4, r5, r7, pc}
 801d1dc:	08025f40 	.word	0x08025f40
 801d1e0:	08025f7c 	.word	0x08025f7c
 801d1e4:	00000000 	.word	0x00000000

0801d1e8 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801d1e8:	b580      	push	{r7, lr}
 801d1ea:	b084      	sub	sp, #16
 801d1ec:	af00      	add	r7, sp, #0
 801d1ee:	60f8      	str	r0, [r7, #12]
 801d1f0:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	3328      	adds	r3, #40	; 0x28
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801d210 <_ZN14MockNamedValue8setValueEd+0x28>
 801d200:	ed97 0b00 	vldr	d0, [r7]
 801d204:	68f8      	ldr	r0, [r7, #12]
 801d206:	4798      	blx	r3
}
 801d208:	bf00      	nop
 801d20a:	3710      	adds	r7, #16
 801d20c:	46bd      	mov	sp, r7
 801d20e:	bd80      	pop	{r7, pc}
 801d210:	47ae147b 	.word	0x47ae147b
 801d214:	3f747ae1 	.word	0x3f747ae1

0801d218 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801d218:	b590      	push	{r4, r7, lr}
 801d21a:	b089      	sub	sp, #36	; 0x24
 801d21c:	af00      	add	r7, sp, #0
 801d21e:	6178      	str	r0, [r7, #20]
 801d220:	ed87 0b02 	vstr	d0, [r7, #8]
 801d224:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801d228:	697b      	ldr	r3, [r7, #20]
 801d22a:	f103 040c 	add.w	r4, r3, #12
 801d22e:	f107 0318 	add.w	r3, r7, #24
 801d232:	490e      	ldr	r1, [pc, #56]	; (801d26c <_ZN14MockNamedValue8setValueEdd+0x54>)
 801d234:	4618      	mov	r0, r3
 801d236:	f7ef f976 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d23a:	f107 0318 	add.w	r3, r7, #24
 801d23e:	4619      	mov	r1, r3
 801d240:	4620      	mov	r0, r4
 801d242:	f7ef f9dc 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d246:	f107 0318 	add.w	r3, r7, #24
 801d24a:	4618      	mov	r0, r3
 801d24c:	f7ef fd23 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801d250:	6979      	ldr	r1, [r7, #20]
 801d252:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d256:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801d25a:	6979      	ldr	r1, [r7, #20]
 801d25c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d260:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801d264:	bf00      	nop
 801d266:	3724      	adds	r7, #36	; 0x24
 801d268:	46bd      	mov	sp, r7
 801d26a:	bd90      	pop	{r4, r7, pc}
 801d26c:	08025fa8 	.word	0x08025fa8

0801d270 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801d270:	b590      	push	{r4, r7, lr}
 801d272:	b085      	sub	sp, #20
 801d274:	af00      	add	r7, sp, #0
 801d276:	6078      	str	r0, [r7, #4]
 801d278:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	f103 040c 	add.w	r4, r3, #12
 801d280:	f107 0308 	add.w	r3, r7, #8
 801d284:	490a      	ldr	r1, [pc, #40]	; (801d2b0 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801d286:	4618      	mov	r0, r3
 801d288:	f7ef f94d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d28c:	f107 0308 	add.w	r3, r7, #8
 801d290:	4619      	mov	r1, r3
 801d292:	4620      	mov	r0, r4
 801d294:	f7ef f9b3 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d298:	f107 0308 	add.w	r3, r7, #8
 801d29c:	4618      	mov	r0, r3
 801d29e:	f7ef fcfa 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	683a      	ldr	r2, [r7, #0]
 801d2a6:	619a      	str	r2, [r3, #24]
}
 801d2a8:	bf00      	nop
 801d2aa:	3714      	adds	r7, #20
 801d2ac:	46bd      	mov	sp, r7
 801d2ae:	bd90      	pop	{r4, r7, pc}
 801d2b0:	08025fb0 	.word	0x08025fb0

0801d2b4 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801d2b4:	b590      	push	{r4, r7, lr}
 801d2b6:	b085      	sub	sp, #20
 801d2b8:	af00      	add	r7, sp, #0
 801d2ba:	6078      	str	r0, [r7, #4]
 801d2bc:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	f103 040c 	add.w	r4, r3, #12
 801d2c4:	f107 0308 	add.w	r3, r7, #8
 801d2c8:	490a      	ldr	r1, [pc, #40]	; (801d2f4 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	f7ef f92b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d2d0:	f107 0308 	add.w	r3, r7, #8
 801d2d4:	4619      	mov	r1, r3
 801d2d6:	4620      	mov	r0, r4
 801d2d8:	f7ef f991 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d2dc:	f107 0308 	add.w	r3, r7, #8
 801d2e0:	4618      	mov	r0, r3
 801d2e2:	f7ef fcd8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	683a      	ldr	r2, [r7, #0]
 801d2ea:	619a      	str	r2, [r3, #24]
}
 801d2ec:	bf00      	nop
 801d2ee:	3714      	adds	r7, #20
 801d2f0:	46bd      	mov	sp, r7
 801d2f2:	bd90      	pop	{r4, r7, pc}
 801d2f4:	08025fb8 	.word	0x08025fb8

0801d2f8 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801d2f8:	b590      	push	{r4, r7, lr}
 801d2fa:	b085      	sub	sp, #20
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	6078      	str	r0, [r7, #4]
 801d300:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	f103 040c 	add.w	r4, r3, #12
 801d308:	f107 0308 	add.w	r3, r7, #8
 801d30c:	490a      	ldr	r1, [pc, #40]	; (801d338 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801d30e:	4618      	mov	r0, r3
 801d310:	f7ef f909 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d314:	f107 0308 	add.w	r3, r7, #8
 801d318:	4619      	mov	r1, r3
 801d31a:	4620      	mov	r0, r4
 801d31c:	f7ef f96f 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d320:	f107 0308 	add.w	r3, r7, #8
 801d324:	4618      	mov	r0, r3
 801d326:	f7ef fcb6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	683a      	ldr	r2, [r7, #0]
 801d32e:	619a      	str	r2, [r3, #24]
}
 801d330:	bf00      	nop
 801d332:	3714      	adds	r7, #20
 801d334:	46bd      	mov	sp, r7
 801d336:	bd90      	pop	{r4, r7, pc}
 801d338:	08025fc4 	.word	0x08025fc4

0801d33c <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801d33c:	b590      	push	{r4, r7, lr}
 801d33e:	b085      	sub	sp, #20
 801d340:	af00      	add	r7, sp, #0
 801d342:	6078      	str	r0, [r7, #4]
 801d344:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	f103 040c 	add.w	r4, r3, #12
 801d34c:	f107 0308 	add.w	r3, r7, #8
 801d350:	490a      	ldr	r1, [pc, #40]	; (801d37c <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801d352:	4618      	mov	r0, r3
 801d354:	f7ef f8e7 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d358:	f107 0308 	add.w	r3, r7, #8
 801d35c:	4619      	mov	r1, r3
 801d35e:	4620      	mov	r0, r4
 801d360:	f7ef f94d 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d364:	f107 0308 	add.w	r3, r7, #8
 801d368:	4618      	mov	r0, r3
 801d36a:	f7ef fc94 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	683a      	ldr	r2, [r7, #0]
 801d372:	619a      	str	r2, [r3, #24]
}
 801d374:	bf00      	nop
 801d376:	3714      	adds	r7, #20
 801d378:	46bd      	mov	sp, r7
 801d37a:	bd90      	pop	{r4, r7, pc}
 801d37c:	08025fd0 	.word	0x08025fd0

0801d380 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801d380:	b590      	push	{r4, r7, lr}
 801d382:	b087      	sub	sp, #28
 801d384:	af00      	add	r7, sp, #0
 801d386:	60f8      	str	r0, [r7, #12]
 801d388:	60b9      	str	r1, [r7, #8]
 801d38a:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801d38c:	68fb      	ldr	r3, [r7, #12]
 801d38e:	f103 040c 	add.w	r4, r3, #12
 801d392:	f107 0310 	add.w	r3, r7, #16
 801d396:	490c      	ldr	r1, [pc, #48]	; (801d3c8 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801d398:	4618      	mov	r0, r3
 801d39a:	f7ef f8c4 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d39e:	f107 0310 	add.w	r3, r7, #16
 801d3a2:	4619      	mov	r1, r3
 801d3a4:	4620      	mov	r0, r4
 801d3a6:	f7ef f92a 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d3aa:	f107 0310 	add.w	r3, r7, #16
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	f7ef fc71 	bl	800cc96 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	68ba      	ldr	r2, [r7, #8]
 801d3b8:	619a      	str	r2, [r3, #24]
    size_ = size;
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	687a      	ldr	r2, [r7, #4]
 801d3be:	629a      	str	r2, [r3, #40]	; 0x28
}
 801d3c0:	bf00      	nop
 801d3c2:	371c      	adds	r7, #28
 801d3c4:	46bd      	mov	sp, r7
 801d3c6:	bd90      	pop	{r4, r7, pc}
 801d3c8:	08025fdc 	.word	0x08025fdc

0801d3cc <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b084      	sub	sp, #16
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	60f8      	str	r0, [r7, #12]
 801d3d4:	60b9      	str	r1, [r7, #8]
 801d3d6:	607a      	str	r2, [r7, #4]
    type_ = type;
 801d3d8:	68fb      	ldr	r3, [r7, #12]
 801d3da:	330c      	adds	r3, #12
 801d3dc:	68b9      	ldr	r1, [r7, #8]
 801d3de:	4618      	mov	r0, r3
 801d3e0:	f7ef f90d 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	687a      	ldr	r2, [r7, #4]
 801d3e8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801d3ea:	4b11      	ldr	r3, [pc, #68]	; (801d430 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d019      	beq.n	801d426 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801d3f2:	4b0f      	ldr	r3, [pc, #60]	; (801d430 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d3f4:	681a      	ldr	r2, [r3, #0]
 801d3f6:	4b0e      	ldr	r3, [pc, #56]	; (801d430 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	3314      	adds	r3, #20
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	68b9      	ldr	r1, [r7, #8]
 801d402:	4610      	mov	r0, r2
 801d404:	4798      	blx	r3
 801d406:	4602      	mov	r2, r0
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801d40c:	4b08      	ldr	r3, [pc, #32]	; (801d430 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d40e:	681a      	ldr	r2, [r3, #0]
 801d410:	4b07      	ldr	r3, [pc, #28]	; (801d430 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	3318      	adds	r3, #24
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	68b9      	ldr	r1, [r7, #8]
 801d41c:	4610      	mov	r0, r2
 801d41e:	4798      	blx	r3
 801d420:	4602      	mov	r2, r0
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801d426:	bf00      	nop
 801d428:	3710      	adds	r7, #16
 801d42a:	46bd      	mov	sp, r7
 801d42c:	bd80      	pop	{r7, pc}
 801d42e:	bf00      	nop
 801d430:	20000e60 	.word	0x20000e60

0801d434 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801d434:	b580      	push	{r7, lr}
 801d436:	b084      	sub	sp, #16
 801d438:	af00      	add	r7, sp, #0
 801d43a:	60f8      	str	r0, [r7, #12]
 801d43c:	60b9      	str	r1, [r7, #8]
 801d43e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	330c      	adds	r3, #12
 801d444:	68b9      	ldr	r1, [r7, #8]
 801d446:	4618      	mov	r0, r3
 801d448:	f7ef f8d9 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	687a      	ldr	r2, [r7, #4]
 801d450:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801d452:	4b11      	ldr	r3, [pc, #68]	; (801d498 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	2b00      	cmp	r3, #0
 801d458:	d019      	beq.n	801d48e <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801d45a:	4b0f      	ldr	r3, [pc, #60]	; (801d498 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d45c:	681a      	ldr	r2, [r3, #0]
 801d45e:	4b0e      	ldr	r3, [pc, #56]	; (801d498 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d460:	681b      	ldr	r3, [r3, #0]
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	3314      	adds	r3, #20
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	68b9      	ldr	r1, [r7, #8]
 801d46a:	4610      	mov	r0, r2
 801d46c:	4798      	blx	r3
 801d46e:	4602      	mov	r2, r0
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801d474:	4b08      	ldr	r3, [pc, #32]	; (801d498 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d476:	681a      	ldr	r2, [r3, #0]
 801d478:	4b07      	ldr	r3, [pc, #28]	; (801d498 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	681b      	ldr	r3, [r3, #0]
 801d47e:	3318      	adds	r3, #24
 801d480:	681b      	ldr	r3, [r3, #0]
 801d482:	68b9      	ldr	r1, [r7, #8]
 801d484:	4610      	mov	r0, r2
 801d486:	4798      	blx	r3
 801d488:	4602      	mov	r2, r0
 801d48a:	68fb      	ldr	r3, [r7, #12]
 801d48c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801d48e:	bf00      	nop
 801d490:	3710      	adds	r7, #16
 801d492:	46bd      	mov	sp, r7
 801d494:	bd80      	pop	{r7, pc}
 801d496:	bf00      	nop
 801d498:	20000e60 	.word	0x20000e60

0801d49c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801d49c:	b480      	push	{r7}
 801d49e:	b083      	sub	sp, #12
 801d4a0:	af00      	add	r7, sp, #0
 801d4a2:	6078      	str	r0, [r7, #4]
 801d4a4:	6039      	str	r1, [r7, #0]
    size_ = size;
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	683a      	ldr	r2, [r7, #0]
 801d4aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 801d4ac:	bf00      	nop
 801d4ae:	370c      	adds	r7, #12
 801d4b0:	46bd      	mov	sp, r7
 801d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4b6:	4770      	bx	lr

0801d4b8 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801d4b8:	b590      	push	{r4, r7, lr}
 801d4ba:	b085      	sub	sp, #20
 801d4bc:	af00      	add	r7, sp, #0
 801d4be:	6078      	str	r0, [r7, #4]
 801d4c0:	6039      	str	r1, [r7, #0]
    name_ = name;
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	1d1c      	adds	r4, r3, #4
 801d4c6:	f107 0308 	add.w	r3, r7, #8
 801d4ca:	6839      	ldr	r1, [r7, #0]
 801d4cc:	4618      	mov	r0, r3
 801d4ce:	f7ef f82a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d4d2:	f107 0308 	add.w	r3, r7, #8
 801d4d6:	4619      	mov	r1, r3
 801d4d8:	4620      	mov	r0, r4
 801d4da:	f7ef f890 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
 801d4de:	f107 0308 	add.w	r3, r7, #8
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	f7ef fbd7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
}
 801d4e8:	bf00      	nop
 801d4ea:	3714      	adds	r7, #20
 801d4ec:	46bd      	mov	sp, r7
 801d4ee:	bd90      	pop	{r4, r7, pc}

0801d4f0 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	b082      	sub	sp, #8
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	6078      	str	r0, [r7, #4]
 801d4f8:	6039      	str	r1, [r7, #0]
    return name_;
 801d4fa:	683b      	ldr	r3, [r7, #0]
 801d4fc:	3304      	adds	r3, #4
 801d4fe:	4619      	mov	r1, r3
 801d500:	6878      	ldr	r0, [r7, #4]
 801d502:	f7ef f864 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
}
 801d506:	6878      	ldr	r0, [r7, #4]
 801d508:	3708      	adds	r7, #8
 801d50a:	46bd      	mov	sp, r7
 801d50c:	bd80      	pop	{r7, pc}

0801d50e <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801d50e:	b580      	push	{r7, lr}
 801d510:	b082      	sub	sp, #8
 801d512:	af00      	add	r7, sp, #0
 801d514:	6078      	str	r0, [r7, #4]
 801d516:	6039      	str	r1, [r7, #0]
    return type_;
 801d518:	683b      	ldr	r3, [r7, #0]
 801d51a:	330c      	adds	r3, #12
 801d51c:	4619      	mov	r1, r3
 801d51e:	6878      	ldr	r0, [r7, #4]
 801d520:	f7ef f855 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
}
 801d524:	6878      	ldr	r0, [r7, #4]
 801d526:	3708      	adds	r7, #8
 801d528:	46bd      	mov	sp, r7
 801d52a:	bd80      	pop	{r7, pc}

0801d52c <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801d52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d52e:	b087      	sub	sp, #28
 801d530:	af04      	add	r7, sp, #16
 801d532:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801d534:	f7f6 fbda 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d538:	4604      	mov	r4, r0
 801d53a:	6823      	ldr	r3, [r4, #0]
 801d53c:	3324      	adds	r3, #36	; 0x24
 801d53e:	681d      	ldr	r5, [r3, #0]
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	330c      	adds	r3, #12
 801d544:	4618      	mov	r0, r3
 801d546:	f7ef fb79 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801d54a:	4606      	mov	r6, r0
 801d54c:	f7f6 fbde 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d550:	4603      	mov	r3, r0
 801d552:	9302      	str	r3, [sp, #8]
 801d554:	23c8      	movs	r3, #200	; 0xc8
 801d556:	9301      	str	r3, [sp, #4]
 801d558:	4b06      	ldr	r3, [pc, #24]	; (801d574 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801d55a:	9300      	str	r3, [sp, #0]
 801d55c:	2300      	movs	r3, #0
 801d55e:	4632      	mov	r2, r6
 801d560:	4905      	ldr	r1, [pc, #20]	; (801d578 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801d562:	4620      	mov	r0, r4
 801d564:	47a8      	blx	r5
    return value_.boolValue_;
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	7e1b      	ldrb	r3, [r3, #24]
}
 801d56a:	4618      	mov	r0, r3
 801d56c:	370c      	adds	r7, #12
 801d56e:	46bd      	mov	sp, r7
 801d570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d572:	bf00      	nop
 801d574:	08025f40 	.word	0x08025f40
 801d578:	08025f08 	.word	0x08025f08

0801d57c <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801d57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d57e:	b089      	sub	sp, #36	; 0x24
 801d580:	af04      	add	r7, sp, #16
 801d582:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	f103 040c 	add.w	r4, r3, #12
 801d58a:	f107 0308 	add.w	r3, r7, #8
 801d58e:	4920      	ldr	r1, [pc, #128]	; (801d610 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801d590:	4618      	mov	r0, r3
 801d592:	f7ee ffc8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d596:	2501      	movs	r5, #1
 801d598:	f107 0308 	add.w	r3, r7, #8
 801d59c:	4619      	mov	r1, r3
 801d59e:	4620      	mov	r0, r4
 801d5a0:	f7ef fb85 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801d5a4:	4603      	mov	r3, r0
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d005      	beq.n	801d5b6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	699b      	ldr	r3, [r3, #24]
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	db01      	blt.n	801d5b6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801d5b2:	2401      	movs	r4, #1
 801d5b4:	e000      	b.n	801d5b8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801d5b6:	2400      	movs	r4, #0
 801d5b8:	2d00      	cmp	r5, #0
 801d5ba:	d004      	beq.n	801d5c6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801d5bc:	f107 0308 	add.w	r3, r7, #8
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	f7ef fb68 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801d5c6:	2c00      	cmp	r4, #0
 801d5c8:	d002      	beq.n	801d5d0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	699b      	ldr	r3, [r3, #24]
 801d5ce:	e01a      	b.n	801d606 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801d5d0:	f7f6 fb8c 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d5d4:	4604      	mov	r4, r0
 801d5d6:	6823      	ldr	r3, [r4, #0]
 801d5d8:	3324      	adds	r3, #36	; 0x24
 801d5da:	681d      	ldr	r5, [r3, #0]
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	330c      	adds	r3, #12
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	f7ef fb2b 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801d5e6:	4606      	mov	r6, r0
 801d5e8:	f7f6 fb90 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d5ec:	4603      	mov	r3, r0
 801d5ee:	9302      	str	r3, [sp, #8]
 801d5f0:	23d2      	movs	r3, #210	; 0xd2
 801d5f2:	9301      	str	r3, [sp, #4]
 801d5f4:	4b07      	ldr	r3, [pc, #28]	; (801d614 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801d5f6:	9300      	str	r3, [sp, #0]
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	4632      	mov	r2, r6
 801d5fc:	4906      	ldr	r1, [pc, #24]	; (801d618 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801d5fe:	4620      	mov	r0, r4
 801d600:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	699b      	ldr	r3, [r3, #24]
    }
}
 801d606:	4618      	mov	r0, r3
 801d608:	3714      	adds	r7, #20
 801d60a:	46bd      	mov	sp, r7
 801d60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d60e:	bf00      	nop
 801d610:	08025f04 	.word	0x08025f04
 801d614:	08025f40 	.word	0x08025f40
 801d618:	08025f10 	.word	0x08025f10

0801d61c <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801d61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d61e:	b087      	sub	sp, #28
 801d620:	af04      	add	r7, sp, #16
 801d622:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801d624:	f7f6 fb62 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d628:	4604      	mov	r4, r0
 801d62a:	6823      	ldr	r3, [r4, #0]
 801d62c:	3324      	adds	r3, #36	; 0x24
 801d62e:	681d      	ldr	r5, [r3, #0]
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	330c      	adds	r3, #12
 801d634:	4618      	mov	r0, r3
 801d636:	f7ef fb01 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801d63a:	4606      	mov	r6, r0
 801d63c:	f7f6 fb66 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d640:	4603      	mov	r3, r0
 801d642:	9302      	str	r3, [sp, #8]
 801d644:	23d9      	movs	r3, #217	; 0xd9
 801d646:	9301      	str	r3, [sp, #4]
 801d648:	4b06      	ldr	r3, [pc, #24]	; (801d664 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801d64a:	9300      	str	r3, [sp, #0]
 801d64c:	2300      	movs	r3, #0
 801d64e:	4632      	mov	r2, r6
 801d650:	4905      	ldr	r1, [pc, #20]	; (801d668 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801d652:	4620      	mov	r0, r4
 801d654:	47a8      	blx	r5
    return value_.intValue_;
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	699b      	ldr	r3, [r3, #24]
}
 801d65a:	4618      	mov	r0, r3
 801d65c:	370c      	adds	r7, #12
 801d65e:	46bd      	mov	sp, r7
 801d660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d662:	bf00      	nop
 801d664:	08025f40 	.word	0x08025f40
 801d668:	08025f04 	.word	0x08025f04

0801d66c <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801d66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d66e:	b08b      	sub	sp, #44	; 0x2c
 801d670:	af04      	add	r7, sp, #16
 801d672:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	f103 040c 	add.w	r4, r3, #12
 801d67a:	f107 0308 	add.w	r3, r7, #8
 801d67e:	4928      	ldr	r1, [pc, #160]	; (801d720 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801d680:	4618      	mov	r0, r3
 801d682:	f7ee ff50 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d686:	f107 0308 	add.w	r3, r7, #8
 801d68a:	4619      	mov	r1, r3
 801d68c:	4620      	mov	r0, r4
 801d68e:	f7ef fb0e 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801d692:	4603      	mov	r3, r0
 801d694:	461c      	mov	r4, r3
 801d696:	f107 0308 	add.w	r3, r7, #8
 801d69a:	4618      	mov	r0, r3
 801d69c:	f7ef fafb 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801d6a0:	2c00      	cmp	r4, #0
 801d6a2:	d002      	beq.n	801d6aa <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	699b      	ldr	r3, [r3, #24]
 801d6a8:	e035      	b.n	801d716 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	f103 040c 	add.w	r4, r3, #12
 801d6b0:	f107 0310 	add.w	r3, r7, #16
 801d6b4:	491b      	ldr	r1, [pc, #108]	; (801d724 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7ee ff35 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d6bc:	f107 0310 	add.w	r3, r7, #16
 801d6c0:	4619      	mov	r1, r3
 801d6c2:	4620      	mov	r0, r4
 801d6c4:	f7ef faf3 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801d6c8:	4603      	mov	r3, r0
 801d6ca:	461c      	mov	r4, r3
 801d6cc:	f107 0310 	add.w	r3, r7, #16
 801d6d0:	4618      	mov	r0, r3
 801d6d2:	f7ef fae0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801d6d6:	2c00      	cmp	r4, #0
 801d6d8:	d002      	beq.n	801d6e0 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	699b      	ldr	r3, [r3, #24]
 801d6de:	e01a      	b.n	801d716 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801d6e0:	f7f6 fb04 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d6e4:	4604      	mov	r4, r0
 801d6e6:	6823      	ldr	r3, [r4, #0]
 801d6e8:	3324      	adds	r3, #36	; 0x24
 801d6ea:	681d      	ldr	r5, [r3, #0]
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	330c      	adds	r3, #12
 801d6f0:	4618      	mov	r0, r3
 801d6f2:	f7ef faa3 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801d6f6:	4606      	mov	r6, r0
 801d6f8:	f7f6 fb08 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	9302      	str	r3, [sp, #8]
 801d700:	23e5      	movs	r3, #229	; 0xe5
 801d702:	9301      	str	r3, [sp, #4]
 801d704:	4b08      	ldr	r3, [pc, #32]	; (801d728 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801d706:	9300      	str	r3, [sp, #0]
 801d708:	2300      	movs	r3, #0
 801d70a:	4632      	mov	r2, r6
 801d70c:	4907      	ldr	r1, [pc, #28]	; (801d72c <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801d70e:	4620      	mov	r0, r4
 801d710:	47a8      	blx	r5
        return value_.longIntValue_;
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	699b      	ldr	r3, [r3, #24]
    }
}
 801d716:	4618      	mov	r0, r3
 801d718:	371c      	adds	r7, #28
 801d71a:	46bd      	mov	sp, r7
 801d71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d71e:	bf00      	nop
 801d720:	08025f04 	.word	0x08025f04
 801d724:	08025f10 	.word	0x08025f10
 801d728:	08025f40 	.word	0x08025f40
 801d72c:	08025f20 	.word	0x08025f20

0801d730 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801d730:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d732:	b08d      	sub	sp, #52	; 0x34
 801d734:	af04      	add	r7, sp, #16
 801d736:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	f103 040c 	add.w	r4, r3, #12
 801d73e:	f107 0308 	add.w	r3, r7, #8
 801d742:	4940      	ldr	r1, [pc, #256]	; (801d844 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801d744:	4618      	mov	r0, r3
 801d746:	f7ee feee 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d74a:	f107 0308 	add.w	r3, r7, #8
 801d74e:	4619      	mov	r1, r3
 801d750:	4620      	mov	r0, r4
 801d752:	f7ef faac 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801d756:	4603      	mov	r3, r0
 801d758:	461c      	mov	r4, r3
 801d75a:	f107 0308 	add.w	r3, r7, #8
 801d75e:	4618      	mov	r0, r3
 801d760:	f7ef fa99 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801d764:	2c00      	cmp	r4, #0
 801d766:	d002      	beq.n	801d76e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	699b      	ldr	r3, [r3, #24]
 801d76c:	e066      	b.n	801d83c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	f103 040c 	add.w	r4, r3, #12
 801d774:	f107 0310 	add.w	r3, r7, #16
 801d778:	4933      	ldr	r1, [pc, #204]	; (801d848 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801d77a:	4618      	mov	r0, r3
 801d77c:	f7ee fed3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d780:	2501      	movs	r5, #1
 801d782:	f107 0310 	add.w	r3, r7, #16
 801d786:	4619      	mov	r1, r3
 801d788:	4620      	mov	r0, r4
 801d78a:	f7ef fa90 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801d78e:	4603      	mov	r3, r0
 801d790:	2b00      	cmp	r3, #0
 801d792:	d005      	beq.n	801d7a0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	699b      	ldr	r3, [r3, #24]
 801d798:	2b00      	cmp	r3, #0
 801d79a:	db01      	blt.n	801d7a0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801d79c:	2401      	movs	r4, #1
 801d79e:	e000      	b.n	801d7a2 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801d7a0:	2400      	movs	r4, #0
 801d7a2:	2d00      	cmp	r5, #0
 801d7a4:	d004      	beq.n	801d7b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801d7a6:	f107 0310 	add.w	r3, r7, #16
 801d7aa:	4618      	mov	r0, r3
 801d7ac:	f7ef fa73 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801d7b0:	2c00      	cmp	r4, #0
 801d7b2:	d002      	beq.n	801d7ba <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	699b      	ldr	r3, [r3, #24]
 801d7b8:	e040      	b.n	801d83c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	f103 040c 	add.w	r4, r3, #12
 801d7c0:	f107 0318 	add.w	r3, r7, #24
 801d7c4:	4921      	ldr	r1, [pc, #132]	; (801d84c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	f7ee fead 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801d7cc:	2501      	movs	r5, #1
 801d7ce:	f107 0318 	add.w	r3, r7, #24
 801d7d2:	4619      	mov	r1, r3
 801d7d4:	4620      	mov	r0, r4
 801d7d6:	f7ef fa6a 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801d7da:	4603      	mov	r3, r0
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	d005      	beq.n	801d7ec <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	699b      	ldr	r3, [r3, #24]
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	db01      	blt.n	801d7ec <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801d7e8:	2401      	movs	r4, #1
 801d7ea:	e000      	b.n	801d7ee <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801d7ec:	2400      	movs	r4, #0
 801d7ee:	2d00      	cmp	r5, #0
 801d7f0:	d004      	beq.n	801d7fc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801d7f2:	f107 0318 	add.w	r3, r7, #24
 801d7f6:	4618      	mov	r0, r3
 801d7f8:	f7ef fa4d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801d7fc:	2c00      	cmp	r4, #0
 801d7fe:	d002      	beq.n	801d806 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	699b      	ldr	r3, [r3, #24]
 801d804:	e01a      	b.n	801d83c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801d806:	f7f6 fa71 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d80a:	4604      	mov	r4, r0
 801d80c:	6823      	ldr	r3, [r4, #0]
 801d80e:	3324      	adds	r3, #36	; 0x24
 801d810:	681d      	ldr	r5, [r3, #0]
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	330c      	adds	r3, #12
 801d816:	4618      	mov	r0, r3
 801d818:	f7ef fa10 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801d81c:	4606      	mov	r6, r0
 801d81e:	f7f6 fa75 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d822:	4603      	mov	r3, r0
 801d824:	9302      	str	r3, [sp, #8]
 801d826:	23f4      	movs	r3, #244	; 0xf4
 801d828:	9301      	str	r3, [sp, #4]
 801d82a:	4b09      	ldr	r3, [pc, #36]	; (801d850 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801d82c:	9300      	str	r3, [sp, #0]
 801d82e:	2300      	movs	r3, #0
 801d830:	4632      	mov	r2, r6
 801d832:	4908      	ldr	r1, [pc, #32]	; (801d854 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801d834:	4620      	mov	r0, r4
 801d836:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	699b      	ldr	r3, [r3, #24]
    }
}
 801d83c:	4618      	mov	r0, r3
 801d83e:	3724      	adds	r7, #36	; 0x24
 801d840:	46bd      	mov	sp, r7
 801d842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d844:	08025f10 	.word	0x08025f10
 801d848:	08025f04 	.word	0x08025f04
 801d84c:	08025f20 	.word	0x08025f20
 801d850:	08025f40 	.word	0x08025f40
 801d854:	08025f2c 	.word	0x08025f2c

0801d858 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801d858:	b5b0      	push	{r4, r5, r7, lr}
 801d85a:	b084      	sub	sp, #16
 801d85c:	af02      	add	r7, sp, #8
 801d85e:	6078      	str	r0, [r7, #4]
 801d860:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801d862:	f7f6 fa43 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d866:	4604      	mov	r4, r0
 801d868:	6823      	ldr	r3, [r4, #0]
 801d86a:	3368      	adds	r3, #104	; 0x68
 801d86c:	681d      	ldr	r5, [r3, #0]
 801d86e:	f7f6 fa4d 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d872:	4603      	mov	r3, r0
 801d874:	9300      	str	r3, [sp, #0]
 801d876:	f240 1323 	movw	r3, #291	; 0x123
 801d87a:	4a06      	ldr	r2, [pc, #24]	; (801d894 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801d87c:	4906      	ldr	r1, [pc, #24]	; (801d898 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801d87e:	4620      	mov	r0, r4
 801d880:	47a8      	blx	r5
    return cpputest_longlong(0);
 801d882:	2100      	movs	r1, #0
 801d884:	6878      	ldr	r0, [r7, #4]
 801d886:	f7ec fe85 	bl	800a594 <_ZN17cpputest_longlongC1Ei>
}
 801d88a:	6878      	ldr	r0, [r7, #4]
 801d88c:	3708      	adds	r7, #8
 801d88e:	46bd      	mov	sp, r7
 801d890:	bdb0      	pop	{r4, r5, r7, pc}
 801d892:	bf00      	nop
 801d894:	08025f40 	.word	0x08025f40
 801d898:	08025f5c 	.word	0x08025f5c

0801d89c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801d89c:	b5b0      	push	{r4, r5, r7, lr}
 801d89e:	b084      	sub	sp, #16
 801d8a0:	af02      	add	r7, sp, #8
 801d8a2:	6078      	str	r0, [r7, #4]
 801d8a4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801d8a6:	f7f6 fa21 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d8aa:	4604      	mov	r4, r0
 801d8ac:	6823      	ldr	r3, [r4, #0]
 801d8ae:	3368      	adds	r3, #104	; 0x68
 801d8b0:	681d      	ldr	r5, [r3, #0]
 801d8b2:	f7f6 fa2b 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d8b6:	4603      	mov	r3, r0
 801d8b8:	9300      	str	r3, [sp, #0]
 801d8ba:	f240 1329 	movw	r3, #297	; 0x129
 801d8be:	4a06      	ldr	r2, [pc, #24]	; (801d8d8 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801d8c0:	4906      	ldr	r1, [pc, #24]	; (801d8dc <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801d8c2:	4620      	mov	r0, r4
 801d8c4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801d8c6:	2100      	movs	r1, #0
 801d8c8:	6878      	ldr	r0, [r7, #4]
 801d8ca:	f7ec fe6f 	bl	800a5ac <_ZN18cpputest_ulonglongC1Ei>
}
 801d8ce:	6878      	ldr	r0, [r7, #4]
 801d8d0:	3708      	adds	r7, #8
 801d8d2:	46bd      	mov	sp, r7
 801d8d4:	bdb0      	pop	{r4, r5, r7, pc}
 801d8d6:	bf00      	nop
 801d8d8:	08025f40 	.word	0x08025f40
 801d8dc:	08025f7c 	.word	0x08025f7c

0801d8e0 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801d8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8e2:	b087      	sub	sp, #28
 801d8e4:	af04      	add	r7, sp, #16
 801d8e6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801d8e8:	f7f6 fa00 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d8ec:	4604      	mov	r4, r0
 801d8ee:	6823      	ldr	r3, [r4, #0]
 801d8f0:	3324      	adds	r3, #36	; 0x24
 801d8f2:	681d      	ldr	r5, [r3, #0]
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	330c      	adds	r3, #12
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	f7ef f99f 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801d8fe:	4606      	mov	r6, r0
 801d900:	f7f6 fa04 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d904:	4603      	mov	r3, r0
 801d906:	9302      	str	r3, [sp, #8]
 801d908:	f240 1331 	movw	r3, #305	; 0x131
 801d90c:	9301      	str	r3, [sp, #4]
 801d90e:	4b09      	ldr	r3, [pc, #36]	; (801d934 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801d910:	9300      	str	r3, [sp, #0]
 801d912:	2300      	movs	r3, #0
 801d914:	4632      	mov	r2, r6
 801d916:	4908      	ldr	r1, [pc, #32]	; (801d938 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801d918:	4620      	mov	r0, r4
 801d91a:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801d922:	ec43 2b17 	vmov	d7, r2, r3
}
 801d926:	eeb0 0a47 	vmov.f32	s0, s14
 801d92a:	eef0 0a67 	vmov.f32	s1, s15
 801d92e:	370c      	adds	r7, #12
 801d930:	46bd      	mov	sp, r7
 801d932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d934:	08025f40 	.word	0x08025f40
 801d938:	08025fa8 	.word	0x08025fa8

0801d93c <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801d93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d93e:	b087      	sub	sp, #28
 801d940:	af04      	add	r7, sp, #16
 801d942:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801d944:	f7f6 f9d2 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d948:	4604      	mov	r4, r0
 801d94a:	6823      	ldr	r3, [r4, #0]
 801d94c:	3324      	adds	r3, #36	; 0x24
 801d94e:	681d      	ldr	r5, [r3, #0]
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	330c      	adds	r3, #12
 801d954:	4618      	mov	r0, r3
 801d956:	f7ef f971 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801d95a:	4606      	mov	r6, r0
 801d95c:	f7f6 f9d6 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d960:	4603      	mov	r3, r0
 801d962:	9302      	str	r3, [sp, #8]
 801d964:	f240 1337 	movw	r3, #311	; 0x137
 801d968:	9301      	str	r3, [sp, #4]
 801d96a:	4b09      	ldr	r3, [pc, #36]	; (801d990 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801d96c:	9300      	str	r3, [sp, #0]
 801d96e:	2300      	movs	r3, #0
 801d970:	4632      	mov	r2, r6
 801d972:	4908      	ldr	r1, [pc, #32]	; (801d994 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801d974:	4620      	mov	r0, r4
 801d976:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d97e:	ec43 2b17 	vmov	d7, r2, r3
}
 801d982:	eeb0 0a47 	vmov.f32	s0, s14
 801d986:	eef0 0a67 	vmov.f32	s1, s15
 801d98a:	370c      	adds	r7, #12
 801d98c:	46bd      	mov	sp, r7
 801d98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d990:	08025f40 	.word	0x08025f40
 801d994:	08025fa8 	.word	0x08025fa8

0801d998 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801d998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d99a:	b087      	sub	sp, #28
 801d99c:	af04      	add	r7, sp, #16
 801d99e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801d9a0:	f7f6 f9a4 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d9a4:	4604      	mov	r4, r0
 801d9a6:	6823      	ldr	r3, [r4, #0]
 801d9a8:	3324      	adds	r3, #36	; 0x24
 801d9aa:	681d      	ldr	r5, [r3, #0]
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	330c      	adds	r3, #12
 801d9b0:	4618      	mov	r0, r3
 801d9b2:	f7ef f943 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801d9b6:	4606      	mov	r6, r0
 801d9b8:	f7f6 f9a8 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d9bc:	4603      	mov	r3, r0
 801d9be:	9302      	str	r3, [sp, #8]
 801d9c0:	f240 133d 	movw	r3, #317	; 0x13d
 801d9c4:	9301      	str	r3, [sp, #4]
 801d9c6:	4b06      	ldr	r3, [pc, #24]	; (801d9e0 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801d9c8:	9300      	str	r3, [sp, #0]
 801d9ca:	2300      	movs	r3, #0
 801d9cc:	4632      	mov	r2, r6
 801d9ce:	4905      	ldr	r1, [pc, #20]	; (801d9e4 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801d9d0:	4620      	mov	r0, r4
 801d9d2:	47a8      	blx	r5
    return value_.stringValue_;
 801d9d4:	687b      	ldr	r3, [r7, #4]
 801d9d6:	699b      	ldr	r3, [r3, #24]
}
 801d9d8:	4618      	mov	r0, r3
 801d9da:	370c      	adds	r7, #12
 801d9dc:	46bd      	mov	sp, r7
 801d9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9e0:	08025f40 	.word	0x08025f40
 801d9e4:	08025fd0 	.word	0x08025fd0

0801d9e8 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801d9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9ea:	b087      	sub	sp, #28
 801d9ec:	af04      	add	r7, sp, #16
 801d9ee:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801d9f0:	f7f6 f97c 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801d9f4:	4604      	mov	r4, r0
 801d9f6:	6823      	ldr	r3, [r4, #0]
 801d9f8:	3324      	adds	r3, #36	; 0x24
 801d9fa:	681d      	ldr	r5, [r3, #0]
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	330c      	adds	r3, #12
 801da00:	4618      	mov	r0, r3
 801da02:	f7ef f91b 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801da06:	4606      	mov	r6, r0
 801da08:	f7f6 f980 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801da0c:	4603      	mov	r3, r0
 801da0e:	9302      	str	r3, [sp, #8]
 801da10:	f240 1343 	movw	r3, #323	; 0x143
 801da14:	9301      	str	r3, [sp, #4]
 801da16:	4b06      	ldr	r3, [pc, #24]	; (801da30 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801da18:	9300      	str	r3, [sp, #0]
 801da1a:	2300      	movs	r3, #0
 801da1c:	4632      	mov	r2, r6
 801da1e:	4905      	ldr	r1, [pc, #20]	; (801da34 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801da20:	4620      	mov	r0, r4
 801da22:	47a8      	blx	r5
    return value_.pointerValue_;
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	699b      	ldr	r3, [r3, #24]
}
 801da28:	4618      	mov	r0, r3
 801da2a:	370c      	adds	r7, #12
 801da2c:	46bd      	mov	sp, r7
 801da2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da30:	08025f40 	.word	0x08025f40
 801da34:	08025fb0 	.word	0x08025fb0

0801da38 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801da38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da3a:	b087      	sub	sp, #28
 801da3c:	af04      	add	r7, sp, #16
 801da3e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801da40:	f7f6 f954 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801da44:	4604      	mov	r4, r0
 801da46:	6823      	ldr	r3, [r4, #0]
 801da48:	3324      	adds	r3, #36	; 0x24
 801da4a:	681d      	ldr	r5, [r3, #0]
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	330c      	adds	r3, #12
 801da50:	4618      	mov	r0, r3
 801da52:	f7ef f8f3 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801da56:	4606      	mov	r6, r0
 801da58:	f7f6 f958 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801da5c:	4603      	mov	r3, r0
 801da5e:	9302      	str	r3, [sp, #8]
 801da60:	f240 1349 	movw	r3, #329	; 0x149
 801da64:	9301      	str	r3, [sp, #4]
 801da66:	4b06      	ldr	r3, [pc, #24]	; (801da80 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801da68:	9300      	str	r3, [sp, #0]
 801da6a:	2300      	movs	r3, #0
 801da6c:	4632      	mov	r2, r6
 801da6e:	4905      	ldr	r1, [pc, #20]	; (801da84 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801da70:	4620      	mov	r0, r4
 801da72:	47a8      	blx	r5
    return value_.pointerValue_;
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	699b      	ldr	r3, [r3, #24]
}
 801da78:	4618      	mov	r0, r3
 801da7a:	370c      	adds	r7, #12
 801da7c:	46bd      	mov	sp, r7
 801da7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da80:	08025f40 	.word	0x08025f40
 801da84:	08025fb8 	.word	0x08025fb8

0801da88 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801da88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da8a:	b087      	sub	sp, #28
 801da8c:	af04      	add	r7, sp, #16
 801da8e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801da90:	f7f6 f92c 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801da94:	4604      	mov	r4, r0
 801da96:	6823      	ldr	r3, [r4, #0]
 801da98:	3324      	adds	r3, #36	; 0x24
 801da9a:	681d      	ldr	r5, [r3, #0]
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	330c      	adds	r3, #12
 801daa0:	4618      	mov	r0, r3
 801daa2:	f7ef f8cb 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801daa6:	4606      	mov	r6, r0
 801daa8:	f7f6 f930 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801daac:	4603      	mov	r3, r0
 801daae:	9302      	str	r3, [sp, #8]
 801dab0:	f240 134f 	movw	r3, #335	; 0x14f
 801dab4:	9301      	str	r3, [sp, #4]
 801dab6:	4b06      	ldr	r3, [pc, #24]	; (801dad0 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801dab8:	9300      	str	r3, [sp, #0]
 801daba:	2300      	movs	r3, #0
 801dabc:	4632      	mov	r2, r6
 801dabe:	4905      	ldr	r1, [pc, #20]	; (801dad4 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801dac0:	4620      	mov	r0, r4
 801dac2:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	699b      	ldr	r3, [r3, #24]
}
 801dac8:	4618      	mov	r0, r3
 801daca:	370c      	adds	r7, #12
 801dacc:	46bd      	mov	sp, r7
 801dace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dad0:	08025f40 	.word	0x08025f40
 801dad4:	08025fc4 	.word	0x08025fc4

0801dad8 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801dad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dada:	b087      	sub	sp, #28
 801dadc:	af04      	add	r7, sp, #16
 801dade:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801dae0:	f7f6 f904 	bl	8013cec <_ZN10UtestShell10getCurrentEv>
 801dae4:	4604      	mov	r4, r0
 801dae6:	6823      	ldr	r3, [r4, #0]
 801dae8:	3324      	adds	r3, #36	; 0x24
 801daea:	681d      	ldr	r5, [r3, #0]
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	330c      	adds	r3, #12
 801daf0:	4618      	mov	r0, r3
 801daf2:	f7ef f8a3 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801daf6:	4606      	mov	r6, r0
 801daf8:	f7f6 f908 	bl	8013d0c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dafc:	4603      	mov	r3, r0
 801dafe:	9302      	str	r3, [sp, #8]
 801db00:	f240 1355 	movw	r3, #341	; 0x155
 801db04:	9301      	str	r3, [sp, #4]
 801db06:	4b06      	ldr	r3, [pc, #24]	; (801db20 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801db08:	9300      	str	r3, [sp, #0]
 801db0a:	2300      	movs	r3, #0
 801db0c:	4632      	mov	r2, r6
 801db0e:	4905      	ldr	r1, [pc, #20]	; (801db24 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801db10:	4620      	mov	r0, r4
 801db12:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	699b      	ldr	r3, [r3, #24]
}
 801db18:	4618      	mov	r0, r3
 801db1a:	370c      	adds	r7, #12
 801db1c:	46bd      	mov	sp, r7
 801db1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db20:	08025f40 	.word	0x08025f40
 801db24:	08025fdc 	.word	0x08025fdc

0801db28 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801db28:	b480      	push	{r7}
 801db2a:	b083      	sub	sp, #12
 801db2c:	af00      	add	r7, sp, #0
 801db2e:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	699b      	ldr	r3, [r3, #24]
}
 801db34:	4618      	mov	r0, r3
 801db36:	370c      	adds	r7, #12
 801db38:	46bd      	mov	sp, r7
 801db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db3e:	4770      	bx	lr

0801db40 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801db40:	b480      	push	{r7}
 801db42:	b083      	sub	sp, #12
 801db44:	af00      	add	r7, sp, #0
 801db46:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	699b      	ldr	r3, [r3, #24]
}
 801db4c:	4618      	mov	r0, r3
 801db4e:	370c      	adds	r7, #12
 801db50:	46bd      	mov	sp, r7
 801db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db56:	4770      	bx	lr

0801db58 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801db58:	b480      	push	{r7}
 801db5a:	b083      	sub	sp, #12
 801db5c:	af00      	add	r7, sp, #0
 801db5e:	6078      	str	r0, [r7, #4]
    return size_;
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801db64:	4618      	mov	r0, r3
 801db66:	370c      	adds	r7, #12
 801db68:	46bd      	mov	sp, r7
 801db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db6e:	4770      	bx	lr

0801db70 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801db70:	b480      	push	{r7}
 801db72:	b083      	sub	sp, #12
 801db74:	af00      	add	r7, sp, #0
 801db76:	6078      	str	r0, [r7, #4]
    return comparator_;
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801db7c:	4618      	mov	r0, r3
 801db7e:	370c      	adds	r7, #12
 801db80:	46bd      	mov	sp, r7
 801db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db86:	4770      	bx	lr

0801db88 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801db88:	b480      	push	{r7}
 801db8a:	b083      	sub	sp, #12
 801db8c:	af00      	add	r7, sp, #0
 801db8e:	6078      	str	r0, [r7, #4]
    return copier_;
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801db94:	4618      	mov	r0, r3
 801db96:	370c      	adds	r7, #12
 801db98:	46bd      	mov	sp, r7
 801db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db9e:	4770      	bx	lr

0801dba0 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801dba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dba2:	b0cd      	sub	sp, #308	; 0x134
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	1d3b      	adds	r3, r7, #4
 801dba8:	6018      	str	r0, [r3, #0]
 801dbaa:	463b      	mov	r3, r7
 801dbac:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801dbae:	2500      	movs	r5, #0
 801dbb0:	1d3b      	adds	r3, r7, #4
 801dbb2:	681b      	ldr	r3, [r3, #0]
 801dbb4:	f103 040c 	add.w	r4, r3, #12
 801dbb8:	f107 0308 	add.w	r3, r7, #8
 801dbbc:	49bb      	ldr	r1, [pc, #748]	; (801deac <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801dbbe:	4618      	mov	r0, r3
 801dbc0:	f7ee fcb1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801dbc4:	2601      	movs	r6, #1
 801dbc6:	f107 0308 	add.w	r3, r7, #8
 801dbca:	4619      	mov	r1, r3
 801dbcc:	4620      	mov	r0, r4
 801dbce:	f7ef f86e 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d015      	beq.n	801dc04 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801dbd8:	463b      	mov	r3, r7
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	f103 040c 	add.w	r4, r3, #12
 801dbe0:	f107 0310 	add.w	r3, r7, #16
 801dbe4:	49b2      	ldr	r1, [pc, #712]	; (801deb0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801dbe6:	4618      	mov	r0, r3
 801dbe8:	f7ee fc9d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801dbec:	2501      	movs	r5, #1
 801dbee:	f107 0310 	add.w	r3, r7, #16
 801dbf2:	4619      	mov	r1, r3
 801dbf4:	4620      	mov	r0, r4
 801dbf6:	f7ef f85a 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801dbfa:	4603      	mov	r3, r0
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d001      	beq.n	801dc04 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801dc00:	2401      	movs	r4, #1
 801dc02:	e000      	b.n	801dc06 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801dc04:	2400      	movs	r4, #0
 801dc06:	2d00      	cmp	r5, #0
 801dc08:	d004      	beq.n	801dc14 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801dc0a:	f107 0310 	add.w	r3, r7, #16
 801dc0e:	4618      	mov	r0, r3
 801dc10:	f7ef f841 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801dc14:	2e00      	cmp	r6, #0
 801dc16:	d004      	beq.n	801dc22 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801dc18:	f107 0308 	add.w	r3, r7, #8
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	f7ef f83a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801dc22:	2c00      	cmp	r4, #0
 801dc24:	d00c      	beq.n	801dc40 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801dc26:	1d3b      	adds	r3, r7, #4
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	699a      	ldr	r2, [r3, #24]
 801dc2c:	463b      	mov	r3, r7
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	699b      	ldr	r3, [r3, #24]
 801dc32:	429a      	cmp	r2, r3
 801dc34:	bf0c      	ite	eq
 801dc36:	2301      	moveq	r3, #1
 801dc38:	2300      	movne	r3, #0
 801dc3a:	b2dc      	uxtb	r4, r3
 801dc3c:	f000 bd60 	b.w	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801dc40:	2500      	movs	r5, #0
 801dc42:	1d3b      	adds	r3, r7, #4
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	f103 040c 	add.w	r4, r3, #12
 801dc4a:	f107 0318 	add.w	r3, r7, #24
 801dc4e:	4998      	ldr	r1, [pc, #608]	; (801deb0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801dc50:	4618      	mov	r0, r3
 801dc52:	f7ee fc68 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801dc56:	2601      	movs	r6, #1
 801dc58:	f107 0318 	add.w	r3, r7, #24
 801dc5c:	4619      	mov	r1, r3
 801dc5e:	4620      	mov	r0, r4
 801dc60:	f7ef f825 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801dc64:	4603      	mov	r3, r0
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d015      	beq.n	801dc96 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801dc6a:	463b      	mov	r3, r7
 801dc6c:	681b      	ldr	r3, [r3, #0]
 801dc6e:	f103 040c 	add.w	r4, r3, #12
 801dc72:	f107 0320 	add.w	r3, r7, #32
 801dc76:	498d      	ldr	r1, [pc, #564]	; (801deac <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801dc78:	4618      	mov	r0, r3
 801dc7a:	f7ee fc54 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801dc7e:	2501      	movs	r5, #1
 801dc80:	f107 0320 	add.w	r3, r7, #32
 801dc84:	4619      	mov	r1, r3
 801dc86:	4620      	mov	r0, r4
 801dc88:	f7ef f811 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801dc8c:	4603      	mov	r3, r0
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d001      	beq.n	801dc96 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801dc92:	2401      	movs	r4, #1
 801dc94:	e000      	b.n	801dc98 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801dc96:	2400      	movs	r4, #0
 801dc98:	2d00      	cmp	r5, #0
 801dc9a:	d004      	beq.n	801dca6 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801dc9c:	f107 0320 	add.w	r3, r7, #32
 801dca0:	4618      	mov	r0, r3
 801dca2:	f7ee fff8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801dca6:	2e00      	cmp	r6, #0
 801dca8:	d004      	beq.n	801dcb4 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801dcaa:	f107 0318 	add.w	r3, r7, #24
 801dcae:	4618      	mov	r0, r3
 801dcb0:	f7ee fff1 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801dcb4:	2c00      	cmp	r4, #0
 801dcb6:	d00c      	beq.n	801dcd2 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801dcb8:	1d3b      	adds	r3, r7, #4
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	699a      	ldr	r2, [r3, #24]
 801dcbe:	463b      	mov	r3, r7
 801dcc0:	681b      	ldr	r3, [r3, #0]
 801dcc2:	699b      	ldr	r3, [r3, #24]
 801dcc4:	429a      	cmp	r2, r3
 801dcc6:	bf0c      	ite	eq
 801dcc8:	2301      	moveq	r3, #1
 801dcca:	2300      	movne	r3, #0
 801dccc:	b2dc      	uxtb	r4, r3
 801dcce:	f000 bd17 	b.w	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801dcd2:	2500      	movs	r5, #0
 801dcd4:	1d3b      	adds	r3, r7, #4
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	f103 040c 	add.w	r4, r3, #12
 801dcdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dce0:	4974      	ldr	r1, [pc, #464]	; (801deb4 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801dce2:	4618      	mov	r0, r3
 801dce4:	f7ee fc1f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801dce8:	2601      	movs	r6, #1
 801dcea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dcee:	4619      	mov	r1, r3
 801dcf0:	4620      	mov	r0, r4
 801dcf2:	f7ee ffdc 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d015      	beq.n	801dd28 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801dcfc:	463b      	mov	r3, r7
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	f103 040c 	add.w	r4, r3, #12
 801dd04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dd08:	4969      	ldr	r1, [pc, #420]	; (801deb0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801dd0a:	4618      	mov	r0, r3
 801dd0c:	f7ee fc0b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801dd10:	2501      	movs	r5, #1
 801dd12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dd16:	4619      	mov	r1, r3
 801dd18:	4620      	mov	r0, r4
 801dd1a:	f7ee ffc8 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801dd1e:	4603      	mov	r3, r0
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d001      	beq.n	801dd28 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801dd24:	2401      	movs	r4, #1
 801dd26:	e000      	b.n	801dd2a <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801dd28:	2400      	movs	r4, #0
 801dd2a:	2d00      	cmp	r5, #0
 801dd2c:	d004      	beq.n	801dd38 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801dd2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dd32:	4618      	mov	r0, r3
 801dd34:	f7ee ffaf 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801dd38:	2e00      	cmp	r6, #0
 801dd3a:	d004      	beq.n	801dd46 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801dd3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dd40:	4618      	mov	r0, r3
 801dd42:	f7ee ffa8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801dd46:	2c00      	cmp	r4, #0
 801dd48:	d012      	beq.n	801dd70 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801dd4a:	463b      	mov	r3, r7
 801dd4c:	681b      	ldr	r3, [r3, #0]
 801dd4e:	699b      	ldr	r3, [r3, #24]
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	db0a      	blt.n	801dd6a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801dd54:	1d3b      	adds	r3, r7, #4
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	699b      	ldr	r3, [r3, #24]
 801dd5a:	463a      	mov	r2, r7
 801dd5c:	6812      	ldr	r2, [r2, #0]
 801dd5e:	6992      	ldr	r2, [r2, #24]
 801dd60:	4293      	cmp	r3, r2
 801dd62:	d102      	bne.n	801dd6a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801dd64:	2401      	movs	r4, #1
 801dd66:	f000 bccb 	b.w	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801dd6a:	2400      	movs	r4, #0
 801dd6c:	f000 bcc8 	b.w	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801dd70:	2500      	movs	r5, #0
 801dd72:	1d3b      	adds	r3, r7, #4
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	f103 040c 	add.w	r4, r3, #12
 801dd7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dd7e:	494c      	ldr	r1, [pc, #304]	; (801deb0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801dd80:	4618      	mov	r0, r3
 801dd82:	f7ee fbd0 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801dd86:	2601      	movs	r6, #1
 801dd88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dd8c:	4619      	mov	r1, r3
 801dd8e:	4620      	mov	r0, r4
 801dd90:	f7ee ff8d 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801dd94:	4603      	mov	r3, r0
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	d015      	beq.n	801ddc6 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801dd9a:	463b      	mov	r3, r7
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	f103 040c 	add.w	r4, r3, #12
 801dda2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dda6:	4943      	ldr	r1, [pc, #268]	; (801deb4 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801dda8:	4618      	mov	r0, r3
 801ddaa:	f7ee fbbc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801ddae:	2501      	movs	r5, #1
 801ddb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ddb4:	4619      	mov	r1, r3
 801ddb6:	4620      	mov	r0, r4
 801ddb8:	f7ee ff79 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801ddbc:	4603      	mov	r3, r0
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d001      	beq.n	801ddc6 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801ddc2:	2401      	movs	r4, #1
 801ddc4:	e000      	b.n	801ddc8 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801ddc6:	2400      	movs	r4, #0
 801ddc8:	2d00      	cmp	r5, #0
 801ddca:	d004      	beq.n	801ddd6 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801ddcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ddd0:	4618      	mov	r0, r3
 801ddd2:	f7ee ff60 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ddd6:	2e00      	cmp	r6, #0
 801ddd8:	d004      	beq.n	801dde4 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801ddda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ddde:	4618      	mov	r0, r3
 801dde0:	f7ee ff59 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801dde4:	2c00      	cmp	r4, #0
 801dde6:	d012      	beq.n	801de0e <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801dde8:	1d3b      	adds	r3, r7, #4
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	699b      	ldr	r3, [r3, #24]
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	db0a      	blt.n	801de08 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801ddf2:	1d3b      	adds	r3, r7, #4
 801ddf4:	681b      	ldr	r3, [r3, #0]
 801ddf6:	699b      	ldr	r3, [r3, #24]
 801ddf8:	463a      	mov	r2, r7
 801ddfa:	6812      	ldr	r2, [r2, #0]
 801ddfc:	6992      	ldr	r2, [r2, #24]
 801ddfe:	4293      	cmp	r3, r2
 801de00:	d102      	bne.n	801de08 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801de02:	2401      	movs	r4, #1
 801de04:	f000 bc7c 	b.w	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801de08:	2400      	movs	r4, #0
 801de0a:	f000 bc79 	b.w	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801de0e:	2500      	movs	r5, #0
 801de10:	1d3b      	adds	r3, r7, #4
 801de12:	681b      	ldr	r3, [r3, #0]
 801de14:	f103 040c 	add.w	r4, r3, #12
 801de18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801de1c:	4926      	ldr	r1, [pc, #152]	; (801deb8 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801de1e:	4618      	mov	r0, r3
 801de20:	f7ee fb81 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801de24:	2601      	movs	r6, #1
 801de26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801de2a:	4619      	mov	r1, r3
 801de2c:	4620      	mov	r0, r4
 801de2e:	f7ee ff3e 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801de32:	4603      	mov	r3, r0
 801de34:	2b00      	cmp	r3, #0
 801de36:	d015      	beq.n	801de64 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801de38:	463b      	mov	r3, r7
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	f103 040c 	add.w	r4, r3, #12
 801de40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801de44:	491a      	ldr	r1, [pc, #104]	; (801deb0 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801de46:	4618      	mov	r0, r3
 801de48:	f7ee fb6d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801de4c:	2501      	movs	r5, #1
 801de4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801de52:	4619      	mov	r1, r3
 801de54:	4620      	mov	r0, r4
 801de56:	f7ee ff2a 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801de5a:	4603      	mov	r3, r0
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	d001      	beq.n	801de64 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801de60:	2401      	movs	r4, #1
 801de62:	e000      	b.n	801de66 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801de64:	2400      	movs	r4, #0
 801de66:	2d00      	cmp	r5, #0
 801de68:	d004      	beq.n	801de74 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801de6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801de6e:	4618      	mov	r0, r3
 801de70:	f7ee ff11 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801de74:	2e00      	cmp	r6, #0
 801de76:	d004      	beq.n	801de82 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801de78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801de7c:	4618      	mov	r0, r3
 801de7e:	f7ee ff0a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801de82:	2c00      	cmp	r4, #0
 801de84:	d01a      	beq.n	801debc <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801de86:	463b      	mov	r3, r7
 801de88:	681b      	ldr	r3, [r3, #0]
 801de8a:	699b      	ldr	r3, [r3, #24]
 801de8c:	2b00      	cmp	r3, #0
 801de8e:	db0a      	blt.n	801dea6 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801de90:	1d3b      	adds	r3, r7, #4
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	699b      	ldr	r3, [r3, #24]
 801de96:	463a      	mov	r2, r7
 801de98:	6812      	ldr	r2, [r2, #0]
 801de9a:	6992      	ldr	r2, [r2, #24]
 801de9c:	4293      	cmp	r3, r2
 801de9e:	d102      	bne.n	801dea6 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801dea0:	2401      	movs	r4, #1
 801dea2:	f000 bc2d 	b.w	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801dea6:	2400      	movs	r4, #0
 801dea8:	f000 bc2a 	b.w	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801deac:	08025f20 	.word	0x08025f20
 801deb0:	08025f04 	.word	0x08025f04
 801deb4:	08025f10 	.word	0x08025f10
 801deb8:	08025f2c 	.word	0x08025f2c
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801debc:	2500      	movs	r5, #0
 801debe:	1d3b      	adds	r3, r7, #4
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	f103 040c 	add.w	r4, r3, #12
 801dec6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801deca:	49b8      	ldr	r1, [pc, #736]	; (801e1ac <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801decc:	4618      	mov	r0, r3
 801dece:	f7ee fb2a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801ded2:	2601      	movs	r6, #1
 801ded4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ded8:	4619      	mov	r1, r3
 801deda:	4620      	mov	r0, r4
 801dedc:	f7ee fee7 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801dee0:	4603      	mov	r3, r0
 801dee2:	2b00      	cmp	r3, #0
 801dee4:	d015      	beq.n	801df12 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801dee6:	463b      	mov	r3, r7
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	f103 040c 	add.w	r4, r3, #12
 801deee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801def2:	49af      	ldr	r1, [pc, #700]	; (801e1b0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801def4:	4618      	mov	r0, r3
 801def6:	f7ee fb16 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801defa:	2501      	movs	r5, #1
 801defc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801df00:	4619      	mov	r1, r3
 801df02:	4620      	mov	r0, r4
 801df04:	f7ee fed3 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801df08:	4603      	mov	r3, r0
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d001      	beq.n	801df12 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801df0e:	2401      	movs	r4, #1
 801df10:	e000      	b.n	801df14 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801df12:	2400      	movs	r4, #0
 801df14:	2d00      	cmp	r5, #0
 801df16:	d004      	beq.n	801df22 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801df18:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801df1c:	4618      	mov	r0, r3
 801df1e:	f7ee feba 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801df22:	2e00      	cmp	r6, #0
 801df24:	d004      	beq.n	801df30 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801df26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801df2a:	4618      	mov	r0, r3
 801df2c:	f7ee feb3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801df30:	2c00      	cmp	r4, #0
 801df32:	d010      	beq.n	801df56 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801df34:	1d3b      	adds	r3, r7, #4
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	699b      	ldr	r3, [r3, #24]
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	db09      	blt.n	801df52 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801df3e:	1d3b      	adds	r3, r7, #4
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	699b      	ldr	r3, [r3, #24]
 801df44:	463a      	mov	r2, r7
 801df46:	6812      	ldr	r2, [r2, #0]
 801df48:	6992      	ldr	r2, [r2, #24]
 801df4a:	4293      	cmp	r3, r2
 801df4c:	d101      	bne.n	801df52 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801df4e:	2401      	movs	r4, #1
 801df50:	e3d6      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801df52:	2400      	movs	r4, #0
 801df54:	e3d4      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801df56:	2500      	movs	r5, #0
 801df58:	1d3b      	adds	r3, r7, #4
 801df5a:	681b      	ldr	r3, [r3, #0]
 801df5c:	f103 040c 	add.w	r4, r3, #12
 801df60:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801df64:	4993      	ldr	r1, [pc, #588]	; (801e1b4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801df66:	4618      	mov	r0, r3
 801df68:	f7ee fadd 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801df6c:	2601      	movs	r6, #1
 801df6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801df72:	4619      	mov	r1, r3
 801df74:	4620      	mov	r0, r4
 801df76:	f7ee fe9a 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801df7a:	4603      	mov	r3, r0
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	d015      	beq.n	801dfac <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801df80:	463b      	mov	r3, r7
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	f103 040c 	add.w	r4, r3, #12
 801df88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801df8c:	498a      	ldr	r1, [pc, #552]	; (801e1b8 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801df8e:	4618      	mov	r0, r3
 801df90:	f7ee fac9 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801df94:	2501      	movs	r5, #1
 801df96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801df9a:	4619      	mov	r1, r3
 801df9c:	4620      	mov	r0, r4
 801df9e:	f7ee fe86 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801dfa2:	4603      	mov	r3, r0
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d001      	beq.n	801dfac <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801dfa8:	2401      	movs	r4, #1
 801dfaa:	e000      	b.n	801dfae <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801dfac:	2400      	movs	r4, #0
 801dfae:	2d00      	cmp	r5, #0
 801dfb0:	d004      	beq.n	801dfbc <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801dfb2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dfb6:	4618      	mov	r0, r3
 801dfb8:	f7ee fe6d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801dfbc:	2e00      	cmp	r6, #0
 801dfbe:	d004      	beq.n	801dfca <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801dfc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801dfc4:	4618      	mov	r0, r3
 801dfc6:	f7ee fe66 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801dfca:	2c00      	cmp	r4, #0
 801dfcc:	d010      	beq.n	801dff0 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801dfce:	463b      	mov	r3, r7
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	699b      	ldr	r3, [r3, #24]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	db09      	blt.n	801dfec <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801dfd8:	1d3b      	adds	r3, r7, #4
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	699b      	ldr	r3, [r3, #24]
 801dfde:	463a      	mov	r2, r7
 801dfe0:	6812      	ldr	r2, [r2, #0]
 801dfe2:	6992      	ldr	r2, [r2, #24]
 801dfe4:	4293      	cmp	r3, r2
 801dfe6:	d101      	bne.n	801dfec <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801dfe8:	2401      	movs	r4, #1
 801dfea:	e389      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801dfec:	2400      	movs	r4, #0
 801dfee:	e387      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801dff0:	2500      	movs	r5, #0
 801dff2:	1d3b      	adds	r3, r7, #4
 801dff4:	681b      	ldr	r3, [r3, #0]
 801dff6:	f103 040c 	add.w	r4, r3, #12
 801dffa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801dffe:	496e      	ldr	r1, [pc, #440]	; (801e1b8 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801e000:	4618      	mov	r0, r3
 801e002:	f7ee fa90 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e006:	2601      	movs	r6, #1
 801e008:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e00c:	4619      	mov	r1, r3
 801e00e:	4620      	mov	r0, r4
 801e010:	f7ee fe4d 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e014:	4603      	mov	r3, r0
 801e016:	2b00      	cmp	r3, #0
 801e018:	d015      	beq.n	801e046 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801e01a:	463b      	mov	r3, r7
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	f103 040c 	add.w	r4, r3, #12
 801e022:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e026:	4963      	ldr	r1, [pc, #396]	; (801e1b4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e028:	4618      	mov	r0, r3
 801e02a:	f7ee fa7c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e02e:	2501      	movs	r5, #1
 801e030:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e034:	4619      	mov	r1, r3
 801e036:	4620      	mov	r0, r4
 801e038:	f7ee fe39 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e03c:	4603      	mov	r3, r0
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d001      	beq.n	801e046 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801e042:	2401      	movs	r4, #1
 801e044:	e000      	b.n	801e048 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801e046:	2400      	movs	r4, #0
 801e048:	2d00      	cmp	r5, #0
 801e04a:	d004      	beq.n	801e056 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801e04c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e050:	4618      	mov	r0, r3
 801e052:	f7ee fe20 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e056:	2e00      	cmp	r6, #0
 801e058:	d004      	beq.n	801e064 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801e05a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e05e:	4618      	mov	r0, r3
 801e060:	f7ee fe19 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e064:	2c00      	cmp	r4, #0
 801e066:	d010      	beq.n	801e08a <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801e068:	1d3b      	adds	r3, r7, #4
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	699b      	ldr	r3, [r3, #24]
 801e06e:	2b00      	cmp	r3, #0
 801e070:	db09      	blt.n	801e086 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801e072:	1d3b      	adds	r3, r7, #4
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	699b      	ldr	r3, [r3, #24]
 801e078:	463a      	mov	r2, r7
 801e07a:	6812      	ldr	r2, [r2, #0]
 801e07c:	6992      	ldr	r2, [r2, #24]
 801e07e:	4293      	cmp	r3, r2
 801e080:	d101      	bne.n	801e086 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801e082:	2401      	movs	r4, #1
 801e084:	e33c      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e086:	2400      	movs	r4, #0
 801e088:	e33a      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801e08a:	2500      	movs	r5, #0
 801e08c:	1d3b      	adds	r3, r7, #4
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	f103 040c 	add.w	r4, r3, #12
 801e094:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e098:	4946      	ldr	r1, [pc, #280]	; (801e1b4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e09a:	4618      	mov	r0, r3
 801e09c:	f7ee fa43 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e0a0:	2601      	movs	r6, #1
 801e0a2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e0a6:	4619      	mov	r1, r3
 801e0a8:	4620      	mov	r0, r4
 801e0aa:	f7ee fe00 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d015      	beq.n	801e0e0 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e0b4:	463b      	mov	r3, r7
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	f103 040c 	add.w	r4, r3, #12
 801e0bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e0c0:	493b      	ldr	r1, [pc, #236]	; (801e1b0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e0c2:	4618      	mov	r0, r3
 801e0c4:	f7ee fa2f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e0c8:	2501      	movs	r5, #1
 801e0ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e0ce:	4619      	mov	r1, r3
 801e0d0:	4620      	mov	r0, r4
 801e0d2:	f7ee fdec 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d001      	beq.n	801e0e0 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801e0dc:	2401      	movs	r4, #1
 801e0de:	e000      	b.n	801e0e2 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801e0e0:	2400      	movs	r4, #0
 801e0e2:	2d00      	cmp	r5, #0
 801e0e4:	d004      	beq.n	801e0f0 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801e0e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801e0ea:	4618      	mov	r0, r3
 801e0ec:	f7ee fdd3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e0f0:	2e00      	cmp	r6, #0
 801e0f2:	d004      	beq.n	801e0fe <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801e0f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	f7ee fdcc 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e0fe:	2c00      	cmp	r4, #0
 801e100:	d00b      	beq.n	801e11a <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801e102:	1d3b      	adds	r3, r7, #4
 801e104:	681b      	ldr	r3, [r3, #0]
 801e106:	699a      	ldr	r2, [r3, #24]
 801e108:	463b      	mov	r3, r7
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	699b      	ldr	r3, [r3, #24]
 801e10e:	429a      	cmp	r2, r3
 801e110:	bf0c      	ite	eq
 801e112:	2301      	moveq	r3, #1
 801e114:	2300      	movne	r3, #0
 801e116:	b2dc      	uxtb	r4, r3
 801e118:	e2f2      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801e11a:	2500      	movs	r5, #0
 801e11c:	1d3b      	adds	r3, r7, #4
 801e11e:	681b      	ldr	r3, [r3, #0]
 801e120:	f103 040c 	add.w	r4, r3, #12
 801e124:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e128:	4921      	ldr	r1, [pc, #132]	; (801e1b0 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e12a:	4618      	mov	r0, r3
 801e12c:	f7ee f9fb 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e130:	2601      	movs	r6, #1
 801e132:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e136:	4619      	mov	r1, r3
 801e138:	4620      	mov	r0, r4
 801e13a:	f7ee fdb8 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e13e:	4603      	mov	r3, r0
 801e140:	2b00      	cmp	r3, #0
 801e142:	d015      	beq.n	801e170 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e144:	463b      	mov	r3, r7
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	f103 040c 	add.w	r4, r3, #12
 801e14c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e150:	4918      	ldr	r1, [pc, #96]	; (801e1b4 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e152:	4618      	mov	r0, r3
 801e154:	f7ee f9e7 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e158:	2501      	movs	r5, #1
 801e15a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e15e:	4619      	mov	r1, r3
 801e160:	4620      	mov	r0, r4
 801e162:	f7ee fda4 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e166:	4603      	mov	r3, r0
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d001      	beq.n	801e170 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801e16c:	2401      	movs	r4, #1
 801e16e:	e000      	b.n	801e172 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801e170:	2400      	movs	r4, #0
 801e172:	2d00      	cmp	r5, #0
 801e174:	d004      	beq.n	801e180 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801e176:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801e17a:	4618      	mov	r0, r3
 801e17c:	f7ee fd8b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e180:	2e00      	cmp	r6, #0
 801e182:	d004      	beq.n	801e18e <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801e184:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801e188:	4618      	mov	r0, r3
 801e18a:	f7ee fd84 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e18e:	2c00      	cmp	r4, #0
 801e190:	d014      	beq.n	801e1bc <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801e192:	1d3b      	adds	r3, r7, #4
 801e194:	681b      	ldr	r3, [r3, #0]
 801e196:	699a      	ldr	r2, [r3, #24]
 801e198:	463b      	mov	r3, r7
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	699b      	ldr	r3, [r3, #24]
 801e19e:	429a      	cmp	r2, r3
 801e1a0:	bf0c      	ite	eq
 801e1a2:	2301      	moveq	r3, #1
 801e1a4:	2300      	movne	r3, #0
 801e1a6:	b2dc      	uxtb	r4, r3
 801e1a8:	e2aa      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e1aa:	bf00      	nop
 801e1ac:	08025f04 	.word	0x08025f04
 801e1b0:	08025f2c 	.word	0x08025f2c
 801e1b4:	08025f10 	.word	0x08025f10
 801e1b8:	08025f20 	.word	0x08025f20
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801e1bc:	2500      	movs	r5, #0
 801e1be:	1d3b      	adds	r3, r7, #4
 801e1c0:	681b      	ldr	r3, [r3, #0]
 801e1c2:	f103 040c 	add.w	r4, r3, #12
 801e1c6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e1ca:	49ae      	ldr	r1, [pc, #696]	; (801e484 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	f7ee f9aa 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e1d2:	2601      	movs	r6, #1
 801e1d4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e1d8:	4619      	mov	r1, r3
 801e1da:	4620      	mov	r0, r4
 801e1dc:	f7ee fd67 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e1e0:	4603      	mov	r3, r0
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d015      	beq.n	801e212 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e1e6:	463b      	mov	r3, r7
 801e1e8:	681b      	ldr	r3, [r3, #0]
 801e1ea:	f103 040c 	add.w	r4, r3, #12
 801e1ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e1f2:	49a5      	ldr	r1, [pc, #660]	; (801e488 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e1f4:	4618      	mov	r0, r3
 801e1f6:	f7ee f996 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e1fa:	2501      	movs	r5, #1
 801e1fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e200:	4619      	mov	r1, r3
 801e202:	4620      	mov	r0, r4
 801e204:	f7ee fd53 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e208:	4603      	mov	r3, r0
 801e20a:	2b00      	cmp	r3, #0
 801e20c:	d001      	beq.n	801e212 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801e20e:	2401      	movs	r4, #1
 801e210:	e000      	b.n	801e214 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801e212:	2400      	movs	r4, #0
 801e214:	2d00      	cmp	r5, #0
 801e216:	d004      	beq.n	801e222 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801e218:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801e21c:	4618      	mov	r0, r3
 801e21e:	f7ee fd3a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e222:	2e00      	cmp	r6, #0
 801e224:	d004      	beq.n	801e230 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801e226:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801e22a:	4618      	mov	r0, r3
 801e22c:	f7ee fd33 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e230:	2c00      	cmp	r4, #0
 801e232:	d010      	beq.n	801e256 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801e234:	1d3b      	adds	r3, r7, #4
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	699b      	ldr	r3, [r3, #24]
 801e23a:	2b00      	cmp	r3, #0
 801e23c:	db09      	blt.n	801e252 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801e23e:	1d3b      	adds	r3, r7, #4
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	699b      	ldr	r3, [r3, #24]
 801e244:	463a      	mov	r2, r7
 801e246:	6812      	ldr	r2, [r2, #0]
 801e248:	6992      	ldr	r2, [r2, #24]
 801e24a:	4293      	cmp	r3, r2
 801e24c:	d101      	bne.n	801e252 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801e24e:	2401      	movs	r4, #1
 801e250:	e256      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e252:	2400      	movs	r4, #0
 801e254:	e254      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801e256:	2500      	movs	r5, #0
 801e258:	1d3b      	adds	r3, r7, #4
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	f103 040c 	add.w	r4, r3, #12
 801e260:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e264:	4988      	ldr	r1, [pc, #544]	; (801e488 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e266:	4618      	mov	r0, r3
 801e268:	f7ee f95d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e26c:	2601      	movs	r6, #1
 801e26e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e272:	4619      	mov	r1, r3
 801e274:	4620      	mov	r0, r4
 801e276:	f7ee fd1a 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e27a:	4603      	mov	r3, r0
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	d015      	beq.n	801e2ac <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801e280:	463b      	mov	r3, r7
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	f103 040c 	add.w	r4, r3, #12
 801e288:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e28c:	497d      	ldr	r1, [pc, #500]	; (801e484 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e28e:	4618      	mov	r0, r3
 801e290:	f7ee f949 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e294:	2501      	movs	r5, #1
 801e296:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e29a:	4619      	mov	r1, r3
 801e29c:	4620      	mov	r0, r4
 801e29e:	f7ee fd06 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e2a2:	4603      	mov	r3, r0
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	d001      	beq.n	801e2ac <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801e2a8:	2401      	movs	r4, #1
 801e2aa:	e000      	b.n	801e2ae <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801e2ac:	2400      	movs	r4, #0
 801e2ae:	2d00      	cmp	r5, #0
 801e2b0:	d004      	beq.n	801e2bc <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801e2b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801e2b6:	4618      	mov	r0, r3
 801e2b8:	f7ee fced 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e2bc:	2e00      	cmp	r6, #0
 801e2be:	d004      	beq.n	801e2ca <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801e2c0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	f7ee fce6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e2ca:	2c00      	cmp	r4, #0
 801e2cc:	d010      	beq.n	801e2f0 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801e2ce:	463b      	mov	r3, r7
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	699b      	ldr	r3, [r3, #24]
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	db09      	blt.n	801e2ec <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801e2d8:	1d3b      	adds	r3, r7, #4
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	699b      	ldr	r3, [r3, #24]
 801e2de:	463a      	mov	r2, r7
 801e2e0:	6812      	ldr	r2, [r2, #0]
 801e2e2:	6992      	ldr	r2, [r2, #24]
 801e2e4:	4293      	cmp	r3, r2
 801e2e6:	d101      	bne.n	801e2ec <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801e2e8:	2401      	movs	r4, #1
 801e2ea:	e209      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e2ec:	2400      	movs	r4, #0
 801e2ee:	e207      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801e2f0:	1d3b      	adds	r3, r7, #4
 801e2f2:	681b      	ldr	r3, [r3, #0]
 801e2f4:	f103 020c 	add.w	r2, r3, #12
 801e2f8:	463b      	mov	r3, r7
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	330c      	adds	r3, #12
 801e2fe:	4619      	mov	r1, r3
 801e300:	4610      	mov	r0, r2
 801e302:	f7ee fd19 	bl	800cd38 <_ZneRK12SimpleStringS1_>
 801e306:	4603      	mov	r3, r0
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d001      	beq.n	801e310 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801e30c:	2400      	movs	r4, #0
 801e30e:	e1f7      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801e310:	1d3b      	adds	r3, r7, #4
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	f103 040c 	add.w	r4, r3, #12
 801e318:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e31c:	495b      	ldr	r1, [pc, #364]	; (801e48c <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801e31e:	4618      	mov	r0, r3
 801e320:	f7ee f901 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e324:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e328:	4619      	mov	r1, r3
 801e32a:	4620      	mov	r0, r4
 801e32c:	f7ee fcbf 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e330:	4603      	mov	r3, r0
 801e332:	461c      	mov	r4, r3
 801e334:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801e338:	4618      	mov	r0, r3
 801e33a:	f7ee fcac 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e33e:	2c00      	cmp	r4, #0
 801e340:	d00b      	beq.n	801e35a <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801e342:	1d3b      	adds	r3, r7, #4
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	7e1a      	ldrb	r2, [r3, #24]
 801e348:	463b      	mov	r3, r7
 801e34a:	681b      	ldr	r3, [r3, #0]
 801e34c:	7e1b      	ldrb	r3, [r3, #24]
 801e34e:	429a      	cmp	r2, r3
 801e350:	bf0c      	ite	eq
 801e352:	2301      	moveq	r3, #1
 801e354:	2300      	movne	r3, #0
 801e356:	b2dc      	uxtb	r4, r3
 801e358:	e1d2      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801e35a:	1d3b      	adds	r3, r7, #4
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	f103 040c 	add.w	r4, r3, #12
 801e362:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e366:	494a      	ldr	r1, [pc, #296]	; (801e490 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801e368:	4618      	mov	r0, r3
 801e36a:	f7ee f8dc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e36e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e372:	4619      	mov	r1, r3
 801e374:	4620      	mov	r0, r4
 801e376:	f7ee fc9a 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e37a:	4603      	mov	r3, r0
 801e37c:	461c      	mov	r4, r3
 801e37e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801e382:	4618      	mov	r0, r3
 801e384:	f7ee fc87 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e388:	2c00      	cmp	r4, #0
 801e38a:	d00b      	beq.n	801e3a4 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801e38c:	1d3b      	adds	r3, r7, #4
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	699a      	ldr	r2, [r3, #24]
 801e392:	463b      	mov	r3, r7
 801e394:	681b      	ldr	r3, [r3, #0]
 801e396:	699b      	ldr	r3, [r3, #24]
 801e398:	429a      	cmp	r2, r3
 801e39a:	bf0c      	ite	eq
 801e39c:	2301      	moveq	r3, #1
 801e39e:	2300      	movne	r3, #0
 801e3a0:	b2dc      	uxtb	r4, r3
 801e3a2:	e1ad      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801e3a4:	1d3b      	adds	r3, r7, #4
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	f103 040c 	add.w	r4, r3, #12
 801e3ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e3b0:	4938      	ldr	r1, [pc, #224]	; (801e494 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801e3b2:	4618      	mov	r0, r3
 801e3b4:	f7ee f8b7 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e3b8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e3bc:	4619      	mov	r1, r3
 801e3be:	4620      	mov	r0, r4
 801e3c0:	f7ee fc75 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e3c4:	4603      	mov	r3, r0
 801e3c6:	461c      	mov	r4, r3
 801e3c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801e3cc:	4618      	mov	r0, r3
 801e3ce:	f7ee fc62 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e3d2:	2c00      	cmp	r4, #0
 801e3d4:	d00b      	beq.n	801e3ee <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801e3d6:	1d3b      	adds	r3, r7, #4
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	699a      	ldr	r2, [r3, #24]
 801e3dc:	463b      	mov	r3, r7
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	699b      	ldr	r3, [r3, #24]
 801e3e2:	429a      	cmp	r2, r3
 801e3e4:	bf0c      	ite	eq
 801e3e6:	2301      	moveq	r3, #1
 801e3e8:	2300      	movne	r3, #0
 801e3ea:	b2dc      	uxtb	r4, r3
 801e3ec:	e188      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801e3ee:	1d3b      	adds	r3, r7, #4
 801e3f0:	681b      	ldr	r3, [r3, #0]
 801e3f2:	f103 040c 	add.w	r4, r3, #12
 801e3f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e3fa:	4922      	ldr	r1, [pc, #136]	; (801e484 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801e3fc:	4618      	mov	r0, r3
 801e3fe:	f7ee f892 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e402:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e406:	4619      	mov	r1, r3
 801e408:	4620      	mov	r0, r4
 801e40a:	f7ee fc50 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e40e:	4603      	mov	r3, r0
 801e410:	461c      	mov	r4, r3
 801e412:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801e416:	4618      	mov	r0, r3
 801e418:	f7ee fc3d 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e41c:	2c00      	cmp	r4, #0
 801e41e:	d00b      	beq.n	801e438 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801e420:	1d3b      	adds	r3, r7, #4
 801e422:	681b      	ldr	r3, [r3, #0]
 801e424:	699a      	ldr	r2, [r3, #24]
 801e426:	463b      	mov	r3, r7
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	699b      	ldr	r3, [r3, #24]
 801e42c:	429a      	cmp	r2, r3
 801e42e:	bf0c      	ite	eq
 801e430:	2301      	moveq	r3, #1
 801e432:	2300      	movne	r3, #0
 801e434:	b2dc      	uxtb	r4, r3
 801e436:	e163      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801e438:	1d3b      	adds	r3, r7, #4
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	f103 040c 	add.w	r4, r3, #12
 801e440:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e444:	4910      	ldr	r1, [pc, #64]	; (801e488 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801e446:	4618      	mov	r0, r3
 801e448:	f7ee f86d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e44c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e450:	4619      	mov	r1, r3
 801e452:	4620      	mov	r0, r4
 801e454:	f7ee fc2b 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e458:	4603      	mov	r3, r0
 801e45a:	461c      	mov	r4, r3
 801e45c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801e460:	4618      	mov	r0, r3
 801e462:	f7ee fc18 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e466:	2c00      	cmp	r4, #0
 801e468:	d016      	beq.n	801e498 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801e46a:	1d3b      	adds	r3, r7, #4
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	699a      	ldr	r2, [r3, #24]
 801e470:	463b      	mov	r3, r7
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	699b      	ldr	r3, [r3, #24]
 801e476:	429a      	cmp	r2, r3
 801e478:	bf0c      	ite	eq
 801e47a:	2301      	moveq	r3, #1
 801e47c:	2300      	movne	r3, #0
 801e47e:	b2dc      	uxtb	r4, r3
 801e480:	e13e      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e482:	bf00      	nop
 801e484:	08025f20 	.word	0x08025f20
 801e488:	08025f2c 	.word	0x08025f2c
 801e48c:	08025f08 	.word	0x08025f08
 801e490:	08025f04 	.word	0x08025f04
 801e494:	08025f10 	.word	0x08025f10
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801e498:	1d3b      	adds	r3, r7, #4
 801e49a:	681b      	ldr	r3, [r3, #0]
 801e49c:	f103 040c 	add.w	r4, r3, #12
 801e4a0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e4a4:	4999      	ldr	r1, [pc, #612]	; (801e70c <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	f7ee f83d 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e4ac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e4b0:	4619      	mov	r1, r3
 801e4b2:	4620      	mov	r0, r4
 801e4b4:	f7ee fbfb 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e4b8:	4603      	mov	r3, r0
 801e4ba:	461c      	mov	r4, r3
 801e4bc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801e4c0:	4618      	mov	r0, r3
 801e4c2:	f7ee fbe8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e4c6:	2c00      	cmp	r4, #0
 801e4c8:	d026      	beq.n	801e518 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801e4ca:	1d3b      	adds	r3, r7, #4
 801e4cc:	681b      	ldr	r3, [r3, #0]
 801e4ce:	699a      	ldr	r2, [r3, #24]
 801e4d0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e4d4:	4611      	mov	r1, r2
 801e4d6:	4618      	mov	r0, r3
 801e4d8:	f7ee f825 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e4dc:	463b      	mov	r3, r7
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	699a      	ldr	r2, [r3, #24]
 801e4e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e4e6:	4611      	mov	r1, r2
 801e4e8:	4618      	mov	r0, r3
 801e4ea:	f7ee f81c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e4ee:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801e4f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e4f6:	4611      	mov	r1, r2
 801e4f8:	4618      	mov	r0, r3
 801e4fa:	f7ee fbd8 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e4fe:	4603      	mov	r3, r0
 801e500:	461c      	mov	r4, r3
 801e502:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e506:	4618      	mov	r0, r3
 801e508:	f7ee fbc5 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e50c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801e510:	4618      	mov	r0, r3
 801e512:	f7ee fbc0 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e516:	e0f3      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801e518:	1d3b      	adds	r3, r7, #4
 801e51a:	681b      	ldr	r3, [r3, #0]
 801e51c:	f103 040c 	add.w	r4, r3, #12
 801e520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e524:	497a      	ldr	r1, [pc, #488]	; (801e710 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801e526:	4618      	mov	r0, r3
 801e528:	f7ed fffd 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e530:	4619      	mov	r1, r3
 801e532:	4620      	mov	r0, r4
 801e534:	f7ee fbbb 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e538:	4603      	mov	r3, r0
 801e53a:	461c      	mov	r4, r3
 801e53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801e540:	4618      	mov	r0, r3
 801e542:	f7ee fba8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e546:	2c00      	cmp	r4, #0
 801e548:	d00b      	beq.n	801e562 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801e54a:	1d3b      	adds	r3, r7, #4
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	699a      	ldr	r2, [r3, #24]
 801e550:	463b      	mov	r3, r7
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	699b      	ldr	r3, [r3, #24]
 801e556:	429a      	cmp	r2, r3
 801e558:	bf0c      	ite	eq
 801e55a:	2301      	moveq	r3, #1
 801e55c:	2300      	movne	r3, #0
 801e55e:	b2dc      	uxtb	r4, r3
 801e560:	e0ce      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801e562:	1d3b      	adds	r3, r7, #4
 801e564:	681b      	ldr	r3, [r3, #0]
 801e566:	f103 040c 	add.w	r4, r3, #12
 801e56a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e56e:	4969      	ldr	r1, [pc, #420]	; (801e714 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801e570:	4618      	mov	r0, r3
 801e572:	f7ed ffd8 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e576:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e57a:	4619      	mov	r1, r3
 801e57c:	4620      	mov	r0, r4
 801e57e:	f7ee fb96 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e582:	4603      	mov	r3, r0
 801e584:	461c      	mov	r4, r3
 801e586:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801e58a:	4618      	mov	r0, r3
 801e58c:	f7ee fb83 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e590:	2c00      	cmp	r4, #0
 801e592:	d00b      	beq.n	801e5ac <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801e594:	1d3b      	adds	r3, r7, #4
 801e596:	681b      	ldr	r3, [r3, #0]
 801e598:	699a      	ldr	r2, [r3, #24]
 801e59a:	463b      	mov	r3, r7
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	699b      	ldr	r3, [r3, #24]
 801e5a0:	429a      	cmp	r2, r3
 801e5a2:	bf0c      	ite	eq
 801e5a4:	2301      	moveq	r3, #1
 801e5a6:	2300      	movne	r3, #0
 801e5a8:	b2dc      	uxtb	r4, r3
 801e5aa:	e0a9      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801e5ac:	1d3b      	adds	r3, r7, #4
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	f103 040c 	add.w	r4, r3, #12
 801e5b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e5b8:	4957      	ldr	r1, [pc, #348]	; (801e718 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801e5ba:	4618      	mov	r0, r3
 801e5bc:	f7ed ffb3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e5c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e5c4:	4619      	mov	r1, r3
 801e5c6:	4620      	mov	r0, r4
 801e5c8:	f7ee fb71 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e5cc:	4603      	mov	r3, r0
 801e5ce:	461c      	mov	r4, r3
 801e5d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801e5d4:	4618      	mov	r0, r3
 801e5d6:	f7ee fb5e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e5da:	2c00      	cmp	r4, #0
 801e5dc:	d00b      	beq.n	801e5f6 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801e5de:	1d3b      	adds	r3, r7, #4
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	699a      	ldr	r2, [r3, #24]
 801e5e4:	463b      	mov	r3, r7
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	699b      	ldr	r3, [r3, #24]
 801e5ea:	429a      	cmp	r2, r3
 801e5ec:	bf0c      	ite	eq
 801e5ee:	2301      	moveq	r3, #1
 801e5f0:	2300      	movne	r3, #0
 801e5f2:	b2dc      	uxtb	r4, r3
 801e5f4:	e084      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801e5f6:	1d3b      	adds	r3, r7, #4
 801e5f8:	681b      	ldr	r3, [r3, #0]
 801e5fa:	f103 040c 	add.w	r4, r3, #12
 801e5fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e602:	4946      	ldr	r1, [pc, #280]	; (801e71c <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801e604:	4618      	mov	r0, r3
 801e606:	f7ed ff8e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e60a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e60e:	4619      	mov	r1, r3
 801e610:	4620      	mov	r0, r4
 801e612:	f7ee fb4c 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e616:	4603      	mov	r3, r0
 801e618:	461c      	mov	r4, r3
 801e61a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801e61e:	4618      	mov	r0, r3
 801e620:	f7ee fb39 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e624:	2c00      	cmp	r4, #0
 801e626:	d01c      	beq.n	801e662 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801e628:	1d3b      	adds	r3, r7, #4
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	ed93 7b06 	vldr	d7, [r3, #24]
 801e630:	463b      	mov	r3, r7
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	ed93 6b06 	vldr	d6, [r3, #24]
 801e638:	1d3b      	adds	r3, r7, #4
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	ed93 5b08 	vldr	d5, [r3, #32]
 801e640:	eeb0 2a45 	vmov.f32	s4, s10
 801e644:	eef0 2a65 	vmov.f32	s5, s11
 801e648:	eeb0 1a46 	vmov.f32	s2, s12
 801e64c:	eef0 1a66 	vmov.f32	s3, s13
 801e650:	eeb0 0a47 	vmov.f32	s0, s14
 801e654:	eef0 0a67 	vmov.f32	s1, s15
 801e658:	f7f3 fe18 	bl	801228c <_Z13doubles_equalddd>
 801e65c:	4603      	mov	r3, r0
 801e65e:	461c      	mov	r4, r3
 801e660:	e04e      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801e662:	1d3b      	adds	r3, r7, #4
 801e664:	681b      	ldr	r3, [r3, #0]
 801e666:	f103 040c 	add.w	r4, r3, #12
 801e66a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e66e:	492c      	ldr	r1, [pc, #176]	; (801e720 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801e670:	4618      	mov	r0, r3
 801e672:	f7ed ff58 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e676:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e67a:	4619      	mov	r1, r3
 801e67c:	4620      	mov	r0, r4
 801e67e:	f7ee fb16 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e682:	4603      	mov	r3, r0
 801e684:	461c      	mov	r4, r3
 801e686:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801e68a:	4618      	mov	r0, r3
 801e68c:	f7ee fb03 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e690:	2c00      	cmp	r4, #0
 801e692:	d01c      	beq.n	801e6ce <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801e694:	1d3b      	adds	r3, r7, #4
 801e696:	681b      	ldr	r3, [r3, #0]
 801e698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e69a:	463b      	mov	r3, r7
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e6a0:	429a      	cmp	r2, r3
 801e6a2:	d001      	beq.n	801e6a8 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801e6a4:	2400      	movs	r4, #0
 801e6a6:	e02b      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801e6a8:	1d3b      	adds	r3, r7, #4
 801e6aa:	681b      	ldr	r3, [r3, #0]
 801e6ac:	6998      	ldr	r0, [r3, #24]
 801e6ae:	463b      	mov	r3, r7
 801e6b0:	681b      	ldr	r3, [r3, #0]
 801e6b2:	6999      	ldr	r1, [r3, #24]
 801e6b4:	1d3b      	adds	r3, r7, #4
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e6ba:	461a      	mov	r2, r3
 801e6bc:	f7ed fe52 	bl	800c364 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801e6c0:	4603      	mov	r3, r0
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	bf0c      	ite	eq
 801e6c6:	2301      	moveq	r3, #1
 801e6c8:	2300      	movne	r3, #0
 801e6ca:	b2dc      	uxtb	r4, r3
 801e6cc:	e018      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801e6ce:	1d3b      	adds	r3, r7, #4
 801e6d0:	681b      	ldr	r3, [r3, #0]
 801e6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d012      	beq.n	801e6fe <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801e6d8:	1d3b      	adds	r3, r7, #4
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801e6de:	1d3b      	adds	r3, r7, #4
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e6e4:	681b      	ldr	r3, [r3, #0]
 801e6e6:	3308      	adds	r3, #8
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	1d3a      	adds	r2, r7, #4
 801e6ec:	6812      	ldr	r2, [r2, #0]
 801e6ee:	6991      	ldr	r1, [r2, #24]
 801e6f0:	463a      	mov	r2, r7
 801e6f2:	6812      	ldr	r2, [r2, #0]
 801e6f4:	6992      	ldr	r2, [r2, #24]
 801e6f6:	4798      	blx	r3
 801e6f8:	4603      	mov	r3, r0
 801e6fa:	461c      	mov	r4, r3
 801e6fc:	e000      	b.n	801e700 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801e6fe:	2400      	movs	r4, #0
 801e700:	4623      	mov	r3, r4
}
 801e702:	4618      	mov	r0, r3
 801e704:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801e708:	46bd      	mov	sp, r7
 801e70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e70c:	08025fd0 	.word	0x08025fd0
 801e710:	08025fb0 	.word	0x08025fb0
 801e714:	08025fb8 	.word	0x08025fb8
 801e718:	08025fc4 	.word	0x08025fc4
 801e71c:	08025fa8 	.word	0x08025fa8
 801e720:	08025fdc 	.word	0x08025fdc

0801e724 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801e724:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e726:	b087      	sub	sp, #28
 801e728:	af00      	add	r7, sp, #0
 801e72a:	6078      	str	r0, [r7, #4]
 801e72c:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	f103 020c 	add.w	r2, r3, #12
 801e734:	683b      	ldr	r3, [r7, #0]
 801e736:	330c      	adds	r3, #12
 801e738:	4619      	mov	r1, r3
 801e73a:	4610      	mov	r0, r2
 801e73c:	f7ee fab7 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e740:	4603      	mov	r3, r0
 801e742:	2b00      	cmp	r3, #0
 801e744:	d001      	beq.n	801e74a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801e746:	2301      	movs	r3, #1
 801e748:	e03c      	b.n	801e7c4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801e74a:	2500      	movs	r5, #0
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	f103 040c 	add.w	r4, r3, #12
 801e752:	f107 0308 	add.w	r3, r7, #8
 801e756:	491d      	ldr	r1, [pc, #116]	; (801e7cc <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801e758:	4618      	mov	r0, r3
 801e75a:	f7ed fee4 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e75e:	2601      	movs	r6, #1
 801e760:	f107 0308 	add.w	r3, r7, #8
 801e764:	4619      	mov	r1, r3
 801e766:	4620      	mov	r0, r4
 801e768:	f7ee faa1 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e76c:	4603      	mov	r3, r0
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d014      	beq.n	801e79c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801e772:	683b      	ldr	r3, [r7, #0]
 801e774:	f103 040c 	add.w	r4, r3, #12
 801e778:	f107 0310 	add.w	r3, r7, #16
 801e77c:	4914      	ldr	r1, [pc, #80]	; (801e7d0 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801e77e:	4618      	mov	r0, r3
 801e780:	f7ed fed1 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e784:	2501      	movs	r5, #1
 801e786:	f107 0310 	add.w	r3, r7, #16
 801e78a:	4619      	mov	r1, r3
 801e78c:	4620      	mov	r0, r4
 801e78e:	f7ee fa8e 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e792:	4603      	mov	r3, r0
 801e794:	2b00      	cmp	r3, #0
 801e796:	d001      	beq.n	801e79c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801e798:	2401      	movs	r4, #1
 801e79a:	e000      	b.n	801e79e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801e79c:	2400      	movs	r4, #0
 801e79e:	2d00      	cmp	r5, #0
 801e7a0:	d004      	beq.n	801e7ac <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801e7a2:	f107 0310 	add.w	r3, r7, #16
 801e7a6:	4618      	mov	r0, r3
 801e7a8:	f7ee fa75 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e7ac:	2e00      	cmp	r6, #0
 801e7ae:	d004      	beq.n	801e7ba <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801e7b0:	f107 0308 	add.w	r3, r7, #8
 801e7b4:	4618      	mov	r0, r3
 801e7b6:	f7ee fa6e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e7ba:	2c00      	cmp	r4, #0
 801e7bc:	d001      	beq.n	801e7c2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801e7be:	2301      	movs	r3, #1
 801e7c0:	e000      	b.n	801e7c4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801e7c2:	2300      	movs	r3, #0
}
 801e7c4:	4618      	mov	r0, r3
 801e7c6:	371c      	adds	r7, #28
 801e7c8:	46bd      	mov	sp, r7
 801e7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e7cc:	08025fb8 	.word	0x08025fb8
 801e7d0:	08025fb0 	.word	0x08025fb0

0801e7d4 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801e7d4:	b590      	push	{r4, r7, lr}
 801e7d6:	b0b9      	sub	sp, #228	; 0xe4
 801e7d8:	af00      	add	r7, sp, #0
 801e7da:	6078      	str	r0, [r7, #4]
 801e7dc:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801e7de:	683b      	ldr	r3, [r7, #0]
 801e7e0:	f103 040c 	add.w	r4, r3, #12
 801e7e4:	f107 0308 	add.w	r3, r7, #8
 801e7e8:	49d4      	ldr	r1, [pc, #848]	; (801eb3c <_ZNK14MockNamedValue8toStringEv+0x368>)
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	f7ed fe9b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e7f0:	f107 0308 	add.w	r3, r7, #8
 801e7f4:	4619      	mov	r1, r3
 801e7f6:	4620      	mov	r0, r4
 801e7f8:	f7ee fa59 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e7fc:	4603      	mov	r3, r0
 801e7fe:	461c      	mov	r4, r3
 801e800:	f107 0308 	add.w	r3, r7, #8
 801e804:	4618      	mov	r0, r3
 801e806:	f7ee fa46 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e80a:	2c00      	cmp	r4, #0
 801e80c:	d007      	beq.n	801e81e <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801e80e:	683b      	ldr	r3, [r7, #0]
 801e810:	7e1a      	ldrb	r2, [r3, #24]
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	4611      	mov	r1, r2
 801e816:	4618      	mov	r0, r3
 801e818:	f7ee fcae 	bl	800d178 <_Z10StringFromb>
 801e81c:	e23f      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801e81e:	683b      	ldr	r3, [r7, #0]
 801e820:	f103 040c 	add.w	r4, r3, #12
 801e824:	f107 0310 	add.w	r3, r7, #16
 801e828:	49c5      	ldr	r1, [pc, #788]	; (801eb40 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801e82a:	4618      	mov	r0, r3
 801e82c:	f7ed fe7b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e830:	f107 0310 	add.w	r3, r7, #16
 801e834:	4619      	mov	r1, r3
 801e836:	4620      	mov	r0, r4
 801e838:	f7ee fa39 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e83c:	4603      	mov	r3, r0
 801e83e:	461c      	mov	r4, r3
 801e840:	f107 0310 	add.w	r3, r7, #16
 801e844:	4618      	mov	r0, r3
 801e846:	f7ee fa26 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e84a:	2c00      	cmp	r4, #0
 801e84c:	d03b      	beq.n	801e8c6 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801e84e:	683b      	ldr	r3, [r7, #0]
 801e850:	699a      	ldr	r2, [r3, #24]
 801e852:	f107 0320 	add.w	r3, r7, #32
 801e856:	4611      	mov	r1, r2
 801e858:	4618      	mov	r0, r3
 801e85a:	f7ee fce3 	bl	800d224 <_Z10StringFromi>
 801e85e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e862:	49b8      	ldr	r1, [pc, #736]	; (801eb44 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e864:	4618      	mov	r0, r3
 801e866:	f7ed fe5e 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e86a:	f107 0318 	add.w	r3, r7, #24
 801e86e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e872:	f107 0120 	add.w	r1, r7, #32
 801e876:	4618      	mov	r0, r3
 801e878:	f7ee fa6f 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 801e87c:	683b      	ldr	r3, [r7, #0]
 801e87e:	699a      	ldr	r2, [r3, #24]
 801e880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e884:	4611      	mov	r1, r2
 801e886:	4618      	mov	r0, r3
 801e888:	f7ee fdbc 	bl	800d404 <_Z30BracketsFormattedHexStringFromi>
 801e88c:	687b      	ldr	r3, [r7, #4]
 801e88e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801e892:	f107 0118 	add.w	r1, r7, #24
 801e896:	4618      	mov	r0, r3
 801e898:	f7ee fa5f 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 801e89c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e8a0:	4618      	mov	r0, r3
 801e8a2:	f7ee f9f8 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e8a6:	f107 0318 	add.w	r3, r7, #24
 801e8aa:	4618      	mov	r0, r3
 801e8ac:	f7ee f9f3 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e8b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e8b4:	4618      	mov	r0, r3
 801e8b6:	f7ee f9ee 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e8ba:	f107 0320 	add.w	r3, r7, #32
 801e8be:	4618      	mov	r0, r3
 801e8c0:	f7ee f9e9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e8c4:	e1eb      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801e8c6:	683b      	ldr	r3, [r7, #0]
 801e8c8:	f103 040c 	add.w	r4, r3, #12
 801e8cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e8d0:	499d      	ldr	r1, [pc, #628]	; (801eb48 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801e8d2:	4618      	mov	r0, r3
 801e8d4:	f7ed fe27 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e8d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e8dc:	4619      	mov	r1, r3
 801e8de:	4620      	mov	r0, r4
 801e8e0:	f7ee f9e5 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e8e4:	4603      	mov	r3, r0
 801e8e6:	461c      	mov	r4, r3
 801e8e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e8ec:	4618      	mov	r0, r3
 801e8ee:	f7ee f9d2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e8f2:	2c00      	cmp	r4, #0
 801e8f4:	d03b      	beq.n	801e96e <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801e8f6:	683b      	ldr	r3, [r7, #0]
 801e8f8:	699a      	ldr	r2, [r3, #24]
 801e8fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e8fe:	4611      	mov	r1, r2
 801e900:	4618      	mov	r0, r3
 801e902:	f7ee fef7 	bl	800d6f4 <_Z10StringFromj>
 801e906:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e90a:	498e      	ldr	r1, [pc, #568]	; (801eb44 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e90c:	4618      	mov	r0, r3
 801e90e:	f7ed fe0a 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e912:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e916:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801e91a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801e91e:	4618      	mov	r0, r3
 801e920:	f7ee fa1b 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 801e924:	683b      	ldr	r3, [r7, #0]
 801e926:	699a      	ldr	r2, [r3, #24]
 801e928:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e92c:	4611      	mov	r1, r2
 801e92e:	4618      	mov	r0, r3
 801e930:	f7ee fd84 	bl	800d43c <_Z30BracketsFormattedHexStringFromj>
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801e93a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801e93e:	4618      	mov	r0, r3
 801e940:	f7ee fa0b 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 801e944:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e948:	4618      	mov	r0, r3
 801e94a:	f7ee f9a4 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e94e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e952:	4618      	mov	r0, r3
 801e954:	f7ee f99f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e958:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e95c:	4618      	mov	r0, r3
 801e95e:	f7ee f99a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e962:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e966:	4618      	mov	r0, r3
 801e968:	f7ee f995 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e96c:	e197      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801e96e:	683b      	ldr	r3, [r7, #0]
 801e970:	f103 040c 	add.w	r4, r3, #12
 801e974:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e978:	4974      	ldr	r1, [pc, #464]	; (801eb4c <_ZNK14MockNamedValue8toStringEv+0x378>)
 801e97a:	4618      	mov	r0, r3
 801e97c:	f7ed fdd3 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e980:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e984:	4619      	mov	r1, r3
 801e986:	4620      	mov	r0, r4
 801e988:	f7ee f991 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801e98c:	4603      	mov	r3, r0
 801e98e:	461c      	mov	r4, r3
 801e990:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e994:	4618      	mov	r0, r3
 801e996:	f7ee f97e 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e99a:	2c00      	cmp	r4, #0
 801e99c:	d03b      	beq.n	801ea16 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801e99e:	683b      	ldr	r3, [r7, #0]
 801e9a0:	699a      	ldr	r2, [r3, #24]
 801e9a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e9a6:	4611      	mov	r1, r2
 801e9a8:	4618      	mov	r0, r3
 801e9aa:	f7ee fc4d 	bl	800d248 <_Z10StringFroml>
 801e9ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801e9b2:	4964      	ldr	r1, [pc, #400]	; (801eb44 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801e9b4:	4618      	mov	r0, r3
 801e9b6:	f7ed fdb6 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801e9ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e9be:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801e9c2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801e9c6:	4618      	mov	r0, r3
 801e9c8:	f7ee f9c7 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 801e9cc:	683b      	ldr	r3, [r7, #0]
 801e9ce:	699a      	ldr	r2, [r3, #24]
 801e9d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e9d4:	4611      	mov	r1, r2
 801e9d6:	4618      	mov	r0, r3
 801e9d8:	f7ee fd4c 	bl	800d474 <_Z30BracketsFormattedHexStringFroml>
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801e9e2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801e9e6:	4618      	mov	r0, r3
 801e9e8:	f7ee f9b7 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 801e9ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801e9f0:	4618      	mov	r0, r3
 801e9f2:	f7ee f950 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801e9f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e9fa:	4618      	mov	r0, r3
 801e9fc:	f7ee f94b 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ea00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ea04:	4618      	mov	r0, r3
 801ea06:	f7ee f946 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ea0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ea0e:	4618      	mov	r0, r3
 801ea10:	f7ee f941 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ea14:	e143      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801ea16:	683b      	ldr	r3, [r7, #0]
 801ea18:	f103 040c 	add.w	r4, r3, #12
 801ea1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ea20:	494b      	ldr	r1, [pc, #300]	; (801eb50 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801ea22:	4618      	mov	r0, r3
 801ea24:	f7ed fd7f 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801ea28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ea2c:	4619      	mov	r1, r3
 801ea2e:	4620      	mov	r0, r4
 801ea30:	f7ee f93d 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801ea34:	4603      	mov	r3, r0
 801ea36:	461c      	mov	r4, r3
 801ea38:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ea3c:	4618      	mov	r0, r3
 801ea3e:	f7ee f92a 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ea42:	2c00      	cmp	r4, #0
 801ea44:	d03b      	beq.n	801eabe <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801ea46:	683b      	ldr	r3, [r7, #0]
 801ea48:	699a      	ldr	r2, [r3, #24]
 801ea4a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ea4e:	4611      	mov	r1, r2
 801ea50:	4618      	mov	r0, r3
 801ea52:	f7ee fe61 	bl	800d718 <_Z10StringFromm>
 801ea56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ea5a:	493a      	ldr	r1, [pc, #232]	; (801eb44 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801ea5c:	4618      	mov	r0, r3
 801ea5e:	f7ed fd62 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801ea62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ea66:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801ea6a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801ea6e:	4618      	mov	r0, r3
 801ea70:	f7ee f973 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 801ea74:	683b      	ldr	r3, [r7, #0]
 801ea76:	699a      	ldr	r2, [r3, #24]
 801ea78:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ea7c:	4611      	mov	r1, r2
 801ea7e:	4618      	mov	r0, r3
 801ea80:	f7ee fd14 	bl	800d4ac <_Z30BracketsFormattedHexStringFromm>
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801ea8a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801ea8e:	4618      	mov	r0, r3
 801ea90:	f7ee f963 	bl	800cd5a <_ZNK12SimpleStringplERKS_>
 801ea94:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ea98:	4618      	mov	r0, r3
 801ea9a:	f7ee f8fc 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ea9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801eaa2:	4618      	mov	r0, r3
 801eaa4:	f7ee f8f7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801eaa8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801eaac:	4618      	mov	r0, r3
 801eaae:	f7ee f8f2 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801eab2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801eab6:	4618      	mov	r0, r3
 801eab8:	f7ee f8ed 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801eabc:	e0ef      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801eabe:	683b      	ldr	r3, [r7, #0]
 801eac0:	f103 040c 	add.w	r4, r3, #12
 801eac4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801eac8:	4922      	ldr	r1, [pc, #136]	; (801eb54 <_ZNK14MockNamedValue8toStringEv+0x380>)
 801eaca:	4618      	mov	r0, r3
 801eacc:	f7ed fd2b 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801ead0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ead4:	4619      	mov	r1, r3
 801ead6:	4620      	mov	r0, r4
 801ead8:	f7ee f8e9 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801eadc:	4603      	mov	r3, r0
 801eade:	461c      	mov	r4, r3
 801eae0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801eae4:	4618      	mov	r0, r3
 801eae6:	f7ee f8d6 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801eaea:	2c00      	cmp	r4, #0
 801eaec:	d006      	beq.n	801eafc <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801eaee:	683b      	ldr	r3, [r7, #0]
 801eaf0:	699b      	ldr	r3, [r3, #24]
 801eaf2:	4619      	mov	r1, r3
 801eaf4:	6878      	ldr	r0, [r7, #4]
 801eaf6:	f7ed fd16 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801eafa:	e0d0      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801eafc:	683b      	ldr	r3, [r7, #0]
 801eafe:	f103 040c 	add.w	r4, r3, #12
 801eb02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801eb06:	4914      	ldr	r1, [pc, #80]	; (801eb58 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801eb08:	4618      	mov	r0, r3
 801eb0a:	f7ed fd0c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801eb0e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801eb12:	4619      	mov	r1, r3
 801eb14:	4620      	mov	r0, r4
 801eb16:	f7ee f8ca 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801eb1a:	4603      	mov	r3, r0
 801eb1c:	461c      	mov	r4, r3
 801eb1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801eb22:	4618      	mov	r0, r3
 801eb24:	f7ee f8b7 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801eb28:	2c00      	cmp	r4, #0
 801eb2a:	d017      	beq.n	801eb5c <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801eb2c:	683b      	ldr	r3, [r7, #0]
 801eb2e:	699a      	ldr	r2, [r3, #24]
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	4611      	mov	r1, r2
 801eb34:	4618      	mov	r0, r3
 801eb36:	f7ee fb99 	bl	800d26c <_Z10StringFromPKv>
 801eb3a:	e0b0      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801eb3c:	08025f08 	.word	0x08025f08
 801eb40:	08025f04 	.word	0x08025f04
 801eb44:	08025ff4 	.word	0x08025ff4
 801eb48:	08025f10 	.word	0x08025f10
 801eb4c:	08025f20 	.word	0x08025f20
 801eb50:	08025f2c 	.word	0x08025f2c
 801eb54:	08025fd0 	.word	0x08025fd0
 801eb58:	08025fb0 	.word	0x08025fb0
    else if (type_ == "void (*)()")
 801eb5c:	683b      	ldr	r3, [r7, #0]
 801eb5e:	f103 040c 	add.w	r4, r3, #12
 801eb62:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eb66:	4950      	ldr	r1, [pc, #320]	; (801eca8 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801eb68:	4618      	mov	r0, r3
 801eb6a:	f7ed fcdc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801eb6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eb72:	4619      	mov	r1, r3
 801eb74:	4620      	mov	r0, r4
 801eb76:	f7ee f89a 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801eb7a:	4603      	mov	r3, r0
 801eb7c:	461c      	mov	r4, r3
 801eb7e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801eb82:	4618      	mov	r0, r3
 801eb84:	f7ee f887 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801eb88:	2c00      	cmp	r4, #0
 801eb8a:	d007      	beq.n	801eb9c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801eb8c:	683b      	ldr	r3, [r7, #0]
 801eb8e:	699a      	ldr	r2, [r3, #24]
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	4611      	mov	r1, r2
 801eb94:	4618      	mov	r0, r3
 801eb96:	f7ee fb93 	bl	800d2c0 <_Z10StringFromPFvvE>
 801eb9a:	e080      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801eb9c:	683b      	ldr	r3, [r7, #0]
 801eb9e:	f103 040c 	add.w	r4, r3, #12
 801eba2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801eba6:	4941      	ldr	r1, [pc, #260]	; (801ecac <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801eba8:	4618      	mov	r0, r3
 801ebaa:	f7ed fcbc 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801ebae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ebb2:	4619      	mov	r1, r3
 801ebb4:	4620      	mov	r0, r4
 801ebb6:	f7ee f87a 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801ebba:	4603      	mov	r3, r0
 801ebbc:	461c      	mov	r4, r3
 801ebbe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ebc2:	4618      	mov	r0, r3
 801ebc4:	f7ee f867 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ebc8:	2c00      	cmp	r4, #0
 801ebca:	d007      	beq.n	801ebdc <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801ebcc:	683b      	ldr	r3, [r7, #0]
 801ebce:	699a      	ldr	r2, [r3, #24]
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	4611      	mov	r1, r2
 801ebd4:	4618      	mov	r0, r3
 801ebd6:	f7ee fb49 	bl	800d26c <_Z10StringFromPKv>
 801ebda:	e060      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801ebdc:	683b      	ldr	r3, [r7, #0]
 801ebde:	f103 040c 	add.w	r4, r3, #12
 801ebe2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ebe6:	4932      	ldr	r1, [pc, #200]	; (801ecb0 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801ebe8:	4618      	mov	r0, r3
 801ebea:	f7ed fc9c 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801ebee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ebf2:	4619      	mov	r1, r3
 801ebf4:	4620      	mov	r0, r4
 801ebf6:	f7ee f85a 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801ebfa:	4603      	mov	r3, r0
 801ebfc:	461c      	mov	r4, r3
 801ebfe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801ec02:	4618      	mov	r0, r3
 801ec04:	f7ee f847 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ec08:	2c00      	cmp	r4, #0
 801ec0a:	d00c      	beq.n	801ec26 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801ec0c:	683b      	ldr	r3, [r7, #0]
 801ec0e:	ed93 7b06 	vldr	d7, [r3, #24]
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	2106      	movs	r1, #6
 801ec16:	eeb0 0a47 	vmov.f32	s0, s14
 801ec1a:	eef0 0a67 	vmov.f32	s1, s15
 801ec1e:	4618      	mov	r0, r3
 801ec20:	f7ee fcfe 	bl	800d620 <_Z10StringFromdi>
 801ec24:	e03b      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801ec26:	683b      	ldr	r3, [r7, #0]
 801ec28:	f103 040c 	add.w	r4, r3, #12
 801ec2c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ec30:	4920      	ldr	r1, [pc, #128]	; (801ecb4 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801ec32:	4618      	mov	r0, r3
 801ec34:	f7ed fc77 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801ec38:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ec3c:	4619      	mov	r1, r3
 801ec3e:	4620      	mov	r0, r4
 801ec40:	f7ee f835 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801ec44:	4603      	mov	r3, r0
 801ec46:	461c      	mov	r4, r3
 801ec48:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ec4c:	4618      	mov	r0, r3
 801ec4e:	f7ee f822 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801ec52:	2c00      	cmp	r4, #0
 801ec54:	d008      	beq.n	801ec68 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801ec56:	683b      	ldr	r3, [r7, #0]
 801ec58:	6999      	ldr	r1, [r3, #24]
 801ec5a:	683b      	ldr	r3, [r7, #0]
 801ec5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	4618      	mov	r0, r3
 801ec62:	f7ee fe71 	bl	800d948 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801ec66:	e01a      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801ec68:	683b      	ldr	r3, [r7, #0]
 801ec6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d00b      	beq.n	801ec88 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801ec70:	683b      	ldr	r3, [r7, #0]
 801ec72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801ec74:	683b      	ldr	r3, [r7, #0]
 801ec76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec78:	681b      	ldr	r3, [r3, #0]
 801ec7a:	330c      	adds	r3, #12
 801ec7c:	681b      	ldr	r3, [r3, #0]
 801ec7e:	683a      	ldr	r2, [r7, #0]
 801ec80:	6992      	ldr	r2, [r2, #24]
 801ec82:	6878      	ldr	r0, [r7, #4]
 801ec84:	4798      	blx	r3
 801ec86:	e00a      	b.n	801ec9e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801ec88:	683b      	ldr	r3, [r7, #0]
 801ec8a:	330c      	adds	r3, #12
 801ec8c:	4618      	mov	r0, r3
 801ec8e:	f7ed ffd5 	bl	800cc3c <_ZNK12SimpleString12asCharStringEv>
 801ec92:	4602      	mov	r2, r0
 801ec94:	687b      	ldr	r3, [r7, #4]
 801ec96:	4908      	ldr	r1, [pc, #32]	; (801ecb8 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801ec98:	4618      	mov	r0, r3
 801ec9a:	f7ee fd03 	bl	800d6a4 <_Z16StringFromFormatPKcz>

}
 801ec9e:	6878      	ldr	r0, [r7, #4]
 801eca0:	37e4      	adds	r7, #228	; 0xe4
 801eca2:	46bd      	mov	sp, r7
 801eca4:	bd90      	pop	{r4, r7, pc}
 801eca6:	bf00      	nop
 801eca8:	08025fc4 	.word	0x08025fc4
 801ecac:	08025fb8 	.word	0x08025fb8
 801ecb0:	08025fa8 	.word	0x08025fa8
 801ecb4:	08025fdc 	.word	0x08025fdc
 801ecb8:	08025ff8 	.word	0x08025ff8

0801ecbc <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801ecbc:	b480      	push	{r7}
 801ecbe:	b083      	sub	sp, #12
 801ecc0:	af00      	add	r7, sp, #0
 801ecc2:	6078      	str	r0, [r7, #4]
 801ecc4:	6039      	str	r1, [r7, #0]
    next_ = node;
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	683a      	ldr	r2, [r7, #0]
 801ecca:	605a      	str	r2, [r3, #4]
}
 801eccc:	bf00      	nop
 801ecce:	370c      	adds	r7, #12
 801ecd0:	46bd      	mov	sp, r7
 801ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecd6:	4770      	bx	lr

0801ecd8 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801ecd8:	b480      	push	{r7}
 801ecda:	b083      	sub	sp, #12
 801ecdc:	af00      	add	r7, sp, #0
 801ecde:	6078      	str	r0, [r7, #4]
    return next_;
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	685b      	ldr	r3, [r3, #4]
}
 801ece4:	4618      	mov	r0, r3
 801ece6:	370c      	adds	r7, #12
 801ece8:	46bd      	mov	sp, r7
 801ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecee:	4770      	bx	lr

0801ecf0 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801ecf0:	b480      	push	{r7}
 801ecf2:	b083      	sub	sp, #12
 801ecf4:	af00      	add	r7, sp, #0
 801ecf6:	6078      	str	r0, [r7, #4]
    return data_;
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	681b      	ldr	r3, [r3, #0]
}
 801ecfc:	4618      	mov	r0, r3
 801ecfe:	370c      	adds	r7, #12
 801ed00:	46bd      	mov	sp, r7
 801ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed06:	4770      	bx	lr

0801ed08 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801ed08:	b580      	push	{r7, lr}
 801ed0a:	b082      	sub	sp, #8
 801ed0c:	af00      	add	r7, sp, #0
 801ed0e:	6078      	str	r0, [r7, #4]
    delete data_;
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d004      	beq.n	801ed22 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801ed18:	681a      	ldr	r2, [r3, #0]
 801ed1a:	3204      	adds	r2, #4
 801ed1c:	6812      	ldr	r2, [r2, #0]
 801ed1e:	4618      	mov	r0, r3
 801ed20:	4790      	blx	r2
}
 801ed22:	bf00      	nop
 801ed24:	3708      	adds	r7, #8
 801ed26:	46bd      	mov	sp, r7
 801ed28:	bd80      	pop	{r7, pc}

0801ed2a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801ed2a:	b480      	push	{r7}
 801ed2c:	b083      	sub	sp, #12
 801ed2e:	af00      	add	r7, sp, #0
 801ed30:	6078      	str	r0, [r7, #4]
 801ed32:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801ed34:	687b      	ldr	r3, [r7, #4]
 801ed36:	683a      	ldr	r2, [r7, #0]
 801ed38:	601a      	str	r2, [r3, #0]
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	2200      	movs	r2, #0
 801ed3e:	605a      	str	r2, [r3, #4]
{
}
 801ed40:	687b      	ldr	r3, [r7, #4]
 801ed42:	4618      	mov	r0, r3
 801ed44:	370c      	adds	r7, #12
 801ed46:	46bd      	mov	sp, r7
 801ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed4c:	4770      	bx	lr

0801ed4e <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801ed4e:	b580      	push	{r7, lr}
 801ed50:	b082      	sub	sp, #8
 801ed52:	af00      	add	r7, sp, #0
 801ed54:	6078      	str	r0, [r7, #4]
 801ed56:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801ed58:	683b      	ldr	r3, [r7, #0]
 801ed5a:	6819      	ldr	r1, [r3, #0]
 801ed5c:	683b      	ldr	r3, [r7, #0]
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	681b      	ldr	r3, [r3, #0]
 801ed62:	335c      	adds	r3, #92	; 0x5c
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	687a      	ldr	r2, [r7, #4]
 801ed68:	4610      	mov	r0, r2
 801ed6a:	4798      	blx	r3
}
 801ed6c:	6878      	ldr	r0, [r7, #4]
 801ed6e:	3708      	adds	r7, #8
 801ed70:	46bd      	mov	sp, r7
 801ed72:	bd80      	pop	{r7, pc}

0801ed74 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801ed74:	b580      	push	{r7, lr}
 801ed76:	b082      	sub	sp, #8
 801ed78:	af00      	add	r7, sp, #0
 801ed7a:	6078      	str	r0, [r7, #4]
 801ed7c:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801ed7e:	683b      	ldr	r3, [r7, #0]
 801ed80:	6819      	ldr	r1, [r3, #0]
 801ed82:	683b      	ldr	r3, [r7, #0]
 801ed84:	681b      	ldr	r3, [r3, #0]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	3360      	adds	r3, #96	; 0x60
 801ed8a:	681b      	ldr	r3, [r3, #0]
 801ed8c:	687a      	ldr	r2, [r7, #4]
 801ed8e:	4610      	mov	r0, r2
 801ed90:	4798      	blx	r3
}
 801ed92:	6878      	ldr	r0, [r7, #4]
 801ed94:	3708      	adds	r7, #8
 801ed96:	46bd      	mov	sp, r7
 801ed98:	bd80      	pop	{r7, pc}

0801ed9a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801ed9a:	b480      	push	{r7}
 801ed9c:	b083      	sub	sp, #12
 801ed9e:	af00      	add	r7, sp, #0
 801eda0:	6078      	str	r0, [r7, #4]
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	2200      	movs	r2, #0
 801eda6:	601a      	str	r2, [r3, #0]
{
}
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	4618      	mov	r0, r3
 801edac:	370c      	adds	r7, #12
 801edae:	46bd      	mov	sp, r7
 801edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edb4:	4770      	bx	lr

0801edb6 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801edb6:	b580      	push	{r7, lr}
 801edb8:	b084      	sub	sp, #16
 801edba:	af00      	add	r7, sp, #0
 801edbc:	6078      	str	r0, [r7, #4]
    while (head_) {
 801edbe:	687b      	ldr	r3, [r7, #4]
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	d016      	beq.n	801edf4 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	681b      	ldr	r3, [r3, #0]
 801edca:	4618      	mov	r0, r3
 801edcc:	f7ff ff84 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801edd0:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	4618      	mov	r0, r3
 801edd8:	f7ff ff96 	bl	801ed08 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d003      	beq.n	801edec <_ZN18MockNamedValueList5clearEv+0x36>
 801ede4:	2108      	movs	r1, #8
 801ede6:	4618      	mov	r0, r3
 801ede8:	f7ea ffee 	bl	8009dc8 <_ZdlPvj>
        head_ = n;
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	68fa      	ldr	r2, [r7, #12]
 801edf0:	601a      	str	r2, [r3, #0]
    while (head_) {
 801edf2:	e7e4      	b.n	801edbe <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801edf4:	bf00      	nop
 801edf6:	3710      	adds	r7, #16
 801edf8:	46bd      	mov	sp, r7
 801edfa:	bd80      	pop	{r7, pc}

0801edfc <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801edfc:	b590      	push	{r4, r7, lr}
 801edfe:	b085      	sub	sp, #20
 801ee00:	af00      	add	r7, sp, #0
 801ee02:	6078      	str	r0, [r7, #4]
 801ee04:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801ee06:	f44f 7210 	mov.w	r2, #576	; 0x240
 801ee0a:	4916      	ldr	r1, [pc, #88]	; (801ee64 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801ee0c:	2008      	movs	r0, #8
 801ee0e:	f7ea ffc7 	bl	8009da0 <_ZnwjPKci>
 801ee12:	4604      	mov	r4, r0
 801ee14:	6839      	ldr	r1, [r7, #0]
 801ee16:	4620      	mov	r0, r4
 801ee18:	f7ff ff87 	bl	801ed2a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801ee1c:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	681b      	ldr	r3, [r3, #0]
 801ee22:	2b00      	cmp	r3, #0
 801ee24:	d103      	bne.n	801ee2e <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	68ba      	ldr	r2, [r7, #8]
 801ee2a:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801ee2c:	e016      	b.n	801ee5c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801ee34:	68f8      	ldr	r0, [r7, #12]
 801ee36:	f7ff ff4f 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801ee3a:	4603      	mov	r3, r0
 801ee3c:	2b00      	cmp	r3, #0
 801ee3e:	bf14      	ite	ne
 801ee40:	2301      	movne	r3, #1
 801ee42:	2300      	moveq	r3, #0
 801ee44:	b2db      	uxtb	r3, r3
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d004      	beq.n	801ee54 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801ee4a:	68f8      	ldr	r0, [r7, #12]
 801ee4c:	f7ff ff44 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801ee50:	60f8      	str	r0, [r7, #12]
 801ee52:	e7ef      	b.n	801ee34 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801ee54:	68b9      	ldr	r1, [r7, #8]
 801ee56:	68f8      	ldr	r0, [r7, #12]
 801ee58:	f7ff ff30 	bl	801ecbc <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801ee5c:	bf00      	nop
 801ee5e:	3714      	adds	r7, #20
 801ee60:	46bd      	mov	sp, r7
 801ee62:	bd90      	pop	{r4, r7, pc}
 801ee64:	08025f40 	.word	0x08025f40

0801ee68 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801ee68:	b590      	push	{r4, r7, lr}
 801ee6a:	b087      	sub	sp, #28
 801ee6c:	af00      	add	r7, sp, #0
 801ee6e:	6078      	str	r0, [r7, #4]
 801ee70:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	617b      	str	r3, [r7, #20]
 801ee78:	697b      	ldr	r3, [r7, #20]
 801ee7a:	2b00      	cmp	r3, #0
 801ee7c:	d01e      	beq.n	801eebc <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801ee7e:	f107 030c 	add.w	r3, r7, #12
 801ee82:	6979      	ldr	r1, [r7, #20]
 801ee84:	4618      	mov	r0, r3
 801ee86:	f7ff ff62 	bl	801ed4e <_ZNK22MockNamedValueListNode7getNameEv>
 801ee8a:	f107 030c 	add.w	r3, r7, #12
 801ee8e:	6839      	ldr	r1, [r7, #0]
 801ee90:	4618      	mov	r0, r3
 801ee92:	f7ed ff0c 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801ee96:	4603      	mov	r3, r0
 801ee98:	461c      	mov	r4, r3
 801ee9a:	f107 030c 	add.w	r3, r7, #12
 801ee9e:	4618      	mov	r0, r3
 801eea0:	f7ed fef9 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801eea4:	2c00      	cmp	r4, #0
 801eea6:	d004      	beq.n	801eeb2 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801eea8:	6978      	ldr	r0, [r7, #20]
 801eeaa:	f7ff ff21 	bl	801ecf0 <_ZN22MockNamedValueListNode4itemEv>
 801eeae:	4603      	mov	r3, r0
 801eeb0:	e005      	b.n	801eebe <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801eeb2:	6978      	ldr	r0, [r7, #20]
 801eeb4:	f7ff ff10 	bl	801ecd8 <_ZN22MockNamedValueListNode4nextEv>
 801eeb8:	6178      	str	r0, [r7, #20]
 801eeba:	e7dd      	b.n	801ee78 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801eebc:	2300      	movs	r3, #0
}
 801eebe:	4618      	mov	r0, r3
 801eec0:	371c      	adds	r7, #28
 801eec2:	46bd      	mov	sp, r7
 801eec4:	bd90      	pop	{r4, r7, pc}

0801eec6 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801eec6:	b480      	push	{r7}
 801eec8:	b083      	sub	sp, #12
 801eeca:	af00      	add	r7, sp, #0
 801eecc:	6078      	str	r0, [r7, #4]
    return head_;
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	681b      	ldr	r3, [r3, #0]
}
 801eed2:	4618      	mov	r0, r3
 801eed4:	370c      	adds	r7, #12
 801eed6:	46bd      	mov	sp, r7
 801eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eedc:	4770      	bx	lr

0801eede <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801eede:	b580      	push	{r7, lr}
 801eee0:	b084      	sub	sp, #16
 801eee2:	af00      	add	r7, sp, #0
 801eee4:	60f8      	str	r0, [r7, #12]
 801eee6:	60b9      	str	r1, [r7, #8]
 801eee8:	607a      	str	r2, [r7, #4]
 801eeea:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801eeec:	68fb      	ldr	r3, [r7, #12]
 801eeee:	68b9      	ldr	r1, [r7, #8]
 801eef0:	4618      	mov	r0, r3
 801eef2:	f7ed fb6c 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 801eef6:	68fb      	ldr	r3, [r7, #12]
 801eef8:	687a      	ldr	r2, [r7, #4]
 801eefa:	609a      	str	r2, [r3, #8]
 801eefc:	68fb      	ldr	r3, [r7, #12]
 801eefe:	2200      	movs	r2, #0
 801ef00:	60da      	str	r2, [r3, #12]
 801ef02:	68fb      	ldr	r3, [r7, #12]
 801ef04:	683a      	ldr	r2, [r7, #0]
 801ef06:	611a      	str	r2, [r3, #16]
 801ef08:	68fb      	ldr	r3, [r7, #12]
 801ef0a:	4618      	mov	r0, r3
 801ef0c:	3710      	adds	r7, #16
 801ef0e:	46bd      	mov	sp, r7
 801ef10:	bd80      	pop	{r7, pc}

0801ef12 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801ef12:	b580      	push	{r7, lr}
 801ef14:	b084      	sub	sp, #16
 801ef16:	af00      	add	r7, sp, #0
 801ef18:	60f8      	str	r0, [r7, #12]
 801ef1a:	60b9      	str	r1, [r7, #8]
 801ef1c:	607a      	str	r2, [r7, #4]
 801ef1e:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801ef20:	68fb      	ldr	r3, [r7, #12]
 801ef22:	68b9      	ldr	r1, [r7, #8]
 801ef24:	4618      	mov	r0, r3
 801ef26:	f7ed fb52 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 801ef2a:	68fb      	ldr	r3, [r7, #12]
 801ef2c:	2200      	movs	r2, #0
 801ef2e:	609a      	str	r2, [r3, #8]
 801ef30:	68fb      	ldr	r3, [r7, #12]
 801ef32:	687a      	ldr	r2, [r7, #4]
 801ef34:	60da      	str	r2, [r3, #12]
 801ef36:	68fb      	ldr	r3, [r7, #12]
 801ef38:	683a      	ldr	r2, [r7, #0]
 801ef3a:	611a      	str	r2, [r3, #16]
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	4618      	mov	r0, r3
 801ef40:	3710      	adds	r7, #16
 801ef42:	46bd      	mov	sp, r7
 801ef44:	bd80      	pop	{r7, pc}

0801ef46 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801ef46:	b580      	push	{r7, lr}
 801ef48:	b084      	sub	sp, #16
 801ef4a:	af00      	add	r7, sp, #0
 801ef4c:	60f8      	str	r0, [r7, #12]
 801ef4e:	60b9      	str	r1, [r7, #8]
 801ef50:	607a      	str	r2, [r7, #4]
 801ef52:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801ef54:	68fb      	ldr	r3, [r7, #12]
 801ef56:	68b9      	ldr	r1, [r7, #8]
 801ef58:	4618      	mov	r0, r3
 801ef5a:	f7ed fb38 	bl	800c5ce <_ZN12SimpleStringC1ERKS_>
 801ef5e:	68fb      	ldr	r3, [r7, #12]
 801ef60:	687a      	ldr	r2, [r7, #4]
 801ef62:	609a      	str	r2, [r3, #8]
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	683a      	ldr	r2, [r7, #0]
 801ef68:	60da      	str	r2, [r3, #12]
 801ef6a:	68fb      	ldr	r3, [r7, #12]
 801ef6c:	69ba      	ldr	r2, [r7, #24]
 801ef6e:	611a      	str	r2, [r3, #16]
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	4618      	mov	r0, r3
 801ef74:	3710      	adds	r7, #16
 801ef76:	46bd      	mov	sp, r7
 801ef78:	bd80      	pop	{r7, pc}
	...

0801ef7c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801ef7c:	b480      	push	{r7}
 801ef7e:	b083      	sub	sp, #12
 801ef80:	af00      	add	r7, sp, #0
 801ef82:	6078      	str	r0, [r7, #4]
 801ef84:	4a06      	ldr	r2, [pc, #24]	; (801efa0 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	601a      	str	r2, [r3, #0]
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	2200      	movs	r2, #0
 801ef8e:	605a      	str	r2, [r3, #4]
{

}
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	4618      	mov	r0, r3
 801ef94:	370c      	adds	r7, #12
 801ef96:	46bd      	mov	sp, r7
 801ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef9c:	4770      	bx	lr
 801ef9e:	bf00      	nop
 801efa0:	080288f0 	.word	0x080288f0

0801efa4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801efa4:	b580      	push	{r7, lr}
 801efa6:	b082      	sub	sp, #8
 801efa8:	af00      	add	r7, sp, #0
 801efaa:	6078      	str	r0, [r7, #4]
 801efac:	4a05      	ldr	r2, [pc, #20]	; (801efc4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	601a      	str	r2, [r3, #0]
{
    clear();
 801efb2:	6878      	ldr	r0, [r7, #4]
 801efb4:	f000 f825 	bl	801f002 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	4618      	mov	r0, r3
 801efbc:	3708      	adds	r7, #8
 801efbe:	46bd      	mov	sp, r7
 801efc0:	bd80      	pop	{r7, pc}
 801efc2:	bf00      	nop
 801efc4:	080288f0 	.word	0x080288f0

0801efc8 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801efc8:	b580      	push	{r7, lr}
 801efca:	b082      	sub	sp, #8
 801efcc:	af00      	add	r7, sp, #0
 801efce:	6078      	str	r0, [r7, #4]
}
 801efd0:	6878      	ldr	r0, [r7, #4]
 801efd2:	f7ff ffe7 	bl	801efa4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801efd6:	2108      	movs	r1, #8
 801efd8:	6878      	ldr	r0, [r7, #4]
 801efda:	f7ea fef5 	bl	8009dc8 <_ZdlPvj>
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	4618      	mov	r0, r3
 801efe2:	3708      	adds	r7, #8
 801efe4:	46bd      	mov	sp, r7
 801efe6:	bd80      	pop	{r7, pc}

0801efe8 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801efe8:	b580      	push	{r7, lr}
 801efea:	b082      	sub	sp, #8
 801efec:	af00      	add	r7, sp, #0
 801efee:	6078      	str	r0, [r7, #4]
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	4618      	mov	r0, r3
 801eff4:	f7ed fe4f 	bl	800cc96 <_ZN12SimpleStringD1Ev>
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	4618      	mov	r0, r3
 801effc:	3708      	adds	r7, #8
 801effe:	46bd      	mov	sp, r7
 801f000:	bd80      	pop	{r7, pc}

0801f002 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801f002:	b590      	push	{r4, r7, lr}
 801f004:	b085      	sub	sp, #20
 801f006:	af00      	add	r7, sp, #0
 801f008:	6078      	str	r0, [r7, #4]
    while (head_) {
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	685b      	ldr	r3, [r3, #4]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d012      	beq.n	801f038 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	685b      	ldr	r3, [r3, #4]
 801f016:	691b      	ldr	r3, [r3, #16]
 801f018:	60fb      	str	r3, [r7, #12]
        delete head_;
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	685c      	ldr	r4, [r3, #4]
 801f01e:	2c00      	cmp	r4, #0
 801f020:	d006      	beq.n	801f030 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801f022:	4620      	mov	r0, r4
 801f024:	f7ff ffe0 	bl	801efe8 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801f028:	2114      	movs	r1, #20
 801f02a:	4620      	mov	r0, r4
 801f02c:	f7ea fecc 	bl	8009dc8 <_ZdlPvj>
        head_ = next;
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	68fa      	ldr	r2, [r7, #12]
 801f034:	605a      	str	r2, [r3, #4]
    while (head_) {
 801f036:	e7e8      	b.n	801f00a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801f038:	bf00      	nop
 801f03a:	3714      	adds	r7, #20
 801f03c:	46bd      	mov	sp, r7
 801f03e:	bd90      	pop	{r4, r7, pc}

0801f040 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801f040:	b590      	push	{r4, r7, lr}
 801f042:	b085      	sub	sp, #20
 801f044:	af00      	add	r7, sp, #0
 801f046:	60f8      	str	r0, [r7, #12]
 801f048:	60b9      	str	r1, [r7, #8]
 801f04a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801f04c:	f240 227a 	movw	r2, #634	; 0x27a
 801f050:	4908      	ldr	r1, [pc, #32]	; (801f074 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801f052:	2014      	movs	r0, #20
 801f054:	f7ea fea4 	bl	8009da0 <_ZnwjPKci>
 801f058:	4604      	mov	r4, r0
 801f05a:	68fb      	ldr	r3, [r7, #12]
 801f05c:	685b      	ldr	r3, [r3, #4]
 801f05e:	687a      	ldr	r2, [r7, #4]
 801f060:	68b9      	ldr	r1, [r7, #8]
 801f062:	4620      	mov	r0, r4
 801f064:	f7ff ff3b 	bl	801eede <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801f068:	68fb      	ldr	r3, [r7, #12]
 801f06a:	605c      	str	r4, [r3, #4]
}
 801f06c:	bf00      	nop
 801f06e:	3714      	adds	r7, #20
 801f070:	46bd      	mov	sp, r7
 801f072:	bd90      	pop	{r4, r7, pc}
 801f074:	08025f40 	.word	0x08025f40

0801f078 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801f078:	b590      	push	{r4, r7, lr}
 801f07a:	b085      	sub	sp, #20
 801f07c:	af00      	add	r7, sp, #0
 801f07e:	60f8      	str	r0, [r7, #12]
 801f080:	60b9      	str	r1, [r7, #8]
 801f082:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801f084:	f240 227f 	movw	r2, #639	; 0x27f
 801f088:	4908      	ldr	r1, [pc, #32]	; (801f0ac <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801f08a:	2014      	movs	r0, #20
 801f08c:	f7ea fe88 	bl	8009da0 <_ZnwjPKci>
 801f090:	4604      	mov	r4, r0
 801f092:	68fb      	ldr	r3, [r7, #12]
 801f094:	685b      	ldr	r3, [r3, #4]
 801f096:	687a      	ldr	r2, [r7, #4]
 801f098:	68b9      	ldr	r1, [r7, #8]
 801f09a:	4620      	mov	r0, r4
 801f09c:	f7ff ff39 	bl	801ef12 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801f0a0:	68fb      	ldr	r3, [r7, #12]
 801f0a2:	605c      	str	r4, [r3, #4]
}
 801f0a4:	bf00      	nop
 801f0a6:	3714      	adds	r7, #20
 801f0a8:	46bd      	mov	sp, r7
 801f0aa:	bd90      	pop	{r4, r7, pc}
 801f0ac:	08025f40 	.word	0x08025f40

0801f0b0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801f0b0:	b580      	push	{r7, lr}
 801f0b2:	b084      	sub	sp, #16
 801f0b4:	af00      	add	r7, sp, #0
 801f0b6:	6078      	str	r0, [r7, #4]
 801f0b8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	685b      	ldr	r3, [r3, #4]
 801f0be:	60fb      	str	r3, [r7, #12]
 801f0c0:	68fb      	ldr	r3, [r7, #12]
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d017      	beq.n	801f0f6 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801f0c6:	68fb      	ldr	r3, [r7, #12]
 801f0c8:	6839      	ldr	r1, [r7, #0]
 801f0ca:	4618      	mov	r0, r3
 801f0cc:	f7ed fdef 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801f0d0:	4603      	mov	r3, r0
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d005      	beq.n	801f0e2 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f0d6:	68fb      	ldr	r3, [r7, #12]
 801f0d8:	689b      	ldr	r3, [r3, #8]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d001      	beq.n	801f0e2 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801f0de:	2301      	movs	r3, #1
 801f0e0:	e000      	b.n	801f0e4 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801f0e2:	2300      	movs	r3, #0
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	d002      	beq.n	801f0ee <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801f0e8:	68fb      	ldr	r3, [r7, #12]
 801f0ea:	689b      	ldr	r3, [r3, #8]
 801f0ec:	e004      	b.n	801f0f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f0ee:	68fb      	ldr	r3, [r7, #12]
 801f0f0:	691b      	ldr	r3, [r3, #16]
 801f0f2:	60fb      	str	r3, [r7, #12]
 801f0f4:	e7e4      	b.n	801f0c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f0f6:	2300      	movs	r3, #0
}
 801f0f8:	4618      	mov	r0, r3
 801f0fa:	3710      	adds	r7, #16
 801f0fc:	46bd      	mov	sp, r7
 801f0fe:	bd80      	pop	{r7, pc}

0801f100 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801f100:	b580      	push	{r7, lr}
 801f102:	b084      	sub	sp, #16
 801f104:	af00      	add	r7, sp, #0
 801f106:	6078      	str	r0, [r7, #4]
 801f108:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	685b      	ldr	r3, [r3, #4]
 801f10e:	60fb      	str	r3, [r7, #12]
 801f110:	68fb      	ldr	r3, [r7, #12]
 801f112:	2b00      	cmp	r3, #0
 801f114:	d017      	beq.n	801f146 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801f116:	68fb      	ldr	r3, [r7, #12]
 801f118:	6839      	ldr	r1, [r7, #0]
 801f11a:	4618      	mov	r0, r3
 801f11c:	f7ed fdc7 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801f120:	4603      	mov	r3, r0
 801f122:	2b00      	cmp	r3, #0
 801f124:	d005      	beq.n	801f132 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f126:	68fb      	ldr	r3, [r7, #12]
 801f128:	68db      	ldr	r3, [r3, #12]
 801f12a:	2b00      	cmp	r3, #0
 801f12c:	d001      	beq.n	801f132 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801f12e:	2301      	movs	r3, #1
 801f130:	e000      	b.n	801f134 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801f132:	2300      	movs	r3, #0
 801f134:	2b00      	cmp	r3, #0
 801f136:	d002      	beq.n	801f13e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801f138:	68fb      	ldr	r3, [r7, #12]
 801f13a:	68db      	ldr	r3, [r3, #12]
 801f13c:	e004      	b.n	801f148 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801f13e:	68fb      	ldr	r3, [r7, #12]
 801f140:	691b      	ldr	r3, [r3, #16]
 801f142:	60fb      	str	r3, [r7, #12]
 801f144:	e7e4      	b.n	801f110 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801f146:	2300      	movs	r3, #0
}
 801f148:	4618      	mov	r0, r3
 801f14a:	3710      	adds	r7, #16
 801f14c:	46bd      	mov	sp, r7
 801f14e:	bd80      	pop	{r7, pc}

0801f150 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801f150:	b590      	push	{r4, r7, lr}
 801f152:	b087      	sub	sp, #28
 801f154:	af02      	add	r7, sp, #8
 801f156:	6078      	str	r0, [r7, #4]
 801f158:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f15a:	683b      	ldr	r3, [r7, #0]
 801f15c:	685b      	ldr	r3, [r3, #4]
 801f15e:	60fb      	str	r3, [r7, #12]
 801f160:	68fb      	ldr	r3, [r7, #12]
 801f162:	2b00      	cmp	r3, #0
 801f164:	d018      	beq.n	801f198 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801f166:	f240 2293 	movw	r2, #659	; 0x293
 801f16a:	490d      	ldr	r1, [pc, #52]	; (801f1a0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801f16c:	2014      	movs	r0, #20
 801f16e:	f7ea fe17 	bl	8009da0 <_ZnwjPKci>
 801f172:	4604      	mov	r4, r0
 801f174:	68f9      	ldr	r1, [r7, #12]
 801f176:	68fb      	ldr	r3, [r7, #12]
 801f178:	689a      	ldr	r2, [r3, #8]
 801f17a:	68fb      	ldr	r3, [r7, #12]
 801f17c:	68d8      	ldr	r0, [r3, #12]
 801f17e:	687b      	ldr	r3, [r7, #4]
 801f180:	685b      	ldr	r3, [r3, #4]
 801f182:	9300      	str	r3, [sp, #0]
 801f184:	4603      	mov	r3, r0
 801f186:	4620      	mov	r0, r4
 801f188:	f7ff fedd 	bl	801ef46 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801f190:	68fb      	ldr	r3, [r7, #12]
 801f192:	691b      	ldr	r3, [r3, #16]
 801f194:	60fb      	str	r3, [r7, #12]
 801f196:	e7e3      	b.n	801f160 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801f198:	bf00      	nop
 801f19a:	3714      	adds	r7, #20
 801f19c:	46bd      	mov	sp, r7
 801f19e:	bd90      	pop	{r4, r7, pc}
 801f1a0:	08025f40 	.word	0x08025f40

0801f1a4 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801f1a4:	b580      	push	{r7, lr}
 801f1a6:	b082      	sub	sp, #8
 801f1a8:	af00      	add	r7, sp, #0
 801f1aa:	6078      	str	r0, [r7, #4]
 801f1ac:	6039      	str	r1, [r7, #0]
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	490b      	ldr	r1, [pc, #44]	; (801f1e0 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801f1b2:	4618      	mov	r0, r3
 801f1b4:	f7ed f9b7 	bl	800c526 <_ZN12SimpleStringC1EPKc>
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	2200      	movs	r2, #0
 801f1bc:	721a      	strb	r2, [r3, #8]
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	2200      	movs	r2, #0
 801f1c2:	725a      	strb	r2, [r3, #9]
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	2200      	movs	r2, #0
 801f1c8:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	6839      	ldr	r1, [r7, #0]
 801f1ce:	4618      	mov	r0, r3
 801f1d0:	f7ed fa15 	bl	800c5fe <_ZN12SimpleStringaSERKS_>
}
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	4618      	mov	r0, r3
 801f1d8:	3708      	adds	r7, #8
 801f1da:	46bd      	mov	sp, r7
 801f1dc:	bd80      	pop	{r7, pc}
 801f1de:	bf00      	nop
 801f1e0:	0802601c 	.word	0x0802601c

0801f1e4 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801f1e4:	b480      	push	{r7}
 801f1e6:	b083      	sub	sp, #12
 801f1e8:	af00      	add	r7, sp, #0
 801f1ea:	6078      	str	r0, [r7, #4]
 801f1ec:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	683a      	ldr	r2, [r7, #0]
 801f1f2:	60da      	str	r2, [r3, #12]
    return this;
 801f1f4:	687b      	ldr	r3, [r7, #4]
}
 801f1f6:	4618      	mov	r0, r3
 801f1f8:	370c      	adds	r7, #12
 801f1fa:	46bd      	mov	sp, r7
 801f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f200:	4770      	bx	lr

0801f202 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801f202:	b480      	push	{r7}
 801f204:	b083      	sub	sp, #12
 801f206:	af00      	add	r7, sp, #0
 801f208:	6078      	str	r0, [r7, #4]
    return next_;
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	68db      	ldr	r3, [r3, #12]
}
 801f20e:	4618      	mov	r0, r3
 801f210:	370c      	adds	r7, #12
 801f212:	46bd      	mov	sp, r7
 801f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f218:	4770      	bx	lr

0801f21a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801f21a:	b480      	push	{r7}
 801f21c:	b083      	sub	sp, #12
 801f21e:	af00      	add	r7, sp, #0
 801f220:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801f222:	687b      	ldr	r3, [r7, #4]
 801f224:	2201      	movs	r2, #1
 801f226:	721a      	strb	r2, [r3, #8]
}
 801f228:	bf00      	nop
 801f22a:	370c      	adds	r7, #12
 801f22c:	46bd      	mov	sp, r7
 801f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f232:	4770      	bx	lr

0801f234 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801f234:	b480      	push	{r7}
 801f236:	b083      	sub	sp, #12
 801f238:	af00      	add	r7, sp, #0
 801f23a:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	2201      	movs	r2, #1
 801f240:	725a      	strb	r2, [r3, #9]
}
 801f242:	bf00      	nop
 801f244:	370c      	adds	r7, #12
 801f246:	46bd      	mov	sp, r7
 801f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f24c:	4770      	bx	lr

0801f24e <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801f24e:	b580      	push	{r7, lr}
 801f250:	b084      	sub	sp, #16
 801f252:	af00      	add	r7, sp, #0
 801f254:	6078      	str	r0, [r7, #4]
 801f256:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801f258:	2300      	movs	r3, #0
 801f25a:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	7a1b      	ldrb	r3, [r3, #8]
 801f260:	2b00      	cmp	r3, #0
 801f262:	d007      	beq.n	801f274 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	4619      	mov	r1, r3
 801f268:	6838      	ldr	r0, [r7, #0]
 801f26a:	f7ed fd20 	bl	800ccae <_ZeqRK12SimpleStringS1_>
 801f26e:	4603      	mov	r3, r0
 801f270:	73fb      	strb	r3, [r7, #15]
 801f272:	e006      	b.n	801f282 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	4619      	mov	r1, r3
 801f278:	6838      	ldr	r0, [r7, #0]
 801f27a:	f7ed f9d2 	bl	800c622 <_ZNK12SimpleString8containsERKS_>
 801f27e:	4603      	mov	r3, r0
 801f280:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	7a5b      	ldrb	r3, [r3, #9]
 801f286:	2b00      	cmp	r3, #0
 801f288:	d004      	beq.n	801f294 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801f28a:	7bfb      	ldrb	r3, [r7, #15]
 801f28c:	f083 0301 	eor.w	r3, r3, #1
 801f290:	b2db      	uxtb	r3, r3
 801f292:	e005      	b.n	801f2a0 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801f294:	7bfb      	ldrb	r3, [r7, #15]
 801f296:	2b00      	cmp	r3, #0
 801f298:	bf14      	ite	ne
 801f29a:	2301      	movne	r3, #1
 801f29c:	2300      	moveq	r3, #0
 801f29e:	b2db      	uxtb	r3, r3
}
 801f2a0:	4618      	mov	r0, r3
 801f2a2:	3710      	adds	r7, #16
 801f2a4:	46bd      	mov	sp, r7
 801f2a6:	bd80      	pop	{r7, pc}

0801f2a8 <__cxa_guard_acquire>:
 801f2a8:	6803      	ldr	r3, [r0, #0]
 801f2aa:	07db      	lsls	r3, r3, #31
 801f2ac:	d406      	bmi.n	801f2bc <__cxa_guard_acquire+0x14>
 801f2ae:	7843      	ldrb	r3, [r0, #1]
 801f2b0:	b103      	cbz	r3, 801f2b4 <__cxa_guard_acquire+0xc>
 801f2b2:	deff      	udf	#255	; 0xff
 801f2b4:	2301      	movs	r3, #1
 801f2b6:	7043      	strb	r3, [r0, #1]
 801f2b8:	4618      	mov	r0, r3
 801f2ba:	4770      	bx	lr
 801f2bc:	2000      	movs	r0, #0
 801f2be:	4770      	bx	lr

0801f2c0 <__cxa_guard_release>:
 801f2c0:	2301      	movs	r3, #1
 801f2c2:	6003      	str	r3, [r0, #0]
 801f2c4:	4770      	bx	lr

0801f2c6 <__cxa_pure_virtual>:
 801f2c6:	b508      	push	{r3, lr}
 801f2c8:	f000 f80c 	bl	801f2e4 <_ZSt9terminatev>

0801f2cc <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f2cc:	b508      	push	{r3, lr}
 801f2ce:	4780      	blx	r0
 801f2d0:	f000 f816 	bl	801f300 <abort>

0801f2d4 <_ZSt13get_terminatev>:
 801f2d4:	4b02      	ldr	r3, [pc, #8]	; (801f2e0 <_ZSt13get_terminatev+0xc>)
 801f2d6:	6818      	ldr	r0, [r3, #0]
 801f2d8:	f3bf 8f5b 	dmb	ish
 801f2dc:	4770      	bx	lr
 801f2de:	bf00      	nop
 801f2e0:	20000104 	.word	0x20000104

0801f2e4 <_ZSt9terminatev>:
 801f2e4:	b508      	push	{r3, lr}
 801f2e6:	f7ff fff5 	bl	801f2d4 <_ZSt13get_terminatev>
 801f2ea:	f7ff ffef 	bl	801f2cc <_ZN10__cxxabiv111__terminateEPFvvE>

0801f2ee <fabs>:
 801f2ee:	ec51 0b10 	vmov	r0, r1, d0
 801f2f2:	ee10 2a10 	vmov	r2, s0
 801f2f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f2fa:	ec43 2b10 	vmov	d0, r2, r3
 801f2fe:	4770      	bx	lr

0801f300 <abort>:
 801f300:	b508      	push	{r3, lr}
 801f302:	2006      	movs	r0, #6
 801f304:	f000 ff88 	bl	8020218 <raise>
 801f308:	2001      	movs	r0, #1
 801f30a:	f7e1 fd3a 	bl	8000d82 <_exit>

0801f30e <atexit>:
 801f30e:	2300      	movs	r3, #0
 801f310:	4601      	mov	r1, r0
 801f312:	461a      	mov	r2, r3
 801f314:	4618      	mov	r0, r3
 801f316:	f002 b93f 	b.w	8021598 <__register_exitproc>
	...

0801f31c <calloc>:
 801f31c:	4b02      	ldr	r3, [pc, #8]	; (801f328 <calloc+0xc>)
 801f31e:	460a      	mov	r2, r1
 801f320:	4601      	mov	r1, r0
 801f322:	6818      	ldr	r0, [r3, #0]
 801f324:	f000 bde8 	b.w	801fef8 <_calloc_r>
 801f328:	20000108 	.word	0x20000108

0801f32c <__errno>:
 801f32c:	4b01      	ldr	r3, [pc, #4]	; (801f334 <__errno+0x8>)
 801f32e:	6818      	ldr	r0, [r3, #0]
 801f330:	4770      	bx	lr
 801f332:	bf00      	nop
 801f334:	20000108 	.word	0x20000108

0801f338 <_fclose_r>:
 801f338:	b570      	push	{r4, r5, r6, lr}
 801f33a:	4605      	mov	r5, r0
 801f33c:	460c      	mov	r4, r1
 801f33e:	b911      	cbnz	r1, 801f346 <_fclose_r+0xe>
 801f340:	2600      	movs	r6, #0
 801f342:	4630      	mov	r0, r6
 801f344:	bd70      	pop	{r4, r5, r6, pc}
 801f346:	b118      	cbz	r0, 801f350 <_fclose_r+0x18>
 801f348:	6983      	ldr	r3, [r0, #24]
 801f34a:	b90b      	cbnz	r3, 801f350 <_fclose_r+0x18>
 801f34c:	f000 f994 	bl	801f678 <__sinit>
 801f350:	4b2c      	ldr	r3, [pc, #176]	; (801f404 <_fclose_r+0xcc>)
 801f352:	429c      	cmp	r4, r3
 801f354:	d114      	bne.n	801f380 <_fclose_r+0x48>
 801f356:	686c      	ldr	r4, [r5, #4]
 801f358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f35a:	07d8      	lsls	r0, r3, #31
 801f35c:	d405      	bmi.n	801f36a <_fclose_r+0x32>
 801f35e:	89a3      	ldrh	r3, [r4, #12]
 801f360:	0599      	lsls	r1, r3, #22
 801f362:	d402      	bmi.n	801f36a <_fclose_r+0x32>
 801f364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f366:	f000 fd3a 	bl	801fdde <__retarget_lock_acquire_recursive>
 801f36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f36e:	b98b      	cbnz	r3, 801f394 <_fclose_r+0x5c>
 801f370:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801f372:	f016 0601 	ands.w	r6, r6, #1
 801f376:	d1e3      	bne.n	801f340 <_fclose_r+0x8>
 801f378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f37a:	f000 fd32 	bl	801fde2 <__retarget_lock_release_recursive>
 801f37e:	e7e0      	b.n	801f342 <_fclose_r+0xa>
 801f380:	4b21      	ldr	r3, [pc, #132]	; (801f408 <_fclose_r+0xd0>)
 801f382:	429c      	cmp	r4, r3
 801f384:	d101      	bne.n	801f38a <_fclose_r+0x52>
 801f386:	68ac      	ldr	r4, [r5, #8]
 801f388:	e7e6      	b.n	801f358 <_fclose_r+0x20>
 801f38a:	4b20      	ldr	r3, [pc, #128]	; (801f40c <_fclose_r+0xd4>)
 801f38c:	429c      	cmp	r4, r3
 801f38e:	bf08      	it	eq
 801f390:	68ec      	ldreq	r4, [r5, #12]
 801f392:	e7e1      	b.n	801f358 <_fclose_r+0x20>
 801f394:	4621      	mov	r1, r4
 801f396:	4628      	mov	r0, r5
 801f398:	f000 f842 	bl	801f420 <__sflush_r>
 801f39c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f39e:	4606      	mov	r6, r0
 801f3a0:	b133      	cbz	r3, 801f3b0 <_fclose_r+0x78>
 801f3a2:	6a21      	ldr	r1, [r4, #32]
 801f3a4:	4628      	mov	r0, r5
 801f3a6:	4798      	blx	r3
 801f3a8:	2800      	cmp	r0, #0
 801f3aa:	bfb8      	it	lt
 801f3ac:	f04f 36ff 	movlt.w	r6, #4294967295
 801f3b0:	89a3      	ldrh	r3, [r4, #12]
 801f3b2:	061a      	lsls	r2, r3, #24
 801f3b4:	d503      	bpl.n	801f3be <_fclose_r+0x86>
 801f3b6:	6921      	ldr	r1, [r4, #16]
 801f3b8:	4628      	mov	r0, r5
 801f3ba:	f000 fdad 	bl	801ff18 <_free_r>
 801f3be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f3c0:	b141      	cbz	r1, 801f3d4 <_fclose_r+0x9c>
 801f3c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f3c6:	4299      	cmp	r1, r3
 801f3c8:	d002      	beq.n	801f3d0 <_fclose_r+0x98>
 801f3ca:	4628      	mov	r0, r5
 801f3cc:	f000 fda4 	bl	801ff18 <_free_r>
 801f3d0:	2300      	movs	r3, #0
 801f3d2:	6363      	str	r3, [r4, #52]	; 0x34
 801f3d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f3d6:	b121      	cbz	r1, 801f3e2 <_fclose_r+0xaa>
 801f3d8:	4628      	mov	r0, r5
 801f3da:	f000 fd9d 	bl	801ff18 <_free_r>
 801f3de:	2300      	movs	r3, #0
 801f3e0:	64a3      	str	r3, [r4, #72]	; 0x48
 801f3e2:	f000 f931 	bl	801f648 <__sfp_lock_acquire>
 801f3e6:	2300      	movs	r3, #0
 801f3e8:	81a3      	strh	r3, [r4, #12]
 801f3ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f3ec:	07db      	lsls	r3, r3, #31
 801f3ee:	d402      	bmi.n	801f3f6 <_fclose_r+0xbe>
 801f3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f3f2:	f000 fcf6 	bl	801fde2 <__retarget_lock_release_recursive>
 801f3f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f3f8:	f000 fcef 	bl	801fdda <__retarget_lock_close_recursive>
 801f3fc:	f000 f92a 	bl	801f654 <__sfp_lock_release>
 801f400:	e79f      	b.n	801f342 <_fclose_r+0xa>
 801f402:	bf00      	nop
 801f404:	080289e4 	.word	0x080289e4
 801f408:	08028a04 	.word	0x08028a04
 801f40c:	080289c4 	.word	0x080289c4

0801f410 <fclose>:
 801f410:	4b02      	ldr	r3, [pc, #8]	; (801f41c <fclose+0xc>)
 801f412:	4601      	mov	r1, r0
 801f414:	6818      	ldr	r0, [r3, #0]
 801f416:	f7ff bf8f 	b.w	801f338 <_fclose_r>
 801f41a:	bf00      	nop
 801f41c:	20000108 	.word	0x20000108

0801f420 <__sflush_r>:
 801f420:	898a      	ldrh	r2, [r1, #12]
 801f422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f426:	4605      	mov	r5, r0
 801f428:	0710      	lsls	r0, r2, #28
 801f42a:	460c      	mov	r4, r1
 801f42c:	d458      	bmi.n	801f4e0 <__sflush_r+0xc0>
 801f42e:	684b      	ldr	r3, [r1, #4]
 801f430:	2b00      	cmp	r3, #0
 801f432:	dc05      	bgt.n	801f440 <__sflush_r+0x20>
 801f434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f436:	2b00      	cmp	r3, #0
 801f438:	dc02      	bgt.n	801f440 <__sflush_r+0x20>
 801f43a:	2000      	movs	r0, #0
 801f43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f442:	2e00      	cmp	r6, #0
 801f444:	d0f9      	beq.n	801f43a <__sflush_r+0x1a>
 801f446:	2300      	movs	r3, #0
 801f448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f44c:	682f      	ldr	r7, [r5, #0]
 801f44e:	602b      	str	r3, [r5, #0]
 801f450:	d032      	beq.n	801f4b8 <__sflush_r+0x98>
 801f452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f454:	89a3      	ldrh	r3, [r4, #12]
 801f456:	075a      	lsls	r2, r3, #29
 801f458:	d505      	bpl.n	801f466 <__sflush_r+0x46>
 801f45a:	6863      	ldr	r3, [r4, #4]
 801f45c:	1ac0      	subs	r0, r0, r3
 801f45e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f460:	b10b      	cbz	r3, 801f466 <__sflush_r+0x46>
 801f462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f464:	1ac0      	subs	r0, r0, r3
 801f466:	2300      	movs	r3, #0
 801f468:	4602      	mov	r2, r0
 801f46a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f46c:	6a21      	ldr	r1, [r4, #32]
 801f46e:	4628      	mov	r0, r5
 801f470:	47b0      	blx	r6
 801f472:	1c43      	adds	r3, r0, #1
 801f474:	89a3      	ldrh	r3, [r4, #12]
 801f476:	d106      	bne.n	801f486 <__sflush_r+0x66>
 801f478:	6829      	ldr	r1, [r5, #0]
 801f47a:	291d      	cmp	r1, #29
 801f47c:	d82c      	bhi.n	801f4d8 <__sflush_r+0xb8>
 801f47e:	4a2a      	ldr	r2, [pc, #168]	; (801f528 <__sflush_r+0x108>)
 801f480:	40ca      	lsrs	r2, r1
 801f482:	07d6      	lsls	r6, r2, #31
 801f484:	d528      	bpl.n	801f4d8 <__sflush_r+0xb8>
 801f486:	2200      	movs	r2, #0
 801f488:	6062      	str	r2, [r4, #4]
 801f48a:	04d9      	lsls	r1, r3, #19
 801f48c:	6922      	ldr	r2, [r4, #16]
 801f48e:	6022      	str	r2, [r4, #0]
 801f490:	d504      	bpl.n	801f49c <__sflush_r+0x7c>
 801f492:	1c42      	adds	r2, r0, #1
 801f494:	d101      	bne.n	801f49a <__sflush_r+0x7a>
 801f496:	682b      	ldr	r3, [r5, #0]
 801f498:	b903      	cbnz	r3, 801f49c <__sflush_r+0x7c>
 801f49a:	6560      	str	r0, [r4, #84]	; 0x54
 801f49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f49e:	602f      	str	r7, [r5, #0]
 801f4a0:	2900      	cmp	r1, #0
 801f4a2:	d0ca      	beq.n	801f43a <__sflush_r+0x1a>
 801f4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f4a8:	4299      	cmp	r1, r3
 801f4aa:	d002      	beq.n	801f4b2 <__sflush_r+0x92>
 801f4ac:	4628      	mov	r0, r5
 801f4ae:	f000 fd33 	bl	801ff18 <_free_r>
 801f4b2:	2000      	movs	r0, #0
 801f4b4:	6360      	str	r0, [r4, #52]	; 0x34
 801f4b6:	e7c1      	b.n	801f43c <__sflush_r+0x1c>
 801f4b8:	6a21      	ldr	r1, [r4, #32]
 801f4ba:	2301      	movs	r3, #1
 801f4bc:	4628      	mov	r0, r5
 801f4be:	47b0      	blx	r6
 801f4c0:	1c41      	adds	r1, r0, #1
 801f4c2:	d1c7      	bne.n	801f454 <__sflush_r+0x34>
 801f4c4:	682b      	ldr	r3, [r5, #0]
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d0c4      	beq.n	801f454 <__sflush_r+0x34>
 801f4ca:	2b1d      	cmp	r3, #29
 801f4cc:	d001      	beq.n	801f4d2 <__sflush_r+0xb2>
 801f4ce:	2b16      	cmp	r3, #22
 801f4d0:	d101      	bne.n	801f4d6 <__sflush_r+0xb6>
 801f4d2:	602f      	str	r7, [r5, #0]
 801f4d4:	e7b1      	b.n	801f43a <__sflush_r+0x1a>
 801f4d6:	89a3      	ldrh	r3, [r4, #12]
 801f4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f4dc:	81a3      	strh	r3, [r4, #12]
 801f4de:	e7ad      	b.n	801f43c <__sflush_r+0x1c>
 801f4e0:	690f      	ldr	r7, [r1, #16]
 801f4e2:	2f00      	cmp	r7, #0
 801f4e4:	d0a9      	beq.n	801f43a <__sflush_r+0x1a>
 801f4e6:	0793      	lsls	r3, r2, #30
 801f4e8:	680e      	ldr	r6, [r1, #0]
 801f4ea:	bf08      	it	eq
 801f4ec:	694b      	ldreq	r3, [r1, #20]
 801f4ee:	600f      	str	r7, [r1, #0]
 801f4f0:	bf18      	it	ne
 801f4f2:	2300      	movne	r3, #0
 801f4f4:	eba6 0807 	sub.w	r8, r6, r7
 801f4f8:	608b      	str	r3, [r1, #8]
 801f4fa:	f1b8 0f00 	cmp.w	r8, #0
 801f4fe:	dd9c      	ble.n	801f43a <__sflush_r+0x1a>
 801f500:	6a21      	ldr	r1, [r4, #32]
 801f502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f504:	4643      	mov	r3, r8
 801f506:	463a      	mov	r2, r7
 801f508:	4628      	mov	r0, r5
 801f50a:	47b0      	blx	r6
 801f50c:	2800      	cmp	r0, #0
 801f50e:	dc06      	bgt.n	801f51e <__sflush_r+0xfe>
 801f510:	89a3      	ldrh	r3, [r4, #12]
 801f512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f516:	81a3      	strh	r3, [r4, #12]
 801f518:	f04f 30ff 	mov.w	r0, #4294967295
 801f51c:	e78e      	b.n	801f43c <__sflush_r+0x1c>
 801f51e:	4407      	add	r7, r0
 801f520:	eba8 0800 	sub.w	r8, r8, r0
 801f524:	e7e9      	b.n	801f4fa <__sflush_r+0xda>
 801f526:	bf00      	nop
 801f528:	20400001 	.word	0x20400001

0801f52c <_fflush_r>:
 801f52c:	b538      	push	{r3, r4, r5, lr}
 801f52e:	690b      	ldr	r3, [r1, #16]
 801f530:	4605      	mov	r5, r0
 801f532:	460c      	mov	r4, r1
 801f534:	b913      	cbnz	r3, 801f53c <_fflush_r+0x10>
 801f536:	2500      	movs	r5, #0
 801f538:	4628      	mov	r0, r5
 801f53a:	bd38      	pop	{r3, r4, r5, pc}
 801f53c:	b118      	cbz	r0, 801f546 <_fflush_r+0x1a>
 801f53e:	6983      	ldr	r3, [r0, #24]
 801f540:	b90b      	cbnz	r3, 801f546 <_fflush_r+0x1a>
 801f542:	f000 f899 	bl	801f678 <__sinit>
 801f546:	4b14      	ldr	r3, [pc, #80]	; (801f598 <_fflush_r+0x6c>)
 801f548:	429c      	cmp	r4, r3
 801f54a:	d11b      	bne.n	801f584 <_fflush_r+0x58>
 801f54c:	686c      	ldr	r4, [r5, #4]
 801f54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f552:	2b00      	cmp	r3, #0
 801f554:	d0ef      	beq.n	801f536 <_fflush_r+0xa>
 801f556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f558:	07d0      	lsls	r0, r2, #31
 801f55a:	d404      	bmi.n	801f566 <_fflush_r+0x3a>
 801f55c:	0599      	lsls	r1, r3, #22
 801f55e:	d402      	bmi.n	801f566 <_fflush_r+0x3a>
 801f560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f562:	f000 fc3c 	bl	801fdde <__retarget_lock_acquire_recursive>
 801f566:	4628      	mov	r0, r5
 801f568:	4621      	mov	r1, r4
 801f56a:	f7ff ff59 	bl	801f420 <__sflush_r>
 801f56e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f570:	07da      	lsls	r2, r3, #31
 801f572:	4605      	mov	r5, r0
 801f574:	d4e0      	bmi.n	801f538 <_fflush_r+0xc>
 801f576:	89a3      	ldrh	r3, [r4, #12]
 801f578:	059b      	lsls	r3, r3, #22
 801f57a:	d4dd      	bmi.n	801f538 <_fflush_r+0xc>
 801f57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f57e:	f000 fc30 	bl	801fde2 <__retarget_lock_release_recursive>
 801f582:	e7d9      	b.n	801f538 <_fflush_r+0xc>
 801f584:	4b05      	ldr	r3, [pc, #20]	; (801f59c <_fflush_r+0x70>)
 801f586:	429c      	cmp	r4, r3
 801f588:	d101      	bne.n	801f58e <_fflush_r+0x62>
 801f58a:	68ac      	ldr	r4, [r5, #8]
 801f58c:	e7df      	b.n	801f54e <_fflush_r+0x22>
 801f58e:	4b04      	ldr	r3, [pc, #16]	; (801f5a0 <_fflush_r+0x74>)
 801f590:	429c      	cmp	r4, r3
 801f592:	bf08      	it	eq
 801f594:	68ec      	ldreq	r4, [r5, #12]
 801f596:	e7da      	b.n	801f54e <_fflush_r+0x22>
 801f598:	080289e4 	.word	0x080289e4
 801f59c:	08028a04 	.word	0x08028a04
 801f5a0:	080289c4 	.word	0x080289c4

0801f5a4 <fflush>:
 801f5a4:	4601      	mov	r1, r0
 801f5a6:	b920      	cbnz	r0, 801f5b2 <fflush+0xe>
 801f5a8:	4b04      	ldr	r3, [pc, #16]	; (801f5bc <fflush+0x18>)
 801f5aa:	4905      	ldr	r1, [pc, #20]	; (801f5c0 <fflush+0x1c>)
 801f5ac:	6818      	ldr	r0, [r3, #0]
 801f5ae:	f000 babb 	b.w	801fb28 <_fwalk_reent>
 801f5b2:	4b04      	ldr	r3, [pc, #16]	; (801f5c4 <fflush+0x20>)
 801f5b4:	6818      	ldr	r0, [r3, #0]
 801f5b6:	f7ff bfb9 	b.w	801f52c <_fflush_r>
 801f5ba:	bf00      	nop
 801f5bc:	08028a24 	.word	0x08028a24
 801f5c0:	0801f52d 	.word	0x0801f52d
 801f5c4:	20000108 	.word	0x20000108

0801f5c8 <std>:
 801f5c8:	2300      	movs	r3, #0
 801f5ca:	b510      	push	{r4, lr}
 801f5cc:	4604      	mov	r4, r0
 801f5ce:	e9c0 3300 	strd	r3, r3, [r0]
 801f5d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f5d6:	6083      	str	r3, [r0, #8]
 801f5d8:	8181      	strh	r1, [r0, #12]
 801f5da:	6643      	str	r3, [r0, #100]	; 0x64
 801f5dc:	81c2      	strh	r2, [r0, #14]
 801f5de:	6183      	str	r3, [r0, #24]
 801f5e0:	4619      	mov	r1, r3
 801f5e2:	2208      	movs	r2, #8
 801f5e4:	305c      	adds	r0, #92	; 0x5c
 801f5e6:	f000 fc7f 	bl	801fee8 <memset>
 801f5ea:	4b05      	ldr	r3, [pc, #20]	; (801f600 <std+0x38>)
 801f5ec:	6263      	str	r3, [r4, #36]	; 0x24
 801f5ee:	4b05      	ldr	r3, [pc, #20]	; (801f604 <std+0x3c>)
 801f5f0:	62a3      	str	r3, [r4, #40]	; 0x28
 801f5f2:	4b05      	ldr	r3, [pc, #20]	; (801f608 <std+0x40>)
 801f5f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f5f6:	4b05      	ldr	r3, [pc, #20]	; (801f60c <std+0x44>)
 801f5f8:	6224      	str	r4, [r4, #32]
 801f5fa:	6323      	str	r3, [r4, #48]	; 0x30
 801f5fc:	bd10      	pop	{r4, pc}
 801f5fe:	bf00      	nop
 801f600:	08020291 	.word	0x08020291
 801f604:	080202b7 	.word	0x080202b7
 801f608:	080202ef 	.word	0x080202ef
 801f60c:	08020313 	.word	0x08020313

0801f610 <_cleanup_r>:
 801f610:	4901      	ldr	r1, [pc, #4]	; (801f618 <_cleanup_r+0x8>)
 801f612:	f000 ba89 	b.w	801fb28 <_fwalk_reent>
 801f616:	bf00      	nop
 801f618:	0801f52d 	.word	0x0801f52d

0801f61c <__sfmoreglue>:
 801f61c:	b570      	push	{r4, r5, r6, lr}
 801f61e:	1e4a      	subs	r2, r1, #1
 801f620:	2568      	movs	r5, #104	; 0x68
 801f622:	4355      	muls	r5, r2
 801f624:	460e      	mov	r6, r1
 801f626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f62a:	f000 fcc5 	bl	801ffb8 <_malloc_r>
 801f62e:	4604      	mov	r4, r0
 801f630:	b140      	cbz	r0, 801f644 <__sfmoreglue+0x28>
 801f632:	2100      	movs	r1, #0
 801f634:	e9c0 1600 	strd	r1, r6, [r0]
 801f638:	300c      	adds	r0, #12
 801f63a:	60a0      	str	r0, [r4, #8]
 801f63c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f640:	f000 fc52 	bl	801fee8 <memset>
 801f644:	4620      	mov	r0, r4
 801f646:	bd70      	pop	{r4, r5, r6, pc}

0801f648 <__sfp_lock_acquire>:
 801f648:	4801      	ldr	r0, [pc, #4]	; (801f650 <__sfp_lock_acquire+0x8>)
 801f64a:	f000 bbc8 	b.w	801fdde <__retarget_lock_acquire_recursive>
 801f64e:	bf00      	nop
 801f650:	20000f2c 	.word	0x20000f2c

0801f654 <__sfp_lock_release>:
 801f654:	4801      	ldr	r0, [pc, #4]	; (801f65c <__sfp_lock_release+0x8>)
 801f656:	f000 bbc4 	b.w	801fde2 <__retarget_lock_release_recursive>
 801f65a:	bf00      	nop
 801f65c:	20000f2c 	.word	0x20000f2c

0801f660 <__sinit_lock_acquire>:
 801f660:	4801      	ldr	r0, [pc, #4]	; (801f668 <__sinit_lock_acquire+0x8>)
 801f662:	f000 bbbc 	b.w	801fdde <__retarget_lock_acquire_recursive>
 801f666:	bf00      	nop
 801f668:	20000f27 	.word	0x20000f27

0801f66c <__sinit_lock_release>:
 801f66c:	4801      	ldr	r0, [pc, #4]	; (801f674 <__sinit_lock_release+0x8>)
 801f66e:	f000 bbb8 	b.w	801fde2 <__retarget_lock_release_recursive>
 801f672:	bf00      	nop
 801f674:	20000f27 	.word	0x20000f27

0801f678 <__sinit>:
 801f678:	b510      	push	{r4, lr}
 801f67a:	4604      	mov	r4, r0
 801f67c:	f7ff fff0 	bl	801f660 <__sinit_lock_acquire>
 801f680:	69a3      	ldr	r3, [r4, #24]
 801f682:	b11b      	cbz	r3, 801f68c <__sinit+0x14>
 801f684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f688:	f7ff bff0 	b.w	801f66c <__sinit_lock_release>
 801f68c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f690:	6523      	str	r3, [r4, #80]	; 0x50
 801f692:	4b13      	ldr	r3, [pc, #76]	; (801f6e0 <__sinit+0x68>)
 801f694:	4a13      	ldr	r2, [pc, #76]	; (801f6e4 <__sinit+0x6c>)
 801f696:	681b      	ldr	r3, [r3, #0]
 801f698:	62a2      	str	r2, [r4, #40]	; 0x28
 801f69a:	42a3      	cmp	r3, r4
 801f69c:	bf04      	itt	eq
 801f69e:	2301      	moveq	r3, #1
 801f6a0:	61a3      	streq	r3, [r4, #24]
 801f6a2:	4620      	mov	r0, r4
 801f6a4:	f000 f820 	bl	801f6e8 <__sfp>
 801f6a8:	6060      	str	r0, [r4, #4]
 801f6aa:	4620      	mov	r0, r4
 801f6ac:	f000 f81c 	bl	801f6e8 <__sfp>
 801f6b0:	60a0      	str	r0, [r4, #8]
 801f6b2:	4620      	mov	r0, r4
 801f6b4:	f000 f818 	bl	801f6e8 <__sfp>
 801f6b8:	2200      	movs	r2, #0
 801f6ba:	60e0      	str	r0, [r4, #12]
 801f6bc:	2104      	movs	r1, #4
 801f6be:	6860      	ldr	r0, [r4, #4]
 801f6c0:	f7ff ff82 	bl	801f5c8 <std>
 801f6c4:	68a0      	ldr	r0, [r4, #8]
 801f6c6:	2201      	movs	r2, #1
 801f6c8:	2109      	movs	r1, #9
 801f6ca:	f7ff ff7d 	bl	801f5c8 <std>
 801f6ce:	68e0      	ldr	r0, [r4, #12]
 801f6d0:	2202      	movs	r2, #2
 801f6d2:	2112      	movs	r1, #18
 801f6d4:	f7ff ff78 	bl	801f5c8 <std>
 801f6d8:	2301      	movs	r3, #1
 801f6da:	61a3      	str	r3, [r4, #24]
 801f6dc:	e7d2      	b.n	801f684 <__sinit+0xc>
 801f6de:	bf00      	nop
 801f6e0:	08028a24 	.word	0x08028a24
 801f6e4:	0801f611 	.word	0x0801f611

0801f6e8 <__sfp>:
 801f6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6ea:	4607      	mov	r7, r0
 801f6ec:	f7ff ffac 	bl	801f648 <__sfp_lock_acquire>
 801f6f0:	4b1e      	ldr	r3, [pc, #120]	; (801f76c <__sfp+0x84>)
 801f6f2:	681e      	ldr	r6, [r3, #0]
 801f6f4:	69b3      	ldr	r3, [r6, #24]
 801f6f6:	b913      	cbnz	r3, 801f6fe <__sfp+0x16>
 801f6f8:	4630      	mov	r0, r6
 801f6fa:	f7ff ffbd 	bl	801f678 <__sinit>
 801f6fe:	3648      	adds	r6, #72	; 0x48
 801f700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f704:	3b01      	subs	r3, #1
 801f706:	d503      	bpl.n	801f710 <__sfp+0x28>
 801f708:	6833      	ldr	r3, [r6, #0]
 801f70a:	b30b      	cbz	r3, 801f750 <__sfp+0x68>
 801f70c:	6836      	ldr	r6, [r6, #0]
 801f70e:	e7f7      	b.n	801f700 <__sfp+0x18>
 801f710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f714:	b9d5      	cbnz	r5, 801f74c <__sfp+0x64>
 801f716:	4b16      	ldr	r3, [pc, #88]	; (801f770 <__sfp+0x88>)
 801f718:	60e3      	str	r3, [r4, #12]
 801f71a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f71e:	6665      	str	r5, [r4, #100]	; 0x64
 801f720:	f000 fb5a 	bl	801fdd8 <__retarget_lock_init_recursive>
 801f724:	f7ff ff96 	bl	801f654 <__sfp_lock_release>
 801f728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f72c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f730:	6025      	str	r5, [r4, #0]
 801f732:	61a5      	str	r5, [r4, #24]
 801f734:	2208      	movs	r2, #8
 801f736:	4629      	mov	r1, r5
 801f738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f73c:	f000 fbd4 	bl	801fee8 <memset>
 801f740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f748:	4620      	mov	r0, r4
 801f74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f74c:	3468      	adds	r4, #104	; 0x68
 801f74e:	e7d9      	b.n	801f704 <__sfp+0x1c>
 801f750:	2104      	movs	r1, #4
 801f752:	4638      	mov	r0, r7
 801f754:	f7ff ff62 	bl	801f61c <__sfmoreglue>
 801f758:	4604      	mov	r4, r0
 801f75a:	6030      	str	r0, [r6, #0]
 801f75c:	2800      	cmp	r0, #0
 801f75e:	d1d5      	bne.n	801f70c <__sfp+0x24>
 801f760:	f7ff ff78 	bl	801f654 <__sfp_lock_release>
 801f764:	230c      	movs	r3, #12
 801f766:	603b      	str	r3, [r7, #0]
 801f768:	e7ee      	b.n	801f748 <__sfp+0x60>
 801f76a:	bf00      	nop
 801f76c:	08028a24 	.word	0x08028a24
 801f770:	ffff0001 	.word	0xffff0001

0801f774 <_fopen_r>:
 801f774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f776:	460f      	mov	r7, r1
 801f778:	4611      	mov	r1, r2
 801f77a:	aa01      	add	r2, sp, #4
 801f77c:	4605      	mov	r5, r0
 801f77e:	f001 ff9f 	bl	80216c0 <__sflags>
 801f782:	4606      	mov	r6, r0
 801f784:	b918      	cbnz	r0, 801f78e <_fopen_r+0x1a>
 801f786:	2400      	movs	r4, #0
 801f788:	4620      	mov	r0, r4
 801f78a:	b003      	add	sp, #12
 801f78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f78e:	4628      	mov	r0, r5
 801f790:	f7ff ffaa 	bl	801f6e8 <__sfp>
 801f794:	4604      	mov	r4, r0
 801f796:	2800      	cmp	r0, #0
 801f798:	d0f5      	beq.n	801f786 <_fopen_r+0x12>
 801f79a:	4639      	mov	r1, r7
 801f79c:	9a01      	ldr	r2, [sp, #4]
 801f79e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801f7a2:	4628      	mov	r0, r5
 801f7a4:	f000 fc62 	bl	802006c <_open_r>
 801f7a8:	1e07      	subs	r7, r0, #0
 801f7aa:	da09      	bge.n	801f7c0 <_fopen_r+0x4c>
 801f7ac:	2500      	movs	r5, #0
 801f7ae:	f7ff ff4b 	bl	801f648 <__sfp_lock_acquire>
 801f7b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7b4:	81a5      	strh	r5, [r4, #12]
 801f7b6:	f000 fb10 	bl	801fdda <__retarget_lock_close_recursive>
 801f7ba:	f7ff ff4b 	bl	801f654 <__sfp_lock_release>
 801f7be:	e7e2      	b.n	801f786 <_fopen_r+0x12>
 801f7c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f7c2:	07db      	lsls	r3, r3, #31
 801f7c4:	d405      	bmi.n	801f7d2 <_fopen_r+0x5e>
 801f7c6:	89a3      	ldrh	r3, [r4, #12]
 801f7c8:	0598      	lsls	r0, r3, #22
 801f7ca:	d402      	bmi.n	801f7d2 <_fopen_r+0x5e>
 801f7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7ce:	f000 fb06 	bl	801fdde <__retarget_lock_acquire_recursive>
 801f7d2:	4b0e      	ldr	r3, [pc, #56]	; (801f80c <_fopen_r+0x98>)
 801f7d4:	6263      	str	r3, [r4, #36]	; 0x24
 801f7d6:	4b0e      	ldr	r3, [pc, #56]	; (801f810 <_fopen_r+0x9c>)
 801f7d8:	62a3      	str	r3, [r4, #40]	; 0x28
 801f7da:	4b0e      	ldr	r3, [pc, #56]	; (801f814 <_fopen_r+0xa0>)
 801f7dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f7de:	05f1      	lsls	r1, r6, #23
 801f7e0:	4b0d      	ldr	r3, [pc, #52]	; (801f818 <_fopen_r+0xa4>)
 801f7e2:	81e7      	strh	r7, [r4, #14]
 801f7e4:	81a6      	strh	r6, [r4, #12]
 801f7e6:	6224      	str	r4, [r4, #32]
 801f7e8:	6323      	str	r3, [r4, #48]	; 0x30
 801f7ea:	d505      	bpl.n	801f7f8 <_fopen_r+0x84>
 801f7ec:	2302      	movs	r3, #2
 801f7ee:	2200      	movs	r2, #0
 801f7f0:	4621      	mov	r1, r4
 801f7f2:	4628      	mov	r0, r5
 801f7f4:	f000 f888 	bl	801f908 <_fseek_r>
 801f7f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f7fa:	07da      	lsls	r2, r3, #31
 801f7fc:	d4c4      	bmi.n	801f788 <_fopen_r+0x14>
 801f7fe:	89a3      	ldrh	r3, [r4, #12]
 801f800:	059b      	lsls	r3, r3, #22
 801f802:	d4c1      	bmi.n	801f788 <_fopen_r+0x14>
 801f804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f806:	f000 faec 	bl	801fde2 <__retarget_lock_release_recursive>
 801f80a:	e7bd      	b.n	801f788 <_fopen_r+0x14>
 801f80c:	08020291 	.word	0x08020291
 801f810:	080202b7 	.word	0x080202b7
 801f814:	080202ef 	.word	0x080202ef
 801f818:	08020313 	.word	0x08020313

0801f81c <fopen>:
 801f81c:	4b02      	ldr	r3, [pc, #8]	; (801f828 <fopen+0xc>)
 801f81e:	460a      	mov	r2, r1
 801f820:	4601      	mov	r1, r0
 801f822:	6818      	ldr	r0, [r3, #0]
 801f824:	f7ff bfa6 	b.w	801f774 <_fopen_r>
 801f828:	20000108 	.word	0x20000108

0801f82c <_fputs_r>:
 801f82c:	b570      	push	{r4, r5, r6, lr}
 801f82e:	460e      	mov	r6, r1
 801f830:	4614      	mov	r4, r2
 801f832:	4605      	mov	r5, r0
 801f834:	b118      	cbz	r0, 801f83e <_fputs_r+0x12>
 801f836:	6983      	ldr	r3, [r0, #24]
 801f838:	b90b      	cbnz	r3, 801f83e <_fputs_r+0x12>
 801f83a:	f7ff ff1d 	bl	801f678 <__sinit>
 801f83e:	4b2b      	ldr	r3, [pc, #172]	; (801f8ec <_fputs_r+0xc0>)
 801f840:	429c      	cmp	r4, r3
 801f842:	d11e      	bne.n	801f882 <_fputs_r+0x56>
 801f844:	686c      	ldr	r4, [r5, #4]
 801f846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f848:	07da      	lsls	r2, r3, #31
 801f84a:	d405      	bmi.n	801f858 <_fputs_r+0x2c>
 801f84c:	89a3      	ldrh	r3, [r4, #12]
 801f84e:	059b      	lsls	r3, r3, #22
 801f850:	d402      	bmi.n	801f858 <_fputs_r+0x2c>
 801f852:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f854:	f000 fac3 	bl	801fdde <__retarget_lock_acquire_recursive>
 801f858:	89a3      	ldrh	r3, [r4, #12]
 801f85a:	0718      	lsls	r0, r3, #28
 801f85c:	d51b      	bpl.n	801f896 <_fputs_r+0x6a>
 801f85e:	6923      	ldr	r3, [r4, #16]
 801f860:	b1cb      	cbz	r3, 801f896 <_fputs_r+0x6a>
 801f862:	3e01      	subs	r6, #1
 801f864:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f868:	bb39      	cbnz	r1, 801f8ba <_fputs_r+0x8e>
 801f86a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801f86c:	f015 0501 	ands.w	r5, r5, #1
 801f870:	d139      	bne.n	801f8e6 <_fputs_r+0xba>
 801f872:	89a3      	ldrh	r3, [r4, #12]
 801f874:	0599      	lsls	r1, r3, #22
 801f876:	d402      	bmi.n	801f87e <_fputs_r+0x52>
 801f878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f87a:	f000 fab2 	bl	801fde2 <__retarget_lock_release_recursive>
 801f87e:	4628      	mov	r0, r5
 801f880:	bd70      	pop	{r4, r5, r6, pc}
 801f882:	4b1b      	ldr	r3, [pc, #108]	; (801f8f0 <_fputs_r+0xc4>)
 801f884:	429c      	cmp	r4, r3
 801f886:	d101      	bne.n	801f88c <_fputs_r+0x60>
 801f888:	68ac      	ldr	r4, [r5, #8]
 801f88a:	e7dc      	b.n	801f846 <_fputs_r+0x1a>
 801f88c:	4b19      	ldr	r3, [pc, #100]	; (801f8f4 <_fputs_r+0xc8>)
 801f88e:	429c      	cmp	r4, r3
 801f890:	bf08      	it	eq
 801f892:	68ec      	ldreq	r4, [r5, #12]
 801f894:	e7d7      	b.n	801f846 <_fputs_r+0x1a>
 801f896:	4621      	mov	r1, r4
 801f898:	4628      	mov	r0, r5
 801f89a:	f001 fe0f 	bl	80214bc <__swsetup_r>
 801f89e:	2800      	cmp	r0, #0
 801f8a0:	d0df      	beq.n	801f862 <_fputs_r+0x36>
 801f8a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f8a4:	07da      	lsls	r2, r3, #31
 801f8a6:	d405      	bmi.n	801f8b4 <_fputs_r+0x88>
 801f8a8:	89a3      	ldrh	r3, [r4, #12]
 801f8aa:	059b      	lsls	r3, r3, #22
 801f8ac:	d402      	bmi.n	801f8b4 <_fputs_r+0x88>
 801f8ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f8b0:	f000 fa97 	bl	801fde2 <__retarget_lock_release_recursive>
 801f8b4:	f04f 35ff 	mov.w	r5, #4294967295
 801f8b8:	e7e1      	b.n	801f87e <_fputs_r+0x52>
 801f8ba:	68a3      	ldr	r3, [r4, #8]
 801f8bc:	3b01      	subs	r3, #1
 801f8be:	2b00      	cmp	r3, #0
 801f8c0:	60a3      	str	r3, [r4, #8]
 801f8c2:	da04      	bge.n	801f8ce <_fputs_r+0xa2>
 801f8c4:	69a2      	ldr	r2, [r4, #24]
 801f8c6:	4293      	cmp	r3, r2
 801f8c8:	db06      	blt.n	801f8d8 <_fputs_r+0xac>
 801f8ca:	290a      	cmp	r1, #10
 801f8cc:	d004      	beq.n	801f8d8 <_fputs_r+0xac>
 801f8ce:	6823      	ldr	r3, [r4, #0]
 801f8d0:	1c5a      	adds	r2, r3, #1
 801f8d2:	6022      	str	r2, [r4, #0]
 801f8d4:	7019      	strb	r1, [r3, #0]
 801f8d6:	e7c5      	b.n	801f864 <_fputs_r+0x38>
 801f8d8:	4622      	mov	r2, r4
 801f8da:	4628      	mov	r0, r5
 801f8dc:	f001 fd8a 	bl	80213f4 <__swbuf_r>
 801f8e0:	3001      	adds	r0, #1
 801f8e2:	d1bf      	bne.n	801f864 <_fputs_r+0x38>
 801f8e4:	e7dd      	b.n	801f8a2 <_fputs_r+0x76>
 801f8e6:	460d      	mov	r5, r1
 801f8e8:	e7c9      	b.n	801f87e <_fputs_r+0x52>
 801f8ea:	bf00      	nop
 801f8ec:	080289e4 	.word	0x080289e4
 801f8f0:	08028a04 	.word	0x08028a04
 801f8f4:	080289c4 	.word	0x080289c4

0801f8f8 <fputs>:
 801f8f8:	4b02      	ldr	r3, [pc, #8]	; (801f904 <fputs+0xc>)
 801f8fa:	460a      	mov	r2, r1
 801f8fc:	4601      	mov	r1, r0
 801f8fe:	6818      	ldr	r0, [r3, #0]
 801f900:	f7ff bf94 	b.w	801f82c <_fputs_r>
 801f904:	20000108 	.word	0x20000108

0801f908 <_fseek_r>:
 801f908:	f000 b800 	b.w	801f90c <_fseeko_r>

0801f90c <_fseeko_r>:
 801f90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f910:	460c      	mov	r4, r1
 801f912:	4617      	mov	r7, r2
 801f914:	461e      	mov	r6, r3
 801f916:	4605      	mov	r5, r0
 801f918:	b118      	cbz	r0, 801f922 <_fseeko_r+0x16>
 801f91a:	6983      	ldr	r3, [r0, #24]
 801f91c:	b90b      	cbnz	r3, 801f922 <_fseeko_r+0x16>
 801f91e:	f7ff feab 	bl	801f678 <__sinit>
 801f922:	4b44      	ldr	r3, [pc, #272]	; (801fa34 <_fseeko_r+0x128>)
 801f924:	429c      	cmp	r4, r3
 801f926:	d122      	bne.n	801f96e <_fseeko_r+0x62>
 801f928:	686c      	ldr	r4, [r5, #4]
 801f92a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f92c:	07d9      	lsls	r1, r3, #31
 801f92e:	d405      	bmi.n	801f93c <_fseeko_r+0x30>
 801f930:	89a3      	ldrh	r3, [r4, #12]
 801f932:	059a      	lsls	r2, r3, #22
 801f934:	d402      	bmi.n	801f93c <_fseeko_r+0x30>
 801f936:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f938:	f000 fa51 	bl	801fdde <__retarget_lock_acquire_recursive>
 801f93c:	89a3      	ldrh	r3, [r4, #12]
 801f93e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801f942:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801f946:	d103      	bne.n	801f950 <_fseeko_r+0x44>
 801f948:	4621      	mov	r1, r4
 801f94a:	4628      	mov	r0, r5
 801f94c:	f7ff fdee 	bl	801f52c <_fflush_r>
 801f950:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801f954:	f1b8 0f00 	cmp.w	r8, #0
 801f958:	d113      	bne.n	801f982 <_fseeko_r+0x76>
 801f95a:	231d      	movs	r3, #29
 801f95c:	602b      	str	r3, [r5, #0]
 801f95e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f960:	07d9      	lsls	r1, r3, #31
 801f962:	d55d      	bpl.n	801fa20 <_fseeko_r+0x114>
 801f964:	f04f 36ff 	mov.w	r6, #4294967295
 801f968:	4630      	mov	r0, r6
 801f96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f96e:	4b32      	ldr	r3, [pc, #200]	; (801fa38 <_fseeko_r+0x12c>)
 801f970:	429c      	cmp	r4, r3
 801f972:	d101      	bne.n	801f978 <_fseeko_r+0x6c>
 801f974:	68ac      	ldr	r4, [r5, #8]
 801f976:	e7d8      	b.n	801f92a <_fseeko_r+0x1e>
 801f978:	4b30      	ldr	r3, [pc, #192]	; (801fa3c <_fseeko_r+0x130>)
 801f97a:	429c      	cmp	r4, r3
 801f97c:	bf08      	it	eq
 801f97e:	68ec      	ldreq	r4, [r5, #12]
 801f980:	e7d3      	b.n	801f92a <_fseeko_r+0x1e>
 801f982:	2e01      	cmp	r6, #1
 801f984:	d036      	beq.n	801f9f4 <_fseeko_r+0xe8>
 801f986:	f036 0302 	bics.w	r3, r6, #2
 801f98a:	d147      	bne.n	801fa1c <_fseeko_r+0x110>
 801f98c:	6923      	ldr	r3, [r4, #16]
 801f98e:	b91b      	cbnz	r3, 801f998 <_fseeko_r+0x8c>
 801f990:	4621      	mov	r1, r4
 801f992:	4628      	mov	r0, r5
 801f994:	f000 fa4a 	bl	801fe2c <__smakebuf_r>
 801f998:	4621      	mov	r1, r4
 801f99a:	4628      	mov	r0, r5
 801f99c:	f7ff fdc6 	bl	801f52c <_fflush_r>
 801f9a0:	2800      	cmp	r0, #0
 801f9a2:	d1dc      	bne.n	801f95e <_fseeko_r+0x52>
 801f9a4:	6a21      	ldr	r1, [r4, #32]
 801f9a6:	4633      	mov	r3, r6
 801f9a8:	463a      	mov	r2, r7
 801f9aa:	4628      	mov	r0, r5
 801f9ac:	47c0      	blx	r8
 801f9ae:	3001      	adds	r0, #1
 801f9b0:	d0d5      	beq.n	801f95e <_fseeko_r+0x52>
 801f9b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f9b4:	b141      	cbz	r1, 801f9c8 <_fseeko_r+0xbc>
 801f9b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f9ba:	4299      	cmp	r1, r3
 801f9bc:	d002      	beq.n	801f9c4 <_fseeko_r+0xb8>
 801f9be:	4628      	mov	r0, r5
 801f9c0:	f000 faaa 	bl	801ff18 <_free_r>
 801f9c4:	2300      	movs	r3, #0
 801f9c6:	6363      	str	r3, [r4, #52]	; 0x34
 801f9c8:	6923      	ldr	r3, [r4, #16]
 801f9ca:	6023      	str	r3, [r4, #0]
 801f9cc:	89a3      	ldrh	r3, [r4, #12]
 801f9ce:	2500      	movs	r5, #0
 801f9d0:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801f9d4:	6065      	str	r5, [r4, #4]
 801f9d6:	81a3      	strh	r3, [r4, #12]
 801f9d8:	2208      	movs	r2, #8
 801f9da:	4629      	mov	r1, r5
 801f9dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f9e0:	f000 fa82 	bl	801fee8 <memset>
 801f9e4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801f9e6:	f016 0601 	ands.w	r6, r6, #1
 801f9ea:	d120      	bne.n	801fa2e <_fseeko_r+0x122>
 801f9ec:	89a3      	ldrh	r3, [r4, #12]
 801f9ee:	059b      	lsls	r3, r3, #22
 801f9f0:	d4ba      	bmi.n	801f968 <_fseeko_r+0x5c>
 801f9f2:	e00c      	b.n	801fa0e <_fseeko_r+0x102>
 801f9f4:	4621      	mov	r1, r4
 801f9f6:	4628      	mov	r0, r5
 801f9f8:	f000 f822 	bl	801fa40 <_ftello_r>
 801f9fc:	1c43      	adds	r3, r0, #1
 801f9fe:	4606      	mov	r6, r0
 801fa00:	d109      	bne.n	801fa16 <_fseeko_r+0x10a>
 801fa02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa04:	07dd      	lsls	r5, r3, #31
 801fa06:	d4ad      	bmi.n	801f964 <_fseeko_r+0x58>
 801fa08:	89a3      	ldrh	r3, [r4, #12]
 801fa0a:	0598      	lsls	r0, r3, #22
 801fa0c:	d4aa      	bmi.n	801f964 <_fseeko_r+0x58>
 801fa0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa10:	f000 f9e7 	bl	801fde2 <__retarget_lock_release_recursive>
 801fa14:	e7a8      	b.n	801f968 <_fseeko_r+0x5c>
 801fa16:	4407      	add	r7, r0
 801fa18:	2600      	movs	r6, #0
 801fa1a:	e7b7      	b.n	801f98c <_fseeko_r+0x80>
 801fa1c:	2316      	movs	r3, #22
 801fa1e:	e79d      	b.n	801f95c <_fseeko_r+0x50>
 801fa20:	89a3      	ldrh	r3, [r4, #12]
 801fa22:	059a      	lsls	r2, r3, #22
 801fa24:	d49e      	bmi.n	801f964 <_fseeko_r+0x58>
 801fa26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa28:	f000 f9db 	bl	801fde2 <__retarget_lock_release_recursive>
 801fa2c:	e79a      	b.n	801f964 <_fseeko_r+0x58>
 801fa2e:	462e      	mov	r6, r5
 801fa30:	e79a      	b.n	801f968 <_fseeko_r+0x5c>
 801fa32:	bf00      	nop
 801fa34:	080289e4 	.word	0x080289e4
 801fa38:	08028a04 	.word	0x08028a04
 801fa3c:	080289c4 	.word	0x080289c4

0801fa40 <_ftello_r>:
 801fa40:	b570      	push	{r4, r5, r6, lr}
 801fa42:	460c      	mov	r4, r1
 801fa44:	4605      	mov	r5, r0
 801fa46:	b118      	cbz	r0, 801fa50 <_ftello_r+0x10>
 801fa48:	6983      	ldr	r3, [r0, #24]
 801fa4a:	b90b      	cbnz	r3, 801fa50 <_ftello_r+0x10>
 801fa4c:	f7ff fe14 	bl	801f678 <__sinit>
 801fa50:	4b32      	ldr	r3, [pc, #200]	; (801fb1c <_ftello_r+0xdc>)
 801fa52:	429c      	cmp	r4, r3
 801fa54:	d114      	bne.n	801fa80 <_ftello_r+0x40>
 801fa56:	686c      	ldr	r4, [r5, #4]
 801fa58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa5a:	07da      	lsls	r2, r3, #31
 801fa5c:	d405      	bmi.n	801fa6a <_ftello_r+0x2a>
 801fa5e:	89a3      	ldrh	r3, [r4, #12]
 801fa60:	059b      	lsls	r3, r3, #22
 801fa62:	d402      	bmi.n	801fa6a <_ftello_r+0x2a>
 801fa64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa66:	f000 f9ba 	bl	801fdde <__retarget_lock_acquire_recursive>
 801fa6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fa6c:	b9ce      	cbnz	r6, 801faa2 <_ftello_r+0x62>
 801fa6e:	231d      	movs	r3, #29
 801fa70:	602b      	str	r3, [r5, #0]
 801fa72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fa74:	07de      	lsls	r6, r3, #31
 801fa76:	d50d      	bpl.n	801fa94 <_ftello_r+0x54>
 801fa78:	f04f 35ff 	mov.w	r5, #4294967295
 801fa7c:	4628      	mov	r0, r5
 801fa7e:	bd70      	pop	{r4, r5, r6, pc}
 801fa80:	4b27      	ldr	r3, [pc, #156]	; (801fb20 <_ftello_r+0xe0>)
 801fa82:	429c      	cmp	r4, r3
 801fa84:	d101      	bne.n	801fa8a <_ftello_r+0x4a>
 801fa86:	68ac      	ldr	r4, [r5, #8]
 801fa88:	e7e6      	b.n	801fa58 <_ftello_r+0x18>
 801fa8a:	4b26      	ldr	r3, [pc, #152]	; (801fb24 <_ftello_r+0xe4>)
 801fa8c:	429c      	cmp	r4, r3
 801fa8e:	bf08      	it	eq
 801fa90:	68ec      	ldreq	r4, [r5, #12]
 801fa92:	e7e1      	b.n	801fa58 <_ftello_r+0x18>
 801fa94:	89a3      	ldrh	r3, [r4, #12]
 801fa96:	059d      	lsls	r5, r3, #22
 801fa98:	d4ee      	bmi.n	801fa78 <_ftello_r+0x38>
 801fa9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa9c:	f000 f9a1 	bl	801fde2 <__retarget_lock_release_recursive>
 801faa0:	e7ea      	b.n	801fa78 <_ftello_r+0x38>
 801faa2:	89a2      	ldrh	r2, [r4, #12]
 801faa4:	f002 030c 	and.w	r3, r2, #12
 801faa8:	2b08      	cmp	r3, #8
 801faaa:	d119      	bne.n	801fae0 <_ftello_r+0xa0>
 801faac:	6823      	ldr	r3, [r4, #0]
 801faae:	b1bb      	cbz	r3, 801fae0 <_ftello_r+0xa0>
 801fab0:	6921      	ldr	r1, [r4, #16]
 801fab2:	1a5b      	subs	r3, r3, r1
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	dd13      	ble.n	801fae0 <_ftello_r+0xa0>
 801fab8:	05d0      	lsls	r0, r2, #23
 801faba:	d511      	bpl.n	801fae0 <_ftello_r+0xa0>
 801fabc:	2302      	movs	r3, #2
 801fabe:	2200      	movs	r2, #0
 801fac0:	6a21      	ldr	r1, [r4, #32]
 801fac2:	4628      	mov	r0, r5
 801fac4:	47b0      	blx	r6
 801fac6:	1c41      	adds	r1, r0, #1
 801fac8:	4605      	mov	r5, r0
 801faca:	d10d      	bne.n	801fae8 <_ftello_r+0xa8>
 801facc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801face:	07da      	lsls	r2, r3, #31
 801fad0:	d4d2      	bmi.n	801fa78 <_ftello_r+0x38>
 801fad2:	89a3      	ldrh	r3, [r4, #12]
 801fad4:	059b      	lsls	r3, r3, #22
 801fad6:	d4cf      	bmi.n	801fa78 <_ftello_r+0x38>
 801fad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fada:	f000 f982 	bl	801fde2 <__retarget_lock_release_recursive>
 801fade:	e7cd      	b.n	801fa7c <_ftello_r+0x3c>
 801fae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fae4:	d00f      	beq.n	801fb06 <_ftello_r+0xc6>
 801fae6:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801fae8:	89a2      	ldrh	r2, [r4, #12]
 801faea:	0756      	lsls	r6, r2, #29
 801faec:	d50d      	bpl.n	801fb0a <_ftello_r+0xca>
 801faee:	6863      	ldr	r3, [r4, #4]
 801faf0:	1aed      	subs	r5, r5, r3
 801faf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801faf4:	b10b      	cbz	r3, 801fafa <_ftello_r+0xba>
 801faf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801faf8:	1aed      	subs	r5, r5, r3
 801fafa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fafc:	07d9      	lsls	r1, r3, #31
 801fafe:	d4bd      	bmi.n	801fa7c <_ftello_r+0x3c>
 801fb00:	0593      	lsls	r3, r2, #22
 801fb02:	d4bb      	bmi.n	801fa7c <_ftello_r+0x3c>
 801fb04:	e7e8      	b.n	801fad8 <_ftello_r+0x98>
 801fb06:	2301      	movs	r3, #1
 801fb08:	e7da      	b.n	801fac0 <_ftello_r+0x80>
 801fb0a:	0710      	lsls	r0, r2, #28
 801fb0c:	d5f5      	bpl.n	801fafa <_ftello_r+0xba>
 801fb0e:	6823      	ldr	r3, [r4, #0]
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d0f2      	beq.n	801fafa <_ftello_r+0xba>
 801fb14:	6921      	ldr	r1, [r4, #16]
 801fb16:	1a5b      	subs	r3, r3, r1
 801fb18:	441d      	add	r5, r3
 801fb1a:	e7ee      	b.n	801fafa <_ftello_r+0xba>
 801fb1c:	080289e4 	.word	0x080289e4
 801fb20:	08028a04 	.word	0x08028a04
 801fb24:	080289c4 	.word	0x080289c4

0801fb28 <_fwalk_reent>:
 801fb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb2c:	4606      	mov	r6, r0
 801fb2e:	4688      	mov	r8, r1
 801fb30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fb34:	2700      	movs	r7, #0
 801fb36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fb3a:	f1b9 0901 	subs.w	r9, r9, #1
 801fb3e:	d505      	bpl.n	801fb4c <_fwalk_reent+0x24>
 801fb40:	6824      	ldr	r4, [r4, #0]
 801fb42:	2c00      	cmp	r4, #0
 801fb44:	d1f7      	bne.n	801fb36 <_fwalk_reent+0xe>
 801fb46:	4638      	mov	r0, r7
 801fb48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb4c:	89ab      	ldrh	r3, [r5, #12]
 801fb4e:	2b01      	cmp	r3, #1
 801fb50:	d907      	bls.n	801fb62 <_fwalk_reent+0x3a>
 801fb52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fb56:	3301      	adds	r3, #1
 801fb58:	d003      	beq.n	801fb62 <_fwalk_reent+0x3a>
 801fb5a:	4629      	mov	r1, r5
 801fb5c:	4630      	mov	r0, r6
 801fb5e:	47c0      	blx	r8
 801fb60:	4307      	orrs	r7, r0
 801fb62:	3568      	adds	r5, #104	; 0x68
 801fb64:	e7e9      	b.n	801fb3a <_fwalk_reent+0x12>
	...

0801fb68 <__libc_init_array>:
 801fb68:	b570      	push	{r4, r5, r6, lr}
 801fb6a:	4d0d      	ldr	r5, [pc, #52]	; (801fba0 <__libc_init_array+0x38>)
 801fb6c:	4c0d      	ldr	r4, [pc, #52]	; (801fba4 <__libc_init_array+0x3c>)
 801fb6e:	1b64      	subs	r4, r4, r5
 801fb70:	10a4      	asrs	r4, r4, #2
 801fb72:	2600      	movs	r6, #0
 801fb74:	42a6      	cmp	r6, r4
 801fb76:	d109      	bne.n	801fb8c <__libc_init_array+0x24>
 801fb78:	4d0b      	ldr	r5, [pc, #44]	; (801fba8 <__libc_init_array+0x40>)
 801fb7a:	4c0c      	ldr	r4, [pc, #48]	; (801fbac <__libc_init_array+0x44>)
 801fb7c:	f003 f8cc 	bl	8022d18 <_init>
 801fb80:	1b64      	subs	r4, r4, r5
 801fb82:	10a4      	asrs	r4, r4, #2
 801fb84:	2600      	movs	r6, #0
 801fb86:	42a6      	cmp	r6, r4
 801fb88:	d105      	bne.n	801fb96 <__libc_init_array+0x2e>
 801fb8a:	bd70      	pop	{r4, r5, r6, pc}
 801fb8c:	f855 3b04 	ldr.w	r3, [r5], #4
 801fb90:	4798      	blx	r3
 801fb92:	3601      	adds	r6, #1
 801fb94:	e7ee      	b.n	801fb74 <__libc_init_array+0xc>
 801fb96:	f855 3b04 	ldr.w	r3, [r5], #4
 801fb9a:	4798      	blx	r3
 801fb9c:	3601      	adds	r6, #1
 801fb9e:	e7f2      	b.n	801fb86 <__libc_init_array+0x1e>
 801fba0:	08028fbc 	.word	0x08028fbc
 801fba4:	08028fbc 	.word	0x08028fbc
 801fba8:	08028fbc 	.word	0x08028fbc
 801fbac:	08028fcc 	.word	0x08028fcc

0801fbb0 <localtime>:
 801fbb0:	b538      	push	{r3, r4, r5, lr}
 801fbb2:	4b0b      	ldr	r3, [pc, #44]	; (801fbe0 <localtime+0x30>)
 801fbb4:	681d      	ldr	r5, [r3, #0]
 801fbb6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801fbb8:	4604      	mov	r4, r0
 801fbba:	b953      	cbnz	r3, 801fbd2 <localtime+0x22>
 801fbbc:	2024      	movs	r0, #36	; 0x24
 801fbbe:	f000 f975 	bl	801feac <malloc>
 801fbc2:	4602      	mov	r2, r0
 801fbc4:	63e8      	str	r0, [r5, #60]	; 0x3c
 801fbc6:	b920      	cbnz	r0, 801fbd2 <localtime+0x22>
 801fbc8:	4b06      	ldr	r3, [pc, #24]	; (801fbe4 <localtime+0x34>)
 801fbca:	4807      	ldr	r0, [pc, #28]	; (801fbe8 <localtime+0x38>)
 801fbcc:	2132      	movs	r1, #50	; 0x32
 801fbce:	f001 fd49 	bl	8021664 <__assert_func>
 801fbd2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801fbd4:	4620      	mov	r0, r4
 801fbd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fbda:	f000 b807 	b.w	801fbec <localtime_r>
 801fbde:	bf00      	nop
 801fbe0:	20000108 	.word	0x20000108
 801fbe4:	08028a28 	.word	0x08028a28
 801fbe8:	08028a3f 	.word	0x08028a3f

0801fbec <localtime_r>:
 801fbec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801fbf0:	4607      	mov	r7, r0
 801fbf2:	9101      	str	r1, [sp, #4]
 801fbf4:	f001 fe00 	bl	80217f8 <__gettzinfo>
 801fbf8:	9901      	ldr	r1, [sp, #4]
 801fbfa:	4680      	mov	r8, r0
 801fbfc:	4638      	mov	r0, r7
 801fbfe:	f001 fdff 	bl	8021800 <gmtime_r>
 801fc02:	6943      	ldr	r3, [r0, #20]
 801fc04:	079a      	lsls	r2, r3, #30
 801fc06:	4604      	mov	r4, r0
 801fc08:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801fc0c:	d105      	bne.n	801fc1a <localtime_r+0x2e>
 801fc0e:	2264      	movs	r2, #100	; 0x64
 801fc10:	fb96 f3f2 	sdiv	r3, r6, r2
 801fc14:	fb02 6313 	mls	r3, r2, r3, r6
 801fc18:	bb7b      	cbnz	r3, 801fc7a <localtime_r+0x8e>
 801fc1a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801fc1e:	fb96 f5f3 	sdiv	r5, r6, r3
 801fc22:	fb03 6515 	mls	r5, r3, r5, r6
 801fc26:	fab5 f585 	clz	r5, r5
 801fc2a:	096d      	lsrs	r5, r5, #5
 801fc2c:	4b68      	ldr	r3, [pc, #416]	; (801fdd0 <localtime_r+0x1e4>)
 801fc2e:	2230      	movs	r2, #48	; 0x30
 801fc30:	fb02 3505 	mla	r5, r2, r5, r3
 801fc34:	f001 fa16 	bl	8021064 <__tz_lock>
 801fc38:	f001 fa20 	bl	802107c <_tzset_unlocked>
 801fc3c:	4b65      	ldr	r3, [pc, #404]	; (801fdd4 <localtime_r+0x1e8>)
 801fc3e:	681b      	ldr	r3, [r3, #0]
 801fc40:	b353      	cbz	r3, 801fc98 <localtime_r+0xac>
 801fc42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fc46:	42b3      	cmp	r3, r6
 801fc48:	d119      	bne.n	801fc7e <localtime_r+0x92>
 801fc4a:	f8d8 1000 	ldr.w	r1, [r8]
 801fc4e:	e9d7 6700 	ldrd	r6, r7, [r7]
 801fc52:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801fc56:	b9d1      	cbnz	r1, 801fc8e <localtime_r+0xa2>
 801fc58:	4296      	cmp	r6, r2
 801fc5a:	eb77 0303 	sbcs.w	r3, r7, r3
 801fc5e:	da23      	bge.n	801fca8 <localtime_r+0xbc>
 801fc60:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801fc64:	4296      	cmp	r6, r2
 801fc66:	eb77 0303 	sbcs.w	r3, r7, r3
 801fc6a:	bfb4      	ite	lt
 801fc6c:	2301      	movlt	r3, #1
 801fc6e:	2300      	movge	r3, #0
 801fc70:	6223      	str	r3, [r4, #32]
 801fc72:	db1b      	blt.n	801fcac <localtime_r+0xc0>
 801fc74:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801fc78:	e01a      	b.n	801fcb0 <localtime_r+0xc4>
 801fc7a:	2501      	movs	r5, #1
 801fc7c:	e7d6      	b.n	801fc2c <localtime_r+0x40>
 801fc7e:	4630      	mov	r0, r6
 801fc80:	f001 f948 	bl	8020f14 <__tzcalc_limits>
 801fc84:	2800      	cmp	r0, #0
 801fc86:	d1e0      	bne.n	801fc4a <localtime_r+0x5e>
 801fc88:	f04f 33ff 	mov.w	r3, #4294967295
 801fc8c:	e004      	b.n	801fc98 <localtime_r+0xac>
 801fc8e:	4296      	cmp	r6, r2
 801fc90:	eb77 0303 	sbcs.w	r3, r7, r3
 801fc94:	da02      	bge.n	801fc9c <localtime_r+0xb0>
 801fc96:	2300      	movs	r3, #0
 801fc98:	6223      	str	r3, [r4, #32]
 801fc9a:	e7eb      	b.n	801fc74 <localtime_r+0x88>
 801fc9c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801fca0:	4296      	cmp	r6, r2
 801fca2:	eb77 0303 	sbcs.w	r3, r7, r3
 801fca6:	daf6      	bge.n	801fc96 <localtime_r+0xaa>
 801fca8:	2301      	movs	r3, #1
 801fcaa:	6223      	str	r3, [r4, #32]
 801fcac:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801fcb0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801fcb4:	203c      	movs	r0, #60	; 0x3c
 801fcb6:	fb91 f6f3 	sdiv	r6, r1, r3
 801fcba:	fb03 1316 	mls	r3, r3, r6, r1
 801fcbe:	6861      	ldr	r1, [r4, #4]
 801fcc0:	fb93 f2f0 	sdiv	r2, r3, r0
 801fcc4:	fb00 3012 	mls	r0, r0, r2, r3
 801fcc8:	6823      	ldr	r3, [r4, #0]
 801fcca:	1a89      	subs	r1, r1, r2
 801fccc:	68a2      	ldr	r2, [r4, #8]
 801fcce:	6061      	str	r1, [r4, #4]
 801fcd0:	1a1b      	subs	r3, r3, r0
 801fcd2:	1b92      	subs	r2, r2, r6
 801fcd4:	2b3b      	cmp	r3, #59	; 0x3b
 801fcd6:	6023      	str	r3, [r4, #0]
 801fcd8:	60a2      	str	r2, [r4, #8]
 801fcda:	dd35      	ble.n	801fd48 <localtime_r+0x15c>
 801fcdc:	3101      	adds	r1, #1
 801fcde:	6061      	str	r1, [r4, #4]
 801fce0:	3b3c      	subs	r3, #60	; 0x3c
 801fce2:	6023      	str	r3, [r4, #0]
 801fce4:	6863      	ldr	r3, [r4, #4]
 801fce6:	2b3b      	cmp	r3, #59	; 0x3b
 801fce8:	dd34      	ble.n	801fd54 <localtime_r+0x168>
 801fcea:	3201      	adds	r2, #1
 801fcec:	60a2      	str	r2, [r4, #8]
 801fcee:	3b3c      	subs	r3, #60	; 0x3c
 801fcf0:	6063      	str	r3, [r4, #4]
 801fcf2:	68a3      	ldr	r3, [r4, #8]
 801fcf4:	2b17      	cmp	r3, #23
 801fcf6:	dd33      	ble.n	801fd60 <localtime_r+0x174>
 801fcf8:	69e2      	ldr	r2, [r4, #28]
 801fcfa:	3201      	adds	r2, #1
 801fcfc:	61e2      	str	r2, [r4, #28]
 801fcfe:	69a2      	ldr	r2, [r4, #24]
 801fd00:	3201      	adds	r2, #1
 801fd02:	2a06      	cmp	r2, #6
 801fd04:	bfc8      	it	gt
 801fd06:	2200      	movgt	r2, #0
 801fd08:	61a2      	str	r2, [r4, #24]
 801fd0a:	68e2      	ldr	r2, [r4, #12]
 801fd0c:	3b18      	subs	r3, #24
 801fd0e:	3201      	adds	r2, #1
 801fd10:	60a3      	str	r3, [r4, #8]
 801fd12:	6923      	ldr	r3, [r4, #16]
 801fd14:	60e2      	str	r2, [r4, #12]
 801fd16:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801fd1a:	428a      	cmp	r2, r1
 801fd1c:	dd0e      	ble.n	801fd3c <localtime_r+0x150>
 801fd1e:	2b0b      	cmp	r3, #11
 801fd20:	eba2 0201 	sub.w	r2, r2, r1
 801fd24:	60e2      	str	r2, [r4, #12]
 801fd26:	f103 0201 	add.w	r2, r3, #1
 801fd2a:	bf09      	itett	eq
 801fd2c:	6963      	ldreq	r3, [r4, #20]
 801fd2e:	6122      	strne	r2, [r4, #16]
 801fd30:	2200      	moveq	r2, #0
 801fd32:	3301      	addeq	r3, #1
 801fd34:	bf02      	ittt	eq
 801fd36:	6122      	streq	r2, [r4, #16]
 801fd38:	6163      	streq	r3, [r4, #20]
 801fd3a:	61e2      	streq	r2, [r4, #28]
 801fd3c:	f001 f998 	bl	8021070 <__tz_unlock>
 801fd40:	4620      	mov	r0, r4
 801fd42:	b002      	add	sp, #8
 801fd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	dacb      	bge.n	801fce4 <localtime_r+0xf8>
 801fd4c:	3901      	subs	r1, #1
 801fd4e:	6061      	str	r1, [r4, #4]
 801fd50:	333c      	adds	r3, #60	; 0x3c
 801fd52:	e7c6      	b.n	801fce2 <localtime_r+0xf6>
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	dacc      	bge.n	801fcf2 <localtime_r+0x106>
 801fd58:	3a01      	subs	r2, #1
 801fd5a:	60a2      	str	r2, [r4, #8]
 801fd5c:	333c      	adds	r3, #60	; 0x3c
 801fd5e:	e7c7      	b.n	801fcf0 <localtime_r+0x104>
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	daeb      	bge.n	801fd3c <localtime_r+0x150>
 801fd64:	69e2      	ldr	r2, [r4, #28]
 801fd66:	3a01      	subs	r2, #1
 801fd68:	61e2      	str	r2, [r4, #28]
 801fd6a:	69a2      	ldr	r2, [r4, #24]
 801fd6c:	3a01      	subs	r2, #1
 801fd6e:	bf48      	it	mi
 801fd70:	2206      	movmi	r2, #6
 801fd72:	61a2      	str	r2, [r4, #24]
 801fd74:	68e2      	ldr	r2, [r4, #12]
 801fd76:	3318      	adds	r3, #24
 801fd78:	3a01      	subs	r2, #1
 801fd7a:	60e2      	str	r2, [r4, #12]
 801fd7c:	60a3      	str	r3, [r4, #8]
 801fd7e:	2a00      	cmp	r2, #0
 801fd80:	d1dc      	bne.n	801fd3c <localtime_r+0x150>
 801fd82:	6923      	ldr	r3, [r4, #16]
 801fd84:	3b01      	subs	r3, #1
 801fd86:	d405      	bmi.n	801fd94 <localtime_r+0x1a8>
 801fd88:	6123      	str	r3, [r4, #16]
 801fd8a:	6923      	ldr	r3, [r4, #16]
 801fd8c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fd90:	60e3      	str	r3, [r4, #12]
 801fd92:	e7d3      	b.n	801fd3c <localtime_r+0x150>
 801fd94:	230b      	movs	r3, #11
 801fd96:	6123      	str	r3, [r4, #16]
 801fd98:	6963      	ldr	r3, [r4, #20]
 801fd9a:	1e5a      	subs	r2, r3, #1
 801fd9c:	6162      	str	r2, [r4, #20]
 801fd9e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801fda2:	0793      	lsls	r3, r2, #30
 801fda4:	d105      	bne.n	801fdb2 <localtime_r+0x1c6>
 801fda6:	2164      	movs	r1, #100	; 0x64
 801fda8:	fb92 f3f1 	sdiv	r3, r2, r1
 801fdac:	fb01 2313 	mls	r3, r1, r3, r2
 801fdb0:	b963      	cbnz	r3, 801fdcc <localtime_r+0x1e0>
 801fdb2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801fdb6:	fb92 f3f1 	sdiv	r3, r2, r1
 801fdba:	fb01 2313 	mls	r3, r1, r3, r2
 801fdbe:	fab3 f383 	clz	r3, r3
 801fdc2:	095b      	lsrs	r3, r3, #5
 801fdc4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801fdc8:	61e3      	str	r3, [r4, #28]
 801fdca:	e7de      	b.n	801fd8a <localtime_r+0x19e>
 801fdcc:	2301      	movs	r3, #1
 801fdce:	e7f9      	b.n	801fdc4 <localtime_r+0x1d8>
 801fdd0:	08028aa0 	.word	0x08028aa0
 801fdd4:	20000e88 	.word	0x20000e88

0801fdd8 <__retarget_lock_init_recursive>:
 801fdd8:	4770      	bx	lr

0801fdda <__retarget_lock_close_recursive>:
 801fdda:	4770      	bx	lr

0801fddc <__retarget_lock_acquire>:
 801fddc:	4770      	bx	lr

0801fdde <__retarget_lock_acquire_recursive>:
 801fdde:	4770      	bx	lr

0801fde0 <__retarget_lock_release>:
 801fde0:	4770      	bx	lr

0801fde2 <__retarget_lock_release_recursive>:
 801fde2:	4770      	bx	lr

0801fde4 <__swhatbuf_r>:
 801fde4:	b570      	push	{r4, r5, r6, lr}
 801fde6:	460e      	mov	r6, r1
 801fde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fdec:	2900      	cmp	r1, #0
 801fdee:	b096      	sub	sp, #88	; 0x58
 801fdf0:	4614      	mov	r4, r2
 801fdf2:	461d      	mov	r5, r3
 801fdf4:	da07      	bge.n	801fe06 <__swhatbuf_r+0x22>
 801fdf6:	2300      	movs	r3, #0
 801fdf8:	602b      	str	r3, [r5, #0]
 801fdfa:	89b3      	ldrh	r3, [r6, #12]
 801fdfc:	061a      	lsls	r2, r3, #24
 801fdfe:	d410      	bmi.n	801fe22 <__swhatbuf_r+0x3e>
 801fe00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fe04:	e00e      	b.n	801fe24 <__swhatbuf_r+0x40>
 801fe06:	466a      	mov	r2, sp
 801fe08:	f001 fca2 	bl	8021750 <_fstat_r>
 801fe0c:	2800      	cmp	r0, #0
 801fe0e:	dbf2      	blt.n	801fdf6 <__swhatbuf_r+0x12>
 801fe10:	9a01      	ldr	r2, [sp, #4]
 801fe12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fe16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fe1a:	425a      	negs	r2, r3
 801fe1c:	415a      	adcs	r2, r3
 801fe1e:	602a      	str	r2, [r5, #0]
 801fe20:	e7ee      	b.n	801fe00 <__swhatbuf_r+0x1c>
 801fe22:	2340      	movs	r3, #64	; 0x40
 801fe24:	2000      	movs	r0, #0
 801fe26:	6023      	str	r3, [r4, #0]
 801fe28:	b016      	add	sp, #88	; 0x58
 801fe2a:	bd70      	pop	{r4, r5, r6, pc}

0801fe2c <__smakebuf_r>:
 801fe2c:	898b      	ldrh	r3, [r1, #12]
 801fe2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fe30:	079d      	lsls	r5, r3, #30
 801fe32:	4606      	mov	r6, r0
 801fe34:	460c      	mov	r4, r1
 801fe36:	d507      	bpl.n	801fe48 <__smakebuf_r+0x1c>
 801fe38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fe3c:	6023      	str	r3, [r4, #0]
 801fe3e:	6123      	str	r3, [r4, #16]
 801fe40:	2301      	movs	r3, #1
 801fe42:	6163      	str	r3, [r4, #20]
 801fe44:	b002      	add	sp, #8
 801fe46:	bd70      	pop	{r4, r5, r6, pc}
 801fe48:	ab01      	add	r3, sp, #4
 801fe4a:	466a      	mov	r2, sp
 801fe4c:	f7ff ffca 	bl	801fde4 <__swhatbuf_r>
 801fe50:	9900      	ldr	r1, [sp, #0]
 801fe52:	4605      	mov	r5, r0
 801fe54:	4630      	mov	r0, r6
 801fe56:	f000 f8af 	bl	801ffb8 <_malloc_r>
 801fe5a:	b948      	cbnz	r0, 801fe70 <__smakebuf_r+0x44>
 801fe5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fe60:	059a      	lsls	r2, r3, #22
 801fe62:	d4ef      	bmi.n	801fe44 <__smakebuf_r+0x18>
 801fe64:	f023 0303 	bic.w	r3, r3, #3
 801fe68:	f043 0302 	orr.w	r3, r3, #2
 801fe6c:	81a3      	strh	r3, [r4, #12]
 801fe6e:	e7e3      	b.n	801fe38 <__smakebuf_r+0xc>
 801fe70:	4b0d      	ldr	r3, [pc, #52]	; (801fea8 <__smakebuf_r+0x7c>)
 801fe72:	62b3      	str	r3, [r6, #40]	; 0x28
 801fe74:	89a3      	ldrh	r3, [r4, #12]
 801fe76:	6020      	str	r0, [r4, #0]
 801fe78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fe7c:	81a3      	strh	r3, [r4, #12]
 801fe7e:	9b00      	ldr	r3, [sp, #0]
 801fe80:	6163      	str	r3, [r4, #20]
 801fe82:	9b01      	ldr	r3, [sp, #4]
 801fe84:	6120      	str	r0, [r4, #16]
 801fe86:	b15b      	cbz	r3, 801fea0 <__smakebuf_r+0x74>
 801fe88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fe8c:	4630      	mov	r0, r6
 801fe8e:	f001 fd67 	bl	8021960 <_isatty_r>
 801fe92:	b128      	cbz	r0, 801fea0 <__smakebuf_r+0x74>
 801fe94:	89a3      	ldrh	r3, [r4, #12]
 801fe96:	f023 0303 	bic.w	r3, r3, #3
 801fe9a:	f043 0301 	orr.w	r3, r3, #1
 801fe9e:	81a3      	strh	r3, [r4, #12]
 801fea0:	89a0      	ldrh	r0, [r4, #12]
 801fea2:	4305      	orrs	r5, r0
 801fea4:	81a5      	strh	r5, [r4, #12]
 801fea6:	e7cd      	b.n	801fe44 <__smakebuf_r+0x18>
 801fea8:	0801f611 	.word	0x0801f611

0801feac <malloc>:
 801feac:	4b02      	ldr	r3, [pc, #8]	; (801feb8 <malloc+0xc>)
 801feae:	4601      	mov	r1, r0
 801feb0:	6818      	ldr	r0, [r3, #0]
 801feb2:	f000 b881 	b.w	801ffb8 <_malloc_r>
 801feb6:	bf00      	nop
 801feb8:	20000108 	.word	0x20000108

0801febc <free>:
 801febc:	4b02      	ldr	r3, [pc, #8]	; (801fec8 <free+0xc>)
 801febe:	4601      	mov	r1, r0
 801fec0:	6818      	ldr	r0, [r3, #0]
 801fec2:	f000 b829 	b.w	801ff18 <_free_r>
 801fec6:	bf00      	nop
 801fec8:	20000108 	.word	0x20000108

0801fecc <memcpy>:
 801fecc:	440a      	add	r2, r1
 801fece:	4291      	cmp	r1, r2
 801fed0:	f100 33ff 	add.w	r3, r0, #4294967295
 801fed4:	d100      	bne.n	801fed8 <memcpy+0xc>
 801fed6:	4770      	bx	lr
 801fed8:	b510      	push	{r4, lr}
 801feda:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fede:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fee2:	4291      	cmp	r1, r2
 801fee4:	d1f9      	bne.n	801feda <memcpy+0xe>
 801fee6:	bd10      	pop	{r4, pc}

0801fee8 <memset>:
 801fee8:	4402      	add	r2, r0
 801feea:	4603      	mov	r3, r0
 801feec:	4293      	cmp	r3, r2
 801feee:	d100      	bne.n	801fef2 <memset+0xa>
 801fef0:	4770      	bx	lr
 801fef2:	f803 1b01 	strb.w	r1, [r3], #1
 801fef6:	e7f9      	b.n	801feec <memset+0x4>

0801fef8 <_calloc_r>:
 801fef8:	b513      	push	{r0, r1, r4, lr}
 801fefa:	434a      	muls	r2, r1
 801fefc:	4611      	mov	r1, r2
 801fefe:	9201      	str	r2, [sp, #4]
 801ff00:	f000 f85a 	bl	801ffb8 <_malloc_r>
 801ff04:	4604      	mov	r4, r0
 801ff06:	b118      	cbz	r0, 801ff10 <_calloc_r+0x18>
 801ff08:	9a01      	ldr	r2, [sp, #4]
 801ff0a:	2100      	movs	r1, #0
 801ff0c:	f7ff ffec 	bl	801fee8 <memset>
 801ff10:	4620      	mov	r0, r4
 801ff12:	b002      	add	sp, #8
 801ff14:	bd10      	pop	{r4, pc}
	...

0801ff18 <_free_r>:
 801ff18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ff1a:	2900      	cmp	r1, #0
 801ff1c:	d048      	beq.n	801ffb0 <_free_r+0x98>
 801ff1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ff22:	9001      	str	r0, [sp, #4]
 801ff24:	2b00      	cmp	r3, #0
 801ff26:	f1a1 0404 	sub.w	r4, r1, #4
 801ff2a:	bfb8      	it	lt
 801ff2c:	18e4      	addlt	r4, r4, r3
 801ff2e:	f001 fd4f 	bl	80219d0 <__malloc_lock>
 801ff32:	4a20      	ldr	r2, [pc, #128]	; (801ffb4 <_free_r+0x9c>)
 801ff34:	9801      	ldr	r0, [sp, #4]
 801ff36:	6813      	ldr	r3, [r2, #0]
 801ff38:	4615      	mov	r5, r2
 801ff3a:	b933      	cbnz	r3, 801ff4a <_free_r+0x32>
 801ff3c:	6063      	str	r3, [r4, #4]
 801ff3e:	6014      	str	r4, [r2, #0]
 801ff40:	b003      	add	sp, #12
 801ff42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ff46:	f001 bd49 	b.w	80219dc <__malloc_unlock>
 801ff4a:	42a3      	cmp	r3, r4
 801ff4c:	d90b      	bls.n	801ff66 <_free_r+0x4e>
 801ff4e:	6821      	ldr	r1, [r4, #0]
 801ff50:	1862      	adds	r2, r4, r1
 801ff52:	4293      	cmp	r3, r2
 801ff54:	bf04      	itt	eq
 801ff56:	681a      	ldreq	r2, [r3, #0]
 801ff58:	685b      	ldreq	r3, [r3, #4]
 801ff5a:	6063      	str	r3, [r4, #4]
 801ff5c:	bf04      	itt	eq
 801ff5e:	1852      	addeq	r2, r2, r1
 801ff60:	6022      	streq	r2, [r4, #0]
 801ff62:	602c      	str	r4, [r5, #0]
 801ff64:	e7ec      	b.n	801ff40 <_free_r+0x28>
 801ff66:	461a      	mov	r2, r3
 801ff68:	685b      	ldr	r3, [r3, #4]
 801ff6a:	b10b      	cbz	r3, 801ff70 <_free_r+0x58>
 801ff6c:	42a3      	cmp	r3, r4
 801ff6e:	d9fa      	bls.n	801ff66 <_free_r+0x4e>
 801ff70:	6811      	ldr	r1, [r2, #0]
 801ff72:	1855      	adds	r5, r2, r1
 801ff74:	42a5      	cmp	r5, r4
 801ff76:	d10b      	bne.n	801ff90 <_free_r+0x78>
 801ff78:	6824      	ldr	r4, [r4, #0]
 801ff7a:	4421      	add	r1, r4
 801ff7c:	1854      	adds	r4, r2, r1
 801ff7e:	42a3      	cmp	r3, r4
 801ff80:	6011      	str	r1, [r2, #0]
 801ff82:	d1dd      	bne.n	801ff40 <_free_r+0x28>
 801ff84:	681c      	ldr	r4, [r3, #0]
 801ff86:	685b      	ldr	r3, [r3, #4]
 801ff88:	6053      	str	r3, [r2, #4]
 801ff8a:	4421      	add	r1, r4
 801ff8c:	6011      	str	r1, [r2, #0]
 801ff8e:	e7d7      	b.n	801ff40 <_free_r+0x28>
 801ff90:	d902      	bls.n	801ff98 <_free_r+0x80>
 801ff92:	230c      	movs	r3, #12
 801ff94:	6003      	str	r3, [r0, #0]
 801ff96:	e7d3      	b.n	801ff40 <_free_r+0x28>
 801ff98:	6825      	ldr	r5, [r4, #0]
 801ff9a:	1961      	adds	r1, r4, r5
 801ff9c:	428b      	cmp	r3, r1
 801ff9e:	bf04      	itt	eq
 801ffa0:	6819      	ldreq	r1, [r3, #0]
 801ffa2:	685b      	ldreq	r3, [r3, #4]
 801ffa4:	6063      	str	r3, [r4, #4]
 801ffa6:	bf04      	itt	eq
 801ffa8:	1949      	addeq	r1, r1, r5
 801ffaa:	6021      	streq	r1, [r4, #0]
 801ffac:	6054      	str	r4, [r2, #4]
 801ffae:	e7c7      	b.n	801ff40 <_free_r+0x28>
 801ffb0:	b003      	add	sp, #12
 801ffb2:	bd30      	pop	{r4, r5, pc}
 801ffb4:	20000e64 	.word	0x20000e64

0801ffb8 <_malloc_r>:
 801ffb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffba:	1ccd      	adds	r5, r1, #3
 801ffbc:	f025 0503 	bic.w	r5, r5, #3
 801ffc0:	3508      	adds	r5, #8
 801ffc2:	2d0c      	cmp	r5, #12
 801ffc4:	bf38      	it	cc
 801ffc6:	250c      	movcc	r5, #12
 801ffc8:	2d00      	cmp	r5, #0
 801ffca:	4606      	mov	r6, r0
 801ffcc:	db01      	blt.n	801ffd2 <_malloc_r+0x1a>
 801ffce:	42a9      	cmp	r1, r5
 801ffd0:	d903      	bls.n	801ffda <_malloc_r+0x22>
 801ffd2:	230c      	movs	r3, #12
 801ffd4:	6033      	str	r3, [r6, #0]
 801ffd6:	2000      	movs	r0, #0
 801ffd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ffda:	f001 fcf9 	bl	80219d0 <__malloc_lock>
 801ffde:	4921      	ldr	r1, [pc, #132]	; (8020064 <_malloc_r+0xac>)
 801ffe0:	680a      	ldr	r2, [r1, #0]
 801ffe2:	4614      	mov	r4, r2
 801ffe4:	b99c      	cbnz	r4, 802000e <_malloc_r+0x56>
 801ffe6:	4f20      	ldr	r7, [pc, #128]	; (8020068 <_malloc_r+0xb0>)
 801ffe8:	683b      	ldr	r3, [r7, #0]
 801ffea:	b923      	cbnz	r3, 801fff6 <_malloc_r+0x3e>
 801ffec:	4621      	mov	r1, r4
 801ffee:	4630      	mov	r0, r6
 801fff0:	f000 f8da 	bl	80201a8 <_sbrk_r>
 801fff4:	6038      	str	r0, [r7, #0]
 801fff6:	4629      	mov	r1, r5
 801fff8:	4630      	mov	r0, r6
 801fffa:	f000 f8d5 	bl	80201a8 <_sbrk_r>
 801fffe:	1c43      	adds	r3, r0, #1
 8020000:	d123      	bne.n	802004a <_malloc_r+0x92>
 8020002:	230c      	movs	r3, #12
 8020004:	6033      	str	r3, [r6, #0]
 8020006:	4630      	mov	r0, r6
 8020008:	f001 fce8 	bl	80219dc <__malloc_unlock>
 802000c:	e7e3      	b.n	801ffd6 <_malloc_r+0x1e>
 802000e:	6823      	ldr	r3, [r4, #0]
 8020010:	1b5b      	subs	r3, r3, r5
 8020012:	d417      	bmi.n	8020044 <_malloc_r+0x8c>
 8020014:	2b0b      	cmp	r3, #11
 8020016:	d903      	bls.n	8020020 <_malloc_r+0x68>
 8020018:	6023      	str	r3, [r4, #0]
 802001a:	441c      	add	r4, r3
 802001c:	6025      	str	r5, [r4, #0]
 802001e:	e004      	b.n	802002a <_malloc_r+0x72>
 8020020:	6863      	ldr	r3, [r4, #4]
 8020022:	42a2      	cmp	r2, r4
 8020024:	bf0c      	ite	eq
 8020026:	600b      	streq	r3, [r1, #0]
 8020028:	6053      	strne	r3, [r2, #4]
 802002a:	4630      	mov	r0, r6
 802002c:	f001 fcd6 	bl	80219dc <__malloc_unlock>
 8020030:	f104 000b 	add.w	r0, r4, #11
 8020034:	1d23      	adds	r3, r4, #4
 8020036:	f020 0007 	bic.w	r0, r0, #7
 802003a:	1ac2      	subs	r2, r0, r3
 802003c:	d0cc      	beq.n	801ffd8 <_malloc_r+0x20>
 802003e:	1a1b      	subs	r3, r3, r0
 8020040:	50a3      	str	r3, [r4, r2]
 8020042:	e7c9      	b.n	801ffd8 <_malloc_r+0x20>
 8020044:	4622      	mov	r2, r4
 8020046:	6864      	ldr	r4, [r4, #4]
 8020048:	e7cc      	b.n	801ffe4 <_malloc_r+0x2c>
 802004a:	1cc4      	adds	r4, r0, #3
 802004c:	f024 0403 	bic.w	r4, r4, #3
 8020050:	42a0      	cmp	r0, r4
 8020052:	d0e3      	beq.n	802001c <_malloc_r+0x64>
 8020054:	1a21      	subs	r1, r4, r0
 8020056:	4630      	mov	r0, r6
 8020058:	f000 f8a6 	bl	80201a8 <_sbrk_r>
 802005c:	3001      	adds	r0, #1
 802005e:	d1dd      	bne.n	802001c <_malloc_r+0x64>
 8020060:	e7cf      	b.n	8020002 <_malloc_r+0x4a>
 8020062:	bf00      	nop
 8020064:	20000e64 	.word	0x20000e64
 8020068:	20000e68 	.word	0x20000e68

0802006c <_open_r>:
 802006c:	b538      	push	{r3, r4, r5, lr}
 802006e:	4d07      	ldr	r5, [pc, #28]	; (802008c <_open_r+0x20>)
 8020070:	4604      	mov	r4, r0
 8020072:	4608      	mov	r0, r1
 8020074:	4611      	mov	r1, r2
 8020076:	2200      	movs	r2, #0
 8020078:	602a      	str	r2, [r5, #0]
 802007a:	461a      	mov	r2, r3
 802007c:	f7e0 fef8 	bl	8000e70 <_open>
 8020080:	1c43      	adds	r3, r0, #1
 8020082:	d102      	bne.n	802008a <_open_r+0x1e>
 8020084:	682b      	ldr	r3, [r5, #0]
 8020086:	b103      	cbz	r3, 802008a <_open_r+0x1e>
 8020088:	6023      	str	r3, [r4, #0]
 802008a:	bd38      	pop	{r3, r4, r5, pc}
 802008c:	20000f30 	.word	0x20000f30

08020090 <putchar>:
 8020090:	4b09      	ldr	r3, [pc, #36]	; (80200b8 <putchar+0x28>)
 8020092:	b513      	push	{r0, r1, r4, lr}
 8020094:	681c      	ldr	r4, [r3, #0]
 8020096:	4601      	mov	r1, r0
 8020098:	b134      	cbz	r4, 80200a8 <putchar+0x18>
 802009a:	69a3      	ldr	r3, [r4, #24]
 802009c:	b923      	cbnz	r3, 80200a8 <putchar+0x18>
 802009e:	9001      	str	r0, [sp, #4]
 80200a0:	4620      	mov	r0, r4
 80200a2:	f7ff fae9 	bl	801f678 <__sinit>
 80200a6:	9901      	ldr	r1, [sp, #4]
 80200a8:	68a2      	ldr	r2, [r4, #8]
 80200aa:	4620      	mov	r0, r4
 80200ac:	b002      	add	sp, #8
 80200ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80200b2:	f002 b909 	b.w	80222c8 <_putc_r>
 80200b6:	bf00      	nop
 80200b8:	20000108 	.word	0x20000108

080200bc <srand>:
 80200bc:	b538      	push	{r3, r4, r5, lr}
 80200be:	4b10      	ldr	r3, [pc, #64]	; (8020100 <srand+0x44>)
 80200c0:	681d      	ldr	r5, [r3, #0]
 80200c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80200c4:	4604      	mov	r4, r0
 80200c6:	b9b3      	cbnz	r3, 80200f6 <srand+0x3a>
 80200c8:	2018      	movs	r0, #24
 80200ca:	f7ff feef 	bl	801feac <malloc>
 80200ce:	4602      	mov	r2, r0
 80200d0:	63a8      	str	r0, [r5, #56]	; 0x38
 80200d2:	b920      	cbnz	r0, 80200de <srand+0x22>
 80200d4:	4b0b      	ldr	r3, [pc, #44]	; (8020104 <srand+0x48>)
 80200d6:	480c      	ldr	r0, [pc, #48]	; (8020108 <srand+0x4c>)
 80200d8:	2142      	movs	r1, #66	; 0x42
 80200da:	f001 fac3 	bl	8021664 <__assert_func>
 80200de:	490b      	ldr	r1, [pc, #44]	; (802010c <srand+0x50>)
 80200e0:	4b0b      	ldr	r3, [pc, #44]	; (8020110 <srand+0x54>)
 80200e2:	e9c0 1300 	strd	r1, r3, [r0]
 80200e6:	4b0b      	ldr	r3, [pc, #44]	; (8020114 <srand+0x58>)
 80200e8:	6083      	str	r3, [r0, #8]
 80200ea:	230b      	movs	r3, #11
 80200ec:	8183      	strh	r3, [r0, #12]
 80200ee:	2100      	movs	r1, #0
 80200f0:	2001      	movs	r0, #1
 80200f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80200f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80200f8:	2200      	movs	r2, #0
 80200fa:	611c      	str	r4, [r3, #16]
 80200fc:	615a      	str	r2, [r3, #20]
 80200fe:	bd38      	pop	{r3, r4, r5, pc}
 8020100:	20000108 	.word	0x20000108
 8020104:	08028a28 	.word	0x08028a28
 8020108:	08028b00 	.word	0x08028b00
 802010c:	abcd330e 	.word	0xabcd330e
 8020110:	e66d1234 	.word	0xe66d1234
 8020114:	0005deec 	.word	0x0005deec

08020118 <rand>:
 8020118:	4b17      	ldr	r3, [pc, #92]	; (8020178 <rand+0x60>)
 802011a:	b510      	push	{r4, lr}
 802011c:	681c      	ldr	r4, [r3, #0]
 802011e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020120:	b9b3      	cbnz	r3, 8020150 <rand+0x38>
 8020122:	2018      	movs	r0, #24
 8020124:	f7ff fec2 	bl	801feac <malloc>
 8020128:	63a0      	str	r0, [r4, #56]	; 0x38
 802012a:	b928      	cbnz	r0, 8020138 <rand+0x20>
 802012c:	4602      	mov	r2, r0
 802012e:	4b13      	ldr	r3, [pc, #76]	; (802017c <rand+0x64>)
 8020130:	4813      	ldr	r0, [pc, #76]	; (8020180 <rand+0x68>)
 8020132:	214e      	movs	r1, #78	; 0x4e
 8020134:	f001 fa96 	bl	8021664 <__assert_func>
 8020138:	4a12      	ldr	r2, [pc, #72]	; (8020184 <rand+0x6c>)
 802013a:	4b13      	ldr	r3, [pc, #76]	; (8020188 <rand+0x70>)
 802013c:	e9c0 2300 	strd	r2, r3, [r0]
 8020140:	4b12      	ldr	r3, [pc, #72]	; (802018c <rand+0x74>)
 8020142:	6083      	str	r3, [r0, #8]
 8020144:	230b      	movs	r3, #11
 8020146:	8183      	strh	r3, [r0, #12]
 8020148:	2201      	movs	r2, #1
 802014a:	2300      	movs	r3, #0
 802014c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020150:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020152:	480f      	ldr	r0, [pc, #60]	; (8020190 <rand+0x78>)
 8020154:	690a      	ldr	r2, [r1, #16]
 8020156:	694b      	ldr	r3, [r1, #20]
 8020158:	4c0e      	ldr	r4, [pc, #56]	; (8020194 <rand+0x7c>)
 802015a:	4350      	muls	r0, r2
 802015c:	fb04 0003 	mla	r0, r4, r3, r0
 8020160:	fba2 3404 	umull	r3, r4, r2, r4
 8020164:	1c5a      	adds	r2, r3, #1
 8020166:	4404      	add	r4, r0
 8020168:	f144 0000 	adc.w	r0, r4, #0
 802016c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020170:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020174:	bd10      	pop	{r4, pc}
 8020176:	bf00      	nop
 8020178:	20000108 	.word	0x20000108
 802017c:	08028a28 	.word	0x08028a28
 8020180:	08028b00 	.word	0x08028b00
 8020184:	abcd330e 	.word	0xabcd330e
 8020188:	e66d1234 	.word	0xe66d1234
 802018c:	0005deec 	.word	0x0005deec
 8020190:	5851f42d 	.word	0x5851f42d
 8020194:	4c957f2d 	.word	0x4c957f2d

08020198 <realloc>:
 8020198:	4b02      	ldr	r3, [pc, #8]	; (80201a4 <realloc+0xc>)
 802019a:	460a      	mov	r2, r1
 802019c:	4601      	mov	r1, r0
 802019e:	6818      	ldr	r0, [r3, #0]
 80201a0:	f001 bc22 	b.w	80219e8 <_realloc_r>
 80201a4:	20000108 	.word	0x20000108

080201a8 <_sbrk_r>:
 80201a8:	b538      	push	{r3, r4, r5, lr}
 80201aa:	4d06      	ldr	r5, [pc, #24]	; (80201c4 <_sbrk_r+0x1c>)
 80201ac:	2300      	movs	r3, #0
 80201ae:	4604      	mov	r4, r0
 80201b0:	4608      	mov	r0, r1
 80201b2:	602b      	str	r3, [r5, #0]
 80201b4:	f7e0 fe6a 	bl	8000e8c <_sbrk>
 80201b8:	1c43      	adds	r3, r0, #1
 80201ba:	d102      	bne.n	80201c2 <_sbrk_r+0x1a>
 80201bc:	682b      	ldr	r3, [r5, #0]
 80201be:	b103      	cbz	r3, 80201c2 <_sbrk_r+0x1a>
 80201c0:	6023      	str	r3, [r4, #0]
 80201c2:	bd38      	pop	{r3, r4, r5, pc}
 80201c4:	20000f30 	.word	0x20000f30

080201c8 <_raise_r>:
 80201c8:	291f      	cmp	r1, #31
 80201ca:	b538      	push	{r3, r4, r5, lr}
 80201cc:	4604      	mov	r4, r0
 80201ce:	460d      	mov	r5, r1
 80201d0:	d904      	bls.n	80201dc <_raise_r+0x14>
 80201d2:	2316      	movs	r3, #22
 80201d4:	6003      	str	r3, [r0, #0]
 80201d6:	f04f 30ff 	mov.w	r0, #4294967295
 80201da:	bd38      	pop	{r3, r4, r5, pc}
 80201dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80201de:	b112      	cbz	r2, 80201e6 <_raise_r+0x1e>
 80201e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80201e4:	b94b      	cbnz	r3, 80201fa <_raise_r+0x32>
 80201e6:	4620      	mov	r0, r4
 80201e8:	f000 f830 	bl	802024c <_getpid_r>
 80201ec:	462a      	mov	r2, r5
 80201ee:	4601      	mov	r1, r0
 80201f0:	4620      	mov	r0, r4
 80201f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80201f6:	f000 b817 	b.w	8020228 <_kill_r>
 80201fa:	2b01      	cmp	r3, #1
 80201fc:	d00a      	beq.n	8020214 <_raise_r+0x4c>
 80201fe:	1c59      	adds	r1, r3, #1
 8020200:	d103      	bne.n	802020a <_raise_r+0x42>
 8020202:	2316      	movs	r3, #22
 8020204:	6003      	str	r3, [r0, #0]
 8020206:	2001      	movs	r0, #1
 8020208:	e7e7      	b.n	80201da <_raise_r+0x12>
 802020a:	2400      	movs	r4, #0
 802020c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020210:	4628      	mov	r0, r5
 8020212:	4798      	blx	r3
 8020214:	2000      	movs	r0, #0
 8020216:	e7e0      	b.n	80201da <_raise_r+0x12>

08020218 <raise>:
 8020218:	4b02      	ldr	r3, [pc, #8]	; (8020224 <raise+0xc>)
 802021a:	4601      	mov	r1, r0
 802021c:	6818      	ldr	r0, [r3, #0]
 802021e:	f7ff bfd3 	b.w	80201c8 <_raise_r>
 8020222:	bf00      	nop
 8020224:	20000108 	.word	0x20000108

08020228 <_kill_r>:
 8020228:	b538      	push	{r3, r4, r5, lr}
 802022a:	4d07      	ldr	r5, [pc, #28]	; (8020248 <_kill_r+0x20>)
 802022c:	2300      	movs	r3, #0
 802022e:	4604      	mov	r4, r0
 8020230:	4608      	mov	r0, r1
 8020232:	4611      	mov	r1, r2
 8020234:	602b      	str	r3, [r5, #0]
 8020236:	f7e0 fd94 	bl	8000d62 <_kill>
 802023a:	1c43      	adds	r3, r0, #1
 802023c:	d102      	bne.n	8020244 <_kill_r+0x1c>
 802023e:	682b      	ldr	r3, [r5, #0]
 8020240:	b103      	cbz	r3, 8020244 <_kill_r+0x1c>
 8020242:	6023      	str	r3, [r4, #0]
 8020244:	bd38      	pop	{r3, r4, r5, pc}
 8020246:	bf00      	nop
 8020248:	20000f30 	.word	0x20000f30

0802024c <_getpid_r>:
 802024c:	f7e0 bd81 	b.w	8000d52 <_getpid>

08020250 <siprintf>:
 8020250:	b40e      	push	{r1, r2, r3}
 8020252:	b500      	push	{lr}
 8020254:	b09c      	sub	sp, #112	; 0x70
 8020256:	ab1d      	add	r3, sp, #116	; 0x74
 8020258:	9002      	str	r0, [sp, #8]
 802025a:	9006      	str	r0, [sp, #24]
 802025c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020260:	4809      	ldr	r0, [pc, #36]	; (8020288 <siprintf+0x38>)
 8020262:	9107      	str	r1, [sp, #28]
 8020264:	9104      	str	r1, [sp, #16]
 8020266:	4909      	ldr	r1, [pc, #36]	; (802028c <siprintf+0x3c>)
 8020268:	f853 2b04 	ldr.w	r2, [r3], #4
 802026c:	9105      	str	r1, [sp, #20]
 802026e:	6800      	ldr	r0, [r0, #0]
 8020270:	9301      	str	r3, [sp, #4]
 8020272:	a902      	add	r1, sp, #8
 8020274:	f001 fc3a 	bl	8021aec <_svfiprintf_r>
 8020278:	9b02      	ldr	r3, [sp, #8]
 802027a:	2200      	movs	r2, #0
 802027c:	701a      	strb	r2, [r3, #0]
 802027e:	b01c      	add	sp, #112	; 0x70
 8020280:	f85d eb04 	ldr.w	lr, [sp], #4
 8020284:	b003      	add	sp, #12
 8020286:	4770      	bx	lr
 8020288:	20000108 	.word	0x20000108
 802028c:	ffff0208 	.word	0xffff0208

08020290 <__sread>:
 8020290:	b510      	push	{r4, lr}
 8020292:	460c      	mov	r4, r1
 8020294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020298:	f002 f85e 	bl	8022358 <_read_r>
 802029c:	2800      	cmp	r0, #0
 802029e:	bfab      	itete	ge
 80202a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80202a2:	89a3      	ldrhlt	r3, [r4, #12]
 80202a4:	181b      	addge	r3, r3, r0
 80202a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80202aa:	bfac      	ite	ge
 80202ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80202ae:	81a3      	strhlt	r3, [r4, #12]
 80202b0:	bd10      	pop	{r4, pc}

080202b2 <__seofread>:
 80202b2:	2000      	movs	r0, #0
 80202b4:	4770      	bx	lr

080202b6 <__swrite>:
 80202b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202ba:	461f      	mov	r7, r3
 80202bc:	898b      	ldrh	r3, [r1, #12]
 80202be:	05db      	lsls	r3, r3, #23
 80202c0:	4605      	mov	r5, r0
 80202c2:	460c      	mov	r4, r1
 80202c4:	4616      	mov	r6, r2
 80202c6:	d505      	bpl.n	80202d4 <__swrite+0x1e>
 80202c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80202cc:	2302      	movs	r3, #2
 80202ce:	2200      	movs	r2, #0
 80202d0:	f001 fb5a 	bl	8021988 <_lseek_r>
 80202d4:	89a3      	ldrh	r3, [r4, #12]
 80202d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80202da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80202de:	81a3      	strh	r3, [r4, #12]
 80202e0:	4632      	mov	r2, r6
 80202e2:	463b      	mov	r3, r7
 80202e4:	4628      	mov	r0, r5
 80202e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80202ea:	f001 b8d5 	b.w	8021498 <_write_r>

080202ee <__sseek>:
 80202ee:	b510      	push	{r4, lr}
 80202f0:	460c      	mov	r4, r1
 80202f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80202f6:	f001 fb47 	bl	8021988 <_lseek_r>
 80202fa:	1c43      	adds	r3, r0, #1
 80202fc:	89a3      	ldrh	r3, [r4, #12]
 80202fe:	bf15      	itete	ne
 8020300:	6560      	strne	r0, [r4, #84]	; 0x54
 8020302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802030a:	81a3      	strheq	r3, [r4, #12]
 802030c:	bf18      	it	ne
 802030e:	81a3      	strhne	r3, [r4, #12]
 8020310:	bd10      	pop	{r4, pc}

08020312 <__sclose>:
 8020312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020316:	f001 b9c3 	b.w	80216a0 <_close_r>
	...

0802031c <iso_year_adjust>:
 802031c:	6941      	ldr	r1, [r0, #20]
 802031e:	2900      	cmp	r1, #0
 8020320:	f240 736c 	movw	r3, #1900	; 0x76c
 8020324:	bfa8      	it	ge
 8020326:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 802032a:	18ca      	adds	r2, r1, r3
 802032c:	078b      	lsls	r3, r1, #30
 802032e:	d105      	bne.n	802033c <iso_year_adjust+0x20>
 8020330:	2164      	movs	r1, #100	; 0x64
 8020332:	fb92 f3f1 	sdiv	r3, r2, r1
 8020336:	fb01 2313 	mls	r3, r1, r3, r2
 802033a:	b9db      	cbnz	r3, 8020374 <iso_year_adjust+0x58>
 802033c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020340:	fb92 f3f1 	sdiv	r3, r2, r1
 8020344:	fb01 2313 	mls	r3, r1, r3, r2
 8020348:	fab3 f383 	clz	r3, r3
 802034c:	095b      	lsrs	r3, r3, #5
 802034e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8020352:	0040      	lsls	r0, r0, #1
 8020354:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8020358:	4418      	add	r0, r3
 802035a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 802035e:	4298      	cmp	r0, r3
 8020360:	d03a      	beq.n	80203d8 <iso_year_adjust+0xbc>
 8020362:	dc21      	bgt.n	80203a8 <iso_year_adjust+0x8c>
 8020364:	2801      	cmp	r0, #1
 8020366:	dc1a      	bgt.n	802039e <iso_year_adjust+0x82>
 8020368:	2800      	cmp	r0, #0
 802036a:	bfb4      	ite	lt
 802036c:	2000      	movlt	r0, #0
 802036e:	f04f 30ff 	movge.w	r0, #4294967295
 8020372:	4770      	bx	lr
 8020374:	2301      	movs	r3, #1
 8020376:	e7ea      	b.n	802034e <iso_year_adjust+0x32>
 8020378:	2817      	cmp	r0, #23
 802037a:	d813      	bhi.n	80203a4 <iso_year_adjust+0x88>
 802037c:	e8df f000 	tbb	[pc, r0]
 8020380:	0c0c0c0c 	.word	0x0c0c0c0c
 8020384:	0c0c1212 	.word	0x0c0c1212
 8020388:	12121212 	.word	0x12121212
 802038c:	12121212 	.word	0x12121212
 8020390:	0c0c1212 	.word	0x0c0c1212
 8020394:	0c0c1212 	.word	0x0c0c1212
 8020398:	f04f 30ff 	mov.w	r0, #4294967295
 802039c:	4770      	bx	lr
 802039e:	380a      	subs	r0, #10
 80203a0:	2817      	cmp	r0, #23
 80203a2:	d9e9      	bls.n	8020378 <iso_year_adjust+0x5c>
 80203a4:	2000      	movs	r0, #0
 80203a6:	4770      	bx	lr
 80203a8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80203ac:	4298      	cmp	r0, r3
 80203ae:	dc06      	bgt.n	80203be <iso_year_adjust+0xa2>
 80203b0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80203b4:	4298      	cmp	r0, r3
 80203b6:	bfd4      	ite	le
 80203b8:	2000      	movle	r0, #0
 80203ba:	2001      	movgt	r0, #1
 80203bc:	4770      	bx	lr
 80203be:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80203c2:	3802      	subs	r0, #2
 80203c4:	2815      	cmp	r0, #21
 80203c6:	d8ed      	bhi.n	80203a4 <iso_year_adjust+0x88>
 80203c8:	2301      	movs	r3, #1
 80203ca:	4083      	lsls	r3, r0
 80203cc:	4803      	ldr	r0, [pc, #12]	; (80203dc <iso_year_adjust+0xc0>)
 80203ce:	4018      	ands	r0, r3
 80203d0:	3800      	subs	r0, #0
 80203d2:	bf18      	it	ne
 80203d4:	2001      	movne	r0, #1
 80203d6:	4770      	bx	lr
 80203d8:	2001      	movs	r0, #1
 80203da:	4770      	bx	lr
 80203dc:	002a001f 	.word	0x002a001f

080203e0 <__strftime>:
 80203e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203e4:	b091      	sub	sp, #68	; 0x44
 80203e6:	461d      	mov	r5, r3
 80203e8:	2300      	movs	r3, #0
 80203ea:	4681      	mov	r9, r0
 80203ec:	4688      	mov	r8, r1
 80203ee:	9304      	str	r3, [sp, #16]
 80203f0:	461c      	mov	r4, r3
 80203f2:	7813      	ldrb	r3, [r2, #0]
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	f000 84d1 	beq.w	8020d9c <__strftime+0x9bc>
 80203fa:	2b25      	cmp	r3, #37	; 0x25
 80203fc:	d11b      	bne.n	8020436 <__strftime+0x56>
 80203fe:	7857      	ldrb	r7, [r2, #1]
 8020400:	2f30      	cmp	r7, #48	; 0x30
 8020402:	d024      	beq.n	802044e <__strftime+0x6e>
 8020404:	2f2b      	cmp	r7, #43	; 0x2b
 8020406:	d022      	beq.n	802044e <__strftime+0x6e>
 8020408:	f102 0b01 	add.w	fp, r2, #1
 802040c:	2700      	movs	r7, #0
 802040e:	f89b 3000 	ldrb.w	r3, [fp]
 8020412:	3b31      	subs	r3, #49	; 0x31
 8020414:	2b08      	cmp	r3, #8
 8020416:	d81d      	bhi.n	8020454 <__strftime+0x74>
 8020418:	4658      	mov	r0, fp
 802041a:	220a      	movs	r2, #10
 802041c:	a908      	add	r1, sp, #32
 802041e:	f000 fd6f 	bl	8020f00 <strtoul>
 8020422:	f8dd b020 	ldr.w	fp, [sp, #32]
 8020426:	4606      	mov	r6, r0
 8020428:	f89b 3000 	ldrb.w	r3, [fp]
 802042c:	2b45      	cmp	r3, #69	; 0x45
 802042e:	d113      	bne.n	8020458 <__strftime+0x78>
 8020430:	f10b 0b01 	add.w	fp, fp, #1
 8020434:	e012      	b.n	802045c <__strftime+0x7c>
 8020436:	f108 31ff 	add.w	r1, r8, #4294967295
 802043a:	42a1      	cmp	r1, r4
 802043c:	d802      	bhi.n	8020444 <__strftime+0x64>
 802043e:	2400      	movs	r4, #0
 8020440:	f000 bcb2 	b.w	8020da8 <__strftime+0x9c8>
 8020444:	f809 3004 	strb.w	r3, [r9, r4]
 8020448:	3201      	adds	r2, #1
 802044a:	3401      	adds	r4, #1
 802044c:	e7d1      	b.n	80203f2 <__strftime+0x12>
 802044e:	f102 0b02 	add.w	fp, r2, #2
 8020452:	e7dc      	b.n	802040e <__strftime+0x2e>
 8020454:	2600      	movs	r6, #0
 8020456:	e7e7      	b.n	8020428 <__strftime+0x48>
 8020458:	2b4f      	cmp	r3, #79	; 0x4f
 802045a:	d0e9      	beq.n	8020430 <__strftime+0x50>
 802045c:	f89b 0000 	ldrb.w	r0, [fp]
 8020460:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8020464:	2b55      	cmp	r3, #85	; 0x55
 8020466:	d8ea      	bhi.n	802043e <__strftime+0x5e>
 8020468:	a201      	add	r2, pc, #4	; (adr r2, 8020470 <__strftime+0x90>)
 802046a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802046e:	bf00      	nop
 8020470:	08020d8f 	.word	0x08020d8f
 8020474:	0802043f 	.word	0x0802043f
 8020478:	0802043f 	.word	0x0802043f
 802047c:	0802043f 	.word	0x0802043f
 8020480:	0802043f 	.word	0x0802043f
 8020484:	0802043f 	.word	0x0802043f
 8020488:	0802043f 	.word	0x0802043f
 802048c:	0802043f 	.word	0x0802043f
 8020490:	0802043f 	.word	0x0802043f
 8020494:	0802043f 	.word	0x0802043f
 8020498:	0802043f 	.word	0x0802043f
 802049c:	0802043f 	.word	0x0802043f
 80204a0:	0802043f 	.word	0x0802043f
 80204a4:	0802043f 	.word	0x0802043f
 80204a8:	0802043f 	.word	0x0802043f
 80204ac:	0802043f 	.word	0x0802043f
 80204b0:	0802043f 	.word	0x0802043f
 80204b4:	0802043f 	.word	0x0802043f
 80204b8:	0802043f 	.word	0x0802043f
 80204bc:	0802043f 	.word	0x0802043f
 80204c0:	0802043f 	.word	0x0802043f
 80204c4:	0802043f 	.word	0x0802043f
 80204c8:	0802043f 	.word	0x0802043f
 80204cc:	0802043f 	.word	0x0802043f
 80204d0:	0802043f 	.word	0x0802043f
 80204d4:	0802043f 	.word	0x0802043f
 80204d8:	0802043f 	.word	0x0802043f
 80204dc:	0802043f 	.word	0x0802043f
 80204e0:	08020607 	.word	0x08020607
 80204e4:	08020661 	.word	0x08020661
 80204e8:	080206d7 	.word	0x080206d7
 80204ec:	08020771 	.word	0x08020771
 80204f0:	0802043f 	.word	0x0802043f
 80204f4:	080207bd 	.word	0x080207bd
 80204f8:	0802089d 	.word	0x0802089d
 80204fc:	0802099f 	.word	0x0802099f
 8020500:	080209ad 	.word	0x080209ad
 8020504:	0802043f 	.word	0x0802043f
 8020508:	0802043f 	.word	0x0802043f
 802050c:	0802043f 	.word	0x0802043f
 8020510:	080209dd 	.word	0x080209dd
 8020514:	0802043f 	.word	0x0802043f
 8020518:	0802043f 	.word	0x0802043f
 802051c:	080209f5 	.word	0x080209f5
 8020520:	0802043f 	.word	0x0802043f
 8020524:	08020a43 	.word	0x08020a43
 8020528:	08020b59 	.word	0x08020b59
 802052c:	08020b6b 	.word	0x08020b6b
 8020530:	08020bc3 	.word	0x08020bc3
 8020534:	08020bd3 	.word	0x08020bd3
 8020538:	08020c49 	.word	0x08020c49
 802053c:	080206cf 	.word	0x080206cf
 8020540:	08020c7d 	.word	0x08020c7d
 8020544:	08020d3b 	.word	0x08020d3b
 8020548:	0802043f 	.word	0x0802043f
 802054c:	0802043f 	.word	0x0802043f
 8020550:	0802043f 	.word	0x0802043f
 8020554:	0802043f 	.word	0x0802043f
 8020558:	0802043f 	.word	0x0802043f
 802055c:	0802043f 	.word	0x0802043f
 8020560:	080205c9 	.word	0x080205c9
 8020564:	08020635 	.word	0x08020635
 8020568:	0802068f 	.word	0x0802068f
 802056c:	08020749 	.word	0x08020749
 8020570:	08020749 	.word	0x08020749
 8020574:	0802043f 	.word	0x0802043f
 8020578:	08020805 	.word	0x08020805
 802057c:	08020635 	.word	0x08020635
 8020580:	0802043f 	.word	0x0802043f
 8020584:	080209cf 	.word	0x080209cf
 8020588:	0802099f 	.word	0x0802099f
 802058c:	080209ad 	.word	0x080209ad
 8020590:	080209d7 	.word	0x080209d7
 8020594:	080209e1 	.word	0x080209e1
 8020598:	0802043f 	.word	0x0802043f
 802059c:	080209f5 	.word	0x080209f5
 80205a0:	0802043f 	.word	0x0802043f
 80205a4:	080206bf 	.word	0x080206bf
 80205a8:	08020a59 	.word	0x08020a59
 80205ac:	08020b5d 	.word	0x08020b5d
 80205b0:	08020ba5 	.word	0x08020ba5
 80205b4:	0802043f 	.word	0x0802043f
 80205b8:	08020c39 	.word	0x08020c39
 80205bc:	080206c7 	.word	0x080206c7
 80205c0:	08020c61 	.word	0x08020c61
 80205c4:	08020ccd 	.word	0x08020ccd
 80205c8:	69ab      	ldr	r3, [r5, #24]
 80205ca:	4aa7      	ldr	r2, [pc, #668]	; (8020868 <__strftime+0x488>)
 80205cc:	3318      	adds	r3, #24
 80205ce:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80205d2:	4630      	mov	r0, r6
 80205d4:	f7df fe32 	bl	800023c <strlen>
 80205d8:	3e01      	subs	r6, #1
 80205da:	4420      	add	r0, r4
 80205dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80205e0:	42a0      	cmp	r0, r4
 80205e2:	d107      	bne.n	80205f4 <__strftime+0x214>
 80205e4:	f89b 3000 	ldrb.w	r3, [fp]
 80205e8:	2b00      	cmp	r3, #0
 80205ea:	f000 83d7 	beq.w	8020d9c <__strftime+0x9bc>
 80205ee:	f10b 0201 	add.w	r2, fp, #1
 80205f2:	e6fe      	b.n	80203f2 <__strftime+0x12>
 80205f4:	42a3      	cmp	r3, r4
 80205f6:	f67f af22 	bls.w	802043e <__strftime+0x5e>
 80205fa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80205fe:	f809 2004 	strb.w	r2, [r9, r4]
 8020602:	3401      	adds	r4, #1
 8020604:	e7ec      	b.n	80205e0 <__strftime+0x200>
 8020606:	69aa      	ldr	r2, [r5, #24]
 8020608:	4b97      	ldr	r3, [pc, #604]	; (8020868 <__strftime+0x488>)
 802060a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802060e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8020610:	4630      	mov	r0, r6
 8020612:	f7df fe13 	bl	800023c <strlen>
 8020616:	3e01      	subs	r6, #1
 8020618:	4420      	add	r0, r4
 802061a:	f108 33ff 	add.w	r3, r8, #4294967295
 802061e:	42a0      	cmp	r0, r4
 8020620:	d0e0      	beq.n	80205e4 <__strftime+0x204>
 8020622:	42a3      	cmp	r3, r4
 8020624:	f67f af0b 	bls.w	802043e <__strftime+0x5e>
 8020628:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802062c:	f809 2004 	strb.w	r2, [r9, r4]
 8020630:	3401      	adds	r4, #1
 8020632:	e7f4      	b.n	802061e <__strftime+0x23e>
 8020634:	4b8c      	ldr	r3, [pc, #560]	; (8020868 <__strftime+0x488>)
 8020636:	692a      	ldr	r2, [r5, #16]
 8020638:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802063c:	4630      	mov	r0, r6
 802063e:	f7df fdfd 	bl	800023c <strlen>
 8020642:	3e01      	subs	r6, #1
 8020644:	4420      	add	r0, r4
 8020646:	f108 33ff 	add.w	r3, r8, #4294967295
 802064a:	42a0      	cmp	r0, r4
 802064c:	d0ca      	beq.n	80205e4 <__strftime+0x204>
 802064e:	42a3      	cmp	r3, r4
 8020650:	f67f aef5 	bls.w	802043e <__strftime+0x5e>
 8020654:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020658:	f809 2004 	strb.w	r2, [r9, r4]
 802065c:	3401      	adds	r4, #1
 802065e:	e7f4      	b.n	802064a <__strftime+0x26a>
 8020660:	692b      	ldr	r3, [r5, #16]
 8020662:	4a81      	ldr	r2, [pc, #516]	; (8020868 <__strftime+0x488>)
 8020664:	330c      	adds	r3, #12
 8020666:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 802066a:	4630      	mov	r0, r6
 802066c:	f7df fde6 	bl	800023c <strlen>
 8020670:	3e01      	subs	r6, #1
 8020672:	4420      	add	r0, r4
 8020674:	f108 33ff 	add.w	r3, r8, #4294967295
 8020678:	42a0      	cmp	r0, r4
 802067a:	d0b3      	beq.n	80205e4 <__strftime+0x204>
 802067c:	42a3      	cmp	r3, r4
 802067e:	f67f aede 	bls.w	802043e <__strftime+0x5e>
 8020682:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020686:	f809 2004 	strb.w	r2, [r9, r4]
 802068a:	3401      	adds	r4, #1
 802068c:	e7f4      	b.n	8020678 <__strftime+0x298>
 802068e:	4b76      	ldr	r3, [pc, #472]	; (8020868 <__strftime+0x488>)
 8020690:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8020694:	4630      	mov	r0, r6
 8020696:	f7df fdd1 	bl	800023c <strlen>
 802069a:	7833      	ldrb	r3, [r6, #0]
 802069c:	2b00      	cmp	r3, #0
 802069e:	d0a1      	beq.n	80205e4 <__strftime+0x204>
 80206a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80206a2:	9300      	str	r3, [sp, #0]
 80206a4:	4632      	mov	r2, r6
 80206a6:	462b      	mov	r3, r5
 80206a8:	eba8 0104 	sub.w	r1, r8, r4
 80206ac:	eb09 0004 	add.w	r0, r9, r4
 80206b0:	f7ff fe96 	bl	80203e0 <__strftime>
 80206b4:	2800      	cmp	r0, #0
 80206b6:	f77f aec2 	ble.w	802043e <__strftime+0x5e>
 80206ba:	4404      	add	r4, r0
 80206bc:	e792      	b.n	80205e4 <__strftime+0x204>
 80206be:	4b6a      	ldr	r3, [pc, #424]	; (8020868 <__strftime+0x488>)
 80206c0:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 80206c4:	e7e6      	b.n	8020694 <__strftime+0x2b4>
 80206c6:	4b68      	ldr	r3, [pc, #416]	; (8020868 <__strftime+0x488>)
 80206c8:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 80206cc:	e7e2      	b.n	8020694 <__strftime+0x2b4>
 80206ce:	4b66      	ldr	r3, [pc, #408]	; (8020868 <__strftime+0x488>)
 80206d0:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80206d4:	e7de      	b.n	8020694 <__strftime+0x2b4>
 80206d6:	4965      	ldr	r1, [pc, #404]	; (802086c <__strftime+0x48c>)
 80206d8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 80206dc:	458a      	cmp	sl, r1
 80206de:	bfac      	ite	ge
 80206e0:	2100      	movge	r1, #0
 80206e2:	2101      	movlt	r1, #1
 80206e4:	f1ba 0f00 	cmp.w	sl, #0
 80206e8:	db0e      	blt.n	8020708 <__strftime+0x328>
 80206ea:	2064      	movs	r0, #100	; 0x64
 80206ec:	fb9a f0f0 	sdiv	r0, sl, r0
 80206f0:	3013      	adds	r0, #19
 80206f2:	b19f      	cbz	r7, 802071c <__strftime+0x33c>
 80206f4:	2863      	cmp	r0, #99	; 0x63
 80206f6:	dd25      	ble.n	8020744 <__strftime+0x364>
 80206f8:	4a5d      	ldr	r2, [pc, #372]	; (8020870 <__strftime+0x490>)
 80206fa:	4b5e      	ldr	r3, [pc, #376]	; (8020874 <__strftime+0x494>)
 80206fc:	2f2b      	cmp	r7, #43	; 0x2b
 80206fe:	bf14      	ite	ne
 8020700:	4617      	movne	r7, r2
 8020702:	461f      	moveq	r7, r3
 8020704:	4a5c      	ldr	r2, [pc, #368]	; (8020878 <__strftime+0x498>)
 8020706:	e00b      	b.n	8020720 <__strftime+0x340>
 8020708:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 802070c:	9105      	str	r1, [sp, #20]
 802070e:	f000 ffa5 	bl	802165c <abs>
 8020712:	2364      	movs	r3, #100	; 0x64
 8020714:	9905      	ldr	r1, [sp, #20]
 8020716:	fb90 f0f3 	sdiv	r0, r0, r3
 802071a:	e7ea      	b.n	80206f2 <__strftime+0x312>
 802071c:	4f54      	ldr	r7, [pc, #336]	; (8020870 <__strftime+0x490>)
 802071e:	4a57      	ldr	r2, [pc, #348]	; (802087c <__strftime+0x49c>)
 8020720:	4b57      	ldr	r3, [pc, #348]	; (8020880 <__strftime+0x4a0>)
 8020722:	9001      	str	r0, [sp, #4]
 8020724:	2e02      	cmp	r6, #2
 8020726:	bf2c      	ite	cs
 8020728:	ebc1 0606 	rsbcs	r6, r1, r6
 802072c:	f1c1 0602 	rsbcc	r6, r1, #2
 8020730:	494e      	ldr	r1, [pc, #312]	; (802086c <__strftime+0x48c>)
 8020732:	9600      	str	r6, [sp, #0]
 8020734:	458a      	cmp	sl, r1
 8020736:	bfa8      	it	ge
 8020738:	463b      	movge	r3, r7
 802073a:	eba8 0104 	sub.w	r1, r8, r4
 802073e:	eb09 0004 	add.w	r0, r9, r4
 8020742:	e02a      	b.n	802079a <__strftime+0x3ba>
 8020744:	4f4a      	ldr	r7, [pc, #296]	; (8020870 <__strftime+0x490>)
 8020746:	e7dd      	b.n	8020704 <__strftime+0x324>
 8020748:	494e      	ldr	r1, [pc, #312]	; (8020884 <__strftime+0x4a4>)
 802074a:	4a4f      	ldr	r2, [pc, #316]	; (8020888 <__strftime+0x4a8>)
 802074c:	68eb      	ldr	r3, [r5, #12]
 802074e:	2864      	cmp	r0, #100	; 0x64
 8020750:	bf08      	it	eq
 8020752:	460a      	moveq	r2, r1
 8020754:	eba8 0104 	sub.w	r1, r8, r4
 8020758:	eb09 0004 	add.w	r0, r9, r4
 802075c:	f001 fe0e 	bl	802237c <sniprintf>
 8020760:	2800      	cmp	r0, #0
 8020762:	f6ff ae6c 	blt.w	802043e <__strftime+0x5e>
 8020766:	4404      	add	r4, r0
 8020768:	45a0      	cmp	r8, r4
 802076a:	f63f af3b 	bhi.w	80205e4 <__strftime+0x204>
 802076e:	e666      	b.n	802043e <__strftime+0x5e>
 8020770:	6968      	ldr	r0, [r5, #20]
 8020772:	692b      	ldr	r3, [r5, #16]
 8020774:	68ef      	ldr	r7, [r5, #12]
 8020776:	2800      	cmp	r0, #0
 8020778:	eb09 0604 	add.w	r6, r9, r4
 802077c:	eba8 0104 	sub.w	r1, r8, r4
 8020780:	f103 0301 	add.w	r3, r3, #1
 8020784:	db0c      	blt.n	80207a0 <__strftime+0x3c0>
 8020786:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802078a:	fb90 f2fc 	sdiv	r2, r0, ip
 802078e:	fb0c 0212 	mls	r2, ip, r2, r0
 8020792:	e9cd 7200 	strd	r7, r2, [sp]
 8020796:	4a3d      	ldr	r2, [pc, #244]	; (802088c <__strftime+0x4ac>)
 8020798:	4630      	mov	r0, r6
 802079a:	f001 fdef 	bl	802237c <sniprintf>
 802079e:	e7df      	b.n	8020760 <__strftime+0x380>
 80207a0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80207a4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80207a8:	f000 ff58 	bl	802165c <abs>
 80207ac:	2264      	movs	r2, #100	; 0x64
 80207ae:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 80207b2:	fb90 fcf2 	sdiv	ip, r0, r2
 80207b6:	fb0c 0212 	mls	r2, ip, r2, r0
 80207ba:	e7ea      	b.n	8020792 <__strftime+0x3b2>
 80207bc:	2325      	movs	r3, #37	; 0x25
 80207be:	f88d 3020 	strb.w	r3, [sp, #32]
 80207c2:	b187      	cbz	r7, 80207e6 <__strftime+0x406>
 80207c4:	2e06      	cmp	r6, #6
 80207c6:	bf38      	it	cc
 80207c8:	2606      	movcc	r6, #6
 80207ca:	1fb3      	subs	r3, r6, #6
 80207cc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80207d0:	d10c      	bne.n	80207ec <__strftime+0x40c>
 80207d2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80207d6:	492e      	ldr	r1, [pc, #184]	; (8020890 <__strftime+0x4b0>)
 80207d8:	f001 fe30 	bl	802243c <strcpy>
 80207dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80207de:	9300      	str	r3, [sp, #0]
 80207e0:	aa08      	add	r2, sp, #32
 80207e2:	462b      	mov	r3, r5
 80207e4:	e760      	b.n	80206a8 <__strftime+0x2c8>
 80207e6:	272b      	movs	r7, #43	; 0x2b
 80207e8:	260a      	movs	r6, #10
 80207ea:	e7ee      	b.n	80207ca <__strftime+0x3ea>
 80207ec:	4a29      	ldr	r2, [pc, #164]	; (8020894 <__strftime+0x4b4>)
 80207ee:	211e      	movs	r1, #30
 80207f0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80207f4:	f001 fdc2 	bl	802237c <sniprintf>
 80207f8:	2800      	cmp	r0, #0
 80207fa:	ddea      	ble.n	80207d2 <__strftime+0x3f2>
 80207fc:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8020800:	4418      	add	r0, r3
 8020802:	e7e8      	b.n	80207d6 <__strftime+0x3f6>
 8020804:	4628      	mov	r0, r5
 8020806:	f7ff fd89 	bl	802031c <iso_year_adjust>
 802080a:	4606      	mov	r6, r0
 802080c:	6968      	ldr	r0, [r5, #20]
 802080e:	2800      	cmp	r0, #0
 8020810:	db11      	blt.n	8020836 <__strftime+0x456>
 8020812:	2264      	movs	r2, #100	; 0x64
 8020814:	fb90 f3f2 	sdiv	r3, r0, r2
 8020818:	fb02 0313 	mls	r3, r2, r3, r0
 802081c:	441e      	add	r6, r3
 802081e:	2364      	movs	r3, #100	; 0x64
 8020820:	fb96 f0f3 	sdiv	r0, r6, r3
 8020824:	fb03 6610 	mls	r6, r3, r0, r6
 8020828:	441e      	add	r6, r3
 802082a:	fbb6 f2f3 	udiv	r2, r6, r3
 802082e:	fb03 6312 	mls	r3, r3, r2, r6
 8020832:	4a14      	ldr	r2, [pc, #80]	; (8020884 <__strftime+0x4a4>)
 8020834:	e78e      	b.n	8020754 <__strftime+0x374>
 8020836:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802083a:	f000 ff0f 	bl	802165c <abs>
 802083e:	2364      	movs	r3, #100	; 0x64
 8020840:	2e00      	cmp	r6, #0
 8020842:	fb90 f2f3 	sdiv	r2, r0, r3
 8020846:	fb02 0313 	mls	r3, r2, r3, r0
 802084a:	da05      	bge.n	8020858 <__strftime+0x478>
 802084c:	6969      	ldr	r1, [r5, #20]
 802084e:	4a12      	ldr	r2, [pc, #72]	; (8020898 <__strftime+0x4b8>)
 8020850:	4291      	cmp	r1, r2
 8020852:	bfb8      	it	lt
 8020854:	2601      	movlt	r6, #1
 8020856:	e7e1      	b.n	802081c <__strftime+0x43c>
 8020858:	d0e0      	beq.n	802081c <__strftime+0x43c>
 802085a:	6969      	ldr	r1, [r5, #20]
 802085c:	4a03      	ldr	r2, [pc, #12]	; (802086c <__strftime+0x48c>)
 802085e:	4291      	cmp	r1, r2
 8020860:	bfb8      	it	lt
 8020862:	f04f 36ff 	movlt.w	r6, #4294967295
 8020866:	e7d9      	b.n	802081c <__strftime+0x43c>
 8020868:	08028ce4 	.word	0x08028ce4
 802086c:	fffff894 	.word	0xfffff894
 8020870:	08028e57 	.word	0x08028e57
 8020874:	08028b6e 	.word	0x08028b6e
 8020878:	08028b66 	.word	0x08028b66
 802087c:	08028b5f 	.word	0x08028b5f
 8020880:	08028f97 	.word	0x08028f97
 8020884:	08028b7e 	.word	0x08028b7e
 8020888:	08028b70 	.word	0x08028b70
 802088c:	08028b74 	.word	0x08028b74
 8020890:	08028b87 	.word	0x08028b87
 8020894:	08028b83 	.word	0x08028b83
 8020898:	fffff895 	.word	0xfffff895
 802089c:	4bb6      	ldr	r3, [pc, #728]	; (8020b78 <__strftime+0x798>)
 802089e:	6969      	ldr	r1, [r5, #20]
 80208a0:	4299      	cmp	r1, r3
 80208a2:	bfac      	ite	ge
 80208a4:	2300      	movge	r3, #0
 80208a6:	2301      	movlt	r3, #1
 80208a8:	4628      	mov	r0, r5
 80208aa:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80208ae:	f7ff fd35 	bl	802031c <iso_year_adjust>
 80208b2:	9906      	ldr	r1, [sp, #24]
 80208b4:	2900      	cmp	r1, #0
 80208b6:	4682      	mov	sl, r0
 80208b8:	db27      	blt.n	802090a <__strftime+0x52a>
 80208ba:	2264      	movs	r2, #100	; 0x64
 80208bc:	fb91 f2f2 	sdiv	r2, r1, r2
 80208c0:	3213      	adds	r2, #19
 80208c2:	6968      	ldr	r0, [r5, #20]
 80208c4:	2800      	cmp	r0, #0
 80208c6:	db2b      	blt.n	8020920 <__strftime+0x540>
 80208c8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80208cc:	fb90 fefc 	sdiv	lr, r0, ip
 80208d0:	fb0c 001e 	mls	r0, ip, lr, r0
 80208d4:	f1ba 0f00 	cmp.w	sl, #0
 80208d8:	da31      	bge.n	802093e <__strftime+0x55e>
 80208da:	6969      	ldr	r1, [r5, #20]
 80208dc:	4ba7      	ldr	r3, [pc, #668]	; (8020b7c <__strftime+0x79c>)
 80208de:	4299      	cmp	r1, r3
 80208e0:	db38      	blt.n	8020954 <__strftime+0x574>
 80208e2:	eb0a 0300 	add.w	r3, sl, r0
 80208e6:	1c59      	adds	r1, r3, #1
 80208e8:	d139      	bne.n	802095e <__strftime+0x57e>
 80208ea:	3a01      	subs	r2, #1
 80208ec:	2363      	movs	r3, #99	; 0x63
 80208ee:	2064      	movs	r0, #100	; 0x64
 80208f0:	fb00 3202 	mla	r2, r0, r2, r3
 80208f4:	9b05      	ldr	r3, [sp, #20]
 80208f6:	2b00      	cmp	r3, #0
 80208f8:	d036      	beq.n	8020968 <__strftime+0x588>
 80208fa:	232d      	movs	r3, #45	; 0x2d
 80208fc:	f88d 3020 	strb.w	r3, [sp, #32]
 8020900:	b106      	cbz	r6, 8020904 <__strftime+0x524>
 8020902:	3e01      	subs	r6, #1
 8020904:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8020908:	e038      	b.n	802097c <__strftime+0x59c>
 802090a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 802090e:	9106      	str	r1, [sp, #24]
 8020910:	f000 fea4 	bl	802165c <abs>
 8020914:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020918:	9906      	ldr	r1, [sp, #24]
 802091a:	fb90 f2fc 	sdiv	r2, r0, ip
 802091e:	e7d0      	b.n	80208c2 <__strftime+0x4e2>
 8020920:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020924:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8020928:	f000 fe98 	bl	802165c <abs>
 802092c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8020930:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8020934:	fb90 fefc 	sdiv	lr, r0, ip
 8020938:	fb0e 001c 	mls	r0, lr, ip, r0
 802093c:	e7ca      	b.n	80208d4 <__strftime+0x4f4>
 802093e:	d0d0      	beq.n	80208e2 <__strftime+0x502>
 8020940:	4b8d      	ldr	r3, [pc, #564]	; (8020b78 <__strftime+0x798>)
 8020942:	4299      	cmp	r1, r3
 8020944:	bfb4      	ite	lt
 8020946:	2301      	movlt	r3, #1
 8020948:	2300      	movge	r3, #0
 802094a:	9305      	str	r3, [sp, #20]
 802094c:	bfb8      	it	lt
 802094e:	f04f 3aff 	movlt.w	sl, #4294967295
 8020952:	e7c6      	b.n	80208e2 <__strftime+0x502>
 8020954:	f04f 0a01 	mov.w	sl, #1
 8020958:	f8cd a014 	str.w	sl, [sp, #20]
 802095c:	e7c1      	b.n	80208e2 <__strftime+0x502>
 802095e:	2b64      	cmp	r3, #100	; 0x64
 8020960:	bf04      	itt	eq
 8020962:	3201      	addeq	r2, #1
 8020964:	2300      	moveq	r3, #0
 8020966:	e7c2      	b.n	80208ee <__strftime+0x50e>
 8020968:	2f2b      	cmp	r7, #43	; 0x2b
 802096a:	d106      	bne.n	802097a <__strftime+0x59a>
 802096c:	f242 730f 	movw	r3, #9999	; 0x270f
 8020970:	429a      	cmp	r2, r3
 8020972:	d902      	bls.n	802097a <__strftime+0x59a>
 8020974:	f88d 7020 	strb.w	r7, [sp, #32]
 8020978:	e7c2      	b.n	8020900 <__strftime+0x520>
 802097a:	ab08      	add	r3, sp, #32
 802097c:	2125      	movs	r1, #37	; 0x25
 802097e:	7019      	strb	r1, [r3, #0]
 8020980:	b94f      	cbnz	r7, 8020996 <__strftime+0x5b6>
 8020982:	1c58      	adds	r0, r3, #1
 8020984:	497e      	ldr	r1, [pc, #504]	; (8020b80 <__strftime+0x7a0>)
 8020986:	9205      	str	r2, [sp, #20]
 8020988:	f001 fd58 	bl	802243c <strcpy>
 802098c:	9a05      	ldr	r2, [sp, #20]
 802098e:	9200      	str	r2, [sp, #0]
 8020990:	4633      	mov	r3, r6
 8020992:	aa08      	add	r2, sp, #32
 8020994:	e059      	b.n	8020a4a <__strftime+0x66a>
 8020996:	2130      	movs	r1, #48	; 0x30
 8020998:	1c98      	adds	r0, r3, #2
 802099a:	7059      	strb	r1, [r3, #1]
 802099c:	e7f2      	b.n	8020984 <__strftime+0x5a4>
 802099e:	4979      	ldr	r1, [pc, #484]	; (8020b84 <__strftime+0x7a4>)
 80209a0:	4a79      	ldr	r2, [pc, #484]	; (8020b88 <__strftime+0x7a8>)
 80209a2:	68ab      	ldr	r3, [r5, #8]
 80209a4:	286b      	cmp	r0, #107	; 0x6b
 80209a6:	bf08      	it	eq
 80209a8:	460a      	moveq	r2, r1
 80209aa:	e6d3      	b.n	8020754 <__strftime+0x374>
 80209ac:	68ab      	ldr	r3, [r5, #8]
 80209ae:	b163      	cbz	r3, 80209ca <__strftime+0x5ea>
 80209b0:	2b0c      	cmp	r3, #12
 80209b2:	d004      	beq.n	80209be <__strftime+0x5de>
 80209b4:	210c      	movs	r1, #12
 80209b6:	fb93 f2f1 	sdiv	r2, r3, r1
 80209ba:	fb01 3312 	mls	r3, r1, r2, r3
 80209be:	4972      	ldr	r1, [pc, #456]	; (8020b88 <__strftime+0x7a8>)
 80209c0:	4a70      	ldr	r2, [pc, #448]	; (8020b84 <__strftime+0x7a4>)
 80209c2:	2849      	cmp	r0, #73	; 0x49
 80209c4:	bf08      	it	eq
 80209c6:	460a      	moveq	r2, r1
 80209c8:	e6c4      	b.n	8020754 <__strftime+0x374>
 80209ca:	230c      	movs	r3, #12
 80209cc:	e7f7      	b.n	80209be <__strftime+0x5de>
 80209ce:	69eb      	ldr	r3, [r5, #28]
 80209d0:	4a6e      	ldr	r2, [pc, #440]	; (8020b8c <__strftime+0x7ac>)
 80209d2:	3301      	adds	r3, #1
 80209d4:	e6be      	b.n	8020754 <__strftime+0x374>
 80209d6:	692b      	ldr	r3, [r5, #16]
 80209d8:	3301      	adds	r3, #1
 80209da:	e72a      	b.n	8020832 <__strftime+0x452>
 80209dc:	686b      	ldr	r3, [r5, #4]
 80209de:	e728      	b.n	8020832 <__strftime+0x452>
 80209e0:	f108 33ff 	add.w	r3, r8, #4294967295
 80209e4:	42a3      	cmp	r3, r4
 80209e6:	f67f ad2a 	bls.w	802043e <__strftime+0x5e>
 80209ea:	230a      	movs	r3, #10
 80209ec:	f809 3004 	strb.w	r3, [r9, r4]
 80209f0:	3401      	adds	r4, #1
 80209f2:	e5f7      	b.n	80205e4 <__strftime+0x204>
 80209f4:	68ab      	ldr	r3, [r5, #8]
 80209f6:	2b0b      	cmp	r3, #11
 80209f8:	bfcc      	ite	gt
 80209fa:	22a4      	movgt	r2, #164	; 0xa4
 80209fc:	22a0      	movle	r2, #160	; 0xa0
 80209fe:	4b64      	ldr	r3, [pc, #400]	; (8020b90 <__strftime+0x7b0>)
 8020a00:	4413      	add	r3, r2
 8020a02:	685e      	ldr	r6, [r3, #4]
 8020a04:	4630      	mov	r0, r6
 8020a06:	f7df fc19 	bl	800023c <strlen>
 8020a0a:	1e72      	subs	r2, r6, #1
 8020a0c:	4420      	add	r0, r4
 8020a0e:	f108 36ff 	add.w	r6, r8, #4294967295
 8020a12:	42a0      	cmp	r0, r4
 8020a14:	f43f ade6 	beq.w	80205e4 <__strftime+0x204>
 8020a18:	42a6      	cmp	r6, r4
 8020a1a:	f67f ad10 	bls.w	802043e <__strftime+0x5e>
 8020a1e:	f89b 1000 	ldrb.w	r1, [fp]
 8020a22:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8020a26:	2950      	cmp	r1, #80	; 0x50
 8020a28:	d107      	bne.n	8020a3a <__strftime+0x65a>
 8020a2a:	495a      	ldr	r1, [pc, #360]	; (8020b94 <__strftime+0x7b4>)
 8020a2c:	5cc9      	ldrb	r1, [r1, r3]
 8020a2e:	f001 0103 	and.w	r1, r1, #3
 8020a32:	2901      	cmp	r1, #1
 8020a34:	bf08      	it	eq
 8020a36:	3320      	addeq	r3, #32
 8020a38:	b2db      	uxtb	r3, r3
 8020a3a:	f809 3004 	strb.w	r3, [r9, r4]
 8020a3e:	3401      	adds	r4, #1
 8020a40:	e7e7      	b.n	8020a12 <__strftime+0x632>
 8020a42:	686b      	ldr	r3, [r5, #4]
 8020a44:	9300      	str	r3, [sp, #0]
 8020a46:	4a54      	ldr	r2, [pc, #336]	; (8020b98 <__strftime+0x7b8>)
 8020a48:	68ab      	ldr	r3, [r5, #8]
 8020a4a:	eba8 0104 	sub.w	r1, r8, r4
 8020a4e:	eb09 0004 	add.w	r0, r9, r4
 8020a52:	f001 fc93 	bl	802237c <sniprintf>
 8020a56:	e683      	b.n	8020760 <__strftime+0x380>
 8020a58:	6a2b      	ldr	r3, [r5, #32]
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	db79      	blt.n	8020b52 <__strftime+0x772>
 8020a5e:	f000 fb01 	bl	8021064 <__tz_lock>
 8020a62:	9b04      	ldr	r3, [sp, #16]
 8020a64:	b90b      	cbnz	r3, 8020a6a <__strftime+0x68a>
 8020a66:	f000 fb09 	bl	802107c <_tzset_unlocked>
 8020a6a:	f000 fec5 	bl	80217f8 <__gettzinfo>
 8020a6e:	6a2b      	ldr	r3, [r5, #32]
 8020a70:	2b00      	cmp	r3, #0
 8020a72:	bfcc      	ite	gt
 8020a74:	2350      	movgt	r3, #80	; 0x50
 8020a76:	2328      	movle	r3, #40	; 0x28
 8020a78:	58c3      	ldr	r3, [r0, r3]
 8020a7a:	f1c3 0a00 	rsb	sl, r3, #0
 8020a7e:	f000 faf7 	bl	8021070 <__tz_unlock>
 8020a82:	2301      	movs	r3, #1
 8020a84:	9304      	str	r3, [sp, #16]
 8020a86:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8020a8a:	4662      	mov	r2, ip
 8020a8c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8020a90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8020a94:	9602      	str	r6, [sp, #8]
 8020a96:	f143 36ff 	adc.w	r6, r3, #4294967295
 8020a9a:	9603      	str	r6, [sp, #12]
 8020a9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020aa0:	2e00      	cmp	r6, #0
 8020aa2:	f177 0600 	sbcs.w	r6, r7, #0
 8020aa6:	eba8 0104 	sub.w	r1, r8, r4
 8020aaa:	eb09 0004 	add.w	r0, r9, r4
 8020aae:	da05      	bge.n	8020abc <__strftime+0x6dc>
 8020ab0:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8020ab4:	f143 33ff 	adc.w	r3, r3, #4294967295
 8020ab8:	9602      	str	r6, [sp, #8]
 8020aba:	9303      	str	r3, [sp, #12]
 8020abc:	9b02      	ldr	r3, [sp, #8]
 8020abe:	089e      	lsrs	r6, r3, #2
 8020ac0:	9b03      	ldr	r3, [sp, #12]
 8020ac2:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8020ac6:	f10c 32ff 	add.w	r2, ip, #4294967295
 8020aca:	109f      	asrs	r7, r3, #2
 8020acc:	2364      	movs	r3, #100	; 0x64
 8020ace:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ad2:	1af6      	subs	r6, r6, r3
 8020ad4:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8020ad8:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8020adc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8020ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ae4:	18f6      	adds	r6, r6, r3
 8020ae6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020aea:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8020aee:	f240 136d 	movw	r3, #365	; 0x16d
 8020af2:	fb03 fc0c 	mul.w	ip, r3, ip
 8020af6:	69eb      	ldr	r3, [r5, #28]
 8020af8:	eb16 060c 	adds.w	r6, r6, ip
 8020afc:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8020b00:	18f6      	adds	r6, r6, r3
 8020b02:	f04f 0c18 	mov.w	ip, #24
 8020b06:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020b0a:	fba6 230c 	umull	r2, r3, r6, ip
 8020b0e:	68ae      	ldr	r6, [r5, #8]
 8020b10:	fb0c 3307 	mla	r3, ip, r7, r3
 8020b14:	1992      	adds	r2, r2, r6
 8020b16:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8020b1a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8020b1e:	fba2 670c 	umull	r6, r7, r2, ip
 8020b22:	fb0c 7703 	mla	r7, ip, r3, r7
 8020b26:	686b      	ldr	r3, [r5, #4]
 8020b28:	18f6      	adds	r6, r6, r3
 8020b2a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8020b2e:	fba6 230c 	umull	r2, r3, r6, ip
 8020b32:	682e      	ldr	r6, [r5, #0]
 8020b34:	fb0c 3307 	mla	r3, ip, r7, r3
 8020b38:	1992      	adds	r2, r2, r6
 8020b3a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8020b3e:	ebb2 020a 	subs.w	r2, r2, sl
 8020b42:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8020b46:	e9cd 2300 	strd	r2, r3, [sp]
 8020b4a:	4a14      	ldr	r2, [pc, #80]	; (8020b9c <__strftime+0x7bc>)
 8020b4c:	f001 fc16 	bl	802237c <sniprintf>
 8020b50:	e606      	b.n	8020760 <__strftime+0x380>
 8020b52:	f04f 0a00 	mov.w	sl, #0
 8020b56:	e796      	b.n	8020a86 <__strftime+0x6a6>
 8020b58:	682b      	ldr	r3, [r5, #0]
 8020b5a:	e66a      	b.n	8020832 <__strftime+0x452>
 8020b5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8020b60:	42a3      	cmp	r3, r4
 8020b62:	f67f ac6c 	bls.w	802043e <__strftime+0x5e>
 8020b66:	2309      	movs	r3, #9
 8020b68:	e740      	b.n	80209ec <__strftime+0x60c>
 8020b6a:	682b      	ldr	r3, [r5, #0]
 8020b6c:	9301      	str	r3, [sp, #4]
 8020b6e:	686b      	ldr	r3, [r5, #4]
 8020b70:	9300      	str	r3, [sp, #0]
 8020b72:	4a0b      	ldr	r2, [pc, #44]	; (8020ba0 <__strftime+0x7c0>)
 8020b74:	68ab      	ldr	r3, [r5, #8]
 8020b76:	e5e0      	b.n	802073a <__strftime+0x35a>
 8020b78:	fffff894 	.word	0xfffff894
 8020b7c:	fffff895 	.word	0xfffff895
 8020b80:	08028b8f 	.word	0x08028b8f
 8020b84:	08028b70 	.word	0x08028b70
 8020b88:	08028b7e 	.word	0x08028b7e
 8020b8c:	08028b93 	.word	0x08028b93
 8020b90:	08028ce4 	.word	0x08028ce4
 8020b94:	08028e59 	.word	0x08028e59
 8020b98:	08028ba2 	.word	0x08028ba2
 8020b9c:	08028b98 	.word	0x08028b98
 8020ba0:	08028b9d 	.word	0x08028b9d
 8020ba4:	f108 33ff 	add.w	r3, r8, #4294967295
 8020ba8:	42a3      	cmp	r3, r4
 8020baa:	f67f ac48 	bls.w	802043e <__strftime+0x5e>
 8020bae:	69ab      	ldr	r3, [r5, #24]
 8020bb0:	eb09 0204 	add.w	r2, r9, r4
 8020bb4:	3401      	adds	r4, #1
 8020bb6:	b913      	cbnz	r3, 8020bbe <__strftime+0x7de>
 8020bb8:	2337      	movs	r3, #55	; 0x37
 8020bba:	7013      	strb	r3, [r2, #0]
 8020bbc:	e512      	b.n	80205e4 <__strftime+0x204>
 8020bbe:	3330      	adds	r3, #48	; 0x30
 8020bc0:	e7fb      	b.n	8020bba <__strftime+0x7da>
 8020bc2:	69eb      	ldr	r3, [r5, #28]
 8020bc4:	69aa      	ldr	r2, [r5, #24]
 8020bc6:	3307      	adds	r3, #7
 8020bc8:	1a9b      	subs	r3, r3, r2
 8020bca:	2207      	movs	r2, #7
 8020bcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8020bd0:	e62f      	b.n	8020832 <__strftime+0x452>
 8020bd2:	4628      	mov	r0, r5
 8020bd4:	f7ff fba2 	bl	802031c <iso_year_adjust>
 8020bd8:	69aa      	ldr	r2, [r5, #24]
 8020bda:	b132      	cbz	r2, 8020bea <__strftime+0x80a>
 8020bdc:	3a01      	subs	r2, #1
 8020bde:	2800      	cmp	r0, #0
 8020be0:	dc28      	bgt.n	8020c34 <__strftime+0x854>
 8020be2:	69eb      	ldr	r3, [r5, #28]
 8020be4:	d103      	bne.n	8020bee <__strftime+0x80e>
 8020be6:	330a      	adds	r3, #10
 8020be8:	e7ee      	b.n	8020bc8 <__strftime+0x7e8>
 8020bea:	2206      	movs	r2, #6
 8020bec:	e7f7      	b.n	8020bde <__strftime+0x7fe>
 8020bee:	6968      	ldr	r0, [r5, #20]
 8020bf0:	2800      	cmp	r0, #0
 8020bf2:	eba2 0303 	sub.w	r3, r2, r3
 8020bf6:	f240 726b 	movw	r2, #1899	; 0x76b
 8020bfa:	bfa8      	it	ge
 8020bfc:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8020c00:	4410      	add	r0, r2
 8020c02:	0782      	lsls	r2, r0, #30
 8020c04:	d105      	bne.n	8020c12 <__strftime+0x832>
 8020c06:	2264      	movs	r2, #100	; 0x64
 8020c08:	fb90 f1f2 	sdiv	r1, r0, r2
 8020c0c:	fb02 0111 	mls	r1, r2, r1, r0
 8020c10:	b971      	cbnz	r1, 8020c30 <__strftime+0x850>
 8020c12:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020c16:	fb90 f2f1 	sdiv	r2, r0, r1
 8020c1a:	fb01 0212 	mls	r2, r1, r2, r0
 8020c1e:	fab2 f282 	clz	r2, r2
 8020c22:	0952      	lsrs	r2, r2, #5
 8020c24:	1a9a      	subs	r2, r3, r2
 8020c26:	2a05      	cmp	r2, #5
 8020c28:	bfb4      	ite	lt
 8020c2a:	2335      	movlt	r3, #53	; 0x35
 8020c2c:	2334      	movge	r3, #52	; 0x34
 8020c2e:	e600      	b.n	8020832 <__strftime+0x452>
 8020c30:	2201      	movs	r2, #1
 8020c32:	e7f7      	b.n	8020c24 <__strftime+0x844>
 8020c34:	2301      	movs	r3, #1
 8020c36:	e5fc      	b.n	8020832 <__strftime+0x452>
 8020c38:	f108 33ff 	add.w	r3, r8, #4294967295
 8020c3c:	42a3      	cmp	r3, r4
 8020c3e:	f67f abfe 	bls.w	802043e <__strftime+0x5e>
 8020c42:	69ab      	ldr	r3, [r5, #24]
 8020c44:	3330      	adds	r3, #48	; 0x30
 8020c46:	e6d1      	b.n	80209ec <__strftime+0x60c>
 8020c48:	69ab      	ldr	r3, [r5, #24]
 8020c4a:	b13b      	cbz	r3, 8020c5c <__strftime+0x87c>
 8020c4c:	3b01      	subs	r3, #1
 8020c4e:	69ea      	ldr	r2, [r5, #28]
 8020c50:	3207      	adds	r2, #7
 8020c52:	1ad2      	subs	r2, r2, r3
 8020c54:	2307      	movs	r3, #7
 8020c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c5a:	e5ea      	b.n	8020832 <__strftime+0x452>
 8020c5c:	2306      	movs	r3, #6
 8020c5e:	e7f6      	b.n	8020c4e <__strftime+0x86e>
 8020c60:	6968      	ldr	r0, [r5, #20]
 8020c62:	2800      	cmp	r0, #0
 8020c64:	db05      	blt.n	8020c72 <__strftime+0x892>
 8020c66:	2264      	movs	r2, #100	; 0x64
 8020c68:	fb90 f3f2 	sdiv	r3, r0, r2
 8020c6c:	fb03 0312 	mls	r3, r3, r2, r0
 8020c70:	e5df      	b.n	8020832 <__strftime+0x452>
 8020c72:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020c76:	f000 fcf1 	bl	802165c <abs>
 8020c7a:	e7f4      	b.n	8020c66 <__strftime+0x886>
 8020c7c:	696b      	ldr	r3, [r5, #20]
 8020c7e:	4a4c      	ldr	r2, [pc, #304]	; (8020db0 <__strftime+0x9d0>)
 8020c80:	4293      	cmp	r3, r2
 8020c82:	da09      	bge.n	8020c98 <__strftime+0x8b8>
 8020c84:	212d      	movs	r1, #45	; 0x2d
 8020c86:	f88d 1020 	strb.w	r1, [sp, #32]
 8020c8a:	eba2 0a03 	sub.w	sl, r2, r3
 8020c8e:	b106      	cbz	r6, 8020c92 <__strftime+0x8b2>
 8020c90:	3e01      	subs	r6, #1
 8020c92:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8020c96:	e00b      	b.n	8020cb0 <__strftime+0x8d0>
 8020c98:	2f2b      	cmp	r7, #43	; 0x2b
 8020c9a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8020c9e:	d106      	bne.n	8020cae <__strftime+0x8ce>
 8020ca0:	f242 730f 	movw	r3, #9999	; 0x270f
 8020ca4:	459a      	cmp	sl, r3
 8020ca6:	d902      	bls.n	8020cae <__strftime+0x8ce>
 8020ca8:	f88d 7020 	strb.w	r7, [sp, #32]
 8020cac:	e7ef      	b.n	8020c8e <__strftime+0x8ae>
 8020cae:	ab08      	add	r3, sp, #32
 8020cb0:	2225      	movs	r2, #37	; 0x25
 8020cb2:	701a      	strb	r2, [r3, #0]
 8020cb4:	b937      	cbnz	r7, 8020cc4 <__strftime+0x8e4>
 8020cb6:	1c58      	adds	r0, r3, #1
 8020cb8:	493e      	ldr	r1, [pc, #248]	; (8020db4 <__strftime+0x9d4>)
 8020cba:	f001 fbbf 	bl	802243c <strcpy>
 8020cbe:	f8cd a000 	str.w	sl, [sp]
 8020cc2:	e665      	b.n	8020990 <__strftime+0x5b0>
 8020cc4:	2230      	movs	r2, #48	; 0x30
 8020cc6:	1c98      	adds	r0, r3, #2
 8020cc8:	705a      	strb	r2, [r3, #1]
 8020cca:	e7f5      	b.n	8020cb8 <__strftime+0x8d8>
 8020ccc:	6a2b      	ldr	r3, [r5, #32]
 8020cce:	2b00      	cmp	r3, #0
 8020cd0:	f6ff ac88 	blt.w	80205e4 <__strftime+0x204>
 8020cd4:	f000 f9c6 	bl	8021064 <__tz_lock>
 8020cd8:	9b04      	ldr	r3, [sp, #16]
 8020cda:	b90b      	cbnz	r3, 8020ce0 <__strftime+0x900>
 8020cdc:	f000 f9ce 	bl	802107c <_tzset_unlocked>
 8020ce0:	f000 fd8a 	bl	80217f8 <__gettzinfo>
 8020ce4:	6a2b      	ldr	r3, [r5, #32]
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	bfcc      	ite	gt
 8020cea:	2350      	movgt	r3, #80	; 0x50
 8020cec:	2328      	movle	r3, #40	; 0x28
 8020cee:	eb09 0704 	add.w	r7, r9, r4
 8020cf2:	58c6      	ldr	r6, [r0, r3]
 8020cf4:	f000 f9bc 	bl	8021070 <__tz_unlock>
 8020cf8:	4276      	negs	r6, r6
 8020cfa:	233c      	movs	r3, #60	; 0x3c
 8020cfc:	fb96 f0f3 	sdiv	r0, r6, r3
 8020d00:	f000 fe3e 	bl	8021980 <labs>
 8020d04:	233c      	movs	r3, #60	; 0x3c
 8020d06:	eba8 0a04 	sub.w	sl, r8, r4
 8020d0a:	fb90 f2f3 	sdiv	r2, r0, r3
 8020d0e:	fb02 0013 	mls	r0, r2, r3, r0
 8020d12:	9000      	str	r0, [sp, #0]
 8020d14:	4a28      	ldr	r2, [pc, #160]	; (8020db8 <__strftime+0x9d8>)
 8020d16:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8020d1a:	4651      	mov	r1, sl
 8020d1c:	4638      	mov	r0, r7
 8020d1e:	fb96 f3f3 	sdiv	r3, r6, r3
 8020d22:	f001 fb2b 	bl	802237c <sniprintf>
 8020d26:	2800      	cmp	r0, #0
 8020d28:	f6ff ab89 	blt.w	802043e <__strftime+0x5e>
 8020d2c:	4404      	add	r4, r0
 8020d2e:	45a0      	cmp	r8, r4
 8020d30:	f67f ab85 	bls.w	802043e <__strftime+0x5e>
 8020d34:	2301      	movs	r3, #1
 8020d36:	9304      	str	r3, [sp, #16]
 8020d38:	e454      	b.n	80205e4 <__strftime+0x204>
 8020d3a:	6a2b      	ldr	r3, [r5, #32]
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	f6ff ac51 	blt.w	80205e4 <__strftime+0x204>
 8020d42:	f000 f98f 	bl	8021064 <__tz_lock>
 8020d46:	9b04      	ldr	r3, [sp, #16]
 8020d48:	b90b      	cbnz	r3, 8020d4e <__strftime+0x96e>
 8020d4a:	f000 f997 	bl	802107c <_tzset_unlocked>
 8020d4e:	6a2b      	ldr	r3, [r5, #32]
 8020d50:	4a1a      	ldr	r2, [pc, #104]	; (8020dbc <__strftime+0x9dc>)
 8020d52:	2b00      	cmp	r3, #0
 8020d54:	bfd4      	ite	le
 8020d56:	2300      	movle	r3, #0
 8020d58:	2301      	movgt	r3, #1
 8020d5a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8020d5e:	4630      	mov	r0, r6
 8020d60:	f7df fa6c 	bl	800023c <strlen>
 8020d64:	3e01      	subs	r6, #1
 8020d66:	4420      	add	r0, r4
 8020d68:	f108 33ff 	add.w	r3, r8, #4294967295
 8020d6c:	42a0      	cmp	r0, r4
 8020d6e:	d102      	bne.n	8020d76 <__strftime+0x996>
 8020d70:	f000 f97e 	bl	8021070 <__tz_unlock>
 8020d74:	e7de      	b.n	8020d34 <__strftime+0x954>
 8020d76:	42a3      	cmp	r3, r4
 8020d78:	d905      	bls.n	8020d86 <__strftime+0x9a6>
 8020d7a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020d7e:	f809 2004 	strb.w	r2, [r9, r4]
 8020d82:	3401      	adds	r4, #1
 8020d84:	e7f2      	b.n	8020d6c <__strftime+0x98c>
 8020d86:	f000 f973 	bl	8021070 <__tz_unlock>
 8020d8a:	f7ff bb58 	b.w	802043e <__strftime+0x5e>
 8020d8e:	f108 33ff 	add.w	r3, r8, #4294967295
 8020d92:	42a3      	cmp	r3, r4
 8020d94:	f67f ab53 	bls.w	802043e <__strftime+0x5e>
 8020d98:	2325      	movs	r3, #37	; 0x25
 8020d9a:	e627      	b.n	80209ec <__strftime+0x60c>
 8020d9c:	f1b8 0f00 	cmp.w	r8, #0
 8020da0:	d002      	beq.n	8020da8 <__strftime+0x9c8>
 8020da2:	2300      	movs	r3, #0
 8020da4:	f809 3004 	strb.w	r3, [r9, r4]
 8020da8:	4620      	mov	r0, r4
 8020daa:	b011      	add	sp, #68	; 0x44
 8020dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020db0:	fffff894 	.word	0xfffff894
 8020db4:	08028b8f 	.word	0x08028b8f
 8020db8:	08028bac 	.word	0x08028bac
 8020dbc:	2000016c 	.word	0x2000016c

08020dc0 <strftime>:
 8020dc0:	b513      	push	{r0, r1, r4, lr}
 8020dc2:	4c03      	ldr	r4, [pc, #12]	; (8020dd0 <strftime+0x10>)
 8020dc4:	9400      	str	r4, [sp, #0]
 8020dc6:	f7ff fb0b 	bl	80203e0 <__strftime>
 8020dca:	b002      	add	sp, #8
 8020dcc:	bd10      	pop	{r4, pc}
 8020dce:	bf00      	nop
 8020dd0:	200001d0 	.word	0x200001d0

08020dd4 <strstr>:
 8020dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020dd6:	780c      	ldrb	r4, [r1, #0]
 8020dd8:	b164      	cbz	r4, 8020df4 <strstr+0x20>
 8020dda:	4603      	mov	r3, r0
 8020ddc:	781a      	ldrb	r2, [r3, #0]
 8020dde:	4618      	mov	r0, r3
 8020de0:	1c5e      	adds	r6, r3, #1
 8020de2:	b90a      	cbnz	r2, 8020de8 <strstr+0x14>
 8020de4:	4610      	mov	r0, r2
 8020de6:	e005      	b.n	8020df4 <strstr+0x20>
 8020de8:	4294      	cmp	r4, r2
 8020dea:	d108      	bne.n	8020dfe <strstr+0x2a>
 8020dec:	460d      	mov	r5, r1
 8020dee:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8020df2:	b902      	cbnz	r2, 8020df6 <strstr+0x22>
 8020df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020df6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8020dfa:	4297      	cmp	r7, r2
 8020dfc:	d0f7      	beq.n	8020dee <strstr+0x1a>
 8020dfe:	4633      	mov	r3, r6
 8020e00:	e7ec      	b.n	8020ddc <strstr+0x8>
	...

08020e04 <_strtoul_l.isra.0>:
 8020e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020e08:	4e3b      	ldr	r6, [pc, #236]	; (8020ef8 <_strtoul_l.isra.0+0xf4>)
 8020e0a:	4686      	mov	lr, r0
 8020e0c:	468c      	mov	ip, r1
 8020e0e:	4660      	mov	r0, ip
 8020e10:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020e14:	5da5      	ldrb	r5, [r4, r6]
 8020e16:	f015 0508 	ands.w	r5, r5, #8
 8020e1a:	d1f8      	bne.n	8020e0e <_strtoul_l.isra.0+0xa>
 8020e1c:	2c2d      	cmp	r4, #45	; 0x2d
 8020e1e:	d134      	bne.n	8020e8a <_strtoul_l.isra.0+0x86>
 8020e20:	f89c 4000 	ldrb.w	r4, [ip]
 8020e24:	f04f 0801 	mov.w	r8, #1
 8020e28:	f100 0c02 	add.w	ip, r0, #2
 8020e2c:	2b00      	cmp	r3, #0
 8020e2e:	d05e      	beq.n	8020eee <_strtoul_l.isra.0+0xea>
 8020e30:	2b10      	cmp	r3, #16
 8020e32:	d10c      	bne.n	8020e4e <_strtoul_l.isra.0+0x4a>
 8020e34:	2c30      	cmp	r4, #48	; 0x30
 8020e36:	d10a      	bne.n	8020e4e <_strtoul_l.isra.0+0x4a>
 8020e38:	f89c 0000 	ldrb.w	r0, [ip]
 8020e3c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020e40:	2858      	cmp	r0, #88	; 0x58
 8020e42:	d14f      	bne.n	8020ee4 <_strtoul_l.isra.0+0xe0>
 8020e44:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8020e48:	2310      	movs	r3, #16
 8020e4a:	f10c 0c02 	add.w	ip, ip, #2
 8020e4e:	f04f 37ff 	mov.w	r7, #4294967295
 8020e52:	2500      	movs	r5, #0
 8020e54:	fbb7 f7f3 	udiv	r7, r7, r3
 8020e58:	fb03 f907 	mul.w	r9, r3, r7
 8020e5c:	ea6f 0909 	mvn.w	r9, r9
 8020e60:	4628      	mov	r0, r5
 8020e62:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8020e66:	2e09      	cmp	r6, #9
 8020e68:	d818      	bhi.n	8020e9c <_strtoul_l.isra.0+0x98>
 8020e6a:	4634      	mov	r4, r6
 8020e6c:	42a3      	cmp	r3, r4
 8020e6e:	dd24      	ble.n	8020eba <_strtoul_l.isra.0+0xb6>
 8020e70:	2d00      	cmp	r5, #0
 8020e72:	db1f      	blt.n	8020eb4 <_strtoul_l.isra.0+0xb0>
 8020e74:	4287      	cmp	r7, r0
 8020e76:	d31d      	bcc.n	8020eb4 <_strtoul_l.isra.0+0xb0>
 8020e78:	d101      	bne.n	8020e7e <_strtoul_l.isra.0+0x7a>
 8020e7a:	45a1      	cmp	r9, r4
 8020e7c:	db1a      	blt.n	8020eb4 <_strtoul_l.isra.0+0xb0>
 8020e7e:	fb00 4003 	mla	r0, r0, r3, r4
 8020e82:	2501      	movs	r5, #1
 8020e84:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020e88:	e7eb      	b.n	8020e62 <_strtoul_l.isra.0+0x5e>
 8020e8a:	2c2b      	cmp	r4, #43	; 0x2b
 8020e8c:	bf08      	it	eq
 8020e8e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8020e92:	46a8      	mov	r8, r5
 8020e94:	bf08      	it	eq
 8020e96:	f100 0c02 	addeq.w	ip, r0, #2
 8020e9a:	e7c7      	b.n	8020e2c <_strtoul_l.isra.0+0x28>
 8020e9c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8020ea0:	2e19      	cmp	r6, #25
 8020ea2:	d801      	bhi.n	8020ea8 <_strtoul_l.isra.0+0xa4>
 8020ea4:	3c37      	subs	r4, #55	; 0x37
 8020ea6:	e7e1      	b.n	8020e6c <_strtoul_l.isra.0+0x68>
 8020ea8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8020eac:	2e19      	cmp	r6, #25
 8020eae:	d804      	bhi.n	8020eba <_strtoul_l.isra.0+0xb6>
 8020eb0:	3c57      	subs	r4, #87	; 0x57
 8020eb2:	e7db      	b.n	8020e6c <_strtoul_l.isra.0+0x68>
 8020eb4:	f04f 35ff 	mov.w	r5, #4294967295
 8020eb8:	e7e4      	b.n	8020e84 <_strtoul_l.isra.0+0x80>
 8020eba:	2d00      	cmp	r5, #0
 8020ebc:	da07      	bge.n	8020ece <_strtoul_l.isra.0+0xca>
 8020ebe:	2322      	movs	r3, #34	; 0x22
 8020ec0:	f8ce 3000 	str.w	r3, [lr]
 8020ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8020ec8:	b942      	cbnz	r2, 8020edc <_strtoul_l.isra.0+0xd8>
 8020eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ece:	f1b8 0f00 	cmp.w	r8, #0
 8020ed2:	d000      	beq.n	8020ed6 <_strtoul_l.isra.0+0xd2>
 8020ed4:	4240      	negs	r0, r0
 8020ed6:	2a00      	cmp	r2, #0
 8020ed8:	d0f7      	beq.n	8020eca <_strtoul_l.isra.0+0xc6>
 8020eda:	b10d      	cbz	r5, 8020ee0 <_strtoul_l.isra.0+0xdc>
 8020edc:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020ee0:	6011      	str	r1, [r2, #0]
 8020ee2:	e7f2      	b.n	8020eca <_strtoul_l.isra.0+0xc6>
 8020ee4:	2430      	movs	r4, #48	; 0x30
 8020ee6:	2b00      	cmp	r3, #0
 8020ee8:	d1b1      	bne.n	8020e4e <_strtoul_l.isra.0+0x4a>
 8020eea:	2308      	movs	r3, #8
 8020eec:	e7af      	b.n	8020e4e <_strtoul_l.isra.0+0x4a>
 8020eee:	2c30      	cmp	r4, #48	; 0x30
 8020ef0:	d0a2      	beq.n	8020e38 <_strtoul_l.isra.0+0x34>
 8020ef2:	230a      	movs	r3, #10
 8020ef4:	e7ab      	b.n	8020e4e <_strtoul_l.isra.0+0x4a>
 8020ef6:	bf00      	nop
 8020ef8:	08028e59 	.word	0x08028e59

08020efc <_strtoul_r>:
 8020efc:	f7ff bf82 	b.w	8020e04 <_strtoul_l.isra.0>

08020f00 <strtoul>:
 8020f00:	4613      	mov	r3, r2
 8020f02:	460a      	mov	r2, r1
 8020f04:	4601      	mov	r1, r0
 8020f06:	4802      	ldr	r0, [pc, #8]	; (8020f10 <strtoul+0x10>)
 8020f08:	6800      	ldr	r0, [r0, #0]
 8020f0a:	f7ff bf7b 	b.w	8020e04 <_strtoul_l.isra.0>
 8020f0e:	bf00      	nop
 8020f10:	20000108 	.word	0x20000108

08020f14 <__tzcalc_limits>:
 8020f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f18:	4680      	mov	r8, r0
 8020f1a:	f000 fc6d 	bl	80217f8 <__gettzinfo>
 8020f1e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8020f22:	4598      	cmp	r8, r3
 8020f24:	f340 8098 	ble.w	8021058 <__tzcalc_limits+0x144>
 8020f28:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8020f2c:	4443      	add	r3, r8
 8020f2e:	109b      	asrs	r3, r3, #2
 8020f30:	f240 126d 	movw	r2, #365	; 0x16d
 8020f34:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8020f38:	fb02 3505 	mla	r5, r2, r5, r3
 8020f3c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8020f40:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8020f44:	fb93 f3f2 	sdiv	r3, r3, r2
 8020f48:	441d      	add	r5, r3
 8020f4a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8020f4e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8020f52:	fb98 f7f3 	sdiv	r7, r8, r3
 8020f56:	fb03 8717 	mls	r7, r3, r7, r8
 8020f5a:	4442      	add	r2, r8
 8020f5c:	fab7 fc87 	clz	ip, r7
 8020f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8020f64:	f008 0303 	and.w	r3, r8, #3
 8020f68:	4415      	add	r5, r2
 8020f6a:	2264      	movs	r2, #100	; 0x64
 8020f6c:	f8c0 8004 	str.w	r8, [r0, #4]
 8020f70:	fb98 f6f2 	sdiv	r6, r8, r2
 8020f74:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020f78:	fb02 8616 	mls	r6, r2, r6, r8
 8020f7c:	4604      	mov	r4, r0
 8020f7e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8020f82:	9300      	str	r3, [sp, #0]
 8020f84:	f04f 0e07 	mov.w	lr, #7
 8020f88:	7a22      	ldrb	r2, [r4, #8]
 8020f8a:	6963      	ldr	r3, [r4, #20]
 8020f8c:	2a4a      	cmp	r2, #74	; 0x4a
 8020f8e:	d128      	bne.n	8020fe2 <__tzcalc_limits+0xce>
 8020f90:	9900      	ldr	r1, [sp, #0]
 8020f92:	18ea      	adds	r2, r5, r3
 8020f94:	b901      	cbnz	r1, 8020f98 <__tzcalc_limits+0x84>
 8020f96:	b906      	cbnz	r6, 8020f9a <__tzcalc_limits+0x86>
 8020f98:	bb0f      	cbnz	r7, 8020fde <__tzcalc_limits+0xca>
 8020f9a:	2b3b      	cmp	r3, #59	; 0x3b
 8020f9c:	bfd4      	ite	le
 8020f9e:	2300      	movle	r3, #0
 8020fa0:	2301      	movgt	r3, #1
 8020fa2:	4413      	add	r3, r2
 8020fa4:	1e5a      	subs	r2, r3, #1
 8020fa6:	69a3      	ldr	r3, [r4, #24]
 8020fa8:	492c      	ldr	r1, [pc, #176]	; (802105c <__tzcalc_limits+0x148>)
 8020faa:	fb01 3202 	mla	r2, r1, r2, r3
 8020fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020fb0:	4413      	add	r3, r2
 8020fb2:	461a      	mov	r2, r3
 8020fb4:	17db      	asrs	r3, r3, #31
 8020fb6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8020fba:	3428      	adds	r4, #40	; 0x28
 8020fbc:	45a3      	cmp	fp, r4
 8020fbe:	d1e3      	bne.n	8020f88 <__tzcalc_limits+0x74>
 8020fc0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8020fc4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8020fc8:	4294      	cmp	r4, r2
 8020fca:	eb75 0303 	sbcs.w	r3, r5, r3
 8020fce:	bfb4      	ite	lt
 8020fd0:	2301      	movlt	r3, #1
 8020fd2:	2300      	movge	r3, #0
 8020fd4:	6003      	str	r3, [r0, #0]
 8020fd6:	2001      	movs	r0, #1
 8020fd8:	b003      	add	sp, #12
 8020fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fde:	2300      	movs	r3, #0
 8020fe0:	e7df      	b.n	8020fa2 <__tzcalc_limits+0x8e>
 8020fe2:	2a44      	cmp	r2, #68	; 0x44
 8020fe4:	d101      	bne.n	8020fea <__tzcalc_limits+0xd6>
 8020fe6:	18ea      	adds	r2, r5, r3
 8020fe8:	e7dd      	b.n	8020fa6 <__tzcalc_limits+0x92>
 8020fea:	9a00      	ldr	r2, [sp, #0]
 8020fec:	bb72      	cbnz	r2, 802104c <__tzcalc_limits+0x138>
 8020fee:	2e00      	cmp	r6, #0
 8020ff0:	bf0c      	ite	eq
 8020ff2:	46e0      	moveq	r8, ip
 8020ff4:	f04f 0801 	movne.w	r8, #1
 8020ff8:	4919      	ldr	r1, [pc, #100]	; (8021060 <__tzcalc_limits+0x14c>)
 8020ffa:	68e2      	ldr	r2, [r4, #12]
 8020ffc:	9201      	str	r2, [sp, #4]
 8020ffe:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8021002:	fb0a 1808 	mla	r8, sl, r8, r1
 8021006:	462a      	mov	r2, r5
 8021008:	f04f 0900 	mov.w	r9, #0
 802100c:	f1a8 0804 	sub.w	r8, r8, #4
 8021010:	9901      	ldr	r1, [sp, #4]
 8021012:	f109 0901 	add.w	r9, r9, #1
 8021016:	4549      	cmp	r1, r9
 8021018:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 802101c:	dc18      	bgt.n	8021050 <__tzcalc_limits+0x13c>
 802101e:	f102 0804 	add.w	r8, r2, #4
 8021022:	fb98 f9fe 	sdiv	r9, r8, lr
 8021026:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 802102a:	eba8 0909 	sub.w	r9, r8, r9
 802102e:	ebb3 0909 	subs.w	r9, r3, r9
 8021032:	6923      	ldr	r3, [r4, #16]
 8021034:	f103 33ff 	add.w	r3, r3, #4294967295
 8021038:	bf48      	it	mi
 802103a:	f109 0907 	addmi.w	r9, r9, #7
 802103e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021042:	444b      	add	r3, r9
 8021044:	4553      	cmp	r3, sl
 8021046:	da05      	bge.n	8021054 <__tzcalc_limits+0x140>
 8021048:	441a      	add	r2, r3
 802104a:	e7ac      	b.n	8020fa6 <__tzcalc_limits+0x92>
 802104c:	46e0      	mov	r8, ip
 802104e:	e7d3      	b.n	8020ff8 <__tzcalc_limits+0xe4>
 8021050:	4452      	add	r2, sl
 8021052:	e7dd      	b.n	8021010 <__tzcalc_limits+0xfc>
 8021054:	3b07      	subs	r3, #7
 8021056:	e7f5      	b.n	8021044 <__tzcalc_limits+0x130>
 8021058:	2000      	movs	r0, #0
 802105a:	e7bd      	b.n	8020fd8 <__tzcalc_limits+0xc4>
 802105c:	00015180 	.word	0x00015180
 8021060:	08028aa0 	.word	0x08028aa0

08021064 <__tz_lock>:
 8021064:	4801      	ldr	r0, [pc, #4]	; (802106c <__tz_lock+0x8>)
 8021066:	f7fe beb9 	b.w	801fddc <__retarget_lock_acquire>
 802106a:	bf00      	nop
 802106c:	20000f2b 	.word	0x20000f2b

08021070 <__tz_unlock>:
 8021070:	4801      	ldr	r0, [pc, #4]	; (8021078 <__tz_unlock+0x8>)
 8021072:	f7fe beb5 	b.w	801fde0 <__retarget_lock_release>
 8021076:	bf00      	nop
 8021078:	20000f2b 	.word	0x20000f2b

0802107c <_tzset_unlocked>:
 802107c:	4b01      	ldr	r3, [pc, #4]	; (8021084 <_tzset_unlocked+0x8>)
 802107e:	6818      	ldr	r0, [r3, #0]
 8021080:	f000 b802 	b.w	8021088 <_tzset_unlocked_r>
 8021084:	20000108 	.word	0x20000108

08021088 <_tzset_unlocked_r>:
 8021088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802108c:	b08d      	sub	sp, #52	; 0x34
 802108e:	4607      	mov	r7, r0
 8021090:	f000 fbb2 	bl	80217f8 <__gettzinfo>
 8021094:	49ae      	ldr	r1, [pc, #696]	; (8021350 <_tzset_unlocked_r+0x2c8>)
 8021096:	4eaf      	ldr	r6, [pc, #700]	; (8021354 <_tzset_unlocked_r+0x2cc>)
 8021098:	4605      	mov	r5, r0
 802109a:	4638      	mov	r0, r7
 802109c:	f000 fba4 	bl	80217e8 <_getenv_r>
 80210a0:	4604      	mov	r4, r0
 80210a2:	b970      	cbnz	r0, 80210c2 <_tzset_unlocked_r+0x3a>
 80210a4:	4bac      	ldr	r3, [pc, #688]	; (8021358 <_tzset_unlocked_r+0x2d0>)
 80210a6:	4aad      	ldr	r2, [pc, #692]	; (802135c <_tzset_unlocked_r+0x2d4>)
 80210a8:	6018      	str	r0, [r3, #0]
 80210aa:	4bad      	ldr	r3, [pc, #692]	; (8021360 <_tzset_unlocked_r+0x2d8>)
 80210ac:	6018      	str	r0, [r3, #0]
 80210ae:	4bad      	ldr	r3, [pc, #692]	; (8021364 <_tzset_unlocked_r+0x2dc>)
 80210b0:	6830      	ldr	r0, [r6, #0]
 80210b2:	e9c3 2200 	strd	r2, r2, [r3]
 80210b6:	f7fe ff01 	bl	801febc <free>
 80210ba:	6034      	str	r4, [r6, #0]
 80210bc:	b00d      	add	sp, #52	; 0x34
 80210be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210c2:	6831      	ldr	r1, [r6, #0]
 80210c4:	2900      	cmp	r1, #0
 80210c6:	d15f      	bne.n	8021188 <_tzset_unlocked_r+0x100>
 80210c8:	6830      	ldr	r0, [r6, #0]
 80210ca:	f7fe fef7 	bl	801febc <free>
 80210ce:	4620      	mov	r0, r4
 80210d0:	f7df f8b4 	bl	800023c <strlen>
 80210d4:	1c41      	adds	r1, r0, #1
 80210d6:	4638      	mov	r0, r7
 80210d8:	f7fe ff6e 	bl	801ffb8 <_malloc_r>
 80210dc:	6030      	str	r0, [r6, #0]
 80210de:	2800      	cmp	r0, #0
 80210e0:	d157      	bne.n	8021192 <_tzset_unlocked_r+0x10a>
 80210e2:	7823      	ldrb	r3, [r4, #0]
 80210e4:	4aa0      	ldr	r2, [pc, #640]	; (8021368 <_tzset_unlocked_r+0x2e0>)
 80210e6:	49a1      	ldr	r1, [pc, #644]	; (802136c <_tzset_unlocked_r+0x2e4>)
 80210e8:	2b3a      	cmp	r3, #58	; 0x3a
 80210ea:	bf08      	it	eq
 80210ec:	3401      	addeq	r4, #1
 80210ee:	ae0a      	add	r6, sp, #40	; 0x28
 80210f0:	4633      	mov	r3, r6
 80210f2:	4620      	mov	r0, r4
 80210f4:	f001 f976 	bl	80223e4 <siscanf>
 80210f8:	2800      	cmp	r0, #0
 80210fa:	dddf      	ble.n	80210bc <_tzset_unlocked_r+0x34>
 80210fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210fe:	18e7      	adds	r7, r4, r3
 8021100:	5ce3      	ldrb	r3, [r4, r3]
 8021102:	2b2d      	cmp	r3, #45	; 0x2d
 8021104:	d149      	bne.n	802119a <_tzset_unlocked_r+0x112>
 8021106:	3701      	adds	r7, #1
 8021108:	f04f 34ff 	mov.w	r4, #4294967295
 802110c:	f10d 0a20 	add.w	sl, sp, #32
 8021110:	f10d 0b1e 	add.w	fp, sp, #30
 8021114:	f04f 0800 	mov.w	r8, #0
 8021118:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 802111c:	4994      	ldr	r1, [pc, #592]	; (8021370 <_tzset_unlocked_r+0x2e8>)
 802111e:	9603      	str	r6, [sp, #12]
 8021120:	f8cd b000 	str.w	fp, [sp]
 8021124:	4633      	mov	r3, r6
 8021126:	aa07      	add	r2, sp, #28
 8021128:	4638      	mov	r0, r7
 802112a:	f8ad 801e 	strh.w	r8, [sp, #30]
 802112e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8021132:	f001 f957 	bl	80223e4 <siscanf>
 8021136:	4540      	cmp	r0, r8
 8021138:	ddc0      	ble.n	80210bc <_tzset_unlocked_r+0x34>
 802113a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802113e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021142:	f8df 9238 	ldr.w	r9, [pc, #568]	; 802137c <_tzset_unlocked_r+0x2f4>
 8021146:	213c      	movs	r1, #60	; 0x3c
 8021148:	fb01 2203 	mla	r2, r1, r3, r2
 802114c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021150:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021154:	fb01 2303 	mla	r3, r1, r3, r2
 8021158:	435c      	muls	r4, r3
 802115a:	62ac      	str	r4, [r5, #40]	; 0x28
 802115c:	4c81      	ldr	r4, [pc, #516]	; (8021364 <_tzset_unlocked_r+0x2dc>)
 802115e:	4b82      	ldr	r3, [pc, #520]	; (8021368 <_tzset_unlocked_r+0x2e0>)
 8021160:	6023      	str	r3, [r4, #0]
 8021162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021164:	4981      	ldr	r1, [pc, #516]	; (802136c <_tzset_unlocked_r+0x2e4>)
 8021166:	441f      	add	r7, r3
 8021168:	464a      	mov	r2, r9
 802116a:	4633      	mov	r3, r6
 802116c:	4638      	mov	r0, r7
 802116e:	f001 f939 	bl	80223e4 <siscanf>
 8021172:	4540      	cmp	r0, r8
 8021174:	dc16      	bgt.n	80211a4 <_tzset_unlocked_r+0x11c>
 8021176:	6823      	ldr	r3, [r4, #0]
 8021178:	6063      	str	r3, [r4, #4]
 802117a:	4b77      	ldr	r3, [pc, #476]	; (8021358 <_tzset_unlocked_r+0x2d0>)
 802117c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802117e:	601a      	str	r2, [r3, #0]
 8021180:	4b77      	ldr	r3, [pc, #476]	; (8021360 <_tzset_unlocked_r+0x2d8>)
 8021182:	f8c3 8000 	str.w	r8, [r3]
 8021186:	e799      	b.n	80210bc <_tzset_unlocked_r+0x34>
 8021188:	f7df f860 	bl	800024c <strcmp>
 802118c:	2800      	cmp	r0, #0
 802118e:	d19b      	bne.n	80210c8 <_tzset_unlocked_r+0x40>
 8021190:	e794      	b.n	80210bc <_tzset_unlocked_r+0x34>
 8021192:	4621      	mov	r1, r4
 8021194:	f001 f952 	bl	802243c <strcpy>
 8021198:	e7a3      	b.n	80210e2 <_tzset_unlocked_r+0x5a>
 802119a:	2b2b      	cmp	r3, #43	; 0x2b
 802119c:	bf08      	it	eq
 802119e:	3701      	addeq	r7, #1
 80211a0:	2401      	movs	r4, #1
 80211a2:	e7b3      	b.n	802110c <_tzset_unlocked_r+0x84>
 80211a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211a6:	f8c4 9004 	str.w	r9, [r4, #4]
 80211aa:	18fc      	adds	r4, r7, r3
 80211ac:	5cfb      	ldrb	r3, [r7, r3]
 80211ae:	2b2d      	cmp	r3, #45	; 0x2d
 80211b0:	f040 808b 	bne.w	80212ca <_tzset_unlocked_r+0x242>
 80211b4:	3401      	adds	r4, #1
 80211b6:	f04f 37ff 	mov.w	r7, #4294967295
 80211ba:	2300      	movs	r3, #0
 80211bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80211c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80211c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80211c8:	930a      	str	r3, [sp, #40]	; 0x28
 80211ca:	e9cd a602 	strd	sl, r6, [sp, #8]
 80211ce:	e9cd b600 	strd	fp, r6, [sp]
 80211d2:	4967      	ldr	r1, [pc, #412]	; (8021370 <_tzset_unlocked_r+0x2e8>)
 80211d4:	4633      	mov	r3, r6
 80211d6:	aa07      	add	r2, sp, #28
 80211d8:	4620      	mov	r0, r4
 80211da:	f001 f903 	bl	80223e4 <siscanf>
 80211de:	2800      	cmp	r0, #0
 80211e0:	dc78      	bgt.n	80212d4 <_tzset_unlocked_r+0x24c>
 80211e2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80211e4:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80211e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211ea:	652f      	str	r7, [r5, #80]	; 0x50
 80211ec:	441c      	add	r4, r3
 80211ee:	462f      	mov	r7, r5
 80211f0:	f04f 0900 	mov.w	r9, #0
 80211f4:	7823      	ldrb	r3, [r4, #0]
 80211f6:	2b2c      	cmp	r3, #44	; 0x2c
 80211f8:	bf08      	it	eq
 80211fa:	3401      	addeq	r4, #1
 80211fc:	f894 8000 	ldrb.w	r8, [r4]
 8021200:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8021204:	d178      	bne.n	80212f8 <_tzset_unlocked_r+0x270>
 8021206:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802120a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802120e:	ab09      	add	r3, sp, #36	; 0x24
 8021210:	9300      	str	r3, [sp, #0]
 8021212:	4958      	ldr	r1, [pc, #352]	; (8021374 <_tzset_unlocked_r+0x2ec>)
 8021214:	9603      	str	r6, [sp, #12]
 8021216:	4633      	mov	r3, r6
 8021218:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802121c:	4620      	mov	r0, r4
 802121e:	f001 f8e1 	bl	80223e4 <siscanf>
 8021222:	2803      	cmp	r0, #3
 8021224:	f47f af4a 	bne.w	80210bc <_tzset_unlocked_r+0x34>
 8021228:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 802122c:	1e4b      	subs	r3, r1, #1
 802122e:	2b0b      	cmp	r3, #11
 8021230:	f63f af44 	bhi.w	80210bc <_tzset_unlocked_r+0x34>
 8021234:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021238:	1e53      	subs	r3, r2, #1
 802123a:	2b04      	cmp	r3, #4
 802123c:	f63f af3e 	bhi.w	80210bc <_tzset_unlocked_r+0x34>
 8021240:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8021244:	2b06      	cmp	r3, #6
 8021246:	f63f af39 	bhi.w	80210bc <_tzset_unlocked_r+0x34>
 802124a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802124e:	f887 8008 	strb.w	r8, [r7, #8]
 8021252:	617b      	str	r3, [r7, #20]
 8021254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021256:	eb04 0803 	add.w	r8, r4, r3
 802125a:	2302      	movs	r3, #2
 802125c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021260:	2300      	movs	r3, #0
 8021262:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021266:	f8ad 3020 	strh.w	r3, [sp, #32]
 802126a:	930a      	str	r3, [sp, #40]	; 0x28
 802126c:	f898 3000 	ldrb.w	r3, [r8]
 8021270:	2b2f      	cmp	r3, #47	; 0x2f
 8021272:	d109      	bne.n	8021288 <_tzset_unlocked_r+0x200>
 8021274:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021278:	e9cd b600 	strd	fp, r6, [sp]
 802127c:	493e      	ldr	r1, [pc, #248]	; (8021378 <_tzset_unlocked_r+0x2f0>)
 802127e:	4633      	mov	r3, r6
 8021280:	aa07      	add	r2, sp, #28
 8021282:	4640      	mov	r0, r8
 8021284:	f001 f8ae 	bl	80223e4 <siscanf>
 8021288:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802128c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021290:	213c      	movs	r1, #60	; 0x3c
 8021292:	fb01 2203 	mla	r2, r1, r3, r2
 8021296:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802129a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802129e:	fb01 2303 	mla	r3, r1, r3, r2
 80212a2:	61bb      	str	r3, [r7, #24]
 80212a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80212a6:	3728      	adds	r7, #40	; 0x28
 80212a8:	4444      	add	r4, r8
 80212aa:	f1b9 0f00 	cmp.w	r9, #0
 80212ae:	d020      	beq.n	80212f2 <_tzset_unlocked_r+0x26a>
 80212b0:	6868      	ldr	r0, [r5, #4]
 80212b2:	f7ff fe2f 	bl	8020f14 <__tzcalc_limits>
 80212b6:	4b28      	ldr	r3, [pc, #160]	; (8021358 <_tzset_unlocked_r+0x2d0>)
 80212b8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80212ba:	601a      	str	r2, [r3, #0]
 80212bc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80212be:	1a9b      	subs	r3, r3, r2
 80212c0:	4a27      	ldr	r2, [pc, #156]	; (8021360 <_tzset_unlocked_r+0x2d8>)
 80212c2:	bf18      	it	ne
 80212c4:	2301      	movne	r3, #1
 80212c6:	6013      	str	r3, [r2, #0]
 80212c8:	e6f8      	b.n	80210bc <_tzset_unlocked_r+0x34>
 80212ca:	2b2b      	cmp	r3, #43	; 0x2b
 80212cc:	bf08      	it	eq
 80212ce:	3401      	addeq	r4, #1
 80212d0:	2701      	movs	r7, #1
 80212d2:	e772      	b.n	80211ba <_tzset_unlocked_r+0x132>
 80212d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80212d8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80212dc:	213c      	movs	r1, #60	; 0x3c
 80212de:	fb01 2203 	mla	r2, r1, r3, r2
 80212e2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80212e6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80212ea:	fb01 2303 	mla	r3, r1, r3, r2
 80212ee:	435f      	muls	r7, r3
 80212f0:	e77a      	b.n	80211e8 <_tzset_unlocked_r+0x160>
 80212f2:	f04f 0901 	mov.w	r9, #1
 80212f6:	e77d      	b.n	80211f4 <_tzset_unlocked_r+0x16c>
 80212f8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80212fc:	bf06      	itte	eq
 80212fe:	3401      	addeq	r4, #1
 8021300:	4643      	moveq	r3, r8
 8021302:	2344      	movne	r3, #68	; 0x44
 8021304:	220a      	movs	r2, #10
 8021306:	a90b      	add	r1, sp, #44	; 0x2c
 8021308:	4620      	mov	r0, r4
 802130a:	9305      	str	r3, [sp, #20]
 802130c:	f7ff fdf8 	bl	8020f00 <strtoul>
 8021310:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8021314:	9b05      	ldr	r3, [sp, #20]
 8021316:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802131a:	45a0      	cmp	r8, r4
 802131c:	d114      	bne.n	8021348 <_tzset_unlocked_r+0x2c0>
 802131e:	234d      	movs	r3, #77	; 0x4d
 8021320:	f1b9 0f00 	cmp.w	r9, #0
 8021324:	d107      	bne.n	8021336 <_tzset_unlocked_r+0x2ae>
 8021326:	722b      	strb	r3, [r5, #8]
 8021328:	2103      	movs	r1, #3
 802132a:	2302      	movs	r3, #2
 802132c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8021330:	f8c5 9014 	str.w	r9, [r5, #20]
 8021334:	e791      	b.n	802125a <_tzset_unlocked_r+0x1d2>
 8021336:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802133a:	220b      	movs	r2, #11
 802133c:	2301      	movs	r3, #1
 802133e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8021342:	2300      	movs	r3, #0
 8021344:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021346:	e788      	b.n	802125a <_tzset_unlocked_r+0x1d2>
 8021348:	b280      	uxth	r0, r0
 802134a:	723b      	strb	r3, [r7, #8]
 802134c:	6178      	str	r0, [r7, #20]
 802134e:	e784      	b.n	802125a <_tzset_unlocked_r+0x1d2>
 8021350:	08028de0 	.word	0x08028de0
 8021354:	20000e84 	.word	0x20000e84
 8021358:	20000e8c 	.word	0x20000e8c
 802135c:	08028de3 	.word	0x08028de3
 8021360:	20000e88 	.word	0x20000e88
 8021364:	2000016c 	.word	0x2000016c
 8021368:	20000e77 	.word	0x20000e77
 802136c:	08028de7 	.word	0x08028de7
 8021370:	08028e0a 	.word	0x08028e0a
 8021374:	08028df6 	.word	0x08028df6
 8021378:	08028e09 	.word	0x08028e09
 802137c:	20000e6c 	.word	0x20000e6c

08021380 <_vsniprintf_r>:
 8021380:	b530      	push	{r4, r5, lr}
 8021382:	1e14      	subs	r4, r2, #0
 8021384:	4605      	mov	r5, r0
 8021386:	b09b      	sub	sp, #108	; 0x6c
 8021388:	4618      	mov	r0, r3
 802138a:	da05      	bge.n	8021398 <_vsniprintf_r+0x18>
 802138c:	238b      	movs	r3, #139	; 0x8b
 802138e:	602b      	str	r3, [r5, #0]
 8021390:	f04f 30ff 	mov.w	r0, #4294967295
 8021394:	b01b      	add	sp, #108	; 0x6c
 8021396:	bd30      	pop	{r4, r5, pc}
 8021398:	f44f 7302 	mov.w	r3, #520	; 0x208
 802139c:	f8ad 300c 	strh.w	r3, [sp, #12]
 80213a0:	bf14      	ite	ne
 80213a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80213a6:	4623      	moveq	r3, r4
 80213a8:	9302      	str	r3, [sp, #8]
 80213aa:	9305      	str	r3, [sp, #20]
 80213ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80213b0:	9100      	str	r1, [sp, #0]
 80213b2:	9104      	str	r1, [sp, #16]
 80213b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80213b8:	4602      	mov	r2, r0
 80213ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80213bc:	4669      	mov	r1, sp
 80213be:	4628      	mov	r0, r5
 80213c0:	f000 fb94 	bl	8021aec <_svfiprintf_r>
 80213c4:	1c43      	adds	r3, r0, #1
 80213c6:	bfbc      	itt	lt
 80213c8:	238b      	movlt	r3, #139	; 0x8b
 80213ca:	602b      	strlt	r3, [r5, #0]
 80213cc:	2c00      	cmp	r4, #0
 80213ce:	d0e1      	beq.n	8021394 <_vsniprintf_r+0x14>
 80213d0:	9b00      	ldr	r3, [sp, #0]
 80213d2:	2200      	movs	r2, #0
 80213d4:	701a      	strb	r2, [r3, #0]
 80213d6:	e7dd      	b.n	8021394 <_vsniprintf_r+0x14>

080213d8 <vsniprintf>:
 80213d8:	b507      	push	{r0, r1, r2, lr}
 80213da:	9300      	str	r3, [sp, #0]
 80213dc:	4613      	mov	r3, r2
 80213de:	460a      	mov	r2, r1
 80213e0:	4601      	mov	r1, r0
 80213e2:	4803      	ldr	r0, [pc, #12]	; (80213f0 <vsniprintf+0x18>)
 80213e4:	6800      	ldr	r0, [r0, #0]
 80213e6:	f7ff ffcb 	bl	8021380 <_vsniprintf_r>
 80213ea:	b003      	add	sp, #12
 80213ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80213f0:	20000108 	.word	0x20000108

080213f4 <__swbuf_r>:
 80213f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80213f6:	460e      	mov	r6, r1
 80213f8:	4614      	mov	r4, r2
 80213fa:	4605      	mov	r5, r0
 80213fc:	b118      	cbz	r0, 8021406 <__swbuf_r+0x12>
 80213fe:	6983      	ldr	r3, [r0, #24]
 8021400:	b90b      	cbnz	r3, 8021406 <__swbuf_r+0x12>
 8021402:	f7fe f939 	bl	801f678 <__sinit>
 8021406:	4b21      	ldr	r3, [pc, #132]	; (802148c <__swbuf_r+0x98>)
 8021408:	429c      	cmp	r4, r3
 802140a:	d12b      	bne.n	8021464 <__swbuf_r+0x70>
 802140c:	686c      	ldr	r4, [r5, #4]
 802140e:	69a3      	ldr	r3, [r4, #24]
 8021410:	60a3      	str	r3, [r4, #8]
 8021412:	89a3      	ldrh	r3, [r4, #12]
 8021414:	071a      	lsls	r2, r3, #28
 8021416:	d52f      	bpl.n	8021478 <__swbuf_r+0x84>
 8021418:	6923      	ldr	r3, [r4, #16]
 802141a:	b36b      	cbz	r3, 8021478 <__swbuf_r+0x84>
 802141c:	6923      	ldr	r3, [r4, #16]
 802141e:	6820      	ldr	r0, [r4, #0]
 8021420:	1ac0      	subs	r0, r0, r3
 8021422:	6963      	ldr	r3, [r4, #20]
 8021424:	b2f6      	uxtb	r6, r6
 8021426:	4283      	cmp	r3, r0
 8021428:	4637      	mov	r7, r6
 802142a:	dc04      	bgt.n	8021436 <__swbuf_r+0x42>
 802142c:	4621      	mov	r1, r4
 802142e:	4628      	mov	r0, r5
 8021430:	f7fe f87c 	bl	801f52c <_fflush_r>
 8021434:	bb30      	cbnz	r0, 8021484 <__swbuf_r+0x90>
 8021436:	68a3      	ldr	r3, [r4, #8]
 8021438:	3b01      	subs	r3, #1
 802143a:	60a3      	str	r3, [r4, #8]
 802143c:	6823      	ldr	r3, [r4, #0]
 802143e:	1c5a      	adds	r2, r3, #1
 8021440:	6022      	str	r2, [r4, #0]
 8021442:	701e      	strb	r6, [r3, #0]
 8021444:	6963      	ldr	r3, [r4, #20]
 8021446:	3001      	adds	r0, #1
 8021448:	4283      	cmp	r3, r0
 802144a:	d004      	beq.n	8021456 <__swbuf_r+0x62>
 802144c:	89a3      	ldrh	r3, [r4, #12]
 802144e:	07db      	lsls	r3, r3, #31
 8021450:	d506      	bpl.n	8021460 <__swbuf_r+0x6c>
 8021452:	2e0a      	cmp	r6, #10
 8021454:	d104      	bne.n	8021460 <__swbuf_r+0x6c>
 8021456:	4621      	mov	r1, r4
 8021458:	4628      	mov	r0, r5
 802145a:	f7fe f867 	bl	801f52c <_fflush_r>
 802145e:	b988      	cbnz	r0, 8021484 <__swbuf_r+0x90>
 8021460:	4638      	mov	r0, r7
 8021462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021464:	4b0a      	ldr	r3, [pc, #40]	; (8021490 <__swbuf_r+0x9c>)
 8021466:	429c      	cmp	r4, r3
 8021468:	d101      	bne.n	802146e <__swbuf_r+0x7a>
 802146a:	68ac      	ldr	r4, [r5, #8]
 802146c:	e7cf      	b.n	802140e <__swbuf_r+0x1a>
 802146e:	4b09      	ldr	r3, [pc, #36]	; (8021494 <__swbuf_r+0xa0>)
 8021470:	429c      	cmp	r4, r3
 8021472:	bf08      	it	eq
 8021474:	68ec      	ldreq	r4, [r5, #12]
 8021476:	e7ca      	b.n	802140e <__swbuf_r+0x1a>
 8021478:	4621      	mov	r1, r4
 802147a:	4628      	mov	r0, r5
 802147c:	f000 f81e 	bl	80214bc <__swsetup_r>
 8021480:	2800      	cmp	r0, #0
 8021482:	d0cb      	beq.n	802141c <__swbuf_r+0x28>
 8021484:	f04f 37ff 	mov.w	r7, #4294967295
 8021488:	e7ea      	b.n	8021460 <__swbuf_r+0x6c>
 802148a:	bf00      	nop
 802148c:	080289e4 	.word	0x080289e4
 8021490:	08028a04 	.word	0x08028a04
 8021494:	080289c4 	.word	0x080289c4

08021498 <_write_r>:
 8021498:	b538      	push	{r3, r4, r5, lr}
 802149a:	4d07      	ldr	r5, [pc, #28]	; (80214b8 <_write_r+0x20>)
 802149c:	4604      	mov	r4, r0
 802149e:	4608      	mov	r0, r1
 80214a0:	4611      	mov	r1, r2
 80214a2:	2200      	movs	r2, #0
 80214a4:	602a      	str	r2, [r5, #0]
 80214a6:	461a      	mov	r2, r3
 80214a8:	f7df fc92 	bl	8000dd0 <_write>
 80214ac:	1c43      	adds	r3, r0, #1
 80214ae:	d102      	bne.n	80214b6 <_write_r+0x1e>
 80214b0:	682b      	ldr	r3, [r5, #0]
 80214b2:	b103      	cbz	r3, 80214b6 <_write_r+0x1e>
 80214b4:	6023      	str	r3, [r4, #0]
 80214b6:	bd38      	pop	{r3, r4, r5, pc}
 80214b8:	20000f30 	.word	0x20000f30

080214bc <__swsetup_r>:
 80214bc:	4b32      	ldr	r3, [pc, #200]	; (8021588 <__swsetup_r+0xcc>)
 80214be:	b570      	push	{r4, r5, r6, lr}
 80214c0:	681d      	ldr	r5, [r3, #0]
 80214c2:	4606      	mov	r6, r0
 80214c4:	460c      	mov	r4, r1
 80214c6:	b125      	cbz	r5, 80214d2 <__swsetup_r+0x16>
 80214c8:	69ab      	ldr	r3, [r5, #24]
 80214ca:	b913      	cbnz	r3, 80214d2 <__swsetup_r+0x16>
 80214cc:	4628      	mov	r0, r5
 80214ce:	f7fe f8d3 	bl	801f678 <__sinit>
 80214d2:	4b2e      	ldr	r3, [pc, #184]	; (802158c <__swsetup_r+0xd0>)
 80214d4:	429c      	cmp	r4, r3
 80214d6:	d10f      	bne.n	80214f8 <__swsetup_r+0x3c>
 80214d8:	686c      	ldr	r4, [r5, #4]
 80214da:	89a3      	ldrh	r3, [r4, #12]
 80214dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80214e0:	0719      	lsls	r1, r3, #28
 80214e2:	d42c      	bmi.n	802153e <__swsetup_r+0x82>
 80214e4:	06dd      	lsls	r5, r3, #27
 80214e6:	d411      	bmi.n	802150c <__swsetup_r+0x50>
 80214e8:	2309      	movs	r3, #9
 80214ea:	6033      	str	r3, [r6, #0]
 80214ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80214f0:	81a3      	strh	r3, [r4, #12]
 80214f2:	f04f 30ff 	mov.w	r0, #4294967295
 80214f6:	e03e      	b.n	8021576 <__swsetup_r+0xba>
 80214f8:	4b25      	ldr	r3, [pc, #148]	; (8021590 <__swsetup_r+0xd4>)
 80214fa:	429c      	cmp	r4, r3
 80214fc:	d101      	bne.n	8021502 <__swsetup_r+0x46>
 80214fe:	68ac      	ldr	r4, [r5, #8]
 8021500:	e7eb      	b.n	80214da <__swsetup_r+0x1e>
 8021502:	4b24      	ldr	r3, [pc, #144]	; (8021594 <__swsetup_r+0xd8>)
 8021504:	429c      	cmp	r4, r3
 8021506:	bf08      	it	eq
 8021508:	68ec      	ldreq	r4, [r5, #12]
 802150a:	e7e6      	b.n	80214da <__swsetup_r+0x1e>
 802150c:	0758      	lsls	r0, r3, #29
 802150e:	d512      	bpl.n	8021536 <__swsetup_r+0x7a>
 8021510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021512:	b141      	cbz	r1, 8021526 <__swsetup_r+0x6a>
 8021514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021518:	4299      	cmp	r1, r3
 802151a:	d002      	beq.n	8021522 <__swsetup_r+0x66>
 802151c:	4630      	mov	r0, r6
 802151e:	f7fe fcfb 	bl	801ff18 <_free_r>
 8021522:	2300      	movs	r3, #0
 8021524:	6363      	str	r3, [r4, #52]	; 0x34
 8021526:	89a3      	ldrh	r3, [r4, #12]
 8021528:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802152c:	81a3      	strh	r3, [r4, #12]
 802152e:	2300      	movs	r3, #0
 8021530:	6063      	str	r3, [r4, #4]
 8021532:	6923      	ldr	r3, [r4, #16]
 8021534:	6023      	str	r3, [r4, #0]
 8021536:	89a3      	ldrh	r3, [r4, #12]
 8021538:	f043 0308 	orr.w	r3, r3, #8
 802153c:	81a3      	strh	r3, [r4, #12]
 802153e:	6923      	ldr	r3, [r4, #16]
 8021540:	b94b      	cbnz	r3, 8021556 <__swsetup_r+0x9a>
 8021542:	89a3      	ldrh	r3, [r4, #12]
 8021544:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802154c:	d003      	beq.n	8021556 <__swsetup_r+0x9a>
 802154e:	4621      	mov	r1, r4
 8021550:	4630      	mov	r0, r6
 8021552:	f7fe fc6b 	bl	801fe2c <__smakebuf_r>
 8021556:	89a0      	ldrh	r0, [r4, #12]
 8021558:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802155c:	f010 0301 	ands.w	r3, r0, #1
 8021560:	d00a      	beq.n	8021578 <__swsetup_r+0xbc>
 8021562:	2300      	movs	r3, #0
 8021564:	60a3      	str	r3, [r4, #8]
 8021566:	6963      	ldr	r3, [r4, #20]
 8021568:	425b      	negs	r3, r3
 802156a:	61a3      	str	r3, [r4, #24]
 802156c:	6923      	ldr	r3, [r4, #16]
 802156e:	b943      	cbnz	r3, 8021582 <__swsetup_r+0xc6>
 8021570:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021574:	d1ba      	bne.n	80214ec <__swsetup_r+0x30>
 8021576:	bd70      	pop	{r4, r5, r6, pc}
 8021578:	0781      	lsls	r1, r0, #30
 802157a:	bf58      	it	pl
 802157c:	6963      	ldrpl	r3, [r4, #20]
 802157e:	60a3      	str	r3, [r4, #8]
 8021580:	e7f4      	b.n	802156c <__swsetup_r+0xb0>
 8021582:	2000      	movs	r0, #0
 8021584:	e7f7      	b.n	8021576 <__swsetup_r+0xba>
 8021586:	bf00      	nop
 8021588:	20000108 	.word	0x20000108
 802158c:	080289e4 	.word	0x080289e4
 8021590:	08028a04 	.word	0x08028a04
 8021594:	080289c4 	.word	0x080289c4

08021598 <__register_exitproc>:
 8021598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802159c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8021658 <__register_exitproc+0xc0>
 80215a0:	4606      	mov	r6, r0
 80215a2:	f8d8 0000 	ldr.w	r0, [r8]
 80215a6:	461f      	mov	r7, r3
 80215a8:	460d      	mov	r5, r1
 80215aa:	4691      	mov	r9, r2
 80215ac:	f7fe fc17 	bl	801fdde <__retarget_lock_acquire_recursive>
 80215b0:	4b25      	ldr	r3, [pc, #148]	; (8021648 <__register_exitproc+0xb0>)
 80215b2:	681c      	ldr	r4, [r3, #0]
 80215b4:	b934      	cbnz	r4, 80215c4 <__register_exitproc+0x2c>
 80215b6:	4c25      	ldr	r4, [pc, #148]	; (802164c <__register_exitproc+0xb4>)
 80215b8:	601c      	str	r4, [r3, #0]
 80215ba:	4b25      	ldr	r3, [pc, #148]	; (8021650 <__register_exitproc+0xb8>)
 80215bc:	b113      	cbz	r3, 80215c4 <__register_exitproc+0x2c>
 80215be:	681b      	ldr	r3, [r3, #0]
 80215c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80215c4:	6863      	ldr	r3, [r4, #4]
 80215c6:	2b1f      	cmp	r3, #31
 80215c8:	dd07      	ble.n	80215da <__register_exitproc+0x42>
 80215ca:	f8d8 0000 	ldr.w	r0, [r8]
 80215ce:	f7fe fc08 	bl	801fde2 <__retarget_lock_release_recursive>
 80215d2:	f04f 30ff 	mov.w	r0, #4294967295
 80215d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80215da:	b34e      	cbz	r6, 8021630 <__register_exitproc+0x98>
 80215dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80215e0:	b988      	cbnz	r0, 8021606 <__register_exitproc+0x6e>
 80215e2:	4b1c      	ldr	r3, [pc, #112]	; (8021654 <__register_exitproc+0xbc>)
 80215e4:	b923      	cbnz	r3, 80215f0 <__register_exitproc+0x58>
 80215e6:	f8d8 0000 	ldr.w	r0, [r8]
 80215ea:	f7fe fbf9 	bl	801fde0 <__retarget_lock_release>
 80215ee:	e7f0      	b.n	80215d2 <__register_exitproc+0x3a>
 80215f0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80215f4:	f7fe fc5a 	bl	801feac <malloc>
 80215f8:	2800      	cmp	r0, #0
 80215fa:	d0f4      	beq.n	80215e6 <__register_exitproc+0x4e>
 80215fc:	2300      	movs	r3, #0
 80215fe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8021602:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8021606:	6863      	ldr	r3, [r4, #4]
 8021608:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802160c:	2201      	movs	r2, #1
 802160e:	409a      	lsls	r2, r3
 8021610:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021614:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8021618:	4313      	orrs	r3, r2
 802161a:	2e02      	cmp	r6, #2
 802161c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021620:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8021624:	bf02      	ittt	eq
 8021626:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802162a:	431a      	orreq	r2, r3
 802162c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8021630:	6863      	ldr	r3, [r4, #4]
 8021632:	f8d8 0000 	ldr.w	r0, [r8]
 8021636:	1c5a      	adds	r2, r3, #1
 8021638:	3302      	adds	r3, #2
 802163a:	6062      	str	r2, [r4, #4]
 802163c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021640:	f7fe fbcf 	bl	801fde2 <__retarget_lock_release_recursive>
 8021644:	2000      	movs	r0, #0
 8021646:	e7c6      	b.n	80215d6 <__register_exitproc+0x3e>
 8021648:	20000f1c 	.word	0x20000f1c
 802164c:	20000e90 	.word	0x20000e90
 8021650:	00000000 	.word	0x00000000
 8021654:	0801fead 	.word	0x0801fead
 8021658:	20000174 	.word	0x20000174

0802165c <abs>:
 802165c:	2800      	cmp	r0, #0
 802165e:	bfb8      	it	lt
 8021660:	4240      	neglt	r0, r0
 8021662:	4770      	bx	lr

08021664 <__assert_func>:
 8021664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021666:	4614      	mov	r4, r2
 8021668:	461a      	mov	r2, r3
 802166a:	4b09      	ldr	r3, [pc, #36]	; (8021690 <__assert_func+0x2c>)
 802166c:	681b      	ldr	r3, [r3, #0]
 802166e:	4605      	mov	r5, r0
 8021670:	68d8      	ldr	r0, [r3, #12]
 8021672:	b14c      	cbz	r4, 8021688 <__assert_func+0x24>
 8021674:	4b07      	ldr	r3, [pc, #28]	; (8021694 <__assert_func+0x30>)
 8021676:	9100      	str	r1, [sp, #0]
 8021678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802167c:	4906      	ldr	r1, [pc, #24]	; (8021698 <__assert_func+0x34>)
 802167e:	462b      	mov	r3, r5
 8021680:	f000 f854 	bl	802172c <fiprintf>
 8021684:	f7fd fe3c 	bl	801f300 <abort>
 8021688:	4b04      	ldr	r3, [pc, #16]	; (802169c <__assert_func+0x38>)
 802168a:	461c      	mov	r4, r3
 802168c:	e7f3      	b.n	8021676 <__assert_func+0x12>
 802168e:	bf00      	nop
 8021690:	20000108 	.word	0x20000108
 8021694:	08028e1c 	.word	0x08028e1c
 8021698:	08028e29 	.word	0x08028e29
 802169c:	08028e57 	.word	0x08028e57

080216a0 <_close_r>:
 80216a0:	b538      	push	{r3, r4, r5, lr}
 80216a2:	4d06      	ldr	r5, [pc, #24]	; (80216bc <_close_r+0x1c>)
 80216a4:	2300      	movs	r3, #0
 80216a6:	4604      	mov	r4, r0
 80216a8:	4608      	mov	r0, r1
 80216aa:	602b      	str	r3, [r5, #0]
 80216ac:	f7df fbac 	bl	8000e08 <_close>
 80216b0:	1c43      	adds	r3, r0, #1
 80216b2:	d102      	bne.n	80216ba <_close_r+0x1a>
 80216b4:	682b      	ldr	r3, [r5, #0]
 80216b6:	b103      	cbz	r3, 80216ba <_close_r+0x1a>
 80216b8:	6023      	str	r3, [r4, #0]
 80216ba:	bd38      	pop	{r3, r4, r5, pc}
 80216bc:	20000f30 	.word	0x20000f30

080216c0 <__sflags>:
 80216c0:	780b      	ldrb	r3, [r1, #0]
 80216c2:	2b72      	cmp	r3, #114	; 0x72
 80216c4:	b530      	push	{r4, r5, lr}
 80216c6:	d022      	beq.n	802170e <__sflags+0x4e>
 80216c8:	2b77      	cmp	r3, #119	; 0x77
 80216ca:	d024      	beq.n	8021716 <__sflags+0x56>
 80216cc:	2b61      	cmp	r3, #97	; 0x61
 80216ce:	d027      	beq.n	8021720 <__sflags+0x60>
 80216d0:	2316      	movs	r3, #22
 80216d2:	6003      	str	r3, [r0, #0]
 80216d4:	2000      	movs	r0, #0
 80216d6:	bd30      	pop	{r4, r5, pc}
 80216d8:	2d62      	cmp	r5, #98	; 0x62
 80216da:	d012      	beq.n	8021702 <__sflags+0x42>
 80216dc:	2d78      	cmp	r5, #120	; 0x78
 80216de:	d013      	beq.n	8021708 <__sflags+0x48>
 80216e0:	2d2b      	cmp	r5, #43	; 0x2b
 80216e2:	d107      	bne.n	80216f4 <__sflags+0x34>
 80216e4:	f020 001c 	bic.w	r0, r0, #28
 80216e8:	f023 0303 	bic.w	r3, r3, #3
 80216ec:	f040 0010 	orr.w	r0, r0, #16
 80216f0:	f043 0302 	orr.w	r3, r3, #2
 80216f4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80216f8:	2d00      	cmp	r5, #0
 80216fa:	d1ed      	bne.n	80216d8 <__sflags+0x18>
 80216fc:	4323      	orrs	r3, r4
 80216fe:	6013      	str	r3, [r2, #0]
 8021700:	e7e9      	b.n	80216d6 <__sflags+0x16>
 8021702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021706:	e7f5      	b.n	80216f4 <__sflags+0x34>
 8021708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802170c:	e7f2      	b.n	80216f4 <__sflags+0x34>
 802170e:	2400      	movs	r4, #0
 8021710:	4623      	mov	r3, r4
 8021712:	2004      	movs	r0, #4
 8021714:	e7ee      	b.n	80216f4 <__sflags+0x34>
 8021716:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 802171a:	2301      	movs	r3, #1
 802171c:	2008      	movs	r0, #8
 802171e:	e7e9      	b.n	80216f4 <__sflags+0x34>
 8021720:	f44f 7402 	mov.w	r4, #520	; 0x208
 8021724:	2301      	movs	r3, #1
 8021726:	f44f 7084 	mov.w	r0, #264	; 0x108
 802172a:	e7e3      	b.n	80216f4 <__sflags+0x34>

0802172c <fiprintf>:
 802172c:	b40e      	push	{r1, r2, r3}
 802172e:	b503      	push	{r0, r1, lr}
 8021730:	4601      	mov	r1, r0
 8021732:	ab03      	add	r3, sp, #12
 8021734:	4805      	ldr	r0, [pc, #20]	; (802174c <fiprintf+0x20>)
 8021736:	f853 2b04 	ldr.w	r2, [r3], #4
 802173a:	6800      	ldr	r0, [r0, #0]
 802173c:	9301      	str	r3, [sp, #4]
 802173e:	f000 faff 	bl	8021d40 <_vfiprintf_r>
 8021742:	b002      	add	sp, #8
 8021744:	f85d eb04 	ldr.w	lr, [sp], #4
 8021748:	b003      	add	sp, #12
 802174a:	4770      	bx	lr
 802174c:	20000108 	.word	0x20000108

08021750 <_fstat_r>:
 8021750:	b538      	push	{r3, r4, r5, lr}
 8021752:	4d07      	ldr	r5, [pc, #28]	; (8021770 <_fstat_r+0x20>)
 8021754:	2300      	movs	r3, #0
 8021756:	4604      	mov	r4, r0
 8021758:	4608      	mov	r0, r1
 802175a:	4611      	mov	r1, r2
 802175c:	602b      	str	r3, [r5, #0]
 802175e:	f7df fb5f 	bl	8000e20 <_fstat>
 8021762:	1c43      	adds	r3, r0, #1
 8021764:	d102      	bne.n	802176c <_fstat_r+0x1c>
 8021766:	682b      	ldr	r3, [r5, #0]
 8021768:	b103      	cbz	r3, 802176c <_fstat_r+0x1c>
 802176a:	6023      	str	r3, [r4, #0]
 802176c:	bd38      	pop	{r3, r4, r5, pc}
 802176e:	bf00      	nop
 8021770:	20000f30 	.word	0x20000f30

08021774 <_findenv_r>:
 8021774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021778:	4607      	mov	r7, r0
 802177a:	4689      	mov	r9, r1
 802177c:	4616      	mov	r6, r2
 802177e:	f000 fe85 	bl	802248c <__env_lock>
 8021782:	4b18      	ldr	r3, [pc, #96]	; (80217e4 <_findenv_r+0x70>)
 8021784:	681c      	ldr	r4, [r3, #0]
 8021786:	469a      	mov	sl, r3
 8021788:	b134      	cbz	r4, 8021798 <_findenv_r+0x24>
 802178a:	464b      	mov	r3, r9
 802178c:	4698      	mov	r8, r3
 802178e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8021792:	b139      	cbz	r1, 80217a4 <_findenv_r+0x30>
 8021794:	293d      	cmp	r1, #61	; 0x3d
 8021796:	d1f9      	bne.n	802178c <_findenv_r+0x18>
 8021798:	4638      	mov	r0, r7
 802179a:	f000 fe7d 	bl	8022498 <__env_unlock>
 802179e:	2000      	movs	r0, #0
 80217a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217a4:	eba8 0809 	sub.w	r8, r8, r9
 80217a8:	46a3      	mov	fp, r4
 80217aa:	f854 0b04 	ldr.w	r0, [r4], #4
 80217ae:	2800      	cmp	r0, #0
 80217b0:	d0f2      	beq.n	8021798 <_findenv_r+0x24>
 80217b2:	4642      	mov	r2, r8
 80217b4:	4649      	mov	r1, r9
 80217b6:	f000 fe49 	bl	802244c <strncmp>
 80217ba:	2800      	cmp	r0, #0
 80217bc:	d1f4      	bne.n	80217a8 <_findenv_r+0x34>
 80217be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80217c2:	eb03 0508 	add.w	r5, r3, r8
 80217c6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80217ca:	2b3d      	cmp	r3, #61	; 0x3d
 80217cc:	d1ec      	bne.n	80217a8 <_findenv_r+0x34>
 80217ce:	f8da 3000 	ldr.w	r3, [sl]
 80217d2:	ebab 0303 	sub.w	r3, fp, r3
 80217d6:	109b      	asrs	r3, r3, #2
 80217d8:	4638      	mov	r0, r7
 80217da:	6033      	str	r3, [r6, #0]
 80217dc:	f000 fe5c 	bl	8022498 <__env_unlock>
 80217e0:	1c68      	adds	r0, r5, #1
 80217e2:	e7dd      	b.n	80217a0 <_findenv_r+0x2c>
 80217e4:	20000000 	.word	0x20000000

080217e8 <_getenv_r>:
 80217e8:	b507      	push	{r0, r1, r2, lr}
 80217ea:	aa01      	add	r2, sp, #4
 80217ec:	f7ff ffc2 	bl	8021774 <_findenv_r>
 80217f0:	b003      	add	sp, #12
 80217f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080217f8 <__gettzinfo>:
 80217f8:	4800      	ldr	r0, [pc, #0]	; (80217fc <__gettzinfo+0x4>)
 80217fa:	4770      	bx	lr
 80217fc:	20000178 	.word	0x20000178

08021800 <gmtime_r>:
 8021800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021804:	e9d0 6700 	ldrd	r6, r7, [r0]
 8021808:	460c      	mov	r4, r1
 802180a:	4a51      	ldr	r2, [pc, #324]	; (8021950 <gmtime_r+0x150>)
 802180c:	2300      	movs	r3, #0
 802180e:	4630      	mov	r0, r6
 8021810:	4639      	mov	r1, r7
 8021812:	f7de ffcf 	bl	80007b4 <__aeabi_ldivmod>
 8021816:	4639      	mov	r1, r7
 8021818:	4605      	mov	r5, r0
 802181a:	4a4d      	ldr	r2, [pc, #308]	; (8021950 <gmtime_r+0x150>)
 802181c:	4630      	mov	r0, r6
 802181e:	2300      	movs	r3, #0
 8021820:	f7de ffc8 	bl	80007b4 <__aeabi_ldivmod>
 8021824:	2a00      	cmp	r2, #0
 8021826:	bfbc      	itt	lt
 8021828:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802182c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8021830:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021834:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8021838:	fbb2 f3f1 	udiv	r3, r2, r1
 802183c:	fb01 2213 	mls	r2, r1, r3, r2
 8021840:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8021844:	bfac      	ite	ge
 8021846:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 802184a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 802184e:	60a3      	str	r3, [r4, #8]
 8021850:	fbb2 f3f1 	udiv	r3, r2, r1
 8021854:	fb01 2213 	mls	r2, r1, r3, r2
 8021858:	6063      	str	r3, [r4, #4]
 802185a:	6022      	str	r2, [r4, #0]
 802185c:	1cc3      	adds	r3, r0, #3
 802185e:	2207      	movs	r2, #7
 8021860:	fb93 f2f2 	sdiv	r2, r3, r2
 8021864:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8021868:	1a9b      	subs	r3, r3, r2
 802186a:	bf48      	it	mi
 802186c:	3307      	addmi	r3, #7
 802186e:	2800      	cmp	r0, #0
 8021870:	61a3      	str	r3, [r4, #24]
 8021872:	bfb8      	it	lt
 8021874:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8021878:	4936      	ldr	r1, [pc, #216]	; (8021954 <gmtime_r+0x154>)
 802187a:	bfae      	itee	ge
 802187c:	fb90 f1f1 	sdivge	r1, r0, r1
 8021880:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8021884:	fb93 f1f1 	sdivlt	r1, r3, r1
 8021888:	4b33      	ldr	r3, [pc, #204]	; (8021958 <gmtime_r+0x158>)
 802188a:	fb03 0001 	mla	r0, r3, r1, r0
 802188e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8021892:	fbb0 f2f2 	udiv	r2, r0, r2
 8021896:	4402      	add	r2, r0
 8021898:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 802189c:	fbb0 f3fc 	udiv	r3, r0, ip
 80218a0:	1ad2      	subs	r2, r2, r3
 80218a2:	f240 176d 	movw	r7, #365	; 0x16d
 80218a6:	4b2d      	ldr	r3, [pc, #180]	; (802195c <gmtime_r+0x15c>)
 80218a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80218ac:	2664      	movs	r6, #100	; 0x64
 80218ae:	1ad3      	subs	r3, r2, r3
 80218b0:	fbb3 f5f7 	udiv	r5, r3, r7
 80218b4:	fbb3 f3fc 	udiv	r3, r3, ip
 80218b8:	fbb5 f2f6 	udiv	r2, r5, r6
 80218bc:	1ad3      	subs	r3, r2, r3
 80218be:	4403      	add	r3, r0
 80218c0:	fb07 3315 	mls	r3, r7, r5, r3
 80218c4:	2099      	movs	r0, #153	; 0x99
 80218c6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80218ca:	f10c 0c02 	add.w	ip, ip, #2
 80218ce:	f103 0e01 	add.w	lr, r3, #1
 80218d2:	fbbc f7f0 	udiv	r7, ip, r0
 80218d6:	4378      	muls	r0, r7
 80218d8:	3002      	adds	r0, #2
 80218da:	f04f 0805 	mov.w	r8, #5
 80218de:	fbb0 f0f8 	udiv	r0, r0, r8
 80218e2:	ebae 0000 	sub.w	r0, lr, r0
 80218e6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80218ea:	45f4      	cmp	ip, lr
 80218ec:	bf94      	ite	ls
 80218ee:	f04f 0c02 	movls.w	ip, #2
 80218f2:	f06f 0c09 	mvnhi.w	ip, #9
 80218f6:	4467      	add	r7, ip
 80218f8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80218fc:	fb0c 5101 	mla	r1, ip, r1, r5
 8021900:	2f01      	cmp	r7, #1
 8021902:	bf98      	it	ls
 8021904:	3101      	addls	r1, #1
 8021906:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 802190a:	d30c      	bcc.n	8021926 <gmtime_r+0x126>
 802190c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8021910:	61e3      	str	r3, [r4, #28]
 8021912:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8021916:	2300      	movs	r3, #0
 8021918:	60e0      	str	r0, [r4, #12]
 802191a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802191e:	6223      	str	r3, [r4, #32]
 8021920:	4620      	mov	r0, r4
 8021922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021926:	f015 0f03 	tst.w	r5, #3
 802192a:	d102      	bne.n	8021932 <gmtime_r+0x132>
 802192c:	fb06 5212 	mls	r2, r6, r2, r5
 8021930:	b95a      	cbnz	r2, 802194a <gmtime_r+0x14a>
 8021932:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8021936:	fbb5 f2f6 	udiv	r2, r5, r6
 802193a:	fb06 5212 	mls	r2, r6, r2, r5
 802193e:	fab2 f282 	clz	r2, r2
 8021942:	0952      	lsrs	r2, r2, #5
 8021944:	333b      	adds	r3, #59	; 0x3b
 8021946:	4413      	add	r3, r2
 8021948:	e7e2      	b.n	8021910 <gmtime_r+0x110>
 802194a:	2201      	movs	r2, #1
 802194c:	e7fa      	b.n	8021944 <gmtime_r+0x144>
 802194e:	bf00      	nop
 8021950:	00015180 	.word	0x00015180
 8021954:	00023ab1 	.word	0x00023ab1
 8021958:	fffdc54f 	.word	0xfffdc54f
 802195c:	00023ab0 	.word	0x00023ab0

08021960 <_isatty_r>:
 8021960:	b538      	push	{r3, r4, r5, lr}
 8021962:	4d06      	ldr	r5, [pc, #24]	; (802197c <_isatty_r+0x1c>)
 8021964:	2300      	movs	r3, #0
 8021966:	4604      	mov	r4, r0
 8021968:	4608      	mov	r0, r1
 802196a:	602b      	str	r3, [r5, #0]
 802196c:	f7df fa68 	bl	8000e40 <_isatty>
 8021970:	1c43      	adds	r3, r0, #1
 8021972:	d102      	bne.n	802197a <_isatty_r+0x1a>
 8021974:	682b      	ldr	r3, [r5, #0]
 8021976:	b103      	cbz	r3, 802197a <_isatty_r+0x1a>
 8021978:	6023      	str	r3, [r4, #0]
 802197a:	bd38      	pop	{r3, r4, r5, pc}
 802197c:	20000f30 	.word	0x20000f30

08021980 <labs>:
 8021980:	2800      	cmp	r0, #0
 8021982:	bfb8      	it	lt
 8021984:	4240      	neglt	r0, r0
 8021986:	4770      	bx	lr

08021988 <_lseek_r>:
 8021988:	b538      	push	{r3, r4, r5, lr}
 802198a:	4d07      	ldr	r5, [pc, #28]	; (80219a8 <_lseek_r+0x20>)
 802198c:	4604      	mov	r4, r0
 802198e:	4608      	mov	r0, r1
 8021990:	4611      	mov	r1, r2
 8021992:	2200      	movs	r2, #0
 8021994:	602a      	str	r2, [r5, #0]
 8021996:	461a      	mov	r2, r3
 8021998:	f7df fa5d 	bl	8000e56 <_lseek>
 802199c:	1c43      	adds	r3, r0, #1
 802199e:	d102      	bne.n	80219a6 <_lseek_r+0x1e>
 80219a0:	682b      	ldr	r3, [r5, #0]
 80219a2:	b103      	cbz	r3, 80219a6 <_lseek_r+0x1e>
 80219a4:	6023      	str	r3, [r4, #0]
 80219a6:	bd38      	pop	{r3, r4, r5, pc}
 80219a8:	20000f30 	.word	0x20000f30

080219ac <__ascii_mbtowc>:
 80219ac:	b082      	sub	sp, #8
 80219ae:	b901      	cbnz	r1, 80219b2 <__ascii_mbtowc+0x6>
 80219b0:	a901      	add	r1, sp, #4
 80219b2:	b142      	cbz	r2, 80219c6 <__ascii_mbtowc+0x1a>
 80219b4:	b14b      	cbz	r3, 80219ca <__ascii_mbtowc+0x1e>
 80219b6:	7813      	ldrb	r3, [r2, #0]
 80219b8:	600b      	str	r3, [r1, #0]
 80219ba:	7812      	ldrb	r2, [r2, #0]
 80219bc:	1e10      	subs	r0, r2, #0
 80219be:	bf18      	it	ne
 80219c0:	2001      	movne	r0, #1
 80219c2:	b002      	add	sp, #8
 80219c4:	4770      	bx	lr
 80219c6:	4610      	mov	r0, r2
 80219c8:	e7fb      	b.n	80219c2 <__ascii_mbtowc+0x16>
 80219ca:	f06f 0001 	mvn.w	r0, #1
 80219ce:	e7f8      	b.n	80219c2 <__ascii_mbtowc+0x16>

080219d0 <__malloc_lock>:
 80219d0:	4801      	ldr	r0, [pc, #4]	; (80219d8 <__malloc_lock+0x8>)
 80219d2:	f7fe ba04 	b.w	801fdde <__retarget_lock_acquire_recursive>
 80219d6:	bf00      	nop
 80219d8:	20000f28 	.word	0x20000f28

080219dc <__malloc_unlock>:
 80219dc:	4801      	ldr	r0, [pc, #4]	; (80219e4 <__malloc_unlock+0x8>)
 80219de:	f7fe ba00 	b.w	801fde2 <__retarget_lock_release_recursive>
 80219e2:	bf00      	nop
 80219e4:	20000f28 	.word	0x20000f28

080219e8 <_realloc_r>:
 80219e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219ea:	4607      	mov	r7, r0
 80219ec:	4614      	mov	r4, r2
 80219ee:	460e      	mov	r6, r1
 80219f0:	b921      	cbnz	r1, 80219fc <_realloc_r+0x14>
 80219f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80219f6:	4611      	mov	r1, r2
 80219f8:	f7fe bade 	b.w	801ffb8 <_malloc_r>
 80219fc:	b922      	cbnz	r2, 8021a08 <_realloc_r+0x20>
 80219fe:	f7fe fa8b 	bl	801ff18 <_free_r>
 8021a02:	4625      	mov	r5, r4
 8021a04:	4628      	mov	r0, r5
 8021a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a08:	f000 fd66 	bl	80224d8 <_malloc_usable_size_r>
 8021a0c:	42a0      	cmp	r0, r4
 8021a0e:	d20f      	bcs.n	8021a30 <_realloc_r+0x48>
 8021a10:	4621      	mov	r1, r4
 8021a12:	4638      	mov	r0, r7
 8021a14:	f7fe fad0 	bl	801ffb8 <_malloc_r>
 8021a18:	4605      	mov	r5, r0
 8021a1a:	2800      	cmp	r0, #0
 8021a1c:	d0f2      	beq.n	8021a04 <_realloc_r+0x1c>
 8021a1e:	4631      	mov	r1, r6
 8021a20:	4622      	mov	r2, r4
 8021a22:	f7fe fa53 	bl	801fecc <memcpy>
 8021a26:	4631      	mov	r1, r6
 8021a28:	4638      	mov	r0, r7
 8021a2a:	f7fe fa75 	bl	801ff18 <_free_r>
 8021a2e:	e7e9      	b.n	8021a04 <_realloc_r+0x1c>
 8021a30:	4635      	mov	r5, r6
 8021a32:	e7e7      	b.n	8021a04 <_realloc_r+0x1c>

08021a34 <__ssputs_r>:
 8021a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021a38:	688e      	ldr	r6, [r1, #8]
 8021a3a:	429e      	cmp	r6, r3
 8021a3c:	4682      	mov	sl, r0
 8021a3e:	460c      	mov	r4, r1
 8021a40:	4690      	mov	r8, r2
 8021a42:	461f      	mov	r7, r3
 8021a44:	d838      	bhi.n	8021ab8 <__ssputs_r+0x84>
 8021a46:	898a      	ldrh	r2, [r1, #12]
 8021a48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021a4c:	d032      	beq.n	8021ab4 <__ssputs_r+0x80>
 8021a4e:	6825      	ldr	r5, [r4, #0]
 8021a50:	6909      	ldr	r1, [r1, #16]
 8021a52:	eba5 0901 	sub.w	r9, r5, r1
 8021a56:	6965      	ldr	r5, [r4, #20]
 8021a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021a5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021a60:	3301      	adds	r3, #1
 8021a62:	444b      	add	r3, r9
 8021a64:	106d      	asrs	r5, r5, #1
 8021a66:	429d      	cmp	r5, r3
 8021a68:	bf38      	it	cc
 8021a6a:	461d      	movcc	r5, r3
 8021a6c:	0553      	lsls	r3, r2, #21
 8021a6e:	d531      	bpl.n	8021ad4 <__ssputs_r+0xa0>
 8021a70:	4629      	mov	r1, r5
 8021a72:	f7fe faa1 	bl	801ffb8 <_malloc_r>
 8021a76:	4606      	mov	r6, r0
 8021a78:	b950      	cbnz	r0, 8021a90 <__ssputs_r+0x5c>
 8021a7a:	230c      	movs	r3, #12
 8021a7c:	f8ca 3000 	str.w	r3, [sl]
 8021a80:	89a3      	ldrh	r3, [r4, #12]
 8021a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021a86:	81a3      	strh	r3, [r4, #12]
 8021a88:	f04f 30ff 	mov.w	r0, #4294967295
 8021a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a90:	6921      	ldr	r1, [r4, #16]
 8021a92:	464a      	mov	r2, r9
 8021a94:	f7fe fa1a 	bl	801fecc <memcpy>
 8021a98:	89a3      	ldrh	r3, [r4, #12]
 8021a9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021aa2:	81a3      	strh	r3, [r4, #12]
 8021aa4:	6126      	str	r6, [r4, #16]
 8021aa6:	6165      	str	r5, [r4, #20]
 8021aa8:	444e      	add	r6, r9
 8021aaa:	eba5 0509 	sub.w	r5, r5, r9
 8021aae:	6026      	str	r6, [r4, #0]
 8021ab0:	60a5      	str	r5, [r4, #8]
 8021ab2:	463e      	mov	r6, r7
 8021ab4:	42be      	cmp	r6, r7
 8021ab6:	d900      	bls.n	8021aba <__ssputs_r+0x86>
 8021ab8:	463e      	mov	r6, r7
 8021aba:	4632      	mov	r2, r6
 8021abc:	6820      	ldr	r0, [r4, #0]
 8021abe:	4641      	mov	r1, r8
 8021ac0:	f000 fcf0 	bl	80224a4 <memmove>
 8021ac4:	68a3      	ldr	r3, [r4, #8]
 8021ac6:	6822      	ldr	r2, [r4, #0]
 8021ac8:	1b9b      	subs	r3, r3, r6
 8021aca:	4432      	add	r2, r6
 8021acc:	60a3      	str	r3, [r4, #8]
 8021ace:	6022      	str	r2, [r4, #0]
 8021ad0:	2000      	movs	r0, #0
 8021ad2:	e7db      	b.n	8021a8c <__ssputs_r+0x58>
 8021ad4:	462a      	mov	r2, r5
 8021ad6:	f7ff ff87 	bl	80219e8 <_realloc_r>
 8021ada:	4606      	mov	r6, r0
 8021adc:	2800      	cmp	r0, #0
 8021ade:	d1e1      	bne.n	8021aa4 <__ssputs_r+0x70>
 8021ae0:	6921      	ldr	r1, [r4, #16]
 8021ae2:	4650      	mov	r0, sl
 8021ae4:	f7fe fa18 	bl	801ff18 <_free_r>
 8021ae8:	e7c7      	b.n	8021a7a <__ssputs_r+0x46>
	...

08021aec <_svfiprintf_r>:
 8021aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021af0:	4698      	mov	r8, r3
 8021af2:	898b      	ldrh	r3, [r1, #12]
 8021af4:	061b      	lsls	r3, r3, #24
 8021af6:	b09d      	sub	sp, #116	; 0x74
 8021af8:	4607      	mov	r7, r0
 8021afa:	460d      	mov	r5, r1
 8021afc:	4614      	mov	r4, r2
 8021afe:	d50e      	bpl.n	8021b1e <_svfiprintf_r+0x32>
 8021b00:	690b      	ldr	r3, [r1, #16]
 8021b02:	b963      	cbnz	r3, 8021b1e <_svfiprintf_r+0x32>
 8021b04:	2140      	movs	r1, #64	; 0x40
 8021b06:	f7fe fa57 	bl	801ffb8 <_malloc_r>
 8021b0a:	6028      	str	r0, [r5, #0]
 8021b0c:	6128      	str	r0, [r5, #16]
 8021b0e:	b920      	cbnz	r0, 8021b1a <_svfiprintf_r+0x2e>
 8021b10:	230c      	movs	r3, #12
 8021b12:	603b      	str	r3, [r7, #0]
 8021b14:	f04f 30ff 	mov.w	r0, #4294967295
 8021b18:	e0d1      	b.n	8021cbe <_svfiprintf_r+0x1d2>
 8021b1a:	2340      	movs	r3, #64	; 0x40
 8021b1c:	616b      	str	r3, [r5, #20]
 8021b1e:	2300      	movs	r3, #0
 8021b20:	9309      	str	r3, [sp, #36]	; 0x24
 8021b22:	2320      	movs	r3, #32
 8021b24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021b28:	f8cd 800c 	str.w	r8, [sp, #12]
 8021b2c:	2330      	movs	r3, #48	; 0x30
 8021b2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021cd8 <_svfiprintf_r+0x1ec>
 8021b32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021b36:	f04f 0901 	mov.w	r9, #1
 8021b3a:	4623      	mov	r3, r4
 8021b3c:	469a      	mov	sl, r3
 8021b3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021b42:	b10a      	cbz	r2, 8021b48 <_svfiprintf_r+0x5c>
 8021b44:	2a25      	cmp	r2, #37	; 0x25
 8021b46:	d1f9      	bne.n	8021b3c <_svfiprintf_r+0x50>
 8021b48:	ebba 0b04 	subs.w	fp, sl, r4
 8021b4c:	d00b      	beq.n	8021b66 <_svfiprintf_r+0x7a>
 8021b4e:	465b      	mov	r3, fp
 8021b50:	4622      	mov	r2, r4
 8021b52:	4629      	mov	r1, r5
 8021b54:	4638      	mov	r0, r7
 8021b56:	f7ff ff6d 	bl	8021a34 <__ssputs_r>
 8021b5a:	3001      	adds	r0, #1
 8021b5c:	f000 80aa 	beq.w	8021cb4 <_svfiprintf_r+0x1c8>
 8021b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021b62:	445a      	add	r2, fp
 8021b64:	9209      	str	r2, [sp, #36]	; 0x24
 8021b66:	f89a 3000 	ldrb.w	r3, [sl]
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	f000 80a2 	beq.w	8021cb4 <_svfiprintf_r+0x1c8>
 8021b70:	2300      	movs	r3, #0
 8021b72:	f04f 32ff 	mov.w	r2, #4294967295
 8021b76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021b7a:	f10a 0a01 	add.w	sl, sl, #1
 8021b7e:	9304      	str	r3, [sp, #16]
 8021b80:	9307      	str	r3, [sp, #28]
 8021b82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021b86:	931a      	str	r3, [sp, #104]	; 0x68
 8021b88:	4654      	mov	r4, sl
 8021b8a:	2205      	movs	r2, #5
 8021b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021b90:	4851      	ldr	r0, [pc, #324]	; (8021cd8 <_svfiprintf_r+0x1ec>)
 8021b92:	f7de fb65 	bl	8000260 <memchr>
 8021b96:	9a04      	ldr	r2, [sp, #16]
 8021b98:	b9d8      	cbnz	r0, 8021bd2 <_svfiprintf_r+0xe6>
 8021b9a:	06d0      	lsls	r0, r2, #27
 8021b9c:	bf44      	itt	mi
 8021b9e:	2320      	movmi	r3, #32
 8021ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ba4:	0711      	lsls	r1, r2, #28
 8021ba6:	bf44      	itt	mi
 8021ba8:	232b      	movmi	r3, #43	; 0x2b
 8021baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021bae:	f89a 3000 	ldrb.w	r3, [sl]
 8021bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8021bb4:	d015      	beq.n	8021be2 <_svfiprintf_r+0xf6>
 8021bb6:	9a07      	ldr	r2, [sp, #28]
 8021bb8:	4654      	mov	r4, sl
 8021bba:	2000      	movs	r0, #0
 8021bbc:	f04f 0c0a 	mov.w	ip, #10
 8021bc0:	4621      	mov	r1, r4
 8021bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021bc6:	3b30      	subs	r3, #48	; 0x30
 8021bc8:	2b09      	cmp	r3, #9
 8021bca:	d94e      	bls.n	8021c6a <_svfiprintf_r+0x17e>
 8021bcc:	b1b0      	cbz	r0, 8021bfc <_svfiprintf_r+0x110>
 8021bce:	9207      	str	r2, [sp, #28]
 8021bd0:	e014      	b.n	8021bfc <_svfiprintf_r+0x110>
 8021bd2:	eba0 0308 	sub.w	r3, r0, r8
 8021bd6:	fa09 f303 	lsl.w	r3, r9, r3
 8021bda:	4313      	orrs	r3, r2
 8021bdc:	9304      	str	r3, [sp, #16]
 8021bde:	46a2      	mov	sl, r4
 8021be0:	e7d2      	b.n	8021b88 <_svfiprintf_r+0x9c>
 8021be2:	9b03      	ldr	r3, [sp, #12]
 8021be4:	1d19      	adds	r1, r3, #4
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	9103      	str	r1, [sp, #12]
 8021bea:	2b00      	cmp	r3, #0
 8021bec:	bfbb      	ittet	lt
 8021bee:	425b      	neglt	r3, r3
 8021bf0:	f042 0202 	orrlt.w	r2, r2, #2
 8021bf4:	9307      	strge	r3, [sp, #28]
 8021bf6:	9307      	strlt	r3, [sp, #28]
 8021bf8:	bfb8      	it	lt
 8021bfa:	9204      	strlt	r2, [sp, #16]
 8021bfc:	7823      	ldrb	r3, [r4, #0]
 8021bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8021c00:	d10c      	bne.n	8021c1c <_svfiprintf_r+0x130>
 8021c02:	7863      	ldrb	r3, [r4, #1]
 8021c04:	2b2a      	cmp	r3, #42	; 0x2a
 8021c06:	d135      	bne.n	8021c74 <_svfiprintf_r+0x188>
 8021c08:	9b03      	ldr	r3, [sp, #12]
 8021c0a:	1d1a      	adds	r2, r3, #4
 8021c0c:	681b      	ldr	r3, [r3, #0]
 8021c0e:	9203      	str	r2, [sp, #12]
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	bfb8      	it	lt
 8021c14:	f04f 33ff 	movlt.w	r3, #4294967295
 8021c18:	3402      	adds	r4, #2
 8021c1a:	9305      	str	r3, [sp, #20]
 8021c1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021ce8 <_svfiprintf_r+0x1fc>
 8021c20:	7821      	ldrb	r1, [r4, #0]
 8021c22:	2203      	movs	r2, #3
 8021c24:	4650      	mov	r0, sl
 8021c26:	f7de fb1b 	bl	8000260 <memchr>
 8021c2a:	b140      	cbz	r0, 8021c3e <_svfiprintf_r+0x152>
 8021c2c:	2340      	movs	r3, #64	; 0x40
 8021c2e:	eba0 000a 	sub.w	r0, r0, sl
 8021c32:	fa03 f000 	lsl.w	r0, r3, r0
 8021c36:	9b04      	ldr	r3, [sp, #16]
 8021c38:	4303      	orrs	r3, r0
 8021c3a:	3401      	adds	r4, #1
 8021c3c:	9304      	str	r3, [sp, #16]
 8021c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c42:	4826      	ldr	r0, [pc, #152]	; (8021cdc <_svfiprintf_r+0x1f0>)
 8021c44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021c48:	2206      	movs	r2, #6
 8021c4a:	f7de fb09 	bl	8000260 <memchr>
 8021c4e:	2800      	cmp	r0, #0
 8021c50:	d038      	beq.n	8021cc4 <_svfiprintf_r+0x1d8>
 8021c52:	4b23      	ldr	r3, [pc, #140]	; (8021ce0 <_svfiprintf_r+0x1f4>)
 8021c54:	bb1b      	cbnz	r3, 8021c9e <_svfiprintf_r+0x1b2>
 8021c56:	9b03      	ldr	r3, [sp, #12]
 8021c58:	3307      	adds	r3, #7
 8021c5a:	f023 0307 	bic.w	r3, r3, #7
 8021c5e:	3308      	adds	r3, #8
 8021c60:	9303      	str	r3, [sp, #12]
 8021c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c64:	4433      	add	r3, r6
 8021c66:	9309      	str	r3, [sp, #36]	; 0x24
 8021c68:	e767      	b.n	8021b3a <_svfiprintf_r+0x4e>
 8021c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8021c6e:	460c      	mov	r4, r1
 8021c70:	2001      	movs	r0, #1
 8021c72:	e7a5      	b.n	8021bc0 <_svfiprintf_r+0xd4>
 8021c74:	2300      	movs	r3, #0
 8021c76:	3401      	adds	r4, #1
 8021c78:	9305      	str	r3, [sp, #20]
 8021c7a:	4619      	mov	r1, r3
 8021c7c:	f04f 0c0a 	mov.w	ip, #10
 8021c80:	4620      	mov	r0, r4
 8021c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021c86:	3a30      	subs	r2, #48	; 0x30
 8021c88:	2a09      	cmp	r2, #9
 8021c8a:	d903      	bls.n	8021c94 <_svfiprintf_r+0x1a8>
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d0c5      	beq.n	8021c1c <_svfiprintf_r+0x130>
 8021c90:	9105      	str	r1, [sp, #20]
 8021c92:	e7c3      	b.n	8021c1c <_svfiprintf_r+0x130>
 8021c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8021c98:	4604      	mov	r4, r0
 8021c9a:	2301      	movs	r3, #1
 8021c9c:	e7f0      	b.n	8021c80 <_svfiprintf_r+0x194>
 8021c9e:	ab03      	add	r3, sp, #12
 8021ca0:	9300      	str	r3, [sp, #0]
 8021ca2:	462a      	mov	r2, r5
 8021ca4:	4b0f      	ldr	r3, [pc, #60]	; (8021ce4 <_svfiprintf_r+0x1f8>)
 8021ca6:	a904      	add	r1, sp, #16
 8021ca8:	4638      	mov	r0, r7
 8021caa:	f3af 8000 	nop.w
 8021cae:	1c42      	adds	r2, r0, #1
 8021cb0:	4606      	mov	r6, r0
 8021cb2:	d1d6      	bne.n	8021c62 <_svfiprintf_r+0x176>
 8021cb4:	89ab      	ldrh	r3, [r5, #12]
 8021cb6:	065b      	lsls	r3, r3, #25
 8021cb8:	f53f af2c 	bmi.w	8021b14 <_svfiprintf_r+0x28>
 8021cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021cbe:	b01d      	add	sp, #116	; 0x74
 8021cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cc4:	ab03      	add	r3, sp, #12
 8021cc6:	9300      	str	r3, [sp, #0]
 8021cc8:	462a      	mov	r2, r5
 8021cca:	4b06      	ldr	r3, [pc, #24]	; (8021ce4 <_svfiprintf_r+0x1f8>)
 8021ccc:	a904      	add	r1, sp, #16
 8021cce:	4638      	mov	r0, r7
 8021cd0:	f000 f9d4 	bl	802207c <_printf_i>
 8021cd4:	e7eb      	b.n	8021cae <_svfiprintf_r+0x1c2>
 8021cd6:	bf00      	nop
 8021cd8:	08028f63 	.word	0x08028f63
 8021cdc:	08028f6d 	.word	0x08028f6d
 8021ce0:	00000000 	.word	0x00000000
 8021ce4:	08021a35 	.word	0x08021a35
 8021ce8:	08028f69 	.word	0x08028f69

08021cec <__sfputc_r>:
 8021cec:	6893      	ldr	r3, [r2, #8]
 8021cee:	3b01      	subs	r3, #1
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	b410      	push	{r4}
 8021cf4:	6093      	str	r3, [r2, #8]
 8021cf6:	da08      	bge.n	8021d0a <__sfputc_r+0x1e>
 8021cf8:	6994      	ldr	r4, [r2, #24]
 8021cfa:	42a3      	cmp	r3, r4
 8021cfc:	db01      	blt.n	8021d02 <__sfputc_r+0x16>
 8021cfe:	290a      	cmp	r1, #10
 8021d00:	d103      	bne.n	8021d0a <__sfputc_r+0x1e>
 8021d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d06:	f7ff bb75 	b.w	80213f4 <__swbuf_r>
 8021d0a:	6813      	ldr	r3, [r2, #0]
 8021d0c:	1c58      	adds	r0, r3, #1
 8021d0e:	6010      	str	r0, [r2, #0]
 8021d10:	7019      	strb	r1, [r3, #0]
 8021d12:	4608      	mov	r0, r1
 8021d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d18:	4770      	bx	lr

08021d1a <__sfputs_r>:
 8021d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d1c:	4606      	mov	r6, r0
 8021d1e:	460f      	mov	r7, r1
 8021d20:	4614      	mov	r4, r2
 8021d22:	18d5      	adds	r5, r2, r3
 8021d24:	42ac      	cmp	r4, r5
 8021d26:	d101      	bne.n	8021d2c <__sfputs_r+0x12>
 8021d28:	2000      	movs	r0, #0
 8021d2a:	e007      	b.n	8021d3c <__sfputs_r+0x22>
 8021d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d30:	463a      	mov	r2, r7
 8021d32:	4630      	mov	r0, r6
 8021d34:	f7ff ffda 	bl	8021cec <__sfputc_r>
 8021d38:	1c43      	adds	r3, r0, #1
 8021d3a:	d1f3      	bne.n	8021d24 <__sfputs_r+0xa>
 8021d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021d40 <_vfiprintf_r>:
 8021d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d44:	460d      	mov	r5, r1
 8021d46:	b09d      	sub	sp, #116	; 0x74
 8021d48:	4614      	mov	r4, r2
 8021d4a:	4698      	mov	r8, r3
 8021d4c:	4606      	mov	r6, r0
 8021d4e:	b118      	cbz	r0, 8021d58 <_vfiprintf_r+0x18>
 8021d50:	6983      	ldr	r3, [r0, #24]
 8021d52:	b90b      	cbnz	r3, 8021d58 <_vfiprintf_r+0x18>
 8021d54:	f7fd fc90 	bl	801f678 <__sinit>
 8021d58:	4b89      	ldr	r3, [pc, #548]	; (8021f80 <_vfiprintf_r+0x240>)
 8021d5a:	429d      	cmp	r5, r3
 8021d5c:	d11b      	bne.n	8021d96 <_vfiprintf_r+0x56>
 8021d5e:	6875      	ldr	r5, [r6, #4]
 8021d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021d62:	07d9      	lsls	r1, r3, #31
 8021d64:	d405      	bmi.n	8021d72 <_vfiprintf_r+0x32>
 8021d66:	89ab      	ldrh	r3, [r5, #12]
 8021d68:	059a      	lsls	r2, r3, #22
 8021d6a:	d402      	bmi.n	8021d72 <_vfiprintf_r+0x32>
 8021d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021d6e:	f7fe f836 	bl	801fdde <__retarget_lock_acquire_recursive>
 8021d72:	89ab      	ldrh	r3, [r5, #12]
 8021d74:	071b      	lsls	r3, r3, #28
 8021d76:	d501      	bpl.n	8021d7c <_vfiprintf_r+0x3c>
 8021d78:	692b      	ldr	r3, [r5, #16]
 8021d7a:	b9eb      	cbnz	r3, 8021db8 <_vfiprintf_r+0x78>
 8021d7c:	4629      	mov	r1, r5
 8021d7e:	4630      	mov	r0, r6
 8021d80:	f7ff fb9c 	bl	80214bc <__swsetup_r>
 8021d84:	b1c0      	cbz	r0, 8021db8 <_vfiprintf_r+0x78>
 8021d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021d88:	07dc      	lsls	r4, r3, #31
 8021d8a:	d50e      	bpl.n	8021daa <_vfiprintf_r+0x6a>
 8021d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8021d90:	b01d      	add	sp, #116	; 0x74
 8021d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d96:	4b7b      	ldr	r3, [pc, #492]	; (8021f84 <_vfiprintf_r+0x244>)
 8021d98:	429d      	cmp	r5, r3
 8021d9a:	d101      	bne.n	8021da0 <_vfiprintf_r+0x60>
 8021d9c:	68b5      	ldr	r5, [r6, #8]
 8021d9e:	e7df      	b.n	8021d60 <_vfiprintf_r+0x20>
 8021da0:	4b79      	ldr	r3, [pc, #484]	; (8021f88 <_vfiprintf_r+0x248>)
 8021da2:	429d      	cmp	r5, r3
 8021da4:	bf08      	it	eq
 8021da6:	68f5      	ldreq	r5, [r6, #12]
 8021da8:	e7da      	b.n	8021d60 <_vfiprintf_r+0x20>
 8021daa:	89ab      	ldrh	r3, [r5, #12]
 8021dac:	0598      	lsls	r0, r3, #22
 8021dae:	d4ed      	bmi.n	8021d8c <_vfiprintf_r+0x4c>
 8021db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021db2:	f7fe f816 	bl	801fde2 <__retarget_lock_release_recursive>
 8021db6:	e7e9      	b.n	8021d8c <_vfiprintf_r+0x4c>
 8021db8:	2300      	movs	r3, #0
 8021dba:	9309      	str	r3, [sp, #36]	; 0x24
 8021dbc:	2320      	movs	r3, #32
 8021dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8021dc6:	2330      	movs	r3, #48	; 0x30
 8021dc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021f8c <_vfiprintf_r+0x24c>
 8021dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021dd0:	f04f 0901 	mov.w	r9, #1
 8021dd4:	4623      	mov	r3, r4
 8021dd6:	469a      	mov	sl, r3
 8021dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021ddc:	b10a      	cbz	r2, 8021de2 <_vfiprintf_r+0xa2>
 8021dde:	2a25      	cmp	r2, #37	; 0x25
 8021de0:	d1f9      	bne.n	8021dd6 <_vfiprintf_r+0x96>
 8021de2:	ebba 0b04 	subs.w	fp, sl, r4
 8021de6:	d00b      	beq.n	8021e00 <_vfiprintf_r+0xc0>
 8021de8:	465b      	mov	r3, fp
 8021dea:	4622      	mov	r2, r4
 8021dec:	4629      	mov	r1, r5
 8021dee:	4630      	mov	r0, r6
 8021df0:	f7ff ff93 	bl	8021d1a <__sfputs_r>
 8021df4:	3001      	adds	r0, #1
 8021df6:	f000 80aa 	beq.w	8021f4e <_vfiprintf_r+0x20e>
 8021dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021dfc:	445a      	add	r2, fp
 8021dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8021e00:	f89a 3000 	ldrb.w	r3, [sl]
 8021e04:	2b00      	cmp	r3, #0
 8021e06:	f000 80a2 	beq.w	8021f4e <_vfiprintf_r+0x20e>
 8021e0a:	2300      	movs	r3, #0
 8021e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8021e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021e14:	f10a 0a01 	add.w	sl, sl, #1
 8021e18:	9304      	str	r3, [sp, #16]
 8021e1a:	9307      	str	r3, [sp, #28]
 8021e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021e20:	931a      	str	r3, [sp, #104]	; 0x68
 8021e22:	4654      	mov	r4, sl
 8021e24:	2205      	movs	r2, #5
 8021e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e2a:	4858      	ldr	r0, [pc, #352]	; (8021f8c <_vfiprintf_r+0x24c>)
 8021e2c:	f7de fa18 	bl	8000260 <memchr>
 8021e30:	9a04      	ldr	r2, [sp, #16]
 8021e32:	b9d8      	cbnz	r0, 8021e6c <_vfiprintf_r+0x12c>
 8021e34:	06d1      	lsls	r1, r2, #27
 8021e36:	bf44      	itt	mi
 8021e38:	2320      	movmi	r3, #32
 8021e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021e3e:	0713      	lsls	r3, r2, #28
 8021e40:	bf44      	itt	mi
 8021e42:	232b      	movmi	r3, #43	; 0x2b
 8021e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021e48:	f89a 3000 	ldrb.w	r3, [sl]
 8021e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8021e4e:	d015      	beq.n	8021e7c <_vfiprintf_r+0x13c>
 8021e50:	9a07      	ldr	r2, [sp, #28]
 8021e52:	4654      	mov	r4, sl
 8021e54:	2000      	movs	r0, #0
 8021e56:	f04f 0c0a 	mov.w	ip, #10
 8021e5a:	4621      	mov	r1, r4
 8021e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021e60:	3b30      	subs	r3, #48	; 0x30
 8021e62:	2b09      	cmp	r3, #9
 8021e64:	d94e      	bls.n	8021f04 <_vfiprintf_r+0x1c4>
 8021e66:	b1b0      	cbz	r0, 8021e96 <_vfiprintf_r+0x156>
 8021e68:	9207      	str	r2, [sp, #28]
 8021e6a:	e014      	b.n	8021e96 <_vfiprintf_r+0x156>
 8021e6c:	eba0 0308 	sub.w	r3, r0, r8
 8021e70:	fa09 f303 	lsl.w	r3, r9, r3
 8021e74:	4313      	orrs	r3, r2
 8021e76:	9304      	str	r3, [sp, #16]
 8021e78:	46a2      	mov	sl, r4
 8021e7a:	e7d2      	b.n	8021e22 <_vfiprintf_r+0xe2>
 8021e7c:	9b03      	ldr	r3, [sp, #12]
 8021e7e:	1d19      	adds	r1, r3, #4
 8021e80:	681b      	ldr	r3, [r3, #0]
 8021e82:	9103      	str	r1, [sp, #12]
 8021e84:	2b00      	cmp	r3, #0
 8021e86:	bfbb      	ittet	lt
 8021e88:	425b      	neglt	r3, r3
 8021e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8021e8e:	9307      	strge	r3, [sp, #28]
 8021e90:	9307      	strlt	r3, [sp, #28]
 8021e92:	bfb8      	it	lt
 8021e94:	9204      	strlt	r2, [sp, #16]
 8021e96:	7823      	ldrb	r3, [r4, #0]
 8021e98:	2b2e      	cmp	r3, #46	; 0x2e
 8021e9a:	d10c      	bne.n	8021eb6 <_vfiprintf_r+0x176>
 8021e9c:	7863      	ldrb	r3, [r4, #1]
 8021e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8021ea0:	d135      	bne.n	8021f0e <_vfiprintf_r+0x1ce>
 8021ea2:	9b03      	ldr	r3, [sp, #12]
 8021ea4:	1d1a      	adds	r2, r3, #4
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	9203      	str	r2, [sp, #12]
 8021eaa:	2b00      	cmp	r3, #0
 8021eac:	bfb8      	it	lt
 8021eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8021eb2:	3402      	adds	r4, #2
 8021eb4:	9305      	str	r3, [sp, #20]
 8021eb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021f9c <_vfiprintf_r+0x25c>
 8021eba:	7821      	ldrb	r1, [r4, #0]
 8021ebc:	2203      	movs	r2, #3
 8021ebe:	4650      	mov	r0, sl
 8021ec0:	f7de f9ce 	bl	8000260 <memchr>
 8021ec4:	b140      	cbz	r0, 8021ed8 <_vfiprintf_r+0x198>
 8021ec6:	2340      	movs	r3, #64	; 0x40
 8021ec8:	eba0 000a 	sub.w	r0, r0, sl
 8021ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8021ed0:	9b04      	ldr	r3, [sp, #16]
 8021ed2:	4303      	orrs	r3, r0
 8021ed4:	3401      	adds	r4, #1
 8021ed6:	9304      	str	r3, [sp, #16]
 8021ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021edc:	482c      	ldr	r0, [pc, #176]	; (8021f90 <_vfiprintf_r+0x250>)
 8021ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021ee2:	2206      	movs	r2, #6
 8021ee4:	f7de f9bc 	bl	8000260 <memchr>
 8021ee8:	2800      	cmp	r0, #0
 8021eea:	d03f      	beq.n	8021f6c <_vfiprintf_r+0x22c>
 8021eec:	4b29      	ldr	r3, [pc, #164]	; (8021f94 <_vfiprintf_r+0x254>)
 8021eee:	bb1b      	cbnz	r3, 8021f38 <_vfiprintf_r+0x1f8>
 8021ef0:	9b03      	ldr	r3, [sp, #12]
 8021ef2:	3307      	adds	r3, #7
 8021ef4:	f023 0307 	bic.w	r3, r3, #7
 8021ef8:	3308      	adds	r3, #8
 8021efa:	9303      	str	r3, [sp, #12]
 8021efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021efe:	443b      	add	r3, r7
 8021f00:	9309      	str	r3, [sp, #36]	; 0x24
 8021f02:	e767      	b.n	8021dd4 <_vfiprintf_r+0x94>
 8021f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8021f08:	460c      	mov	r4, r1
 8021f0a:	2001      	movs	r0, #1
 8021f0c:	e7a5      	b.n	8021e5a <_vfiprintf_r+0x11a>
 8021f0e:	2300      	movs	r3, #0
 8021f10:	3401      	adds	r4, #1
 8021f12:	9305      	str	r3, [sp, #20]
 8021f14:	4619      	mov	r1, r3
 8021f16:	f04f 0c0a 	mov.w	ip, #10
 8021f1a:	4620      	mov	r0, r4
 8021f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021f20:	3a30      	subs	r2, #48	; 0x30
 8021f22:	2a09      	cmp	r2, #9
 8021f24:	d903      	bls.n	8021f2e <_vfiprintf_r+0x1ee>
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	d0c5      	beq.n	8021eb6 <_vfiprintf_r+0x176>
 8021f2a:	9105      	str	r1, [sp, #20]
 8021f2c:	e7c3      	b.n	8021eb6 <_vfiprintf_r+0x176>
 8021f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021f32:	4604      	mov	r4, r0
 8021f34:	2301      	movs	r3, #1
 8021f36:	e7f0      	b.n	8021f1a <_vfiprintf_r+0x1da>
 8021f38:	ab03      	add	r3, sp, #12
 8021f3a:	9300      	str	r3, [sp, #0]
 8021f3c:	462a      	mov	r2, r5
 8021f3e:	4b16      	ldr	r3, [pc, #88]	; (8021f98 <_vfiprintf_r+0x258>)
 8021f40:	a904      	add	r1, sp, #16
 8021f42:	4630      	mov	r0, r6
 8021f44:	f3af 8000 	nop.w
 8021f48:	4607      	mov	r7, r0
 8021f4a:	1c78      	adds	r0, r7, #1
 8021f4c:	d1d6      	bne.n	8021efc <_vfiprintf_r+0x1bc>
 8021f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021f50:	07d9      	lsls	r1, r3, #31
 8021f52:	d405      	bmi.n	8021f60 <_vfiprintf_r+0x220>
 8021f54:	89ab      	ldrh	r3, [r5, #12]
 8021f56:	059a      	lsls	r2, r3, #22
 8021f58:	d402      	bmi.n	8021f60 <_vfiprintf_r+0x220>
 8021f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021f5c:	f7fd ff41 	bl	801fde2 <__retarget_lock_release_recursive>
 8021f60:	89ab      	ldrh	r3, [r5, #12]
 8021f62:	065b      	lsls	r3, r3, #25
 8021f64:	f53f af12 	bmi.w	8021d8c <_vfiprintf_r+0x4c>
 8021f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021f6a:	e711      	b.n	8021d90 <_vfiprintf_r+0x50>
 8021f6c:	ab03      	add	r3, sp, #12
 8021f6e:	9300      	str	r3, [sp, #0]
 8021f70:	462a      	mov	r2, r5
 8021f72:	4b09      	ldr	r3, [pc, #36]	; (8021f98 <_vfiprintf_r+0x258>)
 8021f74:	a904      	add	r1, sp, #16
 8021f76:	4630      	mov	r0, r6
 8021f78:	f000 f880 	bl	802207c <_printf_i>
 8021f7c:	e7e4      	b.n	8021f48 <_vfiprintf_r+0x208>
 8021f7e:	bf00      	nop
 8021f80:	080289e4 	.word	0x080289e4
 8021f84:	08028a04 	.word	0x08028a04
 8021f88:	080289c4 	.word	0x080289c4
 8021f8c:	08028f63 	.word	0x08028f63
 8021f90:	08028f6d 	.word	0x08028f6d
 8021f94:	00000000 	.word	0x00000000
 8021f98:	08021d1b 	.word	0x08021d1b
 8021f9c:	08028f69 	.word	0x08028f69

08021fa0 <_printf_common>:
 8021fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fa4:	4616      	mov	r6, r2
 8021fa6:	4699      	mov	r9, r3
 8021fa8:	688a      	ldr	r2, [r1, #8]
 8021faa:	690b      	ldr	r3, [r1, #16]
 8021fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021fb0:	4293      	cmp	r3, r2
 8021fb2:	bfb8      	it	lt
 8021fb4:	4613      	movlt	r3, r2
 8021fb6:	6033      	str	r3, [r6, #0]
 8021fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021fbc:	4607      	mov	r7, r0
 8021fbe:	460c      	mov	r4, r1
 8021fc0:	b10a      	cbz	r2, 8021fc6 <_printf_common+0x26>
 8021fc2:	3301      	adds	r3, #1
 8021fc4:	6033      	str	r3, [r6, #0]
 8021fc6:	6823      	ldr	r3, [r4, #0]
 8021fc8:	0699      	lsls	r1, r3, #26
 8021fca:	bf42      	ittt	mi
 8021fcc:	6833      	ldrmi	r3, [r6, #0]
 8021fce:	3302      	addmi	r3, #2
 8021fd0:	6033      	strmi	r3, [r6, #0]
 8021fd2:	6825      	ldr	r5, [r4, #0]
 8021fd4:	f015 0506 	ands.w	r5, r5, #6
 8021fd8:	d106      	bne.n	8021fe8 <_printf_common+0x48>
 8021fda:	f104 0a19 	add.w	sl, r4, #25
 8021fde:	68e3      	ldr	r3, [r4, #12]
 8021fe0:	6832      	ldr	r2, [r6, #0]
 8021fe2:	1a9b      	subs	r3, r3, r2
 8021fe4:	42ab      	cmp	r3, r5
 8021fe6:	dc26      	bgt.n	8022036 <_printf_common+0x96>
 8021fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021fec:	1e13      	subs	r3, r2, #0
 8021fee:	6822      	ldr	r2, [r4, #0]
 8021ff0:	bf18      	it	ne
 8021ff2:	2301      	movne	r3, #1
 8021ff4:	0692      	lsls	r2, r2, #26
 8021ff6:	d42b      	bmi.n	8022050 <_printf_common+0xb0>
 8021ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021ffc:	4649      	mov	r1, r9
 8021ffe:	4638      	mov	r0, r7
 8022000:	47c0      	blx	r8
 8022002:	3001      	adds	r0, #1
 8022004:	d01e      	beq.n	8022044 <_printf_common+0xa4>
 8022006:	6823      	ldr	r3, [r4, #0]
 8022008:	68e5      	ldr	r5, [r4, #12]
 802200a:	6832      	ldr	r2, [r6, #0]
 802200c:	f003 0306 	and.w	r3, r3, #6
 8022010:	2b04      	cmp	r3, #4
 8022012:	bf08      	it	eq
 8022014:	1aad      	subeq	r5, r5, r2
 8022016:	68a3      	ldr	r3, [r4, #8]
 8022018:	6922      	ldr	r2, [r4, #16]
 802201a:	bf0c      	ite	eq
 802201c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022020:	2500      	movne	r5, #0
 8022022:	4293      	cmp	r3, r2
 8022024:	bfc4      	itt	gt
 8022026:	1a9b      	subgt	r3, r3, r2
 8022028:	18ed      	addgt	r5, r5, r3
 802202a:	2600      	movs	r6, #0
 802202c:	341a      	adds	r4, #26
 802202e:	42b5      	cmp	r5, r6
 8022030:	d11a      	bne.n	8022068 <_printf_common+0xc8>
 8022032:	2000      	movs	r0, #0
 8022034:	e008      	b.n	8022048 <_printf_common+0xa8>
 8022036:	2301      	movs	r3, #1
 8022038:	4652      	mov	r2, sl
 802203a:	4649      	mov	r1, r9
 802203c:	4638      	mov	r0, r7
 802203e:	47c0      	blx	r8
 8022040:	3001      	adds	r0, #1
 8022042:	d103      	bne.n	802204c <_printf_common+0xac>
 8022044:	f04f 30ff 	mov.w	r0, #4294967295
 8022048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802204c:	3501      	adds	r5, #1
 802204e:	e7c6      	b.n	8021fde <_printf_common+0x3e>
 8022050:	18e1      	adds	r1, r4, r3
 8022052:	1c5a      	adds	r2, r3, #1
 8022054:	2030      	movs	r0, #48	; 0x30
 8022056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802205a:	4422      	add	r2, r4
 802205c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022064:	3302      	adds	r3, #2
 8022066:	e7c7      	b.n	8021ff8 <_printf_common+0x58>
 8022068:	2301      	movs	r3, #1
 802206a:	4622      	mov	r2, r4
 802206c:	4649      	mov	r1, r9
 802206e:	4638      	mov	r0, r7
 8022070:	47c0      	blx	r8
 8022072:	3001      	adds	r0, #1
 8022074:	d0e6      	beq.n	8022044 <_printf_common+0xa4>
 8022076:	3601      	adds	r6, #1
 8022078:	e7d9      	b.n	802202e <_printf_common+0x8e>
	...

0802207c <_printf_i>:
 802207c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022080:	460c      	mov	r4, r1
 8022082:	4691      	mov	r9, r2
 8022084:	7e27      	ldrb	r7, [r4, #24]
 8022086:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022088:	2f78      	cmp	r7, #120	; 0x78
 802208a:	4680      	mov	r8, r0
 802208c:	469a      	mov	sl, r3
 802208e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022092:	d807      	bhi.n	80220a4 <_printf_i+0x28>
 8022094:	2f62      	cmp	r7, #98	; 0x62
 8022096:	d80a      	bhi.n	80220ae <_printf_i+0x32>
 8022098:	2f00      	cmp	r7, #0
 802209a:	f000 80d8 	beq.w	802224e <_printf_i+0x1d2>
 802209e:	2f58      	cmp	r7, #88	; 0x58
 80220a0:	f000 80a3 	beq.w	80221ea <_printf_i+0x16e>
 80220a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80220a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80220ac:	e03a      	b.n	8022124 <_printf_i+0xa8>
 80220ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80220b2:	2b15      	cmp	r3, #21
 80220b4:	d8f6      	bhi.n	80220a4 <_printf_i+0x28>
 80220b6:	a001      	add	r0, pc, #4	; (adr r0, 80220bc <_printf_i+0x40>)
 80220b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80220bc:	08022115 	.word	0x08022115
 80220c0:	08022129 	.word	0x08022129
 80220c4:	080220a5 	.word	0x080220a5
 80220c8:	080220a5 	.word	0x080220a5
 80220cc:	080220a5 	.word	0x080220a5
 80220d0:	080220a5 	.word	0x080220a5
 80220d4:	08022129 	.word	0x08022129
 80220d8:	080220a5 	.word	0x080220a5
 80220dc:	080220a5 	.word	0x080220a5
 80220e0:	080220a5 	.word	0x080220a5
 80220e4:	080220a5 	.word	0x080220a5
 80220e8:	08022235 	.word	0x08022235
 80220ec:	08022159 	.word	0x08022159
 80220f0:	08022217 	.word	0x08022217
 80220f4:	080220a5 	.word	0x080220a5
 80220f8:	080220a5 	.word	0x080220a5
 80220fc:	08022257 	.word	0x08022257
 8022100:	080220a5 	.word	0x080220a5
 8022104:	08022159 	.word	0x08022159
 8022108:	080220a5 	.word	0x080220a5
 802210c:	080220a5 	.word	0x080220a5
 8022110:	0802221f 	.word	0x0802221f
 8022114:	680b      	ldr	r3, [r1, #0]
 8022116:	1d1a      	adds	r2, r3, #4
 8022118:	681b      	ldr	r3, [r3, #0]
 802211a:	600a      	str	r2, [r1, #0]
 802211c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022124:	2301      	movs	r3, #1
 8022126:	e0a3      	b.n	8022270 <_printf_i+0x1f4>
 8022128:	6825      	ldr	r5, [r4, #0]
 802212a:	6808      	ldr	r0, [r1, #0]
 802212c:	062e      	lsls	r6, r5, #24
 802212e:	f100 0304 	add.w	r3, r0, #4
 8022132:	d50a      	bpl.n	802214a <_printf_i+0xce>
 8022134:	6805      	ldr	r5, [r0, #0]
 8022136:	600b      	str	r3, [r1, #0]
 8022138:	2d00      	cmp	r5, #0
 802213a:	da03      	bge.n	8022144 <_printf_i+0xc8>
 802213c:	232d      	movs	r3, #45	; 0x2d
 802213e:	426d      	negs	r5, r5
 8022140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022144:	485e      	ldr	r0, [pc, #376]	; (80222c0 <_printf_i+0x244>)
 8022146:	230a      	movs	r3, #10
 8022148:	e019      	b.n	802217e <_printf_i+0x102>
 802214a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802214e:	6805      	ldr	r5, [r0, #0]
 8022150:	600b      	str	r3, [r1, #0]
 8022152:	bf18      	it	ne
 8022154:	b22d      	sxthne	r5, r5
 8022156:	e7ef      	b.n	8022138 <_printf_i+0xbc>
 8022158:	680b      	ldr	r3, [r1, #0]
 802215a:	6825      	ldr	r5, [r4, #0]
 802215c:	1d18      	adds	r0, r3, #4
 802215e:	6008      	str	r0, [r1, #0]
 8022160:	0628      	lsls	r0, r5, #24
 8022162:	d501      	bpl.n	8022168 <_printf_i+0xec>
 8022164:	681d      	ldr	r5, [r3, #0]
 8022166:	e002      	b.n	802216e <_printf_i+0xf2>
 8022168:	0669      	lsls	r1, r5, #25
 802216a:	d5fb      	bpl.n	8022164 <_printf_i+0xe8>
 802216c:	881d      	ldrh	r5, [r3, #0]
 802216e:	4854      	ldr	r0, [pc, #336]	; (80222c0 <_printf_i+0x244>)
 8022170:	2f6f      	cmp	r7, #111	; 0x6f
 8022172:	bf0c      	ite	eq
 8022174:	2308      	moveq	r3, #8
 8022176:	230a      	movne	r3, #10
 8022178:	2100      	movs	r1, #0
 802217a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802217e:	6866      	ldr	r6, [r4, #4]
 8022180:	60a6      	str	r6, [r4, #8]
 8022182:	2e00      	cmp	r6, #0
 8022184:	bfa2      	ittt	ge
 8022186:	6821      	ldrge	r1, [r4, #0]
 8022188:	f021 0104 	bicge.w	r1, r1, #4
 802218c:	6021      	strge	r1, [r4, #0]
 802218e:	b90d      	cbnz	r5, 8022194 <_printf_i+0x118>
 8022190:	2e00      	cmp	r6, #0
 8022192:	d04d      	beq.n	8022230 <_printf_i+0x1b4>
 8022194:	4616      	mov	r6, r2
 8022196:	fbb5 f1f3 	udiv	r1, r5, r3
 802219a:	fb03 5711 	mls	r7, r3, r1, r5
 802219e:	5dc7      	ldrb	r7, [r0, r7]
 80221a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80221a4:	462f      	mov	r7, r5
 80221a6:	42bb      	cmp	r3, r7
 80221a8:	460d      	mov	r5, r1
 80221aa:	d9f4      	bls.n	8022196 <_printf_i+0x11a>
 80221ac:	2b08      	cmp	r3, #8
 80221ae:	d10b      	bne.n	80221c8 <_printf_i+0x14c>
 80221b0:	6823      	ldr	r3, [r4, #0]
 80221b2:	07df      	lsls	r7, r3, #31
 80221b4:	d508      	bpl.n	80221c8 <_printf_i+0x14c>
 80221b6:	6923      	ldr	r3, [r4, #16]
 80221b8:	6861      	ldr	r1, [r4, #4]
 80221ba:	4299      	cmp	r1, r3
 80221bc:	bfde      	ittt	le
 80221be:	2330      	movle	r3, #48	; 0x30
 80221c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80221c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80221c8:	1b92      	subs	r2, r2, r6
 80221ca:	6122      	str	r2, [r4, #16]
 80221cc:	f8cd a000 	str.w	sl, [sp]
 80221d0:	464b      	mov	r3, r9
 80221d2:	aa03      	add	r2, sp, #12
 80221d4:	4621      	mov	r1, r4
 80221d6:	4640      	mov	r0, r8
 80221d8:	f7ff fee2 	bl	8021fa0 <_printf_common>
 80221dc:	3001      	adds	r0, #1
 80221de:	d14c      	bne.n	802227a <_printf_i+0x1fe>
 80221e0:	f04f 30ff 	mov.w	r0, #4294967295
 80221e4:	b004      	add	sp, #16
 80221e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80221ea:	4835      	ldr	r0, [pc, #212]	; (80222c0 <_printf_i+0x244>)
 80221ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80221f0:	6823      	ldr	r3, [r4, #0]
 80221f2:	680e      	ldr	r6, [r1, #0]
 80221f4:	061f      	lsls	r7, r3, #24
 80221f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80221fa:	600e      	str	r6, [r1, #0]
 80221fc:	d514      	bpl.n	8022228 <_printf_i+0x1ac>
 80221fe:	07d9      	lsls	r1, r3, #31
 8022200:	bf44      	itt	mi
 8022202:	f043 0320 	orrmi.w	r3, r3, #32
 8022206:	6023      	strmi	r3, [r4, #0]
 8022208:	b91d      	cbnz	r5, 8022212 <_printf_i+0x196>
 802220a:	6823      	ldr	r3, [r4, #0]
 802220c:	f023 0320 	bic.w	r3, r3, #32
 8022210:	6023      	str	r3, [r4, #0]
 8022212:	2310      	movs	r3, #16
 8022214:	e7b0      	b.n	8022178 <_printf_i+0xfc>
 8022216:	6823      	ldr	r3, [r4, #0]
 8022218:	f043 0320 	orr.w	r3, r3, #32
 802221c:	6023      	str	r3, [r4, #0]
 802221e:	2378      	movs	r3, #120	; 0x78
 8022220:	4828      	ldr	r0, [pc, #160]	; (80222c4 <_printf_i+0x248>)
 8022222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022226:	e7e3      	b.n	80221f0 <_printf_i+0x174>
 8022228:	065e      	lsls	r6, r3, #25
 802222a:	bf48      	it	mi
 802222c:	b2ad      	uxthmi	r5, r5
 802222e:	e7e6      	b.n	80221fe <_printf_i+0x182>
 8022230:	4616      	mov	r6, r2
 8022232:	e7bb      	b.n	80221ac <_printf_i+0x130>
 8022234:	680b      	ldr	r3, [r1, #0]
 8022236:	6826      	ldr	r6, [r4, #0]
 8022238:	6960      	ldr	r0, [r4, #20]
 802223a:	1d1d      	adds	r5, r3, #4
 802223c:	600d      	str	r5, [r1, #0]
 802223e:	0635      	lsls	r5, r6, #24
 8022240:	681b      	ldr	r3, [r3, #0]
 8022242:	d501      	bpl.n	8022248 <_printf_i+0x1cc>
 8022244:	6018      	str	r0, [r3, #0]
 8022246:	e002      	b.n	802224e <_printf_i+0x1d2>
 8022248:	0671      	lsls	r1, r6, #25
 802224a:	d5fb      	bpl.n	8022244 <_printf_i+0x1c8>
 802224c:	8018      	strh	r0, [r3, #0]
 802224e:	2300      	movs	r3, #0
 8022250:	6123      	str	r3, [r4, #16]
 8022252:	4616      	mov	r6, r2
 8022254:	e7ba      	b.n	80221cc <_printf_i+0x150>
 8022256:	680b      	ldr	r3, [r1, #0]
 8022258:	1d1a      	adds	r2, r3, #4
 802225a:	600a      	str	r2, [r1, #0]
 802225c:	681e      	ldr	r6, [r3, #0]
 802225e:	6862      	ldr	r2, [r4, #4]
 8022260:	2100      	movs	r1, #0
 8022262:	4630      	mov	r0, r6
 8022264:	f7dd fffc 	bl	8000260 <memchr>
 8022268:	b108      	cbz	r0, 802226e <_printf_i+0x1f2>
 802226a:	1b80      	subs	r0, r0, r6
 802226c:	6060      	str	r0, [r4, #4]
 802226e:	6863      	ldr	r3, [r4, #4]
 8022270:	6123      	str	r3, [r4, #16]
 8022272:	2300      	movs	r3, #0
 8022274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022278:	e7a8      	b.n	80221cc <_printf_i+0x150>
 802227a:	6923      	ldr	r3, [r4, #16]
 802227c:	4632      	mov	r2, r6
 802227e:	4649      	mov	r1, r9
 8022280:	4640      	mov	r0, r8
 8022282:	47d0      	blx	sl
 8022284:	3001      	adds	r0, #1
 8022286:	d0ab      	beq.n	80221e0 <_printf_i+0x164>
 8022288:	6823      	ldr	r3, [r4, #0]
 802228a:	079b      	lsls	r3, r3, #30
 802228c:	d413      	bmi.n	80222b6 <_printf_i+0x23a>
 802228e:	68e0      	ldr	r0, [r4, #12]
 8022290:	9b03      	ldr	r3, [sp, #12]
 8022292:	4298      	cmp	r0, r3
 8022294:	bfb8      	it	lt
 8022296:	4618      	movlt	r0, r3
 8022298:	e7a4      	b.n	80221e4 <_printf_i+0x168>
 802229a:	2301      	movs	r3, #1
 802229c:	4632      	mov	r2, r6
 802229e:	4649      	mov	r1, r9
 80222a0:	4640      	mov	r0, r8
 80222a2:	47d0      	blx	sl
 80222a4:	3001      	adds	r0, #1
 80222a6:	d09b      	beq.n	80221e0 <_printf_i+0x164>
 80222a8:	3501      	adds	r5, #1
 80222aa:	68e3      	ldr	r3, [r4, #12]
 80222ac:	9903      	ldr	r1, [sp, #12]
 80222ae:	1a5b      	subs	r3, r3, r1
 80222b0:	42ab      	cmp	r3, r5
 80222b2:	dcf2      	bgt.n	802229a <_printf_i+0x21e>
 80222b4:	e7eb      	b.n	802228e <_printf_i+0x212>
 80222b6:	2500      	movs	r5, #0
 80222b8:	f104 0619 	add.w	r6, r4, #25
 80222bc:	e7f5      	b.n	80222aa <_printf_i+0x22e>
 80222be:	bf00      	nop
 80222c0:	08028f74 	.word	0x08028f74
 80222c4:	08028f85 	.word	0x08028f85

080222c8 <_putc_r>:
 80222c8:	b570      	push	{r4, r5, r6, lr}
 80222ca:	460d      	mov	r5, r1
 80222cc:	4614      	mov	r4, r2
 80222ce:	4606      	mov	r6, r0
 80222d0:	b118      	cbz	r0, 80222da <_putc_r+0x12>
 80222d2:	6983      	ldr	r3, [r0, #24]
 80222d4:	b90b      	cbnz	r3, 80222da <_putc_r+0x12>
 80222d6:	f7fd f9cf 	bl	801f678 <__sinit>
 80222da:	4b1c      	ldr	r3, [pc, #112]	; (802234c <_putc_r+0x84>)
 80222dc:	429c      	cmp	r4, r3
 80222de:	d124      	bne.n	802232a <_putc_r+0x62>
 80222e0:	6874      	ldr	r4, [r6, #4]
 80222e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80222e4:	07d8      	lsls	r0, r3, #31
 80222e6:	d405      	bmi.n	80222f4 <_putc_r+0x2c>
 80222e8:	89a3      	ldrh	r3, [r4, #12]
 80222ea:	0599      	lsls	r1, r3, #22
 80222ec:	d402      	bmi.n	80222f4 <_putc_r+0x2c>
 80222ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80222f0:	f7fd fd75 	bl	801fdde <__retarget_lock_acquire_recursive>
 80222f4:	68a3      	ldr	r3, [r4, #8]
 80222f6:	3b01      	subs	r3, #1
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	60a3      	str	r3, [r4, #8]
 80222fc:	da05      	bge.n	802230a <_putc_r+0x42>
 80222fe:	69a2      	ldr	r2, [r4, #24]
 8022300:	4293      	cmp	r3, r2
 8022302:	db1c      	blt.n	802233e <_putc_r+0x76>
 8022304:	b2eb      	uxtb	r3, r5
 8022306:	2b0a      	cmp	r3, #10
 8022308:	d019      	beq.n	802233e <_putc_r+0x76>
 802230a:	6823      	ldr	r3, [r4, #0]
 802230c:	1c5a      	adds	r2, r3, #1
 802230e:	6022      	str	r2, [r4, #0]
 8022310:	701d      	strb	r5, [r3, #0]
 8022312:	b2ed      	uxtb	r5, r5
 8022314:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022316:	07da      	lsls	r2, r3, #31
 8022318:	d405      	bmi.n	8022326 <_putc_r+0x5e>
 802231a:	89a3      	ldrh	r3, [r4, #12]
 802231c:	059b      	lsls	r3, r3, #22
 802231e:	d402      	bmi.n	8022326 <_putc_r+0x5e>
 8022320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022322:	f7fd fd5e 	bl	801fde2 <__retarget_lock_release_recursive>
 8022326:	4628      	mov	r0, r5
 8022328:	bd70      	pop	{r4, r5, r6, pc}
 802232a:	4b09      	ldr	r3, [pc, #36]	; (8022350 <_putc_r+0x88>)
 802232c:	429c      	cmp	r4, r3
 802232e:	d101      	bne.n	8022334 <_putc_r+0x6c>
 8022330:	68b4      	ldr	r4, [r6, #8]
 8022332:	e7d6      	b.n	80222e2 <_putc_r+0x1a>
 8022334:	4b07      	ldr	r3, [pc, #28]	; (8022354 <_putc_r+0x8c>)
 8022336:	429c      	cmp	r4, r3
 8022338:	bf08      	it	eq
 802233a:	68f4      	ldreq	r4, [r6, #12]
 802233c:	e7d1      	b.n	80222e2 <_putc_r+0x1a>
 802233e:	4629      	mov	r1, r5
 8022340:	4622      	mov	r2, r4
 8022342:	4630      	mov	r0, r6
 8022344:	f7ff f856 	bl	80213f4 <__swbuf_r>
 8022348:	4605      	mov	r5, r0
 802234a:	e7e3      	b.n	8022314 <_putc_r+0x4c>
 802234c:	080289e4 	.word	0x080289e4
 8022350:	08028a04 	.word	0x08028a04
 8022354:	080289c4 	.word	0x080289c4

08022358 <_read_r>:
 8022358:	b538      	push	{r3, r4, r5, lr}
 802235a:	4d07      	ldr	r5, [pc, #28]	; (8022378 <_read_r+0x20>)
 802235c:	4604      	mov	r4, r0
 802235e:	4608      	mov	r0, r1
 8022360:	4611      	mov	r1, r2
 8022362:	2200      	movs	r2, #0
 8022364:	602a      	str	r2, [r5, #0]
 8022366:	461a      	mov	r2, r3
 8022368:	f7de fd15 	bl	8000d96 <_read>
 802236c:	1c43      	adds	r3, r0, #1
 802236e:	d102      	bne.n	8022376 <_read_r+0x1e>
 8022370:	682b      	ldr	r3, [r5, #0]
 8022372:	b103      	cbz	r3, 8022376 <_read_r+0x1e>
 8022374:	6023      	str	r3, [r4, #0]
 8022376:	bd38      	pop	{r3, r4, r5, pc}
 8022378:	20000f30 	.word	0x20000f30

0802237c <sniprintf>:
 802237c:	b40c      	push	{r2, r3}
 802237e:	b530      	push	{r4, r5, lr}
 8022380:	4b17      	ldr	r3, [pc, #92]	; (80223e0 <sniprintf+0x64>)
 8022382:	1e0c      	subs	r4, r1, #0
 8022384:	681d      	ldr	r5, [r3, #0]
 8022386:	b09d      	sub	sp, #116	; 0x74
 8022388:	da08      	bge.n	802239c <sniprintf+0x20>
 802238a:	238b      	movs	r3, #139	; 0x8b
 802238c:	602b      	str	r3, [r5, #0]
 802238e:	f04f 30ff 	mov.w	r0, #4294967295
 8022392:	b01d      	add	sp, #116	; 0x74
 8022394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022398:	b002      	add	sp, #8
 802239a:	4770      	bx	lr
 802239c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80223a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80223a4:	bf14      	ite	ne
 80223a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80223aa:	4623      	moveq	r3, r4
 80223ac:	9304      	str	r3, [sp, #16]
 80223ae:	9307      	str	r3, [sp, #28]
 80223b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80223b4:	9002      	str	r0, [sp, #8]
 80223b6:	9006      	str	r0, [sp, #24]
 80223b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80223bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80223be:	ab21      	add	r3, sp, #132	; 0x84
 80223c0:	a902      	add	r1, sp, #8
 80223c2:	4628      	mov	r0, r5
 80223c4:	9301      	str	r3, [sp, #4]
 80223c6:	f7ff fb91 	bl	8021aec <_svfiprintf_r>
 80223ca:	1c43      	adds	r3, r0, #1
 80223cc:	bfbc      	itt	lt
 80223ce:	238b      	movlt	r3, #139	; 0x8b
 80223d0:	602b      	strlt	r3, [r5, #0]
 80223d2:	2c00      	cmp	r4, #0
 80223d4:	d0dd      	beq.n	8022392 <sniprintf+0x16>
 80223d6:	9b02      	ldr	r3, [sp, #8]
 80223d8:	2200      	movs	r2, #0
 80223da:	701a      	strb	r2, [r3, #0]
 80223dc:	e7d9      	b.n	8022392 <sniprintf+0x16>
 80223de:	bf00      	nop
 80223e0:	20000108 	.word	0x20000108

080223e4 <siscanf>:
 80223e4:	b40e      	push	{r1, r2, r3}
 80223e6:	b510      	push	{r4, lr}
 80223e8:	b09f      	sub	sp, #124	; 0x7c
 80223ea:	ac21      	add	r4, sp, #132	; 0x84
 80223ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80223f0:	f854 2b04 	ldr.w	r2, [r4], #4
 80223f4:	9201      	str	r2, [sp, #4]
 80223f6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80223fa:	9004      	str	r0, [sp, #16]
 80223fc:	9008      	str	r0, [sp, #32]
 80223fe:	f7dd ff1d 	bl	800023c <strlen>
 8022402:	4b0c      	ldr	r3, [pc, #48]	; (8022434 <siscanf+0x50>)
 8022404:	9005      	str	r0, [sp, #20]
 8022406:	9009      	str	r0, [sp, #36]	; 0x24
 8022408:	930d      	str	r3, [sp, #52]	; 0x34
 802240a:	480b      	ldr	r0, [pc, #44]	; (8022438 <siscanf+0x54>)
 802240c:	9a01      	ldr	r2, [sp, #4]
 802240e:	6800      	ldr	r0, [r0, #0]
 8022410:	9403      	str	r4, [sp, #12]
 8022412:	2300      	movs	r3, #0
 8022414:	9311      	str	r3, [sp, #68]	; 0x44
 8022416:	9316      	str	r3, [sp, #88]	; 0x58
 8022418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802241c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022420:	a904      	add	r1, sp, #16
 8022422:	4623      	mov	r3, r4
 8022424:	f000 f8ba 	bl	802259c <__ssvfiscanf_r>
 8022428:	b01f      	add	sp, #124	; 0x7c
 802242a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802242e:	b003      	add	sp, #12
 8022430:	4770      	bx	lr
 8022432:	bf00      	nop
 8022434:	080202b3 	.word	0x080202b3
 8022438:	20000108 	.word	0x20000108

0802243c <strcpy>:
 802243c:	4603      	mov	r3, r0
 802243e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022442:	f803 2b01 	strb.w	r2, [r3], #1
 8022446:	2a00      	cmp	r2, #0
 8022448:	d1f9      	bne.n	802243e <strcpy+0x2>
 802244a:	4770      	bx	lr

0802244c <strncmp>:
 802244c:	b510      	push	{r4, lr}
 802244e:	b16a      	cbz	r2, 802246c <strncmp+0x20>
 8022450:	3901      	subs	r1, #1
 8022452:	1884      	adds	r4, r0, r2
 8022454:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022458:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802245c:	4293      	cmp	r3, r2
 802245e:	d103      	bne.n	8022468 <strncmp+0x1c>
 8022460:	42a0      	cmp	r0, r4
 8022462:	d001      	beq.n	8022468 <strncmp+0x1c>
 8022464:	2b00      	cmp	r3, #0
 8022466:	d1f5      	bne.n	8022454 <strncmp+0x8>
 8022468:	1a98      	subs	r0, r3, r2
 802246a:	bd10      	pop	{r4, pc}
 802246c:	4610      	mov	r0, r2
 802246e:	e7fc      	b.n	802246a <strncmp+0x1e>

08022470 <__ascii_wctomb>:
 8022470:	b149      	cbz	r1, 8022486 <__ascii_wctomb+0x16>
 8022472:	2aff      	cmp	r2, #255	; 0xff
 8022474:	bf85      	ittet	hi
 8022476:	238a      	movhi	r3, #138	; 0x8a
 8022478:	6003      	strhi	r3, [r0, #0]
 802247a:	700a      	strbls	r2, [r1, #0]
 802247c:	f04f 30ff 	movhi.w	r0, #4294967295
 8022480:	bf98      	it	ls
 8022482:	2001      	movls	r0, #1
 8022484:	4770      	bx	lr
 8022486:	4608      	mov	r0, r1
 8022488:	4770      	bx	lr
	...

0802248c <__env_lock>:
 802248c:	4801      	ldr	r0, [pc, #4]	; (8022494 <__env_lock+0x8>)
 802248e:	f7fd bca6 	b.w	801fdde <__retarget_lock_acquire_recursive>
 8022492:	bf00      	nop
 8022494:	20000f26 	.word	0x20000f26

08022498 <__env_unlock>:
 8022498:	4801      	ldr	r0, [pc, #4]	; (80224a0 <__env_unlock+0x8>)
 802249a:	f7fd bca2 	b.w	801fde2 <__retarget_lock_release_recursive>
 802249e:	bf00      	nop
 80224a0:	20000f26 	.word	0x20000f26

080224a4 <memmove>:
 80224a4:	4288      	cmp	r0, r1
 80224a6:	b510      	push	{r4, lr}
 80224a8:	eb01 0402 	add.w	r4, r1, r2
 80224ac:	d902      	bls.n	80224b4 <memmove+0x10>
 80224ae:	4284      	cmp	r4, r0
 80224b0:	4623      	mov	r3, r4
 80224b2:	d807      	bhi.n	80224c4 <memmove+0x20>
 80224b4:	1e43      	subs	r3, r0, #1
 80224b6:	42a1      	cmp	r1, r4
 80224b8:	d008      	beq.n	80224cc <memmove+0x28>
 80224ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80224be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80224c2:	e7f8      	b.n	80224b6 <memmove+0x12>
 80224c4:	4402      	add	r2, r0
 80224c6:	4601      	mov	r1, r0
 80224c8:	428a      	cmp	r2, r1
 80224ca:	d100      	bne.n	80224ce <memmove+0x2a>
 80224cc:	bd10      	pop	{r4, pc}
 80224ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80224d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80224d6:	e7f7      	b.n	80224c8 <memmove+0x24>

080224d8 <_malloc_usable_size_r>:
 80224d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80224dc:	1f18      	subs	r0, r3, #4
 80224de:	2b00      	cmp	r3, #0
 80224e0:	bfbc      	itt	lt
 80224e2:	580b      	ldrlt	r3, [r1, r0]
 80224e4:	18c0      	addlt	r0, r0, r3
 80224e6:	4770      	bx	lr

080224e8 <_sungetc_r>:
 80224e8:	b538      	push	{r3, r4, r5, lr}
 80224ea:	1c4b      	adds	r3, r1, #1
 80224ec:	4614      	mov	r4, r2
 80224ee:	d103      	bne.n	80224f8 <_sungetc_r+0x10>
 80224f0:	f04f 35ff 	mov.w	r5, #4294967295
 80224f4:	4628      	mov	r0, r5
 80224f6:	bd38      	pop	{r3, r4, r5, pc}
 80224f8:	8993      	ldrh	r3, [r2, #12]
 80224fa:	f023 0320 	bic.w	r3, r3, #32
 80224fe:	8193      	strh	r3, [r2, #12]
 8022500:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022502:	6852      	ldr	r2, [r2, #4]
 8022504:	b2cd      	uxtb	r5, r1
 8022506:	b18b      	cbz	r3, 802252c <_sungetc_r+0x44>
 8022508:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802250a:	4293      	cmp	r3, r2
 802250c:	dd08      	ble.n	8022520 <_sungetc_r+0x38>
 802250e:	6823      	ldr	r3, [r4, #0]
 8022510:	1e5a      	subs	r2, r3, #1
 8022512:	6022      	str	r2, [r4, #0]
 8022514:	f803 5c01 	strb.w	r5, [r3, #-1]
 8022518:	6863      	ldr	r3, [r4, #4]
 802251a:	3301      	adds	r3, #1
 802251c:	6063      	str	r3, [r4, #4]
 802251e:	e7e9      	b.n	80224f4 <_sungetc_r+0xc>
 8022520:	4621      	mov	r1, r4
 8022522:	f000 fbbf 	bl	8022ca4 <__submore>
 8022526:	2800      	cmp	r0, #0
 8022528:	d0f1      	beq.n	802250e <_sungetc_r+0x26>
 802252a:	e7e1      	b.n	80224f0 <_sungetc_r+0x8>
 802252c:	6921      	ldr	r1, [r4, #16]
 802252e:	6823      	ldr	r3, [r4, #0]
 8022530:	b151      	cbz	r1, 8022548 <_sungetc_r+0x60>
 8022532:	4299      	cmp	r1, r3
 8022534:	d208      	bcs.n	8022548 <_sungetc_r+0x60>
 8022536:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802253a:	42a9      	cmp	r1, r5
 802253c:	d104      	bne.n	8022548 <_sungetc_r+0x60>
 802253e:	3b01      	subs	r3, #1
 8022540:	3201      	adds	r2, #1
 8022542:	6023      	str	r3, [r4, #0]
 8022544:	6062      	str	r2, [r4, #4]
 8022546:	e7d5      	b.n	80224f4 <_sungetc_r+0xc>
 8022548:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802254c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022550:	6363      	str	r3, [r4, #52]	; 0x34
 8022552:	2303      	movs	r3, #3
 8022554:	63a3      	str	r3, [r4, #56]	; 0x38
 8022556:	4623      	mov	r3, r4
 8022558:	f803 5f46 	strb.w	r5, [r3, #70]!
 802255c:	6023      	str	r3, [r4, #0]
 802255e:	2301      	movs	r3, #1
 8022560:	e7dc      	b.n	802251c <_sungetc_r+0x34>

08022562 <__ssrefill_r>:
 8022562:	b510      	push	{r4, lr}
 8022564:	460c      	mov	r4, r1
 8022566:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022568:	b169      	cbz	r1, 8022586 <__ssrefill_r+0x24>
 802256a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802256e:	4299      	cmp	r1, r3
 8022570:	d001      	beq.n	8022576 <__ssrefill_r+0x14>
 8022572:	f7fd fcd1 	bl	801ff18 <_free_r>
 8022576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022578:	6063      	str	r3, [r4, #4]
 802257a:	2000      	movs	r0, #0
 802257c:	6360      	str	r0, [r4, #52]	; 0x34
 802257e:	b113      	cbz	r3, 8022586 <__ssrefill_r+0x24>
 8022580:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022582:	6023      	str	r3, [r4, #0]
 8022584:	bd10      	pop	{r4, pc}
 8022586:	6923      	ldr	r3, [r4, #16]
 8022588:	6023      	str	r3, [r4, #0]
 802258a:	2300      	movs	r3, #0
 802258c:	6063      	str	r3, [r4, #4]
 802258e:	89a3      	ldrh	r3, [r4, #12]
 8022590:	f043 0320 	orr.w	r3, r3, #32
 8022594:	81a3      	strh	r3, [r4, #12]
 8022596:	f04f 30ff 	mov.w	r0, #4294967295
 802259a:	e7f3      	b.n	8022584 <__ssrefill_r+0x22>

0802259c <__ssvfiscanf_r>:
 802259c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225a0:	460c      	mov	r4, r1
 80225a2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80225a6:	2100      	movs	r1, #0
 80225a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80225ac:	49b2      	ldr	r1, [pc, #712]	; (8022878 <__ssvfiscanf_r+0x2dc>)
 80225ae:	91a0      	str	r1, [sp, #640]	; 0x280
 80225b0:	f10d 0804 	add.w	r8, sp, #4
 80225b4:	49b1      	ldr	r1, [pc, #708]	; (802287c <__ssvfiscanf_r+0x2e0>)
 80225b6:	4fb2      	ldr	r7, [pc, #712]	; (8022880 <__ssvfiscanf_r+0x2e4>)
 80225b8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8022884 <__ssvfiscanf_r+0x2e8>
 80225bc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80225c0:	4606      	mov	r6, r0
 80225c2:	91a1      	str	r1, [sp, #644]	; 0x284
 80225c4:	9300      	str	r3, [sp, #0]
 80225c6:	f892 a000 	ldrb.w	sl, [r2]
 80225ca:	f1ba 0f00 	cmp.w	sl, #0
 80225ce:	f000 8151 	beq.w	8022874 <__ssvfiscanf_r+0x2d8>
 80225d2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80225d6:	f013 0308 	ands.w	r3, r3, #8
 80225da:	f102 0501 	add.w	r5, r2, #1
 80225de:	d019      	beq.n	8022614 <__ssvfiscanf_r+0x78>
 80225e0:	6863      	ldr	r3, [r4, #4]
 80225e2:	2b00      	cmp	r3, #0
 80225e4:	dd0f      	ble.n	8022606 <__ssvfiscanf_r+0x6a>
 80225e6:	6823      	ldr	r3, [r4, #0]
 80225e8:	781a      	ldrb	r2, [r3, #0]
 80225ea:	5cba      	ldrb	r2, [r7, r2]
 80225ec:	0712      	lsls	r2, r2, #28
 80225ee:	d401      	bmi.n	80225f4 <__ssvfiscanf_r+0x58>
 80225f0:	462a      	mov	r2, r5
 80225f2:	e7e8      	b.n	80225c6 <__ssvfiscanf_r+0x2a>
 80225f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80225f6:	3201      	adds	r2, #1
 80225f8:	9245      	str	r2, [sp, #276]	; 0x114
 80225fa:	6862      	ldr	r2, [r4, #4]
 80225fc:	3301      	adds	r3, #1
 80225fe:	3a01      	subs	r2, #1
 8022600:	6062      	str	r2, [r4, #4]
 8022602:	6023      	str	r3, [r4, #0]
 8022604:	e7ec      	b.n	80225e0 <__ssvfiscanf_r+0x44>
 8022606:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022608:	4621      	mov	r1, r4
 802260a:	4630      	mov	r0, r6
 802260c:	4798      	blx	r3
 802260e:	2800      	cmp	r0, #0
 8022610:	d0e9      	beq.n	80225e6 <__ssvfiscanf_r+0x4a>
 8022612:	e7ed      	b.n	80225f0 <__ssvfiscanf_r+0x54>
 8022614:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8022618:	f040 8083 	bne.w	8022722 <__ssvfiscanf_r+0x186>
 802261c:	9341      	str	r3, [sp, #260]	; 0x104
 802261e:	9343      	str	r3, [sp, #268]	; 0x10c
 8022620:	7853      	ldrb	r3, [r2, #1]
 8022622:	2b2a      	cmp	r3, #42	; 0x2a
 8022624:	bf02      	ittt	eq
 8022626:	2310      	moveq	r3, #16
 8022628:	1c95      	addeq	r5, r2, #2
 802262a:	9341      	streq	r3, [sp, #260]	; 0x104
 802262c:	220a      	movs	r2, #10
 802262e:	46ab      	mov	fp, r5
 8022630:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8022634:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8022638:	2b09      	cmp	r3, #9
 802263a:	d91d      	bls.n	8022678 <__ssvfiscanf_r+0xdc>
 802263c:	4891      	ldr	r0, [pc, #580]	; (8022884 <__ssvfiscanf_r+0x2e8>)
 802263e:	2203      	movs	r2, #3
 8022640:	f7dd fe0e 	bl	8000260 <memchr>
 8022644:	b140      	cbz	r0, 8022658 <__ssvfiscanf_r+0xbc>
 8022646:	2301      	movs	r3, #1
 8022648:	eba0 0009 	sub.w	r0, r0, r9
 802264c:	fa03 f000 	lsl.w	r0, r3, r0
 8022650:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022652:	4318      	orrs	r0, r3
 8022654:	9041      	str	r0, [sp, #260]	; 0x104
 8022656:	465d      	mov	r5, fp
 8022658:	f815 3b01 	ldrb.w	r3, [r5], #1
 802265c:	2b78      	cmp	r3, #120	; 0x78
 802265e:	d806      	bhi.n	802266e <__ssvfiscanf_r+0xd2>
 8022660:	2b57      	cmp	r3, #87	; 0x57
 8022662:	d810      	bhi.n	8022686 <__ssvfiscanf_r+0xea>
 8022664:	2b25      	cmp	r3, #37	; 0x25
 8022666:	d05c      	beq.n	8022722 <__ssvfiscanf_r+0x186>
 8022668:	d856      	bhi.n	8022718 <__ssvfiscanf_r+0x17c>
 802266a:	2b00      	cmp	r3, #0
 802266c:	d074      	beq.n	8022758 <__ssvfiscanf_r+0x1bc>
 802266e:	2303      	movs	r3, #3
 8022670:	9347      	str	r3, [sp, #284]	; 0x11c
 8022672:	230a      	movs	r3, #10
 8022674:	9342      	str	r3, [sp, #264]	; 0x108
 8022676:	e081      	b.n	802277c <__ssvfiscanf_r+0x1e0>
 8022678:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802267a:	fb02 1303 	mla	r3, r2, r3, r1
 802267e:	3b30      	subs	r3, #48	; 0x30
 8022680:	9343      	str	r3, [sp, #268]	; 0x10c
 8022682:	465d      	mov	r5, fp
 8022684:	e7d3      	b.n	802262e <__ssvfiscanf_r+0x92>
 8022686:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802268a:	2a20      	cmp	r2, #32
 802268c:	d8ef      	bhi.n	802266e <__ssvfiscanf_r+0xd2>
 802268e:	a101      	add	r1, pc, #4	; (adr r1, 8022694 <__ssvfiscanf_r+0xf8>)
 8022690:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022694:	08022767 	.word	0x08022767
 8022698:	0802266f 	.word	0x0802266f
 802269c:	0802266f 	.word	0x0802266f
 80226a0:	080227c5 	.word	0x080227c5
 80226a4:	0802266f 	.word	0x0802266f
 80226a8:	0802266f 	.word	0x0802266f
 80226ac:	0802266f 	.word	0x0802266f
 80226b0:	0802266f 	.word	0x0802266f
 80226b4:	0802266f 	.word	0x0802266f
 80226b8:	0802266f 	.word	0x0802266f
 80226bc:	0802266f 	.word	0x0802266f
 80226c0:	080227db 	.word	0x080227db
 80226c4:	080227b1 	.word	0x080227b1
 80226c8:	0802271f 	.word	0x0802271f
 80226cc:	0802271f 	.word	0x0802271f
 80226d0:	0802271f 	.word	0x0802271f
 80226d4:	0802266f 	.word	0x0802266f
 80226d8:	080227b5 	.word	0x080227b5
 80226dc:	0802266f 	.word	0x0802266f
 80226e0:	0802266f 	.word	0x0802266f
 80226e4:	0802266f 	.word	0x0802266f
 80226e8:	0802266f 	.word	0x0802266f
 80226ec:	080227eb 	.word	0x080227eb
 80226f0:	080227bd 	.word	0x080227bd
 80226f4:	0802275f 	.word	0x0802275f
 80226f8:	0802266f 	.word	0x0802266f
 80226fc:	0802266f 	.word	0x0802266f
 8022700:	080227e7 	.word	0x080227e7
 8022704:	0802266f 	.word	0x0802266f
 8022708:	080227b1 	.word	0x080227b1
 802270c:	0802266f 	.word	0x0802266f
 8022710:	0802266f 	.word	0x0802266f
 8022714:	08022767 	.word	0x08022767
 8022718:	3b45      	subs	r3, #69	; 0x45
 802271a:	2b02      	cmp	r3, #2
 802271c:	d8a7      	bhi.n	802266e <__ssvfiscanf_r+0xd2>
 802271e:	2305      	movs	r3, #5
 8022720:	e02b      	b.n	802277a <__ssvfiscanf_r+0x1de>
 8022722:	6863      	ldr	r3, [r4, #4]
 8022724:	2b00      	cmp	r3, #0
 8022726:	dd0d      	ble.n	8022744 <__ssvfiscanf_r+0x1a8>
 8022728:	6823      	ldr	r3, [r4, #0]
 802272a:	781a      	ldrb	r2, [r3, #0]
 802272c:	4552      	cmp	r2, sl
 802272e:	f040 80a1 	bne.w	8022874 <__ssvfiscanf_r+0x2d8>
 8022732:	3301      	adds	r3, #1
 8022734:	6862      	ldr	r2, [r4, #4]
 8022736:	6023      	str	r3, [r4, #0]
 8022738:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802273a:	3a01      	subs	r2, #1
 802273c:	3301      	adds	r3, #1
 802273e:	6062      	str	r2, [r4, #4]
 8022740:	9345      	str	r3, [sp, #276]	; 0x114
 8022742:	e755      	b.n	80225f0 <__ssvfiscanf_r+0x54>
 8022744:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022746:	4621      	mov	r1, r4
 8022748:	4630      	mov	r0, r6
 802274a:	4798      	blx	r3
 802274c:	2800      	cmp	r0, #0
 802274e:	d0eb      	beq.n	8022728 <__ssvfiscanf_r+0x18c>
 8022750:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022752:	2800      	cmp	r0, #0
 8022754:	f040 8084 	bne.w	8022860 <__ssvfiscanf_r+0x2c4>
 8022758:	f04f 30ff 	mov.w	r0, #4294967295
 802275c:	e086      	b.n	802286c <__ssvfiscanf_r+0x2d0>
 802275e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022760:	f042 0220 	orr.w	r2, r2, #32
 8022764:	9241      	str	r2, [sp, #260]	; 0x104
 8022766:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802276c:	9241      	str	r2, [sp, #260]	; 0x104
 802276e:	2210      	movs	r2, #16
 8022770:	2b6f      	cmp	r3, #111	; 0x6f
 8022772:	9242      	str	r2, [sp, #264]	; 0x108
 8022774:	bf34      	ite	cc
 8022776:	2303      	movcc	r3, #3
 8022778:	2304      	movcs	r3, #4
 802277a:	9347      	str	r3, [sp, #284]	; 0x11c
 802277c:	6863      	ldr	r3, [r4, #4]
 802277e:	2b00      	cmp	r3, #0
 8022780:	dd41      	ble.n	8022806 <__ssvfiscanf_r+0x26a>
 8022782:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022784:	0659      	lsls	r1, r3, #25
 8022786:	d404      	bmi.n	8022792 <__ssvfiscanf_r+0x1f6>
 8022788:	6823      	ldr	r3, [r4, #0]
 802278a:	781a      	ldrb	r2, [r3, #0]
 802278c:	5cba      	ldrb	r2, [r7, r2]
 802278e:	0712      	lsls	r2, r2, #28
 8022790:	d440      	bmi.n	8022814 <__ssvfiscanf_r+0x278>
 8022792:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8022794:	2b02      	cmp	r3, #2
 8022796:	dc4f      	bgt.n	8022838 <__ssvfiscanf_r+0x29c>
 8022798:	466b      	mov	r3, sp
 802279a:	4622      	mov	r2, r4
 802279c:	a941      	add	r1, sp, #260	; 0x104
 802279e:	4630      	mov	r0, r6
 80227a0:	f000 f874 	bl	802288c <_scanf_chars>
 80227a4:	2801      	cmp	r0, #1
 80227a6:	d065      	beq.n	8022874 <__ssvfiscanf_r+0x2d8>
 80227a8:	2802      	cmp	r0, #2
 80227aa:	f47f af21 	bne.w	80225f0 <__ssvfiscanf_r+0x54>
 80227ae:	e7cf      	b.n	8022750 <__ssvfiscanf_r+0x1b4>
 80227b0:	220a      	movs	r2, #10
 80227b2:	e7dd      	b.n	8022770 <__ssvfiscanf_r+0x1d4>
 80227b4:	2300      	movs	r3, #0
 80227b6:	9342      	str	r3, [sp, #264]	; 0x108
 80227b8:	2303      	movs	r3, #3
 80227ba:	e7de      	b.n	802277a <__ssvfiscanf_r+0x1de>
 80227bc:	2308      	movs	r3, #8
 80227be:	9342      	str	r3, [sp, #264]	; 0x108
 80227c0:	2304      	movs	r3, #4
 80227c2:	e7da      	b.n	802277a <__ssvfiscanf_r+0x1de>
 80227c4:	4629      	mov	r1, r5
 80227c6:	4640      	mov	r0, r8
 80227c8:	f000 f9ac 	bl	8022b24 <__sccl>
 80227cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80227ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80227d2:	9341      	str	r3, [sp, #260]	; 0x104
 80227d4:	4605      	mov	r5, r0
 80227d6:	2301      	movs	r3, #1
 80227d8:	e7cf      	b.n	802277a <__ssvfiscanf_r+0x1de>
 80227da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80227dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80227e0:	9341      	str	r3, [sp, #260]	; 0x104
 80227e2:	2300      	movs	r3, #0
 80227e4:	e7c9      	b.n	802277a <__ssvfiscanf_r+0x1de>
 80227e6:	2302      	movs	r3, #2
 80227e8:	e7c7      	b.n	802277a <__ssvfiscanf_r+0x1de>
 80227ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 80227ec:	06c3      	lsls	r3, r0, #27
 80227ee:	f53f aeff 	bmi.w	80225f0 <__ssvfiscanf_r+0x54>
 80227f2:	9b00      	ldr	r3, [sp, #0]
 80227f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80227f6:	1d19      	adds	r1, r3, #4
 80227f8:	9100      	str	r1, [sp, #0]
 80227fa:	681b      	ldr	r3, [r3, #0]
 80227fc:	07c0      	lsls	r0, r0, #31
 80227fe:	bf4c      	ite	mi
 8022800:	801a      	strhmi	r2, [r3, #0]
 8022802:	601a      	strpl	r2, [r3, #0]
 8022804:	e6f4      	b.n	80225f0 <__ssvfiscanf_r+0x54>
 8022806:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022808:	4621      	mov	r1, r4
 802280a:	4630      	mov	r0, r6
 802280c:	4798      	blx	r3
 802280e:	2800      	cmp	r0, #0
 8022810:	d0b7      	beq.n	8022782 <__ssvfiscanf_r+0x1e6>
 8022812:	e79d      	b.n	8022750 <__ssvfiscanf_r+0x1b4>
 8022814:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022816:	3201      	adds	r2, #1
 8022818:	9245      	str	r2, [sp, #276]	; 0x114
 802281a:	6862      	ldr	r2, [r4, #4]
 802281c:	3a01      	subs	r2, #1
 802281e:	2a00      	cmp	r2, #0
 8022820:	6062      	str	r2, [r4, #4]
 8022822:	dd02      	ble.n	802282a <__ssvfiscanf_r+0x28e>
 8022824:	3301      	adds	r3, #1
 8022826:	6023      	str	r3, [r4, #0]
 8022828:	e7ae      	b.n	8022788 <__ssvfiscanf_r+0x1ec>
 802282a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802282c:	4621      	mov	r1, r4
 802282e:	4630      	mov	r0, r6
 8022830:	4798      	blx	r3
 8022832:	2800      	cmp	r0, #0
 8022834:	d0a8      	beq.n	8022788 <__ssvfiscanf_r+0x1ec>
 8022836:	e78b      	b.n	8022750 <__ssvfiscanf_r+0x1b4>
 8022838:	2b04      	cmp	r3, #4
 802283a:	dc06      	bgt.n	802284a <__ssvfiscanf_r+0x2ae>
 802283c:	466b      	mov	r3, sp
 802283e:	4622      	mov	r2, r4
 8022840:	a941      	add	r1, sp, #260	; 0x104
 8022842:	4630      	mov	r0, r6
 8022844:	f000 f87a 	bl	802293c <_scanf_i>
 8022848:	e7ac      	b.n	80227a4 <__ssvfiscanf_r+0x208>
 802284a:	4b0f      	ldr	r3, [pc, #60]	; (8022888 <__ssvfiscanf_r+0x2ec>)
 802284c:	2b00      	cmp	r3, #0
 802284e:	f43f aecf 	beq.w	80225f0 <__ssvfiscanf_r+0x54>
 8022852:	466b      	mov	r3, sp
 8022854:	4622      	mov	r2, r4
 8022856:	a941      	add	r1, sp, #260	; 0x104
 8022858:	4630      	mov	r0, r6
 802285a:	f3af 8000 	nop.w
 802285e:	e7a1      	b.n	80227a4 <__ssvfiscanf_r+0x208>
 8022860:	89a3      	ldrh	r3, [r4, #12]
 8022862:	f013 0f40 	tst.w	r3, #64	; 0x40
 8022866:	bf18      	it	ne
 8022868:	f04f 30ff 	movne.w	r0, #4294967295
 802286c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8022870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022874:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022876:	e7f9      	b.n	802286c <__ssvfiscanf_r+0x2d0>
 8022878:	080224e9 	.word	0x080224e9
 802287c:	08022563 	.word	0x08022563
 8022880:	08028e59 	.word	0x08028e59
 8022884:	08028f69 	.word	0x08028f69
 8022888:	00000000 	.word	0x00000000

0802288c <_scanf_chars>:
 802288c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022890:	4615      	mov	r5, r2
 8022892:	688a      	ldr	r2, [r1, #8]
 8022894:	4680      	mov	r8, r0
 8022896:	460c      	mov	r4, r1
 8022898:	b932      	cbnz	r2, 80228a8 <_scanf_chars+0x1c>
 802289a:	698a      	ldr	r2, [r1, #24]
 802289c:	2a00      	cmp	r2, #0
 802289e:	bf0c      	ite	eq
 80228a0:	2201      	moveq	r2, #1
 80228a2:	f04f 32ff 	movne.w	r2, #4294967295
 80228a6:	608a      	str	r2, [r1, #8]
 80228a8:	6822      	ldr	r2, [r4, #0]
 80228aa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8022938 <_scanf_chars+0xac>
 80228ae:	06d1      	lsls	r1, r2, #27
 80228b0:	bf5f      	itttt	pl
 80228b2:	681a      	ldrpl	r2, [r3, #0]
 80228b4:	1d11      	addpl	r1, r2, #4
 80228b6:	6019      	strpl	r1, [r3, #0]
 80228b8:	6816      	ldrpl	r6, [r2, #0]
 80228ba:	2700      	movs	r7, #0
 80228bc:	69a0      	ldr	r0, [r4, #24]
 80228be:	b188      	cbz	r0, 80228e4 <_scanf_chars+0x58>
 80228c0:	2801      	cmp	r0, #1
 80228c2:	d107      	bne.n	80228d4 <_scanf_chars+0x48>
 80228c4:	682b      	ldr	r3, [r5, #0]
 80228c6:	781a      	ldrb	r2, [r3, #0]
 80228c8:	6963      	ldr	r3, [r4, #20]
 80228ca:	5c9b      	ldrb	r3, [r3, r2]
 80228cc:	b953      	cbnz	r3, 80228e4 <_scanf_chars+0x58>
 80228ce:	bb27      	cbnz	r7, 802291a <_scanf_chars+0x8e>
 80228d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80228d4:	2802      	cmp	r0, #2
 80228d6:	d120      	bne.n	802291a <_scanf_chars+0x8e>
 80228d8:	682b      	ldr	r3, [r5, #0]
 80228da:	781b      	ldrb	r3, [r3, #0]
 80228dc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80228e0:	071b      	lsls	r3, r3, #28
 80228e2:	d41a      	bmi.n	802291a <_scanf_chars+0x8e>
 80228e4:	6823      	ldr	r3, [r4, #0]
 80228e6:	06da      	lsls	r2, r3, #27
 80228e8:	bf5e      	ittt	pl
 80228ea:	682b      	ldrpl	r3, [r5, #0]
 80228ec:	781b      	ldrbpl	r3, [r3, #0]
 80228ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 80228f2:	682a      	ldr	r2, [r5, #0]
 80228f4:	686b      	ldr	r3, [r5, #4]
 80228f6:	3201      	adds	r2, #1
 80228f8:	602a      	str	r2, [r5, #0]
 80228fa:	68a2      	ldr	r2, [r4, #8]
 80228fc:	3b01      	subs	r3, #1
 80228fe:	3a01      	subs	r2, #1
 8022900:	606b      	str	r3, [r5, #4]
 8022902:	3701      	adds	r7, #1
 8022904:	60a2      	str	r2, [r4, #8]
 8022906:	b142      	cbz	r2, 802291a <_scanf_chars+0x8e>
 8022908:	2b00      	cmp	r3, #0
 802290a:	dcd7      	bgt.n	80228bc <_scanf_chars+0x30>
 802290c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022910:	4629      	mov	r1, r5
 8022912:	4640      	mov	r0, r8
 8022914:	4798      	blx	r3
 8022916:	2800      	cmp	r0, #0
 8022918:	d0d0      	beq.n	80228bc <_scanf_chars+0x30>
 802291a:	6823      	ldr	r3, [r4, #0]
 802291c:	f013 0310 	ands.w	r3, r3, #16
 8022920:	d105      	bne.n	802292e <_scanf_chars+0xa2>
 8022922:	68e2      	ldr	r2, [r4, #12]
 8022924:	3201      	adds	r2, #1
 8022926:	60e2      	str	r2, [r4, #12]
 8022928:	69a2      	ldr	r2, [r4, #24]
 802292a:	b102      	cbz	r2, 802292e <_scanf_chars+0xa2>
 802292c:	7033      	strb	r3, [r6, #0]
 802292e:	6923      	ldr	r3, [r4, #16]
 8022930:	441f      	add	r7, r3
 8022932:	6127      	str	r7, [r4, #16]
 8022934:	2000      	movs	r0, #0
 8022936:	e7cb      	b.n	80228d0 <_scanf_chars+0x44>
 8022938:	08028e59 	.word	0x08028e59

0802293c <_scanf_i>:
 802293c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022940:	4698      	mov	r8, r3
 8022942:	4b74      	ldr	r3, [pc, #464]	; (8022b14 <_scanf_i+0x1d8>)
 8022944:	460c      	mov	r4, r1
 8022946:	4682      	mov	sl, r0
 8022948:	4616      	mov	r6, r2
 802294a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802294e:	b087      	sub	sp, #28
 8022950:	ab03      	add	r3, sp, #12
 8022952:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8022956:	4b70      	ldr	r3, [pc, #448]	; (8022b18 <_scanf_i+0x1dc>)
 8022958:	69a1      	ldr	r1, [r4, #24]
 802295a:	4a70      	ldr	r2, [pc, #448]	; (8022b1c <_scanf_i+0x1e0>)
 802295c:	2903      	cmp	r1, #3
 802295e:	bf18      	it	ne
 8022960:	461a      	movne	r2, r3
 8022962:	68a3      	ldr	r3, [r4, #8]
 8022964:	9201      	str	r2, [sp, #4]
 8022966:	1e5a      	subs	r2, r3, #1
 8022968:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802296c:	bf88      	it	hi
 802296e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8022972:	4627      	mov	r7, r4
 8022974:	bf82      	ittt	hi
 8022976:	eb03 0905 	addhi.w	r9, r3, r5
 802297a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802297e:	60a3      	strhi	r3, [r4, #8]
 8022980:	f857 3b1c 	ldr.w	r3, [r7], #28
 8022984:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8022988:	bf98      	it	ls
 802298a:	f04f 0900 	movls.w	r9, #0
 802298e:	6023      	str	r3, [r4, #0]
 8022990:	463d      	mov	r5, r7
 8022992:	f04f 0b00 	mov.w	fp, #0
 8022996:	6831      	ldr	r1, [r6, #0]
 8022998:	ab03      	add	r3, sp, #12
 802299a:	7809      	ldrb	r1, [r1, #0]
 802299c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80229a0:	2202      	movs	r2, #2
 80229a2:	f7dd fc5d 	bl	8000260 <memchr>
 80229a6:	b328      	cbz	r0, 80229f4 <_scanf_i+0xb8>
 80229a8:	f1bb 0f01 	cmp.w	fp, #1
 80229ac:	d159      	bne.n	8022a62 <_scanf_i+0x126>
 80229ae:	6862      	ldr	r2, [r4, #4]
 80229b0:	b92a      	cbnz	r2, 80229be <_scanf_i+0x82>
 80229b2:	6822      	ldr	r2, [r4, #0]
 80229b4:	2308      	movs	r3, #8
 80229b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80229ba:	6063      	str	r3, [r4, #4]
 80229bc:	6022      	str	r2, [r4, #0]
 80229be:	6822      	ldr	r2, [r4, #0]
 80229c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80229c4:	6022      	str	r2, [r4, #0]
 80229c6:	68a2      	ldr	r2, [r4, #8]
 80229c8:	1e51      	subs	r1, r2, #1
 80229ca:	60a1      	str	r1, [r4, #8]
 80229cc:	b192      	cbz	r2, 80229f4 <_scanf_i+0xb8>
 80229ce:	6832      	ldr	r2, [r6, #0]
 80229d0:	1c51      	adds	r1, r2, #1
 80229d2:	6031      	str	r1, [r6, #0]
 80229d4:	7812      	ldrb	r2, [r2, #0]
 80229d6:	f805 2b01 	strb.w	r2, [r5], #1
 80229da:	6872      	ldr	r2, [r6, #4]
 80229dc:	3a01      	subs	r2, #1
 80229de:	2a00      	cmp	r2, #0
 80229e0:	6072      	str	r2, [r6, #4]
 80229e2:	dc07      	bgt.n	80229f4 <_scanf_i+0xb8>
 80229e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80229e8:	4631      	mov	r1, r6
 80229ea:	4650      	mov	r0, sl
 80229ec:	4790      	blx	r2
 80229ee:	2800      	cmp	r0, #0
 80229f0:	f040 8085 	bne.w	8022afe <_scanf_i+0x1c2>
 80229f4:	f10b 0b01 	add.w	fp, fp, #1
 80229f8:	f1bb 0f03 	cmp.w	fp, #3
 80229fc:	d1cb      	bne.n	8022996 <_scanf_i+0x5a>
 80229fe:	6863      	ldr	r3, [r4, #4]
 8022a00:	b90b      	cbnz	r3, 8022a06 <_scanf_i+0xca>
 8022a02:	230a      	movs	r3, #10
 8022a04:	6063      	str	r3, [r4, #4]
 8022a06:	6863      	ldr	r3, [r4, #4]
 8022a08:	4945      	ldr	r1, [pc, #276]	; (8022b20 <_scanf_i+0x1e4>)
 8022a0a:	6960      	ldr	r0, [r4, #20]
 8022a0c:	1ac9      	subs	r1, r1, r3
 8022a0e:	f000 f889 	bl	8022b24 <__sccl>
 8022a12:	f04f 0b00 	mov.w	fp, #0
 8022a16:	68a3      	ldr	r3, [r4, #8]
 8022a18:	6822      	ldr	r2, [r4, #0]
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d03d      	beq.n	8022a9a <_scanf_i+0x15e>
 8022a1e:	6831      	ldr	r1, [r6, #0]
 8022a20:	6960      	ldr	r0, [r4, #20]
 8022a22:	f891 c000 	ldrb.w	ip, [r1]
 8022a26:	f810 000c 	ldrb.w	r0, [r0, ip]
 8022a2a:	2800      	cmp	r0, #0
 8022a2c:	d035      	beq.n	8022a9a <_scanf_i+0x15e>
 8022a2e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8022a32:	d124      	bne.n	8022a7e <_scanf_i+0x142>
 8022a34:	0510      	lsls	r0, r2, #20
 8022a36:	d522      	bpl.n	8022a7e <_scanf_i+0x142>
 8022a38:	f10b 0b01 	add.w	fp, fp, #1
 8022a3c:	f1b9 0f00 	cmp.w	r9, #0
 8022a40:	d003      	beq.n	8022a4a <_scanf_i+0x10e>
 8022a42:	3301      	adds	r3, #1
 8022a44:	f109 39ff 	add.w	r9, r9, #4294967295
 8022a48:	60a3      	str	r3, [r4, #8]
 8022a4a:	6873      	ldr	r3, [r6, #4]
 8022a4c:	3b01      	subs	r3, #1
 8022a4e:	2b00      	cmp	r3, #0
 8022a50:	6073      	str	r3, [r6, #4]
 8022a52:	dd1b      	ble.n	8022a8c <_scanf_i+0x150>
 8022a54:	6833      	ldr	r3, [r6, #0]
 8022a56:	3301      	adds	r3, #1
 8022a58:	6033      	str	r3, [r6, #0]
 8022a5a:	68a3      	ldr	r3, [r4, #8]
 8022a5c:	3b01      	subs	r3, #1
 8022a5e:	60a3      	str	r3, [r4, #8]
 8022a60:	e7d9      	b.n	8022a16 <_scanf_i+0xda>
 8022a62:	f1bb 0f02 	cmp.w	fp, #2
 8022a66:	d1ae      	bne.n	80229c6 <_scanf_i+0x8a>
 8022a68:	6822      	ldr	r2, [r4, #0]
 8022a6a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8022a6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022a72:	d1bf      	bne.n	80229f4 <_scanf_i+0xb8>
 8022a74:	2310      	movs	r3, #16
 8022a76:	6063      	str	r3, [r4, #4]
 8022a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022a7c:	e7a2      	b.n	80229c4 <_scanf_i+0x88>
 8022a7e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8022a82:	6022      	str	r2, [r4, #0]
 8022a84:	780b      	ldrb	r3, [r1, #0]
 8022a86:	f805 3b01 	strb.w	r3, [r5], #1
 8022a8a:	e7de      	b.n	8022a4a <_scanf_i+0x10e>
 8022a8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022a90:	4631      	mov	r1, r6
 8022a92:	4650      	mov	r0, sl
 8022a94:	4798      	blx	r3
 8022a96:	2800      	cmp	r0, #0
 8022a98:	d0df      	beq.n	8022a5a <_scanf_i+0x11e>
 8022a9a:	6823      	ldr	r3, [r4, #0]
 8022a9c:	05d9      	lsls	r1, r3, #23
 8022a9e:	d50d      	bpl.n	8022abc <_scanf_i+0x180>
 8022aa0:	42bd      	cmp	r5, r7
 8022aa2:	d909      	bls.n	8022ab8 <_scanf_i+0x17c>
 8022aa4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022aa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022aac:	4632      	mov	r2, r6
 8022aae:	4650      	mov	r0, sl
 8022ab0:	4798      	blx	r3
 8022ab2:	f105 39ff 	add.w	r9, r5, #4294967295
 8022ab6:	464d      	mov	r5, r9
 8022ab8:	42bd      	cmp	r5, r7
 8022aba:	d028      	beq.n	8022b0e <_scanf_i+0x1d2>
 8022abc:	6822      	ldr	r2, [r4, #0]
 8022abe:	f012 0210 	ands.w	r2, r2, #16
 8022ac2:	d113      	bne.n	8022aec <_scanf_i+0x1b0>
 8022ac4:	702a      	strb	r2, [r5, #0]
 8022ac6:	6863      	ldr	r3, [r4, #4]
 8022ac8:	9e01      	ldr	r6, [sp, #4]
 8022aca:	4639      	mov	r1, r7
 8022acc:	4650      	mov	r0, sl
 8022ace:	47b0      	blx	r6
 8022ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8022ad4:	6821      	ldr	r1, [r4, #0]
 8022ad6:	1d1a      	adds	r2, r3, #4
 8022ad8:	f8c8 2000 	str.w	r2, [r8]
 8022adc:	f011 0f20 	tst.w	r1, #32
 8022ae0:	681b      	ldr	r3, [r3, #0]
 8022ae2:	d00f      	beq.n	8022b04 <_scanf_i+0x1c8>
 8022ae4:	6018      	str	r0, [r3, #0]
 8022ae6:	68e3      	ldr	r3, [r4, #12]
 8022ae8:	3301      	adds	r3, #1
 8022aea:	60e3      	str	r3, [r4, #12]
 8022aec:	1bed      	subs	r5, r5, r7
 8022aee:	44ab      	add	fp, r5
 8022af0:	6925      	ldr	r5, [r4, #16]
 8022af2:	445d      	add	r5, fp
 8022af4:	6125      	str	r5, [r4, #16]
 8022af6:	2000      	movs	r0, #0
 8022af8:	b007      	add	sp, #28
 8022afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022afe:	f04f 0b00 	mov.w	fp, #0
 8022b02:	e7ca      	b.n	8022a9a <_scanf_i+0x15e>
 8022b04:	07ca      	lsls	r2, r1, #31
 8022b06:	bf4c      	ite	mi
 8022b08:	8018      	strhmi	r0, [r3, #0]
 8022b0a:	6018      	strpl	r0, [r3, #0]
 8022b0c:	e7eb      	b.n	8022ae6 <_scanf_i+0x1aa>
 8022b0e:	2001      	movs	r0, #1
 8022b10:	e7f2      	b.n	8022af8 <_scanf_i+0x1bc>
 8022b12:	bf00      	nop
 8022b14:	08026084 	.word	0x08026084
 8022b18:	08020efd 	.word	0x08020efd
 8022b1c:	08022ca1 	.word	0x08022ca1
 8022b20:	08028faf 	.word	0x08028faf

08022b24 <__sccl>:
 8022b24:	b570      	push	{r4, r5, r6, lr}
 8022b26:	780b      	ldrb	r3, [r1, #0]
 8022b28:	4604      	mov	r4, r0
 8022b2a:	2b5e      	cmp	r3, #94	; 0x5e
 8022b2c:	bf0b      	itete	eq
 8022b2e:	784b      	ldrbeq	r3, [r1, #1]
 8022b30:	1c48      	addne	r0, r1, #1
 8022b32:	1c88      	addeq	r0, r1, #2
 8022b34:	2200      	movne	r2, #0
 8022b36:	bf08      	it	eq
 8022b38:	2201      	moveq	r2, #1
 8022b3a:	1e61      	subs	r1, r4, #1
 8022b3c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8022b40:	f801 2f01 	strb.w	r2, [r1, #1]!
 8022b44:	42a9      	cmp	r1, r5
 8022b46:	d1fb      	bne.n	8022b40 <__sccl+0x1c>
 8022b48:	b90b      	cbnz	r3, 8022b4e <__sccl+0x2a>
 8022b4a:	3801      	subs	r0, #1
 8022b4c:	bd70      	pop	{r4, r5, r6, pc}
 8022b4e:	f082 0101 	eor.w	r1, r2, #1
 8022b52:	54e1      	strb	r1, [r4, r3]
 8022b54:	1c42      	adds	r2, r0, #1
 8022b56:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8022b5a:	2d2d      	cmp	r5, #45	; 0x2d
 8022b5c:	f102 36ff 	add.w	r6, r2, #4294967295
 8022b60:	4610      	mov	r0, r2
 8022b62:	d006      	beq.n	8022b72 <__sccl+0x4e>
 8022b64:	2d5d      	cmp	r5, #93	; 0x5d
 8022b66:	d0f1      	beq.n	8022b4c <__sccl+0x28>
 8022b68:	b90d      	cbnz	r5, 8022b6e <__sccl+0x4a>
 8022b6a:	4630      	mov	r0, r6
 8022b6c:	e7ee      	b.n	8022b4c <__sccl+0x28>
 8022b6e:	462b      	mov	r3, r5
 8022b70:	e7ef      	b.n	8022b52 <__sccl+0x2e>
 8022b72:	7816      	ldrb	r6, [r2, #0]
 8022b74:	2e5d      	cmp	r6, #93	; 0x5d
 8022b76:	d0fa      	beq.n	8022b6e <__sccl+0x4a>
 8022b78:	42b3      	cmp	r3, r6
 8022b7a:	dcf8      	bgt.n	8022b6e <__sccl+0x4a>
 8022b7c:	4618      	mov	r0, r3
 8022b7e:	3001      	adds	r0, #1
 8022b80:	4286      	cmp	r6, r0
 8022b82:	5421      	strb	r1, [r4, r0]
 8022b84:	dcfb      	bgt.n	8022b7e <__sccl+0x5a>
 8022b86:	43d8      	mvns	r0, r3
 8022b88:	4430      	add	r0, r6
 8022b8a:	1c5d      	adds	r5, r3, #1
 8022b8c:	42b3      	cmp	r3, r6
 8022b8e:	bfa8      	it	ge
 8022b90:	2000      	movge	r0, #0
 8022b92:	182b      	adds	r3, r5, r0
 8022b94:	3202      	adds	r2, #2
 8022b96:	e7de      	b.n	8022b56 <__sccl+0x32>

08022b98 <_strtol_l.isra.0>:
 8022b98:	2b01      	cmp	r3, #1
 8022b9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b9e:	d001      	beq.n	8022ba4 <_strtol_l.isra.0+0xc>
 8022ba0:	2b24      	cmp	r3, #36	; 0x24
 8022ba2:	d906      	bls.n	8022bb2 <_strtol_l.isra.0+0x1a>
 8022ba4:	f7fc fbc2 	bl	801f32c <__errno>
 8022ba8:	2316      	movs	r3, #22
 8022baa:	6003      	str	r3, [r0, #0]
 8022bac:	2000      	movs	r0, #0
 8022bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bb2:	4f3a      	ldr	r7, [pc, #232]	; (8022c9c <_strtol_l.isra.0+0x104>)
 8022bb4:	468e      	mov	lr, r1
 8022bb6:	4676      	mov	r6, lr
 8022bb8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8022bbc:	5de5      	ldrb	r5, [r4, r7]
 8022bbe:	f015 0508 	ands.w	r5, r5, #8
 8022bc2:	d1f8      	bne.n	8022bb6 <_strtol_l.isra.0+0x1e>
 8022bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8022bc6:	d134      	bne.n	8022c32 <_strtol_l.isra.0+0x9a>
 8022bc8:	f89e 4000 	ldrb.w	r4, [lr]
 8022bcc:	f04f 0801 	mov.w	r8, #1
 8022bd0:	f106 0e02 	add.w	lr, r6, #2
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	d05c      	beq.n	8022c92 <_strtol_l.isra.0+0xfa>
 8022bd8:	2b10      	cmp	r3, #16
 8022bda:	d10c      	bne.n	8022bf6 <_strtol_l.isra.0+0x5e>
 8022bdc:	2c30      	cmp	r4, #48	; 0x30
 8022bde:	d10a      	bne.n	8022bf6 <_strtol_l.isra.0+0x5e>
 8022be0:	f89e 4000 	ldrb.w	r4, [lr]
 8022be4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022be8:	2c58      	cmp	r4, #88	; 0x58
 8022bea:	d14d      	bne.n	8022c88 <_strtol_l.isra.0+0xf0>
 8022bec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8022bf0:	2310      	movs	r3, #16
 8022bf2:	f10e 0e02 	add.w	lr, lr, #2
 8022bf6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8022bfa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022bfe:	2600      	movs	r6, #0
 8022c00:	fbbc f9f3 	udiv	r9, ip, r3
 8022c04:	4635      	mov	r5, r6
 8022c06:	fb03 ca19 	mls	sl, r3, r9, ip
 8022c0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8022c0e:	2f09      	cmp	r7, #9
 8022c10:	d818      	bhi.n	8022c44 <_strtol_l.isra.0+0xac>
 8022c12:	463c      	mov	r4, r7
 8022c14:	42a3      	cmp	r3, r4
 8022c16:	dd24      	ble.n	8022c62 <_strtol_l.isra.0+0xca>
 8022c18:	2e00      	cmp	r6, #0
 8022c1a:	db1f      	blt.n	8022c5c <_strtol_l.isra.0+0xc4>
 8022c1c:	45a9      	cmp	r9, r5
 8022c1e:	d31d      	bcc.n	8022c5c <_strtol_l.isra.0+0xc4>
 8022c20:	d101      	bne.n	8022c26 <_strtol_l.isra.0+0x8e>
 8022c22:	45a2      	cmp	sl, r4
 8022c24:	db1a      	blt.n	8022c5c <_strtol_l.isra.0+0xc4>
 8022c26:	fb05 4503 	mla	r5, r5, r3, r4
 8022c2a:	2601      	movs	r6, #1
 8022c2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8022c30:	e7eb      	b.n	8022c0a <_strtol_l.isra.0+0x72>
 8022c32:	2c2b      	cmp	r4, #43	; 0x2b
 8022c34:	bf08      	it	eq
 8022c36:	f89e 4000 	ldrbeq.w	r4, [lr]
 8022c3a:	46a8      	mov	r8, r5
 8022c3c:	bf08      	it	eq
 8022c3e:	f106 0e02 	addeq.w	lr, r6, #2
 8022c42:	e7c7      	b.n	8022bd4 <_strtol_l.isra.0+0x3c>
 8022c44:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8022c48:	2f19      	cmp	r7, #25
 8022c4a:	d801      	bhi.n	8022c50 <_strtol_l.isra.0+0xb8>
 8022c4c:	3c37      	subs	r4, #55	; 0x37
 8022c4e:	e7e1      	b.n	8022c14 <_strtol_l.isra.0+0x7c>
 8022c50:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8022c54:	2f19      	cmp	r7, #25
 8022c56:	d804      	bhi.n	8022c62 <_strtol_l.isra.0+0xca>
 8022c58:	3c57      	subs	r4, #87	; 0x57
 8022c5a:	e7db      	b.n	8022c14 <_strtol_l.isra.0+0x7c>
 8022c5c:	f04f 36ff 	mov.w	r6, #4294967295
 8022c60:	e7e4      	b.n	8022c2c <_strtol_l.isra.0+0x94>
 8022c62:	2e00      	cmp	r6, #0
 8022c64:	da05      	bge.n	8022c72 <_strtol_l.isra.0+0xda>
 8022c66:	2322      	movs	r3, #34	; 0x22
 8022c68:	6003      	str	r3, [r0, #0]
 8022c6a:	4665      	mov	r5, ip
 8022c6c:	b942      	cbnz	r2, 8022c80 <_strtol_l.isra.0+0xe8>
 8022c6e:	4628      	mov	r0, r5
 8022c70:	e79d      	b.n	8022bae <_strtol_l.isra.0+0x16>
 8022c72:	f1b8 0f00 	cmp.w	r8, #0
 8022c76:	d000      	beq.n	8022c7a <_strtol_l.isra.0+0xe2>
 8022c78:	426d      	negs	r5, r5
 8022c7a:	2a00      	cmp	r2, #0
 8022c7c:	d0f7      	beq.n	8022c6e <_strtol_l.isra.0+0xd6>
 8022c7e:	b10e      	cbz	r6, 8022c84 <_strtol_l.isra.0+0xec>
 8022c80:	f10e 31ff 	add.w	r1, lr, #4294967295
 8022c84:	6011      	str	r1, [r2, #0]
 8022c86:	e7f2      	b.n	8022c6e <_strtol_l.isra.0+0xd6>
 8022c88:	2430      	movs	r4, #48	; 0x30
 8022c8a:	2b00      	cmp	r3, #0
 8022c8c:	d1b3      	bne.n	8022bf6 <_strtol_l.isra.0+0x5e>
 8022c8e:	2308      	movs	r3, #8
 8022c90:	e7b1      	b.n	8022bf6 <_strtol_l.isra.0+0x5e>
 8022c92:	2c30      	cmp	r4, #48	; 0x30
 8022c94:	d0a4      	beq.n	8022be0 <_strtol_l.isra.0+0x48>
 8022c96:	230a      	movs	r3, #10
 8022c98:	e7ad      	b.n	8022bf6 <_strtol_l.isra.0+0x5e>
 8022c9a:	bf00      	nop
 8022c9c:	08028e59 	.word	0x08028e59

08022ca0 <_strtol_r>:
 8022ca0:	f7ff bf7a 	b.w	8022b98 <_strtol_l.isra.0>

08022ca4 <__submore>:
 8022ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ca8:	460c      	mov	r4, r1
 8022caa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022cb0:	4299      	cmp	r1, r3
 8022cb2:	d11d      	bne.n	8022cf0 <__submore+0x4c>
 8022cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022cb8:	f7fd f97e 	bl	801ffb8 <_malloc_r>
 8022cbc:	b918      	cbnz	r0, 8022cc6 <__submore+0x22>
 8022cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8022cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022cca:	63a3      	str	r3, [r4, #56]	; 0x38
 8022ccc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8022cd0:	6360      	str	r0, [r4, #52]	; 0x34
 8022cd2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8022cd6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8022cda:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8022cde:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8022ce2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8022ce6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8022cea:	6020      	str	r0, [r4, #0]
 8022cec:	2000      	movs	r0, #0
 8022cee:	e7e8      	b.n	8022cc2 <__submore+0x1e>
 8022cf0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8022cf2:	0077      	lsls	r7, r6, #1
 8022cf4:	463a      	mov	r2, r7
 8022cf6:	f7fe fe77 	bl	80219e8 <_realloc_r>
 8022cfa:	4605      	mov	r5, r0
 8022cfc:	2800      	cmp	r0, #0
 8022cfe:	d0de      	beq.n	8022cbe <__submore+0x1a>
 8022d00:	eb00 0806 	add.w	r8, r0, r6
 8022d04:	4601      	mov	r1, r0
 8022d06:	4632      	mov	r2, r6
 8022d08:	4640      	mov	r0, r8
 8022d0a:	f7fd f8df 	bl	801fecc <memcpy>
 8022d0e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8022d12:	f8c4 8000 	str.w	r8, [r4]
 8022d16:	e7e9      	b.n	8022cec <__submore+0x48>

08022d18 <_init>:
 8022d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d1a:	bf00      	nop
 8022d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022d1e:	bc08      	pop	{r3}
 8022d20:	469e      	mov	lr, r3
 8022d22:	4770      	bx	lr

08022d24 <_fini>:
 8022d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d26:	bf00      	nop
 8022d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022d2a:	bc08      	pop	{r3}
 8022d2c:	469e      	mov	lr, r3
 8022d2e:	4770      	bx	lr

08022d30 <__time_veneer>:
 8022d30:	e51ff004 	ldr	pc, [pc, #-4]	; 8022d34 <__time_veneer+0x4>
 8022d34:	200005bc 	.word	0x200005bc
