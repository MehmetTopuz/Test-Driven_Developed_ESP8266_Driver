
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042cc  080042cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d4  080042d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080042dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000074  08004350  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004350  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e104  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d9  00000000  00000000  0002e1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  00030288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  00030cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248d1  00000000  00000000  00031678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b220  00000000  00000000  00055f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e751a  00000000  00000000  00061169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dfc  00000000  00000000  001486d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003f98 	.word	0x08003f98

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08003f98 	.word	0x08003f98

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <UART_SendMessage>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void UART_SendMessage(uint8_t* messageArray)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]

	while(*messageArray)
 80005f0:	e00c      	b.n	800060c <UART_SendMessage+0x24>
	{
		USART1->TDR = *messageArray++;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	607a      	str	r2, [r7, #4]
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <UART_SendMessage+0x3c>)
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
		while(!(USART1->ISR & (1<<6)));		// wait for transmit register(TC) to set.
 80005fe:	bf00      	nop
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <UART_SendMessage+0x3c>)
 8000602:	69db      	ldr	r3, [r3, #28]
 8000604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f9      	beq.n	8000600 <UART_SendMessage+0x18>
	while(*messageArray)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1ee      	bne.n	80005f2 <UART_SendMessage+0xa>
	}
/* with HAL drivers-----------------------*/
//	HAL_UART_Transmit(&huart1, messageArray, strlen((char*)messageArray), HAL_MAX_DELAY);
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40013800 	.word	0x40013800

08000628 <UART_ReceiveByte>:
uint8_t UART_ReceiveByte(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0


	return USART1->RDR;
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <UART_ReceiveByte+0x14>)
 800062e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000630:	b2db      	uxtb	r3, r3
//	uint8_t buffer[10];
//
//	HAL_UART_Receive(&huart1, &buffer, 1, HAL_MAX_DELAY);
//
//	return buffer[0];
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40013800 	.word	0x40013800

08000640 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	  if(!(USART2->ISR & (1<<5)))			// rx interrupt
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <USART1_IRQHandler+0x18>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	2b00      	cmp	r3, #0
 800064e:	d101      	bne.n	8000654 <USART1_IRQHandler+0x14>
	  {
		 ESP_UART_ReceiveHandler(); 		// ESP receive handler function.
 8000650:	f002 fcf4 	bl	800303c <ESP_UART_ReceiveHandler>
	  }
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40004400 	.word	0x40004400

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08e      	sub	sp, #56	; 0x38
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f000 fb74 	bl	8000d4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f8b9 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 f9b7 	bl	80009dc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800066e:	f000 f91f 	bl	80008b0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000672:	f000 f967 	bl	8000944 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));		// Start button
 8000676:	bf00      	nop
 8000678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067c:	4846      	ldr	r0, [pc, #280]	; (8000798 <main+0x13c>)
 800067e:	f000 fe8b 	bl	8001398 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f7      	beq.n	8000678 <main+0x1c>

  USART1->CR1 |= (1<<5); // rx interrupt enable
 8000688:	4b44      	ldr	r3, [pc, #272]	; (800079c <main+0x140>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a43      	ldr	r2, [pc, #268]	; (800079c <main+0x140>)
 800068e:	f043 0320 	orr.w	r3, r3, #32
 8000692:	6013      	str	r3, [r2, #0]

  ESP_Init(UART_SendMessage,	// UART transmit function
 8000694:	23ff      	movs	r3, #255	; 0xff
 8000696:	4a42      	ldr	r2, [pc, #264]	; (80007a0 <main+0x144>)
 8000698:	4942      	ldr	r1, [pc, #264]	; (80007a4 <main+0x148>)
 800069a:	4843      	ldr	r0, [pc, #268]	; (80007a8 <main+0x14c>)
 800069c:	f002 fc8e 	bl	8002fbc <ESP_Init>
		  255					// UART ring buffer size
		  );

  while(1)
  {
	  Status connectionStatus = Connect_Wifi("İZZETPASA", "misafir3434");
 80006a0:	4942      	ldr	r1, [pc, #264]	; (80007ac <main+0x150>)
 80006a2:	4843      	ldr	r0, [pc, #268]	; (80007b0 <main+0x154>)
 80006a4:	f002 fd30 	bl	8003108 <Connect_Wifi>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  if(connectionStatus == STATUS_OK)
 80006ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d00a      	beq.n	80006cc <main+0x70>
		  break;
	  else if(connectionStatus == STATUS_ERROR || connectionStatus == TIMEOUT_ERROR)
 80006b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d003      	beq.n	80006c6 <main+0x6a>
 80006be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d1ec      	bne.n	80006a0 <main+0x44>
	  {
		  Error_Handler();
 80006c6:	f000 f9f9 	bl	8000abc <Error_Handler>
  {
 80006ca:	e7e9      	b.n	80006a0 <main+0x44>
		  break;
 80006cc:	bf00      	nop
	  }
  }

  while(Connect_TCP_Server("192.168.88.183", "255") == IDLE);
 80006ce:	bf00      	nop
 80006d0:	4938      	ldr	r1, [pc, #224]	; (80007b4 <main+0x158>)
 80006d2:	4839      	ldr	r0, [pc, #228]	; (80007b8 <main+0x15c>)
 80006d4:	f002 fddc 	bl	8003290 <Connect_TCP_Server>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b04      	cmp	r3, #4
 80006dc:	d0f8      	beq.n	80006d0 <main+0x74>

  while(Send_TCP_Message("Test message") == IDLE);
 80006de:	bf00      	nop
 80006e0:	4836      	ldr	r0, [pc, #216]	; (80007bc <main+0x160>)
 80006e2:	f002 fe11 	bl	8003308 <Send_TCP_Message>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d0f9      	beq.n	80006e0 <main+0x84>

  char receivedCommand[50];
  while (1)
  {
	  if(Read_TCP_Message(receivedCommand) == STATUS_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fe42 	bl	8003378 <Read_TCP_Message>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d14a      	bne.n	8000790 <main+0x134>
	  {

		  if(strcmp(receivedCommand,"MOTOR_ON") == 0)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4930      	ldr	r1, [pc, #192]	; (80007c0 <main+0x164>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fd8e 	bl	8000220 <strcmp>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d107      	bne.n	800071a <main+0xbe>
		  {
			  while(Send_TCP_Message("MOTOR_ON command has been detected.\n") == IDLE);
 800070a:	bf00      	nop
 800070c:	482d      	ldr	r0, [pc, #180]	; (80007c4 <main+0x168>)
 800070e:	f002 fdfb 	bl	8003308 <Send_TCP_Message>
 8000712:	4603      	mov	r3, r0
 8000714:	2b04      	cmp	r3, #4
 8000716:	d0f9      	beq.n	800070c <main+0xb0>
 8000718:	e034      	b.n	8000784 <main+0x128>

			  	  	  	  	  	  // do something else
		  }
		  else if(strcmp(receivedCommand,"MOTOR_OFF") == 0)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	492a      	ldr	r1, [pc, #168]	; (80007c8 <main+0x16c>)
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd7e 	bl	8000220 <strcmp>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d107      	bne.n	800073a <main+0xde>
		  {
			  while(Send_TCP_Message("MOTOR_OFF command has been detected.\n") == IDLE);
 800072a:	bf00      	nop
 800072c:	4827      	ldr	r0, [pc, #156]	; (80007cc <main+0x170>)
 800072e:	f002 fdeb 	bl	8003308 <Send_TCP_Message>
 8000732:	4603      	mov	r3, r0
 8000734:	2b04      	cmp	r3, #4
 8000736:	d0f9      	beq.n	800072c <main+0xd0>
 8000738:	e024      	b.n	8000784 <main+0x128>
			  	  	  	  	  	  	  	  // do something else
		  }
		  else if(strcmp(receivedCommand,"LED_ON") == 0)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4924      	ldr	r1, [pc, #144]	; (80007d0 <main+0x174>)
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fd6e 	bl	8000220 <strcmp>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d106      	bne.n	8000758 <main+0xfc>
		  {
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	2120      	movs	r1, #32
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f000 fe39 	bl	80013c8 <HAL_GPIO_WritePin>
 8000756:	e015      	b.n	8000784 <main+0x128>
		  }
		  else if(strcmp(receivedCommand,"LED_OFF") == 0)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	491e      	ldr	r1, [pc, #120]	; (80007d4 <main+0x178>)
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fd5f 	bl	8000220 <strcmp>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d106      	bne.n	8000776 <main+0x11a>
		  {
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2120      	movs	r1, #32
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f000 fe2a 	bl	80013c8 <HAL_GPIO_WritePin>
 8000774:	e006      	b.n	8000784 <main+0x128>
		  }
		  else
		  {
			  while(Send_TCP_Message("Invalid command!\n") == IDLE);
 8000776:	bf00      	nop
 8000778:	4817      	ldr	r0, [pc, #92]	; (80007d8 <main+0x17c>)
 800077a:	f002 fdc5 	bl	8003308 <Send_TCP_Message>
 800077e:	4603      	mov	r3, r0
 8000780:	2b04      	cmp	r3, #4
 8000782:	d0f9      	beq.n	8000778 <main+0x11c>
		  }
		  memset(receivedCommand,0,50);		// clear the received command buffer
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2232      	movs	r2, #50	; 0x32
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f002 ff18 	bl	80035c0 <memset>
	  }

	  HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f000 fb4d 	bl	8000e30 <HAL_Delay>
	  if(Read_TCP_Message(receivedCommand) == STATUS_OK)
 8000796:	e7a9      	b.n	80006ec <main+0x90>
 8000798:	48000800 	.word	0x48000800
 800079c:	40013800 	.word	0x40013800
 80007a0:	08000e19 	.word	0x08000e19
 80007a4:	08000629 	.word	0x08000629
 80007a8:	080005e9 	.word	0x080005e9
 80007ac:	08003fb0 	.word	0x08003fb0
 80007b0:	08003fbc 	.word	0x08003fbc
 80007b4:	08003fc8 	.word	0x08003fc8
 80007b8:	08003fcc 	.word	0x08003fcc
 80007bc:	08003fdc 	.word	0x08003fdc
 80007c0:	08003fec 	.word	0x08003fec
 80007c4:	08003ff8 	.word	0x08003ff8
 80007c8:	08004020 	.word	0x08004020
 80007cc:	0800402c 	.word	0x0800402c
 80007d0:	08004054 	.word	0x08004054
 80007d4:	0800405c 	.word	0x0800405c
 80007d8:	08004064 	.word	0x08004064

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0a8      	sub	sp, #160	; 0xa0
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007e6:	2238      	movs	r2, #56	; 0x38
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fee8 	bl	80035c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2254      	movs	r2, #84	; 0x54
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f002 feda 	bl	80035c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800080c:	2000      	movs	r0, #0
 800080e:	f000 fe17 	bl	8001440 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000812:	2302      	movs	r3, #2
 8000814:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000826:	2302      	movs	r3, #2
 8000828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800082c:	2304      	movs	r3, #4
 800082e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000832:	2355      	movs	r3, #85	; 0x55
 8000834:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083e:	2302      	movs	r3, #2
 8000840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800084e:	4618      	mov	r0, r3
 8000850:	f000 feaa 	bl	80015a8 <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800085a:	f000 f92f 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2303      	movs	r3, #3
 8000864:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000872:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000876:	2104      	movs	r1, #4
 8000878:	4618      	mov	r0, r3
 800087a:	f001 f9ad 	bl	8001bd8 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000884:	f000 f91a 	bl	8000abc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8000888:	2321      	movs	r3, #33	; 0x21
 800088a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fbba 	bl	8002010 <HAL_RCCEx_PeriphCLKConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008a2:	f000 f90b 	bl	8000abc <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	37a0      	adds	r7, #160	; 0xa0
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008b6:	4a22      	ldr	r2, [pc, #136]	; (8000940 <MX_LPUART1_UART_Init+0x90>)
 80008b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008f2:	4812      	ldr	r0, [pc, #72]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008f4:	f001 fdd8 	bl	80024a8 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f8dd 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 8000906:	f002 fa8f 	bl	8002e28 <HAL_UARTEx_SetTxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000910:	f000 f8d4 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000914:	2100      	movs	r1, #0
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 8000918:	f002 fac4 	bl	8002ea4 <HAL_UARTEx_SetRxFifoThreshold>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000922:	f000 f8cb 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 8000928:	f002 fa45 	bl	8002db6 <HAL_UARTEx_DisableFifoMode>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000932:	f000 f8c3 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000b4 	.word	0x200000b4
 8000940:	40008000 	.word	0x40008000

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 800094a:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <MX_USART1_UART_Init+0x94>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098c:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 800098e:	f001 fd8b 	bl	80024a8 <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f890 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 80009a0:	f002 fa42 	bl	8002e28 <HAL_UARTEx_SetTxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009aa:	f000 f887 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4808      	ldr	r0, [pc, #32]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 80009b2:	f002 fa77 	bl	8002ea4 <HAL_UARTEx_SetRxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 f87e 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_USART1_UART_Init+0x90>)
 80009c2:	f002 f9f8 	bl	8002db6 <HAL_UARTEx_DisableFifoMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f876 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000148 	.word	0x20000148
 80009d8:	40013800 	.word	0x40013800

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a2e      	ldr	r2, [pc, #184]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_GPIO_Init+0xd4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 fcb5 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_GPIO_Init+0xd8>)
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <MX_GPIO_Init+0xdc>)
 8000a74:	f000 fb0e 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f000 faff 	bl	8001094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2028      	movs	r0, #40	; 0x28
 8000a9c:	f000 fac5 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa0:	2028      	movs	r0, #40	; 0x28
 8000aa2:	f000 fadc 	bl	800105e <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	10110000 	.word	0x10110000
 8000ab8:	48000800 	.word	0x48000800

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6593      	str	r3, [r2, #88]	; 0x58
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000afe:	f000 fd43 	bl	8001588 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a32      	ldr	r2, [pc, #200]	; (8000bf8 <HAL_UART_MspInit+0xe8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d129      	bne.n	8000b86 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a2b      	ldr	r2, [pc, #172]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b62:	230c      	movs	r3, #12
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b72:	230c      	movs	r3, #12
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f000 fa88 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b84:	e034      	b.n	8000bf0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <HAL_UART_MspInit+0xf0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d12f      	bne.n	8000bf0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b94:	4a19      	ldr	r2, [pc, #100]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bac:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_UART_MspInit+0xec>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bc0:	2330      	movs	r3, #48	; 0x30
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480a      	ldr	r0, [pc, #40]	; (8000c04 <HAL_UART_MspInit+0xf4>)
 8000bdc:	f000 fa5a 	bl	8001094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2025      	movs	r0, #37	; 0x25
 8000be6:	f000 fa20 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bea:	2025      	movs	r0, #37	; 0x25
 8000bec:	f000 fa37 	bl	800105e <HAL_NVIC_EnableIRQ>
}
 8000bf0:	bf00      	nop
 8000bf2:	3730      	adds	r7, #48	; 0x30
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40008000 	.word	0x40008000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40013800 	.word	0x40013800
 8000c04:	48000800 	.word	0x48000800

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f8ce 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c64:	f000 fbc8 	bl	80013f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f002 fc5e 	bl	800355c <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20020000 	.word	0x20020000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000090 	.word	0x20000090
 8000cd4:	200001f0 	.word	0x200001f0

08000cd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cfe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d02:	490e      	ldr	r1, [pc, #56]	; (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d18:	4c0b      	ldr	r4, [pc, #44]	; (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d26:	f7ff ffd7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f002 fc1d 	bl	8003568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2e:	f7ff fc95 	bl	800065c <main>

08000d32 <LoopForever>:

LoopForever:
    b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   r0, =_estack
 8000d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d40:	080042dc 	.word	0x080042dc
  ldr r2, =_sbss
 8000d44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d48:	200001ec 	.word	0x200001ec

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>

08000d4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f95b 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f80e 	bl	8000d80 <HAL_InitTick>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	71fb      	strb	r3, [r7, #7]
 8000d6e:	e001      	b.n	8000d74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d70:	f7ff feaa 	bl	8000ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d74:	79fb      	ldrb	r3, [r7, #7]

}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_InitTick+0x68>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d022      	beq.n	8000dda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_InitTick+0x6c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <HAL_InitTick+0x68>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f966 	bl	800107a <HAL_SYSTICK_Config>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10f      	bne.n	8000dd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b0f      	cmp	r3, #15
 8000db8:	d809      	bhi.n	8000dce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc2:	f000 f932 	bl	800102a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_InitTick+0x70>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	e007      	b.n	8000dde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	e004      	b.n	8000dde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e001      	b.n	8000dde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000004 	.word	0x20000004

08000df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_IncTick+0x1c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_IncTick+0x1c>)
 8000e04:	6013      	str	r3, [r2, #0]
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	200001d8 	.word	0x200001d8
 8000e14:	20000008 	.word	0x20000008

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200001d8 	.word	0x200001d8

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d004      	beq.n	8000e54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_Delay+0x40>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4413      	add	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e54:	bf00      	nop
 8000e56:	f7ff ffdf 	bl	8000e18 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d8f7      	bhi.n	8000e56 <HAL_Delay+0x26>
  {
  }
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff40 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff90 	bl	8000f68 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5f 	bl	8000f14 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff33 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa4 	bl	8000fd0 <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010a2:	e15a      	b.n	800135a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 814c 	beq.w	8001354 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d00b      	beq.n	80010dc <HAL_GPIO_Init+0x48>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d007      	beq.n	80010dc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d0:	2b11      	cmp	r3, #17
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b12      	cmp	r3, #18
 80010da:	d130      	bne.n	800113e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001112:	2201      	movs	r2, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	f003 0201 	and.w	r2, r3, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0xea>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b12      	cmp	r3, #18
 800117c:	d123      	bne.n	80011c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	6939      	ldr	r1, [r7, #16]
 80011c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0203 	and.w	r2, r3, #3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80a6 	beq.w	8001354 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001208:	4b5b      	ldr	r3, [pc, #364]	; (8001378 <HAL_GPIO_Init+0x2e4>)
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <HAL_GPIO_Init+0x2e4>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6613      	str	r3, [r2, #96]	; 0x60
 8001214:	4b58      	ldr	r3, [pc, #352]	; (8001378 <HAL_GPIO_Init+0x2e4>)
 8001216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001220:	4a56      	ldr	r2, [pc, #344]	; (800137c <HAL_GPIO_Init+0x2e8>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800124a:	d01f      	beq.n	800128c <HAL_GPIO_Init+0x1f8>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d019      	beq.n	8001288 <HAL_GPIO_Init+0x1f4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4b      	ldr	r2, [pc, #300]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d013      	beq.n	8001284 <HAL_GPIO_Init+0x1f0>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4a      	ldr	r2, [pc, #296]	; (8001388 <HAL_GPIO_Init+0x2f4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d00d      	beq.n	8001280 <HAL_GPIO_Init+0x1ec>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a49      	ldr	r2, [pc, #292]	; (800138c <HAL_GPIO_Init+0x2f8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d007      	beq.n	800127c <HAL_GPIO_Init+0x1e8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a48      	ldr	r2, [pc, #288]	; (8001390 <HAL_GPIO_Init+0x2fc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d101      	bne.n	8001278 <HAL_GPIO_Init+0x1e4>
 8001274:	2305      	movs	r3, #5
 8001276:	e00a      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 8001278:	2306      	movs	r3, #6
 800127a:	e008      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 800127c:	2304      	movs	r3, #4
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 8001280:	2303      	movs	r3, #3
 8001282:	e004      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 800128c:	2300      	movs	r3, #0
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4093      	lsls	r3, r2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129e:	4937      	ldr	r1, [pc, #220]	; (800137c <HAL_GPIO_Init+0x2e8>)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <HAL_GPIO_Init+0x300>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012d0:	4a30      	ldr	r2, [pc, #192]	; (8001394 <HAL_GPIO_Init+0x300>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x300>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012fa:	4a26      	ldr	r2, [pc, #152]	; (8001394 <HAL_GPIO_Init+0x300>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_GPIO_Init+0x300>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	f47f ae9d 	bne.w	80010a4 <HAL_GPIO_Init+0x10>
  }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000
 8001380:	48000400 	.word	0x48000400
 8001384:	48000800 	.word	0x48000800
 8001388:	48000c00 	.word	0x48000c00
 800138c:	48001000 	.word	0x48001000
 8001390:	48001400 	.word	0x48001400
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f806 	bl	8001428 <HAL_GPIO_EXTI_Callback>
  }
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d141      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800144e:	4b4b      	ldr	r3, [pc, #300]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145a:	d131      	bne.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800145c:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001462:	4a46      	ldr	r2, [pc, #280]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001468:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800146c:	4b43      	ldr	r3, [pc, #268]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001474:	4a41      	ldr	r2, [pc, #260]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2232      	movs	r2, #50	; 0x32
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	4a3f      	ldr	r2, [pc, #252]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	0c9b      	lsrs	r3, r3, #18
 800148e:	3301      	adds	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001492:	e002      	b.n	800149a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3b01      	subs	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a6:	d102      	bne.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f2      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ae:	4b33      	ldr	r3, [pc, #204]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ba:	d158      	bne.n	800156e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e057      	b.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014c6:	4a2d      	ldr	r2, [pc, #180]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014d0:	e04d      	b.n	800156e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d8:	d141      	bne.n	800155e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e6:	d131      	bne.n	800154c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ee:	4a23      	ldr	r2, [pc, #140]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001500:	4a1e      	ldr	r2, [pc, #120]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001506:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2232      	movs	r2, #50	; 0x32
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9b      	lsrs	r3, r3, #18
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151e:	e002      	b.n	8001526 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3b01      	subs	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001532:	d102      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f2      	bne.n	8001520 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001546:	d112      	bne.n	800156e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e011      	b.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800155c:	e007      	b.n	800156e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40007000 	.word	0x40007000
 8001580:	20000000 	.word	0x20000000
 8001584:	431bde83 	.word	0x431bde83

08001588 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001596:	6093      	str	r3, [r2, #8]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e308      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d075      	beq.n	80016b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c6:	4ba3      	ldr	r3, [pc, #652]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d0:	4ba0      	ldr	r3, [pc, #640]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b0c      	cmp	r3, #12
 80015de:	d102      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3e>
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d002      	beq.n	80015ec <HAL_RCC_OscConfig+0x44>
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d10b      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4b99      	ldr	r3, [pc, #612]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d05b      	beq.n	80016b0 <HAL_RCC_OscConfig+0x108>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d157      	bne.n	80016b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e2e3      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d106      	bne.n	800161c <HAL_RCC_OscConfig+0x74>
 800160e:	4b91      	ldr	r3, [pc, #580]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a90      	ldr	r2, [pc, #576]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x98>
 8001626:	4b8b      	ldr	r3, [pc, #556]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a8a      	ldr	r2, [pc, #552]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b88      	ldr	r3, [pc, #544]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a87      	ldr	r2, [pc, #540]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 8001640:	4b84      	ldr	r3, [pc, #528]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a83      	ldr	r2, [pc, #524]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b81      	ldr	r3, [pc, #516]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a80      	ldr	r2, [pc, #512]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fbda 	bl	8000e18 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fbd6 	bl	8000e18 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e2a8      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800167a:	4b76      	ldr	r3, [pc, #472]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0xc0>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fbc6 	bl	8000e18 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fbc2 	bl	8000e18 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e294      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a2:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0xe8>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d075      	beq.n	80017aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016be:	4b65      	ldr	r3, [pc, #404]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c8:	4b62      	ldr	r3, [pc, #392]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x136>
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d002      	beq.n	80016e4 <HAL_RCC_OscConfig+0x13c>
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d11f      	bne.n	8001724 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e4:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x154>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e267      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	061b      	lsls	r3, r3, #24
 800170a:	4952      	ldr	r1, [pc, #328]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001710:	4b51      	ldr	r3, [pc, #324]	; (8001858 <HAL_RCC_OscConfig+0x2b0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fb33 	bl	8000d80 <HAL_InitTick>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d043      	beq.n	80017a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e253      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d023      	beq.n	8001774 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172c:	4b49      	ldr	r3, [pc, #292]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a48      	ldr	r2, [pc, #288]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff fb6e 	bl	8000e18 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001740:	f7ff fb6a 	bl	8000e18 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e23c      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	061b      	lsls	r3, r3, #24
 800176c:	4939      	ldr	r1, [pc, #228]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800176e:	4313      	orrs	r3, r2
 8001770:	604b      	str	r3, [r1, #4]
 8001772:	e01a      	b.n	80017aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001774:	4b37      	ldr	r3, [pc, #220]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a36      	ldr	r2, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800177a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800177e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fb4a 	bl	8000e18 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001788:	f7ff fb46 	bl	8000e18 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e218      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800179a:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x1e0>
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d03c      	beq.n	8001830 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d01c      	beq.n	80017f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b25      	ldr	r3, [pc, #148]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c4:	4a23      	ldr	r2, [pc, #140]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff fb23 	bl	8000e18 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff fb1f 	bl	8000e18 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1f1      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80017ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0ef      	beq.n	80017d6 <HAL_RCC_OscConfig+0x22e>
 80017f6:	e01b      	b.n	8001830 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fe:	4a15      	ldr	r2, [pc, #84]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff fb06 	bl	8000e18 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001810:	f7ff fb02 	bl	8000e18 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1d4      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ef      	bne.n	8001810 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80ab 	beq.w	8001994 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_RCC_OscConfig+0x2b4>
 800184e:	2301      	movs	r3, #1
 8001850:	e005      	b.n	800185e <HAL_RCC_OscConfig+0x2b6>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	20000004 	.word	0x20000004
 800185c:	2300      	movs	r3, #0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00d      	beq.n	800187e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4baf      	ldr	r3, [pc, #700]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	4aae      	ldr	r2, [pc, #696]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
 800186e:	4bac      	ldr	r3, [pc, #688]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800187a:	2301      	movs	r3, #1
 800187c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187e:	4ba9      	ldr	r3, [pc, #676]	; (8001b24 <HAL_RCC_OscConfig+0x57c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d118      	bne.n	80018bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800188a:	4ba6      	ldr	r3, [pc, #664]	; (8001b24 <HAL_RCC_OscConfig+0x57c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4aa5      	ldr	r2, [pc, #660]	; (8001b24 <HAL_RCC_OscConfig+0x57c>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001896:	f7ff fabf 	bl	8000e18 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189e:	f7ff fabb 	bl	8000e18 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e18d      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b0:	4b9c      	ldr	r3, [pc, #624]	; (8001b24 <HAL_RCC_OscConfig+0x57c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d108      	bne.n	80018d6 <HAL_RCC_OscConfig+0x32e>
 80018c4:	4b96      	ldr	r3, [pc, #600]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	4a95      	ldr	r2, [pc, #596]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d4:	e024      	b.n	8001920 <HAL_RCC_OscConfig+0x378>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d110      	bne.n	8001900 <HAL_RCC_OscConfig+0x358>
 80018de:	4b90      	ldr	r3, [pc, #576]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e4:	4a8e      	ldr	r2, [pc, #568]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ee:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f4:	4a8a      	ldr	r2, [pc, #552]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018fe:	e00f      	b.n	8001920 <HAL_RCC_OscConfig+0x378>
 8001900:	4b87      	ldr	r3, [pc, #540]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	4a86      	ldr	r2, [pc, #536]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001910:	4b83      	ldr	r3, [pc, #524]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	4a82      	ldr	r2, [pc, #520]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d016      	beq.n	8001956 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff fa76 	bl	8000e18 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	e00a      	b.n	8001946 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7ff fa72 	bl	8000e18 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e142      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001946:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0ed      	beq.n	8001930 <HAL_RCC_OscConfig+0x388>
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff fa5f 	bl	8000e18 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7ff fa5b 	bl	8000e18 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e12b      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ed      	bne.n	800195e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001982:	7ffb      	ldrb	r3, [r7, #31]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001988:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	4a64      	ldr	r2, [pc, #400]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 800198e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001992:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	2b00      	cmp	r3, #0
 800199e:	d03c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019a8:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80019aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ae:	4a5c      	ldr	r2, [pc, #368]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff fa2e 	bl	8000e18 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c0:	f7ff fa2a 	bl	8000e18 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e0fc      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019d2:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80019d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ef      	beq.n	80019c0 <HAL_RCC_OscConfig+0x418>
 80019e0:	e01b      	b.n	8001a1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019e2:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80019e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e8:	4a4d      	ldr	r2, [pc, #308]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff fa11 	bl	8000e18 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019fa:	f7ff fa0d 	bl	8000e18 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0df      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a0c:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ef      	bne.n	80019fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80d3 	beq.w	8001bca <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b0c      	cmp	r3, #12
 8001a2e:	f000 808d 	beq.w	8001b4c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d15a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a38      	ldr	r2, [pc, #224]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f9e7 	bl	8000e18 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff f9e3 	bl	8000e18 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e0b5      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_RCC_OscConfig+0x580>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6a11      	ldr	r1, [r2, #32]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a7c:	3a01      	subs	r2, #1
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	4311      	orrs	r1, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a86:	0212      	lsls	r2, r2, #8
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a8e:	0852      	lsrs	r2, r2, #1
 8001a90:	3a01      	subs	r2, #1
 8001a92:	0552      	lsls	r2, r2, #21
 8001a94:	4311      	orrs	r1, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a9a:	0852      	lsrs	r2, r2, #1
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	0652      	lsls	r2, r2, #25
 8001aa0:	4311      	orrs	r1, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001aa6:	06d2      	lsls	r2, r2, #27
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	491d      	ldr	r1, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f9a6 	bl	8000e18 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff f9a2 	bl	8000e18 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e074      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x528>
 8001aee:	e06c      	b.n	8001bca <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_RCC_OscConfig+0x578>)
 8001b0e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f97e 	bl	8000e18 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1e:	e00e      	b.n	8001b3e <HAL_RCC_OscConfig+0x596>
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40007000 	.word	0x40007000
 8001b28:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f974 	bl	8000e18 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e046      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3e:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_RCC_OscConfig+0x62c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x584>
 8001b4a:	e03e      	b.n	8001bca <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e039      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_RCC_OscConfig+0x62c>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d12c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	3b01      	subs	r3, #1
 8001b78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d123      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d11b      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d113      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	3b01      	subs	r3, #1
 8001bac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e11e      	b.n	8001e2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b91      	ldr	r3, [pc, #580]	; (8001e38 <HAL_RCC_ClockConfig+0x260>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d910      	bls.n	8001c20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b8e      	ldr	r3, [pc, #568]	; (8001e38 <HAL_RCC_ClockConfig+0x260>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 020f 	bic.w	r2, r3, #15
 8001c06:	498c      	ldr	r1, [pc, #560]	; (8001e38 <HAL_RCC_ClockConfig+0x260>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b8a      	ldr	r3, [pc, #552]	; (8001e38 <HAL_RCC_ClockConfig+0x260>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e106      	b.n	8001e2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d073      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d129      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c34:	4b81      	ldr	r3, [pc, #516]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0f4      	b.n	8001e2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c44:	f000 f99e 	bl	8001f84 <RCC_GetSysClockFreqFromPLLSource>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4a7c      	ldr	r2, [pc, #496]	; (8001e40 <HAL_RCC_ClockConfig+0x268>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d93f      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c52:	4b7a      	ldr	r3, [pc, #488]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d033      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d12f      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c72:	4b72      	ldr	r3, [pc, #456]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c7a:	4a70      	ldr	r2, [pc, #448]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e024      	b.n	8001cd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0c6      	b.n	8001e2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca0:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0be      	b.n	8001e2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cb0:	f000 f8ce 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4a61      	ldr	r2, [pc, #388]	; (8001e40 <HAL_RCC_ClockConfig+0x268>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d909      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cc6:	4a5d      	ldr	r2, [pc, #372]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ccc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4957      	ldr	r1, [pc, #348]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f898 	bl	8000e18 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7ff f894 	bl	8000e18 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e095      	b.n	8001e2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d023      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d2c:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001d32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d44:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d4c:	4a3b      	ldr	r2, [pc, #236]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001d4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4936      	ldr	r1, [pc, #216]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b80      	cmp	r3, #128	; 0x80
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d6e:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4a32      	ldr	r2, [pc, #200]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <HAL_RCC_ClockConfig+0x260>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d21d      	bcs.n	8001dc4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_RCC_ClockConfig+0x260>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 020f 	bic.w	r2, r3, #15
 8001d90:	4929      	ldr	r1, [pc, #164]	; (8001e38 <HAL_RCC_ClockConfig+0x260>)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d98:	f7ff f83e 	bl	8000e18 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7ff f83a 	bl	8000e18 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e03b      	b.n	8001e2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_RCC_ClockConfig+0x260>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1ed      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4917      	ldr	r1, [pc, #92]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	490f      	ldr	r1, [pc, #60]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e02:	f000 f825 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001e06:	4602      	mov	r2, r0
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_ClockConfig+0x264>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	490c      	ldr	r1, [pc, #48]	; (8001e44 <HAL_RCC_ClockConfig+0x26c>)
 8001e14:	5ccb      	ldrb	r3, [r1, r3]
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_RCC_ClockConfig+0x270>)
 8001e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_RCC_ClockConfig+0x274>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe ffaa 	bl	8000d80 <HAL_InitTick>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	04c4b400 	.word	0x04c4b400
 8001e44:	08004158 	.word	0x08004158
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	e047      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e03e      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d136      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d10c      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ea4:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eae:	68d2      	ldr	r2, [r2, #12]
 8001eb0:	0a12      	lsrs	r2, r2, #8
 8001eb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
      break;
 8001ebc:	e00c      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec8:	68d2      	ldr	r2, [r2, #12]
 8001eca:	0a12      	lsrs	r2, r2, #8
 8001ecc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
      break;
 8001ed6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0e5b      	lsrs	r3, r3, #25
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e001      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ef8:	693b      	ldr	r3, [r7, #16]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	00f42400 	.word	0x00f42400
 8001f10:	016e3600 	.word	0x016e3600

08001f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000

08001f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f30:	f7ff fff0 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	4904      	ldr	r1, [pc, #16]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08004168 	.word	0x08004168

08001f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f5c:	f7ff ffda 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	0adb      	lsrs	r3, r3, #11
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4904      	ldr	r1, [pc, #16]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08004168 	.word	0x08004168

08001f84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d10c      	bne.n	8001fc2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa8:	4a17      	ldr	r2, [pc, #92]	; (8002008 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fb2:	68d2      	ldr	r2, [r2, #12]
 8001fb4:	0a12      	lsrs	r2, r2, #8
 8001fb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
    break;
 8001fc0:	e00c      	b.n	8001fdc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fcc:	68d2      	ldr	r2, [r2, #12]
 8001fce:	0a12      	lsrs	r2, r2, #8
 8001fd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	617b      	str	r3, [r7, #20]
    break;
 8001fda:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0e5b      	lsrs	r3, r3, #25
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40021000 	.word	0x40021000
 8002008:	016e3600 	.word	0x016e3600
 800200c:	00f42400 	.word	0x00f42400

08002010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002018:	2300      	movs	r3, #0
 800201a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800201c:	2300      	movs	r3, #0
 800201e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8098 	beq.w	800215e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10d      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	4a3f      	ldr	r2, [pc, #252]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800205a:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a39      	ldr	r2, [pc, #228]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002066:	f7fe fed7 	bl	8000e18 <HAL_GetTick>
 800206a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800206c:	e009      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206e:	f7fe fed3 	bl	8000e18 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d902      	bls.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	74fb      	strb	r3, [r7, #19]
        break;
 8002080:	e005      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002082:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0ef      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d159      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01e      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d019      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020b0:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020bc:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	4a1f      	ldr	r2, [pc, #124]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020cc:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d016      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe fe93 	bl	8000e18 <HAL_GetTick>
 80020f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f4:	e00b      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7fe fe8f 	bl	8000e18 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d902      	bls.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	74fb      	strb	r3, [r7, #19]
            break;
 800210c:	e006      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ec      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10b      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002130:	4903      	ldr	r1, [pc, #12]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002138:	e008      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	74bb      	strb	r3, [r7, #18]
 800213e:	e005      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214c:	7c7b      	ldrb	r3, [r7, #17]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d105      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002152:	4baf      	ldr	r3, [pc, #700]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	4aae      	ldr	r2, [pc, #696]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800216a:	4ba9      	ldr	r3, [pc, #676]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f023 0203 	bic.w	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	49a5      	ldr	r1, [pc, #660]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800218c:	4ba0      	ldr	r3, [pc, #640]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f023 020c 	bic.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	499d      	ldr	r1, [pc, #628]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ae:	4b98      	ldr	r3, [pc, #608]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4994      	ldr	r1, [pc, #592]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021d0:	4b8f      	ldr	r3, [pc, #572]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	498c      	ldr	r1, [pc, #560]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021f2:	4b87      	ldr	r3, [pc, #540]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	4983      	ldr	r1, [pc, #524]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002214:	4b7e      	ldr	r3, [pc, #504]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	497b      	ldr	r1, [pc, #492]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002236:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4972      	ldr	r1, [pc, #456]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002258:	4b6d      	ldr	r3, [pc, #436]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	496a      	ldr	r1, [pc, #424]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	4961      	ldr	r1, [pc, #388]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800229c:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800229e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022a2:	f023 0203 	bic.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	4959      	ldr	r1, [pc, #356]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022be:	4b54      	ldr	r3, [pc, #336]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	4950      	ldr	r1, [pc, #320]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022e0:	4b4b      	ldr	r3, [pc, #300]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4948      	ldr	r1, [pc, #288]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022fe:	d105      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a42      	ldr	r2, [pc, #264]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002318:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	493a      	ldr	r1, [pc, #232]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002336:	d105      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002338:	4b35      	ldr	r3, [pc, #212]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a34      	ldr	r2, [pc, #208]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800233e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002342:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	492c      	ldr	r1, [pc, #176]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800236e:	d105      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800237a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d015      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	491e      	ldr	r1, [pc, #120]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a6:	d105      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a18      	ldr	r2, [pc, #96]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d015      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4910      	ldr	r1, [pc, #64]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023de:	d105      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d018      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	4902      	ldr	r1, [pc, #8]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800240e:	e001      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002410:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800241c:	d105      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4a20      	ldr	r2, [pc, #128]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002428:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002444:	4917      	ldr	r1, [pc, #92]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002454:	d105      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002470:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	4909      	ldr	r1, [pc, #36]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800248c:	d105      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002498:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800249a:	7cbb      	ldrb	r3, [r7, #18]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e042      	b.n	8002540 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d106      	bne.n	80024d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7fe fb1f 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2224      	movs	r2, #36	; 0x24
 80024d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f82c 	bl	8002548 <UART_SetConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e022      	b.n	8002540 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 faea 	bl	8002adc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fb71 	bl	8002c20 <UART_CheckIdleState>
 800253e:	4603      	mov	r3, r0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	4313      	orrs	r3, r2
 800256a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4bb1      	ldr	r3, [pc, #708]	; (8002838 <UART_SetConfig+0x2f0>)
 8002574:	4013      	ands	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	69f9      	ldr	r1, [r7, #28]
 800257c:	430b      	orrs	r3, r1
 800257e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4aa6      	ldr	r2, [pc, #664]	; (800283c <UART_SetConfig+0x2f4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80025ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	69f9      	ldr	r1, [r7, #28]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	f023 010f 	bic.w	r1, r3, #15
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a97      	ldr	r2, [pc, #604]	; (8002840 <UART_SetConfig+0x2f8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d120      	bne.n	800262a <UART_SetConfig+0xe2>
 80025e8:	4b96      	ldr	r3, [pc, #600]	; (8002844 <UART_SetConfig+0x2fc>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d816      	bhi.n	8002624 <UART_SetConfig+0xdc>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <UART_SetConfig+0xb4>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	0800260d 	.word	0x0800260d
 8002600:	08002619 	.word	0x08002619
 8002604:	08002613 	.word	0x08002613
 8002608:	0800261f 	.word	0x0800261f
 800260c:	2301      	movs	r3, #1
 800260e:	76fb      	strb	r3, [r7, #27]
 8002610:	e0e7      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002612:	2302      	movs	r3, #2
 8002614:	76fb      	strb	r3, [r7, #27]
 8002616:	e0e4      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002618:	2304      	movs	r3, #4
 800261a:	76fb      	strb	r3, [r7, #27]
 800261c:	e0e1      	b.n	80027e2 <UART_SetConfig+0x29a>
 800261e:	2308      	movs	r3, #8
 8002620:	76fb      	strb	r3, [r7, #27]
 8002622:	e0de      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002624:	2310      	movs	r3, #16
 8002626:	76fb      	strb	r3, [r7, #27]
 8002628:	e0db      	b.n	80027e2 <UART_SetConfig+0x29a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a86      	ldr	r2, [pc, #536]	; (8002848 <UART_SetConfig+0x300>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d132      	bne.n	800269a <UART_SetConfig+0x152>
 8002634:	4b83      	ldr	r3, [pc, #524]	; (8002844 <UART_SetConfig+0x2fc>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d828      	bhi.n	8002694 <UART_SetConfig+0x14c>
 8002642:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <UART_SetConfig+0x100>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	0800267d 	.word	0x0800267d
 800264c:	08002695 	.word	0x08002695
 8002650:	08002695 	.word	0x08002695
 8002654:	08002695 	.word	0x08002695
 8002658:	08002689 	.word	0x08002689
 800265c:	08002695 	.word	0x08002695
 8002660:	08002695 	.word	0x08002695
 8002664:	08002695 	.word	0x08002695
 8002668:	08002683 	.word	0x08002683
 800266c:	08002695 	.word	0x08002695
 8002670:	08002695 	.word	0x08002695
 8002674:	08002695 	.word	0x08002695
 8002678:	0800268f 	.word	0x0800268f
 800267c:	2300      	movs	r3, #0
 800267e:	76fb      	strb	r3, [r7, #27]
 8002680:	e0af      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002682:	2302      	movs	r3, #2
 8002684:	76fb      	strb	r3, [r7, #27]
 8002686:	e0ac      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002688:	2304      	movs	r3, #4
 800268a:	76fb      	strb	r3, [r7, #27]
 800268c:	e0a9      	b.n	80027e2 <UART_SetConfig+0x29a>
 800268e:	2308      	movs	r3, #8
 8002690:	76fb      	strb	r3, [r7, #27]
 8002692:	e0a6      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002694:	2310      	movs	r3, #16
 8002696:	76fb      	strb	r3, [r7, #27]
 8002698:	e0a3      	b.n	80027e2 <UART_SetConfig+0x29a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6b      	ldr	r2, [pc, #428]	; (800284c <UART_SetConfig+0x304>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d120      	bne.n	80026e6 <UART_SetConfig+0x19e>
 80026a4:	4b67      	ldr	r3, [pc, #412]	; (8002844 <UART_SetConfig+0x2fc>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026ae:	2b30      	cmp	r3, #48	; 0x30
 80026b0:	d013      	beq.n	80026da <UART_SetConfig+0x192>
 80026b2:	2b30      	cmp	r3, #48	; 0x30
 80026b4:	d814      	bhi.n	80026e0 <UART_SetConfig+0x198>
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d009      	beq.n	80026ce <UART_SetConfig+0x186>
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d810      	bhi.n	80026e0 <UART_SetConfig+0x198>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <UART_SetConfig+0x180>
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d006      	beq.n	80026d4 <UART_SetConfig+0x18c>
 80026c6:	e00b      	b.n	80026e0 <UART_SetConfig+0x198>
 80026c8:	2300      	movs	r3, #0
 80026ca:	76fb      	strb	r3, [r7, #27]
 80026cc:	e089      	b.n	80027e2 <UART_SetConfig+0x29a>
 80026ce:	2302      	movs	r3, #2
 80026d0:	76fb      	strb	r3, [r7, #27]
 80026d2:	e086      	b.n	80027e2 <UART_SetConfig+0x29a>
 80026d4:	2304      	movs	r3, #4
 80026d6:	76fb      	strb	r3, [r7, #27]
 80026d8:	e083      	b.n	80027e2 <UART_SetConfig+0x29a>
 80026da:	2308      	movs	r3, #8
 80026dc:	76fb      	strb	r3, [r7, #27]
 80026de:	e080      	b.n	80027e2 <UART_SetConfig+0x29a>
 80026e0:	2310      	movs	r3, #16
 80026e2:	76fb      	strb	r3, [r7, #27]
 80026e4:	e07d      	b.n	80027e2 <UART_SetConfig+0x29a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a59      	ldr	r2, [pc, #356]	; (8002850 <UART_SetConfig+0x308>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d120      	bne.n	8002732 <UART_SetConfig+0x1ea>
 80026f0:	4b54      	ldr	r3, [pc, #336]	; (8002844 <UART_SetConfig+0x2fc>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026fa:	2bc0      	cmp	r3, #192	; 0xc0
 80026fc:	d013      	beq.n	8002726 <UART_SetConfig+0x1de>
 80026fe:	2bc0      	cmp	r3, #192	; 0xc0
 8002700:	d814      	bhi.n	800272c <UART_SetConfig+0x1e4>
 8002702:	2b80      	cmp	r3, #128	; 0x80
 8002704:	d009      	beq.n	800271a <UART_SetConfig+0x1d2>
 8002706:	2b80      	cmp	r3, #128	; 0x80
 8002708:	d810      	bhi.n	800272c <UART_SetConfig+0x1e4>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <UART_SetConfig+0x1cc>
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d006      	beq.n	8002720 <UART_SetConfig+0x1d8>
 8002712:	e00b      	b.n	800272c <UART_SetConfig+0x1e4>
 8002714:	2300      	movs	r3, #0
 8002716:	76fb      	strb	r3, [r7, #27]
 8002718:	e063      	b.n	80027e2 <UART_SetConfig+0x29a>
 800271a:	2302      	movs	r3, #2
 800271c:	76fb      	strb	r3, [r7, #27]
 800271e:	e060      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002720:	2304      	movs	r3, #4
 8002722:	76fb      	strb	r3, [r7, #27]
 8002724:	e05d      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002726:	2308      	movs	r3, #8
 8002728:	76fb      	strb	r3, [r7, #27]
 800272a:	e05a      	b.n	80027e2 <UART_SetConfig+0x29a>
 800272c:	2310      	movs	r3, #16
 800272e:	76fb      	strb	r3, [r7, #27]
 8002730:	e057      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a47      	ldr	r2, [pc, #284]	; (8002854 <UART_SetConfig+0x30c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d125      	bne.n	8002788 <UART_SetConfig+0x240>
 800273c:	4b41      	ldr	r3, [pc, #260]	; (8002844 <UART_SetConfig+0x2fc>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800274a:	d017      	beq.n	800277c <UART_SetConfig+0x234>
 800274c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002750:	d817      	bhi.n	8002782 <UART_SetConfig+0x23a>
 8002752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002756:	d00b      	beq.n	8002770 <UART_SetConfig+0x228>
 8002758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275c:	d811      	bhi.n	8002782 <UART_SetConfig+0x23a>
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <UART_SetConfig+0x222>
 8002762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002766:	d006      	beq.n	8002776 <UART_SetConfig+0x22e>
 8002768:	e00b      	b.n	8002782 <UART_SetConfig+0x23a>
 800276a:	2300      	movs	r3, #0
 800276c:	76fb      	strb	r3, [r7, #27]
 800276e:	e038      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002770:	2302      	movs	r3, #2
 8002772:	76fb      	strb	r3, [r7, #27]
 8002774:	e035      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002776:	2304      	movs	r3, #4
 8002778:	76fb      	strb	r3, [r7, #27]
 800277a:	e032      	b.n	80027e2 <UART_SetConfig+0x29a>
 800277c:	2308      	movs	r3, #8
 800277e:	76fb      	strb	r3, [r7, #27]
 8002780:	e02f      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002782:	2310      	movs	r3, #16
 8002784:	76fb      	strb	r3, [r7, #27]
 8002786:	e02c      	b.n	80027e2 <UART_SetConfig+0x29a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2b      	ldr	r2, [pc, #172]	; (800283c <UART_SetConfig+0x2f4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d125      	bne.n	80027de <UART_SetConfig+0x296>
 8002792:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <UART_SetConfig+0x2fc>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800279c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027a0:	d017      	beq.n	80027d2 <UART_SetConfig+0x28a>
 80027a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027a6:	d817      	bhi.n	80027d8 <UART_SetConfig+0x290>
 80027a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ac:	d00b      	beq.n	80027c6 <UART_SetConfig+0x27e>
 80027ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b2:	d811      	bhi.n	80027d8 <UART_SetConfig+0x290>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <UART_SetConfig+0x278>
 80027b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027bc:	d006      	beq.n	80027cc <UART_SetConfig+0x284>
 80027be:	e00b      	b.n	80027d8 <UART_SetConfig+0x290>
 80027c0:	2300      	movs	r3, #0
 80027c2:	76fb      	strb	r3, [r7, #27]
 80027c4:	e00d      	b.n	80027e2 <UART_SetConfig+0x29a>
 80027c6:	2302      	movs	r3, #2
 80027c8:	76fb      	strb	r3, [r7, #27]
 80027ca:	e00a      	b.n	80027e2 <UART_SetConfig+0x29a>
 80027cc:	2304      	movs	r3, #4
 80027ce:	76fb      	strb	r3, [r7, #27]
 80027d0:	e007      	b.n	80027e2 <UART_SetConfig+0x29a>
 80027d2:	2308      	movs	r3, #8
 80027d4:	76fb      	strb	r3, [r7, #27]
 80027d6:	e004      	b.n	80027e2 <UART_SetConfig+0x29a>
 80027d8:	2310      	movs	r3, #16
 80027da:	76fb      	strb	r3, [r7, #27]
 80027dc:	e001      	b.n	80027e2 <UART_SetConfig+0x29a>
 80027de:	2310      	movs	r3, #16
 80027e0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <UART_SetConfig+0x2f4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	f040 809f 	bne.w	800292c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027ee:	7efb      	ldrb	r3, [r7, #27]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d837      	bhi.n	8002864 <UART_SetConfig+0x31c>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <UART_SetConfig+0x2b4>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	08002821 	.word	0x08002821
 8002800:	08002865 	.word	0x08002865
 8002804:	08002829 	.word	0x08002829
 8002808:	08002865 	.word	0x08002865
 800280c:	0800282f 	.word	0x0800282f
 8002810:	08002865 	.word	0x08002865
 8002814:	08002865 	.word	0x08002865
 8002818:	08002865 	.word	0x08002865
 800281c:	0800285d 	.word	0x0800285d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002820:	f7ff fb84 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8002824:	6178      	str	r0, [r7, #20]
        break;
 8002826:	e022      	b.n	800286e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <UART_SetConfig+0x310>)
 800282a:	617b      	str	r3, [r7, #20]
        break;
 800282c:	e01f      	b.n	800286e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800282e:	f7ff fb0f 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002832:	6178      	str	r0, [r7, #20]
        break;
 8002834:	e01b      	b.n	800286e <UART_SetConfig+0x326>
 8002836:	bf00      	nop
 8002838:	cfff69f3 	.word	0xcfff69f3
 800283c:	40008000 	.word	0x40008000
 8002840:	40013800 	.word	0x40013800
 8002844:	40021000 	.word	0x40021000
 8002848:	40004400 	.word	0x40004400
 800284c:	40004800 	.word	0x40004800
 8002850:	40004c00 	.word	0x40004c00
 8002854:	40005000 	.word	0x40005000
 8002858:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800285c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002860:	617b      	str	r3, [r7, #20]
        break;
 8002862:	e004      	b.n	800286e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	76bb      	strb	r3, [r7, #26]
        break;
 800286c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 811b 	beq.w	8002aac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	4a96      	ldr	r2, [pc, #600]	; (8002ad4 <UART_SetConfig+0x58c>)
 800287c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002880:	461a      	mov	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	fbb3 f3f2 	udiv	r3, r3, r2
 8002888:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d305      	bcc.n	80028a6 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d902      	bls.n	80028ac <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	76bb      	strb	r3, [r7, #26]
 80028aa:	e0ff      	b.n	8002aac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	4a86      	ldr	r2, [pc, #536]	; (8002ad4 <UART_SetConfig+0x58c>)
 80028ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028be:	b29a      	uxth	r2, r3
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	f7fd fd14 	bl	80002f0 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	020b      	lsls	r3, r1, #8
 80028da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80028de:	0202      	lsls	r2, r0, #8
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	6849      	ldr	r1, [r1, #4]
 80028e4:	0849      	lsrs	r1, r1, #1
 80028e6:	4608      	mov	r0, r1
 80028e8:	f04f 0100 	mov.w	r1, #0
 80028ec:	1814      	adds	r4, r2, r0
 80028ee:	eb43 0501 	adc.w	r5, r3, r1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	4620      	mov	r0, r4
 80028fe:	4629      	mov	r1, r5
 8002900:	f7fd fcf6 	bl	80002f0 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002912:	d308      	bcc.n	8002926 <UART_SetConfig+0x3de>
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800291a:	d204      	bcs.n	8002926 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	e0c2      	b.n	8002aac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	76bb      	strb	r3, [r7, #26]
 800292a:	e0bf      	b.n	8002aac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002934:	d165      	bne.n	8002a02 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8002936:	7efb      	ldrb	r3, [r7, #27]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d828      	bhi.n	800298e <UART_SetConfig+0x446>
 800293c:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <UART_SetConfig+0x3fc>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002969 	.word	0x08002969
 8002948:	08002971 	.word	0x08002971
 800294c:	08002979 	.word	0x08002979
 8002950:	0800298f 	.word	0x0800298f
 8002954:	0800297f 	.word	0x0800297f
 8002958:	0800298f 	.word	0x0800298f
 800295c:	0800298f 	.word	0x0800298f
 8002960:	0800298f 	.word	0x0800298f
 8002964:	08002987 	.word	0x08002987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002968:	f7ff fae0 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 800296c:	6178      	str	r0, [r7, #20]
        break;
 800296e:	e013      	b.n	8002998 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002970:	f7ff faf2 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8002974:	6178      	str	r0, [r7, #20]
        break;
 8002976:	e00f      	b.n	8002998 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002978:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <UART_SetConfig+0x590>)
 800297a:	617b      	str	r3, [r7, #20]
        break;
 800297c:	e00c      	b.n	8002998 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800297e:	f7ff fa67 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002982:	6178      	str	r0, [r7, #20]
        break;
 8002984:	e008      	b.n	8002998 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800298a:	617b      	str	r3, [r7, #20]
        break;
 800298c:	e004      	b.n	8002998 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	76bb      	strb	r3, [r7, #26]
        break;
 8002996:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8086 	beq.w	8002aac <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	4a4b      	ldr	r2, [pc, #300]	; (8002ad4 <UART_SetConfig+0x58c>)
 80029a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029aa:	461a      	mov	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80029b2:	005a      	lsls	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	441a      	add	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	d916      	bls.n	80029fc <UART_SetConfig+0x4b4>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d212      	bcs.n	80029fc <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	89fb      	ldrh	r3, [r7, #14]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	89fa      	ldrh	r2, [r7, #14]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	e057      	b.n	8002aac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	76bb      	strb	r3, [r7, #26]
 8002a00:	e054      	b.n	8002aac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a02:	7efb      	ldrb	r3, [r7, #27]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d828      	bhi.n	8002a5a <UART_SetConfig+0x512>
 8002a08:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <UART_SetConfig+0x4c8>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a35 	.word	0x08002a35
 8002a14:	08002a3d 	.word	0x08002a3d
 8002a18:	08002a45 	.word	0x08002a45
 8002a1c:	08002a5b 	.word	0x08002a5b
 8002a20:	08002a4b 	.word	0x08002a4b
 8002a24:	08002a5b 	.word	0x08002a5b
 8002a28:	08002a5b 	.word	0x08002a5b
 8002a2c:	08002a5b 	.word	0x08002a5b
 8002a30:	08002a53 	.word	0x08002a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a34:	f7ff fa7a 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8002a38:	6178      	str	r0, [r7, #20]
        break;
 8002a3a:	e013      	b.n	8002a64 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a3c:	f7ff fa8c 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8002a40:	6178      	str	r0, [r7, #20]
        break;
 8002a42:	e00f      	b.n	8002a64 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <UART_SetConfig+0x590>)
 8002a46:	617b      	str	r3, [r7, #20]
        break;
 8002a48:	e00c      	b.n	8002a64 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a4a:	f7ff fa01 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002a4e:	6178      	str	r0, [r7, #20]
        break;
 8002a50:	e008      	b.n	8002a64 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a56:	617b      	str	r3, [r7, #20]
        break;
 8002a58:	e004      	b.n	8002a64 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	76bb      	strb	r3, [r7, #26]
        break;
 8002a62:	bf00      	nop
    }

    if (pclk != 0U)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d020      	beq.n	8002aac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <UART_SetConfig+0x58c>)
 8002a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a74:	461a      	mov	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	441a      	add	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	d908      	bls.n	8002aa8 <UART_SetConfig+0x560>
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d204      	bcs.n	8002aa8 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	e001      	b.n	8002aac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002ac8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	08004170 	.word	0x08004170
 8002ad8:	00f42400 	.word	0x00f42400

08002adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01a      	beq.n	8002bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bda:	d10a      	bne.n	8002bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c30:	f7fe f8f2 	bl	8000e18 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d10e      	bne.n	8002c62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f82f 	bl	8002cb6 <UART_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e025      	b.n	8002cae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d10e      	bne.n	8002c8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f819 	bl	8002cb6 <UART_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e00f      	b.n	8002cae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc6:	e062      	b.n	8002d8e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cce:	d05e      	beq.n	8002d8e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd0:	f7fe f8a2 	bl	8000e18 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d302      	bcc.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d11d      	bne.n	8002d22 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cf4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e045      	b.n	8002dae <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02e      	beq.n	8002d8e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d3e:	d126      	bne.n	8002d8e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e00f      	b.n	8002dae <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d08d      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_UARTEx_DisableFifoMode+0x16>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e027      	b.n	8002e1c <HAL_UARTEx_DisableFifoMode+0x66>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002dfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e02d      	b.n	8002e9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f84f 	bl	8002f20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e02d      	b.n	8002f18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f811 	bl	8002f20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d108      	bne.n	8002f42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f40:	e031      	b.n	8002fa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f42:	2308      	movs	r3, #8
 8002f44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f46:	2308      	movs	r3, #8
 8002f48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	0e5b      	lsrs	r3, r3, #25
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	0f5b      	lsrs	r3, r3, #29
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f6a:	7bbb      	ldrb	r3, [r7, #14]
 8002f6c:	7b3a      	ldrb	r2, [r7, #12]
 8002f6e:	4911      	ldr	r1, [pc, #68]	; (8002fb4 <UARTEx_SetNbDataToProcess+0x94>)
 8002f70:	5c8a      	ldrb	r2, [r1, r2]
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f76:	7b3a      	ldrb	r2, [r7, #12]
 8002f78:	490f      	ldr	r1, [pc, #60]	; (8002fb8 <UARTEx_SetNbDataToProcess+0x98>)
 8002f7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	7b7a      	ldrb	r2, [r7, #13]
 8002f8c:	4909      	ldr	r1, [pc, #36]	; (8002fb4 <UARTEx_SetNbDataToProcess+0x94>)
 8002f8e:	5c8a      	ldrb	r2, [r1, r2]
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f94:	7b7a      	ldrb	r2, [r7, #13]
 8002f96:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <UARTEx_SetNbDataToProcess+0x98>)
 8002f98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	08004188 	.word	0x08004188
 8002fb8:	08004190 	.word	0x08004190

08002fbc <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01d      	beq.n	800300c <ESP_Init+0x50>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01a      	beq.n	800300c <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d017      	beq.n	800300c <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8002fdc:	4a0e      	ldr	r2, [pc, #56]	; (8003018 <ESP_Init+0x5c>)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 8002fe2:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <ESP_Init+0x5c>)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <ESP_Init+0x5c>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 8002fee:	6838      	ldr	r0, [r7, #0]
 8002ff0:	f000 fa26 	bl	8003440 <ringBuffer_init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <ESP_Init+0x60>)
 8002ff8:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <ESP_Init+0x60>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <ESP_Init+0x4a>
			return 1;
 8003002:	2301      	movs	r3, #1
 8003004:	e004      	b.n	8003010 <ESP_Init+0x54>
		else
			return -1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	e001      	b.n	8003010 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 800300c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000094 	.word	0x20000094
 800301c:	20000144 	.word	0x20000144

08003020 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <Send_AT_Command+0x18>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000094 	.word	0x20000094

0800303c <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 800303c:	b598      	push	{r3, r4, r7, lr}
 800303e:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <ESP_UART_ReceiveHandler+0x1c>)
 8003042:	681c      	ldr	r4, [r3, #0]
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <ESP_UART_ReceiveHandler+0x20>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4798      	blx	r3
 800304a:	4603      	mov	r3, r0
 800304c:	4619      	mov	r1, r3
 800304e:	4620      	mov	r0, r4
 8003050:	f000 fa20 	bl	8003494 <ringBuffer_push>
}
 8003054:	bf00      	nop
 8003056:	bd98      	pop	{r3, r4, r7, pc}
 8003058:	20000144 	.word	0x20000144
 800305c:	20000094 	.word	0x20000094

08003060 <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <Read_Response+0x20>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fa51 	bl	8003516 <ringBuffer_lookFor>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000144 	.word	0x20000144

08003084 <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <Wait_Response+0x74>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d108      	bne.n	80030a8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 8003096:	4b19      	ldr	r3, [pc, #100]	; (80030fc <Wait_Response+0x78>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	4798      	blx	r3
 800309c:	4603      	mov	r3, r0
 800309e:	4a18      	ldr	r2, [pc, #96]	; (8003100 <Wait_Response+0x7c>)
 80030a0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <Wait_Response+0x74>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <Wait_Response+0x80>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fa31 	bl	8003516 <ringBuffer_lookFor>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <Wait_Response+0x46>
	{
		firstCall = 0;
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <Wait_Response+0x74>)
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
		time = 0;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <Wait_Response+0x7c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
		return FOUND;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e012      	b.n	80030f0 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <Wait_Response+0x78>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4798      	blx	r3
 80030d0:	4602      	mov	r2, r0
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <Wait_Response+0x7c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d807      	bhi.n	80030ee <Wait_Response+0x6a>
	{
		firstCall = 0;
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <Wait_Response+0x74>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
		time = 0;
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <Wait_Response+0x7c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 80030ee:	2304      	movs	r3, #4
	}

}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	200000a0 	.word	0x200000a0
 80030fc:	20000094 	.word	0x20000094
 8003100:	200000a4 	.word	0x200000a4
 8003104:	20000144 	.word	0x20000144

08003108 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b098      	sub	sp, #96	; 0x60
 800310c:	af02      	add	r7, sp, #8
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <Connect_Wifi+0x64>)
 8003114:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003118:	ca07      	ldmia	r2, {r0, r1, r2}
 800311a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 800311e:	4a14      	ldr	r2, [pc, #80]	; (8003170 <Connect_Wifi+0x68>)
 8003120:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003124:	ca07      	ldmia	r2, {r0, r1, r2}
 8003126:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 800312a:	2304      	movs	r3, #4
 800312c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003130:	f107 0008 	add.w	r0, r7, #8
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <Connect_Wifi+0x6c>)
 800313c:	490e      	ldr	r1, [pc, #56]	; (8003178 <Connect_Wifi+0x70>)
 800313e:	f000 fb11 	bl	8003764 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003148:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800314c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003150:	2203      	movs	r2, #3
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f812 	bl	800317c <Command_Process>
 8003158:	4603      	mov	r3, r0
 800315a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 800315e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003162:	4618      	mov	r0, r3
 8003164:	3758      	adds	r7, #88	; 0x58
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	080040d4 	.word	0x080040d4
 8003170:	080040e0 	.word	0x080040e0
 8003174:	080040b8 	.word	0x080040b8
 8003178:	080040c4 	.word	0x080040c4

0800317c <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <Command_Process+0x1e>
 8003190:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <Command_Process+0x104>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	79fa      	ldrb	r2, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d806      	bhi.n	80031a8 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 800319a:	4b3a      	ldr	r3, [pc, #232]	; (8003284 <Command_Process+0x108>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f9a2 	bl	80034e8 <ringBuffer_flush>
		return STATUS_ERROR;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e067      	b.n	8003278 <Command_Process+0xfc>
	}
	else
	{
		if(commandFlag)
 80031a8:	4b37      	ldr	r3, [pc, #220]	; (8003288 <Command_Process+0x10c>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 80031b0:	4b33      	ldr	r3, [pc, #204]	; (8003280 <Command_Process+0x104>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff2f 	bl	8003020 <Send_AT_Command>
			commandFlag = 0;
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <Command_Process+0x10c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <Command_Process+0x104>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4413      	add	r3, r2
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f242 7110 	movw	r1, #10000	; 0x2710
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff53 	bl	8003084 <Wait_Response>
 80031de:	4603      	mov	r3, r0
 80031e0:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 80031e2:	482a      	ldr	r0, [pc, #168]	; (800328c <Command_Process+0x110>)
 80031e4:	f7ff ff3c 	bl	8003060 <Read_Response>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00c      	beq.n	8003208 <Command_Process+0x8c>
			{
				commandFlag = 1;
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <Command_Process+0x10c>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 80031f4:	4b22      	ldr	r3, [pc, #136]	; (8003280 <Command_Process+0x104>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <Command_Process+0x108>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f972 	bl	80034e8 <ringBuffer_flush>
				return STATUS_ERROR;
 8003204:	2303      	movs	r3, #3
 8003206:	e037      	b.n	8003278 <Command_Process+0xfc>
			}
			else if(response == IDLE)
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d101      	bne.n	8003212 <Command_Process+0x96>
			{
				return response;
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	e032      	b.n	8003278 <Command_Process+0xfc>
			}
			else if(response == FOUND)
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d123      	bne.n	8003260 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <Command_Process+0x104>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	3b01      	subs	r3, #1
 8003222:	429a      	cmp	r2, r3
 8003224:	d10c      	bne.n	8003240 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003226:	4b18      	ldr	r3, [pc, #96]	; (8003288 <Command_Process+0x10c>)
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <Command_Process+0x104>)
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <Command_Process+0x108>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f956 	bl	80034e8 <ringBuffer_flush>
					return STATUS_OK;
 800323c:	2302      	movs	r3, #2
 800323e:	e01b      	b.n	8003278 <Command_Process+0xfc>
				}
				else
				{
					commandFlag = 1;
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <Command_Process+0x10c>)
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <Command_Process+0x104>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <Command_Process+0x104>)
 8003250:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <Command_Process+0x108>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f946 	bl	80034e8 <ringBuffer_flush>
					return IDLE;
 800325c:	2304      	movs	r3, #4
 800325e:	e00b      	b.n	8003278 <Command_Process+0xfc>
				}

			}
			else
			{
				commandFlag = 1;
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <Command_Process+0x10c>)
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <Command_Process+0x104>)
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <Command_Process+0x108>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f939 	bl	80034e8 <ringBuffer_flush>
				return response;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200000a8 	.word	0x200000a8
 8003284:	20000144 	.word	0x20000144
 8003288:	2000000c 	.word	0x2000000c
 800328c:	080040ec 	.word	0x080040ec

08003290 <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(char* ip, char* port)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b0a2      	sub	sp, #136	; 0x88
 8003294:	af02      	add	r7, sp, #8
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 800329a:	2304      	movs	r3, #4
 800329c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 80032a0:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <Connect_TCP_Server+0x68>)
 80032a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032aa:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <Connect_TCP_Server+0x6c>)
 80032b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032b8:	e883 0003 	stmia.w	r3, {r0, r1}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 80032bc:	f107 0008 	add.w	r0, r7, #8
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <Connect_TCP_Server+0x70>)
 80032c8:	490e      	ldr	r1, [pc, #56]	; (8003304 <Connect_TCP_Server+0x74>)
 80032ca:	f000 fa4b 	bl	8003764 <siprintf>

	command_buffer[1] = wifi_buffer;
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 80032d4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80032d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032dc:	2202      	movs	r2, #2
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ff4c 	bl	800317c <Command_Process>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 80032ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3780      	adds	r7, #128	; 0x80
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	08004114 	.word	0x08004114
 80032fc:	0800411c 	.word	0x0800411c
 8003300:	080040f4 	.word	0x080040f4
 8003304:	08004108 	.word	0x08004108

08003308 <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b096      	sub	sp, #88	; 0x58
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8003310:	2303      	movs	r3, #3
 8003312:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 8003316:	2300      	movs	r3, #0
 8003318:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fc ff8a 	bl	8000234 <strlen>
 8003320:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 8003322:	f107 001c 	add.w	r0, r7, #28
 8003326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003328:	4a10      	ldr	r2, [pc, #64]	; (800336c <Send_TCP_Message+0x64>)
 800332a:	4911      	ldr	r1, [pc, #68]	; (8003370 <Send_TCP_Message+0x68>)
 800332c:	f000 fa1a 	bl	8003764 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8003330:	f107 031c 	add.w	r3, r7, #28
 8003334:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 800333a:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <Send_TCP_Message+0x6c>)
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003344:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003348:	f107 010c 	add.w	r1, r7, #12
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	2202      	movs	r2, #2
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ff12 	bl	800317c <Command_Process>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 800335e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 8003362:	4618      	mov	r0, r3
 8003364:	3758      	adds	r7, #88	; 0x58
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	08004134 	.word	0x08004134
 8003370:	08004140 	.word	0x08004140
 8003374:	08004148 	.word	0x08004148

08003378 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 8003380:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <Read_TCP_Message+0xc0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	492d      	ldr	r1, [pc, #180]	; (800343c <Read_TCP_Message+0xc4>)
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fa0b 	bl	80037a4 <strstr>
 800338e:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d042      	beq.n	8003424 <Read_TCP_Message+0xac>
	{
		for(uint8_t i=0;i<3;i++)
 800339e:	2300      	movs	r3, #0
 80033a0:	76fb      	strb	r3, [r7, #27]
 80033a2:	e017      	b.n	80033d4 <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 80033a4:	7efb      	ldrb	r3, [r7, #27]
 80033a6:	3305      	adds	r3, #5
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b3a      	cmp	r3, #58	; 0x3a
 80033b0:	d014      	beq.n	80033dc <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 80033b2:	7efb      	ldrb	r3, [r7, #27]
 80033b4:	3305      	adds	r3, #5
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	441a      	add	r2, r3
 80033ba:	7efb      	ldrb	r3, [r7, #27]
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	f107 0120 	add.w	r1, r7, #32
 80033c2:	440b      	add	r3, r1
 80033c4:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 80033ce:	7efb      	ldrb	r3, [r7, #27]
 80033d0:	3301      	adds	r3, #1
 80033d2:	76fb      	strb	r3, [r7, #27]
 80033d4:	7efb      	ldrb	r3, [r7, #27]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d9e4      	bls.n	80033a4 <Read_TCP_Message+0x2c>
 80033da:	e000      	b.n	80033de <Read_TCP_Message+0x66>
				break;
 80033dc:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 80033de:	f107 0308 	add.w	r3, r7, #8
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f8ad 	bl	8003542 <atoi>
 80033e8:	4603      	mov	r3, r0
 80033ea:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<messageLength;i++)
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e00d      	b.n	800340e <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	4413      	add	r3, r2
 80033f8:	3306      	adds	r3, #6
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	441a      	add	r2, r3
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	440b      	add	r3, r1
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<messageLength;i++)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3301      	adds	r3, #1
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	429a      	cmp	r2, r3
 8003414:	d3ed      	bcc.n	80033f2 <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <Read_TCP_Message+0xc0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f864 	bl	80034e8 <ringBuffer_flush>
		return STATUS_OK;
 8003420:	2302      	movs	r3, #2
 8003422:	e005      	b.n	8003430 <Read_TCP_Message+0xb8>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <Read_TCP_Message+0xc0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f85d 	bl	80034e8 <ringBuffer_flush>
		return STATUS_ERROR;
 800342e:	2303      	movs	r3, #3
	}



}
 8003430:	4618      	mov	r0, r3
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000144 	.word	0x20000144
 800343c:	08004150 	.word	0x08004150

08003440 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003448:	2010      	movs	r0, #16
 800344a:	f000 f8b1 	bl	80035b0 <malloc>
 800344e:	4603      	mov	r3, r0
 8003450:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 8003458:	2300      	movs	r3, #0
 800345a:	e017      	b.n	800348c <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 800346e:	2101      	movs	r1, #1
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f86b 	bl	800354c <calloc>
 8003476:	4603      	mov	r3, r0
 8003478:	461a      	mov	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <ringBuffer_init+0x4c>
		}

	return rBuf;
 800348a:	68fb      	ldr	r3, [r7, #12]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d00c      	beq.n	80034c8 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4413      	add	r3, r2
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 80034c6:	e009      	b.n	80034dc <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4413      	add	r3, r2
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68d8      	ldr	r0, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	461a      	mov	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	f000 f860 	bl	80035c0 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	601a      	str	r2, [r3, #0]
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	6839      	ldr	r1, [r7, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f93c 	bl	80037a4 <strstr>
 800352c:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <ringBuffer_lookFor+0x22>
		return 1;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003538:	2300      	movs	r3, #0

}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <atoi>:
 8003542:	220a      	movs	r2, #10
 8003544:	2100      	movs	r1, #0
 8003546:	f000 b9c9 	b.w	80038dc <strtol>
	...

0800354c <calloc>:
 800354c:	4b02      	ldr	r3, [pc, #8]	; (8003558 <calloc+0xc>)
 800354e:	460a      	mov	r2, r1
 8003550:	4601      	mov	r1, r0
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	f000 b83c 	b.w	80035d0 <_calloc_r>
 8003558:	20000010 	.word	0x20000010

0800355c <__errno>:
 800355c:	4b01      	ldr	r3, [pc, #4]	; (8003564 <__errno+0x8>)
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000010 	.word	0x20000010

08003568 <__libc_init_array>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	4d0d      	ldr	r5, [pc, #52]	; (80035a0 <__libc_init_array+0x38>)
 800356c:	4c0d      	ldr	r4, [pc, #52]	; (80035a4 <__libc_init_array+0x3c>)
 800356e:	1b64      	subs	r4, r4, r5
 8003570:	10a4      	asrs	r4, r4, #2
 8003572:	2600      	movs	r6, #0
 8003574:	42a6      	cmp	r6, r4
 8003576:	d109      	bne.n	800358c <__libc_init_array+0x24>
 8003578:	4d0b      	ldr	r5, [pc, #44]	; (80035a8 <__libc_init_array+0x40>)
 800357a:	4c0c      	ldr	r4, [pc, #48]	; (80035ac <__libc_init_array+0x44>)
 800357c:	f000 fd0c 	bl	8003f98 <_init>
 8003580:	1b64      	subs	r4, r4, r5
 8003582:	10a4      	asrs	r4, r4, #2
 8003584:	2600      	movs	r6, #0
 8003586:	42a6      	cmp	r6, r4
 8003588:	d105      	bne.n	8003596 <__libc_init_array+0x2e>
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003590:	4798      	blx	r3
 8003592:	3601      	adds	r6, #1
 8003594:	e7ee      	b.n	8003574 <__libc_init_array+0xc>
 8003596:	f855 3b04 	ldr.w	r3, [r5], #4
 800359a:	4798      	blx	r3
 800359c:	3601      	adds	r6, #1
 800359e:	e7f2      	b.n	8003586 <__libc_init_array+0x1e>
 80035a0:	080042d4 	.word	0x080042d4
 80035a4:	080042d4 	.word	0x080042d4
 80035a8:	080042d4 	.word	0x080042d4
 80035ac:	080042d8 	.word	0x080042d8

080035b0 <malloc>:
 80035b0:	4b02      	ldr	r3, [pc, #8]	; (80035bc <malloc+0xc>)
 80035b2:	4601      	mov	r1, r0
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	f000 b86b 	b.w	8003690 <_malloc_r>
 80035ba:	bf00      	nop
 80035bc:	20000010 	.word	0x20000010

080035c0 <memset>:
 80035c0:	4402      	add	r2, r0
 80035c2:	4603      	mov	r3, r0
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d100      	bne.n	80035ca <memset+0xa>
 80035c8:	4770      	bx	lr
 80035ca:	f803 1b01 	strb.w	r1, [r3], #1
 80035ce:	e7f9      	b.n	80035c4 <memset+0x4>

080035d0 <_calloc_r>:
 80035d0:	b513      	push	{r0, r1, r4, lr}
 80035d2:	434a      	muls	r2, r1
 80035d4:	4611      	mov	r1, r2
 80035d6:	9201      	str	r2, [sp, #4]
 80035d8:	f000 f85a 	bl	8003690 <_malloc_r>
 80035dc:	4604      	mov	r4, r0
 80035de:	b118      	cbz	r0, 80035e8 <_calloc_r+0x18>
 80035e0:	9a01      	ldr	r2, [sp, #4]
 80035e2:	2100      	movs	r1, #0
 80035e4:	f7ff ffec 	bl	80035c0 <memset>
 80035e8:	4620      	mov	r0, r4
 80035ea:	b002      	add	sp, #8
 80035ec:	bd10      	pop	{r4, pc}
	...

080035f0 <_free_r>:
 80035f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035f2:	2900      	cmp	r1, #0
 80035f4:	d048      	beq.n	8003688 <_free_r+0x98>
 80035f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035fa:	9001      	str	r0, [sp, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f1a1 0404 	sub.w	r4, r1, #4
 8003602:	bfb8      	it	lt
 8003604:	18e4      	addlt	r4, r4, r3
 8003606:	f000 f973 	bl	80038f0 <__malloc_lock>
 800360a:	4a20      	ldr	r2, [pc, #128]	; (800368c <_free_r+0x9c>)
 800360c:	9801      	ldr	r0, [sp, #4]
 800360e:	6813      	ldr	r3, [r2, #0]
 8003610:	4615      	mov	r5, r2
 8003612:	b933      	cbnz	r3, 8003622 <_free_r+0x32>
 8003614:	6063      	str	r3, [r4, #4]
 8003616:	6014      	str	r4, [r2, #0]
 8003618:	b003      	add	sp, #12
 800361a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800361e:	f000 b96d 	b.w	80038fc <__malloc_unlock>
 8003622:	42a3      	cmp	r3, r4
 8003624:	d90b      	bls.n	800363e <_free_r+0x4e>
 8003626:	6821      	ldr	r1, [r4, #0]
 8003628:	1862      	adds	r2, r4, r1
 800362a:	4293      	cmp	r3, r2
 800362c:	bf04      	itt	eq
 800362e:	681a      	ldreq	r2, [r3, #0]
 8003630:	685b      	ldreq	r3, [r3, #4]
 8003632:	6063      	str	r3, [r4, #4]
 8003634:	bf04      	itt	eq
 8003636:	1852      	addeq	r2, r2, r1
 8003638:	6022      	streq	r2, [r4, #0]
 800363a:	602c      	str	r4, [r5, #0]
 800363c:	e7ec      	b.n	8003618 <_free_r+0x28>
 800363e:	461a      	mov	r2, r3
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	b10b      	cbz	r3, 8003648 <_free_r+0x58>
 8003644:	42a3      	cmp	r3, r4
 8003646:	d9fa      	bls.n	800363e <_free_r+0x4e>
 8003648:	6811      	ldr	r1, [r2, #0]
 800364a:	1855      	adds	r5, r2, r1
 800364c:	42a5      	cmp	r5, r4
 800364e:	d10b      	bne.n	8003668 <_free_r+0x78>
 8003650:	6824      	ldr	r4, [r4, #0]
 8003652:	4421      	add	r1, r4
 8003654:	1854      	adds	r4, r2, r1
 8003656:	42a3      	cmp	r3, r4
 8003658:	6011      	str	r1, [r2, #0]
 800365a:	d1dd      	bne.n	8003618 <_free_r+0x28>
 800365c:	681c      	ldr	r4, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	6053      	str	r3, [r2, #4]
 8003662:	4421      	add	r1, r4
 8003664:	6011      	str	r1, [r2, #0]
 8003666:	e7d7      	b.n	8003618 <_free_r+0x28>
 8003668:	d902      	bls.n	8003670 <_free_r+0x80>
 800366a:	230c      	movs	r3, #12
 800366c:	6003      	str	r3, [r0, #0]
 800366e:	e7d3      	b.n	8003618 <_free_r+0x28>
 8003670:	6825      	ldr	r5, [r4, #0]
 8003672:	1961      	adds	r1, r4, r5
 8003674:	428b      	cmp	r3, r1
 8003676:	bf04      	itt	eq
 8003678:	6819      	ldreq	r1, [r3, #0]
 800367a:	685b      	ldreq	r3, [r3, #4]
 800367c:	6063      	str	r3, [r4, #4]
 800367e:	bf04      	itt	eq
 8003680:	1949      	addeq	r1, r1, r5
 8003682:	6021      	streq	r1, [r4, #0]
 8003684:	6054      	str	r4, [r2, #4]
 8003686:	e7c7      	b.n	8003618 <_free_r+0x28>
 8003688:	b003      	add	sp, #12
 800368a:	bd30      	pop	{r4, r5, pc}
 800368c:	200000ac 	.word	0x200000ac

08003690 <_malloc_r>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	1ccd      	adds	r5, r1, #3
 8003694:	f025 0503 	bic.w	r5, r5, #3
 8003698:	3508      	adds	r5, #8
 800369a:	2d0c      	cmp	r5, #12
 800369c:	bf38      	it	cc
 800369e:	250c      	movcc	r5, #12
 80036a0:	2d00      	cmp	r5, #0
 80036a2:	4606      	mov	r6, r0
 80036a4:	db01      	blt.n	80036aa <_malloc_r+0x1a>
 80036a6:	42a9      	cmp	r1, r5
 80036a8:	d903      	bls.n	80036b2 <_malloc_r+0x22>
 80036aa:	230c      	movs	r3, #12
 80036ac:	6033      	str	r3, [r6, #0]
 80036ae:	2000      	movs	r0, #0
 80036b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b2:	f000 f91d 	bl	80038f0 <__malloc_lock>
 80036b6:	4921      	ldr	r1, [pc, #132]	; (800373c <_malloc_r+0xac>)
 80036b8:	680a      	ldr	r2, [r1, #0]
 80036ba:	4614      	mov	r4, r2
 80036bc:	b99c      	cbnz	r4, 80036e6 <_malloc_r+0x56>
 80036be:	4f20      	ldr	r7, [pc, #128]	; (8003740 <_malloc_r+0xb0>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	b923      	cbnz	r3, 80036ce <_malloc_r+0x3e>
 80036c4:	4621      	mov	r1, r4
 80036c6:	4630      	mov	r0, r6
 80036c8:	f000 f83c 	bl	8003744 <_sbrk_r>
 80036cc:	6038      	str	r0, [r7, #0]
 80036ce:	4629      	mov	r1, r5
 80036d0:	4630      	mov	r0, r6
 80036d2:	f000 f837 	bl	8003744 <_sbrk_r>
 80036d6:	1c43      	adds	r3, r0, #1
 80036d8:	d123      	bne.n	8003722 <_malloc_r+0x92>
 80036da:	230c      	movs	r3, #12
 80036dc:	6033      	str	r3, [r6, #0]
 80036de:	4630      	mov	r0, r6
 80036e0:	f000 f90c 	bl	80038fc <__malloc_unlock>
 80036e4:	e7e3      	b.n	80036ae <_malloc_r+0x1e>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	1b5b      	subs	r3, r3, r5
 80036ea:	d417      	bmi.n	800371c <_malloc_r+0x8c>
 80036ec:	2b0b      	cmp	r3, #11
 80036ee:	d903      	bls.n	80036f8 <_malloc_r+0x68>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	441c      	add	r4, r3
 80036f4:	6025      	str	r5, [r4, #0]
 80036f6:	e004      	b.n	8003702 <_malloc_r+0x72>
 80036f8:	6863      	ldr	r3, [r4, #4]
 80036fa:	42a2      	cmp	r2, r4
 80036fc:	bf0c      	ite	eq
 80036fe:	600b      	streq	r3, [r1, #0]
 8003700:	6053      	strne	r3, [r2, #4]
 8003702:	4630      	mov	r0, r6
 8003704:	f000 f8fa 	bl	80038fc <__malloc_unlock>
 8003708:	f104 000b 	add.w	r0, r4, #11
 800370c:	1d23      	adds	r3, r4, #4
 800370e:	f020 0007 	bic.w	r0, r0, #7
 8003712:	1ac2      	subs	r2, r0, r3
 8003714:	d0cc      	beq.n	80036b0 <_malloc_r+0x20>
 8003716:	1a1b      	subs	r3, r3, r0
 8003718:	50a3      	str	r3, [r4, r2]
 800371a:	e7c9      	b.n	80036b0 <_malloc_r+0x20>
 800371c:	4622      	mov	r2, r4
 800371e:	6864      	ldr	r4, [r4, #4]
 8003720:	e7cc      	b.n	80036bc <_malloc_r+0x2c>
 8003722:	1cc4      	adds	r4, r0, #3
 8003724:	f024 0403 	bic.w	r4, r4, #3
 8003728:	42a0      	cmp	r0, r4
 800372a:	d0e3      	beq.n	80036f4 <_malloc_r+0x64>
 800372c:	1a21      	subs	r1, r4, r0
 800372e:	4630      	mov	r0, r6
 8003730:	f000 f808 	bl	8003744 <_sbrk_r>
 8003734:	3001      	adds	r0, #1
 8003736:	d1dd      	bne.n	80036f4 <_malloc_r+0x64>
 8003738:	e7cf      	b.n	80036da <_malloc_r+0x4a>
 800373a:	bf00      	nop
 800373c:	200000ac 	.word	0x200000ac
 8003740:	200000b0 	.word	0x200000b0

08003744 <_sbrk_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4d06      	ldr	r5, [pc, #24]	; (8003760 <_sbrk_r+0x1c>)
 8003748:	2300      	movs	r3, #0
 800374a:	4604      	mov	r4, r0
 800374c:	4608      	mov	r0, r1
 800374e:	602b      	str	r3, [r5, #0]
 8003750:	f7fd fa8c 	bl	8000c6c <_sbrk>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d102      	bne.n	800375e <_sbrk_r+0x1a>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	b103      	cbz	r3, 800375e <_sbrk_r+0x1a>
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	200001dc 	.word	0x200001dc

08003764 <siprintf>:
 8003764:	b40e      	push	{r1, r2, r3}
 8003766:	b500      	push	{lr}
 8003768:	b09c      	sub	sp, #112	; 0x70
 800376a:	ab1d      	add	r3, sp, #116	; 0x74
 800376c:	9002      	str	r0, [sp, #8]
 800376e:	9006      	str	r0, [sp, #24]
 8003770:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003774:	4809      	ldr	r0, [pc, #36]	; (800379c <siprintf+0x38>)
 8003776:	9107      	str	r1, [sp, #28]
 8003778:	9104      	str	r1, [sp, #16]
 800377a:	4909      	ldr	r1, [pc, #36]	; (80037a0 <siprintf+0x3c>)
 800377c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003780:	9105      	str	r1, [sp, #20]
 8003782:	6800      	ldr	r0, [r0, #0]
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	a902      	add	r1, sp, #8
 8003788:	f000 f91a 	bl	80039c0 <_svfiprintf_r>
 800378c:	9b02      	ldr	r3, [sp, #8]
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	b01c      	add	sp, #112	; 0x70
 8003794:	f85d eb04 	ldr.w	lr, [sp], #4
 8003798:	b003      	add	sp, #12
 800379a:	4770      	bx	lr
 800379c:	20000010 	.word	0x20000010
 80037a0:	ffff0208 	.word	0xffff0208

080037a4 <strstr>:
 80037a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a6:	780c      	ldrb	r4, [r1, #0]
 80037a8:	b164      	cbz	r4, 80037c4 <strstr+0x20>
 80037aa:	4603      	mov	r3, r0
 80037ac:	781a      	ldrb	r2, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	1c5e      	adds	r6, r3, #1
 80037b2:	b90a      	cbnz	r2, 80037b8 <strstr+0x14>
 80037b4:	4610      	mov	r0, r2
 80037b6:	e005      	b.n	80037c4 <strstr+0x20>
 80037b8:	4294      	cmp	r4, r2
 80037ba:	d108      	bne.n	80037ce <strstr+0x2a>
 80037bc:	460d      	mov	r5, r1
 80037be:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80037c2:	b902      	cbnz	r2, 80037c6 <strstr+0x22>
 80037c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80037ca:	4297      	cmp	r7, r2
 80037cc:	d0f7      	beq.n	80037be <strstr+0x1a>
 80037ce:	4633      	mov	r3, r6
 80037d0:	e7ec      	b.n	80037ac <strstr+0x8>
	...

080037d4 <_strtol_l.isra.0>:
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037da:	d001      	beq.n	80037e0 <_strtol_l.isra.0+0xc>
 80037dc:	2b24      	cmp	r3, #36	; 0x24
 80037de:	d906      	bls.n	80037ee <_strtol_l.isra.0+0x1a>
 80037e0:	f7ff febc 	bl	800355c <__errno>
 80037e4:	2316      	movs	r3, #22
 80037e6:	6003      	str	r3, [r0, #0]
 80037e8:	2000      	movs	r0, #0
 80037ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ee:	4f3a      	ldr	r7, [pc, #232]	; (80038d8 <_strtol_l.isra.0+0x104>)
 80037f0:	468e      	mov	lr, r1
 80037f2:	4676      	mov	r6, lr
 80037f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80037f8:	5de5      	ldrb	r5, [r4, r7]
 80037fa:	f015 0508 	ands.w	r5, r5, #8
 80037fe:	d1f8      	bne.n	80037f2 <_strtol_l.isra.0+0x1e>
 8003800:	2c2d      	cmp	r4, #45	; 0x2d
 8003802:	d134      	bne.n	800386e <_strtol_l.isra.0+0x9a>
 8003804:	f89e 4000 	ldrb.w	r4, [lr]
 8003808:	f04f 0801 	mov.w	r8, #1
 800380c:	f106 0e02 	add.w	lr, r6, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05c      	beq.n	80038ce <_strtol_l.isra.0+0xfa>
 8003814:	2b10      	cmp	r3, #16
 8003816:	d10c      	bne.n	8003832 <_strtol_l.isra.0+0x5e>
 8003818:	2c30      	cmp	r4, #48	; 0x30
 800381a:	d10a      	bne.n	8003832 <_strtol_l.isra.0+0x5e>
 800381c:	f89e 4000 	ldrb.w	r4, [lr]
 8003820:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003824:	2c58      	cmp	r4, #88	; 0x58
 8003826:	d14d      	bne.n	80038c4 <_strtol_l.isra.0+0xf0>
 8003828:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800382c:	2310      	movs	r3, #16
 800382e:	f10e 0e02 	add.w	lr, lr, #2
 8003832:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003836:	f10c 3cff 	add.w	ip, ip, #4294967295
 800383a:	2600      	movs	r6, #0
 800383c:	fbbc f9f3 	udiv	r9, ip, r3
 8003840:	4635      	mov	r5, r6
 8003842:	fb03 ca19 	mls	sl, r3, r9, ip
 8003846:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800384a:	2f09      	cmp	r7, #9
 800384c:	d818      	bhi.n	8003880 <_strtol_l.isra.0+0xac>
 800384e:	463c      	mov	r4, r7
 8003850:	42a3      	cmp	r3, r4
 8003852:	dd24      	ble.n	800389e <_strtol_l.isra.0+0xca>
 8003854:	2e00      	cmp	r6, #0
 8003856:	db1f      	blt.n	8003898 <_strtol_l.isra.0+0xc4>
 8003858:	45a9      	cmp	r9, r5
 800385a:	d31d      	bcc.n	8003898 <_strtol_l.isra.0+0xc4>
 800385c:	d101      	bne.n	8003862 <_strtol_l.isra.0+0x8e>
 800385e:	45a2      	cmp	sl, r4
 8003860:	db1a      	blt.n	8003898 <_strtol_l.isra.0+0xc4>
 8003862:	fb05 4503 	mla	r5, r5, r3, r4
 8003866:	2601      	movs	r6, #1
 8003868:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800386c:	e7eb      	b.n	8003846 <_strtol_l.isra.0+0x72>
 800386e:	2c2b      	cmp	r4, #43	; 0x2b
 8003870:	bf08      	it	eq
 8003872:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003876:	46a8      	mov	r8, r5
 8003878:	bf08      	it	eq
 800387a:	f106 0e02 	addeq.w	lr, r6, #2
 800387e:	e7c7      	b.n	8003810 <_strtol_l.isra.0+0x3c>
 8003880:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003884:	2f19      	cmp	r7, #25
 8003886:	d801      	bhi.n	800388c <_strtol_l.isra.0+0xb8>
 8003888:	3c37      	subs	r4, #55	; 0x37
 800388a:	e7e1      	b.n	8003850 <_strtol_l.isra.0+0x7c>
 800388c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003890:	2f19      	cmp	r7, #25
 8003892:	d804      	bhi.n	800389e <_strtol_l.isra.0+0xca>
 8003894:	3c57      	subs	r4, #87	; 0x57
 8003896:	e7db      	b.n	8003850 <_strtol_l.isra.0+0x7c>
 8003898:	f04f 36ff 	mov.w	r6, #4294967295
 800389c:	e7e4      	b.n	8003868 <_strtol_l.isra.0+0x94>
 800389e:	2e00      	cmp	r6, #0
 80038a0:	da05      	bge.n	80038ae <_strtol_l.isra.0+0xda>
 80038a2:	2322      	movs	r3, #34	; 0x22
 80038a4:	6003      	str	r3, [r0, #0]
 80038a6:	4665      	mov	r5, ip
 80038a8:	b942      	cbnz	r2, 80038bc <_strtol_l.isra.0+0xe8>
 80038aa:	4628      	mov	r0, r5
 80038ac:	e79d      	b.n	80037ea <_strtol_l.isra.0+0x16>
 80038ae:	f1b8 0f00 	cmp.w	r8, #0
 80038b2:	d000      	beq.n	80038b6 <_strtol_l.isra.0+0xe2>
 80038b4:	426d      	negs	r5, r5
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	d0f7      	beq.n	80038aa <_strtol_l.isra.0+0xd6>
 80038ba:	b10e      	cbz	r6, 80038c0 <_strtol_l.isra.0+0xec>
 80038bc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80038c0:	6011      	str	r1, [r2, #0]
 80038c2:	e7f2      	b.n	80038aa <_strtol_l.isra.0+0xd6>
 80038c4:	2430      	movs	r4, #48	; 0x30
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1b3      	bne.n	8003832 <_strtol_l.isra.0+0x5e>
 80038ca:	2308      	movs	r3, #8
 80038cc:	e7b1      	b.n	8003832 <_strtol_l.isra.0+0x5e>
 80038ce:	2c30      	cmp	r4, #48	; 0x30
 80038d0:	d0a4      	beq.n	800381c <_strtol_l.isra.0+0x48>
 80038d2:	230a      	movs	r3, #10
 80038d4:	e7ad      	b.n	8003832 <_strtol_l.isra.0+0x5e>
 80038d6:	bf00      	nop
 80038d8:	08004199 	.word	0x08004199

080038dc <strtol>:
 80038dc:	4613      	mov	r3, r2
 80038de:	460a      	mov	r2, r1
 80038e0:	4601      	mov	r1, r0
 80038e2:	4802      	ldr	r0, [pc, #8]	; (80038ec <strtol+0x10>)
 80038e4:	6800      	ldr	r0, [r0, #0]
 80038e6:	f7ff bf75 	b.w	80037d4 <_strtol_l.isra.0>
 80038ea:	bf00      	nop
 80038ec:	20000010 	.word	0x20000010

080038f0 <__malloc_lock>:
 80038f0:	4801      	ldr	r0, [pc, #4]	; (80038f8 <__malloc_lock+0x8>)
 80038f2:	f000 baf9 	b.w	8003ee8 <__retarget_lock_acquire_recursive>
 80038f6:	bf00      	nop
 80038f8:	200001e4 	.word	0x200001e4

080038fc <__malloc_unlock>:
 80038fc:	4801      	ldr	r0, [pc, #4]	; (8003904 <__malloc_unlock+0x8>)
 80038fe:	f000 baf4 	b.w	8003eea <__retarget_lock_release_recursive>
 8003902:	bf00      	nop
 8003904:	200001e4 	.word	0x200001e4

08003908 <__ssputs_r>:
 8003908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	688e      	ldr	r6, [r1, #8]
 800390e:	429e      	cmp	r6, r3
 8003910:	4682      	mov	sl, r0
 8003912:	460c      	mov	r4, r1
 8003914:	4690      	mov	r8, r2
 8003916:	461f      	mov	r7, r3
 8003918:	d838      	bhi.n	800398c <__ssputs_r+0x84>
 800391a:	898a      	ldrh	r2, [r1, #12]
 800391c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003920:	d032      	beq.n	8003988 <__ssputs_r+0x80>
 8003922:	6825      	ldr	r5, [r4, #0]
 8003924:	6909      	ldr	r1, [r1, #16]
 8003926:	eba5 0901 	sub.w	r9, r5, r1
 800392a:	6965      	ldr	r5, [r4, #20]
 800392c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003934:	3301      	adds	r3, #1
 8003936:	444b      	add	r3, r9
 8003938:	106d      	asrs	r5, r5, #1
 800393a:	429d      	cmp	r5, r3
 800393c:	bf38      	it	cc
 800393e:	461d      	movcc	r5, r3
 8003940:	0553      	lsls	r3, r2, #21
 8003942:	d531      	bpl.n	80039a8 <__ssputs_r+0xa0>
 8003944:	4629      	mov	r1, r5
 8003946:	f7ff fea3 	bl	8003690 <_malloc_r>
 800394a:	4606      	mov	r6, r0
 800394c:	b950      	cbnz	r0, 8003964 <__ssputs_r+0x5c>
 800394e:	230c      	movs	r3, #12
 8003950:	f8ca 3000 	str.w	r3, [sl]
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	f04f 30ff 	mov.w	r0, #4294967295
 8003960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003964:	6921      	ldr	r1, [r4, #16]
 8003966:	464a      	mov	r2, r9
 8003968:	f000 fac0 	bl	8003eec <memcpy>
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003976:	81a3      	strh	r3, [r4, #12]
 8003978:	6126      	str	r6, [r4, #16]
 800397a:	6165      	str	r5, [r4, #20]
 800397c:	444e      	add	r6, r9
 800397e:	eba5 0509 	sub.w	r5, r5, r9
 8003982:	6026      	str	r6, [r4, #0]
 8003984:	60a5      	str	r5, [r4, #8]
 8003986:	463e      	mov	r6, r7
 8003988:	42be      	cmp	r6, r7
 800398a:	d900      	bls.n	800398e <__ssputs_r+0x86>
 800398c:	463e      	mov	r6, r7
 800398e:	4632      	mov	r2, r6
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	4641      	mov	r1, r8
 8003994:	f000 fab8 	bl	8003f08 <memmove>
 8003998:	68a3      	ldr	r3, [r4, #8]
 800399a:	6822      	ldr	r2, [r4, #0]
 800399c:	1b9b      	subs	r3, r3, r6
 800399e:	4432      	add	r2, r6
 80039a0:	60a3      	str	r3, [r4, #8]
 80039a2:	6022      	str	r2, [r4, #0]
 80039a4:	2000      	movs	r0, #0
 80039a6:	e7db      	b.n	8003960 <__ssputs_r+0x58>
 80039a8:	462a      	mov	r2, r5
 80039aa:	f000 fac7 	bl	8003f3c <_realloc_r>
 80039ae:	4606      	mov	r6, r0
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d1e1      	bne.n	8003978 <__ssputs_r+0x70>
 80039b4:	6921      	ldr	r1, [r4, #16]
 80039b6:	4650      	mov	r0, sl
 80039b8:	f7ff fe1a 	bl	80035f0 <_free_r>
 80039bc:	e7c7      	b.n	800394e <__ssputs_r+0x46>
	...

080039c0 <_svfiprintf_r>:
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	4698      	mov	r8, r3
 80039c6:	898b      	ldrh	r3, [r1, #12]
 80039c8:	061b      	lsls	r3, r3, #24
 80039ca:	b09d      	sub	sp, #116	; 0x74
 80039cc:	4607      	mov	r7, r0
 80039ce:	460d      	mov	r5, r1
 80039d0:	4614      	mov	r4, r2
 80039d2:	d50e      	bpl.n	80039f2 <_svfiprintf_r+0x32>
 80039d4:	690b      	ldr	r3, [r1, #16]
 80039d6:	b963      	cbnz	r3, 80039f2 <_svfiprintf_r+0x32>
 80039d8:	2140      	movs	r1, #64	; 0x40
 80039da:	f7ff fe59 	bl	8003690 <_malloc_r>
 80039de:	6028      	str	r0, [r5, #0]
 80039e0:	6128      	str	r0, [r5, #16]
 80039e2:	b920      	cbnz	r0, 80039ee <_svfiprintf_r+0x2e>
 80039e4:	230c      	movs	r3, #12
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	e0d1      	b.n	8003b92 <_svfiprintf_r+0x1d2>
 80039ee:	2340      	movs	r3, #64	; 0x40
 80039f0:	616b      	str	r3, [r5, #20]
 80039f2:	2300      	movs	r3, #0
 80039f4:	9309      	str	r3, [sp, #36]	; 0x24
 80039f6:	2320      	movs	r3, #32
 80039f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a00:	2330      	movs	r3, #48	; 0x30
 8003a02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003bac <_svfiprintf_r+0x1ec>
 8003a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a0a:	f04f 0901 	mov.w	r9, #1
 8003a0e:	4623      	mov	r3, r4
 8003a10:	469a      	mov	sl, r3
 8003a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a16:	b10a      	cbz	r2, 8003a1c <_svfiprintf_r+0x5c>
 8003a18:	2a25      	cmp	r2, #37	; 0x25
 8003a1a:	d1f9      	bne.n	8003a10 <_svfiprintf_r+0x50>
 8003a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a20:	d00b      	beq.n	8003a3a <_svfiprintf_r+0x7a>
 8003a22:	465b      	mov	r3, fp
 8003a24:	4622      	mov	r2, r4
 8003a26:	4629      	mov	r1, r5
 8003a28:	4638      	mov	r0, r7
 8003a2a:	f7ff ff6d 	bl	8003908 <__ssputs_r>
 8003a2e:	3001      	adds	r0, #1
 8003a30:	f000 80aa 	beq.w	8003b88 <_svfiprintf_r+0x1c8>
 8003a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a36:	445a      	add	r2, fp
 8003a38:	9209      	str	r2, [sp, #36]	; 0x24
 8003a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80a2 	beq.w	8003b88 <_svfiprintf_r+0x1c8>
 8003a44:	2300      	movs	r3, #0
 8003a46:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a4e:	f10a 0a01 	add.w	sl, sl, #1
 8003a52:	9304      	str	r3, [sp, #16]
 8003a54:	9307      	str	r3, [sp, #28]
 8003a56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a5a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a5c:	4654      	mov	r4, sl
 8003a5e:	2205      	movs	r2, #5
 8003a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a64:	4851      	ldr	r0, [pc, #324]	; (8003bac <_svfiprintf_r+0x1ec>)
 8003a66:	f7fc fbf3 	bl	8000250 <memchr>
 8003a6a:	9a04      	ldr	r2, [sp, #16]
 8003a6c:	b9d8      	cbnz	r0, 8003aa6 <_svfiprintf_r+0xe6>
 8003a6e:	06d0      	lsls	r0, r2, #27
 8003a70:	bf44      	itt	mi
 8003a72:	2320      	movmi	r3, #32
 8003a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a78:	0711      	lsls	r1, r2, #28
 8003a7a:	bf44      	itt	mi
 8003a7c:	232b      	movmi	r3, #43	; 0x2b
 8003a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a82:	f89a 3000 	ldrb.w	r3, [sl]
 8003a86:	2b2a      	cmp	r3, #42	; 0x2a
 8003a88:	d015      	beq.n	8003ab6 <_svfiprintf_r+0xf6>
 8003a8a:	9a07      	ldr	r2, [sp, #28]
 8003a8c:	4654      	mov	r4, sl
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f04f 0c0a 	mov.w	ip, #10
 8003a94:	4621      	mov	r1, r4
 8003a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a9a:	3b30      	subs	r3, #48	; 0x30
 8003a9c:	2b09      	cmp	r3, #9
 8003a9e:	d94e      	bls.n	8003b3e <_svfiprintf_r+0x17e>
 8003aa0:	b1b0      	cbz	r0, 8003ad0 <_svfiprintf_r+0x110>
 8003aa2:	9207      	str	r2, [sp, #28]
 8003aa4:	e014      	b.n	8003ad0 <_svfiprintf_r+0x110>
 8003aa6:	eba0 0308 	sub.w	r3, r0, r8
 8003aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	9304      	str	r3, [sp, #16]
 8003ab2:	46a2      	mov	sl, r4
 8003ab4:	e7d2      	b.n	8003a5c <_svfiprintf_r+0x9c>
 8003ab6:	9b03      	ldr	r3, [sp, #12]
 8003ab8:	1d19      	adds	r1, r3, #4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	9103      	str	r1, [sp, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	bfbb      	ittet	lt
 8003ac2:	425b      	neglt	r3, r3
 8003ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ac8:	9307      	strge	r3, [sp, #28]
 8003aca:	9307      	strlt	r3, [sp, #28]
 8003acc:	bfb8      	it	lt
 8003ace:	9204      	strlt	r2, [sp, #16]
 8003ad0:	7823      	ldrb	r3, [r4, #0]
 8003ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad4:	d10c      	bne.n	8003af0 <_svfiprintf_r+0x130>
 8003ad6:	7863      	ldrb	r3, [r4, #1]
 8003ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8003ada:	d135      	bne.n	8003b48 <_svfiprintf_r+0x188>
 8003adc:	9b03      	ldr	r3, [sp, #12]
 8003ade:	1d1a      	adds	r2, r3, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	9203      	str	r2, [sp, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bfb8      	it	lt
 8003ae8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003aec:	3402      	adds	r4, #2
 8003aee:	9305      	str	r3, [sp, #20]
 8003af0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003bbc <_svfiprintf_r+0x1fc>
 8003af4:	7821      	ldrb	r1, [r4, #0]
 8003af6:	2203      	movs	r2, #3
 8003af8:	4650      	mov	r0, sl
 8003afa:	f7fc fba9 	bl	8000250 <memchr>
 8003afe:	b140      	cbz	r0, 8003b12 <_svfiprintf_r+0x152>
 8003b00:	2340      	movs	r3, #64	; 0x40
 8003b02:	eba0 000a 	sub.w	r0, r0, sl
 8003b06:	fa03 f000 	lsl.w	r0, r3, r0
 8003b0a:	9b04      	ldr	r3, [sp, #16]
 8003b0c:	4303      	orrs	r3, r0
 8003b0e:	3401      	adds	r4, #1
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b16:	4826      	ldr	r0, [pc, #152]	; (8003bb0 <_svfiprintf_r+0x1f0>)
 8003b18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b1c:	2206      	movs	r2, #6
 8003b1e:	f7fc fb97 	bl	8000250 <memchr>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d038      	beq.n	8003b98 <_svfiprintf_r+0x1d8>
 8003b26:	4b23      	ldr	r3, [pc, #140]	; (8003bb4 <_svfiprintf_r+0x1f4>)
 8003b28:	bb1b      	cbnz	r3, 8003b72 <_svfiprintf_r+0x1b2>
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	3307      	adds	r3, #7
 8003b2e:	f023 0307 	bic.w	r3, r3, #7
 8003b32:	3308      	adds	r3, #8
 8003b34:	9303      	str	r3, [sp, #12]
 8003b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b38:	4433      	add	r3, r6
 8003b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3c:	e767      	b.n	8003a0e <_svfiprintf_r+0x4e>
 8003b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b42:	460c      	mov	r4, r1
 8003b44:	2001      	movs	r0, #1
 8003b46:	e7a5      	b.n	8003a94 <_svfiprintf_r+0xd4>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	3401      	adds	r4, #1
 8003b4c:	9305      	str	r3, [sp, #20]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f04f 0c0a 	mov.w	ip, #10
 8003b54:	4620      	mov	r0, r4
 8003b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b5a:	3a30      	subs	r2, #48	; 0x30
 8003b5c:	2a09      	cmp	r2, #9
 8003b5e:	d903      	bls.n	8003b68 <_svfiprintf_r+0x1a8>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0c5      	beq.n	8003af0 <_svfiprintf_r+0x130>
 8003b64:	9105      	str	r1, [sp, #20]
 8003b66:	e7c3      	b.n	8003af0 <_svfiprintf_r+0x130>
 8003b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e7f0      	b.n	8003b54 <_svfiprintf_r+0x194>
 8003b72:	ab03      	add	r3, sp, #12
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	462a      	mov	r2, r5
 8003b78:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <_svfiprintf_r+0x1f8>)
 8003b7a:	a904      	add	r1, sp, #16
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	f3af 8000 	nop.w
 8003b82:	1c42      	adds	r2, r0, #1
 8003b84:	4606      	mov	r6, r0
 8003b86:	d1d6      	bne.n	8003b36 <_svfiprintf_r+0x176>
 8003b88:	89ab      	ldrh	r3, [r5, #12]
 8003b8a:	065b      	lsls	r3, r3, #25
 8003b8c:	f53f af2c 	bmi.w	80039e8 <_svfiprintf_r+0x28>
 8003b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b92:	b01d      	add	sp, #116	; 0x74
 8003b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b98:	ab03      	add	r3, sp, #12
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	462a      	mov	r2, r5
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <_svfiprintf_r+0x1f8>)
 8003ba0:	a904      	add	r1, sp, #16
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	f000 f87a 	bl	8003c9c <_printf_i>
 8003ba8:	e7eb      	b.n	8003b82 <_svfiprintf_r+0x1c2>
 8003baa:	bf00      	nop
 8003bac:	08004299 	.word	0x08004299
 8003bb0:	080042a3 	.word	0x080042a3
 8003bb4:	00000000 	.word	0x00000000
 8003bb8:	08003909 	.word	0x08003909
 8003bbc:	0800429f 	.word	0x0800429f

08003bc0 <_printf_common>:
 8003bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc4:	4616      	mov	r6, r2
 8003bc6:	4699      	mov	r9, r3
 8003bc8:	688a      	ldr	r2, [r1, #8]
 8003bca:	690b      	ldr	r3, [r1, #16]
 8003bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	bfb8      	it	lt
 8003bd4:	4613      	movlt	r3, r2
 8003bd6:	6033      	str	r3, [r6, #0]
 8003bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bdc:	4607      	mov	r7, r0
 8003bde:	460c      	mov	r4, r1
 8003be0:	b10a      	cbz	r2, 8003be6 <_printf_common+0x26>
 8003be2:	3301      	adds	r3, #1
 8003be4:	6033      	str	r3, [r6, #0]
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	0699      	lsls	r1, r3, #26
 8003bea:	bf42      	ittt	mi
 8003bec:	6833      	ldrmi	r3, [r6, #0]
 8003bee:	3302      	addmi	r3, #2
 8003bf0:	6033      	strmi	r3, [r6, #0]
 8003bf2:	6825      	ldr	r5, [r4, #0]
 8003bf4:	f015 0506 	ands.w	r5, r5, #6
 8003bf8:	d106      	bne.n	8003c08 <_printf_common+0x48>
 8003bfa:	f104 0a19 	add.w	sl, r4, #25
 8003bfe:	68e3      	ldr	r3, [r4, #12]
 8003c00:	6832      	ldr	r2, [r6, #0]
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	42ab      	cmp	r3, r5
 8003c06:	dc26      	bgt.n	8003c56 <_printf_common+0x96>
 8003c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c0c:	1e13      	subs	r3, r2, #0
 8003c0e:	6822      	ldr	r2, [r4, #0]
 8003c10:	bf18      	it	ne
 8003c12:	2301      	movne	r3, #1
 8003c14:	0692      	lsls	r2, r2, #26
 8003c16:	d42b      	bmi.n	8003c70 <_printf_common+0xb0>
 8003c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	4638      	mov	r0, r7
 8003c20:	47c0      	blx	r8
 8003c22:	3001      	adds	r0, #1
 8003c24:	d01e      	beq.n	8003c64 <_printf_common+0xa4>
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	68e5      	ldr	r5, [r4, #12]
 8003c2a:	6832      	ldr	r2, [r6, #0]
 8003c2c:	f003 0306 	and.w	r3, r3, #6
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	bf08      	it	eq
 8003c34:	1aad      	subeq	r5, r5, r2
 8003c36:	68a3      	ldr	r3, [r4, #8]
 8003c38:	6922      	ldr	r2, [r4, #16]
 8003c3a:	bf0c      	ite	eq
 8003c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c40:	2500      	movne	r5, #0
 8003c42:	4293      	cmp	r3, r2
 8003c44:	bfc4      	itt	gt
 8003c46:	1a9b      	subgt	r3, r3, r2
 8003c48:	18ed      	addgt	r5, r5, r3
 8003c4a:	2600      	movs	r6, #0
 8003c4c:	341a      	adds	r4, #26
 8003c4e:	42b5      	cmp	r5, r6
 8003c50:	d11a      	bne.n	8003c88 <_printf_common+0xc8>
 8003c52:	2000      	movs	r0, #0
 8003c54:	e008      	b.n	8003c68 <_printf_common+0xa8>
 8003c56:	2301      	movs	r3, #1
 8003c58:	4652      	mov	r2, sl
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	47c0      	blx	r8
 8003c60:	3001      	adds	r0, #1
 8003c62:	d103      	bne.n	8003c6c <_printf_common+0xac>
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295
 8003c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6c:	3501      	adds	r5, #1
 8003c6e:	e7c6      	b.n	8003bfe <_printf_common+0x3e>
 8003c70:	18e1      	adds	r1, r4, r3
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	2030      	movs	r0, #48	; 0x30
 8003c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c7a:	4422      	add	r2, r4
 8003c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c84:	3302      	adds	r3, #2
 8003c86:	e7c7      	b.n	8003c18 <_printf_common+0x58>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	4638      	mov	r0, r7
 8003c90:	47c0      	blx	r8
 8003c92:	3001      	adds	r0, #1
 8003c94:	d0e6      	beq.n	8003c64 <_printf_common+0xa4>
 8003c96:	3601      	adds	r6, #1
 8003c98:	e7d9      	b.n	8003c4e <_printf_common+0x8e>
	...

08003c9c <_printf_i>:
 8003c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	4691      	mov	r9, r2
 8003ca4:	7e27      	ldrb	r7, [r4, #24]
 8003ca6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ca8:	2f78      	cmp	r7, #120	; 0x78
 8003caa:	4680      	mov	r8, r0
 8003cac:	469a      	mov	sl, r3
 8003cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb2:	d807      	bhi.n	8003cc4 <_printf_i+0x28>
 8003cb4:	2f62      	cmp	r7, #98	; 0x62
 8003cb6:	d80a      	bhi.n	8003cce <_printf_i+0x32>
 8003cb8:	2f00      	cmp	r7, #0
 8003cba:	f000 80d8 	beq.w	8003e6e <_printf_i+0x1d2>
 8003cbe:	2f58      	cmp	r7, #88	; 0x58
 8003cc0:	f000 80a3 	beq.w	8003e0a <_printf_i+0x16e>
 8003cc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ccc:	e03a      	b.n	8003d44 <_printf_i+0xa8>
 8003cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cd2:	2b15      	cmp	r3, #21
 8003cd4:	d8f6      	bhi.n	8003cc4 <_printf_i+0x28>
 8003cd6:	a001      	add	r0, pc, #4	; (adr r0, 8003cdc <_printf_i+0x40>)
 8003cd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cdc:	08003d35 	.word	0x08003d35
 8003ce0:	08003d49 	.word	0x08003d49
 8003ce4:	08003cc5 	.word	0x08003cc5
 8003ce8:	08003cc5 	.word	0x08003cc5
 8003cec:	08003cc5 	.word	0x08003cc5
 8003cf0:	08003cc5 	.word	0x08003cc5
 8003cf4:	08003d49 	.word	0x08003d49
 8003cf8:	08003cc5 	.word	0x08003cc5
 8003cfc:	08003cc5 	.word	0x08003cc5
 8003d00:	08003cc5 	.word	0x08003cc5
 8003d04:	08003cc5 	.word	0x08003cc5
 8003d08:	08003e55 	.word	0x08003e55
 8003d0c:	08003d79 	.word	0x08003d79
 8003d10:	08003e37 	.word	0x08003e37
 8003d14:	08003cc5 	.word	0x08003cc5
 8003d18:	08003cc5 	.word	0x08003cc5
 8003d1c:	08003e77 	.word	0x08003e77
 8003d20:	08003cc5 	.word	0x08003cc5
 8003d24:	08003d79 	.word	0x08003d79
 8003d28:	08003cc5 	.word	0x08003cc5
 8003d2c:	08003cc5 	.word	0x08003cc5
 8003d30:	08003e3f 	.word	0x08003e3f
 8003d34:	680b      	ldr	r3, [r1, #0]
 8003d36:	1d1a      	adds	r2, r3, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	600a      	str	r2, [r1, #0]
 8003d3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0a3      	b.n	8003e90 <_printf_i+0x1f4>
 8003d48:	6825      	ldr	r5, [r4, #0]
 8003d4a:	6808      	ldr	r0, [r1, #0]
 8003d4c:	062e      	lsls	r6, r5, #24
 8003d4e:	f100 0304 	add.w	r3, r0, #4
 8003d52:	d50a      	bpl.n	8003d6a <_printf_i+0xce>
 8003d54:	6805      	ldr	r5, [r0, #0]
 8003d56:	600b      	str	r3, [r1, #0]
 8003d58:	2d00      	cmp	r5, #0
 8003d5a:	da03      	bge.n	8003d64 <_printf_i+0xc8>
 8003d5c:	232d      	movs	r3, #45	; 0x2d
 8003d5e:	426d      	negs	r5, r5
 8003d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d64:	485e      	ldr	r0, [pc, #376]	; (8003ee0 <_printf_i+0x244>)
 8003d66:	230a      	movs	r3, #10
 8003d68:	e019      	b.n	8003d9e <_printf_i+0x102>
 8003d6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d6e:	6805      	ldr	r5, [r0, #0]
 8003d70:	600b      	str	r3, [r1, #0]
 8003d72:	bf18      	it	ne
 8003d74:	b22d      	sxthne	r5, r5
 8003d76:	e7ef      	b.n	8003d58 <_printf_i+0xbc>
 8003d78:	680b      	ldr	r3, [r1, #0]
 8003d7a:	6825      	ldr	r5, [r4, #0]
 8003d7c:	1d18      	adds	r0, r3, #4
 8003d7e:	6008      	str	r0, [r1, #0]
 8003d80:	0628      	lsls	r0, r5, #24
 8003d82:	d501      	bpl.n	8003d88 <_printf_i+0xec>
 8003d84:	681d      	ldr	r5, [r3, #0]
 8003d86:	e002      	b.n	8003d8e <_printf_i+0xf2>
 8003d88:	0669      	lsls	r1, r5, #25
 8003d8a:	d5fb      	bpl.n	8003d84 <_printf_i+0xe8>
 8003d8c:	881d      	ldrh	r5, [r3, #0]
 8003d8e:	4854      	ldr	r0, [pc, #336]	; (8003ee0 <_printf_i+0x244>)
 8003d90:	2f6f      	cmp	r7, #111	; 0x6f
 8003d92:	bf0c      	ite	eq
 8003d94:	2308      	moveq	r3, #8
 8003d96:	230a      	movne	r3, #10
 8003d98:	2100      	movs	r1, #0
 8003d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d9e:	6866      	ldr	r6, [r4, #4]
 8003da0:	60a6      	str	r6, [r4, #8]
 8003da2:	2e00      	cmp	r6, #0
 8003da4:	bfa2      	ittt	ge
 8003da6:	6821      	ldrge	r1, [r4, #0]
 8003da8:	f021 0104 	bicge.w	r1, r1, #4
 8003dac:	6021      	strge	r1, [r4, #0]
 8003dae:	b90d      	cbnz	r5, 8003db4 <_printf_i+0x118>
 8003db0:	2e00      	cmp	r6, #0
 8003db2:	d04d      	beq.n	8003e50 <_printf_i+0x1b4>
 8003db4:	4616      	mov	r6, r2
 8003db6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dba:	fb03 5711 	mls	r7, r3, r1, r5
 8003dbe:	5dc7      	ldrb	r7, [r0, r7]
 8003dc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dc4:	462f      	mov	r7, r5
 8003dc6:	42bb      	cmp	r3, r7
 8003dc8:	460d      	mov	r5, r1
 8003dca:	d9f4      	bls.n	8003db6 <_printf_i+0x11a>
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d10b      	bne.n	8003de8 <_printf_i+0x14c>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	07df      	lsls	r7, r3, #31
 8003dd4:	d508      	bpl.n	8003de8 <_printf_i+0x14c>
 8003dd6:	6923      	ldr	r3, [r4, #16]
 8003dd8:	6861      	ldr	r1, [r4, #4]
 8003dda:	4299      	cmp	r1, r3
 8003ddc:	bfde      	ittt	le
 8003dde:	2330      	movle	r3, #48	; 0x30
 8003de0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003de4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003de8:	1b92      	subs	r2, r2, r6
 8003dea:	6122      	str	r2, [r4, #16]
 8003dec:	f8cd a000 	str.w	sl, [sp]
 8003df0:	464b      	mov	r3, r9
 8003df2:	aa03      	add	r2, sp, #12
 8003df4:	4621      	mov	r1, r4
 8003df6:	4640      	mov	r0, r8
 8003df8:	f7ff fee2 	bl	8003bc0 <_printf_common>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d14c      	bne.n	8003e9a <_printf_i+0x1fe>
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295
 8003e04:	b004      	add	sp, #16
 8003e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e0a:	4835      	ldr	r0, [pc, #212]	; (8003ee0 <_printf_i+0x244>)
 8003e0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	680e      	ldr	r6, [r1, #0]
 8003e14:	061f      	lsls	r7, r3, #24
 8003e16:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e1a:	600e      	str	r6, [r1, #0]
 8003e1c:	d514      	bpl.n	8003e48 <_printf_i+0x1ac>
 8003e1e:	07d9      	lsls	r1, r3, #31
 8003e20:	bf44      	itt	mi
 8003e22:	f043 0320 	orrmi.w	r3, r3, #32
 8003e26:	6023      	strmi	r3, [r4, #0]
 8003e28:	b91d      	cbnz	r5, 8003e32 <_printf_i+0x196>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	f023 0320 	bic.w	r3, r3, #32
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	2310      	movs	r3, #16
 8003e34:	e7b0      	b.n	8003d98 <_printf_i+0xfc>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	f043 0320 	orr.w	r3, r3, #32
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	2378      	movs	r3, #120	; 0x78
 8003e40:	4828      	ldr	r0, [pc, #160]	; (8003ee4 <_printf_i+0x248>)
 8003e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e46:	e7e3      	b.n	8003e10 <_printf_i+0x174>
 8003e48:	065e      	lsls	r6, r3, #25
 8003e4a:	bf48      	it	mi
 8003e4c:	b2ad      	uxthmi	r5, r5
 8003e4e:	e7e6      	b.n	8003e1e <_printf_i+0x182>
 8003e50:	4616      	mov	r6, r2
 8003e52:	e7bb      	b.n	8003dcc <_printf_i+0x130>
 8003e54:	680b      	ldr	r3, [r1, #0]
 8003e56:	6826      	ldr	r6, [r4, #0]
 8003e58:	6960      	ldr	r0, [r4, #20]
 8003e5a:	1d1d      	adds	r5, r3, #4
 8003e5c:	600d      	str	r5, [r1, #0]
 8003e5e:	0635      	lsls	r5, r6, #24
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	d501      	bpl.n	8003e68 <_printf_i+0x1cc>
 8003e64:	6018      	str	r0, [r3, #0]
 8003e66:	e002      	b.n	8003e6e <_printf_i+0x1d2>
 8003e68:	0671      	lsls	r1, r6, #25
 8003e6a:	d5fb      	bpl.n	8003e64 <_printf_i+0x1c8>
 8003e6c:	8018      	strh	r0, [r3, #0]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6123      	str	r3, [r4, #16]
 8003e72:	4616      	mov	r6, r2
 8003e74:	e7ba      	b.n	8003dec <_printf_i+0x150>
 8003e76:	680b      	ldr	r3, [r1, #0]
 8003e78:	1d1a      	adds	r2, r3, #4
 8003e7a:	600a      	str	r2, [r1, #0]
 8003e7c:	681e      	ldr	r6, [r3, #0]
 8003e7e:	6862      	ldr	r2, [r4, #4]
 8003e80:	2100      	movs	r1, #0
 8003e82:	4630      	mov	r0, r6
 8003e84:	f7fc f9e4 	bl	8000250 <memchr>
 8003e88:	b108      	cbz	r0, 8003e8e <_printf_i+0x1f2>
 8003e8a:	1b80      	subs	r0, r0, r6
 8003e8c:	6060      	str	r0, [r4, #4]
 8003e8e:	6863      	ldr	r3, [r4, #4]
 8003e90:	6123      	str	r3, [r4, #16]
 8003e92:	2300      	movs	r3, #0
 8003e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e98:	e7a8      	b.n	8003dec <_printf_i+0x150>
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	4632      	mov	r2, r6
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	4640      	mov	r0, r8
 8003ea2:	47d0      	blx	sl
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d0ab      	beq.n	8003e00 <_printf_i+0x164>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	079b      	lsls	r3, r3, #30
 8003eac:	d413      	bmi.n	8003ed6 <_printf_i+0x23a>
 8003eae:	68e0      	ldr	r0, [r4, #12]
 8003eb0:	9b03      	ldr	r3, [sp, #12]
 8003eb2:	4298      	cmp	r0, r3
 8003eb4:	bfb8      	it	lt
 8003eb6:	4618      	movlt	r0, r3
 8003eb8:	e7a4      	b.n	8003e04 <_printf_i+0x168>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	4632      	mov	r2, r6
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	47d0      	blx	sl
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d09b      	beq.n	8003e00 <_printf_i+0x164>
 8003ec8:	3501      	adds	r5, #1
 8003eca:	68e3      	ldr	r3, [r4, #12]
 8003ecc:	9903      	ldr	r1, [sp, #12]
 8003ece:	1a5b      	subs	r3, r3, r1
 8003ed0:	42ab      	cmp	r3, r5
 8003ed2:	dcf2      	bgt.n	8003eba <_printf_i+0x21e>
 8003ed4:	e7eb      	b.n	8003eae <_printf_i+0x212>
 8003ed6:	2500      	movs	r5, #0
 8003ed8:	f104 0619 	add.w	r6, r4, #25
 8003edc:	e7f5      	b.n	8003eca <_printf_i+0x22e>
 8003ede:	bf00      	nop
 8003ee0:	080042aa 	.word	0x080042aa
 8003ee4:	080042bb 	.word	0x080042bb

08003ee8 <__retarget_lock_acquire_recursive>:
 8003ee8:	4770      	bx	lr

08003eea <__retarget_lock_release_recursive>:
 8003eea:	4770      	bx	lr

08003eec <memcpy>:
 8003eec:	440a      	add	r2, r1
 8003eee:	4291      	cmp	r1, r2
 8003ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ef4:	d100      	bne.n	8003ef8 <memcpy+0xc>
 8003ef6:	4770      	bx	lr
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f02:	4291      	cmp	r1, r2
 8003f04:	d1f9      	bne.n	8003efa <memcpy+0xe>
 8003f06:	bd10      	pop	{r4, pc}

08003f08 <memmove>:
 8003f08:	4288      	cmp	r0, r1
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	eb01 0402 	add.w	r4, r1, r2
 8003f10:	d902      	bls.n	8003f18 <memmove+0x10>
 8003f12:	4284      	cmp	r4, r0
 8003f14:	4623      	mov	r3, r4
 8003f16:	d807      	bhi.n	8003f28 <memmove+0x20>
 8003f18:	1e43      	subs	r3, r0, #1
 8003f1a:	42a1      	cmp	r1, r4
 8003f1c:	d008      	beq.n	8003f30 <memmove+0x28>
 8003f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f26:	e7f8      	b.n	8003f1a <memmove+0x12>
 8003f28:	4402      	add	r2, r0
 8003f2a:	4601      	mov	r1, r0
 8003f2c:	428a      	cmp	r2, r1
 8003f2e:	d100      	bne.n	8003f32 <memmove+0x2a>
 8003f30:	bd10      	pop	{r4, pc}
 8003f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f3a:	e7f7      	b.n	8003f2c <memmove+0x24>

08003f3c <_realloc_r>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	4607      	mov	r7, r0
 8003f40:	4614      	mov	r4, r2
 8003f42:	460e      	mov	r6, r1
 8003f44:	b921      	cbnz	r1, 8003f50 <_realloc_r+0x14>
 8003f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	f7ff bba0 	b.w	8003690 <_malloc_r>
 8003f50:	b922      	cbnz	r2, 8003f5c <_realloc_r+0x20>
 8003f52:	f7ff fb4d 	bl	80035f0 <_free_r>
 8003f56:	4625      	mov	r5, r4
 8003f58:	4628      	mov	r0, r5
 8003f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f5c:	f000 f814 	bl	8003f88 <_malloc_usable_size_r>
 8003f60:	42a0      	cmp	r0, r4
 8003f62:	d20f      	bcs.n	8003f84 <_realloc_r+0x48>
 8003f64:	4621      	mov	r1, r4
 8003f66:	4638      	mov	r0, r7
 8003f68:	f7ff fb92 	bl	8003690 <_malloc_r>
 8003f6c:	4605      	mov	r5, r0
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d0f2      	beq.n	8003f58 <_realloc_r+0x1c>
 8003f72:	4631      	mov	r1, r6
 8003f74:	4622      	mov	r2, r4
 8003f76:	f7ff ffb9 	bl	8003eec <memcpy>
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4638      	mov	r0, r7
 8003f7e:	f7ff fb37 	bl	80035f0 <_free_r>
 8003f82:	e7e9      	b.n	8003f58 <_realloc_r+0x1c>
 8003f84:	4635      	mov	r5, r6
 8003f86:	e7e7      	b.n	8003f58 <_realloc_r+0x1c>

08003f88 <_malloc_usable_size_r>:
 8003f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f8c:	1f18      	subs	r0, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bfbc      	itt	lt
 8003f92:	580b      	ldrlt	r3, [r1, r0]
 8003f94:	18c0      	addlt	r0, r0, r3
 8003f96:	4770      	bx	lr

08003f98 <_init>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr

08003fa4 <_fini>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	bf00      	nop
 8003fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003faa:	bc08      	pop	{r3}
 8003fac:	469e      	mov	lr, r3
 8003fae:	4770      	bx	lr
